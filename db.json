{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":1},{"_id":"themes/maupassant/source/js/mindmap.js","path":"js/mindmap.js","modified":1},{"_id":"themes/maupassant/source/js/kityminder.core.min.js","path":"js/kityminder.core.min.js","modified":1},{"_id":"themes/maupassant/source/js/kityminder.core.js","path":"js/kityminder.core.js","modified":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":1},{"_id":"themes/maupassant/source/js/busuanzi.pure.mini.js","path":"js/busuanzi.pure.mini.js","modified":1},{"_id":"themes/maupassant/source/image/code-bk.png","path":"image/code-bk.png","modified":1},{"_id":"themes/maupassant/source/image/bg2.jpg","path":"image/bg2.jpg","modified":1},{"_id":"themes/maupassant/source/image/bg.jpg","path":"image/bg.jpg","modified":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1},{"_id":"themes/maupassant/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":1},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","path":"css/jquery.fancybox.css","modified":1},{"_id":"themes/maupassant/source/css/donate.css","path":"css/donate.css","modified":1},{"_id":"source/about/me.jpg","path":"about/me.jpg","modified":1}],"Cache":[{"_id":"source/_drafts/HandlerAdapter.md","shasum":"6b158b7aeee221f8061eb6b4a1c9d9b425f10dfd","modified":1486026616950},{"_id":"source/_drafts/HandlerMapping.md","shasum":"0b31a2ccefea8ffdc45a0cfbbe86a17d0e191120","modified":1486026616455},{"_id":"source/_drafts/HandlerMethodArgumentResolver.md","shasum":"89ef795e0a454abc2b8ab1a4602a06e63e7090c9","modified":1486026615892},{"_id":"source/_drafts/P98.md","shasum":"a8f30bd85af4f5b902a1190d819d0408719e5db3","modified":1486026612590},{"_id":"source/_drafts/ServletInvocableHandlerMethod.md","shasum":"54027057fe494fec6b13e30935ce24bfa797ca49","modified":1486026610069},{"_id":"source/_drafts/WeakHashMap.md","shasum":"d99a909ae7202e1db8bdb8acf844430f668724c1","modified":1486026608000},{"_id":"source/_drafts/burpsuite-https.md","shasum":"df710b76eb675061e25995db331ce669ed9a8873","modified":1486026620923},{"_id":"source/_drafts/classloader.md","shasum":"7d645a1d6baff12c0f0349c48b1ea494540a7b3d","modified":1486026620467},{"_id":"source/_drafts/custom-editor.md","shasum":"bf47c0c52d146ab637b56261334a5cc1f1a5d4bb","modified":1486287798727},{"_id":"source/_drafts/diffy.md","shasum":"a792f018d6dcd4ca17621ccdb0a2204dfab25b50","modified":1486026619417},{"_id":"source/_drafts/digester.md","shasum":"1a034093a461e66f34dc9988381dfeeb7f68f2c9","modified":1486026618975},{"_id":"source/_drafts/dozer.md","shasum":"1e396ad3e3ec5fc7c7604f6b309becd82231ad93","modified":1486026618443},{"_id":"source/_drafts/factorybean.md","shasum":"4db00bbb795af2d5f7543cb8d5cf1a2929c3a6c3","modified":1486026617954},{"_id":"source/_drafts/getting-started-with-system.md","shasum":"ea6c62ac6bbb34a7c3e22b8b236638e2558b023d","modified":1486026617435},{"_id":"source/_drafts/http/10-21-http-request.png","shasum":"7139d7e857c470ffbd789f0de3a166825685c988","modified":1486288788120},{"_id":"source/_drafts/http/http_request_message.png","shasum":"c7714d5d9acedc28c3ca56d804a2fa243ad67388","modified":1486288411775},{"_id":"source/_drafts/http.md","shasum":"7fe2d906489a52ff2ea6fef07d4c60709626583a","modified":1486288914012},{"_id":"source/_drafts/idea-plugins.md","shasum":"61011f3936da0fb5e8cc4f16d059d9b823144a66","modified":1486026587515},{"_id":"source/_drafts/impress-js.md","shasum":"78f06ee11530494fcf7b89669c00b2a9fd99332a","modified":1486026586783},{"_id":"source/_drafts/inode.md","shasum":"e970a4d517a0f6c54ec9c4c3ab0ec46866380d72","modified":1486026586051},{"_id":"source/_drafts/jackson-custom.md","shasum":"5a6803126575658c331f0e928b0295d74d680ec9","modified":1486026585269},{"_id":"source/_drafts/java-URL.md","shasum":"9051336c25fee92c23e6b557e987fefbf17f1c26","modified":1486026614200},{"_id":"source/_drafts/java-introspector.md","shasum":"5552c6be8fbb42f672d6622e252ac357241be13f","modified":1486026584574},{"_id":"source/_drafts/java-object-diff.md","shasum":"5ac809cf9091006fe1ce3ae5d3b89db96f5b239e","modified":1486026625743},{"_id":"source/_drafts/java-proxy.md","shasum":"36461c03443183e7591564c7d55fa92211eef3f3","modified":1486026614625},{"_id":"source/_drafts/kibana.md","shasum":"4eac82f0861870a0b08603f3ec762a2149017522","modified":1486026613788},{"_id":"source/_drafts/logback.md","shasum":"9290a439fb330d3dd939b24e76680a6bd43b661c","modified":1486032970237},{"_id":"source/_drafts/murmur.md","shasum":"71bb1eea755ef431c81afc111216998330e75fac","modified":1486023553700},{"_id":"source/_drafts/netty.md","shasum":"2cace07b37e8d0ce3786d3a60836d93ccd7aff9b","modified":1486034628691},{"_id":"source/_drafts/protobuf.md","shasum":"22c0bcbed8e62de254f9b3730b14af633ced52ac","modified":1486026612143},{"_id":"source/_drafts/python-json.md","shasum":"ff0a9a1ff1517e6c793b3ae3bf191d5561de06a5","modified":1486026611682},{"_id":"source/_drafts/ratelimiter.md","shasum":"8e0e45dddd81822e358904044da58551fce91353","modified":1486026611158},{"_id":"source/_drafts/rpc.md","shasum":"9599a8d6a1bc0325afddf7770aa655f1a11fb515","modified":1486026621572},{"_id":"source/_drafts/servlet-async.md","shasum":"b30acfeaed7cd0ab1194c7ea5ed3d6f9dd51b993","modified":1486033204239},{"_id":"source/_drafts/ssh.md","shasum":"207b03f845c936373e754ecdf16e02177ced1682","modified":1486026609425},{"_id":"source/_drafts/task.md","shasum":"7c42624cc3d8815e2051c1a9c7b0e00ae8c8a653","modified":1486034604455},{"_id":"source/_drafts/tomcat-arch.md","shasum":"226cd452804154b909e753be60ff710e0e739164","modified":1486032914683},{"_id":"source/_drafts/vim.md","shasum":"b6b0f0ebfb26dfe3571ec99c2515014f3c22faf1","modified":1486026608530},{"_id":"source/_drafts/zookeeper.md","shasum":"d2fe578ce2d053a93a2d1169b404ab365b3f25ca","modified":1486026607377},{"_id":"source/_posts/CLIP.md","shasum":"f10be687c9ca277f5ec57f67f487100def9c6870","modified":1486026605786},{"_id":"source/_posts/HttpMessageConverter/inherit.jpg","shasum":"1776d8f3e17b516ecc36fb3c55a398e6348760d7","modified":1480358925426},{"_id":"source/_posts/HttpMessageConverter.md","shasum":"e737ad34d5c3230467d2355aa60eae7f0f96ef3f","modified":1486023553670},{"_id":"source/_posts/Spring-mvc-exception.md","shasum":"01514b1309720fb660f961bdce0b2f0c8bf74a7e","modified":1486026590755},{"_id":"source/_posts/atnode.md","shasum":"737bc2a88698bfe2517255c2586bed8ea22d9a59","modified":1486026607017},{"_id":"source/_posts/base64/encoding.jpg","shasum":"5ed8de255bfe78f23b7cc920171655a4487a509b","modified":1474874531606},{"_id":"source/_posts/base64/encoding2.jpg","shasum":"da197012f219ae5c3cacf049e0d15e9c9693c981","modified":1474874848223},{"_id":"source/_posts/base64.md","shasum":"c24be12225ea0ecd6a36efefaac5b3d3a3a57ca2","modified":1486026606541},{"_id":"source/_posts/character-encoding/Unicode_logo.jpg","shasum":"8ca31a7bd95ffb6a1aa6456c1b0970e1a5458fd7","modified":1474991148859},{"_id":"source/_posts/character-encoding/emoji.jpg","shasum":"e4e05e46031c997ddd9b3d53a385c6d653963cd6","modified":1475050573543},{"_id":"source/_posts/character-encoding/unicode-layout.jpg","shasum":"59c7ccbffd30aeb97f811b67a9f94a0f5c1bb5e0","modified":1474992935333},{"_id":"source/_posts/character-encoding.md","shasum":"e36705aceac3030a9b25b017d84606670a5058bf","modified":1486026606138},{"_id":"source/_posts/custom-tag.md","shasum":"b61b64049e61734e281e1b147b5bd51982e730e3","modified":1486026605381},{"_id":"source/_posts/fabric.md","shasum":"b525d21115be642ba893831f44501fc1f912a132","modified":1486026604885},{"_id":"source/_posts/grep/color.jpg","shasum":"9b1ae87a35402005befa583795e231ccc49dca29","modified":1481040774761},{"_id":"source/_posts/grep/egrep.jpg","shasum":"d13cb7333887eb76541f6ffb9a294c1d9404942e","modified":1481040774774},{"_id":"source/_posts/grep.md","shasum":"61c1fb50ab501f54d7a8eefd577e52e2c6f7f30c","modified":1486026604541},{"_id":"source/_posts/guava-eventbus.md","shasum":"61628164ec0d2ffcd2118a7b100428f51103cdd6","modified":1486026604092},{"_id":"source/_posts/hello-world.md","shasum":"2d10db77ee03e4efd1e94f95905dce710ebb2b1c","modified":1486026603650},{"_id":"source/_posts/idea-template/profiles.jpg","shasum":"cc82791405ece2982b41af9f5eebd9ebf2009708","modified":1482426659488},{"_id":"source/_posts/idea-template.md","shasum":"547f0dcb88384180c1153f85c1241405c3e00bca","modified":1486026603085},{"_id":"source/_posts/jackson-guava.md","shasum":"a564ce2a7615f99edae1511f309dbcbe405cb179","modified":1486026602524},{"_id":"source/_posts/jar.md","shasum":"560e9f90930400b814c58ea75a6490fa3ec3d3fd","modified":1486026602021},{"_id":"source/_posts/java-exception.md","shasum":"8670b95389431da90997c7e47f96106f61b64d00","modified":1486023553620},{"_id":"source/_posts/java-permission-control.md","shasum":"b4ad141feebb501d280685373e997fd44e79536c","modified":1486026601544},{"_id":"source/_posts/javadoc.md","shasum":"889cf8d4fdf2147c48b3d9b15638f8a83054baf0","modified":1486026601047},{"_id":"source/_posts/jsonp/cors.png","shasum":"03174e532d5fab79c1d9fd0a00139d4978443df0","modified":1475379733169},{"_id":"source/_posts/jsonp/sample.png","shasum":"5c66eed23ecf164fca1d7f1f71eb2bd33d85c770","modified":1475379733170},{"_id":"source/_posts/jsonp.md","shasum":"b3e72ad6ac2cb8acd4b7ad1cf0a29291daa1d4cb","modified":1486026600502},{"_id":"source/_posts/machine_learning.md","shasum":"02ae43cbea6f0e68fc88a96c9733afb9eb63a6ad","modified":1486026599953},{"_id":"source/_posts/markdown-here/additional.jpg","shasum":"9a7c6f51d83ac4815c661411786d5a4307923e62","modified":1483344615289},{"_id":"source/_posts/markdown-here/mail.jpg","shasum":"a89f7167ca6b1fe12b2e949f7290f26e273edebf","modified":1483344615292},{"_id":"source/_posts/markdown-here.md","shasum":"312eff7f96030b1deefa25a38f681205329901b7","modified":1486026599500},{"_id":"source/_posts/markdown-mindmap/sample.jpg","shasum":"ebbde815a587d2a0a38ecada7ba9d54723905484","modified":1483281933843},{"_id":"source/_posts/markdown-mindmap.md","shasum":"b76583dd6f4b8f5c8293783fa039e1b1d352c7fa","modified":1486026599040},{"_id":"source/_posts/mysql-time.md","shasum":"3492202ccd87beb3ec67ecb655680285d6906b63","modified":1486026598537},{"_id":"source/_posts/nc.md","shasum":"7ac7258355e115952260491fa8ca8b7c1e1a966d","modified":1486026598010},{"_id":"source/_posts/pagination.md","shasum":"875343f210bdb4ea7ba980a3d979077196996533","modified":1486026597536},{"_id":"source/_posts/pip.md","shasum":"9325daf04ef13e326e68051080dd96e6833a66e9","modified":1486026597018},{"_id":"source/_posts/plantuml.md","shasum":"4b03760c11547146108b37e6940540e696431bc5","modified":1486026596547},{"_id":"source/_posts/postgre/history.jpg","shasum":"b40a177bc06fe594dbbf51ead88b1949d11ae5da","modified":1474959657307},{"_id":"source/_posts/postgre.md","shasum":"0d60a3e1d78184c7e970a331a85e05aa794a687a","modified":1486026596009},{"_id":"source/_posts/property-placeholder/hierarchy.jpg","shasum":"df248929441da0b2bdbe7afbf56d4729ae8f524d","modified":1477844543984},{"_id":"source/_posts/property-placeholder/location.jpg","shasum":"cf8a3be6950b18df2310584921d7058f45b4ffcf","modified":1477844543987},{"_id":"source/_posts/property-placeholder.md","shasum":"4d2779dc6e6d05f4172118ee7134ee3305e3b338","modified":1486026595412},{"_id":"source/_posts/python-util.md","shasum":"5b7c425739d2f5315de5156c668bdada54b00539","modified":1486026594852},{"_id":"source/_posts/re.md","shasum":"2434eaeec7b79ce96ab38fecd656b547d81e5f9f","modified":1486026594268},{"_id":"source/_posts/shadowsocks.md","shasum":"0269386f0dae7a5920fd177a6ffac4d6092782ed","modified":1486026593024},{"_id":"source/_posts/spi.md","shasum":"55c2754f9465ab49e4d2200acba43bae6748a4f5","modified":1486026592296},{"_id":"source/_posts/spring-mockMvc.md","shasum":"48cf6e01fff39a2639a51dcf22760100ed5f78aa","modified":1486026591532},{"_id":"source/_posts/spring-mvc/Servlet_LifeCycle.jpg","shasum":"ec5a5ed7867fd6fd38c21edd4bd4336a39446614","modified":1475417665207},{"_id":"source/_posts/spring-mvc/hierachy.jpg","shasum":"d2791a173d265df7a59e2a1a83f86bbb93a949b4","modified":1475417665210},{"_id":"source/_posts/spring-mvc/servlet-interface.jpg","shasum":"362e1f8d17678f77285a987de921dc70a2647454","modified":1475417665215},{"_id":"source/_posts/spring-mvc.md","shasum":"5996526671dddef0230e4bdfd8ba080f39c2abf0","modified":1486023553559},{"_id":"source/_posts/spring-resource.md","shasum":"465727c35db359dc6b251109160b4b0b2aa044ff","modified":1486026589793},{"_id":"source/_posts/spring-resource/resource.jpg","shasum":"f45bcaa3dd495300355ff09830a1500c36c71870","modified":1479643934397},{"_id":"source/_posts/ssh-passwd-free.md","shasum":"10e5bed694aca64b4a284b64d012f618f50931f4","modified":1486026589102},{"_id":"source/_posts/tomcat-AbstractMethodError.md","shasum":"fc6544a71ea2af202bb539ac3fe8388351982417","modified":1486026588273},{"_id":"source/_posts/tomcat-access-log.md","shasum":"5d37f34d71f3bf8021a94d79f252543fb8274ba0","modified":1486026559349},{"_id":"source/_posts/tomcat-encoding.md","shasum":"fdb09505020ea32c26eaf939b1e1db9a8217571d","modified":1486026557711},{"_id":"source/_posts/tomcat-stringmanager.md","shasum":"b350338ef96dc84803d8e1bda66dffbd707263db","modified":1486313103012},{"_id":"source/_posts/web-xml.md","shasum":"4dac758e080965ba6a68f0d7c53b61dedf03ccb7","modified":1484373994798},{"_id":"source/_posts/xstream.md","shasum":"fe9623cc39b35f44db78382010ee9eca50ded827","modified":1486026549348},{"_id":"source/about/index.md","shasum":"d755f073c3225a1f18388575ed55498a1a937edb","modified":1484498111981},{"_id":"source/about/me.jpg","shasum":"231a9ce95dd1e61033737bd5ed5631f1607590bb","modified":1483290214556},{"_id":"source/recommendation/index.md","shasum":"1b993ce47823abb966201aedc0edec5d16fdd146","modified":1483290842096},{"_id":"source/tags/index.md","shasum":"279e590647b1cce4055de9e16aca93fcb3d7662b","modified":1474646861453},{"_id":"themes/maupassant/LICENSE","shasum":"019dc6a9aba02ae3aaabca45f39aecd6e8e7f1d8","modified":1482582323264},{"_id":"themes/maupassant/README.md","shasum":"75d8c42569809961953d1934de445418c00ab94c","modified":1482582323264},{"_id":"themes/maupassant/_config.yml","shasum":"22863d821869797fe83350cdf5a58ec7b7af9c72","modified":1483346629335},{"_id":"themes/maupassant/languages/de-DE.yml","shasum":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1482582323264},{"_id":"themes/maupassant/languages/en.yml","shasum":"1f3d723b25e60218e1a61dc445bf0fa38275ba7e","modified":1483289352839},{"_id":"themes/maupassant/languages/es-ES.yml","shasum":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1482582323264},{"_id":"themes/maupassant/languages/fr-FR.yml","shasum":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1482582323279},{"_id":"themes/maupassant/languages/ko.yml","shasum":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1482582323279},{"_id":"themes/maupassant/languages/zh-CN.yml","shasum":"abe10bac7d46b45da3305d9b405b05b32b733b86","modified":1483289363982},{"_id":"themes/maupassant/languages/zh-TW.yml","shasum":"56b65995c60e99dcebbf00168447fd225d28e5b2","modified":1482582323279},{"_id":"themes/maupassant/layout/_partial/after_footer.jade","shasum":"3dbcc9a9f0d6e55da191d3393c18bbfcfe99fa69","modified":1482582323279},{"_id":"themes/maupassant/layout/_partial/comments.jade","shasum":"6c7f63ba04a4d28323ba31e79a4927f3d3fcc56e","modified":1482582323279},{"_id":"themes/maupassant/layout/_partial/donate.jade","shasum":"3ad68807f5da92a968fd75f68bc98a3aece77a73","modified":1483283744270},{"_id":"themes/maupassant/layout/_partial/footer.jade","shasum":"9ecae84d8534eb2006b3da0e0e63a5091e4a47f5","modified":1483286845553},{"_id":"themes/maupassant/layout/_partial/helpers.jade","shasum":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1482582323279},{"_id":"themes/maupassant/layout/_partial/mathjax.jade","shasum":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1482582323279},{"_id":"themes/maupassant/layout/_partial/mathjax2.jade","shasum":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1482582323279},{"_id":"themes/maupassant/layout/_partial/paginator.jade","shasum":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1482582323279},{"_id":"themes/maupassant/layout/_partial/post_nav.jade","shasum":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1482582323279},{"_id":"themes/maupassant/layout/_partial/tag.jade","shasum":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1482582323279},{"_id":"themes/maupassant/layout/_partial/totop.jade","shasum":"c1bc6236e1d34c61476e8b106385d6a7186a333d","modified":1483210270513},{"_id":"themes/maupassant/layout/_widget/category.jade","shasum":"7c6aed762934ca51aa2669b886254da24b77bc14","modified":1482582323279},{"_id":"themes/maupassant/layout/_widget/github-card.jade","shasum":"3cefc441c22fe476ca817adc9700b9aaa346d943","modified":1482609420060},{"_id":"themes/maupassant/layout/_widget/links.jade","shasum":"f57a0c76d243882b2b77330132bdb43bc648948b","modified":1482582323279},{"_id":"themes/maupassant/layout/_widget/recent_comments.jade","shasum":"e119c5afa85abc60d139e2da99b0bfcd7a6530f8","modified":1482582323279},{"_id":"themes/maupassant/layout/_widget/recent_posts.jade","shasum":"19431336d724d2118e46da43683bce9063176541","modified":1482582323279},{"_id":"themes/maupassant/layout/_widget/search.jade","shasum":"193546282908e499813534f86d27ef6e0a1357b3","modified":1482582323279},{"_id":"themes/maupassant/layout/_widget/tag.jade","shasum":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1482582323279},{"_id":"themes/maupassant/layout/_widget/uv.jade","shasum":"8bd4b71792e4d7f662156074d374064d43df93d3","modified":1483898770686},{"_id":"themes/maupassant/layout/archive.jade","shasum":"0050c883b4f202add71c8664d65e6072179e7190","modified":1482582323279},{"_id":"themes/maupassant/layout/base-without-sidebar.jade","shasum":"690fee04231b2e6721580516849f7b80cf42be94","modified":1482582323279},{"_id":"themes/maupassant/layout/base.jade","shasum":"04988d01f2bea2896208c8af5c171f384a3bc47f","modified":1483283501916},{"_id":"themes/maupassant/layout/index.jade","shasum":"f842164f6cba007c1dfcd7fe7bba24736bc886a9","modified":1482582323279},{"_id":"themes/maupassant/layout/page.jade","shasum":"8d70fd3b93f2c9087a9ea7ec538dcc1d413bea01","modified":1482582323279},{"_id":"themes/maupassant/layout/post.jade","shasum":"6443511a176f320fe46edae0b4a985cf8778a3bc","modified":1483350657085},{"_id":"themes/maupassant/layout/single-column.jade","shasum":"c35fff4d9b331a41af5bc10f4278ec3d9da503db","modified":1482582323279},{"_id":"themes/maupassant/layout/timeline.jade","shasum":"f03d8df63a188543cfe4e85e76194abe081411a1","modified":1482582323279},{"_id":"themes/maupassant/package.json","shasum":"81fb4e2ac051ecfb9a93f37b28910291b939771a","modified":1482582323279},{"_id":"themes/maupassant/source/css/donate.css","shasum":"f6c2b20167f3ae5ff5d3e55c2edd72a134456436","modified":1483283456679},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","shasum":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1482582323279},{"_id":"themes/maupassant/source/css/style.scss","shasum":"201d9f413609af42e686eac355d64820396cbeff","modified":1485511376187},{"_id":"themes/maupassant/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1482582323296},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1482582323297},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1482582323297},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1482582323298},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1482582323299},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1482582323299},{"_id":"themes/maupassant/source/image/code-bk.png","shasum":"4ae3fb5d2dd3758152641c817546189fd79cb8cb","modified":1485190725346},{"_id":"themes/maupassant/source/js/busuanzi.pure.mini.js","shasum":"45980c51f537ce7adf9eb793a55758d071d58412","modified":1483350812286},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","shasum":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1482582323300},{"_id":"themes/maupassant/source/js/fancybox.js","shasum":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1482582323300},{"_id":"themes/maupassant/source/js/mindmap.js","shasum":"de4ea6504cc925ba18f98bbcd96fc81b4c90e2f9","modified":1483287234073},{"_id":"themes/maupassant/source/js/search.js","shasum":"0c0630e2ef213701d393b041f10572e951a27985","modified":1482582323301},{"_id":"themes/maupassant/source/js/share.js","shasum":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1482582323301},{"_id":"themes/maupassant/source/js/smartresize.js","shasum":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1482582323302},{"_id":"themes/maupassant/source/js/totop.js","shasum":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1482582323302},{"_id":"source/_posts/HttpMessageConverter/DispatcherServlet-properties.jpg","shasum":"2dd94eb25a05e8dd5a8bc0f8fc2eb05ebd73f89c","modified":1480358925393},{"_id":"source/_posts/HttpMessageConverter/arch.jpg","shasum":"57bcfe2eac52149a1964cc576ba50409d4861c2c","modified":1480358925403},{"_id":"source/_posts/HttpMessageConverter/http-message-converter.jpg","shasum":"fb06cf8a039b6d402ddb4cba11abb408caaa58fd","modified":1480358925414},{"_id":"source/_posts/postgre/arch.jpg","shasum":"53839b9675327b7b18c652c1bf568b903017145e","modified":1474961332959},{"_id":"source/_posts/property-placeholder/post-processors.jpg","shasum":"db5b21a4d6ace84afb24d14b158833558a5ad809","modified":1477844543990},{"_id":"source/_posts/spi/usage.jpg","shasum":"ccda980477add78ccf794d40482fbf65cd880de1","modified":1481981972203},{"_id":"source/_posts/spring-mvc/arch.jpg","shasum":"57bcfe2eac52149a1964cc576ba50409d4861c2c","modified":1475417665212},{"_id":"themes/maupassant/source/js/kityminder.core.min.js","shasum":"eb9dbfb655f74408eef5d2e8ec8bf85912566b6d","modified":1483199844669},{"_id":"source/_posts/jackson-guava/jar.png","shasum":"0067332eb536099b9f5efc79e466e3302867d714","modified":1479226221677},{"_id":"source/_posts/markdown-mindmap/relations.png","shasum":"7379ebbf18fca6e27dce47ea16721912d561046b","modified":1483281933845},{"_id":"source/_posts/pagination/PPC2009_mysql_pagination.pdf","shasum":"606f57614083e01b5dc97653b2b699a91e92ee31","modified":1475145748829},{"_id":"themes/maupassant/source/image/bg.jpg","shasum":"e581f862d1b7755b78181462de232fb4e705c219","modified":1482606389852},{"_id":"themes/maupassant/source/image/bg2.jpg","shasum":"e24664b6181c9ea85a9aa6fc2a23c24815fc1e3f","modified":1482608176850},{"_id":"themes/maupassant/source/js/kityminder.core.js","shasum":"4e013afdf6e881b3b9da6188c9c71b90b7bfd974","modified":1483200617072},{"_id":"public/js/totop.js","modified":1486313405743,"shasum":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c"},{"_id":"public/js/smartresize.js","modified":1486313405754,"shasum":"3ef157fd877167e3290f42c67a624ea375a46c24"},{"_id":"public/js/share.js","modified":1486313405759,"shasum":"f49776e0baa2b913ddc7a20db24b3edd469c8343"},{"_id":"public/js/search.js","modified":1486313405767,"shasum":"0c0630e2ef213701d393b041f10572e951a27985"},{"_id":"public/js/mindmap.js","modified":1486313405773,"shasum":"3e4ec78a29a912c822dcb6ee135831e632435620"},{"_id":"public/js/kityminder.core.min.js","modified":1486313405782,"shasum":"eb9dbfb655f74408eef5d2e8ec8bf85912566b6d"},{"_id":"public/js/kityminder.core.js","modified":1486313405801,"shasum":"4e013afdf6e881b3b9da6188c9c71b90b7bfd974"},{"_id":"public/js/fancybox.js","modified":1486313405809,"shasum":"13c4781570339f4fba76a3d7f202e442817dd605"},{"_id":"public/js/codeblock-resizer.js","modified":1486313405815,"shasum":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd"},{"_id":"public/js/busuanzi.pure.mini.js","modified":1486313405820,"shasum":"979315f03b6b3f215ba7505a716ed9d34d09cc14"},{"_id":"public/image/code-bk.png","modified":1486313405835,"shasum":"4ae3fb5d2dd3758152641c817546189fd79cb8cb"},{"_id":"public/image/bg2.jpg","modified":1486313405842,"shasum":"e24664b6181c9ea85a9aa6fc2a23c24815fc1e3f"},{"_id":"public/image/bg.jpg","modified":1486313405858,"shasum":"e581f862d1b7755b78181462de232fb4e705c219"},{"_id":"public/fancybox/fancybox_sprite@2x.png","modified":1486313405868,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/fancybox/fancybox_sprite.png","modified":1486313405878,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/fancybox/fancybox_overlay.png","modified":1486313405924,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/fancybox/fancybox_loading@2x.gif","modified":1486313405933,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/fancybox/fancybox_loading.gif","modified":1486313405940,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/fancybox/blank.gif","modified":1486313405945,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/css/style.css","modified":1486313405992,"shasum":"0e52c6655b2e4314101047a2e95fcf7ad9599e9f"},{"_id":"public/css/jquery.fancybox.css","modified":1486313406023,"shasum":"f42f761157f26244673eb2f4a9215c70956f80dc"},{"_id":"public/css/donate.css","modified":1486313406028,"shasum":"77c95047afb26db47eb4038e636be291191d5f83"},{"_id":"public/about/me.jpg","modified":1486313406034,"shasum":"231a9ce95dd1e61033737bd5ed5631f1607590bb"},{"_id":"public/2016/11/20/spring-resource/resource.jpg","modified":1486313406050,"shasum":"f45bcaa3dd495300355ff09830a1500c36c71870"},{"_id":"public/2016/10/02/spring-mvc/Servlet_LifeCycle.jpg","modified":1486313406071,"shasum":"ec5a5ed7867fd6fd38c21edd4bd4336a39446614"},{"_id":"public/2016/10/02/spring-mvc/arch.jpg","modified":1486313406086,"shasum":"57bcfe2eac52149a1964cc576ba50409d4861c2c"},{"_id":"public/2016/10/02/spring-mvc/hierachy.jpg","modified":1486313406101,"shasum":"d2791a173d265df7a59e2a1a83f86bbb93a949b4"},{"_id":"public/2016/10/02/spring-mvc/servlet-interface.jpg","modified":1486313406110,"shasum":"362e1f8d17678f77285a987de921dc70a2647454"},{"_id":"public/2016/12/17/spi/usage.jpg","modified":1486313406132,"shasum":"ccda980477add78ccf794d40482fbf65cd880de1"},{"_id":"public/2016/10/31/property-placeholder/hierarchy.jpg","modified":1486313406149,"shasum":"df248929441da0b2bdbe7afbf56d4729ae8f524d"},{"_id":"public/2016/10/31/property-placeholder/location.jpg","modified":1486313406161,"shasum":"cf8a3be6950b18df2310584921d7058f45b4ffcf"},{"_id":"public/2016/10/31/property-placeholder/post-processors.jpg","modified":1486313406170,"shasum":"db5b21a4d6ace84afb24d14b158833558a5ad809"},{"_id":"public/2016/09/27/postgre/arch.jpg","modified":1486313406181,"shasum":"53839b9675327b7b18c652c1bf568b903017145e"},{"_id":"public/2016/09/27/postgre/history.jpg","modified":1486313406198,"shasum":"b40a177bc06fe594dbbf51ead88b1949d11ae5da"},{"_id":"public/2016/09/30/pagination/PPC2009_mysql_pagination.pdf","modified":1486313406216,"shasum":"606f57614083e01b5dc97653b2b699a91e92ee31"},{"_id":"public/2017/01/01/markdown-mindmap/relations.png","modified":1486313406240,"shasum":"7379ebbf18fca6e27dce47ea16721912d561046b"},{"_id":"public/2017/01/01/markdown-mindmap/sample.jpg","modified":1486313406254,"shasum":"ebbde815a587d2a0a38ecada7ba9d54723905484"},{"_id":"public/2017/01/02/markdown-here/additional.jpg","modified":1486313406264,"shasum":"9a7c6f51d83ac4815c661411786d5a4307923e62"},{"_id":"public/2017/01/02/markdown-here/mail.jpg","modified":1486313406282,"shasum":"a89f7167ca6b1fe12b2e949f7290f26e273edebf"},{"_id":"public/2016/10/02/jsonp/cors.png","modified":1486313406291,"shasum":"03174e532d5fab79c1d9fd0a00139d4978443df0"},{"_id":"public/2016/10/02/jsonp/sample.png","modified":1486313406309,"shasum":"5c66eed23ecf164fca1d7f1f71eb2bd33d85c770"},{"_id":"public/2016/11/16/jackson-guava/jar.png","modified":1486313406321,"shasum":"0067332eb536099b9f5efc79e466e3302867d714"},{"_id":"public/2016/12/23/idea-template/profiles.jpg","modified":1486313406332,"shasum":"cc82791405ece2982b41af9f5eebd9ebf2009708"},{"_id":"public/2016/12/07/grep/color.jpg","modified":1486313406364,"shasum":"9b1ae87a35402005befa583795e231ccc49dca29"},{"_id":"public/2016/12/07/grep/egrep.jpg","modified":1486313406376,"shasum":"d13cb7333887eb76541f6ffb9a294c1d9404942e"},{"_id":"public/2016/09/26/character-encoding/Unicode_logo.jpg","modified":1486313406386,"shasum":"8ca31a7bd95ffb6a1aa6456c1b0970e1a5458fd7"},{"_id":"public/2016/09/26/character-encoding/emoji.jpg","modified":1486313406400,"shasum":"e4e05e46031c997ddd9b3d53a385c6d653963cd6"},{"_id":"public/2016/09/26/character-encoding/unicode-layout.jpg","modified":1486313406414,"shasum":"59c7ccbffd30aeb97f811b67a9f94a0f5c1bb5e0"},{"_id":"public/2016/09/26/base64/encoding.jpg","modified":1486313406430,"shasum":"5ed8de255bfe78f23b7cc920171655a4487a509b"},{"_id":"public/2016/09/26/base64/encoding2.jpg","modified":1486313406442,"shasum":"da197012f219ae5c3cacf049e0d15e9c9693c981"},{"_id":"public/2016/11/29/HttpMessageConverter/DispatcherServlet-properties.jpg","modified":1486313406459,"shasum":"2dd94eb25a05e8dd5a8bc0f8fc2eb05ebd73f89c"},{"_id":"public/2016/11/29/HttpMessageConverter/arch.jpg","modified":1486313406477,"shasum":"57bcfe2eac52149a1964cc576ba50409d4861c2c"},{"_id":"public/2016/11/29/HttpMessageConverter/http-message-converter.jpg","modified":1486313406488,"shasum":"fb06cf8a039b6d402ddb4cba11abb408caaa58fd"},{"_id":"public/2016/11/29/HttpMessageConverter/inherit.jpg","modified":1486313406504,"shasum":"1776d8f3e17b516ecc36fb3c55a398e6348760d7"},{"_id":"public/2017/02/05/http/10-21-http-request.png","modified":1486313406515,"shasum":"7139d7e857c470ffbd789f0de3a166825685c988"},{"_id":"public/2017/02/05/http/http_request_message.png","modified":1486313406527,"shasum":"c7714d5d9acedc28c3ca56d804a2fa243ad67388"},{"_id":"public/tags/index.html","modified":1486313407072,"shasum":"6e5f1b85ea60bba3c04db75e95650c9d6200c374"},{"_id":"public/recommendation/index.html","modified":1486313407318,"shasum":"00231e9e4b6adf8350ed5a0f49d1959f1e3cbf4f"},{"_id":"public/about/index.html","modified":1486313407551,"shasum":"54f4faf1853c8a847e928587898cc2ce5f682e6b"},{"_id":"public/2017/02/06/tomcat-stringmanager/index.html","modified":1486313407907,"shasum":"b1b98f2bedc64f6be8beca7f674de8b981f84a77"},{"_id":"public/2017/01/27/tomcat-AbstractMethodError/index.html","modified":1486313408365,"shasum":"bbf18e6abea7f05406b140679feed827aea536c3"},{"_id":"public/2017/01/27/jar/index.html","modified":1486313408704,"shasum":"dc9444497d4f7368ac07e639bf32c733cd3f080d"},{"_id":"public/2017/01/17/guava-eventbus/index.html","modified":1486313409010,"shasum":"df353fecc3b9f95039e7c99d8d9e6aef153b5a1d"},{"_id":"public/2017/01/14/web-xml/index.html","modified":1486313409200,"shasum":"08178043cee90d6905b7c6aa7ad33246904cd5f1"},{"_id":"public/2017/01/09/Spring-mvc-exception/index.html","modified":1486313409421,"shasum":"a8f203b7e3dd0929b0a0a944017ca83e227bb531"},{"_id":"public/2017/01/08/pip/index.html","modified":1486313409621,"shasum":"c36a45337f56c7d1caee106014600de1c997ce80"},{"_id":"public/2017/01/07/CLIP/index.html","modified":1486313409822,"shasum":"b9db4597f71b4800e3639363053bdf64c83c8afa"},{"_id":"public/2017/01/02/markdown-here/index.html","modified":1486313410015,"shasum":"8875dbd1471d66cf93931c41f8f0a25e2f39ff4d"},{"_id":"public/2017/01/01/markdown-mindmap/index.html","modified":1486313410201,"shasum":"91d1cb8244dd7d21c7b13f536f144ec618a23b01"},{"_id":"public/2016/12/27/xstream/index.html","modified":1486313410405,"shasum":"97ec11a299bfd061cb4ee8f59c76ab4f6bec0275"},{"_id":"public/2016/12/23/idea-template/index.html","modified":1486313410596,"shasum":"9a4c4fdb67c9fdd5be3c0b11ac3fa1fcfa8ed5f7"},{"_id":"public/2016/12/23/tomcat-encoding/index.html","modified":1486313410779,"shasum":"cc3211f4704109ec500472e5a5a708988d164ee6"},{"_id":"public/2016/12/23/tomcat-access-log/index.html","modified":1486313410974,"shasum":"61caacacf9edd3b8fbe0b9203f54a4d7cdfe1a84"},{"_id":"public/2016/12/18/python-util/index.html","modified":1486313411150,"shasum":"d197e948217ff725a2443d56bdacf8bfd9bbd5fa"},{"_id":"public/2016/12/18/nc/index.html","modified":1486313411324,"shasum":"684d6e98809c6a0ece291cd0a230fe913d289664"},{"_id":"public/2016/12/17/spi/index.html","modified":1486313411511,"shasum":"bc972d52cc87f6cf073c395e079d4ea624f45fdc"},{"_id":"public/2016/12/14/re/index.html","modified":1486313411704,"shasum":"51b6fb1271823e5182ee8a15ef74c7313948ce86"},{"_id":"public/2016/12/13/atnode/index.html","modified":1486313411882,"shasum":"dd572673b2615580d95794c962f5681a88c68e0e"},{"_id":"public/2016/12/07/grep/index.html","modified":1486313412073,"shasum":"418d7617846f3c5291f05b34920d992040e71754"},{"_id":"public/2016/11/29/HttpMessageConverter/index.html","modified":1486313412274,"shasum":"11865e0bc5c0f3e26f0ecfa50262d12d824b4cfc"},{"_id":"public/2016/11/20/spring-resource/index.html","modified":1486313412458,"shasum":"502bd91a872b07577274f5ee6191c02afabb8b75"},{"_id":"public/2016/11/16/jackson-guava/index.html","modified":1486313412638,"shasum":"18124efd20e998d3cf0a059f2adafbc35305609d"},{"_id":"public/2016/10/31/property-placeholder/index.html","modified":1486313412862,"shasum":"f549d0b324652112562496cc03cda661ba2e48a7"},{"_id":"public/2016/10/23/custom-tag/index.html","modified":1486313413064,"shasum":"5248b34b6079fcf7721761318dec0c3e06936cb0"},{"_id":"public/2016/10/16/plantuml/index.html","modified":1486313413259,"shasum":"cb3b1901c6ce7b162ada158a2e55e3dc425c5fbb"},{"_id":"public/2016/10/05/javadoc/index.html","modified":1486313413442,"shasum":"df0dcd49683ad4879c47663125895436435ac37b"},{"_id":"public/2016/10/02/spring-mvc/index.html","modified":1486313413667,"shasum":"e17a978ceb4fbfe6adb5bb02a238f5b9e93a0a93"},{"_id":"public/2016/10/02/jsonp/index.html","modified":1486313413857,"shasum":"784bae73d12bbee815cf7970c1eefc3f48aaa6de"},{"_id":"public/2016/09/30/pagination/index.html","modified":1486313414112,"shasum":"41f113046b52a2bd324653865a3f044acf8ab230"},{"_id":"public/2016/09/27/postgre/index.html","modified":1486313414357,"shasum":"7b3ac7582b023c963e57d357f78268c4684dd826"},{"_id":"public/2016/09/26/character-encoding/index.html","modified":1486313414617,"shasum":"4c77d3a48a21c040f66d3605e8fb1ac37f58ff81"},{"_id":"public/2016/09/26/base64/index.html","modified":1486313414867,"shasum":"6f3c186eebbb6c3faa5a530159652ca883786052"},{"_id":"public/2016/09/25/spring-mockMvc/index.html","modified":1486313415056,"shasum":"71053c531a275a1d520d04299df0bf59b9cb846d"},{"_id":"public/2016/09/25/java-exception/index.html","modified":1486313415235,"shasum":"224c9779ef94ed2747a26881fbfac9e7fbd99301"},{"_id":"public/2016/09/25/mysql-time/index.html","modified":1486313415421,"shasum":"482590bf84307371c6f705ccaa970aace43f6233"},{"_id":"public/2015/11/03/fabric/index.html","modified":1486313415609,"shasum":"d3922e3ef6aa57293ac9c4ad63b2f2fcf75ae0e4"},{"_id":"public/2015/11/03/machine_learning/index.html","modified":1486313415808,"shasum":"ded4c0487355bd7e0279bbe3ded62d4f861d8366"},{"_id":"public/2015/10/20/java-permission-control/index.html","modified":1486313416001,"shasum":"d1c43ee0e8a738312b9b88ab455fed68ce01cbe8"},{"_id":"public/2015/10/09/shadowsocks/index.html","modified":1486313416196,"shasum":"4628773c8574ac3acb35e934203ea7bcad300bd6"},{"_id":"public/2015/10/08/ssh-passwd-free/index.html","modified":1486313416398,"shasum":"3c20234733e7b28c0572d65ca36110ad07d0e9d3"},{"_id":"public/2015/10/08/hello-world/index.html","modified":1486313416587,"shasum":"06c1acbec7f3ff78827000cd9ba1e110ba4cf2a6"},{"_id":"public/archives/index.html","modified":1486313416755,"shasum":"3bafef8d2baa6c97d403f8a15c8ee045c5e656eb"},{"_id":"public/archives/page/2/index.html","modified":1486313416933,"shasum":"f758f7ca7c582104881235f8b3002b2b28002b74"},{"_id":"public/archives/page/3/index.html","modified":1486313417091,"shasum":"71ae1e000ba19dd8e952ccc4a1f6cbf4d5f77296"},{"_id":"public/archives/page/4/index.html","modified":1486313417243,"shasum":"ae8aa78a9145fe37710a3cf1a6fa0cab781068f9"},{"_id":"public/archives/page/5/index.html","modified":1486313417391,"shasum":"e302cf999e18c163cfa139f74974a21cac1fe7f5"},{"_id":"public/archives/page/6/index.html","modified":1486313417545,"shasum":"216d6b049dee7257aaa4796e8d677615c65124d1"},{"_id":"public/archives/2015/index.html","modified":1486313417701,"shasum":"93d1527f5aebf68d64949aa4432f0e7da9b324d9"},{"_id":"public/archives/2015/10/index.html","modified":1486313417848,"shasum":"5d51e4a7ef09668648ad7e5c39b0caf2dec4de36"},{"_id":"public/archives/2015/11/index.html","modified":1486313418020,"shasum":"f66c6146a65d426bb5c3aa14ee5d5fa817700b29"},{"_id":"public/archives/2016/index.html","modified":1486313418175,"shasum":"8e51ad5641dcc9791217d8c35dd197dd7b537b2a"},{"_id":"public/archives/2016/page/2/index.html","modified":1486313418331,"shasum":"3d5f514c09195e30a6d49e96a3a8cafcb8c33aaa"},{"_id":"public/archives/2016/page/3/index.html","modified":1486313418485,"shasum":"e68dddaa695a9708d76b841e3b6d45cf2978c38c"},{"_id":"public/archives/2016/page/4/index.html","modified":1486313418640,"shasum":"10da2c2f622fd6aa006538ec8228dec92e3717b0"},{"_id":"public/archives/2016/09/index.html","modified":1486313418852,"shasum":"817a09212f4c01edd101ddb26b3010352944efdc"},{"_id":"public/archives/2016/10/index.html","modified":1486313419060,"shasum":"b7257c83f65af9adf849a4f592da3313e6b7a0e6"},{"_id":"public/archives/2016/11/index.html","modified":1486313419332,"shasum":"4e487601b8daf6c0d941b0c87b1201a4448da338"},{"_id":"public/archives/2016/12/index.html","modified":1486313419490,"shasum":"6336ded94ad8c0909560e0c03c7f1eba5ce16dab"},{"_id":"public/archives/2016/12/page/2/index.html","modified":1486313419656,"shasum":"d28cd6398dce8ad1150ddce632d0be72e8da543c"},{"_id":"public/archives/2017/index.html","modified":1486313419815,"shasum":"ee3620b28d6eed57a5da6ce4c8463a7bfa548ccf"},{"_id":"public/archives/2017/page/2/index.html","modified":1486313420024,"shasum":"757f2a3064c6d8cda409bd8870afdb5f9453f1dc"},{"_id":"public/archives/2017/01/index.html","modified":1486313420224,"shasum":"643f8f472fa709c20d0cd3e3d4c71f1a7bb349a7"},{"_id":"public/archives/2017/01/page/2/index.html","modified":1486313420438,"shasum":"78cc36f1f372a7cfc583460d2fc4eb36e33dfe9e"},{"_id":"public/archives/2017/02/index.html","modified":1486313420588,"shasum":"c25dd6197476d38ba74e41dc9c7d056dd693268c"},{"_id":"public/baidusitemap.xml","modified":1486313420594,"shasum":"d0663913a979730e96c328faf21f73ede620638a"},{"_id":"public/categories/java/index.html","modified":1486313420741,"shasum":"8364d19282752d3b066f879c0fd0e53831a30112"},{"_id":"public/categories/tomcat/index.html","modified":1486313420896,"shasum":"ccc672f9b81964044a9324ade653280fc72b9e89"},{"_id":"public/categories/linux/index.html","modified":1486313421041,"shasum":"546b386f7bd84a065800ad0f741bd77f8cb740d7"},{"_id":"public/categories/spring/index.html","modified":1486313421192,"shasum":"7bcf55db31610b4f1783074bc6c43b9b74757bfe"},{"_id":"public/categories/spring/page/2/index.html","modified":1486313421334,"shasum":"2f1b601ca01d3d5d92cf5a270d042ca9d44b0225"},{"_id":"public/categories/base/index.html","modified":1486313421488,"shasum":"16418451f9d37ebf3d4d09c07d54e7054a42846b"},{"_id":"public/categories/python/index.html","modified":1486313421632,"shasum":"60e1c27bdf516ce1e227dadacd34db2ebb905c87"},{"_id":"public/categories/hexo/index.html","modified":1486313421786,"shasum":"0d480aa71ef73e1b4a31064275ec61e7f15472be"},{"_id":"public/categories/markdown/index.html","modified":1486313421938,"shasum":"d40ecf217903ae79243f7109cacb772f1e3381f0"},{"_id":"public/categories/机器学习/index.html","modified":1486313422090,"shasum":"2c5ccf6deeec07c639657174404cafe9d51f38c7"},{"_id":"public/categories/fe/index.html","modified":1486313422246,"shasum":"4d85fa6e82f23acacd5f746587a716ce79b53752"},{"_id":"public/categories/idea/index.html","modified":1486313422387,"shasum":"b71c628d3c3c1a19c1adb1e829552041dcc34f3e"},{"_id":"public/categories/guava/index.html","modified":1486313422543,"shasum":"8ada34a11ea95ad6be28d1cd2e5a7593c6a5584e"},{"_id":"public/categories/shell/index.html","modified":1486313422690,"shasum":"742978621bf30b7d0e711cc899070b14b72e2ae6"},{"_id":"public/atom.xml","modified":1486313422696,"shasum":"118cfd1488d873fbb68ff58526adf81d3ae92cf5"},{"_id":"public/index.html","modified":1486313422909,"shasum":"1312adbff95d890263ca026909c540b22ebd7f25"},{"_id":"public/page/2/index.html","modified":1486313423098,"shasum":"9dbfda3349d5ce7f0ba8f86d1698437d2b1b2667"},{"_id":"public/page/3/index.html","modified":1486313423291,"shasum":"94489548ea367c0764237510d4dd669523ceecd1"},{"_id":"public/page/4/index.html","modified":1486313423470,"shasum":"04b6f8a4ffbdc8b3392293f460079bb6352ef711"},{"_id":"public/page/5/index.html","modified":1486313423655,"shasum":"f027d786c0c63d459690dd09896c1e1ae68ccd48"},{"_id":"public/page/6/index.html","modified":1486313423832,"shasum":"8b7a6514dac16898a4ddd530912b1b8517278042"},{"_id":"public/robots.txt","modified":1486313423837,"shasum":"9cff661887cd0b45c9cb599aae136a168cdf2430"},{"_id":"public/sitemap.xml","modified":1486313423842,"shasum":"0af59a2a9f2fc38ab839bd0fd01894a22ee7f304"},{"_id":"public/search.xml","modified":1486313423853,"shasum":"57559e3892a68b0d3cfadf34755a4ac6cb53be06"},{"_id":"public/tags/xml/index.html","modified":1486313424017,"shasum":"7b8bd2a3d2d84a50fbbce78258d1bbd5615b2484"},{"_id":"public/tags/servlet/index.html","modified":1486313424173,"shasum":"aaa7054c27e2b6d7397a7cbe67aa17da60ed2da8"},{"_id":"public/tags/string-manager/index.html","modified":1486313424321,"shasum":"e60ce42c25c8af4b945134cd7418edf601dc0f6c"},{"_id":"public/tags/encoding/index.html","modified":1486313424460,"shasum":"b9a851817ecb42475ae1c5beccb150b10fcfa360"},{"_id":"public/tags/access-log/index.html","modified":1486313424609,"shasum":"4a7aad990b9927967df6b9b2aacf071184255294"},{"_id":"public/tags/ssh/index.html","modified":1486313424752,"shasum":"96826f6ff3061fc0b354f305802b2f08c1e6cb5c"},{"_id":"public/tags/resource/index.html","modified":1486313424901,"shasum":"4f59cfdff4849f0a604302a88b5f8e77243362c1"},{"_id":"public/tags/spring-mvc/index.html","modified":1486313425050,"shasum":"f45cd70df6660f0eff6e6b36c536ed1ac44f984d"},{"_id":"public/tags/spi/index.html","modified":1486313425198,"shasum":"962381c6a965c960cd5aeffe831b379e15bec29e"},{"_id":"public/tags/shadowsocks/index.html","modified":1486313425343,"shasum":"7f19f41bddc48ed739f209abe3ced89b85086e12"},{"_id":"public/tags/re/index.html","modified":1486313425531,"shasum":"524809c2185a7207b66dc009ef6850e1ff2ca30b"},{"_id":"public/tags/python-util/index.html","modified":1486313425732,"shasum":"1e7f7ea6e52011a7da61bccfe30c13acb4557853"},{"_id":"public/tags/placeholder/index.html","modified":1486313425944,"shasum":"4193433abfddd137d0361f30eefced0e110129ba"},{"_id":"public/tags/postgresql/index.html","modified":1486313426104,"shasum":"0fd381842eea1a14987c76ded615575fefaab029"},{"_id":"public/tags/uml/index.html","modified":1486313426261,"shasum":"8bc9222fb17ea28a9093d28282a8bc2b14a78f5d"},{"_id":"public/tags/pip/index.html","modified":1486313426410,"shasum":"9ad4622e11faecca3a3e343cbdd67d3300cf63b4"},{"_id":"public/tags/mysql/index.html","modified":1486313426554,"shasum":"7343cd68e144e5f3d42b57e8f6d50be2b09ec381"},{"_id":"public/tags/netcat/index.html","modified":1486313426704,"shasum":"b4e6e57d5766d3b0080bc8a4457641a04942fb78"},{"_id":"public/tags/mindmap/index.html","modified":1486313426851,"shasum":"a383345bc9feae3984e2300b3248b7401f864510"},{"_id":"public/tags/markdown-here/index.html","modified":1486313426996,"shasum":"5d26012aa9a1a4697d4f3a3708a8384833cc943f"},{"_id":"public/tags/机器学习/index.html","modified":1486313427136,"shasum":"2c5ccf6deeec07c639657174404cafe9d51f38c7"},{"_id":"public/tags/ajax/index.html","modified":1486313427290,"shasum":"9837b20195cc115038f89b4edce0b2cae0c50001"},{"_id":"public/tags/Javadoc/index.html","modified":1486313427436,"shasum":"35203cd1e29457f94ef3b180dc04fcaf6a182dea"},{"_id":"public/tags/访问权限/index.html","modified":1486313427600,"shasum":"7c084d38bb289118cdb9944a0ab4046466d7a90f"},{"_id":"public/tags/exception/index.html","modified":1486313427753,"shasum":"c82068547d7cde514c95cc5709d44436cc2c8fef"},{"_id":"public/tags/jar/index.html","modified":1486313427911,"shasum":"72ade94a0d48fa512bd2ecd9089ba1c4c5e7bd4b"},{"_id":"public/tags/jackson/index.html","modified":1486313428054,"shasum":"1249f21b88149d6284142eb851b2569432233601"},{"_id":"public/tags/template/index.html","modified":1486313428214,"shasum":"1b431b794b9b204326a0981f1cd268e49c4badb1"},{"_id":"public/tags/hexo-install/index.html","modified":1486313428369,"shasum":"1bd8abdee3d58cc8378782d786fdfcdd8e041a92"},{"_id":"public/tags/event-bus/index.html","modified":1486313428517,"shasum":"1264c5b8b4f9bf334274869dee50e84d3e415fb9"},{"_id":"public/tags/shell/index.html","modified":1486313428666,"shasum":"8986589677f771e3c0d4636493d7fdbabbb1bafd"},{"_id":"public/tags/fabric/index.html","modified":1486313428827,"shasum":"659eaf3b2d07e89754cd2bee67b7f46cb0222ef5"},{"_id":"public/tags/自定义标签/index.html","modified":1486313428976,"shasum":"2ae62dea99ea1b8657b8a5d6fb3eecc076b5e446"},{"_id":"public/tags/编码/index.html","modified":1486313429131,"shasum":"c37271c20153c537bb2d1c009ced3b468c80a088"},{"_id":"public/tags/messageConverter/index.html","modified":1486313429286,"shasum":"dc0881433cfbd8f65ac470adbd5c2336103fb7c9"},{"_id":"public/tags/剪贴板/index.html","modified":1486313429441,"shasum":"e295e08af23f97b716501941700537d71b3e4d74"}],"Category":[{"name":"java","_id":"ciyswmg4c0005w4pygar1wvte"},{"name":"tomcat","_id":"ciyswmg4k000aw4py34f8rtr4"},{"name":"linux","_id":"ciyswmg58000tw4pyvnend2ql"},{"name":"spring","_id":"ciyswmg5c000yw4pyu84w4zx9"},{"name":"base","_id":"ciyswmg6s001iw4py9e9ov683"},{"name":"python","_id":"ciyswmg6x001nw4py7rm150nx"},{"name":"hexo","_id":"ciyswmg890020w4pykzkle4bn"},{"name":"markdown","_id":"ciyswmg9f002ow4pyggqyihqa"},{"name":"机器学习","_id":"ciyswmg9v002tw4pymc65osvl"},{"name":"fe","_id":"ciyswmga0002yw4pye5ig4jdk"},{"name":"idea","_id":"ciyswmgah0033w4pywm2ntlpd"},{"name":"guava","_id":"ciyswmgbh003ww4pyhwr2vao8"},{"name":"shell","_id":"ciyswmgdu004uw4py5phtuvkp"},{"name":"jackson","_id":"ciyswmgfi005vw4pymy1o4w5e"},{"name":"web","_id":"ciyswmgfv0062w4pyftmvz9f5"},{"name":"内功","_id":"ciyswmgg70067w4py6jalkxqv"},{"name":"工具","_id":"ciyswmggh006kw4pyid80vefq"}],"Data":[],"Page":[{"title":"tags","date":"2016-09-23T16:07:17.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"title: tags\ndate: 2016-09-24 00:07:17\ntype: \"tags\"\n---\n","updated":"2016-09-23T16:07:41.453Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ciyswmg400001w4py2b6pd1kk"},{"title":"推荐-分享","date":"2017-01-01T16:49:53.000Z","toc":true,"_content":"\n<style type=\"text/css\">\n    .post-title{\n        border-top: none !important;\n        background-color: #ffffff !important;\n        text-align: center !important;\n    }\n</style>\n\n# 前言\n\n> If you have an apple and I have an apple and we exchange these apples then you and I will still each have one apple. But if you have an idea and I have an idea and we exchange these ideas, then each of us will have two ideas.\n\n## python\n\n- [Jupyter](http://jupyter.org/)\n\n- [Anaconda](https://www.continuum.io/downloads)","source":"recommendation/index.md","raw":"title: 推荐-分享\ndate: 2017-01-02 00:49:53\ntoc: true\n---\n\n<style type=\"text/css\">\n    .post-title{\n        border-top: none !important;\n        background-color: #ffffff !important;\n        text-align: center !important;\n    }\n</style>\n\n# 前言\n\n> If you have an apple and I have an apple and we exchange these apples then you and I will still each have one apple. But if you have an idea and I have an idea and we exchange these ideas, then each of us will have two ideas.\n\n## python\n\n- [Jupyter](http://jupyter.org/)\n\n- [Anaconda](https://www.continuum.io/downloads)","updated":"2017-01-01T17:14:02.096Z","path":"recommendation/index.html","comments":1,"layout":"page","_id":"ciyswmg430002w4pyn9l8mwug"},{"title":"","date":"2017-01-01T16:03:57.000Z","_content":"\n<style type=\"text/css\">\n    .post-title{\n        border-top: none !important;\n        background-color: #ffffff !important;\n        text-align: center !important;\n    }\n</style>\n\n## 关于我\n\n![](me.jpg)\n\n## 技术栈\n\n- Java\n- Mybatis\n- Spring\n- Dubbo\n- Python\n\n## 联系方式\n\n- 邮箱：liqisheng <span class=\"fa fa-at\"></span> whu.edu.cn\n\n","source":"about/index.md","raw":"title: \ndate: 2017-01-02 00:03:57\n---\n\n<style type=\"text/css\">\n    .post-title{\n        border-top: none !important;\n        background-color: #ffffff !important;\n        text-align: center !important;\n    }\n</style>\n\n## 关于我\n\n![](me.jpg)\n\n## 技术栈\n\n- Java\n- Mybatis\n- Spring\n- Dubbo\n- Python\n\n## 联系方式\n\n- 邮箱：liqisheng <span class=\"fa fa-at\"></span> whu.edu.cn\n\n","updated":"2017-01-15T16:35:11.981Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciyswmg440003w4py9j5mzjlw"}],"Post":[{"title":"HandlerAdapter","toc":true,"category":null,"_content":"","source":"_drafts/HandlerAdapter.md","raw":"---\ntitle: HandlerAdapter\ntoc: true\ntags:\ncategory:\n---\n","slug":"HandlerAdapter","published":0,"date":"2017-02-02T09:10:16.950Z","updated":"2017-02-02T09:10:16.950Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmg3n0000w4py1e8ktdvq"},{"title":"xstream教程","toc":true,"date":"2016-12-27T15:26:55.000Z","_content":"\n# 使用\n\n![](http://x-stream.github.io/logo.gif)\n\n## pom依赖\n\n```xml\n<!-- https://mvnrepository.com/artifact/com.thoughtworks.xstream/xstream -->\n<dependency>\n    <groupId>com.thoughtworks.xstream</groupId>\n    <artifactId>xstream</artifactId>\n    <version>1.3.1</version>\n</dependency>\n```\n\n## 输出xml\n\n### 手动配置\n\nAuthor 类\n\n```java\npublic class Author {\n\n    private String name;\n\n    public Author(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n```\n\nEntry 类\n\n```java\npublic class Entry {\n\n    private String title, description;\n\n    public Entry(String title, String description) {\n        this.title = title;\n        this.description = description;\n    }\n}\n```\n\nBlog 类\n\n```java\npublic class Blog {\n\n    private Author writer;\n\n    private List entries = new ArrayList();\n\n    public Blog(Author writer) {\n        this.writer = writer;\n    }\n\n    public void add(Entry entry) {\n        entries.add(entry);\n    }\n\n    public List getContent() {\n        return entries;\n    }\n\n    public static void main(String[] args) {\n        Blog teamBlog = new Blog(new Author(\"qisheng.li\"));\n        teamBlog.add(new Entry(\"first\", \"first blog entry\"));\n        teamBlog.add(new Entry(\"second\", \"second blog entry\"));\n\n        XStream xStream = new XStream();\n        System.out.println(xStream.toXML(teamBlog));        \n    }\n}\n```\n\n输出的内容为:\n\n```xml\n<com.air.xml.xstream.alias.Blog>\n  <writer>\n    <name>qisheng.li</name>\n  </writer>\n  <entries>\n    <com.air.xml.xstream.alias.Entry>\n      <title>first</title>\n      <description>first blog entry</description>\n    </com.air.xml.xstream.alias.Entry>\n    <com.air.xml.xstream.alias.Entry>\n      <title>second</title>\n      <description>second blog entry</description>\n    </com.air.xml.xstream.alias.Entry>\n  </entries>\n</com.air.xml.xstream.alias.Blog>\n```\n- *默认输出的类，是fully qualified name，可以手动设置别名*\n\n```java\n//alias\n        xStream.alias(\"blog\", Blog.class);\n        xStream.alias(\"entry\", Entry.class);\n```\n\n输出:\n\n```xml\n<blog>\n  <writer>\n    <name>qisheng.li</name>\n  </writer>\n  <entries>\n    <entry>\n      <title>first</title>\n      <description>first blog entry</description>\n    </entry>\n    <entry>\n      <title>second</title>\n      <description>second blog entry</description>\n    </entry>\n  </entries>\n</blog>\n```\n\n- *也可以设置属性级别的别名*\n\n```java\nxStream.aliasField(\"author\", Blog.class, \"writter\");\n```\n\n输出：\n\n```xml\n<blog>\n  <author>\n    <name>qisheng.li</name>\n  </author>\n  <entries>\n    <entry>\n      <title>first</title>\n      <description>first blog entry</description>\n    </entry>\n    <entry>\n      <title>second</title>\n      <description>second blog entry</description>\n    </entry>\n  </entries>\n</blog>\n```\n\n- *包级别的别名*\n\n```java\n        xStream.aliasPackage(\"aliased.pachage.name\", \"com.air.xml.xstream.alias\");\n```\n\n输出的xml:\n\n```xml\n<aliased.pachage.name.Blog author=\"qisheng.li\">\n  <entry>\n    <title>first</title>\n    <description>first blog entry</description>\n  </entry>\n  <entry>\n    <title>second</title>\n    <description>second blog entry</description>\n  </entry>\n</aliased.pachage.name.Blog>\n```\n\n#### Implicit Collections\n\n> implicit collection: whenever you have a collection which doesn't need to display it's root tag, you can map it as an implicit collection.\n\n如果不想展示一个集合的root节点，比如上述的`entries`，可以将其当做一个`implicit collection`\n\n```java\n    //implicit collection\n    xStream.addImplicitCollection(Blog.class, \"entries\");\n```\n\n输出:\n\n```xml\n<blog>\n  <author>\n    <name>qisheng.li</name>\n  </author>\n  <entry>\n    <title>first</title>\n    <description>first blog entry</description>\n  </entry>\n  <entry>\n    <title>second</title>\n    <description>second blog entry</description>\n  </entry>\n</blog>\n```\n\n可以看到`entries`这个节点已经没有了\n\n#### field输出为属性值\n\n接着上面的例子，我们现在想让Blog的writer输出为Blog标签的属性值。\n\n实现步骤：\n\n1.创建一个转换器\n\n```java\npublic class AuthorConverter  implements SingleValueConverter {\n\n    @Override\n    public String toString(Object obj) {\n        return ((Author) obj).getName();\n    }\n\n    @Override\n    public Object fromString(String str) {\n        return new Author(str);\n    }\n\n    @Override\n    public boolean canConvert(Class type) {\n        return type.equals(Author.class);\n    }\n}\n```\n\n2.注册这个转换器\n\n```java\nxStream.registerConverter(new AuthorConverter());\n```\n\n3.告诉XStream\n\n```java\n//attribute aliasing\nxStream.useAttributeFor(Blog.class, \"writer\");\nxStream.registerConverter(new AuthorConverter());\n//field alias\nxStream.aliasField(\"author\", Blog.class, \"writer\");\n```\n\n输出的xml：\n\n```xml\n<blog author=\"qisheng.li\">\n  <entry>\n    <title>first</title>\n    <description>first blog entry</description>\n  </entry>\n  <entry>\n    <title>second</title>\n    <description>second blog entry</description>\n  </entry>\n</blog>\n```\n\n\n### 基于注解\n\n主要使用的是`XStreamAlias`注解来标记别名\n\n```java\n@XStreamAlias(\"message\")\npublic class RendezvousMessage {\n\n    @XStreamAlias(\"type\")\n    private int messageType;\n\n    public RendezvousMessage(int messageType) {\n        this.messageType = messageType;\n    }\n\n    public static void main(String[] args) {\n        XStream xStream = new XStream();\n        xStream.processAnnotations(RendezvousMessage.class);\n        RendezvousMessage rendezvousMessage = new RendezvousMessage(12);\n        System.out.println(xStream.toXML(rendezvousMessage));\n    }\n}\n\n```\n\nxml 输出\n\n```xml\n<message>\n  <type>12</type>\n</message>\n```\n\n- ImplicitCollection\n\n使用 `@XstreamImplicit(itemFieldName = \"xxx\")`来处理\n\n```java\n    @XStreamImplicit(itemFieldName = \"part\")\n    private List<String> content;\n```\n\n```xml\n<message>\n  <type>12</type>\n  <part>first content</part>\n  <part>second content</part>\n</message>\n```\n- converter\n\n添加一个属性字段并指明他使用的转换器, 和一个基本类型——boolean\n\n```java\n    @XStreamConverter(value=BooleanConverter.class)\n    private boolean important;\n\n    @XStreamConverter(SingleValueCalendarConverter.class)\n    private Calendar created = new GregorianCalendar();\n```\n\n转化器代码\n\n```java\npublic class SingleValueCalendarConverter implements Converter {\n    @Override\n    public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {\n        Calendar calendar = (Calendar) source;\n        writer.setValue(String.valueOf(calendar.getTime().getTime()));\n    }\n\n    @Override\n    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n        GregorianCalendar calendar = new GregorianCalendar();\n        calendar.setTime(new Date(Long.parseLong(reader.getValue())));\n        return calendar;\n    }\n\n    @Override\n    public boolean canConvert(Class type) {\n        return type.equals(GregorianCalendar.class);\n    }\n}\n```\n\n输出的xml结果：\n\n```xml\n<message>\n  <type>12</type>\n  <part>first content</part>\n  <part>second content</part>\n  <important>false</important>\n  <created>1482856467282</created>\n</message>\n```\n\n- 属性\n\n```java\n    @XStreamAlias(\"type\")\n    @XStreamAsAttribute\n    private int messageType;\n```\n\n输出结果\n\n```xml\n<message type=\"12\">\n  <part>first content</part>\n  <part>second content</part>\n  <important>false</important>\n  <created>1482856554517</created>\n</message>\n```\n\n- 忽略一些字段\n\n```xml\n<message type=\"12\">\n  <part>first content</part>\n  <part>second content</part>\n  <created>1482856661757</created>\n</message>\n```\n\n`important` 属性已经被隐藏\n\n\n#### 自动扫描注解\n\n```java\nxStream.autodetectAnnotations(true);\n```\n\n## xml转对象\n\n ```java\n        RendezvousMessage deserializedMessage = (RendezvousMessage) xStream.fromXML(\"<message type=\\\"12\\\">\\n\" +\n                \"  <part>first content</part>\\n\" +\n                \"  <part>second content</part>\\n\" +\n                \"  <created>1482859234272</created>\\n\" +\n                \"</message>\");\n ```\n \n# 参考\n\n1. [About XStream](http://x-stream.github.io/index.html)\n\n2. [Alias Tutorial](http://x-stream.github.io/alias-tutorial.html)\n\n3. [Annotations Tutorial](http://x-stream.github.io/annotations-tutorial.html)\n\n","source":"_posts/xstream.md","raw":"---\ntitle: xstream教程\ntoc: true\ntags: xml\ncategory: java\ndate: 2016-12-27 23:26:55\n---\n\n# 使用\n\n![](http://x-stream.github.io/logo.gif)\n\n## pom依赖\n\n```xml\n<!-- https://mvnrepository.com/artifact/com.thoughtworks.xstream/xstream -->\n<dependency>\n    <groupId>com.thoughtworks.xstream</groupId>\n    <artifactId>xstream</artifactId>\n    <version>1.3.1</version>\n</dependency>\n```\n\n## 输出xml\n\n### 手动配置\n\nAuthor 类\n\n```java\npublic class Author {\n\n    private String name;\n\n    public Author(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n```\n\nEntry 类\n\n```java\npublic class Entry {\n\n    private String title, description;\n\n    public Entry(String title, String description) {\n        this.title = title;\n        this.description = description;\n    }\n}\n```\n\nBlog 类\n\n```java\npublic class Blog {\n\n    private Author writer;\n\n    private List entries = new ArrayList();\n\n    public Blog(Author writer) {\n        this.writer = writer;\n    }\n\n    public void add(Entry entry) {\n        entries.add(entry);\n    }\n\n    public List getContent() {\n        return entries;\n    }\n\n    public static void main(String[] args) {\n        Blog teamBlog = new Blog(new Author(\"qisheng.li\"));\n        teamBlog.add(new Entry(\"first\", \"first blog entry\"));\n        teamBlog.add(new Entry(\"second\", \"second blog entry\"));\n\n        XStream xStream = new XStream();\n        System.out.println(xStream.toXML(teamBlog));        \n    }\n}\n```\n\n输出的内容为:\n\n```xml\n<com.air.xml.xstream.alias.Blog>\n  <writer>\n    <name>qisheng.li</name>\n  </writer>\n  <entries>\n    <com.air.xml.xstream.alias.Entry>\n      <title>first</title>\n      <description>first blog entry</description>\n    </com.air.xml.xstream.alias.Entry>\n    <com.air.xml.xstream.alias.Entry>\n      <title>second</title>\n      <description>second blog entry</description>\n    </com.air.xml.xstream.alias.Entry>\n  </entries>\n</com.air.xml.xstream.alias.Blog>\n```\n- *默认输出的类，是fully qualified name，可以手动设置别名*\n\n```java\n//alias\n        xStream.alias(\"blog\", Blog.class);\n        xStream.alias(\"entry\", Entry.class);\n```\n\n输出:\n\n```xml\n<blog>\n  <writer>\n    <name>qisheng.li</name>\n  </writer>\n  <entries>\n    <entry>\n      <title>first</title>\n      <description>first blog entry</description>\n    </entry>\n    <entry>\n      <title>second</title>\n      <description>second blog entry</description>\n    </entry>\n  </entries>\n</blog>\n```\n\n- *也可以设置属性级别的别名*\n\n```java\nxStream.aliasField(\"author\", Blog.class, \"writter\");\n```\n\n输出：\n\n```xml\n<blog>\n  <author>\n    <name>qisheng.li</name>\n  </author>\n  <entries>\n    <entry>\n      <title>first</title>\n      <description>first blog entry</description>\n    </entry>\n    <entry>\n      <title>second</title>\n      <description>second blog entry</description>\n    </entry>\n  </entries>\n</blog>\n```\n\n- *包级别的别名*\n\n```java\n        xStream.aliasPackage(\"aliased.pachage.name\", \"com.air.xml.xstream.alias\");\n```\n\n输出的xml:\n\n```xml\n<aliased.pachage.name.Blog author=\"qisheng.li\">\n  <entry>\n    <title>first</title>\n    <description>first blog entry</description>\n  </entry>\n  <entry>\n    <title>second</title>\n    <description>second blog entry</description>\n  </entry>\n</aliased.pachage.name.Blog>\n```\n\n#### Implicit Collections\n\n> implicit collection: whenever you have a collection which doesn't need to display it's root tag, you can map it as an implicit collection.\n\n如果不想展示一个集合的root节点，比如上述的`entries`，可以将其当做一个`implicit collection`\n\n```java\n    //implicit collection\n    xStream.addImplicitCollection(Blog.class, \"entries\");\n```\n\n输出:\n\n```xml\n<blog>\n  <author>\n    <name>qisheng.li</name>\n  </author>\n  <entry>\n    <title>first</title>\n    <description>first blog entry</description>\n  </entry>\n  <entry>\n    <title>second</title>\n    <description>second blog entry</description>\n  </entry>\n</blog>\n```\n\n可以看到`entries`这个节点已经没有了\n\n#### field输出为属性值\n\n接着上面的例子，我们现在想让Blog的writer输出为Blog标签的属性值。\n\n实现步骤：\n\n1.创建一个转换器\n\n```java\npublic class AuthorConverter  implements SingleValueConverter {\n\n    @Override\n    public String toString(Object obj) {\n        return ((Author) obj).getName();\n    }\n\n    @Override\n    public Object fromString(String str) {\n        return new Author(str);\n    }\n\n    @Override\n    public boolean canConvert(Class type) {\n        return type.equals(Author.class);\n    }\n}\n```\n\n2.注册这个转换器\n\n```java\nxStream.registerConverter(new AuthorConverter());\n```\n\n3.告诉XStream\n\n```java\n//attribute aliasing\nxStream.useAttributeFor(Blog.class, \"writer\");\nxStream.registerConverter(new AuthorConverter());\n//field alias\nxStream.aliasField(\"author\", Blog.class, \"writer\");\n```\n\n输出的xml：\n\n```xml\n<blog author=\"qisheng.li\">\n  <entry>\n    <title>first</title>\n    <description>first blog entry</description>\n  </entry>\n  <entry>\n    <title>second</title>\n    <description>second blog entry</description>\n  </entry>\n</blog>\n```\n\n\n### 基于注解\n\n主要使用的是`XStreamAlias`注解来标记别名\n\n```java\n@XStreamAlias(\"message\")\npublic class RendezvousMessage {\n\n    @XStreamAlias(\"type\")\n    private int messageType;\n\n    public RendezvousMessage(int messageType) {\n        this.messageType = messageType;\n    }\n\n    public static void main(String[] args) {\n        XStream xStream = new XStream();\n        xStream.processAnnotations(RendezvousMessage.class);\n        RendezvousMessage rendezvousMessage = new RendezvousMessage(12);\n        System.out.println(xStream.toXML(rendezvousMessage));\n    }\n}\n\n```\n\nxml 输出\n\n```xml\n<message>\n  <type>12</type>\n</message>\n```\n\n- ImplicitCollection\n\n使用 `@XstreamImplicit(itemFieldName = \"xxx\")`来处理\n\n```java\n    @XStreamImplicit(itemFieldName = \"part\")\n    private List<String> content;\n```\n\n```xml\n<message>\n  <type>12</type>\n  <part>first content</part>\n  <part>second content</part>\n</message>\n```\n- converter\n\n添加一个属性字段并指明他使用的转换器, 和一个基本类型——boolean\n\n```java\n    @XStreamConverter(value=BooleanConverter.class)\n    private boolean important;\n\n    @XStreamConverter(SingleValueCalendarConverter.class)\n    private Calendar created = new GregorianCalendar();\n```\n\n转化器代码\n\n```java\npublic class SingleValueCalendarConverter implements Converter {\n    @Override\n    public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {\n        Calendar calendar = (Calendar) source;\n        writer.setValue(String.valueOf(calendar.getTime().getTime()));\n    }\n\n    @Override\n    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n        GregorianCalendar calendar = new GregorianCalendar();\n        calendar.setTime(new Date(Long.parseLong(reader.getValue())));\n        return calendar;\n    }\n\n    @Override\n    public boolean canConvert(Class type) {\n        return type.equals(GregorianCalendar.class);\n    }\n}\n```\n\n输出的xml结果：\n\n```xml\n<message>\n  <type>12</type>\n  <part>first content</part>\n  <part>second content</part>\n  <important>false</important>\n  <created>1482856467282</created>\n</message>\n```\n\n- 属性\n\n```java\n    @XStreamAlias(\"type\")\n    @XStreamAsAttribute\n    private int messageType;\n```\n\n输出结果\n\n```xml\n<message type=\"12\">\n  <part>first content</part>\n  <part>second content</part>\n  <important>false</important>\n  <created>1482856554517</created>\n</message>\n```\n\n- 忽略一些字段\n\n```xml\n<message type=\"12\">\n  <part>first content</part>\n  <part>second content</part>\n  <created>1482856661757</created>\n</message>\n```\n\n`important` 属性已经被隐藏\n\n\n#### 自动扫描注解\n\n```java\nxStream.autodetectAnnotations(true);\n```\n\n## xml转对象\n\n ```java\n        RendezvousMessage deserializedMessage = (RendezvousMessage) xStream.fromXML(\"<message type=\\\"12\\\">\\n\" +\n                \"  <part>first content</part>\\n\" +\n                \"  <part>second content</part>\\n\" +\n                \"  <created>1482859234272</created>\\n\" +\n                \"</message>\");\n ```\n \n# 参考\n\n1. [About XStream](http://x-stream.github.io/index.html)\n\n2. [Alias Tutorial](http://x-stream.github.io/alias-tutorial.html)\n\n3. [Annotations Tutorial](http://x-stream.github.io/annotations-tutorial.html)\n\n","slug":"xstream","published":1,"updated":"2017-02-02T09:09:09.348Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmg480004w4py027at54q"},{"toc":true,"title":"web.xml","_content":"\n## load-on-startup标签\n\n> Servlets are initialized either lazily at request processing time or eagerly during\ndeployment. In the latter case, they are initialized in the order indicated by\ntheir load-on-startup elements.\n\n在web容器启动的时候，可以采用`lazily`加载的方式和`eagerly`的方式。\n\n`load-on-startup`中的值决定了进行哪种方式。\n\n> If the value is a negative integer, or the element is not present, the\ncontainer is free to load the servlet whenever it chooses. If the value is a positive\ninteger or 0, the container must load and initialize the servlet as the application is\ndeployed.\n\n如果<load-on-startup>这个元素没有出现，或者出现了但是里面的值是负的，容器可以按照自己的需要选择加载Servlet的时机。\n\n如果里面的值是正数或者0，容器必须保证在容器启动的时候加载和初始化这个servlet\n\n>  The container must guarantee that servlets marked with lower integers\nare loaded before servlets marked with higher integers.\n\n这个值越小，优先级越高，容器优先加载。\n\n> The container may choose\nthe order of loading of servlets with the same load-on-startup value.\n\n如果里面的值是一样的，那么加载的顺序由容器来决定（不同实现可能不同）\n\n\n# 参考\n\n1. Java Servlet Specification 3.0","source":"_posts/web-xml.md","raw":"toc: true\ntitle: web.xml\ntoc: true\ntags: servlet\ncategory: tomcat\n---\n\n## load-on-startup标签\n\n> Servlets are initialized either lazily at request processing time or eagerly during\ndeployment. In the latter case, they are initialized in the order indicated by\ntheir load-on-startup elements.\n\n在web容器启动的时候，可以采用`lazily`加载的方式和`eagerly`的方式。\n\n`load-on-startup`中的值决定了进行哪种方式。\n\n> If the value is a negative integer, or the element is not present, the\ncontainer is free to load the servlet whenever it chooses. If the value is a positive\ninteger or 0, the container must load and initialize the servlet as the application is\ndeployed.\n\n如果<load-on-startup>这个元素没有出现，或者出现了但是里面的值是负的，容器可以按照自己的需要选择加载Servlet的时机。\n\n如果里面的值是正数或者0，容器必须保证在容器启动的时候加载和初始化这个servlet\n\n>  The container must guarantee that servlets marked with lower integers\nare loaded before servlets marked with higher integers.\n\n这个值越小，优先级越高，容器优先加载。\n\n> The container may choose\nthe order of loading of servlets with the same load-on-startup value.\n\n如果里面的值是一样的，那么加载的顺序由容器来决定（不同实现可能不同）\n\n\n# 参考\n\n1. Java Servlet Specification 3.0","slug":"web-xml","published":1,"date":"2017-01-14T06:06:34.798Z","updated":"2017-01-14T06:06:34.798Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmg4j0009w4py7a8c1szn"},{"title":"tomcat中的StringManager","toc":true,"date":"2017-02-05T16:45:02.000Z","_content":"\n\ntomcat中使用StringManager来管理错误提示信息，错误信息存储在`LocalStrings.properties`文件中，支持包级别的文件配置。\n\n\n## StringManager\n\n构造函数私有，通过静态方法`getManager`获取对应package的实例\n\n```java\n\n    private static final Hashtable<String, StringManager> managers =\n            new Hashtable<>();\n\n    /**\n     * Get the StringManager for a particular package. If a manager for\n     * a package already exists, it will be reused, else a new\n     * StringManager will be created and returned.\n     *\n     * @param packageName The package name\n     */\n    public static final synchronized StringManager getManager(String packageName) {\n        StringManager mgr = managers.get(packageName);\n        if (mgr == null) {\n            mgr = new StringManager(packageName);\n            managers.put(packageName, mgr);\n        }\n        return mgr;\n    }\n```\n\n## LocalStrings\n\n本身支持国际化(i18n), LocalStrings.properties（英文）、LocalStrings_es.properties（西班牙语）、LocalStrings_ja.properties（日语）\n\n文件示例：\n\n```\ncontextBindings.unknownContext=Unknown context name : {0}\ncontextBindings.noContextBoundToThread=No naming context bound to this thread\ncontextBindings.noContextBoundToCL=No naming context bound to this class loader\nselectorContext.noJavaUrl=This context must be accessed through a java: URL\nselectorContext.methodUsingName=Call to method ''{0}'' with a Name of ''{1}''\n```\n\n## 参考\n\n1. 《How tomcat works》","source":"_posts/tomcat-stringmanager.md","raw":"title: tomcat中的StringManager\ntags: string-manager\ncategory: tomcat\ntoc: true\ndate: 2017-02-06 00:45:02\n---\n\n\ntomcat中使用StringManager来管理错误提示信息，错误信息存储在`LocalStrings.properties`文件中，支持包级别的文件配置。\n\n\n## StringManager\n\n构造函数私有，通过静态方法`getManager`获取对应package的实例\n\n```java\n\n    private static final Hashtable<String, StringManager> managers =\n            new Hashtable<>();\n\n    /**\n     * Get the StringManager for a particular package. If a manager for\n     * a package already exists, it will be reused, else a new\n     * StringManager will be created and returned.\n     *\n     * @param packageName The package name\n     */\n    public static final synchronized StringManager getManager(String packageName) {\n        StringManager mgr = managers.get(packageName);\n        if (mgr == null) {\n            mgr = new StringManager(packageName);\n            managers.put(packageName, mgr);\n        }\n        return mgr;\n    }\n```\n\n## LocalStrings\n\n本身支持国际化(i18n), LocalStrings.properties（英文）、LocalStrings_es.properties（西班牙语）、LocalStrings_ja.properties（日语）\n\n文件示例：\n\n```\ncontextBindings.unknownContext=Unknown context name : {0}\ncontextBindings.noContextBoundToThread=No naming context bound to this thread\ncontextBindings.noContextBoundToCL=No naming context bound to this class loader\nselectorContext.noJavaUrl=This context must be accessed through a java: URL\nselectorContext.methodUsingName=Call to method ''{0}'' with a Name of ''{1}''\n```\n\n## 参考\n\n1. 《How tomcat works》","slug":"tomcat-stringmanager","published":1,"updated":"2017-02-05T16:45:03.012Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmg4p000ew4py3gzkqv8m"},{"title":"tomcat中文编码设置","toc":true,"date":"2016-12-22T16:43:20.000Z","_content":"\n\n## tomcat中文乱码\n\ntomcat 默认的编`ISO-8859-1`编码，部分中文会出现乱码\n\n> *URIEncoding*   \nThis specifies the character encoding used to decode the URI bytes, after %xx decoding the URL. If not specified, ISO-8859-1 will be used.\n\n\n## 编码设置\n\n`conf/server.xml`\n\n修改前：\n\n```xml\n<Connector port=\"8080\" redirectPort=\"8443\" connectionTimeout=\"20000\" protocol=\"HTTP/1.1\"/>\n```\n\n修改后：\n\n```xml\n    <Connector port=\"8080\" redirectPort=\"8443\" connectionTimeout=\"20000\" \n    protocol=\"HTTP/1.1\"               \n    URIEncoding=\"UTF-8\"/>\n```\n\n## 参考\n\n1. [The HTTP Connector](https://tomcat.apache.org/tomcat-7.0-doc/config/http.html)\n\n","source":"_posts/tomcat-encoding.md","raw":"---\ntitle: tomcat中文编码设置\ntags: encoding\ncategory: tomcat\ntoc: true\ndate: 2016-12-23 00:43:20\n---\n\n\n## tomcat中文乱码\n\ntomcat 默认的编`ISO-8859-1`编码，部分中文会出现乱码\n\n> *URIEncoding*   \nThis specifies the character encoding used to decode the URI bytes, after %xx decoding the URL. If not specified, ISO-8859-1 will be used.\n\n\n## 编码设置\n\n`conf/server.xml`\n\n修改前：\n\n```xml\n<Connector port=\"8080\" redirectPort=\"8443\" connectionTimeout=\"20000\" protocol=\"HTTP/1.1\"/>\n```\n\n修改后：\n\n```xml\n    <Connector port=\"8080\" redirectPort=\"8443\" connectionTimeout=\"20000\" \n    protocol=\"HTTP/1.1\"               \n    URIEncoding=\"UTF-8\"/>\n```\n\n## 参考\n\n1. [The HTTP Connector](https://tomcat.apache.org/tomcat-7.0-doc/config/http.html)\n\n","slug":"tomcat-encoding","published":1,"updated":"2017-02-02T09:09:17.711Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmg4t000iw4pyq846ie4c"},{"title":"tomcat access log 格式设置","toc":true,"date":"2016-12-22T16:43:10.000Z","_content":"\n\n## Tomcat access log 日志格式\n\n\n文件位置: `conf/server.xml`\n\n默认配置\n\n```xml\n        <!-- Access log processes all example.\n             Documentation at: /docs/config/valve.html\n             Note: The pattern used is equivalent to using pattern=\"common\" -->\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\"\n               prefix=\"localhost_access_log.\" suffix=\".txt\"\n               pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" />\n```\n\n|名称 | 含义|\n|-|-|\n|%a | Remote IP address|\n|%A | Local IP address|\n|%b | Bytes sent, excluding HTTP headers, or '-' if zero|\n|%B | Bytes sent, excluding HTTP headers|\n|%h | Remote host name (or IP address if enableLookups for the connector is false)|\n|%H | Request protocol|\n|%l | Remote logical username from identd (always returns '-')|\n|%m | Request method (GET, POST, etc.)|\n|%p | Local port on which this request was received|\n|%q | Query string (prepended with a '?' if it exists)|\n|%r | First line of the request (method and request URI)|\n|%s | HTTP status code of the response|\n|%S | User session ID|\n|%t | Date and time, in Common Log Format|\n|%u | Remote user that was authenticated (if any), else '-'|\n|%U | Requested URL path|\n|%v | Local server name|\n|%D | Time taken to process the request, in millis|\n|%T | Time taken to process the request, in seconds|\n|%F | Time taken to commit the response, in millis|\n|%I | Current request thread name (can compare later with stacktraces)|\n\n默认的配置打出来的access日志如下：\n\n||||||||\n| -| -| -|-|- |- | -|\n|127.0.0.1 |-| -| [07/Oct/2016:22:31:56 +0800]| \"GET /dubbo/ HTTP/1.1\" |404 |963|\n|远程IP |logical username| remote user|时间和日期| http请求的第一行| 状态码| 除去http头的发送大小| \n\n### header、cookie、session其他字段的支持\n\n> There is also support to write information incoming or outgoing headers, cookies, session or request attributes and special timestamp formats. It is modeled after the Apache HTTP Server log configuration syntax:\n\n|名称 | 含义|\n|-|-|\n|%{xxx}i |for incoming headers|\n|%{xxx}o |for outgoing response headers|\n|%{xxx}c |for a specific cookie|\n|%{xxx}r |xxx is an attribute in the ServletRequest|\n|%{xxx}s |xxx is an attribute in the HttpSession|\n|%{xxx}t |xxx is an enhanced SimpleDateFormat pattern|\n\n例如： `%{X-Forwarded-For}i`即可打印出实际访问的ip地址（考虑到ng的反向代理）\n\nHTTP头一般格式如下:\n\n`X-Forwarded-For: client1, proxy1, proxy2`\n>其中的值通过一个 逗号+空格 把多个IP地址区分开, 最左边（client1）是最原始客户端的IP地址, 代理服务器每成功收到一个请求，就把请求来源IP地址添加到右边。 在上面这个例子中，这个请求成功通过了三台代理服务器：proxy1, proxy2 及 proxy3。请求由client1发出，到达了proxy3（proxy3可能是请求的终点）。请求刚从client1中发出时，XFF是空的，请求被发往proxy1；通过proxy1的时候，client1被添加到XFF中，之后请求被发往proxy2;通过proxy2的时候，proxy1被添加到XFF中，之后请求被发往proxy3；通过proxy3时，proxy2被添加到XFF中，之后请求的的去向不明，如果proxy3不是请求终点，请求会被继续转发。\n\n>鉴于伪造这一字段非常容易，应该谨慎使用X-Forwarded-For字段。正常情况下XFF中最后一个IP地址是最后一个代理服务器的IP地址, 这通常是一个比较可靠的信息来源。\n\n\n## 参考\n\n1. [The Valve Component](http://tomcat.apache.org/tomcat-7.0-doc/config/valve.html)\n\n2. [X-Forwarded-For](https://zh.wikipedia.org/wiki/X-Forwarded-For)","source":"_posts/tomcat-access-log.md","raw":"---\ntitle: tomcat access log 格式设置\ntags: access-log\ncategory: tomcat\ntoc: true\ndate: 2016-12-23 00:43:10\n---\n\n\n## Tomcat access log 日志格式\n\n\n文件位置: `conf/server.xml`\n\n默认配置\n\n```xml\n        <!-- Access log processes all example.\n             Documentation at: /docs/config/valve.html\n             Note: The pattern used is equivalent to using pattern=\"common\" -->\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\"\n               prefix=\"localhost_access_log.\" suffix=\".txt\"\n               pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" />\n```\n\n|名称 | 含义|\n|-|-|\n|%a | Remote IP address|\n|%A | Local IP address|\n|%b | Bytes sent, excluding HTTP headers, or '-' if zero|\n|%B | Bytes sent, excluding HTTP headers|\n|%h | Remote host name (or IP address if enableLookups for the connector is false)|\n|%H | Request protocol|\n|%l | Remote logical username from identd (always returns '-')|\n|%m | Request method (GET, POST, etc.)|\n|%p | Local port on which this request was received|\n|%q | Query string (prepended with a '?' if it exists)|\n|%r | First line of the request (method and request URI)|\n|%s | HTTP status code of the response|\n|%S | User session ID|\n|%t | Date and time, in Common Log Format|\n|%u | Remote user that was authenticated (if any), else '-'|\n|%U | Requested URL path|\n|%v | Local server name|\n|%D | Time taken to process the request, in millis|\n|%T | Time taken to process the request, in seconds|\n|%F | Time taken to commit the response, in millis|\n|%I | Current request thread name (can compare later with stacktraces)|\n\n默认的配置打出来的access日志如下：\n\n||||||||\n| -| -| -|-|- |- | -|\n|127.0.0.1 |-| -| [07/Oct/2016:22:31:56 +0800]| \"GET /dubbo/ HTTP/1.1\" |404 |963|\n|远程IP |logical username| remote user|时间和日期| http请求的第一行| 状态码| 除去http头的发送大小| \n\n### header、cookie、session其他字段的支持\n\n> There is also support to write information incoming or outgoing headers, cookies, session or request attributes and special timestamp formats. It is modeled after the Apache HTTP Server log configuration syntax:\n\n|名称 | 含义|\n|-|-|\n|%{xxx}i |for incoming headers|\n|%{xxx}o |for outgoing response headers|\n|%{xxx}c |for a specific cookie|\n|%{xxx}r |xxx is an attribute in the ServletRequest|\n|%{xxx}s |xxx is an attribute in the HttpSession|\n|%{xxx}t |xxx is an enhanced SimpleDateFormat pattern|\n\n例如： `%{X-Forwarded-For}i`即可打印出实际访问的ip地址（考虑到ng的反向代理）\n\nHTTP头一般格式如下:\n\n`X-Forwarded-For: client1, proxy1, proxy2`\n>其中的值通过一个 逗号+空格 把多个IP地址区分开, 最左边（client1）是最原始客户端的IP地址, 代理服务器每成功收到一个请求，就把请求来源IP地址添加到右边。 在上面这个例子中，这个请求成功通过了三台代理服务器：proxy1, proxy2 及 proxy3。请求由client1发出，到达了proxy3（proxy3可能是请求的终点）。请求刚从client1中发出时，XFF是空的，请求被发往proxy1；通过proxy1的时候，client1被添加到XFF中，之后请求被发往proxy2;通过proxy2的时候，proxy1被添加到XFF中，之后请求被发往proxy3；通过proxy3时，proxy2被添加到XFF中，之后请求的的去向不明，如果proxy3不是请求终点，请求会被继续转发。\n\n>鉴于伪造这一字段非常容易，应该谨慎使用X-Forwarded-For字段。正常情况下XFF中最后一个IP地址是最后一个代理服务器的IP地址, 这通常是一个比较可靠的信息来源。\n\n\n## 参考\n\n1. [The Valve Component](http://tomcat.apache.org/tomcat-7.0-doc/config/valve.html)\n\n2. [X-Forwarded-For](https://zh.wikipedia.org/wiki/X-Forwarded-For)","slug":"tomcat-access-log","published":1,"updated":"2017-02-02T09:09:19.349Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmg4y000mw4py6p5l1b7n"},{"title":"tomcat访问时发生AbstractMethodError","toc":true,"date":"2017-01-27T09:16:10.000Z","_content":"\n\n## 异常堆栈\n\n```\njavax.servlet.ServletException: Servlet execution threw an exception\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:313) [catalina.jar:6.0.29]\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [catalina.jar:6.0.29]\n        at qunar.ServletWatcher.doFilter(ServletWatcher.java:160) ~[common-core-8.3.5.jar:na]\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) [catalina.jar:6.0.29]\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [catalina.jar:6.0.29]\n        at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121) [spring-web-4.2.5.RELEASE.jar:4.2.5.RELEASE]\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.5.RELEASE.jar:4.2.5.RELEASE]\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) [catalina.jar:6.0.29]\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [catalina.jar:6.0.29]\n        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) [catalina.jar:6.0.29]\n        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) [catalina.jar:6.0.29]\n        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127) [catalina.jar:6.0.29]\n        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) [catalina.jar:6.0.29]\n        at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:555) [catalina.jar:6.0.29]\n        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) [catalina.jar:6.0.29]\n        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:298) [catalina.jar:6.0.29]\n        at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:857) [tomcat-coyote.jar:6.0.29]\n        at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:588) [tomcat-coyote.jar:6.0.29]\n        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489) [tomcat-coyote.jar:6.0.29]\n        at java.lang.Thread.run(Thread.java:745) [na:1.8.0_60]\nCaused by: java.lang.AbstractMethodError: null\n        at javax.servlet.http.HttpServletResponseWrapper.getStatus(HttpServletResponseWrapper.java:228) ~[lib/:na]\n        at javax.servlet.http.HttpServletResponseWrapper.getStatus(HttpServletResponseWrapper.java:228) ~[lib/:na]\n        at org.springframework.web.servlet.FrameworkServlet.publishRequestHandledEvent(FrameworkServlet.java:1070) ~[spring-webmvc-4.2.5.RELEASE.jar:4.2.5.RELEASE]\n        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1003) ~[spring-webmvc-4.2.5.RELEASE.jar:4.2.5.RELEASE]\n        at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:859) ~[spring-webmvc-4.2.5.RELEASE.jar:4.2.5.RELEASE]\n        at javax.servlet.http.HttpServlet.doHead(HttpServlet.java:244) ~[lib/:na]\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:644) ~[lib/:na]\n        at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:844) ~[spring-webmvc-4.2.5.RELEASE.jar:4.2.5.RELEASE]\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:728) ~[lib/:na]\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) [catalina.jar:6.0.29]\n        ... 19 common frames omitted\n```\n\n### AbstractMethodError异常\n\n```java\n/**\n * Thrown when an application tries to call an abstract method.\n * Normally, this error is caught by the compiler; this error can\n * only occur at run time if the definition of some class has\n * incompatibly changed since the currently executing method was last\n * compiled.\n *\n * @author  unascribed\n * @since   JDK1.0\n */\npublic\nclass AbstractMethodError extends IncompatibleClassChangeError {...}\n```\n\n就是调用了一个没有实现的抽象方法时会抛出这个异常。\n\n## 原因\n\n### 环境被搞乱\n\n有人把`servlet-api 3.0`的jar包拷贝到了`tomcat6`的lib目录下，替换了原来的jar包，造成spring以为他支持Servlet3.0 但是tomcat却没有实现这个方法。\n\n## Spring 版本\n\nSpring的版本是4.2.5，增加了一些`Servlet 3.0` 的特性支持, 但是使用之前Spring会根据使用的\n\n`Servlet-api`来检测是否支持`Servlet 3.0`\n\n使用的3.0的api\n\n```java\n    /**\n     * Gets the current status code of this response.\n     *\n     * @return the current status code of this response\n     *\n     * @since Servlet 3.0\n     */\n    public int getStatus();\n\n```\n\n在`FrameworkServlet`中会进行相应的检测和使用：\n\n```java\n    /** Checking for Servlet 3.0+ HttpServletResponse.getStatus() */\n    private static final boolean responseGetStatusAvailable =\n            ClassUtils.hasMethod(HttpServletResponse.class, \"getStatus\");\n\n\nprivate void publishRequestHandledEvent(\nHttpServletRequest request, HttpServletResponse response, long startTime, Throwable failureCause) {\n\n    if (this.publishEvents) {\n        // Whether or not we succeeded, publish an event.\n        long processingTime = System.currentTimeMillis() - startTime;\n        int statusCode = (responseGetStatusAvailable ? response.getStatus() : -1);\n        this.webApplicationContext.publishEvent(\n            new ServletRequestHandledEvent(this,\n                    request.getRequestURI(), request.getRemoteAddr(),\n                    request.getMethod(), getServletConfig().getServletName(),\n                    WebUtils.getSessionId(request), getUsernameForRequest(request),\n                    processingTime, failureCause, statusCode));\n    }\n}\n```\n\n### 为什么编译时没有报错\n\n>当前的JVM规范中，与方法调用相关的指令有4个：invokevirtual、invokeinterface、invokestatic与invokespecial。其中调用接口方法时使用的JVM指令是invokeinterface。这个指令与另外3个方法调用指令有一个显著的差异：它不要求JVM的校验器（verifier）检查被调用对象（receiver）的类型；另外3个方法调用指令都要求校验被调用对象。也就是说，使用invokeinterface时如果被调用对象没有实现指定的接口，则应该在运行时而不是链接时抛出异常；而另外3个方法调用指令都要求在链接时抛出异常。 \n\n这也是为啥类的载入是成功的，但是tomcat里面没有实现那个方法。\n\n## servlet和tomcat的对应关系\n\n{% asset_img tomcat-servlet.jpg  tomcat和Servlet的版本对应关系 %}\n\n## 参考\n\n1. [JVM在校验阶段不检查接口的实现状况 - Script Ahead, Code Behind - ITeye技术网站](http://rednaxelafx.iteye.com/blog/400362)\n\n2. [Apache Tomcat® - Which Version Do I Want?](http://tomcat.apache.org/whichversion.html)","source":"_posts/tomcat-AbstractMethodError.md","raw":"---\ntitle: tomcat访问时发生AbstractMethodError\ncategory: tomcat\ntoc: true\ndate: 2017-01-27 17:16:10\ntags:\n---\n\n\n## 异常堆栈\n\n```\njavax.servlet.ServletException: Servlet execution threw an exception\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:313) [catalina.jar:6.0.29]\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [catalina.jar:6.0.29]\n        at qunar.ServletWatcher.doFilter(ServletWatcher.java:160) ~[common-core-8.3.5.jar:na]\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) [catalina.jar:6.0.29]\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [catalina.jar:6.0.29]\n        at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121) [spring-web-4.2.5.RELEASE.jar:4.2.5.RELEASE]\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.5.RELEASE.jar:4.2.5.RELEASE]\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) [catalina.jar:6.0.29]\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [catalina.jar:6.0.29]\n        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) [catalina.jar:6.0.29]\n        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) [catalina.jar:6.0.29]\n        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127) [catalina.jar:6.0.29]\n        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) [catalina.jar:6.0.29]\n        at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:555) [catalina.jar:6.0.29]\n        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) [catalina.jar:6.0.29]\n        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:298) [catalina.jar:6.0.29]\n        at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:857) [tomcat-coyote.jar:6.0.29]\n        at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:588) [tomcat-coyote.jar:6.0.29]\n        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489) [tomcat-coyote.jar:6.0.29]\n        at java.lang.Thread.run(Thread.java:745) [na:1.8.0_60]\nCaused by: java.lang.AbstractMethodError: null\n        at javax.servlet.http.HttpServletResponseWrapper.getStatus(HttpServletResponseWrapper.java:228) ~[lib/:na]\n        at javax.servlet.http.HttpServletResponseWrapper.getStatus(HttpServletResponseWrapper.java:228) ~[lib/:na]\n        at org.springframework.web.servlet.FrameworkServlet.publishRequestHandledEvent(FrameworkServlet.java:1070) ~[spring-webmvc-4.2.5.RELEASE.jar:4.2.5.RELEASE]\n        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1003) ~[spring-webmvc-4.2.5.RELEASE.jar:4.2.5.RELEASE]\n        at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:859) ~[spring-webmvc-4.2.5.RELEASE.jar:4.2.5.RELEASE]\n        at javax.servlet.http.HttpServlet.doHead(HttpServlet.java:244) ~[lib/:na]\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:644) ~[lib/:na]\n        at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:844) ~[spring-webmvc-4.2.5.RELEASE.jar:4.2.5.RELEASE]\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:728) ~[lib/:na]\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) [catalina.jar:6.0.29]\n        ... 19 common frames omitted\n```\n\n### AbstractMethodError异常\n\n```java\n/**\n * Thrown when an application tries to call an abstract method.\n * Normally, this error is caught by the compiler; this error can\n * only occur at run time if the definition of some class has\n * incompatibly changed since the currently executing method was last\n * compiled.\n *\n * @author  unascribed\n * @since   JDK1.0\n */\npublic\nclass AbstractMethodError extends IncompatibleClassChangeError {...}\n```\n\n就是调用了一个没有实现的抽象方法时会抛出这个异常。\n\n## 原因\n\n### 环境被搞乱\n\n有人把`servlet-api 3.0`的jar包拷贝到了`tomcat6`的lib目录下，替换了原来的jar包，造成spring以为他支持Servlet3.0 但是tomcat却没有实现这个方法。\n\n## Spring 版本\n\nSpring的版本是4.2.5，增加了一些`Servlet 3.0` 的特性支持, 但是使用之前Spring会根据使用的\n\n`Servlet-api`来检测是否支持`Servlet 3.0`\n\n使用的3.0的api\n\n```java\n    /**\n     * Gets the current status code of this response.\n     *\n     * @return the current status code of this response\n     *\n     * @since Servlet 3.0\n     */\n    public int getStatus();\n\n```\n\n在`FrameworkServlet`中会进行相应的检测和使用：\n\n```java\n    /** Checking for Servlet 3.0+ HttpServletResponse.getStatus() */\n    private static final boolean responseGetStatusAvailable =\n            ClassUtils.hasMethod(HttpServletResponse.class, \"getStatus\");\n\n\nprivate void publishRequestHandledEvent(\nHttpServletRequest request, HttpServletResponse response, long startTime, Throwable failureCause) {\n\n    if (this.publishEvents) {\n        // Whether or not we succeeded, publish an event.\n        long processingTime = System.currentTimeMillis() - startTime;\n        int statusCode = (responseGetStatusAvailable ? response.getStatus() : -1);\n        this.webApplicationContext.publishEvent(\n            new ServletRequestHandledEvent(this,\n                    request.getRequestURI(), request.getRemoteAddr(),\n                    request.getMethod(), getServletConfig().getServletName(),\n                    WebUtils.getSessionId(request), getUsernameForRequest(request),\n                    processingTime, failureCause, statusCode));\n    }\n}\n```\n\n### 为什么编译时没有报错\n\n>当前的JVM规范中，与方法调用相关的指令有4个：invokevirtual、invokeinterface、invokestatic与invokespecial。其中调用接口方法时使用的JVM指令是invokeinterface。这个指令与另外3个方法调用指令有一个显著的差异：它不要求JVM的校验器（verifier）检查被调用对象（receiver）的类型；另外3个方法调用指令都要求校验被调用对象。也就是说，使用invokeinterface时如果被调用对象没有实现指定的接口，则应该在运行时而不是链接时抛出异常；而另外3个方法调用指令都要求在链接时抛出异常。 \n\n这也是为啥类的载入是成功的，但是tomcat里面没有实现那个方法。\n\n## servlet和tomcat的对应关系\n\n{% asset_img tomcat-servlet.jpg  tomcat和Servlet的版本对应关系 %}\n\n## 参考\n\n1. [JVM在校验阶段不检查接口的实现状况 - Script Ahead, Code Behind - ITeye技术网站](http://rednaxelafx.iteye.com/blog/400362)\n\n2. [Apache Tomcat® - Which Version Do I Want?](http://tomcat.apache.org/whichversion.html)","slug":"tomcat-AbstractMethodError","published":1,"updated":"2017-02-02T09:09:48.273Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmg53000qw4pym4b9agit"},{"title":"ssh免密码登录设置","toc":true,"date":"2015-10-08T08:00:08.000Z","_content":"\n## 应用场景\n  现有A和B两台机器，我们要实现A在ssh登录到B的时候不用输入密码，B->A的过程类似\n## 具体过程\n  1. 在**A机器**上，生成 ssh 公钥密钥对\n\t``` bash\n\t$ ssh-keygen -t rsa\n\t```\n  2.  生成的文件存在 ~/.ssh/目录下，windows存在C\\Users\\your_name\\.ssh\\ 目录下\n\tid_rsa是私钥，id_rsa.pub是公钥\n\n  3.  将A中生成的公钥加入到**B机器**的 authorized_keys 这个文件中，默认目录linux下是~/.ssh/ ，没有的话可以自己新建\n\t拷贝的过程可以使用以下命令\n\t``` bash\n\t$ ssh-copy-id -i 公钥文件路径 -p ssh端口  user@server\n\t```\n\t>ssh-copy-id  -  install  your  public  key in a remote machine's autho‐rized_keys. \n\t>If the  -i  option  is  given  then  the  identity  file  (defaults  to ~/.ssh/id_rsa.pub) is used,\n\t>regardless of whether there are any keys in your ssh-agent.\n\n此时A机器 ssh 登录B机器是不需要密码的\n\n\n\n","source":"_posts/ssh-passwd-free.md","raw":"---\ntitle: ssh免密码登录设置\ntags: ssh\ncategory: linux\ntoc: true\ndate: 2015-10-08 16:00:08\n---\n\n## 应用场景\n  现有A和B两台机器，我们要实现A在ssh登录到B的时候不用输入密码，B->A的过程类似\n## 具体过程\n  1. 在**A机器**上，生成 ssh 公钥密钥对\n\t``` bash\n\t$ ssh-keygen -t rsa\n\t```\n  2.  生成的文件存在 ~/.ssh/目录下，windows存在C\\Users\\your_name\\.ssh\\ 目录下\n\tid_rsa是私钥，id_rsa.pub是公钥\n\n  3.  将A中生成的公钥加入到**B机器**的 authorized_keys 这个文件中，默认目录linux下是~/.ssh/ ，没有的话可以自己新建\n\t拷贝的过程可以使用以下命令\n\t``` bash\n\t$ ssh-copy-id -i 公钥文件路径 -p ssh端口  user@server\n\t```\n\t>ssh-copy-id  -  install  your  public  key in a remote machine's autho‐rized_keys. \n\t>If the  -i  option  is  given  then  the  identity  file  (defaults  to ~/.ssh/id_rsa.pub) is used,\n\t>regardless of whether there are any keys in your ssh-agent.\n\n此时A机器 ssh 登录B机器是不需要密码的\n\n\n\n","slug":"ssh-passwd-free","published":1,"updated":"2017-02-02T09:09:49.102Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmg57000sw4py681b0uz9"},{"title":"spring-resource源码剖析","toc":true,"date":"2016-11-20T12:12:14.000Z","_content":"\n\n# Spring Resource\n\n## Why not Java URL类\n\n原因： 对底层资源的支持不足。\n\n1. there is no standardized URL implementation that may be used to access a resource that needs to be obtained from the classpath,or relative to a ServletContext.\n\n2. 不自定义URL handler的原因：\n\n  a. 过于复杂\n  b. lack some desirable functionality（如对URL所指资源是否存在的判断）\n\n\n## Resource 接口\n\n```java\n\npublic interface InputStreamSource {\n\n\t/**\n\t * Return an {@link InputStream}.\n\t * <p>It is expected that each call creates a <i>fresh</i> stream.\n\t * <p>This requirement is particularly important when you consider an API such\n\t * as JavaMail, which needs to be able to read the stream multiple times when\n\t * creating mail attachments. For such a use case, it is <i>required</i>\n\t * that each {@code getInputStream()} call returns a fresh stream.\n\t * @return the input stream for the underlying resource (must not be {@code null})\n\t * @throws IOException if the stream could not be opened\n\t * @see org.springframework.mail.javamail.MimeMessageHelper#addAttachment(String, InputStreamSource)\n\t */\n\tInputStream getInputStream() throws IOException;\n\n}\n\n\n\npublic interface Resource extends InputStreamSource {\n\n\t/**\n\t * Return whether this resource actually exists in physical form.\n\t * <p>This method performs a definitive existence check, whereas the\n\t * existence of a {@code Resource} handle only guarantees a\n\t * valid descriptor handle.\n\t */\n\tboolean exists();\n\n\t/**\n\t * Return whether the contents of this resource can be read,\n\t * e.g. via {@link #getInputStream()} or {@link #getFile()}.\n\t * <p>Will be {@code true} for typical resource descriptors;\n\t * note that actual content reading may still fail when attempted.\n\t * However, a value of {@code false} is a definitive indication\n\t * that the resource content cannot be read.\n\t * @see #getInputStream()\n\t */\n\tboolean isReadable();\n\n\t/**\n\t * Return whether this resource represents a handle with an open\n\t * stream. If true, the InputStream cannot be read multiple times,\n\t * and must be read and closed to avoid resource leaks.\n\t * <p>Will be {@code false} for typical resource descriptors.\n\t */\n\tboolean isOpen();\n\n\t/**\n\t * Return a URL handle for this resource.\n\t * @throws IOException if the resource cannot be resolved as URL,\n\t * i.e. if the resource is not available as descriptor\n\t */\n\tURL getURL() throws IOException;\n\n\t/**\n\t * Return a URI handle for this resource.\n\t * @throws IOException if the resource cannot be resolved as URI,\n\t * i.e. if the resource is not available as descriptor\n\t */\n\tURI getURI() throws IOException;\n\n\t/**\n\t * Return a File handle for this resource.\n\t * @throws IOException if the resource cannot be resolved as absolute\n\t * file path, i.e. if the resource is not available in a file system\n\t */\n\tFile getFile() throws IOException;\n\n\t/**\n\t * Determine the content length for this resource.\n\t * @throws IOException if the resource cannot be resolved\n\t * (in the file system or as some other known physical resource type)\n\t */\n\tlong contentLength() throws IOException;\n\n\t/**\n\t * Determine the last-modified timestamp for this resource.\n\t * @throws IOException if the resource cannot be resolved\n\t * (in the file system or as some other known physical resource type)\n\t */\n\tlong lastModified() throws IOException;\n\n\t/**\n\t * Create a resource relative to this resource.\n\t * @param relativePath the relative path (relative to this resource)\n\t * @return the resource handle for the relative resource\n\t * @throws IOException if the relative resource cannot be determined\n\t */\n\tResource createRelative(String relativePath) throws IOException;\n\n\t/**\n\t * Determine a filename for this resource, i.e. typically the last\n\t * part of the path: for example, \"myfile.txt\".\n\t * <p>Returns {@code null} if this type of resource does not\n\t * have a filename.\n\t */\n\tString getFilename();\n\n\t/**\n\t * Return a description for this resource,\n\t * to be used for error output when working with the resource.\n\t * <p>Implementations are also encouraged to return this value\n\t * from their {@code toString} method.\n\t * @see Object#toString()\n\t */\n\tString getDescription();\n\n}\n```\n### 继承体系\n\n{%  asset_img   resource.jpg  %}\n\n\n\n\n## ResourceLoader\n\n```java\npublic interface ResourceLoader {\n\n\t/** Pseudo URL prefix for loading from the class path: \"classpath:\" */\n\tString CLASSPATH_URL_PREFIX = ResourceUtils.CLASSPATH_URL_PREFIX;\n\n\n\t/**\n\t * Return a Resource handle for the specified resource.\n\t * The handle should always be a reusable resource descriptor,\n\t * allowing for multiple {@link Resource#getInputStream()} calls.\n\t * <p><ul>\n\t * <li>Must support fully qualified URLs, e.g. \"file:C:/test.dat\".\n\t * <li>Must support classpath pseudo-URLs, e.g. \"classpath:test.dat\".\n\t * <li>Should support relative file paths, e.g. \"WEB-INF/test.dat\".\n\t * (This will be implementation-specific, typically provided by an\n\t * ApplicationContext implementation.)\n\t * </ul>\n\t * <p>Note that a Resource handle does not imply an existing resource;\n\t * you need to invoke {@link Resource#exists} to check for existence.\n\t * @param location the resource location\n\t * @return a corresponding Resource handle\n\t * @see #CLASSPATH_URL_PREFIX\n\t * @see org.springframework.core.io.Resource#exists\n\t * @see org.springframework.core.io.Resource#getInputStream\n\t */\n\tResource getResource(String location);\n\n\t/**\n\t * Expose the ClassLoader used by this ResourceLoader.\n\t * <p>Clients which need to access the ClassLoader directly can do so\n\t * in a uniform manner with the ResourceLoader, rather than relying\n\t * on the thread context ClassLoader.\n\t * @return the ClassLoader (only {@code null} if even the system\n\t * ClassLoader isn't accessible)\n\t * @see org.springframework.util.ClassUtils#getDefaultClassLoader()\n\t */\n\tClassLoader getClassLoader();\n\n}\n\n```\n\nResourceLoader　负责加载Resource, 所有的application context都实现了这个接口。\n\n```java\nResource template = ctx.getResource(\"some/resource/path/myTemplate.txt\");\n```\n\n如果上述的ctx的类型是 ClassPathXmlApplicationContext，那么返回的Resource的具体类型就是\n\nClassPathResource； 如果ctx的类型是FileSystemXmlApplicationContext, 返回的类型就变成了\n\nFileSystemResource。\n\n### 指定返回的Resource类型\n```java\nResource template = ctx.getResource(\"classpath:some/resource/path/myTemplate.txt\");\n```\n\n通过显式的指定classpath前缀，返回的Resource的实际类型就是 ClassPathResource\n\n对应的关系见表格：\n\n|Prefix|Example|Explanation|\n|-|-|-|\n|classpath:|classpath:com/myapp/config.xml|Loaded from the classpath|\n|file: | file:///data/config.xml | Loaded as a URL, from the system|\n|http: | http://myserver/logo.png | Loaded as a URL |\n|（none） | /data/config.xml | Depends on the underlying ApplicationContext |\n\n#### classpath*\n\nclasspath*:conf/appContext.xml\n\n这个特殊的前缀会使spring在所有的ClassPath中查找和指定的名字相同的资源，他们会合并形成最终的\n\n上下文。\n\n>This special prefix specifies that all classpath resources that match the given name must be obtained\n(internally, this essentially happens via a ClassLoader.getResources(…) call), and then merged\nto form the final application context definition.\n\n### ResourceLoaderAware\n\n```java\npublic interface ResourceLoaderAware extends Aware {\n\n\t/**\n\t * Set the ResourceLoader that this object runs in.\n\t * <p>This might be a ResourcePatternResolver, which can be checked\n\t * through {@code instanceof ResourcePatternResolver}. See also the\n\t * {@code ResourcePatternUtils.getResourcePatternResolver} method.\n\t * <p>Invoked after population of normal bean properties but before an init callback\n\t * like InitializingBean's {@code afterPropertiesSet} or a custom init-method.\n\t * Invoked before ApplicationContextAware's {@code setApplicationContext}.\n\t * @param resourceLoader ResourceLoader object to be used by this object\n\t * @see org.springframework.core.io.support.ResourcePatternResolver\n\t * @see org.springframework.core.io.support.ResourcePatternUtils#getResourcePatternResolver\n\t */\n\tvoid setResourceLoader(ResourceLoader resourceLoader);\n\n}\n```\n\n实现这个接口的类，可以获得所在容器的ResourceLoader实例，一般来说就是相应的Application Context。也可以当做\n\nApplicationContextAware的替代。\n\n>   Interface to be implemented by any object that wishes to be notified of\n  the <b>ResourceLoader</b> (typically the ApplicationContext) that it runs in.\n  This is an alternative to a full ApplicationContext dependency via the\n  ApplicationContextAware interface.\n\n\n除了实现上述接口，还可以使用基于类型的注入，将ResourceLoader注入到需要的地方。\n","source":"_posts/spring-resource.md","raw":"---\ntitle: spring-resource源码剖析\ntags: resource\ncategory: spring\ntoc: true\ndate: 2016-11-20 20:12:14\n---\n\n\n# Spring Resource\n\n## Why not Java URL类\n\n原因： 对底层资源的支持不足。\n\n1. there is no standardized URL implementation that may be used to access a resource that needs to be obtained from the classpath,or relative to a ServletContext.\n\n2. 不自定义URL handler的原因：\n\n  a. 过于复杂\n  b. lack some desirable functionality（如对URL所指资源是否存在的判断）\n\n\n## Resource 接口\n\n```java\n\npublic interface InputStreamSource {\n\n\t/**\n\t * Return an {@link InputStream}.\n\t * <p>It is expected that each call creates a <i>fresh</i> stream.\n\t * <p>This requirement is particularly important when you consider an API such\n\t * as JavaMail, which needs to be able to read the stream multiple times when\n\t * creating mail attachments. For such a use case, it is <i>required</i>\n\t * that each {@code getInputStream()} call returns a fresh stream.\n\t * @return the input stream for the underlying resource (must not be {@code null})\n\t * @throws IOException if the stream could not be opened\n\t * @see org.springframework.mail.javamail.MimeMessageHelper#addAttachment(String, InputStreamSource)\n\t */\n\tInputStream getInputStream() throws IOException;\n\n}\n\n\n\npublic interface Resource extends InputStreamSource {\n\n\t/**\n\t * Return whether this resource actually exists in physical form.\n\t * <p>This method performs a definitive existence check, whereas the\n\t * existence of a {@code Resource} handle only guarantees a\n\t * valid descriptor handle.\n\t */\n\tboolean exists();\n\n\t/**\n\t * Return whether the contents of this resource can be read,\n\t * e.g. via {@link #getInputStream()} or {@link #getFile()}.\n\t * <p>Will be {@code true} for typical resource descriptors;\n\t * note that actual content reading may still fail when attempted.\n\t * However, a value of {@code false} is a definitive indication\n\t * that the resource content cannot be read.\n\t * @see #getInputStream()\n\t */\n\tboolean isReadable();\n\n\t/**\n\t * Return whether this resource represents a handle with an open\n\t * stream. If true, the InputStream cannot be read multiple times,\n\t * and must be read and closed to avoid resource leaks.\n\t * <p>Will be {@code false} for typical resource descriptors.\n\t */\n\tboolean isOpen();\n\n\t/**\n\t * Return a URL handle for this resource.\n\t * @throws IOException if the resource cannot be resolved as URL,\n\t * i.e. if the resource is not available as descriptor\n\t */\n\tURL getURL() throws IOException;\n\n\t/**\n\t * Return a URI handle for this resource.\n\t * @throws IOException if the resource cannot be resolved as URI,\n\t * i.e. if the resource is not available as descriptor\n\t */\n\tURI getURI() throws IOException;\n\n\t/**\n\t * Return a File handle for this resource.\n\t * @throws IOException if the resource cannot be resolved as absolute\n\t * file path, i.e. if the resource is not available in a file system\n\t */\n\tFile getFile() throws IOException;\n\n\t/**\n\t * Determine the content length for this resource.\n\t * @throws IOException if the resource cannot be resolved\n\t * (in the file system or as some other known physical resource type)\n\t */\n\tlong contentLength() throws IOException;\n\n\t/**\n\t * Determine the last-modified timestamp for this resource.\n\t * @throws IOException if the resource cannot be resolved\n\t * (in the file system or as some other known physical resource type)\n\t */\n\tlong lastModified() throws IOException;\n\n\t/**\n\t * Create a resource relative to this resource.\n\t * @param relativePath the relative path (relative to this resource)\n\t * @return the resource handle for the relative resource\n\t * @throws IOException if the relative resource cannot be determined\n\t */\n\tResource createRelative(String relativePath) throws IOException;\n\n\t/**\n\t * Determine a filename for this resource, i.e. typically the last\n\t * part of the path: for example, \"myfile.txt\".\n\t * <p>Returns {@code null} if this type of resource does not\n\t * have a filename.\n\t */\n\tString getFilename();\n\n\t/**\n\t * Return a description for this resource,\n\t * to be used for error output when working with the resource.\n\t * <p>Implementations are also encouraged to return this value\n\t * from their {@code toString} method.\n\t * @see Object#toString()\n\t */\n\tString getDescription();\n\n}\n```\n### 继承体系\n\n{%  asset_img   resource.jpg  %}\n\n\n\n\n## ResourceLoader\n\n```java\npublic interface ResourceLoader {\n\n\t/** Pseudo URL prefix for loading from the class path: \"classpath:\" */\n\tString CLASSPATH_URL_PREFIX = ResourceUtils.CLASSPATH_URL_PREFIX;\n\n\n\t/**\n\t * Return a Resource handle for the specified resource.\n\t * The handle should always be a reusable resource descriptor,\n\t * allowing for multiple {@link Resource#getInputStream()} calls.\n\t * <p><ul>\n\t * <li>Must support fully qualified URLs, e.g. \"file:C:/test.dat\".\n\t * <li>Must support classpath pseudo-URLs, e.g. \"classpath:test.dat\".\n\t * <li>Should support relative file paths, e.g. \"WEB-INF/test.dat\".\n\t * (This will be implementation-specific, typically provided by an\n\t * ApplicationContext implementation.)\n\t * </ul>\n\t * <p>Note that a Resource handle does not imply an existing resource;\n\t * you need to invoke {@link Resource#exists} to check for existence.\n\t * @param location the resource location\n\t * @return a corresponding Resource handle\n\t * @see #CLASSPATH_URL_PREFIX\n\t * @see org.springframework.core.io.Resource#exists\n\t * @see org.springframework.core.io.Resource#getInputStream\n\t */\n\tResource getResource(String location);\n\n\t/**\n\t * Expose the ClassLoader used by this ResourceLoader.\n\t * <p>Clients which need to access the ClassLoader directly can do so\n\t * in a uniform manner with the ResourceLoader, rather than relying\n\t * on the thread context ClassLoader.\n\t * @return the ClassLoader (only {@code null} if even the system\n\t * ClassLoader isn't accessible)\n\t * @see org.springframework.util.ClassUtils#getDefaultClassLoader()\n\t */\n\tClassLoader getClassLoader();\n\n}\n\n```\n\nResourceLoader　负责加载Resource, 所有的application context都实现了这个接口。\n\n```java\nResource template = ctx.getResource(\"some/resource/path/myTemplate.txt\");\n```\n\n如果上述的ctx的类型是 ClassPathXmlApplicationContext，那么返回的Resource的具体类型就是\n\nClassPathResource； 如果ctx的类型是FileSystemXmlApplicationContext, 返回的类型就变成了\n\nFileSystemResource。\n\n### 指定返回的Resource类型\n```java\nResource template = ctx.getResource(\"classpath:some/resource/path/myTemplate.txt\");\n```\n\n通过显式的指定classpath前缀，返回的Resource的实际类型就是 ClassPathResource\n\n对应的关系见表格：\n\n|Prefix|Example|Explanation|\n|-|-|-|\n|classpath:|classpath:com/myapp/config.xml|Loaded from the classpath|\n|file: | file:///data/config.xml | Loaded as a URL, from the system|\n|http: | http://myserver/logo.png | Loaded as a URL |\n|（none） | /data/config.xml | Depends on the underlying ApplicationContext |\n\n#### classpath*\n\nclasspath*:conf/appContext.xml\n\n这个特殊的前缀会使spring在所有的ClassPath中查找和指定的名字相同的资源，他们会合并形成最终的\n\n上下文。\n\n>This special prefix specifies that all classpath resources that match the given name must be obtained\n(internally, this essentially happens via a ClassLoader.getResources(…) call), and then merged\nto form the final application context definition.\n\n### ResourceLoaderAware\n\n```java\npublic interface ResourceLoaderAware extends Aware {\n\n\t/**\n\t * Set the ResourceLoader that this object runs in.\n\t * <p>This might be a ResourcePatternResolver, which can be checked\n\t * through {@code instanceof ResourcePatternResolver}. See also the\n\t * {@code ResourcePatternUtils.getResourcePatternResolver} method.\n\t * <p>Invoked after population of normal bean properties but before an init callback\n\t * like InitializingBean's {@code afterPropertiesSet} or a custom init-method.\n\t * Invoked before ApplicationContextAware's {@code setApplicationContext}.\n\t * @param resourceLoader ResourceLoader object to be used by this object\n\t * @see org.springframework.core.io.support.ResourcePatternResolver\n\t * @see org.springframework.core.io.support.ResourcePatternUtils#getResourcePatternResolver\n\t */\n\tvoid setResourceLoader(ResourceLoader resourceLoader);\n\n}\n```\n\n实现这个接口的类，可以获得所在容器的ResourceLoader实例，一般来说就是相应的Application Context。也可以当做\n\nApplicationContextAware的替代。\n\n>   Interface to be implemented by any object that wishes to be notified of\n  the <b>ResourceLoader</b> (typically the ApplicationContext) that it runs in.\n  This is an alternative to a full ApplicationContext dependency via the\n  ApplicationContextAware interface.\n\n\n除了实现上述接口，还可以使用基于类型的注入，将ResourceLoader注入到需要的地方。\n","slug":"spring-resource","published":1,"updated":"2017-02-02T09:09:49.793Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmg5b000xw4py0f53knqf"},{"title":"Spring Mvc源码剖析","toc":true,"abbrlink":"96837423","date":"2016-10-02T14:14:25.000Z","_content":"\n## 架构\n{%  asset_img   arch.jpg  %}\n\n\n\n\nSpringMVC的核心是 `DispatcherServlet`\n\n## 本质\n\n我们通过在`web.xml`中配置如下的语句，引入SpringMVC\n\n``` xml\n<servlet>\n    <servlet-name>mvc-dispatcher</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    <init-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>classpath:/spring/mvc/mvc-dispatcher-servlet.xml</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n</servlet>\n```\n\n上述代码段指定了servlet的class是spring的`DispatcherServlet`，初始化配置文件是`mvc-dispatcher-servlet.xml`,以及servlet的加载顺序。\n\n既然`DispatcherServlet`也是一个`Servlet`，那他肯定也遵从servlet的规范。\n我们知道Servlet定义了如下的接口：\n{%  asset_img   servlet-interface.jpg  %}\n\n\n\n其中比较重要的是`init`和`service`接口\n`init`方法在servlet的一生中只初始化一次，`service`接口是Servlet对外提供服务的接口\nServlet的生命周期如下:\n{%  asset_img   Servlet_LifeCycle.jpg  %}\n\n\n\n\n我们来看下`DispatcherServlet`的继承结构：\n\n{%  asset_img   hierachy.jpg  %}\n\n\n\n\n### init方法\n\n直接去看`DispatcherServlet`的源码是没有发现`init`方法的， 它的`init`方法继承自`HttpServletBean`，源码如下：\n```java\n    /**\n\t\t * Map config parameters onto bean properties of this servlet, and\n\t\t * invoke subclass initialization.\n\t\t * @throws ServletException if bean properties are invalid (or required\n\t\t * properties are missing), or if subclass initialization fails.\n\t\t */\n\t\t@Override\n\t\tpublic final void init() throws ServletException {\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Initializing servlet '\" + getServletName() + \"'\");\n\t\t\t}\n\n\t\t\t// Set bean properties from init parameters.\n\t\t\ttry {\n\t\t\t\tPropertyValues pvs = new ServletConfigPropertyValues(getServletConfig(), this.requiredProperties);\n\t\t\t\tBeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(this);\n\t\t\t\tResourceLoader resourceLoader = new ServletContextResourceLoader(getServletContext());\n\t\t\t\tbw.registerCustomEditor(Resource.class, new ResourceEditor(resourceLoader, getEnvironment()));\n\t\t\t\tinitBeanWrapper(bw);\n\t\t\t\tbw.setPropertyValues(pvs, true);\n\t\t\t}\n\t\t\tcatch (BeansException ex) {\n\t\t\t\tlogger.error(\"Failed to set bean properties on servlet '\" + getServletName() + \"'\", ex);\n\t\t\t\tthrow ex;\n\t\t\t}\n\n\t\t\t// Let subclasses do whatever initialization they like.\n\t\t\tinitServletBean();\n\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Servlet '\" + getServletName() + \"' configured successfully\");\n\t\t\t}\n\t\t}\n```\n\n在这个方法中，主要完成了bean属性的配置，并且给子类留下了相应的hook\n\n``` java\n// Let subclasses do whatever initialization they like.\ninitServletBean();\n```\n\n这个方法在FrameworkServlet中有具体的实现，现在看下FrameworkServlet中的实现。\n\n``` java\n/**\n\t * Overridden method of {@link HttpServletBean}, invoked after any bean properties\n\t * have been set. Creates this servlet's WebApplicationContext.\n\t */\n\t@Override\n\tprotected final void initServletBean() throws ServletException {\n\t\tgetServletContext().log(\"Initializing Spring FrameworkServlet '\" + getServletName() + \"'\");\n\t\tif (this.logger.isInfoEnabled()) {\n\t\t\tthis.logger.info(\"FrameworkServlet '\" + getServletName() + \"': initialization started\");\n\t\t}\n\t\tlong startTime = System.currentTimeMillis();\n\n\t\ttry {\n\t\t\tthis.webApplicationContext = initWebApplicationContext();\n\t\t\tinitFrameworkServlet();\n\t\t}\n\t\tcatch (ServletException ex) {\n\t\t\tthis.logger.error(\"Context initialization failed\", ex);\n\t\t\tthrow ex;\n\t\t}\n\t\tcatch (RuntimeException ex) {\n\t\t\tthis.logger.error(\"Context initialization failed\", ex);\n\t\t\tthrow ex;\n\t\t}\n\n\t\tif (this.logger.isInfoEnabled()) {\n\t\t\tlong elapsedTime = System.currentTimeMillis() - startTime;\n\t\t\tthis.logger.info(\"FrameworkServlet '\" + getServletName() + \"': initialization completed in \" +\n\t\t\t\t\telapsedTime + \" ms\");\n\t\t}\n\t}\n```\n`webApplicationContext`在此进行初始化，并且给子类留下了一个hook\n``` java\nthis.webApplicationContext = initWebApplicationContext();\ninitFrameworkServlet();\n```\n`initFrameworkServlet`在本类中并没有实现，用于子类控制\n\n```java\n/**\n* This method will be invoked after any bean properties have been set and\n* the WebApplicationContext has been loaded. The default implementation is empty;\n* subclasses may override this method to perform any initialization they require.\n* @throws ServletException in case of an initialization exception\n*/\nprotected void initFrameworkServlet() throws ServletException {\n}\n```\n\n在initWebApplicationContext方法中，有一个空实现的方法onRefresh()\n```java\n/**\n* Template method which can be overridden to add servlet-specific refresh work.\n* Called after successful context refresh.\n* <p>This implementation is empty.\n* @param context the current WebApplicationContext\n* @see #refresh()\n*/\nprotected void onRefresh(ApplicationContext context) {\n// For subclasses: do nothing by default.\n}\n```\n\n这个方法也是钩子方法，DispatcherServlet正是实现了这个方法。\n\n```java\n\n/**\n\t* This implementation calls {@link #initStrategies}.\n\t*/\n\t@Override\n\tprotected void onRefresh(ApplicationContext context) {\n\t\tinitStrategies(context);\n\t}\n\n\n\t/**\n\t\t * Initialize the strategy objects that this servlet uses.\n\t\t * <p>May be overridden in subclasses in order to initialize further strategy objects.\n\t\t */\n\t\tprotected void initStrategies(ApplicationContext context) {\n\t\t\tinitMultipartResolver(context);\n\t\t\tinitLocaleResolver(context);\n\t\t\tinitThemeResolver(context);\n\t\t\tinitHandlerMappings(context);\n\t\t\tinitHandlerAdapters(context);\n\t\t\tinitHandlerExceptionResolvers(context);\n\t\t\tinitRequestToViewNameTranslator(context);\n\t\t\tinitViewResolvers(context);\n\t\t\tinitFlashMapManager(context);\n\t\t}\n```\n\nonRefresh方法中又调用了initStrategies方法，在这个方法中进行了大量的初始化工作。\n\n视图解析器和HandlerMappings都是在这个方法中初始化的。\n\n重点看一下initHandlerMappings方法，这个方法是初始化url映射的\n\n```java\n/**\n\t * Initialize the HandlerMappings used by this class.\n\t * <p>If no HandlerMapping beans are defined in the BeanFactory for this namespace,\n\t * we default to BeanNameUrlHandlerMapping.\n\t */\n\tprivate void initHandlerMappings(ApplicationContext context) {\n\t\tthis.handlerMappings = null;\n\n\t\tif (this.detectAllHandlerMappings) {\n\t\t\t// Find all HandlerMappings in the ApplicationContext, including ancestor contexts.\n\t\t\tMap<String, HandlerMapping> matchingBeans =\n\t\t\t\t\tBeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping.class, true, false);\n\t\t\tif (!matchingBeans.isEmpty()) {\n\t\t\t\tthis.handlerMappings = new ArrayList<HandlerMapping>(matchingBeans.values());\n\t\t\t\t// We keep HandlerMappings in sorted order.\n\t\t\t\tAnnotationAwareOrderComparator.sort(this.handlerMappings);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\ttry {\n\t\t\t\tHandlerMapping hm = context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.class);\n\t\t\t\tthis.handlerMappings = Collections.singletonList(hm);\n\t\t\t}\n\t\t\tcatch (NoSuchBeanDefinitionException ex) {\n\t\t\t\t// Ignore, we'll add a default HandlerMapping later.\n\t\t\t}\n\t\t}\n\n\t\t// Ensure we have at least one HandlerMapping, by registering\n\t\t// a default HandlerMapping if no other mappings are found.\n\t\tif (this.handlerMappings == null) {\n\t\t\tthis.handlerMappings = getDefaultStrategies(context, HandlerMapping.class);\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"No HandlerMappings found in servlet '\" + getServletName() + \"': using default\");\n\t\t\t}\n\t\t}\n\t}\n  ```\n  其根据 this.detectAllHandlerMappings 的值来确定是否扫描祖先定义的handlermappings，如果用户没有配置的话，就会使用默认的HandlerMapping\n```java\n/** Detect all HandlerMappings or just expect \"handlerMapping\" bean? */\nprivate boolean detectAllHandlerMappings = true;\n```\n\n### service方法\n\nservlet接口中另外一个重要的方法叫做`service`\n\n`service`方法最早是在`HttpServlet`类中实现的，代码如下：\n```java\n/**\n     * Dispatches client requests to the protected\n     * <code>service</code> method. There's no need to\n     * override this method.\n     *\n     * @param req   the {@link HttpServletRequest} object that\n     *                  contains the request the client made of\n     *                  the servlet\n     *\n     * @param res   the {@link HttpServletResponse} object that\n     *                  contains the response the servlet returns\n     *                  to the client                                \n     *\n     * @exception IOException   if an input or output error occurs\n     *                              while the servlet is handling the\n     *                              HTTP request\n     *\n     * @exception ServletException  if the HTTP request cannot\n     *                                  be handled\n     *\n     * @see javax.servlet.Servlet#service\n     */\n    public void service(ServletRequest req, ServletResponse res)\n        throws ServletException, IOException\n    {\n        HttpServletRequest  request;\n        HttpServletResponse response;\n\n        if (!(req instanceof HttpServletRequest &&\n                res instanceof HttpServletResponse)) {\n            throw new ServletException(\"non-HTTP request or response\");\n        }\n\n        request = (HttpServletRequest) req;\n        response = (HttpServletResponse) res;\n\n        service(request, response);\n    }\n}\n\n```\n它又调用自身的一个`service`方法:\n```java\n/**\n    * Receives standard HTTP requests from the public\n    * <code>service</code> method and dispatches\n    * them to the <code>do</code><i>XXX</i> methods defined in\n    * this class. This method is an HTTP-specific version of the\n    * {@link javax.servlet.Servlet#service} method. There's no\n    * need to override this method.\n    *\n    * @param req   the {@link HttpServletRequest} object that\n    *                  contains the request the client made of\n    *                  the servlet\n    *\n    * @param resp  the {@link HttpServletResponse} object that\n    *                  contains the response the servlet returns\n    *                  to the client                                \n    *\n    * @exception IOException   if an input or output error occurs\n    *                              while the servlet is handling the\n    *                              HTTP request\n    *\n    * @exception ServletException  if the HTTP request\n    *                                  cannot be handled\n    *\n    * @see javax.servlet.Servlet#service\n    */\n   protected void service(HttpServletRequest req, HttpServletResponse resp)\n       throws ServletException, IOException\n   {\n       String method = req.getMethod();\n\n       if (method.equals(METHOD_GET)) {\n           long lastModified = getLastModified(req);\n           if (lastModified == -1) {\n               // servlet doesn't support if-modified-since, no reason\n               // to go through further expensive logic\n               doGet(req, resp);\n           } else {\n               long ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);\n               if (ifModifiedSince < lastModified) {\n                   // If the servlet mod time is later, call doGet()\n                   // Round down to the nearest second for a proper compare\n                   // A ifModifiedSince of -1 will always be less\n                   maybeSetLastModified(resp, lastModified);\n                   doGet(req, resp);\n               } else {\n                   resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n               }\n           }\n\n       } else if (method.equals(METHOD_HEAD)) {\n           long lastModified = getLastModified(req);\n           maybeSetLastModified(resp, lastModified);\n           doHead(req, resp);\n\n       } else if (method.equals(METHOD_POST)) {\n           doPost(req, resp);\n\n       } else if (method.equals(METHOD_PUT)) {\n           doPut(req, resp);\n\n       } else if (method.equals(METHOD_DELETE)) {\n           doDelete(req, resp);\n\n       } else if (method.equals(METHOD_OPTIONS)) {\n           doOptions(req,resp);\n\n       } else if (method.equals(METHOD_TRACE)) {\n           doTrace(req,resp);\n\n       } else {\n           //\n           // Note that this means NO servlet supports whatever\n           // method was requested, anywhere on this server.\n           //\n\n           String errMsg = lStrings.getString(\"http.method_not_implemented\");\n           Object[] errArgs = new Object[1];\n           errArgs[0] = method;\n           errMsg = MessageFormat.format(errMsg, errArgs);\n\n           resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);\n       }\n   }\n```\n\n这段代码就是根据请求的类型调用相应的处理方法\n\n这个方法又在`FrameWorkServlet`中被重写，如下：\n\n```java\n/**\n * Override the parent class implementation in order to intercept PATCH requests.\n */\n@Override\nprotected void service(HttpServletRequest request, HttpServletResponse response)\n    throws ServletException, IOException {\n\n  if (HttpMethod.PATCH.matches(request.getMethod())) {\n    processRequest(request, response);\n  }\n  else {\n    super.service(request, response);\n  }\n}\n```\n\n又增加了一个处理PATCH请求的方法，其他的还是调用`HttpServlet`的实现。\n\n同时，`FrameWorkServlet`又将`HttpServlet`中对应的各种HTTP请求的方法都进行了重写，如下：\n```java\n/**\n\t * Delegate GET requests to processRequest/doService.\n\t * <p>Will also be invoked by HttpServlet's default implementation of {@code doHead},\n\t * with a {@code NoBodyResponse} that just captures the content length.\n\t * @see #doService\n\t * @see #doHead\n\t */\n\t@Override\n\tprotected final void doGet(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tprocessRequest(request, response);\n\t}\n```\n\n所有的请求都被委托给了`processRequest`这个方法，它的实现如下：\n\n```java\n/**\n\t * Process this request, publishing an event regardless of the outcome.\n\t * <p>The actual event handling is performed by the abstract\n\t * {@link #doService} template method.\n\t */\n\tprotected final void processRequest(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tlong startTime = System.currentTimeMillis();\n\t\tThrowable failureCause = null;\n\n\t\tLocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();\n\t\tLocaleContext localeContext = buildLocaleContext(request);\n\n\t\tRequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();\n\t\tServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);\n\n\t\tWebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\t\tasyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), new RequestBindingInterceptor());\n\n\t\tinitContextHolders(request, localeContext, requestAttributes);\n\n\t\ttry {\n\t\t\tdoService(request, response);\n\t\t}\n\t\tcatch (ServletException ex) {\n\t\t\tfailureCause = ex;\n\t\t\tthrow ex;\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tfailureCause = ex;\n\t\t\tthrow ex;\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\tfailureCause = ex;\n\t\t\tthrow new NestedServletException(\"Request processing failed\", ex);\n\t\t}\n\n\t\tfinally {\n\t\t\tresetContextHolders(request, previousLocaleContext, previousAttributes);\n\t\t\tif (requestAttributes != null) {\n\t\t\t\trequestAttributes.requestCompleted();\n\t\t\t}\n\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tif (failureCause != null) {\n\t\t\t\t\tthis.logger.debug(\"Could not complete request\", failureCause);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\t\t\tlogger.debug(\"Leaving response open for concurrent processing\");\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.logger.debug(\"Successfully completed request\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpublishRequestHandledEvent(request, response, startTime, failureCause);\n\t\t}\n\t}\n\n```\n\n上述代码的异常处理很值得借鉴，上述代码中`doService(request, response)`是核心。\n\n它是`FrameWorkServlet`中定义的一个接口，它在`DispatcherServlet`中被实现。\n```java\n/**\n * Subclasses must implement this method to do the work of request handling,\n * receiving a centralized callback for GET, POST, PUT and DELETE.\n * <p>The contract is essentially the same as that for the commonly overridden\n * {@code doGet} or {@code doPost} methods of HttpServlet.\n * <p>This class intercepts calls to ensure that exception handling and\n * event publication takes place.\n * @param request current HTTP request\n * @param response current HTTP response\n * @throws Exception in case of any kind of processing failure\n * @see javax.servlet.http.HttpServlet#doGet\n * @see javax.servlet.http.HttpServlet#doPost\n */\nprotected abstract void doService(HttpServletRequest request, HttpServletResponse response)\n    throws Exception;\n```\n\n`DispatcherServlet`中的`doService`接口代码如下：\n```java\n/**\n\t * Exposes the DispatcherServlet-specific request attributes and delegates to {@link #doDispatch}\n\t * for the actual dispatching.\n\t */\n\t@Override\n\tprotected void doService(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tString resumed = WebAsyncUtils.getAsyncManager(request).hasConcurrentResult() ? \" resumed\" : \"\";\n\t\t\tlogger.debug(\"DispatcherServlet with name '\" + getServletName() + \"'\" + resumed +\n\t\t\t\t\t\" processing \" + request.getMethod() + \" request for [\" + getRequestUri(request) + \"]\");\n\t\t}\n\n\t\t// Keep a snapshot of the request attributes in case of an include,\n\t\t// to be able to restore the original attributes after the include.\n\t\tMap<String, Object> attributesSnapshot = null;\n\t\tif (WebUtils.isIncludeRequest(request)) {\n\t\t\tattributesSnapshot = new HashMap<String, Object>();\n\t\t\tEnumeration<?> attrNames = request.getAttributeNames();\n\t\t\twhile (attrNames.hasMoreElements()) {\n\t\t\t\tString attrName = (String) attrNames.nextElement();\n\t\t\t\tif (this.cleanupAfterInclude || attrName.startsWith(\"org.springframework.web.servlet\")) {\n\t\t\t\t\tattributesSnapshot.put(attrName, request.getAttribute(attrName));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Make framework objects available to handlers and view objects.\n\t\trequest.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());\n\t\trequest.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, this.localeResolver);\n\t\trequest.setAttribute(THEME_RESOLVER_ATTRIBUTE, this.themeResolver);\n\t\trequest.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());\n\n\t\tFlashMap inputFlashMap = this.flashMapManager.retrieveAndUpdate(request, response);\n\t\tif (inputFlashMap != null) {\n\t\t\trequest.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));\n\t\t}\n\t\trequest.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, new FlashMap());\n\t\trequest.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, this.flashMapManager);\n\n\t\ttry {\n\t\t\tdoDispatch(request, response);\n\t\t}\n\t\tfinally {\n\t\t\tif (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) {\n\t\t\t\t// Restore the original attribute snapshot, in case of an include.\n\t\t\t\tif (attributesSnapshot != null) {\n\t\t\t\t\trestoreAttributesAfterInclude(request, attributesSnapshot);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n```\n\n每次请求过来都会将系统的一些属性塞到request的attribute中，以便后面的handlers和view能够访问到。\n\n其中比较重要的是 `doDispatch(request, response)`，正是这个方法使得请求被真正的转发。\n\n```java\n/**\n\t * Process the actual dispatching to the handler.\n\t * <p>The handler will be obtained by applying the servlet's HandlerMappings in order.\n\t * The HandlerAdapter will be obtained by querying the servlet's installed HandlerAdapters\n\t * to find the first that supports the handler class.\n\t * <p>All HTTP methods are handled by this method. It's up to HandlerAdapters or handlers\n\t * themselves to decide which methods are acceptable.\n\t * @param request current HTTP request\n\t * @param response current HTTP response\n\t * @throws Exception in case of any kind of processing failure\n\t */\n\tprotected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\tHttpServletRequest processedRequest = request;\n\t\tHandlerExecutionChain mappedHandler = null;\n\t\tboolean multipartRequestParsed = false;\n\n\t\tWebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\n\t\ttry {\n\t\t\tModelAndView mv = null;\n\t\t\tException dispatchException = null;\n\n\t\t\ttry {\n\t\t\t\tprocessedRequest = checkMultipart(request);\n\t\t\t\tmultipartRequestParsed = (processedRequest != request);\n\n\t\t\t\t// Determine handler for the current request.\n\t\t\t\tmappedHandler = getHandler(processedRequest);\n\t\t\t\tif (mappedHandler == null || mappedHandler.getHandler() == null) {\n\t\t\t\t\tnoHandlerFound(processedRequest, response);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Determine handler adapter for the current request.\n\t\t\t\tHandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\n\n\t\t\t\t// Process last-modified header, if supported by the handler.\n\t\t\t\tString method = request.getMethod();\n\t\t\t\tboolean isGet = \"GET\".equals(method);\n\t\t\t\tif (isGet || \"HEAD\".equals(method)) {\n\t\t\t\t\tlong lastModified = ha.getLastModified(request, mappedHandler.getHandler());\n\t\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\t\tlogger.debug(\"Last-Modified value for [\" + getRequestUri(request) + \"] is: \" + lastModified);\n\t\t\t\t\t}\n\t\t\t\t\tif (new ServletWebRequest(request, response).checkNotModified(lastModified) && isGet) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!mappedHandler.applyPreHandle(processedRequest, response)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Actually invoke the handler.\n\t\t\t\tmv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n\n\t\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tapplyDefaultViewName(processedRequest, mv);\n\t\t\t\tmappedHandler.applyPostHandle(processedRequest, response, mv);\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tdispatchException = ex;\n\t\t\t}\n\t\t\tprocessDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler, ex);\n\t\t}\n\t\tcatch (Error err) {\n\t\t\ttriggerAfterCompletionWithError(processedRequest, response, mappedHandler, err);\n\t\t}\n\t\tfinally {\n\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\t// Instead of postHandle and afterCompletion\n\t\t\t\tif (mappedHandler != null) {\n\t\t\t\t\tmappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Clean up any resources used by a multipart request.\n\t\t\t\tif (multipartRequestParsed) {\n\t\t\t\t\tcleanupMultipart(processedRequest);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\n\nhandler 获取的顺序是从DispatcherServlet的HandlerMapping中按顺序取出的\n\nHandler对应的HandlerAdapter会从安装的HandlerAdapter找，将返回第一个合适的Adapter\n\n```java\n  HandlerExecutionChain mappedHandler = null;\n\n  // Determine handler for the current request.\n  mappedHandler = getHandler(processedRequest);\n              ...\n  // Determine handler adapter for the current request.\n  HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\n              ...\n\n  if (!mappedHandler.applyPreHandle(processedRequest, response)) {\n          return;\n  }\n  // Actually invoke the handler.\n  mv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n\n  mappedHandler.applyPostHandle(processedRequest, response, mv);\n\n  processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);\n```\n在applyPreHandle中也是检查拦截器的操作，并根据拦截器返回的布尔类型，判断是否进一步处理\n\n其中在applyPostHandle中又检查是否有各种拦截器,调用拦截器的postHandle方法\n\n处理完毕后，调用processDispatchResult方法将处理后的请求和mv进行分发\n\n```java\n//HandlerExecutionChain.java\n\n\t\t/**\n\t * Apply preHandle methods of registered interceptors.\n\t * @return {@code true} if the execution chain should proceed with the\n\t * next interceptor or the handler itself. Else, DispatcherServlet assumes\n\t * that this interceptor has already dealt with the response itself.\n\t */\n\tboolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\tHandlerInterceptor[] interceptors = getInterceptors();\n\t\tif (!ObjectUtils.isEmpty(interceptors)) {\n\t\t\tfor (int i = 0; i < interceptors.length; i++) {\n\t\t\t\tHandlerInterceptor interceptor = interceptors[i];\n\t\t\t\tif (!interceptor.preHandle(request, response, this.handler)) {\n\t\t\t\t\ttriggerAfterCompletion(request, response, null);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tthis.interceptorIndex = i;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t* Apply postHandle methods of registered interceptors.\n\t*/\n\tvoid applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) throws Exception {\n\tHandlerInterceptor[] interceptors = getInterceptors();\n\tif (!ObjectUtils.isEmpty(interceptors)) {\n\t\tfor (int i = interceptors.length - 1; i >= 0; i--) {\n\t\t\tHandlerInterceptor interceptor = interceptors[i];\n\t\t\tinterceptor.postHandle(request, response, this.handler, mv);\n\t\t}\n\t}\n```\n\nhandler处理后的结果是通过processDispatchResult传出去的\n\n```java\n//DispatcherServlet.java\n\n\t/**\n\t * Handle the result of handler selection and handler invocation, which is\n\t * either a ModelAndView or an Exception to be resolved to a ModelAndView.\n\t */\n\tprivate void processDispatchResult(HttpServletRequest request, HttpServletResponse response,\n\t\t\tHandlerExecutionChain mappedHandler, ModelAndView mv, Exception exception) throws Exception {\n\n\t\tboolean errorView = false;\n\n\t\tif (exception != null) {\n\t\t\tif (exception instanceof ModelAndViewDefiningException) {\n\t\t\t\tlogger.debug(\"ModelAndViewDefiningException encountered\", exception);\n\t\t\t\tmv = ((ModelAndViewDefiningException) exception).getModelAndView();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tObject handler = (mappedHandler != null ? mappedHandler.getHandler() : null);\n\t\t\t\tmv = processHandlerException(request, response, handler, exception);\n\t\t\t\terrorView = (mv != null);\n\t\t\t}\n\t\t}\n\n\t\t// Did the handler return a view to render?\n\t\tif (mv != null && !mv.wasCleared()) {\n\t\t\trender(mv, request, response);\n\t\t\tif (errorView) {\n\t\t\t\tWebUtils.clearErrorRequestAttributes(request);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Null ModelAndView returned to DispatcherServlet with name '\" + getServletName() +\n\t\t\t\t\t\t\"': assuming HandlerAdapter completed request handling\");\n\t\t\t}\n\t\t}\n\n\t\tif (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) {\n\t\t\t// Concurrent handling started during a forward\n\t\t\treturn;\n\t\t}\n\n\t\tif (mappedHandler != null) {\n\t\t\tmappedHandler.triggerAfterCompletion(request, response, null);\n\t\t}\n\t}\n```\n\n去各种判断，核心的方法就在`render(mv, request, response)`;\n\n它负责渲染返回的`ModelAndView`\n\n```java\n//DispatcherServlet.java\n\n\t/**\n\t* Render the given ModelAndView.\n\t* <p>This is the last stage in handling a request. It may involve resolving the view by name.\n\t* @param mv the ModelAndView to render\n\t* @param request current HTTP servlet request\n\t* @param response current HTTP servlet response\n\t* @throws ServletException if view is missing or cannot be resolved\n\t* @throws Exception if there's a problem rendering the view\n\t*/\n\tprotected void render(ModelAndView mv, HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\t// Determine locale for request and apply it to the response.\n\t\tLocale locale = this.localeResolver.resolveLocale(request);\n\t\tresponse.setLocale(locale);\n\n\t\tView view;\n\t\tif (mv.isReference()) {\n\t\t\t// We need to resolve the view name.\n\t\t\tview = resolveViewName(mv.getViewName(), mv.getModelInternal(), locale, request);\n\t\t\tif (view == null) {\n\t\t\t\tthrow new ServletException(\"Could not resolve view with name '\" + mv.getViewName() +\n\t\t\t\t\t\t\"' in servlet with name '\" + getServletName() + \"'\");\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// No need to lookup: the ModelAndView object contains the actual View object.\n\t\t\tview = mv.getView();\n\t\t\tif (view == null) {\n\t\t\t\tthrow new ServletException(\"ModelAndView [\" + mv + \"] neither contains a view name nor a \" +\n\t\t\t\t\t\t\"View object in servlet with name '\" + getServletName() + \"'\");\n\t\t\t}\n\t\t}\n\n\t\t// Delegate to the View object for rendering.\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Rendering view [\" + view + \"] in DispatcherServlet with name '\" + getServletName() + \"'\");\n\t\t}\n\t\ttry {\n\t\t\tview.render(mv.getModelInternal(), request, response);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Error rendering view [\" + view + \"] in DispatcherServlet with name '\" +\n\t\t\t\t\t\tgetServletName() + \"'\", ex);\n\t\t\t}\n\t\t\tthrow ex;\n\t\t}\n\t}\n```\n\n这个函数解析mv对象，如果是一个引用名就查找对应的view，最终返回一个View对象，\n\n然后将渲染的工作委托给这个view对象，`view.render(mv.getModelInternal(), request, response);`\n\n其中`resolveViewName`方法遍历 `DispatcherServlet`中注册的`viewResolver`，返回第一个非空的结果\n\n查找视图名称的方法如下:\n```java\n\n/** List of ViewResolvers used by this servlet */\nprivate List<ViewResolver> viewResolvers;\n\n\n/**\n\t* Resolve the given view name into a View object (to be rendered).\n\t* <p>The default implementations asks all ViewResolvers of this dispatcher.\n\t* Can be overridden for custom resolution strategies, potentially based on\n\t* specific model attributes or request parameters.\n\t* @param viewName the name of the view to resolve\n\t* @param model the model to be passed to the view\n\t* @param locale the current locale\n\t* @param request current HTTP servlet request\n\t* @return the View object, or {@code null} if none found\n\t* @throws Exception if the view cannot be resolved\n\t* (typically in case of problems creating an actual View object)\n\t* @see ViewResolver#resolveViewName\n\t*/\n\tprotected View resolveViewName(String viewName, Map<String, Object> model, Locale locale,\n\t\tHttpServletRequest request) throws Exception {\n\n\t\t\tfor (ViewResolver viewResolver : this.viewResolvers) {\n\t\t\t\tView view = viewResolver.resolveViewName(viewName, locale);\n\t\t\t\tif (view != null) {\n\t\t\t\t\treturn view;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t}\n```\n\n最终视图的渲染是View中定义的`render`方法进行的，它是一个抽象的接口\n\n```java\n/**\n\t * Render the view given the specified model.\n\t * <p>The first step will be preparing the request: In the JSP case,\n\t * this would mean setting model objects as request attributes.\n\t * The second step will be the actual rendering of the view,\n\t * for example including the JSP via a RequestDispatcher.\n\t * @param model Map with name Strings as keys and corresponding model\n\t * objects as values (Map can also be {@code null} in case of empty model)\n\t * @param request current HTTP request\n\t * @param response HTTP response we are building\n\t * @throws Exception if rendering failed\n\t */\n\tvoid render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response) throws Exception;\n```\n","source":"_posts/spring-mvc.md","raw":"---\ntitle: Spring Mvc源码剖析\ntags: spring mvc\ncategory: spring\ntoc: true\nabbrlink: '96837423'\ndate: 2016-10-02 22:14:25\n---\n\n## 架构\n{%  asset_img   arch.jpg  %}\n\n\n\n\nSpringMVC的核心是 `DispatcherServlet`\n\n## 本质\n\n我们通过在`web.xml`中配置如下的语句，引入SpringMVC\n\n``` xml\n<servlet>\n    <servlet-name>mvc-dispatcher</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    <init-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>classpath:/spring/mvc/mvc-dispatcher-servlet.xml</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n</servlet>\n```\n\n上述代码段指定了servlet的class是spring的`DispatcherServlet`，初始化配置文件是`mvc-dispatcher-servlet.xml`,以及servlet的加载顺序。\n\n既然`DispatcherServlet`也是一个`Servlet`，那他肯定也遵从servlet的规范。\n我们知道Servlet定义了如下的接口：\n{%  asset_img   servlet-interface.jpg  %}\n\n\n\n其中比较重要的是`init`和`service`接口\n`init`方法在servlet的一生中只初始化一次，`service`接口是Servlet对外提供服务的接口\nServlet的生命周期如下:\n{%  asset_img   Servlet_LifeCycle.jpg  %}\n\n\n\n\n我们来看下`DispatcherServlet`的继承结构：\n\n{%  asset_img   hierachy.jpg  %}\n\n\n\n\n### init方法\n\n直接去看`DispatcherServlet`的源码是没有发现`init`方法的， 它的`init`方法继承自`HttpServletBean`，源码如下：\n```java\n    /**\n\t\t * Map config parameters onto bean properties of this servlet, and\n\t\t * invoke subclass initialization.\n\t\t * @throws ServletException if bean properties are invalid (or required\n\t\t * properties are missing), or if subclass initialization fails.\n\t\t */\n\t\t@Override\n\t\tpublic final void init() throws ServletException {\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Initializing servlet '\" + getServletName() + \"'\");\n\t\t\t}\n\n\t\t\t// Set bean properties from init parameters.\n\t\t\ttry {\n\t\t\t\tPropertyValues pvs = new ServletConfigPropertyValues(getServletConfig(), this.requiredProperties);\n\t\t\t\tBeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(this);\n\t\t\t\tResourceLoader resourceLoader = new ServletContextResourceLoader(getServletContext());\n\t\t\t\tbw.registerCustomEditor(Resource.class, new ResourceEditor(resourceLoader, getEnvironment()));\n\t\t\t\tinitBeanWrapper(bw);\n\t\t\t\tbw.setPropertyValues(pvs, true);\n\t\t\t}\n\t\t\tcatch (BeansException ex) {\n\t\t\t\tlogger.error(\"Failed to set bean properties on servlet '\" + getServletName() + \"'\", ex);\n\t\t\t\tthrow ex;\n\t\t\t}\n\n\t\t\t// Let subclasses do whatever initialization they like.\n\t\t\tinitServletBean();\n\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Servlet '\" + getServletName() + \"' configured successfully\");\n\t\t\t}\n\t\t}\n```\n\n在这个方法中，主要完成了bean属性的配置，并且给子类留下了相应的hook\n\n``` java\n// Let subclasses do whatever initialization they like.\ninitServletBean();\n```\n\n这个方法在FrameworkServlet中有具体的实现，现在看下FrameworkServlet中的实现。\n\n``` java\n/**\n\t * Overridden method of {@link HttpServletBean}, invoked after any bean properties\n\t * have been set. Creates this servlet's WebApplicationContext.\n\t */\n\t@Override\n\tprotected final void initServletBean() throws ServletException {\n\t\tgetServletContext().log(\"Initializing Spring FrameworkServlet '\" + getServletName() + \"'\");\n\t\tif (this.logger.isInfoEnabled()) {\n\t\t\tthis.logger.info(\"FrameworkServlet '\" + getServletName() + \"': initialization started\");\n\t\t}\n\t\tlong startTime = System.currentTimeMillis();\n\n\t\ttry {\n\t\t\tthis.webApplicationContext = initWebApplicationContext();\n\t\t\tinitFrameworkServlet();\n\t\t}\n\t\tcatch (ServletException ex) {\n\t\t\tthis.logger.error(\"Context initialization failed\", ex);\n\t\t\tthrow ex;\n\t\t}\n\t\tcatch (RuntimeException ex) {\n\t\t\tthis.logger.error(\"Context initialization failed\", ex);\n\t\t\tthrow ex;\n\t\t}\n\n\t\tif (this.logger.isInfoEnabled()) {\n\t\t\tlong elapsedTime = System.currentTimeMillis() - startTime;\n\t\t\tthis.logger.info(\"FrameworkServlet '\" + getServletName() + \"': initialization completed in \" +\n\t\t\t\t\telapsedTime + \" ms\");\n\t\t}\n\t}\n```\n`webApplicationContext`在此进行初始化，并且给子类留下了一个hook\n``` java\nthis.webApplicationContext = initWebApplicationContext();\ninitFrameworkServlet();\n```\n`initFrameworkServlet`在本类中并没有实现，用于子类控制\n\n```java\n/**\n* This method will be invoked after any bean properties have been set and\n* the WebApplicationContext has been loaded. The default implementation is empty;\n* subclasses may override this method to perform any initialization they require.\n* @throws ServletException in case of an initialization exception\n*/\nprotected void initFrameworkServlet() throws ServletException {\n}\n```\n\n在initWebApplicationContext方法中，有一个空实现的方法onRefresh()\n```java\n/**\n* Template method which can be overridden to add servlet-specific refresh work.\n* Called after successful context refresh.\n* <p>This implementation is empty.\n* @param context the current WebApplicationContext\n* @see #refresh()\n*/\nprotected void onRefresh(ApplicationContext context) {\n// For subclasses: do nothing by default.\n}\n```\n\n这个方法也是钩子方法，DispatcherServlet正是实现了这个方法。\n\n```java\n\n/**\n\t* This implementation calls {@link #initStrategies}.\n\t*/\n\t@Override\n\tprotected void onRefresh(ApplicationContext context) {\n\t\tinitStrategies(context);\n\t}\n\n\n\t/**\n\t\t * Initialize the strategy objects that this servlet uses.\n\t\t * <p>May be overridden in subclasses in order to initialize further strategy objects.\n\t\t */\n\t\tprotected void initStrategies(ApplicationContext context) {\n\t\t\tinitMultipartResolver(context);\n\t\t\tinitLocaleResolver(context);\n\t\t\tinitThemeResolver(context);\n\t\t\tinitHandlerMappings(context);\n\t\t\tinitHandlerAdapters(context);\n\t\t\tinitHandlerExceptionResolvers(context);\n\t\t\tinitRequestToViewNameTranslator(context);\n\t\t\tinitViewResolvers(context);\n\t\t\tinitFlashMapManager(context);\n\t\t}\n```\n\nonRefresh方法中又调用了initStrategies方法，在这个方法中进行了大量的初始化工作。\n\n视图解析器和HandlerMappings都是在这个方法中初始化的。\n\n重点看一下initHandlerMappings方法，这个方法是初始化url映射的\n\n```java\n/**\n\t * Initialize the HandlerMappings used by this class.\n\t * <p>If no HandlerMapping beans are defined in the BeanFactory for this namespace,\n\t * we default to BeanNameUrlHandlerMapping.\n\t */\n\tprivate void initHandlerMappings(ApplicationContext context) {\n\t\tthis.handlerMappings = null;\n\n\t\tif (this.detectAllHandlerMappings) {\n\t\t\t// Find all HandlerMappings in the ApplicationContext, including ancestor contexts.\n\t\t\tMap<String, HandlerMapping> matchingBeans =\n\t\t\t\t\tBeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping.class, true, false);\n\t\t\tif (!matchingBeans.isEmpty()) {\n\t\t\t\tthis.handlerMappings = new ArrayList<HandlerMapping>(matchingBeans.values());\n\t\t\t\t// We keep HandlerMappings in sorted order.\n\t\t\t\tAnnotationAwareOrderComparator.sort(this.handlerMappings);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\ttry {\n\t\t\t\tHandlerMapping hm = context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.class);\n\t\t\t\tthis.handlerMappings = Collections.singletonList(hm);\n\t\t\t}\n\t\t\tcatch (NoSuchBeanDefinitionException ex) {\n\t\t\t\t// Ignore, we'll add a default HandlerMapping later.\n\t\t\t}\n\t\t}\n\n\t\t// Ensure we have at least one HandlerMapping, by registering\n\t\t// a default HandlerMapping if no other mappings are found.\n\t\tif (this.handlerMappings == null) {\n\t\t\tthis.handlerMappings = getDefaultStrategies(context, HandlerMapping.class);\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"No HandlerMappings found in servlet '\" + getServletName() + \"': using default\");\n\t\t\t}\n\t\t}\n\t}\n  ```\n  其根据 this.detectAllHandlerMappings 的值来确定是否扫描祖先定义的handlermappings，如果用户没有配置的话，就会使用默认的HandlerMapping\n```java\n/** Detect all HandlerMappings or just expect \"handlerMapping\" bean? */\nprivate boolean detectAllHandlerMappings = true;\n```\n\n### service方法\n\nservlet接口中另外一个重要的方法叫做`service`\n\n`service`方法最早是在`HttpServlet`类中实现的，代码如下：\n```java\n/**\n     * Dispatches client requests to the protected\n     * <code>service</code> method. There's no need to\n     * override this method.\n     *\n     * @param req   the {@link HttpServletRequest} object that\n     *                  contains the request the client made of\n     *                  the servlet\n     *\n     * @param res   the {@link HttpServletResponse} object that\n     *                  contains the response the servlet returns\n     *                  to the client                                \n     *\n     * @exception IOException   if an input or output error occurs\n     *                              while the servlet is handling the\n     *                              HTTP request\n     *\n     * @exception ServletException  if the HTTP request cannot\n     *                                  be handled\n     *\n     * @see javax.servlet.Servlet#service\n     */\n    public void service(ServletRequest req, ServletResponse res)\n        throws ServletException, IOException\n    {\n        HttpServletRequest  request;\n        HttpServletResponse response;\n\n        if (!(req instanceof HttpServletRequest &&\n                res instanceof HttpServletResponse)) {\n            throw new ServletException(\"non-HTTP request or response\");\n        }\n\n        request = (HttpServletRequest) req;\n        response = (HttpServletResponse) res;\n\n        service(request, response);\n    }\n}\n\n```\n它又调用自身的一个`service`方法:\n```java\n/**\n    * Receives standard HTTP requests from the public\n    * <code>service</code> method and dispatches\n    * them to the <code>do</code><i>XXX</i> methods defined in\n    * this class. This method is an HTTP-specific version of the\n    * {@link javax.servlet.Servlet#service} method. There's no\n    * need to override this method.\n    *\n    * @param req   the {@link HttpServletRequest} object that\n    *                  contains the request the client made of\n    *                  the servlet\n    *\n    * @param resp  the {@link HttpServletResponse} object that\n    *                  contains the response the servlet returns\n    *                  to the client                                \n    *\n    * @exception IOException   if an input or output error occurs\n    *                              while the servlet is handling the\n    *                              HTTP request\n    *\n    * @exception ServletException  if the HTTP request\n    *                                  cannot be handled\n    *\n    * @see javax.servlet.Servlet#service\n    */\n   protected void service(HttpServletRequest req, HttpServletResponse resp)\n       throws ServletException, IOException\n   {\n       String method = req.getMethod();\n\n       if (method.equals(METHOD_GET)) {\n           long lastModified = getLastModified(req);\n           if (lastModified == -1) {\n               // servlet doesn't support if-modified-since, no reason\n               // to go through further expensive logic\n               doGet(req, resp);\n           } else {\n               long ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);\n               if (ifModifiedSince < lastModified) {\n                   // If the servlet mod time is later, call doGet()\n                   // Round down to the nearest second for a proper compare\n                   // A ifModifiedSince of -1 will always be less\n                   maybeSetLastModified(resp, lastModified);\n                   doGet(req, resp);\n               } else {\n                   resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n               }\n           }\n\n       } else if (method.equals(METHOD_HEAD)) {\n           long lastModified = getLastModified(req);\n           maybeSetLastModified(resp, lastModified);\n           doHead(req, resp);\n\n       } else if (method.equals(METHOD_POST)) {\n           doPost(req, resp);\n\n       } else if (method.equals(METHOD_PUT)) {\n           doPut(req, resp);\n\n       } else if (method.equals(METHOD_DELETE)) {\n           doDelete(req, resp);\n\n       } else if (method.equals(METHOD_OPTIONS)) {\n           doOptions(req,resp);\n\n       } else if (method.equals(METHOD_TRACE)) {\n           doTrace(req,resp);\n\n       } else {\n           //\n           // Note that this means NO servlet supports whatever\n           // method was requested, anywhere on this server.\n           //\n\n           String errMsg = lStrings.getString(\"http.method_not_implemented\");\n           Object[] errArgs = new Object[1];\n           errArgs[0] = method;\n           errMsg = MessageFormat.format(errMsg, errArgs);\n\n           resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);\n       }\n   }\n```\n\n这段代码就是根据请求的类型调用相应的处理方法\n\n这个方法又在`FrameWorkServlet`中被重写，如下：\n\n```java\n/**\n * Override the parent class implementation in order to intercept PATCH requests.\n */\n@Override\nprotected void service(HttpServletRequest request, HttpServletResponse response)\n    throws ServletException, IOException {\n\n  if (HttpMethod.PATCH.matches(request.getMethod())) {\n    processRequest(request, response);\n  }\n  else {\n    super.service(request, response);\n  }\n}\n```\n\n又增加了一个处理PATCH请求的方法，其他的还是调用`HttpServlet`的实现。\n\n同时，`FrameWorkServlet`又将`HttpServlet`中对应的各种HTTP请求的方法都进行了重写，如下：\n```java\n/**\n\t * Delegate GET requests to processRequest/doService.\n\t * <p>Will also be invoked by HttpServlet's default implementation of {@code doHead},\n\t * with a {@code NoBodyResponse} that just captures the content length.\n\t * @see #doService\n\t * @see #doHead\n\t */\n\t@Override\n\tprotected final void doGet(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tprocessRequest(request, response);\n\t}\n```\n\n所有的请求都被委托给了`processRequest`这个方法，它的实现如下：\n\n```java\n/**\n\t * Process this request, publishing an event regardless of the outcome.\n\t * <p>The actual event handling is performed by the abstract\n\t * {@link #doService} template method.\n\t */\n\tprotected final void processRequest(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tlong startTime = System.currentTimeMillis();\n\t\tThrowable failureCause = null;\n\n\t\tLocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();\n\t\tLocaleContext localeContext = buildLocaleContext(request);\n\n\t\tRequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();\n\t\tServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);\n\n\t\tWebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\t\tasyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), new RequestBindingInterceptor());\n\n\t\tinitContextHolders(request, localeContext, requestAttributes);\n\n\t\ttry {\n\t\t\tdoService(request, response);\n\t\t}\n\t\tcatch (ServletException ex) {\n\t\t\tfailureCause = ex;\n\t\t\tthrow ex;\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tfailureCause = ex;\n\t\t\tthrow ex;\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\tfailureCause = ex;\n\t\t\tthrow new NestedServletException(\"Request processing failed\", ex);\n\t\t}\n\n\t\tfinally {\n\t\t\tresetContextHolders(request, previousLocaleContext, previousAttributes);\n\t\t\tif (requestAttributes != null) {\n\t\t\t\trequestAttributes.requestCompleted();\n\t\t\t}\n\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tif (failureCause != null) {\n\t\t\t\t\tthis.logger.debug(\"Could not complete request\", failureCause);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\t\t\tlogger.debug(\"Leaving response open for concurrent processing\");\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.logger.debug(\"Successfully completed request\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpublishRequestHandledEvent(request, response, startTime, failureCause);\n\t\t}\n\t}\n\n```\n\n上述代码的异常处理很值得借鉴，上述代码中`doService(request, response)`是核心。\n\n它是`FrameWorkServlet`中定义的一个接口，它在`DispatcherServlet`中被实现。\n```java\n/**\n * Subclasses must implement this method to do the work of request handling,\n * receiving a centralized callback for GET, POST, PUT and DELETE.\n * <p>The contract is essentially the same as that for the commonly overridden\n * {@code doGet} or {@code doPost} methods of HttpServlet.\n * <p>This class intercepts calls to ensure that exception handling and\n * event publication takes place.\n * @param request current HTTP request\n * @param response current HTTP response\n * @throws Exception in case of any kind of processing failure\n * @see javax.servlet.http.HttpServlet#doGet\n * @see javax.servlet.http.HttpServlet#doPost\n */\nprotected abstract void doService(HttpServletRequest request, HttpServletResponse response)\n    throws Exception;\n```\n\n`DispatcherServlet`中的`doService`接口代码如下：\n```java\n/**\n\t * Exposes the DispatcherServlet-specific request attributes and delegates to {@link #doDispatch}\n\t * for the actual dispatching.\n\t */\n\t@Override\n\tprotected void doService(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tString resumed = WebAsyncUtils.getAsyncManager(request).hasConcurrentResult() ? \" resumed\" : \"\";\n\t\t\tlogger.debug(\"DispatcherServlet with name '\" + getServletName() + \"'\" + resumed +\n\t\t\t\t\t\" processing \" + request.getMethod() + \" request for [\" + getRequestUri(request) + \"]\");\n\t\t}\n\n\t\t// Keep a snapshot of the request attributes in case of an include,\n\t\t// to be able to restore the original attributes after the include.\n\t\tMap<String, Object> attributesSnapshot = null;\n\t\tif (WebUtils.isIncludeRequest(request)) {\n\t\t\tattributesSnapshot = new HashMap<String, Object>();\n\t\t\tEnumeration<?> attrNames = request.getAttributeNames();\n\t\t\twhile (attrNames.hasMoreElements()) {\n\t\t\t\tString attrName = (String) attrNames.nextElement();\n\t\t\t\tif (this.cleanupAfterInclude || attrName.startsWith(\"org.springframework.web.servlet\")) {\n\t\t\t\t\tattributesSnapshot.put(attrName, request.getAttribute(attrName));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Make framework objects available to handlers and view objects.\n\t\trequest.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());\n\t\trequest.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, this.localeResolver);\n\t\trequest.setAttribute(THEME_RESOLVER_ATTRIBUTE, this.themeResolver);\n\t\trequest.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());\n\n\t\tFlashMap inputFlashMap = this.flashMapManager.retrieveAndUpdate(request, response);\n\t\tif (inputFlashMap != null) {\n\t\t\trequest.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));\n\t\t}\n\t\trequest.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, new FlashMap());\n\t\trequest.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, this.flashMapManager);\n\n\t\ttry {\n\t\t\tdoDispatch(request, response);\n\t\t}\n\t\tfinally {\n\t\t\tif (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) {\n\t\t\t\t// Restore the original attribute snapshot, in case of an include.\n\t\t\t\tif (attributesSnapshot != null) {\n\t\t\t\t\trestoreAttributesAfterInclude(request, attributesSnapshot);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n```\n\n每次请求过来都会将系统的一些属性塞到request的attribute中，以便后面的handlers和view能够访问到。\n\n其中比较重要的是 `doDispatch(request, response)`，正是这个方法使得请求被真正的转发。\n\n```java\n/**\n\t * Process the actual dispatching to the handler.\n\t * <p>The handler will be obtained by applying the servlet's HandlerMappings in order.\n\t * The HandlerAdapter will be obtained by querying the servlet's installed HandlerAdapters\n\t * to find the first that supports the handler class.\n\t * <p>All HTTP methods are handled by this method. It's up to HandlerAdapters or handlers\n\t * themselves to decide which methods are acceptable.\n\t * @param request current HTTP request\n\t * @param response current HTTP response\n\t * @throws Exception in case of any kind of processing failure\n\t */\n\tprotected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\tHttpServletRequest processedRequest = request;\n\t\tHandlerExecutionChain mappedHandler = null;\n\t\tboolean multipartRequestParsed = false;\n\n\t\tWebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\n\t\ttry {\n\t\t\tModelAndView mv = null;\n\t\t\tException dispatchException = null;\n\n\t\t\ttry {\n\t\t\t\tprocessedRequest = checkMultipart(request);\n\t\t\t\tmultipartRequestParsed = (processedRequest != request);\n\n\t\t\t\t// Determine handler for the current request.\n\t\t\t\tmappedHandler = getHandler(processedRequest);\n\t\t\t\tif (mappedHandler == null || mappedHandler.getHandler() == null) {\n\t\t\t\t\tnoHandlerFound(processedRequest, response);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Determine handler adapter for the current request.\n\t\t\t\tHandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\n\n\t\t\t\t// Process last-modified header, if supported by the handler.\n\t\t\t\tString method = request.getMethod();\n\t\t\t\tboolean isGet = \"GET\".equals(method);\n\t\t\t\tif (isGet || \"HEAD\".equals(method)) {\n\t\t\t\t\tlong lastModified = ha.getLastModified(request, mappedHandler.getHandler());\n\t\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\t\tlogger.debug(\"Last-Modified value for [\" + getRequestUri(request) + \"] is: \" + lastModified);\n\t\t\t\t\t}\n\t\t\t\t\tif (new ServletWebRequest(request, response).checkNotModified(lastModified) && isGet) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!mappedHandler.applyPreHandle(processedRequest, response)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Actually invoke the handler.\n\t\t\t\tmv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n\n\t\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tapplyDefaultViewName(processedRequest, mv);\n\t\t\t\tmappedHandler.applyPostHandle(processedRequest, response, mv);\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tdispatchException = ex;\n\t\t\t}\n\t\t\tprocessDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler, ex);\n\t\t}\n\t\tcatch (Error err) {\n\t\t\ttriggerAfterCompletionWithError(processedRequest, response, mappedHandler, err);\n\t\t}\n\t\tfinally {\n\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\t// Instead of postHandle and afterCompletion\n\t\t\t\tif (mappedHandler != null) {\n\t\t\t\t\tmappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Clean up any resources used by a multipart request.\n\t\t\t\tif (multipartRequestParsed) {\n\t\t\t\t\tcleanupMultipart(processedRequest);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\n\nhandler 获取的顺序是从DispatcherServlet的HandlerMapping中按顺序取出的\n\nHandler对应的HandlerAdapter会从安装的HandlerAdapter找，将返回第一个合适的Adapter\n\n```java\n  HandlerExecutionChain mappedHandler = null;\n\n  // Determine handler for the current request.\n  mappedHandler = getHandler(processedRequest);\n              ...\n  // Determine handler adapter for the current request.\n  HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\n              ...\n\n  if (!mappedHandler.applyPreHandle(processedRequest, response)) {\n          return;\n  }\n  // Actually invoke the handler.\n  mv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n\n  mappedHandler.applyPostHandle(processedRequest, response, mv);\n\n  processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);\n```\n在applyPreHandle中也是检查拦截器的操作，并根据拦截器返回的布尔类型，判断是否进一步处理\n\n其中在applyPostHandle中又检查是否有各种拦截器,调用拦截器的postHandle方法\n\n处理完毕后，调用processDispatchResult方法将处理后的请求和mv进行分发\n\n```java\n//HandlerExecutionChain.java\n\n\t\t/**\n\t * Apply preHandle methods of registered interceptors.\n\t * @return {@code true} if the execution chain should proceed with the\n\t * next interceptor or the handler itself. Else, DispatcherServlet assumes\n\t * that this interceptor has already dealt with the response itself.\n\t */\n\tboolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\tHandlerInterceptor[] interceptors = getInterceptors();\n\t\tif (!ObjectUtils.isEmpty(interceptors)) {\n\t\t\tfor (int i = 0; i < interceptors.length; i++) {\n\t\t\t\tHandlerInterceptor interceptor = interceptors[i];\n\t\t\t\tif (!interceptor.preHandle(request, response, this.handler)) {\n\t\t\t\t\ttriggerAfterCompletion(request, response, null);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tthis.interceptorIndex = i;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t* Apply postHandle methods of registered interceptors.\n\t*/\n\tvoid applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) throws Exception {\n\tHandlerInterceptor[] interceptors = getInterceptors();\n\tif (!ObjectUtils.isEmpty(interceptors)) {\n\t\tfor (int i = interceptors.length - 1; i >= 0; i--) {\n\t\t\tHandlerInterceptor interceptor = interceptors[i];\n\t\t\tinterceptor.postHandle(request, response, this.handler, mv);\n\t\t}\n\t}\n```\n\nhandler处理后的结果是通过processDispatchResult传出去的\n\n```java\n//DispatcherServlet.java\n\n\t/**\n\t * Handle the result of handler selection and handler invocation, which is\n\t * either a ModelAndView or an Exception to be resolved to a ModelAndView.\n\t */\n\tprivate void processDispatchResult(HttpServletRequest request, HttpServletResponse response,\n\t\t\tHandlerExecutionChain mappedHandler, ModelAndView mv, Exception exception) throws Exception {\n\n\t\tboolean errorView = false;\n\n\t\tif (exception != null) {\n\t\t\tif (exception instanceof ModelAndViewDefiningException) {\n\t\t\t\tlogger.debug(\"ModelAndViewDefiningException encountered\", exception);\n\t\t\t\tmv = ((ModelAndViewDefiningException) exception).getModelAndView();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tObject handler = (mappedHandler != null ? mappedHandler.getHandler() : null);\n\t\t\t\tmv = processHandlerException(request, response, handler, exception);\n\t\t\t\terrorView = (mv != null);\n\t\t\t}\n\t\t}\n\n\t\t// Did the handler return a view to render?\n\t\tif (mv != null && !mv.wasCleared()) {\n\t\t\trender(mv, request, response);\n\t\t\tif (errorView) {\n\t\t\t\tWebUtils.clearErrorRequestAttributes(request);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Null ModelAndView returned to DispatcherServlet with name '\" + getServletName() +\n\t\t\t\t\t\t\"': assuming HandlerAdapter completed request handling\");\n\t\t\t}\n\t\t}\n\n\t\tif (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) {\n\t\t\t// Concurrent handling started during a forward\n\t\t\treturn;\n\t\t}\n\n\t\tif (mappedHandler != null) {\n\t\t\tmappedHandler.triggerAfterCompletion(request, response, null);\n\t\t}\n\t}\n```\n\n去各种判断，核心的方法就在`render(mv, request, response)`;\n\n它负责渲染返回的`ModelAndView`\n\n```java\n//DispatcherServlet.java\n\n\t/**\n\t* Render the given ModelAndView.\n\t* <p>This is the last stage in handling a request. It may involve resolving the view by name.\n\t* @param mv the ModelAndView to render\n\t* @param request current HTTP servlet request\n\t* @param response current HTTP servlet response\n\t* @throws ServletException if view is missing or cannot be resolved\n\t* @throws Exception if there's a problem rendering the view\n\t*/\n\tprotected void render(ModelAndView mv, HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\t// Determine locale for request and apply it to the response.\n\t\tLocale locale = this.localeResolver.resolveLocale(request);\n\t\tresponse.setLocale(locale);\n\n\t\tView view;\n\t\tif (mv.isReference()) {\n\t\t\t// We need to resolve the view name.\n\t\t\tview = resolveViewName(mv.getViewName(), mv.getModelInternal(), locale, request);\n\t\t\tif (view == null) {\n\t\t\t\tthrow new ServletException(\"Could not resolve view with name '\" + mv.getViewName() +\n\t\t\t\t\t\t\"' in servlet with name '\" + getServletName() + \"'\");\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// No need to lookup: the ModelAndView object contains the actual View object.\n\t\t\tview = mv.getView();\n\t\t\tif (view == null) {\n\t\t\t\tthrow new ServletException(\"ModelAndView [\" + mv + \"] neither contains a view name nor a \" +\n\t\t\t\t\t\t\"View object in servlet with name '\" + getServletName() + \"'\");\n\t\t\t}\n\t\t}\n\n\t\t// Delegate to the View object for rendering.\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Rendering view [\" + view + \"] in DispatcherServlet with name '\" + getServletName() + \"'\");\n\t\t}\n\t\ttry {\n\t\t\tview.render(mv.getModelInternal(), request, response);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Error rendering view [\" + view + \"] in DispatcherServlet with name '\" +\n\t\t\t\t\t\tgetServletName() + \"'\", ex);\n\t\t\t}\n\t\t\tthrow ex;\n\t\t}\n\t}\n```\n\n这个函数解析mv对象，如果是一个引用名就查找对应的view，最终返回一个View对象，\n\n然后将渲染的工作委托给这个view对象，`view.render(mv.getModelInternal(), request, response);`\n\n其中`resolveViewName`方法遍历 `DispatcherServlet`中注册的`viewResolver`，返回第一个非空的结果\n\n查找视图名称的方法如下:\n```java\n\n/** List of ViewResolvers used by this servlet */\nprivate List<ViewResolver> viewResolvers;\n\n\n/**\n\t* Resolve the given view name into a View object (to be rendered).\n\t* <p>The default implementations asks all ViewResolvers of this dispatcher.\n\t* Can be overridden for custom resolution strategies, potentially based on\n\t* specific model attributes or request parameters.\n\t* @param viewName the name of the view to resolve\n\t* @param model the model to be passed to the view\n\t* @param locale the current locale\n\t* @param request current HTTP servlet request\n\t* @return the View object, or {@code null} if none found\n\t* @throws Exception if the view cannot be resolved\n\t* (typically in case of problems creating an actual View object)\n\t* @see ViewResolver#resolveViewName\n\t*/\n\tprotected View resolveViewName(String viewName, Map<String, Object> model, Locale locale,\n\t\tHttpServletRequest request) throws Exception {\n\n\t\t\tfor (ViewResolver viewResolver : this.viewResolvers) {\n\t\t\t\tView view = viewResolver.resolveViewName(viewName, locale);\n\t\t\t\tif (view != null) {\n\t\t\t\t\treturn view;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t}\n```\n\n最终视图的渲染是View中定义的`render`方法进行的，它是一个抽象的接口\n\n```java\n/**\n\t * Render the view given the specified model.\n\t * <p>The first step will be preparing the request: In the JSP case,\n\t * this would mean setting model objects as request attributes.\n\t * The second step will be the actual rendering of the view,\n\t * for example including the JSP via a RequestDispatcher.\n\t * @param model Map with name Strings as keys and corresponding model\n\t * objects as values (Map can also be {@code null} in case of empty model)\n\t * @param request current HTTP request\n\t * @param response HTTP response we are building\n\t * @throws Exception if rendering failed\n\t */\n\tvoid render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response) throws Exception;\n```\n","slug":"spring-mvc","published":1,"updated":"2017-02-02T08:19:13.559Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmg5l0012w4py50c3wdid"},{"title":"spring 采用Mock的方式进行单元测试","toc":true,"date":"2016-09-25T15:44:53.000Z","_content":"\n## Spring & Mockito\n\n在Spring中，采用完全mock的方式进行单元测试，借助Mockito框架\n\n{% gist 3ad39c82972ed66de3d5934f1cdcedaa %}\n","source":"_posts/spring-mockMvc.md","raw":"---\ntitle: spring 采用Mock的方式进行单元测试\ntags: spring mvc\ncategory: spring\ntoc: true\ndate: 2016-09-25 23:44:53\n---\n\n## Spring & Mockito\n\n在Spring中，采用完全mock的方式进行单元测试，借助Mockito框架\n\n{% gist 3ad39c82972ed66de3d5934f1cdcedaa %}\n","slug":"spring-mockMvc","published":1,"updated":"2017-02-02T09:09:51.532Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmg670016w4pyk5urvk37"},{"title":"Java SPI 总结","toc":true,"date":"2016-12-17T13:39:32.000Z","_content":"\n\n## SPI ABC\n\nSPI 代表`Service Provider Interfaces`, 是一种服务提供发现的机制。JDK中为其提供了`ServiceLoader`用来加载接口对应的实现。\n\n## 使用约定\n\n{%  asset_img  usage.jpg  使用约定  %}\n\n\n\n\n```\n\n└── src\n├── com\n│   └── ivanzhang\n│       └── spi\n│           ├── HelloInterface.java\n│           ├── impl\n│           │   ├── ImageHello.java\n│           │   └── TextHello.java\n│           └── SPIMain.java\n└── META-INF\n    └── services\n        └── com.ivanzhang.spi.HelloInterface\n\n```\n\n## 使用例子\n\n- common-logging\n\n> common-logging，apache最早提供的日志的门面接口。只有接口，没有实现。具体方案由各提供商实现，发现日志提供商是通过扫描 META-INF/services/org.apache.commons.logging.LogFactory配置文件，通过读取该文件的内容找到日志提工商实现类。只要我们的日志实现里包含了这个文件，并在文件里制定 LogFactory工厂接口的实现类即可。\n\n- jdbc\n\n> jdbc4.0以前，开发还需要基于Class.forName(\"xxx\")的方式来装载驱动，jdbc4也基于spi的机制来发现驱动提供商了，可以通过META-INF/services/java.sql.Driver文件里指定实现类的方式来暴露驱动提供者。\n\n*其他用途：*\n\n* Java Database Connectivity\n* Java Cryptography Extension\n* Java Naming and Directory Interface\n* Java API for XML Processing\n* Java Business Integration\n* Java Sound\n* Java Image I/O\n* Java File Systems\n\n## 参考\n\n1. [Java的SPI机制与简单示例](http://www.solinx.co/archives/142)\n\n2. [Java SPI机制简介 - oschina](https://my.oschina.net/u/1034176/blog/659445)\n\n3. [Java SPI机制简介 - 技术宅](http://ivanzhangwb.github.io/blog/2012/06/01/java-spi/)\n\n4. [Introduction to the Service Provider Interfaces](https://docs.oracle.com/javase/tutorial/sound/SPI-intro.html)\n\n5. [谈java SPI机制、spring-mvc启动及servlet3.0](http://www.jianshu.com/p/bd36c023ddf0)\n\n6. [Service Provider Interface](https://en.wikipedia.org/wiki/Service_provider_interface)\n\n7. [Replaceable Components and the Service Provider Interface ](http://resources.sei.cmu.edu/asset_files/TechnicalNote/2002_004_001_13958.pdf)","source":"_posts/spi.md","raw":"---\ntitle: Java SPI 总结\ntags: spi\ncategory: java\ntoc: true\ndate: 2016-12-17 21:39:32\n---\n\n\n## SPI ABC\n\nSPI 代表`Service Provider Interfaces`, 是一种服务提供发现的机制。JDK中为其提供了`ServiceLoader`用来加载接口对应的实现。\n\n## 使用约定\n\n{%  asset_img  usage.jpg  使用约定  %}\n\n\n\n\n```\n\n└── src\n├── com\n│   └── ivanzhang\n│       └── spi\n│           ├── HelloInterface.java\n│           ├── impl\n│           │   ├── ImageHello.java\n│           │   └── TextHello.java\n│           └── SPIMain.java\n└── META-INF\n    └── services\n        └── com.ivanzhang.spi.HelloInterface\n\n```\n\n## 使用例子\n\n- common-logging\n\n> common-logging，apache最早提供的日志的门面接口。只有接口，没有实现。具体方案由各提供商实现，发现日志提供商是通过扫描 META-INF/services/org.apache.commons.logging.LogFactory配置文件，通过读取该文件的内容找到日志提工商实现类。只要我们的日志实现里包含了这个文件，并在文件里制定 LogFactory工厂接口的实现类即可。\n\n- jdbc\n\n> jdbc4.0以前，开发还需要基于Class.forName(\"xxx\")的方式来装载驱动，jdbc4也基于spi的机制来发现驱动提供商了，可以通过META-INF/services/java.sql.Driver文件里指定实现类的方式来暴露驱动提供者。\n\n*其他用途：*\n\n* Java Database Connectivity\n* Java Cryptography Extension\n* Java Naming and Directory Interface\n* Java API for XML Processing\n* Java Business Integration\n* Java Sound\n* Java Image I/O\n* Java File Systems\n\n## 参考\n\n1. [Java的SPI机制与简单示例](http://www.solinx.co/archives/142)\n\n2. [Java SPI机制简介 - oschina](https://my.oschina.net/u/1034176/blog/659445)\n\n3. [Java SPI机制简介 - 技术宅](http://ivanzhangwb.github.io/blog/2012/06/01/java-spi/)\n\n4. [Introduction to the Service Provider Interfaces](https://docs.oracle.com/javase/tutorial/sound/SPI-intro.html)\n\n5. [谈java SPI机制、spring-mvc启动及servlet3.0](http://www.jianshu.com/p/bd36c023ddf0)\n\n6. [Service Provider Interface](https://en.wikipedia.org/wiki/Service_provider_interface)\n\n7. [Replaceable Components and the Service Provider Interface ](http://resources.sei.cmu.edu/asset_files/TechnicalNote/2002_004_001_13958.pdf)","slug":"spi","published":1,"updated":"2017-02-02T09:09:52.296Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmg6a0019w4pyj6wgvcxp"},{"title":"linux 下使用 shadowsocks","toc":true,"date":"2015-10-09T11:44:14.000Z","_content":"## 安装shadowsocks\nshadowsocks 是使用 python 编写的，用 python 的包管理软件 pip 安装即可\n1.首先安装 pip\n``` bash\n  $ apt-get install python-pip\n```\n2.安装 shadowsocks\n``` bash\n  $ pip install shadowsocks\n```\n\n## shadowsocks 使用\nshadowsocks 分为两部分，一个 server 名字叫 ssserver ，一个 client 名字叫 sslocal\n默认都安装在  /usr/local/bin/ 目录下\n\n### **server 端**\nserver端主要搭建在自己购买的vps上面\n如下代码可使其在后台运行：\n``` bash\n  $ sudo ssserver -p 443 -k password -m rc4-md5 --user nobody -d start\n```\n具体可参见 [shadowsocks wiki](https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E)\n\n### **client 端**\nclient 端是运行在需要科学上网的机器上的\n``` bash\n  $ sslocal -s server_ip -p 443 -l 1080 -k \"passwd\" -t 600 -m aes-256-cfb &\n```\n& 是为了让其在后台运行\n查看后台运行的程序 \n``` bash\n $ jobs -l\n```\n``` bash\n[1]-  3918 Running                 hexo s &\n[2]+  4110 Stopped                 ping www.baidu.com\n```\n将后台的程序提到前端  %1   %后面的数字代表了要提到前台的任务\n``` bash\n$ %2\nping www.baidu.com\n64 bytes from 180.97.33.107: icmp_req=3 ttl=52 time=14.2 ms\n64 bytes from 180.97.33.107: icmp_req=4 ttl=52 time=12.7 ms\n```\n上述命令将 Ctrl + Z 挂起的任务，提到前台去了\nCtrl + C 是终止程序\nCtrl + Z 是挂起到后台\n\n至于浏览器端的代理插件，将代理地址配置成 127.0.0.1 端口 1080 （要与前面设置的端口一致）\n配置相应的代理规则即可科学上网\n\n至于开机自动启动，可以自己摸索\n\n\n\n\n\n","source":"_posts/shadowsocks.md","raw":"---\ntitle: linux 下使用 shadowsocks\ntags: shadowsocks\ncategory: linux\ntoc: true\ndate: 2015-10-09 19:44:14\n---\n## 安装shadowsocks\nshadowsocks 是使用 python 编写的，用 python 的包管理软件 pip 安装即可\n1.首先安装 pip\n``` bash\n  $ apt-get install python-pip\n```\n2.安装 shadowsocks\n``` bash\n  $ pip install shadowsocks\n```\n\n## shadowsocks 使用\nshadowsocks 分为两部分，一个 server 名字叫 ssserver ，一个 client 名字叫 sslocal\n默认都安装在  /usr/local/bin/ 目录下\n\n### **server 端**\nserver端主要搭建在自己购买的vps上面\n如下代码可使其在后台运行：\n``` bash\n  $ sudo ssserver -p 443 -k password -m rc4-md5 --user nobody -d start\n```\n具体可参见 [shadowsocks wiki](https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E)\n\n### **client 端**\nclient 端是运行在需要科学上网的机器上的\n``` bash\n  $ sslocal -s server_ip -p 443 -l 1080 -k \"passwd\" -t 600 -m aes-256-cfb &\n```\n& 是为了让其在后台运行\n查看后台运行的程序 \n``` bash\n $ jobs -l\n```\n``` bash\n[1]-  3918 Running                 hexo s &\n[2]+  4110 Stopped                 ping www.baidu.com\n```\n将后台的程序提到前端  %1   %后面的数字代表了要提到前台的任务\n``` bash\n$ %2\nping www.baidu.com\n64 bytes from 180.97.33.107: icmp_req=3 ttl=52 time=14.2 ms\n64 bytes from 180.97.33.107: icmp_req=4 ttl=52 time=12.7 ms\n```\n上述命令将 Ctrl + Z 挂起的任务，提到前台去了\nCtrl + C 是终止程序\nCtrl + Z 是挂起到后台\n\n至于浏览器端的代理插件，将代理地址配置成 127.0.0.1 端口 1080 （要与前面设置的端口一致）\n配置相应的代理规则即可科学上网\n\n至于开机自动启动，可以自己摸索\n\n\n\n\n\n","slug":"shadowsocks","published":1,"updated":"2017-02-02T09:09:53.024Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmg6l001dw4pyap47m4pt"},{"title":"正则总结","toc":true,"date":"2016-12-14T15:48:12.000Z","_content":"\n\n# 测试\n\n推荐使用`RegexBudy`\n\n\n![](https://www.regexbuddy.com/img/icon.png)\n\n\n\n\n界面如下:\n\n\n![](https://www.regexbuddy.com/screens/regexbuddy.png)\n\n\n\n\n推荐python的 `VerbalExpressions` [PythonVerbalExpressions ](https://github.com/VerbalExpressions/PythonVerbalExpressions)\n\n# 使用心得\n\n## 匹配多个单词\n\n`\\b`可以匹配一个单词的开头或者结尾\n\n匹配单个单词： `\\bfoo\\b` 可以匹配单个单测 foo\n\n匹配多个单词： `\\b(foo|bar)\\b` 可以匹配foo 或者 bar\n\n## 匹配开头和结尾\n\n`^`可以匹配字符串的开头\n\n`$`可以匹配字符串的结尾\n\n## 零宽断言\n\n| 分类  | 代码/语法   |说明|\n|------|---|------------------|\n| 捕获 | (exp)   |匹配exp,并捕获文本到自动命名的组里|\n| |(?<name>exp)    | 匹配exp,并捕获文本到名称为name的组里，也可以写成(?'name'exp)|\n| |(?:exp) |匹配exp,不捕获匹配的文本，也不给此分组分配组号|\n| 零宽断言  |  (?=exp) 匹配exp前面的位置|\n| |(?<=exp)    |匹配exp后面的位置|\n| |(?!exp) |匹配后面跟的不是exp的位置|\n| |(?<!exp)    |匹配前面不是exp的位置|\n| 注释  (?#comment) |这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读|\n\n\n### 先行断言\n\n语法格式\n\n\n`[a-z]*(?=ing)`\n\n可匹配 cooking singing 中的cook 与 sing\n\n### 后发断言\n\n语法格式\n\n`(?<=abc)[a-z]*`\n\n\n可匹配 abcdefg 中的defg\n\n### 负向零宽断言\n\n语法格式\n\n`(?!exp)`\n\n断言此位置的后面不能匹配表达式`exp`\n\n`\\b\\w*q(?!u)\\w*\\b` 匹配q后面不出现u（可以以q结尾）\n\n# 参考\n\n1. [RegexBuddy官网](https://www.regexbuddy.com/)\n\n2. [正则表达式30分钟入门教程](https://luke0922.gitbooks.io/learnregularexpressionin30minutes/content/)\n\n3. [正则表达式怎样匹配多个单词](http://www.biliyu.com/article/1321.html)\n\n","source":"_posts/re.md","raw":"---\ntitle: 正则总结\ntags: re\ncategory: base\ntoc: true\ndate: 2016-12-14 23:48:12\n---\n\n\n# 测试\n\n推荐使用`RegexBudy`\n\n\n![](https://www.regexbuddy.com/img/icon.png)\n\n\n\n\n界面如下:\n\n\n![](https://www.regexbuddy.com/screens/regexbuddy.png)\n\n\n\n\n推荐python的 `VerbalExpressions` [PythonVerbalExpressions ](https://github.com/VerbalExpressions/PythonVerbalExpressions)\n\n# 使用心得\n\n## 匹配多个单词\n\n`\\b`可以匹配一个单词的开头或者结尾\n\n匹配单个单词： `\\bfoo\\b` 可以匹配单个单测 foo\n\n匹配多个单词： `\\b(foo|bar)\\b` 可以匹配foo 或者 bar\n\n## 匹配开头和结尾\n\n`^`可以匹配字符串的开头\n\n`$`可以匹配字符串的结尾\n\n## 零宽断言\n\n| 分类  | 代码/语法   |说明|\n|------|---|------------------|\n| 捕获 | (exp)   |匹配exp,并捕获文本到自动命名的组里|\n| |(?<name>exp)    | 匹配exp,并捕获文本到名称为name的组里，也可以写成(?'name'exp)|\n| |(?:exp) |匹配exp,不捕获匹配的文本，也不给此分组分配组号|\n| 零宽断言  |  (?=exp) 匹配exp前面的位置|\n| |(?<=exp)    |匹配exp后面的位置|\n| |(?!exp) |匹配后面跟的不是exp的位置|\n| |(?<!exp)    |匹配前面不是exp的位置|\n| 注释  (?#comment) |这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读|\n\n\n### 先行断言\n\n语法格式\n\n\n`[a-z]*(?=ing)`\n\n可匹配 cooking singing 中的cook 与 sing\n\n### 后发断言\n\n语法格式\n\n`(?<=abc)[a-z]*`\n\n\n可匹配 abcdefg 中的defg\n\n### 负向零宽断言\n\n语法格式\n\n`(?!exp)`\n\n断言此位置的后面不能匹配表达式`exp`\n\n`\\b\\w*q(?!u)\\w*\\b` 匹配q后面不出现u（可以以q结尾）\n\n# 参考\n\n1. [RegexBuddy官网](https://www.regexbuddy.com/)\n\n2. [正则表达式30分钟入门教程](https://luke0922.gitbooks.io/learnregularexpressionin30minutes/content/)\n\n3. [正则表达式怎样匹配多个单词](http://www.biliyu.com/article/1321.html)\n\n","slug":"re","published":1,"updated":"2017-02-02T09:09:54.268Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmg6r001hw4pyebld0yds"},{"title":"python 小技巧","toc":true,"date":"2016-12-18T03:57:35.000Z","_content":"\n\n## 开启一个简单的HTTP Server\n\n- 命令：\n\n`python -m SimpleHTTPServer port`\n\n`-m` 是指后面跟的是python的一个Modlue\n\n`port` 默认是`8080`，可以自行指定。\n\n- 作用：\n\n1. 可以当一个简单的httpserver，做测试用\n\n2. 可以简单的传输一些小文件（大文件性能不好，经常中断）,大文件的传输可以用nc\n\n见： {% post_link nc %}\n\n## 简单的cig server\n\n- 命令：\n`python -m CGIHTTPServer port`\n\n- 作用:\n\n可以开启一个简单的cgi服务器，支持python作为cgi的语言，cgi的脚本须放置在root目录下的`cgi-bin`\n\n## 格式化 json数据\n\n- 命令:\n\n`curl http://my_url/ | python -m json.tool`\n\n- 作用:\n\n在返回大量json数据时，在命令行里可以用这个工具进行格式化。\n\nchrome浏览器中的`JsonView`插件可以做到同样的事情[chrome商店链接](https://chrome.google.com/webstore/detail/json-viewer/aimiinbnnkboelefkjlenlgimcabobli?utm_source=chrome-ntp-icon)\n\n- 缺陷：\n\npython 2.x 中是使用ASCII码作为默认编码的，因此json中如果带有中文就只是16进制的表示，可以修改`json.tool`的源代码。\n\n参见[json处理小技巧](http://axiaoxin.com/article/77/)\n\n> Python也有命令行里面格式化显示json的模块json.tool\n\n> cat data.json\n{\"爱\": \"我\", \"中\": \"华\"}\n> cat data.json| python -m json.tool\n{\n    \"\\u4e2d\": \"\\u534e\",\n    \"\\u7231\": \"\\u6211\"\n}\n好像有什么不对劲？因为json.tool在实现的时候ensure_ascii为True，让我们用Python来自己实现一个更好的Unix filter。\n\n`filter.py`\n\n```python\n    import json\n    import fileinput\n    for l in fileinput.input():\n        print(json.dumps(json.loads(l), ensure_ascii=False).encode('utf-8'))\n```\n只需要写上面那 4 行代码，就可以这样使用它：\n\n> python filter.py data.json\n{\"爱\": \"我\", \"中\": \"华\"}\n> cat data.json| python filter.py\n{\"爱\": \"我\", \"中\": \"华\"}\n\n## 编码问题\n\npython 2.x 默认使用的编码是ascii编码，中文总是出问题。\n\n遇到乱码问题，一般使用如下的步骤即可解决:\n\n1. python文件自身的编码\n\n>     Python will default to ASCII as standard encoding if no other\n    encoding hints are given.\n\n    To define a source code encoding, a magic comment must\n    be placed into the source files either as first or second\n    line in the file, such as:\n\n          # coding=<encoding name>\n\n    or (using formats recognized by popular editors)\n\n          #!/usr/bin/python\n          # -*- coding: <encoding name> -*-\n\n在文件头加上默认编码即可：\n\n```python\n          #!/usr/local/bin/python\n          # coding: utf-8\n          import os, sys\n          ...\n```\n\n2. 重新设置系统模块的编码\n\n```python\nimport sys\nsys.setdefaultencoding('utf-8')\n```\n\n3. 使用Unicode\n\n`s = u'中文'` \n\n## to be continued\n\n\n# 参考\n\n1. [Defining Python Source Code Encodings](https://www.python.org/dev/peps/pep-0263/)","source":"_posts/python-util.md","raw":"---\ntitle: python 小技巧\ntags: python-util\ncategory: python\ntoc: true\ndate: 2016-12-18 11:57:35\n---\n\n\n## 开启一个简单的HTTP Server\n\n- 命令：\n\n`python -m SimpleHTTPServer port`\n\n`-m` 是指后面跟的是python的一个Modlue\n\n`port` 默认是`8080`，可以自行指定。\n\n- 作用：\n\n1. 可以当一个简单的httpserver，做测试用\n\n2. 可以简单的传输一些小文件（大文件性能不好，经常中断）,大文件的传输可以用nc\n\n见： {% post_link nc %}\n\n## 简单的cig server\n\n- 命令：\n`python -m CGIHTTPServer port`\n\n- 作用:\n\n可以开启一个简单的cgi服务器，支持python作为cgi的语言，cgi的脚本须放置在root目录下的`cgi-bin`\n\n## 格式化 json数据\n\n- 命令:\n\n`curl http://my_url/ | python -m json.tool`\n\n- 作用:\n\n在返回大量json数据时，在命令行里可以用这个工具进行格式化。\n\nchrome浏览器中的`JsonView`插件可以做到同样的事情[chrome商店链接](https://chrome.google.com/webstore/detail/json-viewer/aimiinbnnkboelefkjlenlgimcabobli?utm_source=chrome-ntp-icon)\n\n- 缺陷：\n\npython 2.x 中是使用ASCII码作为默认编码的，因此json中如果带有中文就只是16进制的表示，可以修改`json.tool`的源代码。\n\n参见[json处理小技巧](http://axiaoxin.com/article/77/)\n\n> Python也有命令行里面格式化显示json的模块json.tool\n\n> cat data.json\n{\"爱\": \"我\", \"中\": \"华\"}\n> cat data.json| python -m json.tool\n{\n    \"\\u4e2d\": \"\\u534e\",\n    \"\\u7231\": \"\\u6211\"\n}\n好像有什么不对劲？因为json.tool在实现的时候ensure_ascii为True，让我们用Python来自己实现一个更好的Unix filter。\n\n`filter.py`\n\n```python\n    import json\n    import fileinput\n    for l in fileinput.input():\n        print(json.dumps(json.loads(l), ensure_ascii=False).encode('utf-8'))\n```\n只需要写上面那 4 行代码，就可以这样使用它：\n\n> python filter.py data.json\n{\"爱\": \"我\", \"中\": \"华\"}\n> cat data.json| python filter.py\n{\"爱\": \"我\", \"中\": \"华\"}\n\n## 编码问题\n\npython 2.x 默认使用的编码是ascii编码，中文总是出问题。\n\n遇到乱码问题，一般使用如下的步骤即可解决:\n\n1. python文件自身的编码\n\n>     Python will default to ASCII as standard encoding if no other\n    encoding hints are given.\n\n    To define a source code encoding, a magic comment must\n    be placed into the source files either as first or second\n    line in the file, such as:\n\n          # coding=<encoding name>\n\n    or (using formats recognized by popular editors)\n\n          #!/usr/bin/python\n          # -*- coding: <encoding name> -*-\n\n在文件头加上默认编码即可：\n\n```python\n          #!/usr/local/bin/python\n          # coding: utf-8\n          import os, sys\n          ...\n```\n\n2. 重新设置系统模块的编码\n\n```python\nimport sys\nsys.setdefaultencoding('utf-8')\n```\n\n3. 使用Unicode\n\n`s = u'中文'` \n\n## to be continued\n\n\n# 参考\n\n1. [Defining Python Source Code Encodings](https://www.python.org/dev/peps/pep-0263/)","slug":"python-util","published":1,"updated":"2017-02-02T09:09:54.852Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmg6w001mw4pywvuszy7j"},{"title":"Spring占位符（property-placeholder），源码阅读","toc":true,"date":"2016-10-30T16:22:23.000Z","_content":"\n\n##  `<context:property-placeholder location='xxx' />`的解析过程\n\n### schema\n\n在idea中`ctrl` + `b`或者，`ctrl` + 鼠标左键点击即可打开schema具体的位置\n\n{%  asset_img   location.jpg  %}\n\n\n\n\n`sping.handlers`中内容如下:\n\n```xml\nhttp\\://www.springframework.org/schema/context=org.springframework.context.config.ContextNamespaceHandler\nhttp\\://www.springframework.org/schema/jee=org.springframework.ejb.config.JeeNamespaceHandler\nhttp\\://www.springframework.org/schema/lang=org.springframework.scripting.config.LangNamespaceHandler\nhttp\\://www.springframework.org/schema/task=org.springframework.scheduling.config.TaskNamespaceHandler\nhttp\\://www.springframework.org/schema/cache=org.springframework.cache.config.CacheNamespaceHandler\n```\n`spring.schemas`中的内容如下：\n\n```xml\nhttp\\://www.springframework.org/schema/context/spring-context-2.5.xsd=org/springframework/context/config/spring-context-2.5.xsd\nhttp\\://www.springframework.org/schema/context/spring-context-3.0.xsd=org/springframework/context/config/spring-context-3.0.xsd\nhttp\\://www.springframework.org/schema/context/spring-context-3.1.xsd=org/springframework/context/config/spring-context-3.1.xsd\nhttp\\://www.springframework.org/schema/context/spring-context-3.2.xsd=org/springframework/context/config/spring-context-3.2.xsd\nhttp\\://www.springframework.org/schema/context/spring-context-4.0.xsd=org/springframework/context/config/spring-context-4.0.xsd\nhttp\\://www.springframework.org/schema/context/spring-context-4.1.xsd=org/springframework/context/config/spring-context-4.1.xsd\nhttp\\://www.springframework.org/schema/context/spring-context-4.2.xsd=org/springframework/context/config/spring-context-4.2.xsd\nhttp\\://www.springframework.org/schema/context/spring-context.xsd=org/springframework/context/config/spring-context-4.2.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee-2.0.xsd=org/springframework/ejb/config/spring-jee-2.0.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee-2.5.xsd=org/springframework/ejb/config/spring-jee-2.5.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee-3.0.xsd=org/springframework/ejb/config/spring-jee-3.0.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee-3.1.xsd=org/springframework/ejb/config/spring-jee-3.1.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee-3.2.xsd=org/springframework/ejb/config/spring-jee-3.2.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee-4.0.xsd=org/springframework/ejb/config/spring-jee-4.0.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee-4.1.xsd=org/springframework/ejb/config/spring-jee-4.1.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee-4.2.xsd=org/springframework/ejb/config/spring-jee-4.2.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee.xsd=org/springframework/ejb/config/spring-jee-4.2.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang-2.0.xsd=org/springframework/scripting/config/spring-lang-2.0.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang-2.5.xsd=org/springframework/scripting/config/spring-lang-2.5.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang-3.0.xsd=org/springframework/scripting/config/spring-lang-3.0.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang-3.1.xsd=org/springframework/scripting/config/spring-lang-3.1.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang-3.2.xsd=org/springframework/scripting/config/spring-lang-3.2.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang-4.0.xsd=org/springframework/scripting/config/spring-lang-4.0.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang-4.1.xsd=org/springframework/scripting/config/spring-lang-4.1.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang-4.2.xsd=org/springframework/scripting/config/spring-lang-4.2.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang.xsd=org/springframework/scripting/config/spring-lang-4.2.xsd\nhttp\\://www.springframework.org/schema/task/spring-task-3.0.xsd=org/springframework/scheduling/config/spring-task-3.0.xsd\nhttp\\://www.springframework.org/schema/task/spring-task-3.1.xsd=org/springframework/scheduling/config/spring-task-3.1.xsd\nhttp\\://www.springframework.org/schema/task/spring-task-3.2.xsd=org/springframework/scheduling/config/spring-task-3.2.xsd\nhttp\\://www.springframework.org/schema/task/spring-task-4.0.xsd=org/springframework/scheduling/config/spring-task-4.0.xsd\nhttp\\://www.springframework.org/schema/task/spring-task-4.1.xsd=org/springframework/scheduling/config/spring-task-4.1.xsd\nhttp\\://www.springframework.org/schema/task/spring-task-4.2.xsd=org/springframework/scheduling/config/spring-task-4.2.xsd\nhttp\\://www.springframework.org/schema/task/spring-task.xsd=org/springframework/scheduling/config/spring-task-4.2.xsd\nhttp\\://www.springframework.org/schema/cache/spring-cache-3.1.xsd=org/springframework/cache/config/spring-cache-3.1.xsd\nhttp\\://www.springframework.org/schema/cache/spring-cache-3.2.xsd=org/springframework/cache/config/spring-cache-3.2.xsd\nhttp\\://www.springframework.org/schema/cache/spring-cache-4.0.xsd=org/springframework/cache/config/spring-cache-4.0.xsd\nhttp\\://www.springframework.org/schema/cache/spring-cache-4.1.xsd=org/springframework/cache/config/spring-cache-4.1.xsd\nhttp\\://www.springframework.org/schema/cache/spring-cache-4.2.xsd=org/springframework/cache/config/spring-cache-4.2.xsd\nhttp\\://www.springframework.org/schema/cache/spring-cache.xsd=org/springframework/cache/config/spring-cache-4.2.xsd\n```\n### NamespaceHandlerSupport\n\n从`handler`中我们可以找出`context`标签的处理类是`org.springframework.context.config.ContextNamespaceHandler`,内容如下：\n\n```java\npublic class ContextNamespaceHandler extends NamespaceHandlerSupport {\n\n\t@Override\n\tpublic void init() {\n\t\tregisterBeanDefinitionParser(\"property-placeholder\", new PropertyPlaceholderBeanDefinitionParser());\n\t\tregisterBeanDefinitionParser(\"property-override\", new PropertyOverrideBeanDefinitionParser());\n\t\tregisterBeanDefinitionParser(\"annotation-config\", new AnnotationConfigBeanDefinitionParser());\n\t\tregisterBeanDefinitionParser(\"component-scan\", new ComponentScanBeanDefinitionParser());\n\t\tregisterBeanDefinitionParser(\"load-time-weaver\", new LoadTimeWeaverBeanDefinitionParser());\n\t\tregisterBeanDefinitionParser(\"spring-configured\", new SpringConfiguredBeanDefinitionParser());\n\t\tregisterBeanDefinitionParser(\"mbean-export\", new MBeanExportBeanDefinitionParser());\n\t\tregisterBeanDefinitionParser(\"mbean-server\", new MBeanServerBeanDefinitionParser());\n\t}\n}\n```\n顺藤摸瓜就能找到`property-placeholder`的处理类是`PropertyPlaceholderBeanDefinitionParser`\n\n### PropertyPlaceholderBeanDefinitionParser\n\n继承关系：\n\n{%  asset_img   hierarchy.jpg  %}\n\n\n\n\n```java\nclass PropertyPlaceholderBeanDefinitionParser extends AbstractPropertyLoadingBeanDefinitionParser {\n\n\tprivate static final String SYSTEM_PROPERTIES_MODE_ATTRIBUTE = \"system-properties-mode\";\n\n\tprivate static final String SYSTEM_PROPERTIES_MODE_DEFAULT = \"ENVIRONMENT\";\n\n\n\t@Override\n\tprotected Class<?> getBeanClass(Element element) {\n\t\t// As of Spring 3.1, the default value of system-properties-mode has changed from\n\t\t// 'FALLBACK' to 'ENVIRONMENT'. This latter value indicates that resolution of\n\t\t// placeholders against system properties is a function of the Environment and\n\t\t// its current set of PropertySources.\n\t\tif (SYSTEM_PROPERTIES_MODE_DEFAULT.equals(element.getAttribute(SYSTEM_PROPERTIES_MODE_ATTRIBUTE))) {\n\t\t\treturn PropertySourcesPlaceholderConfigurer.class;\n\t\t}\n\n\t\t// The user has explicitly specified a value for system-properties-mode: revert to\n\t\t// PropertyPlaceholderConfigurer to ensure backward compatibility with 3.0 and earlier.\n\t\treturn PropertyPlaceholderConfigurer.class;\n\t}\n\n\t@Override\n\tprotected void doParse(Element element, BeanDefinitionBuilder builder) {\n\t\tsuper.doParse(element, builder);\n\n\t\tbuilder.addPropertyValue(\"ignoreUnresolvablePlaceholders\",\n\t\t\t\tBoolean.valueOf(element.getAttribute(\"ignore-unresolvable\")));\n\n\t\tString systemPropertiesModeName = element.getAttribute(SYSTEM_PROPERTIES_MODE_ATTRIBUTE);\n\t\tif (StringUtils.hasLength(systemPropertiesModeName) &&\n\t\t\t\t!systemPropertiesModeName.equals(SYSTEM_PROPERTIES_MODE_DEFAULT)) {\n\t\t\tbuilder.addPropertyValue(\"systemPropertiesModeName\", \"SYSTEM_PROPERTIES_MODE_\" + systemPropertiesModeName);\n\t\t}\n\n\t\tif (element.hasAttribute(\"value-separator\")) {    \n\t\t\tbuilder.addPropertyValue(\"valueSeparator\", element.getAttribute(\"value-separator\"));\n\t\t}\n\n\t\tif (element.hasAttribute(\"null-value\")) {\n\t\t\tbuilder.addPropertyValue(\"nullValue\", element.getAttribute(\"null-value\"));\n\t\t}\n\t}\n\n}\n```\n在`getBeanClass`中，根据标签中的`system-properties-mode`属性来返回不同的类，来指明要实例化的类。\n\n再来看上述的`parse`方法，首先就是调用父类的`doParse`方法，然后就是解析标签中的相应属性，放到`BeanDefinitionBuilder`中，剩下的工作就交给spring这个框架来完成了。\n\n#### `system-properties-mode`\n\n决定解析placeholder的顺序。这个属性的取值如下：\n\n>\t**\"ENVIRONMENT\"** indicates placeholders should be resolved against the current Environment and against any local properties;\n\n>\t**\"NEVER\"** indicates placeholders should be resolved only against local properties and never against system properties;\n\n>\t**\"FALLBACK\"** indicates placeholders should be resolved against any local properties and then against system properties;\n\n>\t**\"OVERRIDE\"** indicates placeholders should be resolved first against system properties and then against any local properties;\n\n这个属性的默认值是`ENVIRONMENT`,也就是先从环境变量中解析，然后才从我们定义的properties文件中解析，如果环境中的变量名和配置文件中的变量名冲突，\n\n就会使用环境变量中的。\n\n>所以配置文件中的变量名最好带一个前缀，如`jdbc.username=`, 笔者在Ubuntu下就遇到过不带前缀的`username`和系统的'username'冲突的情况\n\n#### `ignore-unresolvable`\n\n>\tSpecifies if failure to find the property value to replace a key should be ignored.\n\tDefault is \"false\", meaning that this placeholder configurer will raise an exception\n\tif it cannot resolve a key. Set to \"true\" to allow the configurer to pass on the key\n\tto any others in the context that have not yet visited the key in question.\n\n这个属性很关键，他决定遇到无法解析的变量时是否抛出异常，默认是`fale`（抛出异常）,在有多个配置文件的时候应该设置为`true`。\n\n#### `value-separator`\n\nplaceHolder默认值得分隔符，默认是`:`\n\n> The separating character between the placeholder variable and the associated \tdefault value: by default, a ':' symbol.\n\n#### `null-value`\n\n>\tA value that should be treated as 'null' when resolved as a placeholder value:\n\te.g. \"\" (empty String) or \"null\". By default, no such null value is defined.\n\n**这些属性都可以在相应的`xsd`schema中找到。**\n\n\n### AbstractPropertyLoadingBeanDefinitionParser\n\n这是上面的那个解析类的父类。\n\n```java\nabstract class AbstractPropertyLoadingBeanDefinitionParser extends AbstractSingleBeanDefinitionParser {\n\n\t@Override\n\tprotected boolean shouldGenerateId() {\n\t\treturn true;\n\t}\n\n\t@Override\n\tprotected void doParse(Element element, BeanDefinitionBuilder builder) {\n\t\tString location = element.getAttribute(\"location\");\n\t\tif (StringUtils.hasLength(location)) {\n\t\t\tString[] locations = StringUtils.commaDelimitedListToStringArray(location);\n\t\t\tbuilder.addPropertyValue(\"locations\", locations);\n\t\t}\n\n\t\tString propertiesRef = element.getAttribute(\"properties-ref\");\n\t\tif (StringUtils.hasLength(propertiesRef)) {\n\t\t\tbuilder.addPropertyReference(\"properties\", propertiesRef);\n\t\t}\n\n\t\tString fileEncoding = element.getAttribute(\"file-encoding\");\n\t\tif (StringUtils.hasLength(fileEncoding)) {\n\t\t\tbuilder.addPropertyValue(\"fileEncoding\", fileEncoding);\n\t\t}\n\n\t\tString order = element.getAttribute(\"order\");\n\t\tif (StringUtils.hasLength(order)) {\n\t\t\tbuilder.addPropertyValue(\"order\", Integer.valueOf(order));\n\t\t}\n\n\t\tbuilder.addPropertyValue(\"ignoreResourceNotFound\",\n\t\t\t\tBoolean.valueOf(element.getAttribute(\"ignore-resource-not-found\")));\n\n\t\tbuilder.addPropertyValue(\"localOverride\",\n\t\t\t\tBoolean.valueOf(element.getAttribute(\"local-override\")));\n\n\t\tbuilder.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n\t}\n\n}\n\n```\n\n#### shouldGenerateId\n\n```java\n/**\n * Should an ID be generated instead of read from the passed in {@link Element}?\n * <p>Disabled by default; subclasses can override this to enable ID generation.\n * Note that this flag is about <i>always</i> generating an ID; the parser\n * won't even check for an \"id\" attribute in this case.\n * @return whether the parser should always generate an id\n */\nprotected boolean shouldGenerateId() {\n  return false;\n}\n```\n\n#### doParse\n\n这个方法负责解析配置文件的location、file-encoding等通用的属性，并放置到`builder`中。\n\n## Spring 调用handler的过程\n\nspring将特定的标签的解析委托给我们自己定义的handler的过程主要是在`DefaultBeanDefinitionDocumentReader`中\n```java\n/**\n\t * Parse the elements at the root level in the document:\n\t * \"import\", \"alias\", \"bean\".\n\t * @param root the DOM root element of the document\n\t */\n\tprotected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) {\n\t\tif (delegate.isDefaultNamespace(root)) {\n\t\t\tNodeList nl = root.getChildNodes();\n\t\t\tfor (int i = 0; i < nl.getLength(); i++) {\n\t\t\t\tNode node = nl.item(i);\n\t\t\t\tif (node instanceof Element) {\n\t\t\t\t\tElement ele = (Element) node;\n\t\t\t\t\tif (delegate.isDefaultNamespace(ele)) {\n\t\t\t\t\t\tparseDefaultElement(ele, delegate);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tdelegate.parseCustomElement(ele);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tdelegate.parseCustomElement(root);\n\t\t}\n\t}\n```\n`context`不是默认命名空间的标签，所以走`parseCustomElement`分支。\n\n走到`BeanDefinitionParserDelegate`的`parseCustomElement`方法中\n```java\npublic BeanDefinition parseCustomElement(Element ele) {\n\t\treturn parseCustomElement(ele, null);\n\t}\n\n\tpublic BeanDefinition parseCustomElement(Element ele, BeanDefinition containingBd) {\n\t\tString namespaceUri = getNamespaceURI(ele);\n\t\tNamespaceHandler handler = this.readerContext.getNamespaceHandlerResolver().resolve(namespaceUri);\n\t\tif (handler == null) {\n\t\t\terror(\"Unable to locate Spring NamespaceHandler for XML schema namespace [\" + namespaceUri + \"]\", ele);\n\t\t\treturn null;\n\t\t}\n\t\treturn handler.parse(ele, new ParserContext(this.readerContext, this, containingBd));\n\t}\n```\n\n这里从`NamespaceHandlerResolver`中根据`namespaceUri`获取到对应的`NamespaceHandler`,然后调用`handler`的`parse`\n方法进行解析，返回一个`BeanDefinition`，然后就注册到spring中了。\n\n这里的handler就是前面我们看到的实现了`NamespaceHandlerSupport `的那个`ContextNamespaceHandler`,`NamespaceHandlerSupport `继承自`NamespaceHandler`,它的parse 方法如下：\n\n```java\n/**\n\t * Parses the supplied {@link Element} by delegating to the {@link BeanDefinitionParser} that is\n\t * registered for that {@link Element}.\n\t */\n\t@Override\n\tpublic BeanDefinition parse(Element element, ParserContext parserContext) {\n\t\treturn findParserForElement(element, parserContext).parse(element, parserContext);\n\t}\n\n\t/**\n\t * Locates the {@link BeanDefinitionParser} from the register implementations using\n\t * the local name of the supplied {@link Element}.\n\t */\n\tprivate BeanDefinitionParser findParserForElement(Element element, ParserContext parserContext) {\n\t\tString localName = parserContext.getDelegate().getLocalName(element);\n\t\tBeanDefinitionParser parser = this.parsers.get(localName);\n\t\tif (parser == null) {\n\t\t\tparserContext.getReaderContext().fatal(\n\t\t\t\t\t\"Cannot locate BeanDefinitionParser for element [\" + localName + \"]\", element);\n\t\t}\n\t\treturn parser;\n\t}\n\n```\n就是从在`init()`方法中注册的`Parser`,根据对应的标签前缀，获取到parser，对xml元素进行解析。\n\n\n## 生效过程\n\n生效过程是在`BeanFactoryPostProcessor`被调用的过程中生效的, 继承关系\n\n{%  asset_img   post-processors.jpg  %}\n\n\n\n\n可以看到里面有两个熟悉的类——`PropertySourcesPlaceholderConfigurer`和`PropertyPlaceholderConfigurer`，正是`PropertyPlaceholderBeanDefinitionParser.getBeanClass`返回的两种类型, 也就是说他们两个是`BeanFactoryPostProcessor`.\n\n\n### PropertySourcesPlaceholderConfigurer\n```java\n/**\n\t * {@inheritDoc}\n\t * <p>Processing occurs by replacing ${...} placeholders in bean definitions by resolving each\n\t * against this configurer's set of {@link PropertySources}, which includes:\n\t * <ul>\n\t * <li>all {@linkplain org.springframework.core.env.ConfigurableEnvironment#getPropertySources\n\t * environment property sources}, if an {@code Environment} {@linkplain #setEnvironment is present}\n\t * <li>{@linkplain #mergeProperties merged local properties}, if {@linkplain #setLocation any}\n\t * {@linkplain #setLocations have} {@linkplain #setProperties been}\n\t * {@linkplain #setPropertiesArray specified}\n\t * <li>any property sources set by calling {@link #setPropertySources}\n\t * </ul>\n\t * <p>If {@link #setPropertySources} is called, <strong>environment and local properties will be\n\t * ignored</strong>. This method is designed to give the user fine-grained control over property\n\t * sources, and once set, the configurer makes no assumptions about adding additional sources.\n\t */\n\t@Override\n\tpublic void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {\n\t\tif (this.propertySources == null) {\n\t\t\tthis.propertySources = new MutablePropertySources();\n\t\t\tif (this.environment != null) {\n\t\t\t\tthis.propertySources.addLast(\n\t\t\t\t\tnew PropertySource<Environment>(ENVIRONMENT_PROPERTIES_PROPERTY_SOURCE_NAME, this.environment) {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic String getProperty(String key) {\n\t\t\t\t\t\t\treturn this.source.getProperty(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tPropertySource<?> localPropertySource =\n\t\t\t\t\t\tnew PropertiesPropertySource(LOCAL_PROPERTIES_PROPERTY_SOURCE_NAME, mergeProperties());\n\t\t\t\tif (this.localOverride) {\n\t\t\t\t\tthis.propertySources.addFirst(localPropertySource);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.propertySources.addLast(localPropertySource);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (IOException ex) {\n\t\t\t\tthrow new BeanInitializationException(\"Could not load properties\", ex);\n\t\t\t}\n\t\t}\n\n\t\tprocessProperties(beanFactory, new PropertySourcesPropertyResolver(this.propertySources));\n\t\tthis.appliedPropertySources = this.propertySources;\n\t}\n\n```\n\n注意上述的`localOverride`变量，它决定了是否用本地的替换系统的，主要是用加载的顺序呢控制的\n\n```java\n/**\n* <p>Any local properties (e.g. those added via {@link #setProperties}, {@link #setLocations}\n* et al.) are added as a {@code PropertySource}. Search precedence of local properties is\n* based on the value of the {@link #setLocalOverride localOverride} property, which is by\n* default {@code false} meaning that local properties are to be searched last, after all\n* environment property sources.\n*/\n```\n获取到所有的属性列表后，处理属性就交给了`processProperties`这个方法.\n\n```java\n/**\n\t * Visit each bean definition in the given bean factory and attempt to replace ${...} property\n\t * placeholders with values from the given properties.\n\t */\n\tprotected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess,\n\t\t\tfinal ConfigurablePropertyResolver propertyResolver) throws BeansException {\n\n\t\tpropertyResolver.setPlaceholderPrefix(this.placeholderPrefix);\n\t\tpropertyResolver.setPlaceholderSuffix(this.placeholderSuffix);\n\t\tpropertyResolver.setValueSeparator(this.valueSeparator);\n\n\t\tStringValueResolver valueResolver = new StringValueResolver() {\n\t\t\t@Override\n\t\t\tpublic String resolveStringValue(String strVal) {\n\t\t\t\tString resolved = ignoreUnresolvablePlaceholders ?\n\t\t\t\t\t\tpropertyResolver.resolvePlaceholders(strVal) :\n\t\t\t\t\t\tpropertyResolver.resolveRequiredPlaceholders(strVal);\n\t\t\t\treturn (resolved.equals(nullValue) ? null : resolved);\n\t\t\t}\n\t\t};\n\n\t\tdoProcessProperties(beanFactoryToProcess, valueResolver);\n\t}\n```\n\n先设置propertyResolver的prefix（默认是${}）和suffix(默认是})，以及默认值得分隔符(默认是:).\n\n然后创建了一个StringValueResolver, 这里根据`ignoreUnresolvablePlaceholders`的值来进行不同的解析，\n\n这个值默认是false, 但是可以在标签中配置。\n\n```xml\n<xsd:attribute name=\"ignore-unresolvable\" type=\"xsd:boolean\" default=\"false\">\n\t\t\t<xsd:annotation>\n\t\t\t\t<xsd:documentation><![CDATA[\n\tSpecifies if failure to find the property value to replace a key should be ignored.\n\tDefault is \"false\", meaning that this placeholder configurer will raise an exception\n\tif it cannot resolve a key. Set to \"true\" to allow the configurer to pass on the key\n\tto any others in the context that have not yet visited the key in question.\n\t\t\t\t]]></xsd:documentation>\n\t\t\t</xsd:annotation>\n\t\t</xsd:attribute>\n```\n\n`false`就以为者遇到无法解析的值就会直接抛出异常\n\n接下来看看`doProcessProperties`\n\n```java\nprotected void doProcessProperties(ConfigurableListableBeanFactory beanFactoryToProcess,\n\t\tStringValueResolver valueResolver) {\n\n\tBeanDefinitionVisitor visitor = new BeanDefinitionVisitor(valueResolver);\n\n\tString[] beanNames = beanFactoryToProcess.getBeanDefinitionNames();\n\tfor (String curName : beanNames) {\n\t\t// Check that we're not parsing our own bean definition,\n\t\t// to avoid failing on unresolvable placeholders in properties file locations.\n\t\tif (!(curName.equals(this.beanName) && beanFactoryToProcess.equals(this.beanFactory))) {\n\t\t\tBeanDefinition bd = beanFactoryToProcess.getBeanDefinition(curName);\n\t\t\ttry {\n\t\t\t\tvisitor.visitBeanDefinition(bd);\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tthrow new BeanDefinitionStoreException(bd.getResourceDescription(), curName, ex.getMessage(), ex);\n\t\t\t}\n\t\t}\n\t}\n\n\t// New in Spring 2.5: resolve placeholders in alias target names and aliases as well.\n\tbeanFactoryToProcess.resolveAliases(valueResolver);\n\n\t// New in Spring 3.0: resolve placeholders in embedded values such as annotation attributes.\n\tbeanFactoryToProcess.addEmbeddedValueResolver(valueResolver);\n}\n```\n这里采用的是visitor模式，查看`BeanDefinitionVisitor#visitBeanDefinition`\n\n```java\n/**\n\t * Traverse the given BeanDefinition object and the MutablePropertyValues\n\t * and ConstructorArgumentValues contained in them.\n\t * @param beanDefinition the BeanDefinition object to traverse\n\t * @see #resolveStringValue(String)\n\t */\n\tpublic void visitBeanDefinition(BeanDefinition beanDefinition) {\n\t\tvisitParentName(beanDefinition);\n\t\tvisitBeanClassName(beanDefinition);\n\t\tvisitFactoryBeanName(beanDefinition);\n\t\tvisitFactoryMethodName(beanDefinition);\n\t\tvisitScope(beanDefinition);\n\t\tvisitPropertyValues(beanDefinition.getPropertyValues());\n\t\tConstructorArgumentValues cas = beanDefinition.getConstructorArgumentValues();\n\t\tvisitIndexedArgumentValues(cas.getIndexedArgumentValues());\n\t\tvisitGenericArgumentValues(cas.getGenericArgumentValues());\n\t}\n```\n以其中的`visitParentName`为例：\n```java\nprotected void visitParentName(BeanDefinition beanDefinition) {\n\tString parentName = beanDefinition.getParentName();\n\tif (parentName != null) {\n\t\tString resolvedName = resolveStringValue(parentName);\n\t\tif (!parentName.equals(resolvedName)) {\n\t\t\tbeanDefinition.setParentName(resolvedName);\n\t\t}\n\t}\n}\n\n```\n就是先获取`parentName`，然后替换相应的属性之后的`resolvedName`,如果和原来的不一样就设置`resolvedName`\n\n为新的parentName\n\n```java\n/**\n * Resolve the given String value, for example parsing placeholders.\n * @param strVal the original String value\n * @return the resolved String value\n */\nprotected String resolveStringValue(String strVal) {\n\tif (this.valueResolver == null) {\n\t\tthrow new IllegalStateException(\"No StringValueResolver specified - pass a resolver \" +\n\t\t\t\t\"object into the constructor or override the 'resolveStringValue' method\");\n\t}\n\tString resolvedValue = this.valueResolver.resolveStringValue(strVal);\n\t// Return original String if not modified.\n\treturn (strVal.equals(resolvedValue) ? strVal : resolvedValue);\n}\n```\n\n顺藤摸瓜,看看`valueResolver`,就是之前的`StringValueResolver`\n\n这是一个接口只有一个方法\n\n```java\npublic interface StringValueResolver {\n\n\t/**\n\t * Resolve the given String value, for example parsing placeholders.\n\t * @param strVal the original String value\n\t * @return the resolved String value\n\t */\n\tString resolveStringValue(String strVal);\n\n}\n```\n\n之前传入的其实就是对应`ConfigurablePropertyResolver`的两个方法, 之前传入的是它的子类\n\n`PropertySourcesPropertyResolver`\n\n```java\n@Override\n\tpublic String resolvePlaceholders(String text) {\n\t\tif (this.nonStrictHelper == null) {\n\t\t\tthis.nonStrictHelper = createPlaceholderHelper(true);\n\t\t}\n\t\treturn doResolvePlaceholders(text, this.nonStrictHelper);\n\t}\n\n\t@Override\n\tpublic String resolveRequiredPlaceholders(String text) throws IllegalArgumentException {\n\t\tif (this.strictHelper == null) {\n\t\t\tthis.strictHelper = createPlaceholderHelper(false);\n\t\t}\n\t\treturn doResolvePlaceholders(text, this.strictHelper);\n\t}\n```\n\n调用的是内部方法:\n\n```java\nprivate String doResolvePlaceholders(String text, PropertyPlaceholderHelper helper) {\n\treturn helper.replacePlaceholders(text, new PropertyPlaceholderHelper.PlaceholderResolver() {\n\t\t@Override\n\t\tpublic String resolvePlaceholder(String placeholderName) {\n\t\t\treturn getPropertyAsRawString(placeholderName);\n\t\t}\n\t});\n}\n\n```\n\n最终调用功能的是`PropertyPlaceholderHelper`的replacePlaceholders方法，\n\n这个helper在构造是通过 `createPlaceholderHelper`方法构建的，他接受一个bool类型的参数\n\n```java\nprivate PropertyPlaceholderHelper createPlaceholderHelper(boolean ignoreUnresolvablePlaceholders) {\n\treturn new PropertyPlaceholderHelper(this.placeholderPrefix, this.placeholderSuffix,\n\t\t\tthis.valueSeparator, ignoreUnresolvablePlaceholders);\n}\n```\n\n这个bool值就是表示是否要ignore掉不能解析的属性。\n\n```java\n/**\n\t * Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix.\n\t * @param placeholderPrefix the prefix that denotes the start of a placeholder\n\t * @param placeholderSuffix the suffix that denotes the end of a placeholder\n\t * @param valueSeparator the separating character between the placeholder variable\n\t * and the associated default value, if any\n\t * @param ignoreUnresolvablePlaceholders indicates whether unresolvable placeholders should\n\t * be ignored ({@code true}) or cause an exception ({@code false})\n\t */\n```\n接着追\n\n```java\n/**\n * Replaces all placeholders of format {@code ${name}} with the value returned\n * from the supplied {@link PlaceholderResolver}.\n * @param value the value containing the placeholders to be replaced\n * @param placeholderResolver the {@code PlaceholderResolver} to use for replacement\n * @return the supplied value with placeholders replaced inline\n */\npublic String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {\n\tAssert.notNull(value, \"'value' must not be null\");\n\treturn parseStringValue(value, placeholderResolver, new HashSet<String>());\n}\n\nprotected String parseStringValue(\n\t\t\tString strVal, PlaceholderResolver placeholderResolver, Set<String> visitedPlaceholders) {\n\n\t\tStringBuilder result = new StringBuilder(strVal);\n\n\t\tint startIndex = strVal.indexOf(this.placeholderPrefix);\n\t\twhile (startIndex != -1) {\n\t\t\tint endIndex = findPlaceholderEndIndex(result, startIndex);\n\t\t\tif (endIndex != -1) {\n\t\t\t\tString placeholder = result.substring(startIndex + this.placeholderPrefix.length(), endIndex);\n\t\t\t\tString originalPlaceholder = placeholder;\n\t\t\t\tif (!visitedPlaceholders.add(originalPlaceholder)) {\n\t\t\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\t\t\"Circular placeholder reference '\" + originalPlaceholder + \"' in property definitions\");\n\t\t\t\t}\n\t\t\t\t// Recursive invocation, parsing placeholders contained in the placeholder key.\n\t\t\t\tplaceholder = parseStringValue(placeholder, placeholderResolver, visitedPlaceholders);\n\t\t\t\t// Now obtain the value for the fully resolved key...\n\t\t\t\tString propVal = placeholderResolver.resolvePlaceholder(placeholder);\n\t\t\t\tif (propVal == null && this.valueSeparator != null) {\n\t\t\t\t\tint separatorIndex = placeholder.indexOf(this.valueSeparator);\n\t\t\t\t\tif (separatorIndex != -1) {\n\t\t\t\t\t\tString actualPlaceholder = placeholder.substring(0, separatorIndex);\n\t\t\t\t\t\tString defaultValue = placeholder.substring(separatorIndex + this.valueSeparator.length());\n\t\t\t\t\t\tpropVal = placeholderResolver.resolvePlaceholder(actualPlaceholder);\n\t\t\t\t\t\tif (propVal == null) {\n\t\t\t\t\t\t\tpropVal = defaultValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (propVal != null) {\n\t\t\t\t\t// Recursive invocation, parsing placeholders contained in the\n\t\t\t\t\t// previously resolved placeholder value.\n\t\t\t\t\tpropVal = parseStringValue(propVal, placeholderResolver, visitedPlaceholders);\n\t\t\t\t\tresult.replace(startIndex, endIndex + this.placeholderSuffix.length(), propVal);\n\t\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t\t\tlogger.trace(\"Resolved placeholder '\" + placeholder + \"'\");\n\t\t\t\t\t}\n\t\t\t\t\tstartIndex = result.indexOf(this.placeholderPrefix, startIndex + propVal.length());\n\t\t\t\t}\n\t\t\t\telse if (this.ignoreUnresolvablePlaceholders) {\n\t\t\t\t\t// Proceed with unprocessed value.\n\t\t\t\t\tstartIndex = result.indexOf(this.placeholderPrefix, endIndex + this.placeholderSuffix.length());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow new IllegalArgumentException(\"Could not resolve placeholder '\" +\n\t\t\t\t\t\t\tplaceholder + \"'\" + \" in string value \\\"\" + strVal + \"\\\"\");\n\t\t\t\t}\n\t\t\t\tvisitedPlaceholders.remove(originalPlaceholder);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstartIndex = -1;\n\t\t\t}\n\t\t}\n\n\t\treturn result.toString();\n\t}\n\n```\n\n实际解析的代码都在这里：\n\n1. 取出placeHolder的名称.\n2. 判断有没有循环引用的情况.\n3. 递归替换，获取对应的值.\n4. 如果值为空，解析默认值.\n\n\n### PropertyPlaceholderConfigurer\n\n应该和上面的类似，抽时间补。\n","source":"_posts/property-placeholder.md","raw":"---\ntitle: Spring占位符（property-placeholder），源码阅读\ntags: placeholder\ncategory: spring\ntoc: true\ndate: 2016-10-31 00:22:23\n---\n\n\n##  `<context:property-placeholder location='xxx' />`的解析过程\n\n### schema\n\n在idea中`ctrl` + `b`或者，`ctrl` + 鼠标左键点击即可打开schema具体的位置\n\n{%  asset_img   location.jpg  %}\n\n\n\n\n`sping.handlers`中内容如下:\n\n```xml\nhttp\\://www.springframework.org/schema/context=org.springframework.context.config.ContextNamespaceHandler\nhttp\\://www.springframework.org/schema/jee=org.springframework.ejb.config.JeeNamespaceHandler\nhttp\\://www.springframework.org/schema/lang=org.springframework.scripting.config.LangNamespaceHandler\nhttp\\://www.springframework.org/schema/task=org.springframework.scheduling.config.TaskNamespaceHandler\nhttp\\://www.springframework.org/schema/cache=org.springframework.cache.config.CacheNamespaceHandler\n```\n`spring.schemas`中的内容如下：\n\n```xml\nhttp\\://www.springframework.org/schema/context/spring-context-2.5.xsd=org/springframework/context/config/spring-context-2.5.xsd\nhttp\\://www.springframework.org/schema/context/spring-context-3.0.xsd=org/springframework/context/config/spring-context-3.0.xsd\nhttp\\://www.springframework.org/schema/context/spring-context-3.1.xsd=org/springframework/context/config/spring-context-3.1.xsd\nhttp\\://www.springframework.org/schema/context/spring-context-3.2.xsd=org/springframework/context/config/spring-context-3.2.xsd\nhttp\\://www.springframework.org/schema/context/spring-context-4.0.xsd=org/springframework/context/config/spring-context-4.0.xsd\nhttp\\://www.springframework.org/schema/context/spring-context-4.1.xsd=org/springframework/context/config/spring-context-4.1.xsd\nhttp\\://www.springframework.org/schema/context/spring-context-4.2.xsd=org/springframework/context/config/spring-context-4.2.xsd\nhttp\\://www.springframework.org/schema/context/spring-context.xsd=org/springframework/context/config/spring-context-4.2.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee-2.0.xsd=org/springframework/ejb/config/spring-jee-2.0.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee-2.5.xsd=org/springframework/ejb/config/spring-jee-2.5.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee-3.0.xsd=org/springframework/ejb/config/spring-jee-3.0.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee-3.1.xsd=org/springframework/ejb/config/spring-jee-3.1.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee-3.2.xsd=org/springframework/ejb/config/spring-jee-3.2.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee-4.0.xsd=org/springframework/ejb/config/spring-jee-4.0.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee-4.1.xsd=org/springframework/ejb/config/spring-jee-4.1.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee-4.2.xsd=org/springframework/ejb/config/spring-jee-4.2.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee.xsd=org/springframework/ejb/config/spring-jee-4.2.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang-2.0.xsd=org/springframework/scripting/config/spring-lang-2.0.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang-2.5.xsd=org/springframework/scripting/config/spring-lang-2.5.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang-3.0.xsd=org/springframework/scripting/config/spring-lang-3.0.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang-3.1.xsd=org/springframework/scripting/config/spring-lang-3.1.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang-3.2.xsd=org/springframework/scripting/config/spring-lang-3.2.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang-4.0.xsd=org/springframework/scripting/config/spring-lang-4.0.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang-4.1.xsd=org/springframework/scripting/config/spring-lang-4.1.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang-4.2.xsd=org/springframework/scripting/config/spring-lang-4.2.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang.xsd=org/springframework/scripting/config/spring-lang-4.2.xsd\nhttp\\://www.springframework.org/schema/task/spring-task-3.0.xsd=org/springframework/scheduling/config/spring-task-3.0.xsd\nhttp\\://www.springframework.org/schema/task/spring-task-3.1.xsd=org/springframework/scheduling/config/spring-task-3.1.xsd\nhttp\\://www.springframework.org/schema/task/spring-task-3.2.xsd=org/springframework/scheduling/config/spring-task-3.2.xsd\nhttp\\://www.springframework.org/schema/task/spring-task-4.0.xsd=org/springframework/scheduling/config/spring-task-4.0.xsd\nhttp\\://www.springframework.org/schema/task/spring-task-4.1.xsd=org/springframework/scheduling/config/spring-task-4.1.xsd\nhttp\\://www.springframework.org/schema/task/spring-task-4.2.xsd=org/springframework/scheduling/config/spring-task-4.2.xsd\nhttp\\://www.springframework.org/schema/task/spring-task.xsd=org/springframework/scheduling/config/spring-task-4.2.xsd\nhttp\\://www.springframework.org/schema/cache/spring-cache-3.1.xsd=org/springframework/cache/config/spring-cache-3.1.xsd\nhttp\\://www.springframework.org/schema/cache/spring-cache-3.2.xsd=org/springframework/cache/config/spring-cache-3.2.xsd\nhttp\\://www.springframework.org/schema/cache/spring-cache-4.0.xsd=org/springframework/cache/config/spring-cache-4.0.xsd\nhttp\\://www.springframework.org/schema/cache/spring-cache-4.1.xsd=org/springframework/cache/config/spring-cache-4.1.xsd\nhttp\\://www.springframework.org/schema/cache/spring-cache-4.2.xsd=org/springframework/cache/config/spring-cache-4.2.xsd\nhttp\\://www.springframework.org/schema/cache/spring-cache.xsd=org/springframework/cache/config/spring-cache-4.2.xsd\n```\n### NamespaceHandlerSupport\n\n从`handler`中我们可以找出`context`标签的处理类是`org.springframework.context.config.ContextNamespaceHandler`,内容如下：\n\n```java\npublic class ContextNamespaceHandler extends NamespaceHandlerSupport {\n\n\t@Override\n\tpublic void init() {\n\t\tregisterBeanDefinitionParser(\"property-placeholder\", new PropertyPlaceholderBeanDefinitionParser());\n\t\tregisterBeanDefinitionParser(\"property-override\", new PropertyOverrideBeanDefinitionParser());\n\t\tregisterBeanDefinitionParser(\"annotation-config\", new AnnotationConfigBeanDefinitionParser());\n\t\tregisterBeanDefinitionParser(\"component-scan\", new ComponentScanBeanDefinitionParser());\n\t\tregisterBeanDefinitionParser(\"load-time-weaver\", new LoadTimeWeaverBeanDefinitionParser());\n\t\tregisterBeanDefinitionParser(\"spring-configured\", new SpringConfiguredBeanDefinitionParser());\n\t\tregisterBeanDefinitionParser(\"mbean-export\", new MBeanExportBeanDefinitionParser());\n\t\tregisterBeanDefinitionParser(\"mbean-server\", new MBeanServerBeanDefinitionParser());\n\t}\n}\n```\n顺藤摸瓜就能找到`property-placeholder`的处理类是`PropertyPlaceholderBeanDefinitionParser`\n\n### PropertyPlaceholderBeanDefinitionParser\n\n继承关系：\n\n{%  asset_img   hierarchy.jpg  %}\n\n\n\n\n```java\nclass PropertyPlaceholderBeanDefinitionParser extends AbstractPropertyLoadingBeanDefinitionParser {\n\n\tprivate static final String SYSTEM_PROPERTIES_MODE_ATTRIBUTE = \"system-properties-mode\";\n\n\tprivate static final String SYSTEM_PROPERTIES_MODE_DEFAULT = \"ENVIRONMENT\";\n\n\n\t@Override\n\tprotected Class<?> getBeanClass(Element element) {\n\t\t// As of Spring 3.1, the default value of system-properties-mode has changed from\n\t\t// 'FALLBACK' to 'ENVIRONMENT'. This latter value indicates that resolution of\n\t\t// placeholders against system properties is a function of the Environment and\n\t\t// its current set of PropertySources.\n\t\tif (SYSTEM_PROPERTIES_MODE_DEFAULT.equals(element.getAttribute(SYSTEM_PROPERTIES_MODE_ATTRIBUTE))) {\n\t\t\treturn PropertySourcesPlaceholderConfigurer.class;\n\t\t}\n\n\t\t// The user has explicitly specified a value for system-properties-mode: revert to\n\t\t// PropertyPlaceholderConfigurer to ensure backward compatibility with 3.0 and earlier.\n\t\treturn PropertyPlaceholderConfigurer.class;\n\t}\n\n\t@Override\n\tprotected void doParse(Element element, BeanDefinitionBuilder builder) {\n\t\tsuper.doParse(element, builder);\n\n\t\tbuilder.addPropertyValue(\"ignoreUnresolvablePlaceholders\",\n\t\t\t\tBoolean.valueOf(element.getAttribute(\"ignore-unresolvable\")));\n\n\t\tString systemPropertiesModeName = element.getAttribute(SYSTEM_PROPERTIES_MODE_ATTRIBUTE);\n\t\tif (StringUtils.hasLength(systemPropertiesModeName) &&\n\t\t\t\t!systemPropertiesModeName.equals(SYSTEM_PROPERTIES_MODE_DEFAULT)) {\n\t\t\tbuilder.addPropertyValue(\"systemPropertiesModeName\", \"SYSTEM_PROPERTIES_MODE_\" + systemPropertiesModeName);\n\t\t}\n\n\t\tif (element.hasAttribute(\"value-separator\")) {    \n\t\t\tbuilder.addPropertyValue(\"valueSeparator\", element.getAttribute(\"value-separator\"));\n\t\t}\n\n\t\tif (element.hasAttribute(\"null-value\")) {\n\t\t\tbuilder.addPropertyValue(\"nullValue\", element.getAttribute(\"null-value\"));\n\t\t}\n\t}\n\n}\n```\n在`getBeanClass`中，根据标签中的`system-properties-mode`属性来返回不同的类，来指明要实例化的类。\n\n再来看上述的`parse`方法，首先就是调用父类的`doParse`方法，然后就是解析标签中的相应属性，放到`BeanDefinitionBuilder`中，剩下的工作就交给spring这个框架来完成了。\n\n#### `system-properties-mode`\n\n决定解析placeholder的顺序。这个属性的取值如下：\n\n>\t**\"ENVIRONMENT\"** indicates placeholders should be resolved against the current Environment and against any local properties;\n\n>\t**\"NEVER\"** indicates placeholders should be resolved only against local properties and never against system properties;\n\n>\t**\"FALLBACK\"** indicates placeholders should be resolved against any local properties and then against system properties;\n\n>\t**\"OVERRIDE\"** indicates placeholders should be resolved first against system properties and then against any local properties;\n\n这个属性的默认值是`ENVIRONMENT`,也就是先从环境变量中解析，然后才从我们定义的properties文件中解析，如果环境中的变量名和配置文件中的变量名冲突，\n\n就会使用环境变量中的。\n\n>所以配置文件中的变量名最好带一个前缀，如`jdbc.username=`, 笔者在Ubuntu下就遇到过不带前缀的`username`和系统的'username'冲突的情况\n\n#### `ignore-unresolvable`\n\n>\tSpecifies if failure to find the property value to replace a key should be ignored.\n\tDefault is \"false\", meaning that this placeholder configurer will raise an exception\n\tif it cannot resolve a key. Set to \"true\" to allow the configurer to pass on the key\n\tto any others in the context that have not yet visited the key in question.\n\n这个属性很关键，他决定遇到无法解析的变量时是否抛出异常，默认是`fale`（抛出异常）,在有多个配置文件的时候应该设置为`true`。\n\n#### `value-separator`\n\nplaceHolder默认值得分隔符，默认是`:`\n\n> The separating character between the placeholder variable and the associated \tdefault value: by default, a ':' symbol.\n\n#### `null-value`\n\n>\tA value that should be treated as 'null' when resolved as a placeholder value:\n\te.g. \"\" (empty String) or \"null\". By default, no such null value is defined.\n\n**这些属性都可以在相应的`xsd`schema中找到。**\n\n\n### AbstractPropertyLoadingBeanDefinitionParser\n\n这是上面的那个解析类的父类。\n\n```java\nabstract class AbstractPropertyLoadingBeanDefinitionParser extends AbstractSingleBeanDefinitionParser {\n\n\t@Override\n\tprotected boolean shouldGenerateId() {\n\t\treturn true;\n\t}\n\n\t@Override\n\tprotected void doParse(Element element, BeanDefinitionBuilder builder) {\n\t\tString location = element.getAttribute(\"location\");\n\t\tif (StringUtils.hasLength(location)) {\n\t\t\tString[] locations = StringUtils.commaDelimitedListToStringArray(location);\n\t\t\tbuilder.addPropertyValue(\"locations\", locations);\n\t\t}\n\n\t\tString propertiesRef = element.getAttribute(\"properties-ref\");\n\t\tif (StringUtils.hasLength(propertiesRef)) {\n\t\t\tbuilder.addPropertyReference(\"properties\", propertiesRef);\n\t\t}\n\n\t\tString fileEncoding = element.getAttribute(\"file-encoding\");\n\t\tif (StringUtils.hasLength(fileEncoding)) {\n\t\t\tbuilder.addPropertyValue(\"fileEncoding\", fileEncoding);\n\t\t}\n\n\t\tString order = element.getAttribute(\"order\");\n\t\tif (StringUtils.hasLength(order)) {\n\t\t\tbuilder.addPropertyValue(\"order\", Integer.valueOf(order));\n\t\t}\n\n\t\tbuilder.addPropertyValue(\"ignoreResourceNotFound\",\n\t\t\t\tBoolean.valueOf(element.getAttribute(\"ignore-resource-not-found\")));\n\n\t\tbuilder.addPropertyValue(\"localOverride\",\n\t\t\t\tBoolean.valueOf(element.getAttribute(\"local-override\")));\n\n\t\tbuilder.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n\t}\n\n}\n\n```\n\n#### shouldGenerateId\n\n```java\n/**\n * Should an ID be generated instead of read from the passed in {@link Element}?\n * <p>Disabled by default; subclasses can override this to enable ID generation.\n * Note that this flag is about <i>always</i> generating an ID; the parser\n * won't even check for an \"id\" attribute in this case.\n * @return whether the parser should always generate an id\n */\nprotected boolean shouldGenerateId() {\n  return false;\n}\n```\n\n#### doParse\n\n这个方法负责解析配置文件的location、file-encoding等通用的属性，并放置到`builder`中。\n\n## Spring 调用handler的过程\n\nspring将特定的标签的解析委托给我们自己定义的handler的过程主要是在`DefaultBeanDefinitionDocumentReader`中\n```java\n/**\n\t * Parse the elements at the root level in the document:\n\t * \"import\", \"alias\", \"bean\".\n\t * @param root the DOM root element of the document\n\t */\n\tprotected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) {\n\t\tif (delegate.isDefaultNamespace(root)) {\n\t\t\tNodeList nl = root.getChildNodes();\n\t\t\tfor (int i = 0; i < nl.getLength(); i++) {\n\t\t\t\tNode node = nl.item(i);\n\t\t\t\tif (node instanceof Element) {\n\t\t\t\t\tElement ele = (Element) node;\n\t\t\t\t\tif (delegate.isDefaultNamespace(ele)) {\n\t\t\t\t\t\tparseDefaultElement(ele, delegate);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tdelegate.parseCustomElement(ele);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tdelegate.parseCustomElement(root);\n\t\t}\n\t}\n```\n`context`不是默认命名空间的标签，所以走`parseCustomElement`分支。\n\n走到`BeanDefinitionParserDelegate`的`parseCustomElement`方法中\n```java\npublic BeanDefinition parseCustomElement(Element ele) {\n\t\treturn parseCustomElement(ele, null);\n\t}\n\n\tpublic BeanDefinition parseCustomElement(Element ele, BeanDefinition containingBd) {\n\t\tString namespaceUri = getNamespaceURI(ele);\n\t\tNamespaceHandler handler = this.readerContext.getNamespaceHandlerResolver().resolve(namespaceUri);\n\t\tif (handler == null) {\n\t\t\terror(\"Unable to locate Spring NamespaceHandler for XML schema namespace [\" + namespaceUri + \"]\", ele);\n\t\t\treturn null;\n\t\t}\n\t\treturn handler.parse(ele, new ParserContext(this.readerContext, this, containingBd));\n\t}\n```\n\n这里从`NamespaceHandlerResolver`中根据`namespaceUri`获取到对应的`NamespaceHandler`,然后调用`handler`的`parse`\n方法进行解析，返回一个`BeanDefinition`，然后就注册到spring中了。\n\n这里的handler就是前面我们看到的实现了`NamespaceHandlerSupport `的那个`ContextNamespaceHandler`,`NamespaceHandlerSupport `继承自`NamespaceHandler`,它的parse 方法如下：\n\n```java\n/**\n\t * Parses the supplied {@link Element} by delegating to the {@link BeanDefinitionParser} that is\n\t * registered for that {@link Element}.\n\t */\n\t@Override\n\tpublic BeanDefinition parse(Element element, ParserContext parserContext) {\n\t\treturn findParserForElement(element, parserContext).parse(element, parserContext);\n\t}\n\n\t/**\n\t * Locates the {@link BeanDefinitionParser} from the register implementations using\n\t * the local name of the supplied {@link Element}.\n\t */\n\tprivate BeanDefinitionParser findParserForElement(Element element, ParserContext parserContext) {\n\t\tString localName = parserContext.getDelegate().getLocalName(element);\n\t\tBeanDefinitionParser parser = this.parsers.get(localName);\n\t\tif (parser == null) {\n\t\t\tparserContext.getReaderContext().fatal(\n\t\t\t\t\t\"Cannot locate BeanDefinitionParser for element [\" + localName + \"]\", element);\n\t\t}\n\t\treturn parser;\n\t}\n\n```\n就是从在`init()`方法中注册的`Parser`,根据对应的标签前缀，获取到parser，对xml元素进行解析。\n\n\n## 生效过程\n\n生效过程是在`BeanFactoryPostProcessor`被调用的过程中生效的, 继承关系\n\n{%  asset_img   post-processors.jpg  %}\n\n\n\n\n可以看到里面有两个熟悉的类——`PropertySourcesPlaceholderConfigurer`和`PropertyPlaceholderConfigurer`，正是`PropertyPlaceholderBeanDefinitionParser.getBeanClass`返回的两种类型, 也就是说他们两个是`BeanFactoryPostProcessor`.\n\n\n### PropertySourcesPlaceholderConfigurer\n```java\n/**\n\t * {@inheritDoc}\n\t * <p>Processing occurs by replacing ${...} placeholders in bean definitions by resolving each\n\t * against this configurer's set of {@link PropertySources}, which includes:\n\t * <ul>\n\t * <li>all {@linkplain org.springframework.core.env.ConfigurableEnvironment#getPropertySources\n\t * environment property sources}, if an {@code Environment} {@linkplain #setEnvironment is present}\n\t * <li>{@linkplain #mergeProperties merged local properties}, if {@linkplain #setLocation any}\n\t * {@linkplain #setLocations have} {@linkplain #setProperties been}\n\t * {@linkplain #setPropertiesArray specified}\n\t * <li>any property sources set by calling {@link #setPropertySources}\n\t * </ul>\n\t * <p>If {@link #setPropertySources} is called, <strong>environment and local properties will be\n\t * ignored</strong>. This method is designed to give the user fine-grained control over property\n\t * sources, and once set, the configurer makes no assumptions about adding additional sources.\n\t */\n\t@Override\n\tpublic void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {\n\t\tif (this.propertySources == null) {\n\t\t\tthis.propertySources = new MutablePropertySources();\n\t\t\tif (this.environment != null) {\n\t\t\t\tthis.propertySources.addLast(\n\t\t\t\t\tnew PropertySource<Environment>(ENVIRONMENT_PROPERTIES_PROPERTY_SOURCE_NAME, this.environment) {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic String getProperty(String key) {\n\t\t\t\t\t\t\treturn this.source.getProperty(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tPropertySource<?> localPropertySource =\n\t\t\t\t\t\tnew PropertiesPropertySource(LOCAL_PROPERTIES_PROPERTY_SOURCE_NAME, mergeProperties());\n\t\t\t\tif (this.localOverride) {\n\t\t\t\t\tthis.propertySources.addFirst(localPropertySource);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.propertySources.addLast(localPropertySource);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (IOException ex) {\n\t\t\t\tthrow new BeanInitializationException(\"Could not load properties\", ex);\n\t\t\t}\n\t\t}\n\n\t\tprocessProperties(beanFactory, new PropertySourcesPropertyResolver(this.propertySources));\n\t\tthis.appliedPropertySources = this.propertySources;\n\t}\n\n```\n\n注意上述的`localOverride`变量，它决定了是否用本地的替换系统的，主要是用加载的顺序呢控制的\n\n```java\n/**\n* <p>Any local properties (e.g. those added via {@link #setProperties}, {@link #setLocations}\n* et al.) are added as a {@code PropertySource}. Search precedence of local properties is\n* based on the value of the {@link #setLocalOverride localOverride} property, which is by\n* default {@code false} meaning that local properties are to be searched last, after all\n* environment property sources.\n*/\n```\n获取到所有的属性列表后，处理属性就交给了`processProperties`这个方法.\n\n```java\n/**\n\t * Visit each bean definition in the given bean factory and attempt to replace ${...} property\n\t * placeholders with values from the given properties.\n\t */\n\tprotected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess,\n\t\t\tfinal ConfigurablePropertyResolver propertyResolver) throws BeansException {\n\n\t\tpropertyResolver.setPlaceholderPrefix(this.placeholderPrefix);\n\t\tpropertyResolver.setPlaceholderSuffix(this.placeholderSuffix);\n\t\tpropertyResolver.setValueSeparator(this.valueSeparator);\n\n\t\tStringValueResolver valueResolver = new StringValueResolver() {\n\t\t\t@Override\n\t\t\tpublic String resolveStringValue(String strVal) {\n\t\t\t\tString resolved = ignoreUnresolvablePlaceholders ?\n\t\t\t\t\t\tpropertyResolver.resolvePlaceholders(strVal) :\n\t\t\t\t\t\tpropertyResolver.resolveRequiredPlaceholders(strVal);\n\t\t\t\treturn (resolved.equals(nullValue) ? null : resolved);\n\t\t\t}\n\t\t};\n\n\t\tdoProcessProperties(beanFactoryToProcess, valueResolver);\n\t}\n```\n\n先设置propertyResolver的prefix（默认是${}）和suffix(默认是})，以及默认值得分隔符(默认是:).\n\n然后创建了一个StringValueResolver, 这里根据`ignoreUnresolvablePlaceholders`的值来进行不同的解析，\n\n这个值默认是false, 但是可以在标签中配置。\n\n```xml\n<xsd:attribute name=\"ignore-unresolvable\" type=\"xsd:boolean\" default=\"false\">\n\t\t\t<xsd:annotation>\n\t\t\t\t<xsd:documentation><![CDATA[\n\tSpecifies if failure to find the property value to replace a key should be ignored.\n\tDefault is \"false\", meaning that this placeholder configurer will raise an exception\n\tif it cannot resolve a key. Set to \"true\" to allow the configurer to pass on the key\n\tto any others in the context that have not yet visited the key in question.\n\t\t\t\t]]></xsd:documentation>\n\t\t\t</xsd:annotation>\n\t\t</xsd:attribute>\n```\n\n`false`就以为者遇到无法解析的值就会直接抛出异常\n\n接下来看看`doProcessProperties`\n\n```java\nprotected void doProcessProperties(ConfigurableListableBeanFactory beanFactoryToProcess,\n\t\tStringValueResolver valueResolver) {\n\n\tBeanDefinitionVisitor visitor = new BeanDefinitionVisitor(valueResolver);\n\n\tString[] beanNames = beanFactoryToProcess.getBeanDefinitionNames();\n\tfor (String curName : beanNames) {\n\t\t// Check that we're not parsing our own bean definition,\n\t\t// to avoid failing on unresolvable placeholders in properties file locations.\n\t\tif (!(curName.equals(this.beanName) && beanFactoryToProcess.equals(this.beanFactory))) {\n\t\t\tBeanDefinition bd = beanFactoryToProcess.getBeanDefinition(curName);\n\t\t\ttry {\n\t\t\t\tvisitor.visitBeanDefinition(bd);\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tthrow new BeanDefinitionStoreException(bd.getResourceDescription(), curName, ex.getMessage(), ex);\n\t\t\t}\n\t\t}\n\t}\n\n\t// New in Spring 2.5: resolve placeholders in alias target names and aliases as well.\n\tbeanFactoryToProcess.resolveAliases(valueResolver);\n\n\t// New in Spring 3.0: resolve placeholders in embedded values such as annotation attributes.\n\tbeanFactoryToProcess.addEmbeddedValueResolver(valueResolver);\n}\n```\n这里采用的是visitor模式，查看`BeanDefinitionVisitor#visitBeanDefinition`\n\n```java\n/**\n\t * Traverse the given BeanDefinition object and the MutablePropertyValues\n\t * and ConstructorArgumentValues contained in them.\n\t * @param beanDefinition the BeanDefinition object to traverse\n\t * @see #resolveStringValue(String)\n\t */\n\tpublic void visitBeanDefinition(BeanDefinition beanDefinition) {\n\t\tvisitParentName(beanDefinition);\n\t\tvisitBeanClassName(beanDefinition);\n\t\tvisitFactoryBeanName(beanDefinition);\n\t\tvisitFactoryMethodName(beanDefinition);\n\t\tvisitScope(beanDefinition);\n\t\tvisitPropertyValues(beanDefinition.getPropertyValues());\n\t\tConstructorArgumentValues cas = beanDefinition.getConstructorArgumentValues();\n\t\tvisitIndexedArgumentValues(cas.getIndexedArgumentValues());\n\t\tvisitGenericArgumentValues(cas.getGenericArgumentValues());\n\t}\n```\n以其中的`visitParentName`为例：\n```java\nprotected void visitParentName(BeanDefinition beanDefinition) {\n\tString parentName = beanDefinition.getParentName();\n\tif (parentName != null) {\n\t\tString resolvedName = resolveStringValue(parentName);\n\t\tif (!parentName.equals(resolvedName)) {\n\t\t\tbeanDefinition.setParentName(resolvedName);\n\t\t}\n\t}\n}\n\n```\n就是先获取`parentName`，然后替换相应的属性之后的`resolvedName`,如果和原来的不一样就设置`resolvedName`\n\n为新的parentName\n\n```java\n/**\n * Resolve the given String value, for example parsing placeholders.\n * @param strVal the original String value\n * @return the resolved String value\n */\nprotected String resolveStringValue(String strVal) {\n\tif (this.valueResolver == null) {\n\t\tthrow new IllegalStateException(\"No StringValueResolver specified - pass a resolver \" +\n\t\t\t\t\"object into the constructor or override the 'resolveStringValue' method\");\n\t}\n\tString resolvedValue = this.valueResolver.resolveStringValue(strVal);\n\t// Return original String if not modified.\n\treturn (strVal.equals(resolvedValue) ? strVal : resolvedValue);\n}\n```\n\n顺藤摸瓜,看看`valueResolver`,就是之前的`StringValueResolver`\n\n这是一个接口只有一个方法\n\n```java\npublic interface StringValueResolver {\n\n\t/**\n\t * Resolve the given String value, for example parsing placeholders.\n\t * @param strVal the original String value\n\t * @return the resolved String value\n\t */\n\tString resolveStringValue(String strVal);\n\n}\n```\n\n之前传入的其实就是对应`ConfigurablePropertyResolver`的两个方法, 之前传入的是它的子类\n\n`PropertySourcesPropertyResolver`\n\n```java\n@Override\n\tpublic String resolvePlaceholders(String text) {\n\t\tif (this.nonStrictHelper == null) {\n\t\t\tthis.nonStrictHelper = createPlaceholderHelper(true);\n\t\t}\n\t\treturn doResolvePlaceholders(text, this.nonStrictHelper);\n\t}\n\n\t@Override\n\tpublic String resolveRequiredPlaceholders(String text) throws IllegalArgumentException {\n\t\tif (this.strictHelper == null) {\n\t\t\tthis.strictHelper = createPlaceholderHelper(false);\n\t\t}\n\t\treturn doResolvePlaceholders(text, this.strictHelper);\n\t}\n```\n\n调用的是内部方法:\n\n```java\nprivate String doResolvePlaceholders(String text, PropertyPlaceholderHelper helper) {\n\treturn helper.replacePlaceholders(text, new PropertyPlaceholderHelper.PlaceholderResolver() {\n\t\t@Override\n\t\tpublic String resolvePlaceholder(String placeholderName) {\n\t\t\treturn getPropertyAsRawString(placeholderName);\n\t\t}\n\t});\n}\n\n```\n\n最终调用功能的是`PropertyPlaceholderHelper`的replacePlaceholders方法，\n\n这个helper在构造是通过 `createPlaceholderHelper`方法构建的，他接受一个bool类型的参数\n\n```java\nprivate PropertyPlaceholderHelper createPlaceholderHelper(boolean ignoreUnresolvablePlaceholders) {\n\treturn new PropertyPlaceholderHelper(this.placeholderPrefix, this.placeholderSuffix,\n\t\t\tthis.valueSeparator, ignoreUnresolvablePlaceholders);\n}\n```\n\n这个bool值就是表示是否要ignore掉不能解析的属性。\n\n```java\n/**\n\t * Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix.\n\t * @param placeholderPrefix the prefix that denotes the start of a placeholder\n\t * @param placeholderSuffix the suffix that denotes the end of a placeholder\n\t * @param valueSeparator the separating character between the placeholder variable\n\t * and the associated default value, if any\n\t * @param ignoreUnresolvablePlaceholders indicates whether unresolvable placeholders should\n\t * be ignored ({@code true}) or cause an exception ({@code false})\n\t */\n```\n接着追\n\n```java\n/**\n * Replaces all placeholders of format {@code ${name}} with the value returned\n * from the supplied {@link PlaceholderResolver}.\n * @param value the value containing the placeholders to be replaced\n * @param placeholderResolver the {@code PlaceholderResolver} to use for replacement\n * @return the supplied value with placeholders replaced inline\n */\npublic String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {\n\tAssert.notNull(value, \"'value' must not be null\");\n\treturn parseStringValue(value, placeholderResolver, new HashSet<String>());\n}\n\nprotected String parseStringValue(\n\t\t\tString strVal, PlaceholderResolver placeholderResolver, Set<String> visitedPlaceholders) {\n\n\t\tStringBuilder result = new StringBuilder(strVal);\n\n\t\tint startIndex = strVal.indexOf(this.placeholderPrefix);\n\t\twhile (startIndex != -1) {\n\t\t\tint endIndex = findPlaceholderEndIndex(result, startIndex);\n\t\t\tif (endIndex != -1) {\n\t\t\t\tString placeholder = result.substring(startIndex + this.placeholderPrefix.length(), endIndex);\n\t\t\t\tString originalPlaceholder = placeholder;\n\t\t\t\tif (!visitedPlaceholders.add(originalPlaceholder)) {\n\t\t\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\t\t\"Circular placeholder reference '\" + originalPlaceholder + \"' in property definitions\");\n\t\t\t\t}\n\t\t\t\t// Recursive invocation, parsing placeholders contained in the placeholder key.\n\t\t\t\tplaceholder = parseStringValue(placeholder, placeholderResolver, visitedPlaceholders);\n\t\t\t\t// Now obtain the value for the fully resolved key...\n\t\t\t\tString propVal = placeholderResolver.resolvePlaceholder(placeholder);\n\t\t\t\tif (propVal == null && this.valueSeparator != null) {\n\t\t\t\t\tint separatorIndex = placeholder.indexOf(this.valueSeparator);\n\t\t\t\t\tif (separatorIndex != -1) {\n\t\t\t\t\t\tString actualPlaceholder = placeholder.substring(0, separatorIndex);\n\t\t\t\t\t\tString defaultValue = placeholder.substring(separatorIndex + this.valueSeparator.length());\n\t\t\t\t\t\tpropVal = placeholderResolver.resolvePlaceholder(actualPlaceholder);\n\t\t\t\t\t\tif (propVal == null) {\n\t\t\t\t\t\t\tpropVal = defaultValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (propVal != null) {\n\t\t\t\t\t// Recursive invocation, parsing placeholders contained in the\n\t\t\t\t\t// previously resolved placeholder value.\n\t\t\t\t\tpropVal = parseStringValue(propVal, placeholderResolver, visitedPlaceholders);\n\t\t\t\t\tresult.replace(startIndex, endIndex + this.placeholderSuffix.length(), propVal);\n\t\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t\t\tlogger.trace(\"Resolved placeholder '\" + placeholder + \"'\");\n\t\t\t\t\t}\n\t\t\t\t\tstartIndex = result.indexOf(this.placeholderPrefix, startIndex + propVal.length());\n\t\t\t\t}\n\t\t\t\telse if (this.ignoreUnresolvablePlaceholders) {\n\t\t\t\t\t// Proceed with unprocessed value.\n\t\t\t\t\tstartIndex = result.indexOf(this.placeholderPrefix, endIndex + this.placeholderSuffix.length());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow new IllegalArgumentException(\"Could not resolve placeholder '\" +\n\t\t\t\t\t\t\tplaceholder + \"'\" + \" in string value \\\"\" + strVal + \"\\\"\");\n\t\t\t\t}\n\t\t\t\tvisitedPlaceholders.remove(originalPlaceholder);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstartIndex = -1;\n\t\t\t}\n\t\t}\n\n\t\treturn result.toString();\n\t}\n\n```\n\n实际解析的代码都在这里：\n\n1. 取出placeHolder的名称.\n2. 判断有没有循环引用的情况.\n3. 递归替换，获取对应的值.\n4. 如果值为空，解析默认值.\n\n\n### PropertyPlaceholderConfigurer\n\n应该和上面的类似，抽时间补。\n","slug":"property-placeholder","published":1,"updated":"2017-02-02T09:09:55.412Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmg74001rw4py2ie0bbtk"},{"title":"Postgre数据库简介","toc":true,"date":"2016-09-27T05:15:07.000Z","_content":"\n\n![](https://www.postgresql.org/media/img/layout/hdr_left.png   )\n\n\n\n\n## 简介\n\n>PostgreSQL是自由的对象-关系型数据库服务器（数据库管理系统）\n\n> <https://zh.wikipedia.org/wiki/PostgreSQL>\n\n\n发展流程:\n\n{%  asset_img   history.jpg  %}\n\n\n\n\n> PostgreSQL 的前身是 BSD 的始于 1977 年的 Ingres 项目，82年，项目领导人Michael Stonebraker 将其商业化。85年正式更名为Postgres。\n\n> 92年两名伯克利的研究生在做研究生课题的时候，用SQL92替换了原有的Postquel作为查询语言，并将其更名为Postgres95。\n\n> 96年，一群黑客们接手了Postgres95，开始修改及稳定它的代码，并与同年8月发布了第一个开源版本，将其更名为PostgreSQL。\n\nPG支持的数据类型非常丰富，他支持任意精度的数值类型，无限长度的文本类型，同时具有一些nosql的特性，也可以存储hash表（hstore），ltree树状结构，支持jsonb、xml、array的存储和操作。同时PG提供了对IP地址和地理信息的良好支持。\n\nPG支持的语言非常多，各种脚本语言，例如：Lua、Perl、Python、Ruby等，也支持各种编译语言，如c、c++和JAVA等，对统计语言R也有良好的支持。\n\n架构图：\n\n{%  asset_img   arch.jpg  %}\n\n\n\n> 图片来自\n> <https://wiki.postgresql.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E6%AF%94>\n\nPostgreSQL采用的是C/S结构，一个客户端对应一个服务器端的守护进程(开销会略大)\n\n## 安装\n\n参考官网：<https://www.postgresql.org/download/>\n\n也可以参考阮一峰老师的这篇 [PostgreSQL新手入门](http://www.ruanyifeng.com/blog/2013/12/getting_started_with_postgresql.html)\n\n## 使用\n\n[PostgreSQL 9.5.3 中文在线手册](http://www.postgres.cn/docs/9.5/)\n\n[离线中文手册](https://github.com/postgres-cn/pgdoc-cn/releases)\n\n### psql --  PostgreSQL的交互式终端的使用\n\n详细请参见 [psql](http://www.postgres.cn/docs/9.5/app-psql.html)\n\n登录到数据库，类似mysql\n``` shell\npsql -U dbuser -d exampledb -h 127.0.0.1 -p 5432\n```\n>-U指定用户，-d指定数据库，-h指定服务器，-p指定端口。\n\n|命令 |作用|\n|-----|----|\n| \\h|查看SQL命令的解释，比如\\h select。|\n| \\?|查看psql命令列表。|\n| \\l|列出所有数据库。|\n| \\c [database_name]：| 连接其他数据库。|\n| \\d| 列出当前数据库的所有表格。|\n| \\d [table_name]：| 列出某一张表格的结构。|\n|\\di               | 查看索引|\n| \\du| 列出所有用户。|\n| \\e| 打开文本编辑器。|\n|\\\\! pwd|显示当前工作目录|\n|\\q |退出交互shell|\n| \\conninfo| 列出当前数据库和连接的信息。|\n\n``` shell\n\nexampledb=> \\d\n             关联列表             \n架构模式 |   名称   |  类型  | 拥有者\n----------+----------+--------+--------\npublic   | user_tbl | 数据表 | dbuser\n(1 行记录)\n\nexampledb=> \\l\n                                                      数据库列表\n 名称    |  拥有者  | 字元编码 |            校对规则            |             Ctype              |       存取权限\n-----------+----------+----------+--------------------------------+--------------------------------+-----------------------\nexampledb | dbuser   | UTF8     | Chinese (Simplified)_China.936 | Chinese (Simplified)_China.936 | =Tc/dbuser           +\n         |          |          |                                |                                | dbuser=CTc/dbuser\npostgres  | postgres | UTF8     | Chinese (Simplified)_China.936 | Chinese (Simplified)_China.936 |\ntemplate0 | postgres | UTF8     | Chinese (Simplified)_China.936 | Chinese (Simplified)_China.936 | =c/postgres          +\n         |          |          |                                |                                | postgres=CTc/postgres\ntemplate1 | postgres | UTF8     | Chinese (Simplified)_China.936 | Chinese (Simplified)_China.936 | =c/postgres          +\n         |          |          |                                |                                | postgres=CTc/postgres\n(4 行记录)\n\nexampledb=> \\du\n                           角色列表\n角色名称 |                    属性                    | 成员属于\n----------+--------------------------------------------+----------\ndbuser   |                                            | {}\npostgres | 超级用户, 建立角色, 建立 DB, 复制, 绕过RLS | {}\n\n\nexampledb=> \\dt\n             关联列表\n架构模式 |   名称   |  类型  | 拥有者\n----------+----------+--------+--------\npublic   | user_tbl | 数据表 | dbuser\n(1 行记录)\n\nexampledb=> \\d user_tbl;\n         数据表 \"public.user_tbl\"\n  栏位     |         类型          | 修饰词\n-------------+-----------------------+--------\nname        | character varying(20) |\nsignup_date | date                  |\n\n```\n## 参考文章\n\n1. [Uber的底层存储从Postgres换成MySQL之后](http://www.infoq.com/cn/articles/underlying-storage-of-uber-change-from-mysql-to-postgres)\n\n2. [PostgreSQL数据库的特点](http://database.51cto.com/art/200511/10875.htm)\n\n3. [PostgreSQL新手入门_阮一峰](http://www.ruanyifeng.com/blog/2013/12/getting_started_with_postgresql.html)\n\n4. [PostgreSQL简介及发展历程](http://book.51cto.com/art/201201/313178.htm)\n\n5. [数据库对比_wiki](https://wiki.postgresql.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E6%AF%94)\n\n6. [postgres-cn/pgdoc-cn](https://github.com/postgres-cn/pgdoc-cn)\n\n7. [postgresql 查看数据库,表,索引,表空间以及大小](http://blog.51yip.com/pgsql/1525.html)\n","source":"_posts/postgre.md","raw":"---\ntitle: Postgre数据库简介\ntags: postgresql\ncategory: base\ntoc: true\ndate: 2016-09-27 13:15:07\n---\n\n\n![](https://www.postgresql.org/media/img/layout/hdr_left.png   )\n\n\n\n\n## 简介\n\n>PostgreSQL是自由的对象-关系型数据库服务器（数据库管理系统）\n\n> <https://zh.wikipedia.org/wiki/PostgreSQL>\n\n\n发展流程:\n\n{%  asset_img   history.jpg  %}\n\n\n\n\n> PostgreSQL 的前身是 BSD 的始于 1977 年的 Ingres 项目，82年，项目领导人Michael Stonebraker 将其商业化。85年正式更名为Postgres。\n\n> 92年两名伯克利的研究生在做研究生课题的时候，用SQL92替换了原有的Postquel作为查询语言，并将其更名为Postgres95。\n\n> 96年，一群黑客们接手了Postgres95，开始修改及稳定它的代码，并与同年8月发布了第一个开源版本，将其更名为PostgreSQL。\n\nPG支持的数据类型非常丰富，他支持任意精度的数值类型，无限长度的文本类型，同时具有一些nosql的特性，也可以存储hash表（hstore），ltree树状结构，支持jsonb、xml、array的存储和操作。同时PG提供了对IP地址和地理信息的良好支持。\n\nPG支持的语言非常多，各种脚本语言，例如：Lua、Perl、Python、Ruby等，也支持各种编译语言，如c、c++和JAVA等，对统计语言R也有良好的支持。\n\n架构图：\n\n{%  asset_img   arch.jpg  %}\n\n\n\n> 图片来自\n> <https://wiki.postgresql.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E6%AF%94>\n\nPostgreSQL采用的是C/S结构，一个客户端对应一个服务器端的守护进程(开销会略大)\n\n## 安装\n\n参考官网：<https://www.postgresql.org/download/>\n\n也可以参考阮一峰老师的这篇 [PostgreSQL新手入门](http://www.ruanyifeng.com/blog/2013/12/getting_started_with_postgresql.html)\n\n## 使用\n\n[PostgreSQL 9.5.3 中文在线手册](http://www.postgres.cn/docs/9.5/)\n\n[离线中文手册](https://github.com/postgres-cn/pgdoc-cn/releases)\n\n### psql --  PostgreSQL的交互式终端的使用\n\n详细请参见 [psql](http://www.postgres.cn/docs/9.5/app-psql.html)\n\n登录到数据库，类似mysql\n``` shell\npsql -U dbuser -d exampledb -h 127.0.0.1 -p 5432\n```\n>-U指定用户，-d指定数据库，-h指定服务器，-p指定端口。\n\n|命令 |作用|\n|-----|----|\n| \\h|查看SQL命令的解释，比如\\h select。|\n| \\?|查看psql命令列表。|\n| \\l|列出所有数据库。|\n| \\c [database_name]：| 连接其他数据库。|\n| \\d| 列出当前数据库的所有表格。|\n| \\d [table_name]：| 列出某一张表格的结构。|\n|\\di               | 查看索引|\n| \\du| 列出所有用户。|\n| \\e| 打开文本编辑器。|\n|\\\\! pwd|显示当前工作目录|\n|\\q |退出交互shell|\n| \\conninfo| 列出当前数据库和连接的信息。|\n\n``` shell\n\nexampledb=> \\d\n             关联列表             \n架构模式 |   名称   |  类型  | 拥有者\n----------+----------+--------+--------\npublic   | user_tbl | 数据表 | dbuser\n(1 行记录)\n\nexampledb=> \\l\n                                                      数据库列表\n 名称    |  拥有者  | 字元编码 |            校对规则            |             Ctype              |       存取权限\n-----------+----------+----------+--------------------------------+--------------------------------+-----------------------\nexampledb | dbuser   | UTF8     | Chinese (Simplified)_China.936 | Chinese (Simplified)_China.936 | =Tc/dbuser           +\n         |          |          |                                |                                | dbuser=CTc/dbuser\npostgres  | postgres | UTF8     | Chinese (Simplified)_China.936 | Chinese (Simplified)_China.936 |\ntemplate0 | postgres | UTF8     | Chinese (Simplified)_China.936 | Chinese (Simplified)_China.936 | =c/postgres          +\n         |          |          |                                |                                | postgres=CTc/postgres\ntemplate1 | postgres | UTF8     | Chinese (Simplified)_China.936 | Chinese (Simplified)_China.936 | =c/postgres          +\n         |          |          |                                |                                | postgres=CTc/postgres\n(4 行记录)\n\nexampledb=> \\du\n                           角色列表\n角色名称 |                    属性                    | 成员属于\n----------+--------------------------------------------+----------\ndbuser   |                                            | {}\npostgres | 超级用户, 建立角色, 建立 DB, 复制, 绕过RLS | {}\n\n\nexampledb=> \\dt\n             关联列表\n架构模式 |   名称   |  类型  | 拥有者\n----------+----------+--------+--------\npublic   | user_tbl | 数据表 | dbuser\n(1 行记录)\n\nexampledb=> \\d user_tbl;\n         数据表 \"public.user_tbl\"\n  栏位     |         类型          | 修饰词\n-------------+-----------------------+--------\nname        | character varying(20) |\nsignup_date | date                  |\n\n```\n## 参考文章\n\n1. [Uber的底层存储从Postgres换成MySQL之后](http://www.infoq.com/cn/articles/underlying-storage-of-uber-change-from-mysql-to-postgres)\n\n2. [PostgreSQL数据库的特点](http://database.51cto.com/art/200511/10875.htm)\n\n3. [PostgreSQL新手入门_阮一峰](http://www.ruanyifeng.com/blog/2013/12/getting_started_with_postgresql.html)\n\n4. [PostgreSQL简介及发展历程](http://book.51cto.com/art/201201/313178.htm)\n\n5. [数据库对比_wiki](https://wiki.postgresql.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E6%AF%94)\n\n6. [postgres-cn/pgdoc-cn](https://github.com/postgres-cn/pgdoc-cn)\n\n7. [postgresql 查看数据库,表,索引,表空间以及大小](http://blog.51yip.com/pgsql/1525.html)\n","slug":"postgre","published":1,"updated":"2017-02-02T09:09:56.009Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmg7o001vw4pywknkuskq"},{"title":"plantuml——用编码的方式画UML","toc":true,"date":"2016-10-15T16:56:07.000Z","_content":"## 是什么？\n\n>PlantUML is a component that allows to quickly write :\n\n> * Sequence diagram,\n\n> * Usecase diagram,\n\n> * Class diagram,\n\n> * Activity diagram, (here is the new syntax),\n\n> * Component diagram,\n\n> * State diagram,\n\n> * Deployment diagram,\n\n> * Object diagram.\n\n> * wireframe graphical interface\n\n> Diagrams are defined using a simple and intuitive  language. ( see PlantUML Language Reference Guide).\n\n## 例子\n\n```\n{% plantuml %}\nskinparam backgroundColor #EEEBDC\nskinparam handwritten true\n\nskinparam sequence {\n\tArrowColor DeepSkyBlue\n\tActorBorderColor DeepSkyBlue\n\tLifeLineBorderColor blue\n\tLifeLineBackgroundColor #A9DCDF\n\n\tParticipantBorderColor DeepSkyBlue\n\tParticipantBackgroundColor DodgerBlue\n\tParticipantFontName Impact\n\tParticipantFontSize 17\n\tParticipantFontColor #A9DCDF\n\n\tActorBackgroundColor aqua\n\tActorFontColor DeepSkyBlue\n\tActorFontSize 17\n\tActorFontName Aapex\n}\n\nactor User\nparticipant \"First Class\" as A\nparticipant \"Second Class\" as B\nparticipant \"Last Class\" as C\n\nUser -> A: DoWork\nactivate A\n\nA -> B: Create Request\nactivate B\n\nB -> C: DoWork\nactivate C\nC --> B: WorkDone\ndestroy C\n\nB --> A: Request Created\ndeactivate B\n\nA --> User: Done\ndeactivate A\n\n{% endplantuml %}\n```\n\n上述代码的效果如下：\n\n{% plantuml %}\n\nskinparam backgroundColor #EEEBDC\nskinparam handwritten true\n\nskinparam sequence {\n\tArrowColor DeepSkyBlue\n\tActorBorderColor DeepSkyBlue\n\tLifeLineBorderColor blue\n\tLifeLineBackgroundColor #A9DCDF\n\n\tParticipantBorderColor DeepSkyBlue\n\tParticipantBackgroundColor DodgerBlue\n\tParticipantFontName Impact\n\tParticipantFontSize 17\n\tParticipantFontColor #A9DCDF\n\n\tActorBackgroundColor aqua\n\tActorFontColor DeepSkyBlue\n\tActorFontSize 17\n\tActorFontName Aapex\n}\n\nactor User\nparticipant \"First Class\" as A\nparticipant \"Second Class\" as B\nparticipant \"Last Class\" as C\n\nUser -> A: DoWork\nactivate A\n\nA -> B: Create Request\nactivate B\n\nB -> C: DoWork\nactivate C\nC --> B: WorkDone\ndestroy C\n\nB --> A: Request Created\ndeactivate B\n\nA --> User: Done\ndeactivate A\n\n{% endplantuml %}\n\n## 平台\n\n可以在chromeapp中找到： [链接](https://chrome.google.com/webstore/detail/uml-diagram-editor/hoepdgfgogmeofkgkpapbdpdjkplcode?utm_source=chrome-ntp-icon), 开箱即用\n\n另可以和idea和eclipse、atom等编辑器集成，hexo中也有相应的插件，具体可看下面的教程\n\n## 参考\n\n1. [(记录)plantuml安装配置](http://skyao.github.io/2014/12/05/plantuml-installation/index.html)\n\n2. [Hexo博客中的绘图](http://keyun.ml/2016/07/25/2016-07-25-hexo-uml.html)\n\n3. [官网](http://plantuml.com/)\n","source":"_posts/plantuml.md","raw":"---\ntitle: plantuml——用编码的方式画UML\ntags: uml\ncategory: hexo\ntoc: true\ndate: 2016-10-16 00:56:07\n---\n## 是什么？\n\n>PlantUML is a component that allows to quickly write :\n\n> * Sequence diagram,\n\n> * Usecase diagram,\n\n> * Class diagram,\n\n> * Activity diagram, (here is the new syntax),\n\n> * Component diagram,\n\n> * State diagram,\n\n> * Deployment diagram,\n\n> * Object diagram.\n\n> * wireframe graphical interface\n\n> Diagrams are defined using a simple and intuitive  language. ( see PlantUML Language Reference Guide).\n\n## 例子\n\n```\n{% plantuml %}\nskinparam backgroundColor #EEEBDC\nskinparam handwritten true\n\nskinparam sequence {\n\tArrowColor DeepSkyBlue\n\tActorBorderColor DeepSkyBlue\n\tLifeLineBorderColor blue\n\tLifeLineBackgroundColor #A9DCDF\n\n\tParticipantBorderColor DeepSkyBlue\n\tParticipantBackgroundColor DodgerBlue\n\tParticipantFontName Impact\n\tParticipantFontSize 17\n\tParticipantFontColor #A9DCDF\n\n\tActorBackgroundColor aqua\n\tActorFontColor DeepSkyBlue\n\tActorFontSize 17\n\tActorFontName Aapex\n}\n\nactor User\nparticipant \"First Class\" as A\nparticipant \"Second Class\" as B\nparticipant \"Last Class\" as C\n\nUser -> A: DoWork\nactivate A\n\nA -> B: Create Request\nactivate B\n\nB -> C: DoWork\nactivate C\nC --> B: WorkDone\ndestroy C\n\nB --> A: Request Created\ndeactivate B\n\nA --> User: Done\ndeactivate A\n\n{% endplantuml %}\n```\n\n上述代码的效果如下：\n\n{% plantuml %}\n\nskinparam backgroundColor #EEEBDC\nskinparam handwritten true\n\nskinparam sequence {\n\tArrowColor DeepSkyBlue\n\tActorBorderColor DeepSkyBlue\n\tLifeLineBorderColor blue\n\tLifeLineBackgroundColor #A9DCDF\n\n\tParticipantBorderColor DeepSkyBlue\n\tParticipantBackgroundColor DodgerBlue\n\tParticipantFontName Impact\n\tParticipantFontSize 17\n\tParticipantFontColor #A9DCDF\n\n\tActorBackgroundColor aqua\n\tActorFontColor DeepSkyBlue\n\tActorFontSize 17\n\tActorFontName Aapex\n}\n\nactor User\nparticipant \"First Class\" as A\nparticipant \"Second Class\" as B\nparticipant \"Last Class\" as C\n\nUser -> A: DoWork\nactivate A\n\nA -> B: Create Request\nactivate B\n\nB -> C: DoWork\nactivate C\nC --> B: WorkDone\ndestroy C\n\nB --> A: Request Created\ndeactivate B\n\nA --> User: Done\ndeactivate A\n\n{% endplantuml %}\n\n## 平台\n\n可以在chromeapp中找到： [链接](https://chrome.google.com/webstore/detail/uml-diagram-editor/hoepdgfgogmeofkgkpapbdpdjkplcode?utm_source=chrome-ntp-icon), 开箱即用\n\n另可以和idea和eclipse、atom等编辑器集成，hexo中也有相应的插件，具体可看下面的教程\n\n## 参考\n\n1. [(记录)plantuml安装配置](http://skyao.github.io/2014/12/05/plantuml-installation/index.html)\n\n2. [Hexo博客中的绘图](http://keyun.ml/2016/07/25/2016-07-25-hexo-uml.html)\n\n3. [官网](http://plantuml.com/)\n","slug":"plantuml","published":1,"updated":"2017-02-02T09:09:56.547Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmg87001zw4pyd4r44ru4"},{"title":"pip使用","toc":true,"date":"2017-01-08T10:30:03.000Z","_content":"\n\n## 使用\n\n### 安装\n\n下载安装文件, [](https://bootstrap.pypa.io/get-pip.py)\n\n```bash\npython get-pip.py\n```\n\n### 从列表文件安装\n\n导出文件列表(一般配合virtualenv适应)\n\n```bash\n$ pip freeze                               \nbackports-abc==0.4                         \nbackports.shutil-get-terminal-size==1.0.0  \nbackports.ssl-match-hostname==3.5.0.1      \nbeautifulsoup4==4.5.1                      \nbs4==0.0.1                                 \n...\n```\n可以重定向到一个文件中，一般叫做requirements.txt\n\n然后安装的时候，可以使用下面的命令\n\n```bash\npip install -r requirements.txt\n```\n\n\n### 安装VCS上的软件\n\n> pip currently supports cloning over git, git+http, git+https, git+ssh, git+git and git+file:\n\n```\n[-e] git://git.myproject.org/MyProject#egg=MyProject\n[-e] git+http://git.myproject.org/MyProject#egg=MyProject\n[-e] git+https://git.myproject.org/MyProject#egg=MyProject\n[-e] git+ssh://git.myproject.org/MyProject#egg=MyProject\n[-e] git+git://git.myproject.org/MyProject#egg=MyProject\n[-e] git+file://git.myproject.org/MyProject#egg=MyProject\n-e git+git@git.myproject.org:MyProject#egg=MyProject\n```\n\n## 参考\n\n1. [pip install — pip 9.0.1 documentation](https://pip.pypa.io/en/stable/reference/pip_install/#vcs-support)\n\n2. [Django | requirement.txt 生成 - 黑月亮 - SegmentFault](https://segmentfault.com/a/1190000003050954)","source":"_posts/pip.md","raw":"---\ntitle: pip使用\ntags: pip\ncategory: python\ntoc: true\ndate: 2017-01-08 18:30:03\n---\n\n\n## 使用\n\n### 安装\n\n下载安装文件, [](https://bootstrap.pypa.io/get-pip.py)\n\n```bash\npython get-pip.py\n```\n\n### 从列表文件安装\n\n导出文件列表(一般配合virtualenv适应)\n\n```bash\n$ pip freeze                               \nbackports-abc==0.4                         \nbackports.shutil-get-terminal-size==1.0.0  \nbackports.ssl-match-hostname==3.5.0.1      \nbeautifulsoup4==4.5.1                      \nbs4==0.0.1                                 \n...\n```\n可以重定向到一个文件中，一般叫做requirements.txt\n\n然后安装的时候，可以使用下面的命令\n\n```bash\npip install -r requirements.txt\n```\n\n\n### 安装VCS上的软件\n\n> pip currently supports cloning over git, git+http, git+https, git+ssh, git+git and git+file:\n\n```\n[-e] git://git.myproject.org/MyProject#egg=MyProject\n[-e] git+http://git.myproject.org/MyProject#egg=MyProject\n[-e] git+https://git.myproject.org/MyProject#egg=MyProject\n[-e] git+ssh://git.myproject.org/MyProject#egg=MyProject\n[-e] git+git://git.myproject.org/MyProject#egg=MyProject\n[-e] git+file://git.myproject.org/MyProject#egg=MyProject\n-e git+git@git.myproject.org:MyProject#egg=MyProject\n```\n\n## 参考\n\n1. [pip install — pip 9.0.1 documentation](https://pip.pypa.io/en/stable/reference/pip_install/#vcs-support)\n\n2. [Django | requirement.txt 生成 - 黑月亮 - SegmentFault](https://segmentfault.com/a/1190000003050954)","slug":"pip","published":1,"updated":"2017-02-02T09:09:57.018Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmg8e0024w4pyp8lhh0b5"},{"title":"数据库分页","toc":true,"date":"2016-09-29T16:19:07.000Z","_content":"\n## 逻辑分页\n\n就是将所有的结果集拿出来，然后在程序中进行截取，由于所有的数据都是在内存中的，占用内存比较大\n\n## 物理分页\n\n物理分页是指基于数据库提供的类似 `limit offset,rows`这样的语法。\n\n但是，比如`limit 10000,20`,  就会读取10020条数据，但是只会返回后面20条数据。\n\n## 手工计算\n\n如果id是有序的，可以做一个简单的转换，比如使用  `where id between 10000 and 10020`, 这样的效率就会相对的高些\n\n## 附件\n [PPC2009_mysql_pagination.pdf](PPC2009_mysql_pagination.pdf)\n","source":"_posts/pagination.md","raw":"---\ntitle: 数据库分页\ntags: mysql\ncategory: base\ntoc: true\ndate: 2016-09-30 00:19:07\n---\n\n## 逻辑分页\n\n就是将所有的结果集拿出来，然后在程序中进行截取，由于所有的数据都是在内存中的，占用内存比较大\n\n## 物理分页\n\n物理分页是指基于数据库提供的类似 `limit offset,rows`这样的语法。\n\n但是，比如`limit 10000,20`,  就会读取10020条数据，但是只会返回后面20条数据。\n\n## 手工计算\n\n如果id是有序的，可以做一个简单的转换，比如使用  `where id between 10000 and 10020`, 这样的效率就会相对的高些\n\n## 附件\n [PPC2009_mysql_pagination.pdf](PPC2009_mysql_pagination.pdf)\n","slug":"pagination","published":1,"updated":"2017-02-02T09:09:57.536Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmg8n0028w4pyg8pplh9e"},{"title":"netcat(nc) —— 使用小结","toc":true,"date":"2016-12-18T03:29:28.000Z","_content":"\n\nnc的全称是netcat，提供了许多关于网络操作的功能，号称网络工具中的瑞士军刀。\n\nnc也有windows的移植版本：[](https://eternallybored.org/misc/netcat/)\n\n>   Netcat is a featured networking utility which reads and writes data across network connections, using the TCP/IP protocol.\nIt is designed to be a reliable \"back-end\" tool that can be used directly or easily driven by other programs and scripts. At the same time, it is a feature-rich network debugging and exploration tool, since it can create almost any kind of connection you would need and has several interesting built-in capabilities.\n\n## 常见用途\n### nc 传输文件：\n\n- 传送文件\n\n发送端：`nc -l 6666 < file`\n接收端: `nc host 6666 | pv -L 30m > wrapper`\n\n其中pv是一个限流的工具。\n\n- 压缩传输一个文件夹\n\n`tar zcvf folder.tar.gz folder | nc -l 6666`\n\n\n## 参考链接\n\n1. [The GNU Netcat](http://netcat.sourceforge.net/)\n2. [Linux Netcat 命令——网络工具中的瑞士军刀](https://www.oschina.net/translate/linux-netcat-command)","source":"_posts/nc.md","raw":"---\ntitle: netcat(nc) —— 使用小结\ntags: netcat\ncategory: linux\ntoc: true\ndate: 2016-12-18 11:29:28\n---\n\n\nnc的全称是netcat，提供了许多关于网络操作的功能，号称网络工具中的瑞士军刀。\n\nnc也有windows的移植版本：[](https://eternallybored.org/misc/netcat/)\n\n>   Netcat is a featured networking utility which reads and writes data across network connections, using the TCP/IP protocol.\nIt is designed to be a reliable \"back-end\" tool that can be used directly or easily driven by other programs and scripts. At the same time, it is a feature-rich network debugging and exploration tool, since it can create almost any kind of connection you would need and has several interesting built-in capabilities.\n\n## 常见用途\n### nc 传输文件：\n\n- 传送文件\n\n发送端：`nc -l 6666 < file`\n接收端: `nc host 6666 | pv -L 30m > wrapper`\n\n其中pv是一个限流的工具。\n\n- 压缩传输一个文件夹\n\n`tar zcvf folder.tar.gz folder | nc -l 6666`\n\n\n## 参考链接\n\n1. [The GNU Netcat](http://netcat.sourceforge.net/)\n2. [Linux Netcat 命令——网络工具中的瑞士军刀](https://www.oschina.net/translate/linux-netcat-command)","slug":"nc","published":1,"updated":"2017-02-02T09:09:58.010Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmg8v002cw4py8vb29qua"},{"title":"mysql中时间相关的问题","toc":true,"date":"2016-09-24T16:27:52.000Z","_content":"\n## 自动更新时间戳\n\n> TIMESTAMP and DATETIME columns can be automatically initializated and updated to the current date and time (that is, the current timestamp).\n\n> For any TIMESTAMP or DATETIME column in a table, you can assign the current timestamp as the default value, the auto-update value, or both:\n\n[mysql官方文档说明](http://dev.mysql.com/doc/refman/5.7/en/timestamp-initialization.html)\n\n代码示例：\n```\nCREATE TABLE t1 (\n  ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  dt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n);\n```\n\n## 多个timestamp\n\nmysql中默认一张表中只能有一个timestamp类型的字段，如果有多个的话创建表的时候就会报错\n\n`Incorrect table definition; there can be only one TIMESTAMP column with CURRENT_TIMESTAMP in DEFAULT or ON UPDATE clause  `\n\n在`5.6.4`之前有这个限制，在之后好像就没有这个限制了。参见<https://segmentfault.com/q/1010000000488523>\n","source":"_posts/mysql-time.md","raw":"---\ntitle: mysql中时间相关的问题\ntags: mysql\ncategory: base\ntoc: true\ndate: 2016-09-25 00:27:52\n---\n\n## 自动更新时间戳\n\n> TIMESTAMP and DATETIME columns can be automatically initializated and updated to the current date and time (that is, the current timestamp).\n\n> For any TIMESTAMP or DATETIME column in a table, you can assign the current timestamp as the default value, the auto-update value, or both:\n\n[mysql官方文档说明](http://dev.mysql.com/doc/refman/5.7/en/timestamp-initialization.html)\n\n代码示例：\n```\nCREATE TABLE t1 (\n  ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  dt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n);\n```\n\n## 多个timestamp\n\nmysql中默认一张表中只能有一个timestamp类型的字段，如果有多个的话创建表的时候就会报错\n\n`Incorrect table definition; there can be only one TIMESTAMP column with CURRENT_TIMESTAMP in DEFAULT or ON UPDATE clause  `\n\n在`5.6.4`之前有这个限制，在之后好像就没有这个限制了。参见<https://segmentfault.com/q/1010000000488523>\n","slug":"mysql-time","published":1,"updated":"2017-02-02T09:09:58.537Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmg8z002gw4pyktau5gym"},{"title":"Hexo中使用markdown来绘制脑图（mind map）","toc":true,"date":"2017-01-01T14:45:33.000Z","_content":"\n\n# 脑图是什么？\n\n脑图英文叫做`mind map`, 是一种帮助发散思维的工具。将读过的书、看过的源码等总结成脑图，等下次需要复习的时候\n\n顺着脑图去看，效率非常高。\n\n{% asset_img  sample.jpg %}\n\n## 用makrdown来画脑图\n\n`markdown`是一种非常方便的标记性语言，使用`markdown`记录可以忽略格式带来的困扰，让我们更加的专注于内容。\n\n脑图的结构也不复杂，就是一级一级的分支。使用markdown完全可以表达出来，关键是怎么渲染出来。\n\n## kityminder\n\n经多番查找，最终锁定了百度前端团队开源的——`kityminder`, [百度脑图](http://naotu.baidu.com/)也是使用这个构建的。\n\n`kityminder`分成了两部分，一部分是[kityminder-core](https://github.com/fex-team/kityminder-core),一个是[kityminder-editor](https://github.com/fex-team/kityminder-editor).\n\n\n{% asset_img relations.png %}\n\n### kityminder-core\n\nkityminder-core是百度脑图最核心部分的实现，主要包括了:\n\n- 包括脑图数据的可视化展示（Json 格式）\n\n- 包括简单的编辑功能（节点创建、编辑、删除）。更加强大编辑功能的 KityMinder 编辑器请移步 kityminder-editor\n\n- 不包含第三方格式（FreeMind、XMind、MindManager）的支持，可以加载 kityminder-protocol 来扩展第三方格式支持。\n\n- 不包含文件存储的支持，需要自行实现存储。可参照百度脑图中的开源的 fio + 百度网盘方案进行实现。\n\n### kityminder-editor\n\n> KityMinder Editor 是一款强大、简洁、体验优秀的脑图编辑工具，适合用于编辑树/图/网等结构的数据。\n\n> 编辑器由百度 FEX 基于 kityminder-core 搭建，并且在百度脑图中使用。\n\n## 让hexo支持kityminder\n\n这个主要是客户端渲染的。\n\n### 引入依赖\n\n引入`kityminder-core`的js和css，以及`kityminder-core`的依赖kity到相应的主题下面\n\n```\n//core压缩后的\nkityminder.core.min.js\n//kity的cdn地址\nhttps://cdn.rawgit.com/fex-team/kity/dev/dist/kity.min.js\n```\n\n### 为`mind map`找到一个标签\n\n渲染需要*数据*和*容器*节点。数据的标记应该越简单越好。\n\n查阅hexo的官方文档，发现了几个支持设置class属性的标签，以及raw标签。\n\n先来看看`raw`标签：\n\n```\n{% raw %}\ncontent\n{% endraw %}\n```\n\n`raw`标签里面是可以写html的，渲染的时候不会加以改变，但是写起了比较麻烦，失去了标记性语言简单的特性。\n\n`pull quote`标签：\n\n```\n{% pullquote [class] %}\ncontent\n{% endpullquote %}\n```\n\n`pull quote` 标签支持设置class属性，使用这个标签，然后设置一个我们自己的class，比如`mindmap`\n\n### 渲染数据\n\n```javascript\nsetTimeout(function() {\n        var minder = new kityminder.Minder({\n            renderTo: '.mindmap'\n        });\n        var markdownText = $('.mindmap').text().trim();\n        $('.mindmap p').each(function(index, element) {\n            element.style.display = 'none';\n        });\n        minder.importData('markdown', markdownText);\n        minder.disable();\n        minder.execCommand('hand');\n    },\n    3000\n)\n```\n\n使用markdown写mind map示例:\n\n```\n{% pullquote mindmap %}\n#主题\n##一级分支\n###二级分支\n##一级分支\n##一级分支\n###二级分支\n####三级分支\n{% endpullquote %}\n```\n\n渲染的效果\n\n{% pullquote mindmap %}\n#主题\n##一级分支\n###二级分支\n##一级分支\n##一级分支\n###二级分支\n####三级分支\n{% endpullquote %}\n\n# 参考\n\n1. [标签插件（Tag Plugins） | Hexo](https://hexo.io/zh-cn/docs/tag-plugins.html)","source":"_posts/markdown-mindmap.md","raw":"---\ntitle: Hexo中使用markdown来绘制脑图（mind map）\ntags: mindmap\ncategory: hexo\ntoc: true\ndate: 2017-01-01 22:45:33\n---\n\n\n# 脑图是什么？\n\n脑图英文叫做`mind map`, 是一种帮助发散思维的工具。将读过的书、看过的源码等总结成脑图，等下次需要复习的时候\n\n顺着脑图去看，效率非常高。\n\n{% asset_img  sample.jpg %}\n\n## 用makrdown来画脑图\n\n`markdown`是一种非常方便的标记性语言，使用`markdown`记录可以忽略格式带来的困扰，让我们更加的专注于内容。\n\n脑图的结构也不复杂，就是一级一级的分支。使用markdown完全可以表达出来，关键是怎么渲染出来。\n\n## kityminder\n\n经多番查找，最终锁定了百度前端团队开源的——`kityminder`, [百度脑图](http://naotu.baidu.com/)也是使用这个构建的。\n\n`kityminder`分成了两部分，一部分是[kityminder-core](https://github.com/fex-team/kityminder-core),一个是[kityminder-editor](https://github.com/fex-team/kityminder-editor).\n\n\n{% asset_img relations.png %}\n\n### kityminder-core\n\nkityminder-core是百度脑图最核心部分的实现，主要包括了:\n\n- 包括脑图数据的可视化展示（Json 格式）\n\n- 包括简单的编辑功能（节点创建、编辑、删除）。更加强大编辑功能的 KityMinder 编辑器请移步 kityminder-editor\n\n- 不包含第三方格式（FreeMind、XMind、MindManager）的支持，可以加载 kityminder-protocol 来扩展第三方格式支持。\n\n- 不包含文件存储的支持，需要自行实现存储。可参照百度脑图中的开源的 fio + 百度网盘方案进行实现。\n\n### kityminder-editor\n\n> KityMinder Editor 是一款强大、简洁、体验优秀的脑图编辑工具，适合用于编辑树/图/网等结构的数据。\n\n> 编辑器由百度 FEX 基于 kityminder-core 搭建，并且在百度脑图中使用。\n\n## 让hexo支持kityminder\n\n这个主要是客户端渲染的。\n\n### 引入依赖\n\n引入`kityminder-core`的js和css，以及`kityminder-core`的依赖kity到相应的主题下面\n\n```\n//core压缩后的\nkityminder.core.min.js\n//kity的cdn地址\nhttps://cdn.rawgit.com/fex-team/kity/dev/dist/kity.min.js\n```\n\n### 为`mind map`找到一个标签\n\n渲染需要*数据*和*容器*节点。数据的标记应该越简单越好。\n\n查阅hexo的官方文档，发现了几个支持设置class属性的标签，以及raw标签。\n\n先来看看`raw`标签：\n\n```\n{% raw %}\ncontent\n{% endraw %}\n```\n\n`raw`标签里面是可以写html的，渲染的时候不会加以改变，但是写起了比较麻烦，失去了标记性语言简单的特性。\n\n`pull quote`标签：\n\n```\n{% pullquote [class] %}\ncontent\n{% endpullquote %}\n```\n\n`pull quote` 标签支持设置class属性，使用这个标签，然后设置一个我们自己的class，比如`mindmap`\n\n### 渲染数据\n\n```javascript\nsetTimeout(function() {\n        var minder = new kityminder.Minder({\n            renderTo: '.mindmap'\n        });\n        var markdownText = $('.mindmap').text().trim();\n        $('.mindmap p').each(function(index, element) {\n            element.style.display = 'none';\n        });\n        minder.importData('markdown', markdownText);\n        minder.disable();\n        minder.execCommand('hand');\n    },\n    3000\n)\n```\n\n使用markdown写mind map示例:\n\n```\n{% pullquote mindmap %}\n#主题\n##一级分支\n###二级分支\n##一级分支\n##一级分支\n###二级分支\n####三级分支\n{% endpullquote %}\n```\n\n渲染的效果\n\n{% pullquote mindmap %}\n#主题\n##一级分支\n###二级分支\n##一级分支\n##一级分支\n###二级分支\n####三级分支\n{% endpullquote %}\n\n# 参考\n\n1. [标签插件（Tag Plugins） | Hexo](https://hexo.io/zh-cn/docs/tag-plugins.html)","slug":"markdown-mindmap","published":1,"updated":"2017-02-02T09:09:59.040Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmg92002jw4pycz2ayhud"},{"title":"ThunderBird使用Markdown写邮件","toc":true,"date":"2017-01-02T08:10:15.000Z","_content":"\n\n# Thunderbird\n\n![](https://www.mozilla.org/media/img/thunderbird/landing/wordmark.3b0e03fa56f1.png)\n\n是Mozilla基金推出的免费、开源的邮件客户端，它支持linux、mac和windows。\n\n这个客户端看起来和火狐非常像，也支持插件扩展。\n\n# markdown here\n\nmarkdown here便是借助markdown的力量来编写邮件。他在Chrome、Firefox、Safari上都有插件。\n\nThunderbird中的插件：\n\n{% asset_img additional.jpg  插件 %}\n\n插件安装好之后，在编写gmail等支持富文本编辑器的时候就可以将markdown转换成相应的样式。\n\nmarkdown here也提供了Thunderbird的插件，在附加组件中安装重启后即可使用markdown来编辑，\n\n编写完成后，点击工具栏的图标即可进行转换。\n\n{% asset_img mail.jpg 编写邮件 %}\n\n转换的样式也可以在设置中自己定义。\n\n# 参考\n\n1.[Markdown小技巧集合 - 阳志平的网志](http://www.yangzhiping.com/tech/markdown-tips.html)\n\n2.[Markdown Here](http://markdown-here.com/)","source":"_posts/markdown-here.md","raw":"---\ntitle: ThunderBird使用Markdown写邮件\ntags: markdown-here\ncategory: markdown\ntoc: true\ndate: 2017-01-02 16:10:15\n---\n\n\n# Thunderbird\n\n![](https://www.mozilla.org/media/img/thunderbird/landing/wordmark.3b0e03fa56f1.png)\n\n是Mozilla基金推出的免费、开源的邮件客户端，它支持linux、mac和windows。\n\n这个客户端看起来和火狐非常像，也支持插件扩展。\n\n# markdown here\n\nmarkdown here便是借助markdown的力量来编写邮件。他在Chrome、Firefox、Safari上都有插件。\n\nThunderbird中的插件：\n\n{% asset_img additional.jpg  插件 %}\n\n插件安装好之后，在编写gmail等支持富文本编辑器的时候就可以将markdown转换成相应的样式。\n\nmarkdown here也提供了Thunderbird的插件，在附加组件中安装重启后即可使用markdown来编辑，\n\n编写完成后，点击工具栏的图标即可进行转换。\n\n{% asset_img mail.jpg 编写邮件 %}\n\n转换的样式也可以在设置中自己定义。\n\n# 参考\n\n1.[Markdown小技巧集合 - 阳志平的网志](http://www.yangzhiping.com/tech/markdown-tips.html)\n\n2.[Markdown Here](http://markdown-here.com/)","slug":"markdown-here","published":1,"updated":"2017-02-02T09:09:59.500Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmg9d002nw4py2y0gok66"},{"title":"机器学习框架调研","toc":true,"date":"2015-11-03T15:55:34.000Z","_content":"\n# 机器学习框架调研\n## DMTK\n <img src=\"http://www.dmtk.io/img/pic1_V7.jpg\" width = \"150\" height = \"150\" alt=\"图片名称\" align=center />\n\n项目地址：[https://github.com/Microsoft/DMTK](https://github.com/Microsoft/DMTK)\n文档地址:[http://www.dmtk.io/document.html](http://www.dmtk.io/document.html)\n语言: CPP\n项目简介:\n Microsoft Distributed Machine Learning Tookit\n\n- DMTK分布式机器学习框架：\n>它由参数服务器和客户端软件开发包（SDK）两部分构成。参数服务器在原有基础上从性能和功能上都得到了进一步提升——支持存储混合数据结构模型、接受并聚合工作节点服务器的数据模型更新、控制模型同步逻辑等。客户端软件开发包（SDK）支持维护节点模型缓存（与全局模型服务器同步）、节点模型训练和模型通讯的流水线控制、以及片状调度大模型训练等。\n\n-  LightLDA：\n> LightLDA是一种全新的用于训练主题模型，计算复杂度与主题数目无关的高效算法。在其分布式实现中，我们做了大量的系统优化使得LightLDA能够在一个普通计算机集群上处理超大规模的数据和模型。例如，在一个由8台计算机组成的集群上，我们可以在具有2千亿训练样本（token）的数据集上训练具有1百万词汇表和1百万个话题（topic）的LDA模型（约1万亿个参数），这种规模的实验以往要在数千台计算机的集群上才能运行。\n\n- 分布式词向量：\n> 词向量技术近来被普遍地应用于计算词汇的语义表示，它可以用作很多自然语言处理任务的词特征。我们为两种计算词向量的算法提供了高效的分步式实现：\n> \t\t1. 一种是标准的word2vec算法\n> \t\t2. 另一种是可以对多义词计算多个词向量的新算法。\n\n<img src=\"http://www.msra.cn/zh-cn/research/release/images/dmtk-2.png\" width = \"500\" height = \"200\" alt=\"图片名称\" align=center />\n\n### Reference\n\n> [1] Tian, F., Dai, H., Bian, J., Gao, B., Zhang, R., Chen, E., & Liu, T. Y. (2014). [A probabilistic model for learning multi-prototype word embeddings](http://www.aclweb.org/anthology/C14-1016). In Proceedings of COLING (pp. 151-160).\n\n## TensorFlow\n\n\n\n![](http://tensorflow.org/images/tensors_flowing.gif   )\n\n文档地址: [http://tensorflow.org/get_started/index.html](http://tensorflow.org/get_started/index.html)\n项目地址： [http://tensorflow.org/](http://tensorflow.org/)\n语言: Python\n简介：\n>   1. TensorFlow是谷歌研发的第二代人工智能学习系统，而第一代的DistBelief比这个要早好多年。\n>   \n>   2. TensorFlow支持CNN、RNN和LSTM算法，这都是目前在Image，Speech和NLP最流行的深度神经网络模型。\n>   \n>   3. 此外，TensorFlow一大亮点是支持异构设备分布式计算，它能够在各个平台上自动运行模型，从电话、单个CPU / GPU到成百上千GPU卡组成的分布式系统。也就是说，任何基于梯度的机器学习算法都能够受益于TensorFlow的自动分化（auto-differentiation）。\n\n### 参考链接\n[http://news.zol.com.cn/551/5513527.html](http://news.zol.com.cn/551/5513527.html)\n[http://www.leiphone.com/news/201511/Voza1pFNQB4bzKdR.html](http://www.leiphone.com/news/201511/Voza1pFNQB4bzKdR.html)\n\n## Torch\n\n\n![](http://torch.ch/static/flow-hero-logo.png    )\n\n\n\n项目地址: [https://github.com/torch/torch7](https://github.com/torch/torch7)\n项目博客: [http://torch.ch/blog/](http://torch.ch/blog/)\nSlides: [https://github.com/soumith/cvpr2015/blob/master/cvpr-torch.pdf](https://github.com/soumith/cvpr2015/blob/master/cvpr-torch.pdf)\n语言: Lua\n项目简介:\n> Torch并没有跟随Python的潮流，它是基于Lua的。对于解释器没有必要像Matlab或者Python那样，Lua会给你神奇的控制台。Torch被Facebook人工智能研究实验室和位于伦敦的谷歌DeepMind大量使用。\n\n> Torch is a scientific computing framework with wide support for machine learning algorithms. It is > > easy to use and efficient, thanks to an easy and fast scripting language, LuaJIT, and an underlying > C/CUDA implementation.\n\n> A summary of core features:\n>\n>    - a powerful N-dimensional array\n>    - lots of routines for indexing, slicing, transposing, ...\n>    - amazing interface to C, via LuaJIT\n>    - linear algebra routines\n>    - neural network, and energy-based models\n>    - numeric optimization routines\n>    - Fast and efficient GPU support\n>    - Embeddable, with ports to iOS, Android and FPGA backends\n\n### 参考链接\n[2015深度学习回顾：ConvNet、Caffe、Torch及其他](http://www.chinacloud.cn/show.aspx?id=21212&cid=17)\n\n\n## GraphLab\n\n项目简介： [http://www.select.cs.cmu.edu/code/graphlab/](http://www.select.cs.cmu.edu/code/graphlab/)\n语言: Java/Python\n简介:\n> GraphLab是一个流行的图谱分析（Graph Analysis）和机器学习的开源项目，2013年该项目剥离出一个独立运作的商业公司GraphLab Inc\n> - HDFS。GraphLab 内置对HDFS 的支持，GraphLab 能够直接从HDFS中读数据或者将计算结果数据直接写入到HDFS 中。\n\n\n\n![](http://www.ctocio.com/wp-content/uploads/2014/10/graphlab-deeplearning-_thumb.png    )\n\n\n\n\n### 参考链接\n[GraphLab Create使深度学习更easy](http://planckscale.info/?p=226)\n[GraphLab:新的面向机器学习的并行框架](https://blog.inf.ed.ac.uk/graphprocs/2014/11/25/graphlab%E6%96%B0%E7%9A%84%E9%9D%A2%E5%90%91%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%B9%B6%E8%A1%8C%E6%A1%86%E6%9E%B6/)\n\n## Deeplearning4j\n项目文档: [http://deeplearning4j.org/](http://deeplearning4j.org/)\n项目地址: [https://github.com/deeplearning4j/deeplearning4j](https://github.com/deeplearning4j/deeplearning4j)\n语言: Java/Scala\n项目简介:\n> Deeplearning4j is the first commercial-grade, open-source, distributed deep-learning library written for Java and Scala. Integrated with Hadoop and Spark, DL4J is designed to be used in business environments, rather than as a research tool.\n>    - Versatile n-dimensional array class\n>    - GPU integration\n>    - Scalable on Hadoop, Spark and Akka + AWS et al\n\n\n\n![](http://deeplearning4j.org/img/schematic_overview.png    )\n\n\n\n\n### 参考链接\n[DL4J vs. Torch vs. Theano vs. Caffe](http://deeplearning4j.org/compare-dl4j-torch7-pylearn.html)\n\n\n\n## Caffe\n项目主页: [http://caffe.berkeleyvision.org/](http://caffe.berkeleyvision.org/)\n项目地址: [https://github.com/BVLC/caffe](https://github.com/BVLC/caffe)\nSlides: [https://docs.google.com/presentation/d/1UeKXVgRvvxg9OUdh_UiC5G71UMscNPlvArsWER41PsU/edit#slide=id.gc2fcdcce7_216_211](https://docs.google.com/presentation/d/1UeKXVgRvvxg9OUdh_UiC5G71UMscNPlvArsWER41PsU/edit#slide=id.gc2fcdcce7_216_211)\n项目简介:\n>The Caffe framework from UC Berkeley is designed to let researchers create and explore CNNs and other Deep Neural Networks (DNNs) easily, while delivering high speed needed for both experiments and industrial deployment [5]. Caffe provides state-of-the-art modeling for advancing and deploying deep learning in research and industry with support for a wide variety of architectures and efficient implementations of prediction and learning.\n\n\n\n\n![](http://d.hiphotos.baidu.com/baike/c0%3Dbaike92%2C5%2C5%2C92%2C30/sign=520e49ddb51bb0519b29bb7a5713b1d1/5882b2b7d0a20cf4cad4bb2070094b36adaf998d.jpg    )\n\n\n\n\n\n![](http://img.ptcms.csdn.net/article/201507/08/559cebc9330f2_middle.jpg    )\n\n\n\n### 参考链接\n[Caffe: Convolutional Architecture for Fast Feature Embedding](http://ucb-icsi-vision-group.github.io/caffe-paper/caffe.pdf)\n\n[KDnuggets热门深度学习工具排行：Pylearn2 居首，Caffe第三](http://www.csdn.net/article/1970-01-01/2825166)\n\n\n## Theano\n项目主页: [http://deeplearning.net/software/theano/](http://deeplearning.net/software/theano/)\n项目地址: [https://github.com/Theano/Theano](https://github.com/Theano/Theano)\n\n## Pylearn2\n 文档地址: [http://deeplearning.net/software/pylearn2/](http://deeplearning.net/software/pylearn2/)\n 项目地址: [https://github.com/lisa-lab/pylearn2](https://github.com/lisa-lab/pylearn2)\n项目简介:\n\n>Pylearn2和Theano由同一个开发团队开发，Pylearn2是一个机器学习库，它把深度学习和人工智能研究许多常用的模型以及训练算法封装成一个单一的实验包，如随机梯度下降。\n","source":"_posts/machine_learning.md","raw":"---\ntitle: 机器学习框架调研\ntags: 机器学习\ncategory: 机器学习\ntoc: true\ndate: 2015-11-03 23:55:34\n---\n\n# 机器学习框架调研\n## DMTK\n <img src=\"http://www.dmtk.io/img/pic1_V7.jpg\" width = \"150\" height = \"150\" alt=\"图片名称\" align=center />\n\n项目地址：[https://github.com/Microsoft/DMTK](https://github.com/Microsoft/DMTK)\n文档地址:[http://www.dmtk.io/document.html](http://www.dmtk.io/document.html)\n语言: CPP\n项目简介:\n Microsoft Distributed Machine Learning Tookit\n\n- DMTK分布式机器学习框架：\n>它由参数服务器和客户端软件开发包（SDK）两部分构成。参数服务器在原有基础上从性能和功能上都得到了进一步提升——支持存储混合数据结构模型、接受并聚合工作节点服务器的数据模型更新、控制模型同步逻辑等。客户端软件开发包（SDK）支持维护节点模型缓存（与全局模型服务器同步）、节点模型训练和模型通讯的流水线控制、以及片状调度大模型训练等。\n\n-  LightLDA：\n> LightLDA是一种全新的用于训练主题模型，计算复杂度与主题数目无关的高效算法。在其分布式实现中，我们做了大量的系统优化使得LightLDA能够在一个普通计算机集群上处理超大规模的数据和模型。例如，在一个由8台计算机组成的集群上，我们可以在具有2千亿训练样本（token）的数据集上训练具有1百万词汇表和1百万个话题（topic）的LDA模型（约1万亿个参数），这种规模的实验以往要在数千台计算机的集群上才能运行。\n\n- 分布式词向量：\n> 词向量技术近来被普遍地应用于计算词汇的语义表示，它可以用作很多自然语言处理任务的词特征。我们为两种计算词向量的算法提供了高效的分步式实现：\n> \t\t1. 一种是标准的word2vec算法\n> \t\t2. 另一种是可以对多义词计算多个词向量的新算法。\n\n<img src=\"http://www.msra.cn/zh-cn/research/release/images/dmtk-2.png\" width = \"500\" height = \"200\" alt=\"图片名称\" align=center />\n\n### Reference\n\n> [1] Tian, F., Dai, H., Bian, J., Gao, B., Zhang, R., Chen, E., & Liu, T. Y. (2014). [A probabilistic model for learning multi-prototype word embeddings](http://www.aclweb.org/anthology/C14-1016). In Proceedings of COLING (pp. 151-160).\n\n## TensorFlow\n\n\n\n![](http://tensorflow.org/images/tensors_flowing.gif   )\n\n文档地址: [http://tensorflow.org/get_started/index.html](http://tensorflow.org/get_started/index.html)\n项目地址： [http://tensorflow.org/](http://tensorflow.org/)\n语言: Python\n简介：\n>   1. TensorFlow是谷歌研发的第二代人工智能学习系统，而第一代的DistBelief比这个要早好多年。\n>   \n>   2. TensorFlow支持CNN、RNN和LSTM算法，这都是目前在Image，Speech和NLP最流行的深度神经网络模型。\n>   \n>   3. 此外，TensorFlow一大亮点是支持异构设备分布式计算，它能够在各个平台上自动运行模型，从电话、单个CPU / GPU到成百上千GPU卡组成的分布式系统。也就是说，任何基于梯度的机器学习算法都能够受益于TensorFlow的自动分化（auto-differentiation）。\n\n### 参考链接\n[http://news.zol.com.cn/551/5513527.html](http://news.zol.com.cn/551/5513527.html)\n[http://www.leiphone.com/news/201511/Voza1pFNQB4bzKdR.html](http://www.leiphone.com/news/201511/Voza1pFNQB4bzKdR.html)\n\n## Torch\n\n\n![](http://torch.ch/static/flow-hero-logo.png    )\n\n\n\n项目地址: [https://github.com/torch/torch7](https://github.com/torch/torch7)\n项目博客: [http://torch.ch/blog/](http://torch.ch/blog/)\nSlides: [https://github.com/soumith/cvpr2015/blob/master/cvpr-torch.pdf](https://github.com/soumith/cvpr2015/blob/master/cvpr-torch.pdf)\n语言: Lua\n项目简介:\n> Torch并没有跟随Python的潮流，它是基于Lua的。对于解释器没有必要像Matlab或者Python那样，Lua会给你神奇的控制台。Torch被Facebook人工智能研究实验室和位于伦敦的谷歌DeepMind大量使用。\n\n> Torch is a scientific computing framework with wide support for machine learning algorithms. It is > > easy to use and efficient, thanks to an easy and fast scripting language, LuaJIT, and an underlying > C/CUDA implementation.\n\n> A summary of core features:\n>\n>    - a powerful N-dimensional array\n>    - lots of routines for indexing, slicing, transposing, ...\n>    - amazing interface to C, via LuaJIT\n>    - linear algebra routines\n>    - neural network, and energy-based models\n>    - numeric optimization routines\n>    - Fast and efficient GPU support\n>    - Embeddable, with ports to iOS, Android and FPGA backends\n\n### 参考链接\n[2015深度学习回顾：ConvNet、Caffe、Torch及其他](http://www.chinacloud.cn/show.aspx?id=21212&cid=17)\n\n\n## GraphLab\n\n项目简介： [http://www.select.cs.cmu.edu/code/graphlab/](http://www.select.cs.cmu.edu/code/graphlab/)\n语言: Java/Python\n简介:\n> GraphLab是一个流行的图谱分析（Graph Analysis）和机器学习的开源项目，2013年该项目剥离出一个独立运作的商业公司GraphLab Inc\n> - HDFS。GraphLab 内置对HDFS 的支持，GraphLab 能够直接从HDFS中读数据或者将计算结果数据直接写入到HDFS 中。\n\n\n\n![](http://www.ctocio.com/wp-content/uploads/2014/10/graphlab-deeplearning-_thumb.png    )\n\n\n\n\n### 参考链接\n[GraphLab Create使深度学习更easy](http://planckscale.info/?p=226)\n[GraphLab:新的面向机器学习的并行框架](https://blog.inf.ed.ac.uk/graphprocs/2014/11/25/graphlab%E6%96%B0%E7%9A%84%E9%9D%A2%E5%90%91%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%B9%B6%E8%A1%8C%E6%A1%86%E6%9E%B6/)\n\n## Deeplearning4j\n项目文档: [http://deeplearning4j.org/](http://deeplearning4j.org/)\n项目地址: [https://github.com/deeplearning4j/deeplearning4j](https://github.com/deeplearning4j/deeplearning4j)\n语言: Java/Scala\n项目简介:\n> Deeplearning4j is the first commercial-grade, open-source, distributed deep-learning library written for Java and Scala. Integrated with Hadoop and Spark, DL4J is designed to be used in business environments, rather than as a research tool.\n>    - Versatile n-dimensional array class\n>    - GPU integration\n>    - Scalable on Hadoop, Spark and Akka + AWS et al\n\n\n\n![](http://deeplearning4j.org/img/schematic_overview.png    )\n\n\n\n\n### 参考链接\n[DL4J vs. Torch vs. Theano vs. Caffe](http://deeplearning4j.org/compare-dl4j-torch7-pylearn.html)\n\n\n\n## Caffe\n项目主页: [http://caffe.berkeleyvision.org/](http://caffe.berkeleyvision.org/)\n项目地址: [https://github.com/BVLC/caffe](https://github.com/BVLC/caffe)\nSlides: [https://docs.google.com/presentation/d/1UeKXVgRvvxg9OUdh_UiC5G71UMscNPlvArsWER41PsU/edit#slide=id.gc2fcdcce7_216_211](https://docs.google.com/presentation/d/1UeKXVgRvvxg9OUdh_UiC5G71UMscNPlvArsWER41PsU/edit#slide=id.gc2fcdcce7_216_211)\n项目简介:\n>The Caffe framework from UC Berkeley is designed to let researchers create and explore CNNs and other Deep Neural Networks (DNNs) easily, while delivering high speed needed for both experiments and industrial deployment [5]. Caffe provides state-of-the-art modeling for advancing and deploying deep learning in research and industry with support for a wide variety of architectures and efficient implementations of prediction and learning.\n\n\n\n\n![](http://d.hiphotos.baidu.com/baike/c0%3Dbaike92%2C5%2C5%2C92%2C30/sign=520e49ddb51bb0519b29bb7a5713b1d1/5882b2b7d0a20cf4cad4bb2070094b36adaf998d.jpg    )\n\n\n\n\n\n![](http://img.ptcms.csdn.net/article/201507/08/559cebc9330f2_middle.jpg    )\n\n\n\n### 参考链接\n[Caffe: Convolutional Architecture for Fast Feature Embedding](http://ucb-icsi-vision-group.github.io/caffe-paper/caffe.pdf)\n\n[KDnuggets热门深度学习工具排行：Pylearn2 居首，Caffe第三](http://www.csdn.net/article/1970-01-01/2825166)\n\n\n## Theano\n项目主页: [http://deeplearning.net/software/theano/](http://deeplearning.net/software/theano/)\n项目地址: [https://github.com/Theano/Theano](https://github.com/Theano/Theano)\n\n## Pylearn2\n 文档地址: [http://deeplearning.net/software/pylearn2/](http://deeplearning.net/software/pylearn2/)\n 项目地址: [https://github.com/lisa-lab/pylearn2](https://github.com/lisa-lab/pylearn2)\n项目简介:\n\n>Pylearn2和Theano由同一个开发团队开发，Pylearn2是一个机器学习库，它把深度学习和人工智能研究许多常用的模型以及训练算法封装成一个单一的实验包，如随机梯度下降。\n","slug":"machine_learning","published":1,"updated":"2017-02-02T09:09:59.953Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmg9t002sw4pyhjmvcudj"},{"title":"JS跨域原理","toc":true,"date":"2016-10-02T03:42:13.000Z","_content":"\n\n## 同源策略\n\n>同源策略限制了一个源（origin）中加载文本或脚本与来自其它源（origin）中资源的交互方式。\n\n例如在使用XMLHttpRequest 或 <img> 标签时则会受到同源策略的约束。交互通常分为三类：\n\n1. 通常允许进行跨域写操作（`Cross-origin writes`）。例如链接（links），重定向以及表单提交。特定少数的HTTP请求需要添加 preflight。\n\n2. 通常允许跨域资源嵌入（`Cross-origin embedding`）。\n3. 通常不允许跨域读操作（`Cross-origin reads`）。\n\n下表给出了相对`http://store.company.com/dir/page.html`同源检测的示例:\n\n|URL\t|结果|\t原因|\n|---|---|\n|http://store.company.com/dir2/other.html\t|成功|\t |\n|http://store.company.com/dir/inner/another.html\t|成功|\t |\n|https://store.company.com/secure.html\t|失败|\t协议不同|\n|http://store.company.com:81/dir/etc.html\t|失败|\t端口不同|\n|http://news.company.com/dir/other.html\t|失败|\t主机名不同|\n\n\n\n## ajax 跨域\n\n> 同源政策规定，AJAX请求只能发给同源的网址，否则就报错。\n\n请求其他域资源的时候，由于同源策略的限制一般会出现如下的错误：\n\n>XMLHttpRequest cannot load http://xxxxx. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'null' is therefore not allowed access. The response had HTTP status code 500.\n\n### JSONP\n\n`<script src=\"...\"></script>` 标签是支持跨域的，JSONP的原理就是使用这个标签。\n\n服务器会在传给浏览器前将JSON数据填充到回调函数中\n\n{% gist cc896797f4ef746e9cbc75b8f6ebc24f %}\n\n上述代码中`    return param + '(' + json.dumps(data) + ')'`是将返回的数据填充到回调函数中\n\n前端的代码如下：\n\n{% gist 8d90c2a0599818488a647177b4f196c2 %}\n\n使用了jQuery的ajax请求\n\n**但是JSONP的方式只支持get请求**\n\n### CORS (`Cross-Origin Resource Sharing`)\n\nCORS是一个W3C标准, 不仅支持GET方式还支持POST方式的跨域请求\n\n> 浏览器将CORS请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。\n\n请求的流程图如下：\n{%  asset_img   cors.png  %}\n\n\n\n\n详细原理参考阮一峰老师的[跨域资源共享 CORS 详解](http://www.ruanyifeng.com/blog/2016/04/cors.html)\n\n### Websocket\n\n>WebSocket是一种通信协议，使用ws://（非加密）和wss://（加密）作为协议前缀。该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信。\n\n详细原理参考阮一峰老师的 [浏览器的同源策略](https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy)\n\n## 参考链接\n\n1. [跨域资源共享 CORS 详解](http://www.ruanyifeng.com/blog/2016/04/cors.html)\n\n2. [浏览器的同源策略](https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy)\n\n3. [浏览器同源政策及其规避方法](http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html)\n\n4. [ ajax 设置Access-Control-Allow-Origin实现跨域访问](http://blog.csdn.net/fdipzone/article/details/46390573)\n\n5. [使用CORS（译）](http://liuwanlin.info/corsxiang-jie/)\n","source":"_posts/jsonp.md","raw":"---\ntitle: JS跨域原理\ntags: ajax\ncategory: fe\ntoc: true\ndate: 2016-10-02 11:42:13\n---\n\n\n## 同源策略\n\n>同源策略限制了一个源（origin）中加载文本或脚本与来自其它源（origin）中资源的交互方式。\n\n例如在使用XMLHttpRequest 或 <img> 标签时则会受到同源策略的约束。交互通常分为三类：\n\n1. 通常允许进行跨域写操作（`Cross-origin writes`）。例如链接（links），重定向以及表单提交。特定少数的HTTP请求需要添加 preflight。\n\n2. 通常允许跨域资源嵌入（`Cross-origin embedding`）。\n3. 通常不允许跨域读操作（`Cross-origin reads`）。\n\n下表给出了相对`http://store.company.com/dir/page.html`同源检测的示例:\n\n|URL\t|结果|\t原因|\n|---|---|\n|http://store.company.com/dir2/other.html\t|成功|\t |\n|http://store.company.com/dir/inner/another.html\t|成功|\t |\n|https://store.company.com/secure.html\t|失败|\t协议不同|\n|http://store.company.com:81/dir/etc.html\t|失败|\t端口不同|\n|http://news.company.com/dir/other.html\t|失败|\t主机名不同|\n\n\n\n## ajax 跨域\n\n> 同源政策规定，AJAX请求只能发给同源的网址，否则就报错。\n\n请求其他域资源的时候，由于同源策略的限制一般会出现如下的错误：\n\n>XMLHttpRequest cannot load http://xxxxx. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'null' is therefore not allowed access. The response had HTTP status code 500.\n\n### JSONP\n\n`<script src=\"...\"></script>` 标签是支持跨域的，JSONP的原理就是使用这个标签。\n\n服务器会在传给浏览器前将JSON数据填充到回调函数中\n\n{% gist cc896797f4ef746e9cbc75b8f6ebc24f %}\n\n上述代码中`    return param + '(' + json.dumps(data) + ')'`是将返回的数据填充到回调函数中\n\n前端的代码如下：\n\n{% gist 8d90c2a0599818488a647177b4f196c2 %}\n\n使用了jQuery的ajax请求\n\n**但是JSONP的方式只支持get请求**\n\n### CORS (`Cross-Origin Resource Sharing`)\n\nCORS是一个W3C标准, 不仅支持GET方式还支持POST方式的跨域请求\n\n> 浏览器将CORS请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。\n\n请求的流程图如下：\n{%  asset_img   cors.png  %}\n\n\n\n\n详细原理参考阮一峰老师的[跨域资源共享 CORS 详解](http://www.ruanyifeng.com/blog/2016/04/cors.html)\n\n### Websocket\n\n>WebSocket是一种通信协议，使用ws://（非加密）和wss://（加密）作为协议前缀。该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信。\n\n详细原理参考阮一峰老师的 [浏览器的同源策略](https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy)\n\n## 参考链接\n\n1. [跨域资源共享 CORS 详解](http://www.ruanyifeng.com/blog/2016/04/cors.html)\n\n2. [浏览器的同源策略](https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy)\n\n3. [浏览器同源政策及其规避方法](http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html)\n\n4. [ ajax 设置Access-Control-Allow-Origin实现跨域访问](http://blog.csdn.net/fdipzone/article/details/46390573)\n\n5. [使用CORS（译）](http://liuwanlin.info/corsxiang-jie/)\n","slug":"jsonp","published":1,"updated":"2017-02-02T09:10:00.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmg9z002xw4py7wid50dh"},{"title":"在Intellij Idea中生成Javadoc","toc":true,"date":"2016-10-04T16:06:29.000Z","_content":"\n`Tools | Generate JavaDoc`, 写上输出路径即可。\n\n## 注意事项\n\n1. locale\n\n  简体中文写`zh_CN`\n\n2. 编码\n\n  在`Other Commandline arguments`中指定\n  ```\n  -encoding UTF-8 -charset UTF-8\n  ```\n\n## 参考链接\n\n1. [在 IntelliJ IDEA 中为自己设计的类库生成 JavaDoc](http://www.cnblogs.com/cyberniuniu/p/5021910.html)\n\n2. [Generate JavaDoc Dialog](https://www.jetbrains.com/help/idea/2016.2/generate-javadoc-dialog.html)\n\n3. [Generating JavaDoc Reference for a Project](https://www.jetbrains.com/help/idea/2016.2/generating-javadoc-reference-for-a-project.html)\n","source":"_posts/javadoc.md","raw":"---\ntitle: 在Intellij Idea中生成Javadoc\ntags: Javadoc\ncategory: idea\ntoc: true\ndate: 2016-10-05 00:06:29\n---\n\n`Tools | Generate JavaDoc`, 写上输出路径即可。\n\n## 注意事项\n\n1. locale\n\n  简体中文写`zh_CN`\n\n2. 编码\n\n  在`Other Commandline arguments`中指定\n  ```\n  -encoding UTF-8 -charset UTF-8\n  ```\n\n## 参考链接\n\n1. [在 IntelliJ IDEA 中为自己设计的类库生成 JavaDoc](http://www.cnblogs.com/cyberniuniu/p/5021910.html)\n\n2. [Generate JavaDoc Dialog](https://www.jetbrains.com/help/idea/2016.2/generate-javadoc-dialog.html)\n\n3. [Generating JavaDoc Reference for a Project](https://www.jetbrains.com/help/idea/2016.2/generating-javadoc-reference-for-a-project.html)\n","slug":"javadoc","published":1,"updated":"2017-02-02T09:10:01.047Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgag0032w4pyquopoim4"},{"title":"java 访问权限区别","toc":true,"date":"2015-10-20T01:57:22.000Z","_content":"\n## 类成员的访问权限\n<!-- more -->\n\n|  Modifier |  Class  | Package      | Subclass  |  World       |   \n| ----------| --------| -------------| --------- | ------------- \n|  public   |   √     |   √           |  √         |   √           |   \n|  protect  |   √     |   √           |   √        |    x          |  \n|  no modifier |   √  |   √            |  x         |    x          |   \n|  private  |   √     |     x        |     x      |       x       |   \n\n没有修饰符的话就相当于package可见，如果子类不在同一个package则也不能访问相应的方法。\n\n## 参考\n\n > [Controlling Access to Members of a Class](https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html)\n > [JAVA修饰符类型](http://blog.csdn.net/johnstrive/article/details/5880357)","source":"_posts/java-permission-control.md","raw":"---\ntitle: java 访问权限区别\ntags: 访问权限\ncategory: java\ntoc: true\ndate: 2015-10-20 09:57:22\n---\n\n## 类成员的访问权限\n<!-- more -->\n\n|  Modifier |  Class  | Package      | Subclass  |  World       |   \n| ----------| --------| -------------| --------- | ------------- \n|  public   |   √     |   √           |  √         |   √           |   \n|  protect  |   √     |   √           |   √        |    x          |  \n|  no modifier |   √  |   √            |  x         |    x          |   \n|  private  |   √     |     x        |     x      |       x       |   \n\n没有修饰符的话就相当于package可见，如果子类不在同一个package则也不能访问相应的方法。\n\n## 参考\n\n > [Controlling Access to Members of a Class](https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html)\n > [JAVA修饰符类型](http://blog.csdn.net/johnstrive/article/details/5880357)","slug":"java-permission-control","published":1,"updated":"2017-02-02T09:10:01.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgaj0037w4pyzv7860ra"},{"title":"Java中的异常处理","toc":true,"abbrlink":"22260569","date":"2016-09-25T14:49:04.000Z","_content":"\n## 异常的分类\n\n* 业务异常\n\n> 处理业务的时候80%的时候是没问题的，但可能有20%的时候事情没\n> 有按理想的方向发展。例如注册用户的时候，正常情况是注册成功，但\n> 可能用户提交请求的时候，系统发现用户名已经被别人注册了，这是就\n> 可以抛出一个UserAlreadyExistsException\n>\n来自 <https://github.com/kyfxbl/blog/blob/master/source/_posts/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.md>\n\n业务异常一般是上层可以处理的，一般声明为`CheckedException`，强制上层进行捕获处理\n\n业务异常定义示例摘自[spring mvc 异常统一处理](http://gaojiewyh.iteye.com/blog/1297746#bc2369985)：\n\n```\npublic class BusinessException extends Exception {  \n   \n    private static final long serialVersionUID = 1L;  \n   \n    public BusinessException() {  \n        // TODO Auto-generated constructor stub  \n    }  \n   \n    public BusinessException(String message) {  \n        super(message);  \n        // TODO Auto-generated constructor stub  \n    }  \n   \n    public BusinessException(Throwable cause) {  \n        super(cause);  \n        // TODO Auto-generated constructor stub  \n    }  \n   \n    public BusinessException(String message, Throwable cause) {  \n        super(message, cause);  \n        // TODO Auto-generated constructor stub  \n    }  \n   \n}  \n```\n\n一般是继承自`Exception`, 这样就成为`CheckedException`， 必须强制捕获\n\n* 逻辑异常\n\n> 系统异常与具体业务流程没有直接的关系，例如编程错误导致的NullPointExcpetion，\n> 还有环境问题，例如磁盘损坏或者网络连接不稳定造成了IOException。\n\n> 来自  <https://github.com/kyfxbl/blog/blob/master/source/_posts/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.md>\n\n系统异常一般是上层无法处理的，所以一般声明为`UncheckedException`，不强制用户捕获。\n```\npublic class SystemException extends RuntimeException {  \n   \n    private static final long serialVersionUID = 1L;  \n   \n    public SystemException() {  \n        // TODO Auto-generated constructor stub  \n    }  \n   \n    /** \n     * @param message \n     */  \n    public SystemException(String message) {  \n        super(message);  \n        // TODO Auto-generated constructor stub  \n    }  \n   \n    /** \n     * @param cause \n     */  \n    public SystemException(Throwable cause) {  \n        super(cause);  \n        // TODO Auto-generated constructor stub  \n    }  \n   \n    /** \n     * @param message \n     * @param cause \n     */  \n    public SystemException(String message, Throwable cause) {  \n        super(message, cause);  \n        // TODO Auto-generated constructor stub  \n    }  \n   \n}  \n\n```\n\n## 异常的捕获\n\n• 在Service层中应该捕获Dao层抛出的异常并且包装成相应的异常，如业务异常、系统异常等\n\n  业务层中，通过异常链保存原始异常信息。程序员必须自己编码来保存原始异常的信息。在业务逻辑中，捕获DataAccessException异常，处理包装成SystemException异常抛出。捕获ObjectNotFoundException，DuplicateKeyException异常，处理包装成BusinessException异常抛出。业务层中应根据业务的不同，将异常尽量分得细一点，否则，自定义的异常没有太多的意义。\n\n来自 <http://gaojiewyh.iteye.com/blog/1739662>\n\n```\npublic addUser(User user) throws BusinessException,SystemException{  \n        try{  \n              userDao.addUser(user);  \n        }catch(DuplicatekeyException ex){  \n             log.infor(\"......................\");  \n             throw new BusinessException(ex.getCause(),\"国际化信息\"）；  \n        }catch(DataAccessException ex){  \n             log.error(\"......................\");  \n             throw new SystemException(ex.getCause(),\"国际化信息\"）；  \n        }  \n}  \n\n```\n\n## 常见误区\n\n### 一、定义上捕获者需要用到的信息\n\n```\npublic class DuplicateUsernameException extends Exception {  \n}  \n```\n\n#### 理由: \n它除了有一个\"意义明确\"的名字以外没有任何有用的信息了。不要忘记Exception跟其他的Java类一样，客户端可以调用其中的方法来得到更多的信息。  \n\n```\npublic class DuplicateUsernameException extends Exception {\n    private static final long serialVersionUID = -6113064394525919823L;\n    private String username = null;\n    private String[] availableNames = new String[0];\n \n    public DuplicateUsernameException(String username) {\n            this.username = username;\n    }\n \n    public DuplicateUsernameException(String username, String[] availableNames) {\n            this(username);\n            this.availableNames = availableNames;\n    }\n \n    public String requestedUsername() {\n            return this.username;\n    }\n \n    public String[] availableNames() {\n            return this.availableNames;\n    }\n}\n```\n来自 <http://www.iteye.com/topic/857443>\n\n### 二、尽可能避免（因抛出异常带来的）接口污染\n\n来自 <http://lavasoft.blog.51cto.com/62575/244138/>\n\n### 三、异常链传播\n\n```\npublic void dataAccessCode(){\n    try{\n        ..some code that throws SQLException\n    }catch(SQLException ex){\n        throw new RuntimeException(ex);\n    }\n}\n```\n\n## 参考链接：\n\n1. [Best Practices for Exception Handling](http://www.onjava.com/pub/a/onjava/2003/11/19/exceptions.html?page=2)\n\n2. [基于Spring的异常体系处理](http://gaojiewyh.iteye.com/blog/1739662)\n\n3. [spring mvc 异常统一处理](http://gaojiewyh.iteye.com/blog/1297746#bc2369985)\n\n4. [异常处理最佳实践.md](https://github.com/kyfxbl/blog/blob/master/source/_posts/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.md)\n","source":"_posts/java-exception.md","raw":"---\ntitle: Java中的异常处理\ntags: exception\ncategory: java\ntoc: true\nabbrlink: '22260569'\ndate: 2016-09-25 22:49:04\n---\n\n## 异常的分类\n\n* 业务异常\n\n> 处理业务的时候80%的时候是没问题的，但可能有20%的时候事情没\n> 有按理想的方向发展。例如注册用户的时候，正常情况是注册成功，但\n> 可能用户提交请求的时候，系统发现用户名已经被别人注册了，这是就\n> 可以抛出一个UserAlreadyExistsException\n>\n来自 <https://github.com/kyfxbl/blog/blob/master/source/_posts/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.md>\n\n业务异常一般是上层可以处理的，一般声明为`CheckedException`，强制上层进行捕获处理\n\n业务异常定义示例摘自[spring mvc 异常统一处理](http://gaojiewyh.iteye.com/blog/1297746#bc2369985)：\n\n```\npublic class BusinessException extends Exception {  \n   \n    private static final long serialVersionUID = 1L;  \n   \n    public BusinessException() {  \n        // TODO Auto-generated constructor stub  \n    }  \n   \n    public BusinessException(String message) {  \n        super(message);  \n        // TODO Auto-generated constructor stub  \n    }  \n   \n    public BusinessException(Throwable cause) {  \n        super(cause);  \n        // TODO Auto-generated constructor stub  \n    }  \n   \n    public BusinessException(String message, Throwable cause) {  \n        super(message, cause);  \n        // TODO Auto-generated constructor stub  \n    }  \n   \n}  \n```\n\n一般是继承自`Exception`, 这样就成为`CheckedException`， 必须强制捕获\n\n* 逻辑异常\n\n> 系统异常与具体业务流程没有直接的关系，例如编程错误导致的NullPointExcpetion，\n> 还有环境问题，例如磁盘损坏或者网络连接不稳定造成了IOException。\n\n> 来自  <https://github.com/kyfxbl/blog/blob/master/source/_posts/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.md>\n\n系统异常一般是上层无法处理的，所以一般声明为`UncheckedException`，不强制用户捕获。\n```\npublic class SystemException extends RuntimeException {  \n   \n    private static final long serialVersionUID = 1L;  \n   \n    public SystemException() {  \n        // TODO Auto-generated constructor stub  \n    }  \n   \n    /** \n     * @param message \n     */  \n    public SystemException(String message) {  \n        super(message);  \n        // TODO Auto-generated constructor stub  \n    }  \n   \n    /** \n     * @param cause \n     */  \n    public SystemException(Throwable cause) {  \n        super(cause);  \n        // TODO Auto-generated constructor stub  \n    }  \n   \n    /** \n     * @param message \n     * @param cause \n     */  \n    public SystemException(String message, Throwable cause) {  \n        super(message, cause);  \n        // TODO Auto-generated constructor stub  \n    }  \n   \n}  \n\n```\n\n## 异常的捕获\n\n• 在Service层中应该捕获Dao层抛出的异常并且包装成相应的异常，如业务异常、系统异常等\n\n  业务层中，通过异常链保存原始异常信息。程序员必须自己编码来保存原始异常的信息。在业务逻辑中，捕获DataAccessException异常，处理包装成SystemException异常抛出。捕获ObjectNotFoundException，DuplicateKeyException异常，处理包装成BusinessException异常抛出。业务层中应根据业务的不同，将异常尽量分得细一点，否则，自定义的异常没有太多的意义。\n\n来自 <http://gaojiewyh.iteye.com/blog/1739662>\n\n```\npublic addUser(User user) throws BusinessException,SystemException{  \n        try{  \n              userDao.addUser(user);  \n        }catch(DuplicatekeyException ex){  \n             log.infor(\"......................\");  \n             throw new BusinessException(ex.getCause(),\"国际化信息\"）；  \n        }catch(DataAccessException ex){  \n             log.error(\"......................\");  \n             throw new SystemException(ex.getCause(),\"国际化信息\"）；  \n        }  \n}  \n\n```\n\n## 常见误区\n\n### 一、定义上捕获者需要用到的信息\n\n```\npublic class DuplicateUsernameException extends Exception {  \n}  \n```\n\n#### 理由: \n它除了有一个\"意义明确\"的名字以外没有任何有用的信息了。不要忘记Exception跟其他的Java类一样，客户端可以调用其中的方法来得到更多的信息。  \n\n```\npublic class DuplicateUsernameException extends Exception {\n    private static final long serialVersionUID = -6113064394525919823L;\n    private String username = null;\n    private String[] availableNames = new String[0];\n \n    public DuplicateUsernameException(String username) {\n            this.username = username;\n    }\n \n    public DuplicateUsernameException(String username, String[] availableNames) {\n            this(username);\n            this.availableNames = availableNames;\n    }\n \n    public String requestedUsername() {\n            return this.username;\n    }\n \n    public String[] availableNames() {\n            return this.availableNames;\n    }\n}\n```\n来自 <http://www.iteye.com/topic/857443>\n\n### 二、尽可能避免（因抛出异常带来的）接口污染\n\n来自 <http://lavasoft.blog.51cto.com/62575/244138/>\n\n### 三、异常链传播\n\n```\npublic void dataAccessCode(){\n    try{\n        ..some code that throws SQLException\n    }catch(SQLException ex){\n        throw new RuntimeException(ex);\n    }\n}\n```\n\n## 参考链接：\n\n1. [Best Practices for Exception Handling](http://www.onjava.com/pub/a/onjava/2003/11/19/exceptions.html?page=2)\n\n2. [基于Spring的异常体系处理](http://gaojiewyh.iteye.com/blog/1739662)\n\n3. [spring mvc 异常统一处理](http://gaojiewyh.iteye.com/blog/1297746#bc2369985)\n\n4. [异常处理最佳实践.md](https://github.com/kyfxbl/blog/blob/master/source/_posts/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.md)\n","slug":"java-exception","published":1,"updated":"2017-02-02T08:19:13.620Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgam003bw4py8lyb4dx9"},{"title":"jar文件查看","toc":true,"date":"2017-01-27T09:03:36.000Z","_content":"\n\n查看jar包内容\n\n```bash\nunzip -q -c myarchive.jar META-INF/MANIFEST.MF\n```\n> `-q` will suppress verbose output from the unzip program\n\n> `-c` will extract to stdout\n\n```\nunzip -q -c servlet-api.jar META-INF/MANIFEST.MF\nManifest-Version: 1.0\nAnt-Version: Apache Ant 1.8.1\nCreated-By: 1.6.0_45-b06 (Sun Microsystems Inc.)\nX-Compile-Source-JDK: 1.6\nX-Compile-Target-JDK: 1.6\n\nName: javax/servlet/\nSpecification-Title: Java API for Servlets\nSpecification-Version: 3.0\nSpecification-Vendor: Sun Microsystems, Inc.\nImplementation-Title: javax.servlet\nImplementation-Version: 3.0.FR\nImplementation-Vendor: Apache Software Foundation\n\n```\n\n## jar命令\n\n在linux下如何查看一个jar文件中有哪些类呢？\n\n`jar tf test.jar`\n\n```bash\nMETA-INF/\nMETA-INF/MANIFEST.MF\njavax/\njavax/servlet/\njavax/servlet/annotation/\njavax/servlet/descriptor/\njavax/servlet/http/\n...\njavax/servlet/resources/xml.xsd\nMETA-INF/NOTICE\nMETA-INF/LICENSE\n```\n\n## grepjar\n\n有些时候，我们需要查看一个jar文件中是否包含了某个方法，这个在linux下可以通过下面的命令来查询\n\n`grepjar methodName class.jar`\n\n```bash\n$ grepjar 'getStatus' servlet-api.jar\njavax/servlet/http/HttpServletResponse.class:getStatus\njavax/servlet/http/HttpServletResponseWrapper.class:getStatus\n```\n\n参数：\n\n||option || meaning ||\n|-b |  Print byte offset of match.|\n|--|---------------|\n|-c |  Print number of matches.|\n|-i |  Compare case-insensitively.|\n|-n |  Print line number of each match.|\n|-s |  Suppress error messages.|\n|-w |  Force PATTERN to match only whole words.|\n|-e | PATTERN  Use PATTERN as regular expression.|\n|--help |  Print help, then exit.|\n|-V |  |\n|--version |   Print version number, then exit.|\n\n\n## 参考\n\n[How to read MANIFEST.MF file from JAR using Bash - Stack Overflow](http://stackoverflow.com/questions/7066063/how-to-read-manifest-mf-file-from-jar-using-bash)\n\n[吴峰子 — linux查看jar中的类以及类中方法命令](http://xiaofengwu.tumblr.com/post/63518704051/linux%E6%9F%A5%E7%9C%8Bjar%E4%B8%AD%E7%9A%84%E7%B1%BB%E4%BB%A5%E5%8F%8A%E7%B1%BB%E4%B8%AD%E6%96%B9%E6%B3%95%E5%91%BD%E4%BB%A4)\n\n[grepdiff - Unix, Linux Command](http://www.tutorialspoint.com/unix_commands/grepjar.htm)\n\n\n","source":"_posts/jar.md","raw":"---\ntitle: jar文件查看\ntags: jar\ncategory: java\ntoc: true\ndate: 2017-01-27 17:03:36\n---\n\n\n查看jar包内容\n\n```bash\nunzip -q -c myarchive.jar META-INF/MANIFEST.MF\n```\n> `-q` will suppress verbose output from the unzip program\n\n> `-c` will extract to stdout\n\n```\nunzip -q -c servlet-api.jar META-INF/MANIFEST.MF\nManifest-Version: 1.0\nAnt-Version: Apache Ant 1.8.1\nCreated-By: 1.6.0_45-b06 (Sun Microsystems Inc.)\nX-Compile-Source-JDK: 1.6\nX-Compile-Target-JDK: 1.6\n\nName: javax/servlet/\nSpecification-Title: Java API for Servlets\nSpecification-Version: 3.0\nSpecification-Vendor: Sun Microsystems, Inc.\nImplementation-Title: javax.servlet\nImplementation-Version: 3.0.FR\nImplementation-Vendor: Apache Software Foundation\n\n```\n\n## jar命令\n\n在linux下如何查看一个jar文件中有哪些类呢？\n\n`jar tf test.jar`\n\n```bash\nMETA-INF/\nMETA-INF/MANIFEST.MF\njavax/\njavax/servlet/\njavax/servlet/annotation/\njavax/servlet/descriptor/\njavax/servlet/http/\n...\njavax/servlet/resources/xml.xsd\nMETA-INF/NOTICE\nMETA-INF/LICENSE\n```\n\n## grepjar\n\n有些时候，我们需要查看一个jar文件中是否包含了某个方法，这个在linux下可以通过下面的命令来查询\n\n`grepjar methodName class.jar`\n\n```bash\n$ grepjar 'getStatus' servlet-api.jar\njavax/servlet/http/HttpServletResponse.class:getStatus\njavax/servlet/http/HttpServletResponseWrapper.class:getStatus\n```\n\n参数：\n\n||option || meaning ||\n|-b |  Print byte offset of match.|\n|--|---------------|\n|-c |  Print number of matches.|\n|-i |  Compare case-insensitively.|\n|-n |  Print line number of each match.|\n|-s |  Suppress error messages.|\n|-w |  Force PATTERN to match only whole words.|\n|-e | PATTERN  Use PATTERN as regular expression.|\n|--help |  Print help, then exit.|\n|-V |  |\n|--version |   Print version number, then exit.|\n\n\n## 参考\n\n[How to read MANIFEST.MF file from JAR using Bash - Stack Overflow](http://stackoverflow.com/questions/7066063/how-to-read-manifest-mf-file-from-jar-using-bash)\n\n[吴峰子 — linux查看jar中的类以及类中方法命令](http://xiaofengwu.tumblr.com/post/63518704051/linux%E6%9F%A5%E7%9C%8Bjar%E4%B8%AD%E7%9A%84%E7%B1%BB%E4%BB%A5%E5%8F%8A%E7%B1%BB%E4%B8%AD%E6%96%B9%E6%B3%95%E5%91%BD%E4%BB%A4)\n\n[grepdiff - Unix, Linux Command](http://www.tutorialspoint.com/unix_commands/grepjar.htm)\n\n\n","slug":"jar","published":1,"updated":"2017-02-02T09:10:02.021Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgar003fw4py7wofbmsk"},{"title":"jackson对guava新增集合的支持","toc":true,"date":"2016-11-15T16:10:21.000Z","_content":"\n\n\n## 问题\n\nGuava中新增了不少好用的集合比如`MultiMap`、`MultiSet`、`Table`等，当使用jackson进行序列化的时候\n\n这些集合并不能正确的序列化，出现下面的情况：\n\n正常序列化应该为：\n```json\n{\n  \"fields\":{\n    \"Field1\":[\n      {\n        \"index\":0,\n        \"header\":\"Field1\",\n        \"fieldType\":\"fieldtype\",\n        \"description\":null,\n        \"cleanHeader\":null\n      }\n    ],\n    \"Field2\":[\n      {\n        \"index\":1,\n        \"header\":\"Field2\",\n        \"fieldType\":\"fieldtype\",\n        \"description\":null,\n        \"cleanHeader\":null\n      }\n    ]\n  }\n}\n```\n\n使用默认的spring出现的是：\n\n```json\n{\n  \"fields\":{\n    \"empty\": false\n  }\n}\n```\n\n## 解决方案\n\n要解决这个问题就要手动向jackson的ObjectMapper中注册一个Module\n\n```java\nTable study = getTable();\n\nObjectMapper mapper = new ObjectMapper();\nmapper.registerModule(new GuavaModule());\n\nString tableString = mapper.writeValueAsString(table);\n```\n\n\n\n这个`GuavaModule`是jackson对Guava集合支持的包，它的maven依赖如下：\n\n```xml\n<dependency>\n  <groupId>com.fasterxml.jackson.datatype</groupId>\n  <artifactId>jackson-datatype-guava</artifactId>\n  <version>2.2.0</version>\n</dependency>\n```\n\n也可以使用基于xml配置的方式将这个Module导入\n```xml\n<!-- JSON parser configuration-->\n<bean id=\"guavaObjectMapper\" class=\"com.fasterxml.jackson.databind.ObjectMapper\"/>\n\n<bean class=\"org.springframework.beans.factory.config.MethodInvokingFactoryBean\">\n    <property name=\"targetObject\"><ref local=\"guavaObjectMapper\" /></property>\n    <property name=\"targetMethod\"><value>registerModule</value></property>\n    <property name=\"arguments\">\n        <list>\n            <bean id=\"guavaModule\" class=\"com.fasterxml.jackson.datatype.guava.GuavaModule\"/>\n        </list>\n    </property>\n</bean>\n\n\n<mvc:annotation-driven>\n    <mvc:message-converters register-defaults=\"true\">\n        <bean class=\"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter\">\n            <property name=\"objectMapper\">\n                <ref  local=\"guavaObjectMapper\"/>\n            </property>\n        </bean>\n    </mvc:message-converters>\n</mvc:annotation-driven>\n```\n\n## 支持的类型\n\n{%  asset_img   jar.png  %}\n\n\n\n\n## 参考\n\n1. [Spring MVC configuration + Jackson + Guava multimap](http://stackoverflow.com/questions/26979120/spring-mvc-configuration-jackson-guava-multimap)\n\n2. [Json to guava multimap](http://www.leveluplunch.com/java/examples/convert-json-to-guava-multimap-with-jackson/)\n","source":"_posts/jackson-guava.md","raw":"---\ntitle: jackson对guava新增集合的支持\ntags: jackson\ncategory: spring\ntoc: true\ndate: 2016-11-16 00:10:21\n---\n\n\n\n## 问题\n\nGuava中新增了不少好用的集合比如`MultiMap`、`MultiSet`、`Table`等，当使用jackson进行序列化的时候\n\n这些集合并不能正确的序列化，出现下面的情况：\n\n正常序列化应该为：\n```json\n{\n  \"fields\":{\n    \"Field1\":[\n      {\n        \"index\":0,\n        \"header\":\"Field1\",\n        \"fieldType\":\"fieldtype\",\n        \"description\":null,\n        \"cleanHeader\":null\n      }\n    ],\n    \"Field2\":[\n      {\n        \"index\":1,\n        \"header\":\"Field2\",\n        \"fieldType\":\"fieldtype\",\n        \"description\":null,\n        \"cleanHeader\":null\n      }\n    ]\n  }\n}\n```\n\n使用默认的spring出现的是：\n\n```json\n{\n  \"fields\":{\n    \"empty\": false\n  }\n}\n```\n\n## 解决方案\n\n要解决这个问题就要手动向jackson的ObjectMapper中注册一个Module\n\n```java\nTable study = getTable();\n\nObjectMapper mapper = new ObjectMapper();\nmapper.registerModule(new GuavaModule());\n\nString tableString = mapper.writeValueAsString(table);\n```\n\n\n\n这个`GuavaModule`是jackson对Guava集合支持的包，它的maven依赖如下：\n\n```xml\n<dependency>\n  <groupId>com.fasterxml.jackson.datatype</groupId>\n  <artifactId>jackson-datatype-guava</artifactId>\n  <version>2.2.0</version>\n</dependency>\n```\n\n也可以使用基于xml配置的方式将这个Module导入\n```xml\n<!-- JSON parser configuration-->\n<bean id=\"guavaObjectMapper\" class=\"com.fasterxml.jackson.databind.ObjectMapper\"/>\n\n<bean class=\"org.springframework.beans.factory.config.MethodInvokingFactoryBean\">\n    <property name=\"targetObject\"><ref local=\"guavaObjectMapper\" /></property>\n    <property name=\"targetMethod\"><value>registerModule</value></property>\n    <property name=\"arguments\">\n        <list>\n            <bean id=\"guavaModule\" class=\"com.fasterxml.jackson.datatype.guava.GuavaModule\"/>\n        </list>\n    </property>\n</bean>\n\n\n<mvc:annotation-driven>\n    <mvc:message-converters register-defaults=\"true\">\n        <bean class=\"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter\">\n            <property name=\"objectMapper\">\n                <ref  local=\"guavaObjectMapper\"/>\n            </property>\n        </bean>\n    </mvc:message-converters>\n</mvc:annotation-driven>\n```\n\n## 支持的类型\n\n{%  asset_img   jar.png  %}\n\n\n\n\n## 参考\n\n1. [Spring MVC configuration + Jackson + Guava multimap](http://stackoverflow.com/questions/26979120/spring-mvc-configuration-jackson-guava-multimap)\n\n2. [Json to guava multimap](http://www.leveluplunch.com/java/examples/convert-json-to-guava-multimap-with-jackson/)\n","slug":"jackson-guava","published":1,"updated":"2017-02-02T09:10:02.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgau003jw4py5h7pp408"},{"title":"idea文件模板","toc":true,"date":"2016-12-22T17:10:59.000Z","_content":"\n\n# 版权信息\n\n代码前面一般都会有相应的版权信息，拿guava的代码为例\n\n```java\n/*\n * Copyright (C) 2007 The Guava Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.common.collect;\n\n```\n\n## idea自动生成版权信息\n\n`File` > `Settings` > `Copyright` > `Copyright Profiles`\n\n新建一个profile，填入如下的内容\n```\n/* * Copyright (c) $today.year xx.com. All Rights Reserved. */\n```\n\n`$today.year`代表当前的年\n\n{%  asset_img   profiles.jpg  %}\n\n\n\n\n新建java文件时就自动生成了版权信息：\n\n```java\n/*\n *  * Copyright (c) 2016 Qunar.com. All Rights Reserved. \n */\n\npackage com.xxx.handler;\n```\n\n\n# 作者、日期、邮箱等\n\n`File` > `Settings` > `File and Ocde Templates` > `Includes` > `File Header`\n\n```java\n#set( $email = \"xx@xx.com\")\n#set( $author = \"xxx\")\n\n/**\n * @author ${author}\n * @email ${email}\n * @date ${DATE} ${TIME}\n */\n\n```\n\n这个使用的`velocity`渲染的，可以参考`velocity`的语法\n\n","source":"_posts/idea-template.md","raw":"---\ntitle: idea文件模板\ntags: template\ncategory: idea\ntoc: true\ndate: 2016-12-23 01:10:59\n---\n\n\n# 版权信息\n\n代码前面一般都会有相应的版权信息，拿guava的代码为例\n\n```java\n/*\n * Copyright (C) 2007 The Guava Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.common.collect;\n\n```\n\n## idea自动生成版权信息\n\n`File` > `Settings` > `Copyright` > `Copyright Profiles`\n\n新建一个profile，填入如下的内容\n```\n/* * Copyright (c) $today.year xx.com. All Rights Reserved. */\n```\n\n`$today.year`代表当前的年\n\n{%  asset_img   profiles.jpg  %}\n\n\n\n\n新建java文件时就自动生成了版权信息：\n\n```java\n/*\n *  * Copyright (c) 2016 Qunar.com. All Rights Reserved. \n */\n\npackage com.xxx.handler;\n```\n\n\n# 作者、日期、邮箱等\n\n`File` > `Settings` > `File and Ocde Templates` > `Includes` > `File Header`\n\n```java\n#set( $email = \"xx@xx.com\")\n#set( $author = \"xxx\")\n\n/**\n * @author ${author}\n * @email ${email}\n * @date ${DATE} ${TIME}\n */\n\n```\n\n这个使用的`velocity`渲染的，可以参考`velocity`的语法\n\n","slug":"idea-template","published":1,"updated":"2017-02-02T09:10:03.085Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgb0003nw4pyke2uifaw"},{"title":"Hexo搭建博客","date":"2015-10-08T02:30:14.000Z","_content":"Welcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n\n### hexo 草稿\n\n``` bash\n$ hexo new draft <title>\n$ hexo server --draft\n$ hexo publish <filename>\n```\n\n### 静态资源\n\n对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。这个稍微有些复杂但是管理资源非常方便的功能可以通过将 config.yml 文件中的 post_asset_folder 选项设为 true 来打开。\n```\n_config.yml\npost_asset_folder: true\n```\n\n当资源文件管理功能打开后，Hexo将会在你每一次通过 hexo new [layout] <title> 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个 markdown 文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。\n\n### 内链\n\n[Hexo使用内链及文章中加入图片的方法](http://marshal.ohtly.com/2015/09/12/internal-link-and-image-for-hexo/)\n\n### seo\n\n[Hexo Seo优化让你的博客在google搜索排名第一](http://www.jianshu.com/p/86557c34b671)\n\n## Markdown 语法简介\n```\n\n1、分段： 两个回车\n\n2、换行 两个空格 + 回车\n\n3、标题 #~###### 井号的个数表示几级标题，即Markdown可以表示一级标题到六级标题\n\n4、引用 >\n\n5、列表 *，+，-，1.，选其中之一，注意后面有个空格\n\n6、代码区块 四个空格开头\n\n7、链接 [文字](链接地址)\n\n8、图片 {% 图片地址 图片说明 %}\n，图片地址可以是本地路劲，也可以是网络地址\n\n9、强调 **文字**，__文字__，_文字_，*文字*\n\n10、代码 ```\n\n >[Markdown——入门指南](http://www.jianshu.com/p/1e402922ee32/)\n\n ## 在Hexo中插入gist\n\n ```\n {% gist 1f10fa5b8b76f3b5efaf74ad3d6da413  %}\n ```\n 其中一长串是gist生成的id\n\n\n## 使用markdown来画mindmap\n\n{% pullquote mindmap %}\n#主题\n##一级分支\n###二级分支\n##一级分支\n##一级分支\n###二级分支\n####三级分支\n{% endpullquote %}","source":"_posts/hello-world.md","raw":"---\ntitle: Hexo搭建博客\ncategories: hexo\ntags: hexo install\ndate: 2015-10-08 10:30:14\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n\n### hexo 草稿\n\n``` bash\n$ hexo new draft <title>\n$ hexo server --draft\n$ hexo publish <filename>\n```\n\n### 静态资源\n\n对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。这个稍微有些复杂但是管理资源非常方便的功能可以通过将 config.yml 文件中的 post_asset_folder 选项设为 true 来打开。\n```\n_config.yml\npost_asset_folder: true\n```\n\n当资源文件管理功能打开后，Hexo将会在你每一次通过 hexo new [layout] <title> 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个 markdown 文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。\n\n### 内链\n\n[Hexo使用内链及文章中加入图片的方法](http://marshal.ohtly.com/2015/09/12/internal-link-and-image-for-hexo/)\n\n### seo\n\n[Hexo Seo优化让你的博客在google搜索排名第一](http://www.jianshu.com/p/86557c34b671)\n\n## Markdown 语法简介\n```\n\n1、分段： 两个回车\n\n2、换行 两个空格 + 回车\n\n3、标题 #~###### 井号的个数表示几级标题，即Markdown可以表示一级标题到六级标题\n\n4、引用 >\n\n5、列表 *，+，-，1.，选其中之一，注意后面有个空格\n\n6、代码区块 四个空格开头\n\n7、链接 [文字](链接地址)\n\n8、图片 {% 图片地址 图片说明 %}\n，图片地址可以是本地路劲，也可以是网络地址\n\n9、强调 **文字**，__文字__，_文字_，*文字*\n\n10、代码 ```\n\n >[Markdown——入门指南](http://www.jianshu.com/p/1e402922ee32/)\n\n ## 在Hexo中插入gist\n\n ```\n {% gist 1f10fa5b8b76f3b5efaf74ad3d6da413  %}\n ```\n 其中一长串是gist生成的id\n\n\n## 使用markdown来画mindmap\n\n{% pullquote mindmap %}\n#主题\n##一级分支\n###二级分支\n##一级分支\n##一级分支\n###二级分支\n####三级分支\n{% endpullquote %}","slug":"hello-world","published":1,"updated":"2017-02-02T09:10:03.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgbd003rw4pyuqj5u8vh"},{"title":"guava-eventbus","toc":true,"date":"2017-01-16T17:30:26.000Z","_content":"\n\n## 从观察者模式说起\n\n### 观察者模式类图\n\n观察者模式是软件设计中经常使用到的一种模式，又叫发布-订阅模式（Publish/Subscribe）、模型-视图(Model/View)模式、源-监听器（Source/Listener）模式或从属者（Dependents）模式。\n\n{% plantuml %}\n\npackage subject{\n  object Subject {\n  + notifyObservers()\n  + addObserver()\n  + deleteObserver()\n  }\n\n  object ConcreteSubjectA{\n  + notifyObservers()\n  }\n\n  object ConcreteSubjectB{\n  + notifyObservers()\n  }\n\n  Subject <|-- ConcreteSubjectA\n  Subject <|-- ConcreteSubjectB\n}\n\npackage observer{\n  object Observer{\n  + notify()\n  }\n\n  Subject o-- \"*\" Observer : (Observer Collection)\n\n  object ConcreteObserverA{\n  + notify()\n  }\n\n  object ConcreteObserverB{\n  + notify()\n  }\n\n  Observer <|-- ConcreteObserverA\n  Observer <|-- ConcreteObserverB\n\n}\n\nConcreteSubjectA -[#green,dotted]> ConcreteObserverA\nConcreteSubjectA  -[#green,dotted]> ConcreteObserverB\n\n{% endplantuml %}\n\n### Java中的支持\n\nJava中有一个`Observable`类和一个`Observer`接口, `Observable`类已经实现了添加、删除观察者的方法。\n\n- 主题继承自`Observable`，继承一些便利方法\n\n```java\npublic class Subject extends Observable {\n\n    private final String subject = \"play with some fun\";\n\n    public void push(String message) {\n        notifyObservers(message);\n    }\n\n    public String getSubject() {\n        return subject;\n    }\n\n    public static void main(String[] args) {\n        Subject subject = new Subject();\n        subject.addObserver(new Watcher(\"001\"));\n        subject.addObserver(new Watcher(\"007\"));\n        subject.setChanged();\n        //will do nothing until setChanged() is called\n        subject.push(\"My watch is ended!\");\n    }\n}\n\n```\n\n\n- 观察者继承`Observer`接口，只有一个`update`方法用来更新数据\n\n```java\npublic class Watcher implements Observer {\n\n    private final String id;\n\n    public Watcher(String id) {\n        this.id = id;\n        System.out.println(\"My watch begins! \" + id);\n    }\n\n    @Override\n    public void update(Observable o, Object arg) {\n        System.out.println(\"-----------------------------------------------------------\");\n        System.out.println(id);\n        Subject subject = (Subject) o;\n        System.out.println(\"subject is : \" + subject.getSubject());\n        System.out.println(\"update data is : \" + (String)arg );\n    }\n}\n```\n\n输出示例：\n\n```\nMy watch begins! 001\nMy watch begins! 007\n-----------------------------------------------------------\n007\nsubject is : play with some fun\nupdate data is : My watch is ended!\n-----------------------------------------------------------\n001\nsubject is : play with some fun\nupdate data is : My watch is ended!\n\n```\n\n### EventBus\n\n>EventBus allows publish-subscribe-style communication between components without requiring the components to explicitly register with one another (and thus be aware of each other). It is designed exclusively to replace traditional Java in-process event distribution using explicit registration. It is not a general-purpose publish-subscribe system, nor is it intended for interprocess communication.\n\n\nEventBus的优点：\n\n- 无需定义接口，使用注解的形式。\n- 可以在一个类中实现多个事件的捕获。\n\n> Due to erasure, no single class can implement a generic interface more than once with different type parameters. \n\n- 支持子类的捕获。\n- 支持捕获无人处理的event（让我想起了死漂）。\n- 传递的事件类型可以是任意的。\n\n\n```java\npublic class Person {\n    private String name;\n    private int age;\n\n    public Person() {\n\n    }\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return \"Person{\" +\n                \"name='\" + name + '\\'' +\n                \", age=\" + age +\n                '}';\n    }\n}\n\npublic class Customer extends Person  implements Serializable {\n\n    private List<String> hobbies;\n\n    public Customer(String name, int age) {\n        super(name, age);\n    }\n\n    public List<String> getHobbies() {\n        return hobbies;\n    }\n\n    public void setHobbies(List<String> hobbies) {\n        this.hobbies = hobbies;\n    }\n}\n\n```\n\n定义一个`Person`类和一个`Customer`类，用于测试继承关系的捕捉\n\n```java\npublic class EventBusTest {\n\n    public static void main(String[] args) {\n        EventBus eventBus = new EventBus();\n        eventBus.register(new EventBusChangeRecorder());\n        Customer customer = new Customer(\"customer\", 66);\n        Person p = new Person(\"person\", 11);\n        eventBus.post(customer);\n        eventBus.post(p);\n        eventBus.post(new Integer(123));\n        eventBus.post(\"Hello World\");\n    }\n\n    static class EventBusChangeRecorder {\n        @Subscribe\n        public void recordCustomerChange(Customer customer) {\n            System.out.println(\"-----------------------------------\");\n            System.out.println(\"recieved change:\");\n            System.out.println(\"customer name: \" + customer.getName());\n            System.out.println(\"cutomer age: \" + customer.getAge());\n            System.out.println(\"\\n\\n\");\n        }\n\n        @Subscribe\n        public void valueChange(Integer val) {//注意方法的类型\n            System.out.println(\"-----------------------------------\");\n            System.out.println(\"val = \" + val);\n            System.out.println(\"\\n\");\n        }\n\n        @Subscribe\n        public void deadEvent(DeadEvent deadEvent) {\n            System.out.println(\"-----------------------------------\");\n            System.out.println(\"deadEvent = \" + deadEvent);\n            System.out.println(\"\\n\");\n        }\n\n        @Subscribe\n        public void hierarchy(Person person) {\n            System.out.println(\"-----------------------------------\");\n            //will recieve all person and it's subtype\n            System.out.println(person);\n            System.out.println(\"\\n\");\n        }\n\n    }\n\n}\n\n\n```\n\n在我的电脑上的执行结果:\n\n```\n-----------------------------------\nrecieved change:\ncustomer name: customer\ncutomer age: 66\n\n\n\n-----------------------------------\nPerson{name='customer', age=66}\n\n\n-----------------------------------\nPerson{name='person', age=11}\n\n\n-----------------------------------\nval = 123\n\n\n-----------------------------------\ndeadEvent = DeadEvent{source=EventBus{default}, event=Hello World}\n```\n\n### 源码解析\n\n#### listener注册过程\n\n`EventBus`中有一个成员变量叫做`subscribers`, 负责管理所有注册进来的listener\n\n```java\n  private final SubscriberRegistry subscribers = new SubscriberRegistry(this);\n```\n\n`register(Object object)`方法就是调用`subscribers`的注册方法\n\n```java\n  /**\n   * Registers all subscriber methods on {@code object} to receive events.\n   *\n   * @param object object whose subscriber methods should be registered.\n   */\n  public void register(Object object) {\n    subscribers.register(object);\n  }\n\n    /**\n   * Registers all subscriber methods on the given listener object.\n   */\n  void register(Object listener) {\n    //解析注解，生成<EventType, ListenMethod>的multimap\n    Multimap<Class<?>, Subscriber> listenerMethods = findAllSubscribers(listener);\n\n    for (Map.Entry<Class<?>, Collection<Subscriber>> entry : listenerMethods.asMap().entrySet()) {\n      Class<?> eventType = entry.getKey();\n      Collection<Subscriber> eventMethodsInListener = entry.getValue();\n\n      CopyOnWriteArraySet<Subscriber> eventSubscribers = subscribers.get(eventType);\n\n      //新建或者添加到已有的事件对应的Listener中\n      if (eventSubscribers == null) {\n        CopyOnWriteArraySet<Subscriber> newSet = new CopyOnWriteArraySet<Subscriber>();\n        eventSubscribers =\n            MoreObjects.firstNonNull(subscribers.putIfAbsent(eventType, newSet), newSet);\n      }\n\n      eventSubscribers.addAll(eventMethodsInListener);\n    }\n  }\n\n\n    /**\n   * Returns all subscribers for the given listener grouped by the type of event they subscribe to.\n   */\n  private Multimap<Class<?>, Subscriber> findAllSubscribers(Object listener) {\n    Multimap<Class<?>, Subscriber> methodsInListener = HashMultimap.create();\n    Class<?> clazz = listener.getClass();\n    for (Method method : getAnnotatedMethods(clazz)) {//有缓存哦\n      Class<?>[] parameterTypes = method.getParameterTypes();\n      Class<?> eventType = parameterTypes[0];\n      methodsInListener.put(eventType, Subscriber.create(bus, listener, method));\n    }\n    return methodsInListener;\n  }\n```\n\n在`subscribers`的注册方法中完成了对注解`@Subscribe`的解析。\n\n#### 事件分发过程\n\n`EventBus`的post方法\n\n```java\n  /**\n   * Posts an event to all registered subscribers. This method will return successfully after the\n   * event has been posted to all subscribers, and regardless of any exceptions thrown by\n   * subscribers.\n   *\n   * <p>If no subscribers have been subscribed for {@code event}'s class, and {@code event} is not\n   * already a {@link DeadEvent}, it will be wrapped in a DeadEvent and reposted.\n   *\n   * @param event event to post.\n   */\n  public void post(Object event) {\n    Iterator<Subscriber> eventSubscribers = subscribers.getSubscribers(event);\n    if (eventSubscribers.hasNext()) {\n      dispatcher.dispatch(event, eventSubscribers);\n    } else if (!(event instanceof DeadEvent)) {\n      // the event had no subscribers and was not itself a DeadEvent\n      post(new DeadEvent(this, event));\n    }\n  }\n```\n\n这里的`dispatcher`默认是`Dispatcher.perThreadDispatchQueue()`\n\n它的`dispatch`方法实现如下：\n\n```java\n\n    /**\n     * Per-thread queue of events to dispatch.\n     */\n    private final ThreadLocal<Queue<Event>> queue =\n        new ThreadLocal<Queue<Event>>() {\n          @Override\n          protected Queue<Event> initialValue() {\n            return Queues.newArrayDeque();\n          }\n        };\n\n    /**\n     * Per-thread dispatch state, used to avoid reentrant event dispatching.\n     */\n    private final ThreadLocal<Boolean> dispatching =\n        new ThreadLocal<Boolean>() {\n          @Override\n          protected Boolean initialValue() {\n            return false;\n          }\n        };\n\n\n    @Override\n    void dispatch(Object event, Iterator<Subscriber> subscribers) {\n      //入参校验\n      checkNotNull(event);\n      checkNotNull(subscribers);\n      //从ThreadLocal中拿到队列\n      Queue<Event> queueForThread = queue.get();\n      //先把事件入队列\n      queueForThread.offer(new Event(event, subscribers));\n\n      if (!dispatching.get()) {\n        dispatching.set(true);\n        try {\n          Event nextEvent;\n          //遍历队列中的事件，并分发给相应的订阅者\n          while ((nextEvent = queueForThread.poll()) != null) {\n            while (nextEvent.subscribers.hasNext()) {\n              nextEvent.subscribers.next().dispatchEvent(nextEvent.event);\n            }\n          }\n        } finally {\n          dispatching.remove();\n          queue.remove();\n        }\n      }\n    }\n```\n\nEventBus的注解提取（简单的缓存），构建相应的Map，以及事件的分发设计地非常好，有了一个大型系统完整的雏形。\n\n## 参考\n\n1. [Guava学习笔记：EventBus - peida - 博客园](http://www.cnblogs.com/peida/p/EventBus.html)\n\n2. [EventBusExplained · google/guava Wiki](https://github.com/google/guava/wiki/EventBusExplained)\n\n3. [观察者模式 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F)\n\n4. [观察者模式 — Graphic Design Patterns](http://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/observer.html)","source":"_posts/guava-eventbus.md","raw":"---\ntitle: guava-eventbus\ntags: event-bus\ncategory: guava\ntoc: true\ndate: 2017-01-17 01:30:26\n---\n\n\n## 从观察者模式说起\n\n### 观察者模式类图\n\n观察者模式是软件设计中经常使用到的一种模式，又叫发布-订阅模式（Publish/Subscribe）、模型-视图(Model/View)模式、源-监听器（Source/Listener）模式或从属者（Dependents）模式。\n\n{% plantuml %}\n\npackage subject{\n  object Subject {\n  + notifyObservers()\n  + addObserver()\n  + deleteObserver()\n  }\n\n  object ConcreteSubjectA{\n  + notifyObservers()\n  }\n\n  object ConcreteSubjectB{\n  + notifyObservers()\n  }\n\n  Subject <|-- ConcreteSubjectA\n  Subject <|-- ConcreteSubjectB\n}\n\npackage observer{\n  object Observer{\n  + notify()\n  }\n\n  Subject o-- \"*\" Observer : (Observer Collection)\n\n  object ConcreteObserverA{\n  + notify()\n  }\n\n  object ConcreteObserverB{\n  + notify()\n  }\n\n  Observer <|-- ConcreteObserverA\n  Observer <|-- ConcreteObserverB\n\n}\n\nConcreteSubjectA -[#green,dotted]> ConcreteObserverA\nConcreteSubjectA  -[#green,dotted]> ConcreteObserverB\n\n{% endplantuml %}\n\n### Java中的支持\n\nJava中有一个`Observable`类和一个`Observer`接口, `Observable`类已经实现了添加、删除观察者的方法。\n\n- 主题继承自`Observable`，继承一些便利方法\n\n```java\npublic class Subject extends Observable {\n\n    private final String subject = \"play with some fun\";\n\n    public void push(String message) {\n        notifyObservers(message);\n    }\n\n    public String getSubject() {\n        return subject;\n    }\n\n    public static void main(String[] args) {\n        Subject subject = new Subject();\n        subject.addObserver(new Watcher(\"001\"));\n        subject.addObserver(new Watcher(\"007\"));\n        subject.setChanged();\n        //will do nothing until setChanged() is called\n        subject.push(\"My watch is ended!\");\n    }\n}\n\n```\n\n\n- 观察者继承`Observer`接口，只有一个`update`方法用来更新数据\n\n```java\npublic class Watcher implements Observer {\n\n    private final String id;\n\n    public Watcher(String id) {\n        this.id = id;\n        System.out.println(\"My watch begins! \" + id);\n    }\n\n    @Override\n    public void update(Observable o, Object arg) {\n        System.out.println(\"-----------------------------------------------------------\");\n        System.out.println(id);\n        Subject subject = (Subject) o;\n        System.out.println(\"subject is : \" + subject.getSubject());\n        System.out.println(\"update data is : \" + (String)arg );\n    }\n}\n```\n\n输出示例：\n\n```\nMy watch begins! 001\nMy watch begins! 007\n-----------------------------------------------------------\n007\nsubject is : play with some fun\nupdate data is : My watch is ended!\n-----------------------------------------------------------\n001\nsubject is : play with some fun\nupdate data is : My watch is ended!\n\n```\n\n### EventBus\n\n>EventBus allows publish-subscribe-style communication between components without requiring the components to explicitly register with one another (and thus be aware of each other). It is designed exclusively to replace traditional Java in-process event distribution using explicit registration. It is not a general-purpose publish-subscribe system, nor is it intended for interprocess communication.\n\n\nEventBus的优点：\n\n- 无需定义接口，使用注解的形式。\n- 可以在一个类中实现多个事件的捕获。\n\n> Due to erasure, no single class can implement a generic interface more than once with different type parameters. \n\n- 支持子类的捕获。\n- 支持捕获无人处理的event（让我想起了死漂）。\n- 传递的事件类型可以是任意的。\n\n\n```java\npublic class Person {\n    private String name;\n    private int age;\n\n    public Person() {\n\n    }\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return \"Person{\" +\n                \"name='\" + name + '\\'' +\n                \", age=\" + age +\n                '}';\n    }\n}\n\npublic class Customer extends Person  implements Serializable {\n\n    private List<String> hobbies;\n\n    public Customer(String name, int age) {\n        super(name, age);\n    }\n\n    public List<String> getHobbies() {\n        return hobbies;\n    }\n\n    public void setHobbies(List<String> hobbies) {\n        this.hobbies = hobbies;\n    }\n}\n\n```\n\n定义一个`Person`类和一个`Customer`类，用于测试继承关系的捕捉\n\n```java\npublic class EventBusTest {\n\n    public static void main(String[] args) {\n        EventBus eventBus = new EventBus();\n        eventBus.register(new EventBusChangeRecorder());\n        Customer customer = new Customer(\"customer\", 66);\n        Person p = new Person(\"person\", 11);\n        eventBus.post(customer);\n        eventBus.post(p);\n        eventBus.post(new Integer(123));\n        eventBus.post(\"Hello World\");\n    }\n\n    static class EventBusChangeRecorder {\n        @Subscribe\n        public void recordCustomerChange(Customer customer) {\n            System.out.println(\"-----------------------------------\");\n            System.out.println(\"recieved change:\");\n            System.out.println(\"customer name: \" + customer.getName());\n            System.out.println(\"cutomer age: \" + customer.getAge());\n            System.out.println(\"\\n\\n\");\n        }\n\n        @Subscribe\n        public void valueChange(Integer val) {//注意方法的类型\n            System.out.println(\"-----------------------------------\");\n            System.out.println(\"val = \" + val);\n            System.out.println(\"\\n\");\n        }\n\n        @Subscribe\n        public void deadEvent(DeadEvent deadEvent) {\n            System.out.println(\"-----------------------------------\");\n            System.out.println(\"deadEvent = \" + deadEvent);\n            System.out.println(\"\\n\");\n        }\n\n        @Subscribe\n        public void hierarchy(Person person) {\n            System.out.println(\"-----------------------------------\");\n            //will recieve all person and it's subtype\n            System.out.println(person);\n            System.out.println(\"\\n\");\n        }\n\n    }\n\n}\n\n\n```\n\n在我的电脑上的执行结果:\n\n```\n-----------------------------------\nrecieved change:\ncustomer name: customer\ncutomer age: 66\n\n\n\n-----------------------------------\nPerson{name='customer', age=66}\n\n\n-----------------------------------\nPerson{name='person', age=11}\n\n\n-----------------------------------\nval = 123\n\n\n-----------------------------------\ndeadEvent = DeadEvent{source=EventBus{default}, event=Hello World}\n```\n\n### 源码解析\n\n#### listener注册过程\n\n`EventBus`中有一个成员变量叫做`subscribers`, 负责管理所有注册进来的listener\n\n```java\n  private final SubscriberRegistry subscribers = new SubscriberRegistry(this);\n```\n\n`register(Object object)`方法就是调用`subscribers`的注册方法\n\n```java\n  /**\n   * Registers all subscriber methods on {@code object} to receive events.\n   *\n   * @param object object whose subscriber methods should be registered.\n   */\n  public void register(Object object) {\n    subscribers.register(object);\n  }\n\n    /**\n   * Registers all subscriber methods on the given listener object.\n   */\n  void register(Object listener) {\n    //解析注解，生成<EventType, ListenMethod>的multimap\n    Multimap<Class<?>, Subscriber> listenerMethods = findAllSubscribers(listener);\n\n    for (Map.Entry<Class<?>, Collection<Subscriber>> entry : listenerMethods.asMap().entrySet()) {\n      Class<?> eventType = entry.getKey();\n      Collection<Subscriber> eventMethodsInListener = entry.getValue();\n\n      CopyOnWriteArraySet<Subscriber> eventSubscribers = subscribers.get(eventType);\n\n      //新建或者添加到已有的事件对应的Listener中\n      if (eventSubscribers == null) {\n        CopyOnWriteArraySet<Subscriber> newSet = new CopyOnWriteArraySet<Subscriber>();\n        eventSubscribers =\n            MoreObjects.firstNonNull(subscribers.putIfAbsent(eventType, newSet), newSet);\n      }\n\n      eventSubscribers.addAll(eventMethodsInListener);\n    }\n  }\n\n\n    /**\n   * Returns all subscribers for the given listener grouped by the type of event they subscribe to.\n   */\n  private Multimap<Class<?>, Subscriber> findAllSubscribers(Object listener) {\n    Multimap<Class<?>, Subscriber> methodsInListener = HashMultimap.create();\n    Class<?> clazz = listener.getClass();\n    for (Method method : getAnnotatedMethods(clazz)) {//有缓存哦\n      Class<?>[] parameterTypes = method.getParameterTypes();\n      Class<?> eventType = parameterTypes[0];\n      methodsInListener.put(eventType, Subscriber.create(bus, listener, method));\n    }\n    return methodsInListener;\n  }\n```\n\n在`subscribers`的注册方法中完成了对注解`@Subscribe`的解析。\n\n#### 事件分发过程\n\n`EventBus`的post方法\n\n```java\n  /**\n   * Posts an event to all registered subscribers. This method will return successfully after the\n   * event has been posted to all subscribers, and regardless of any exceptions thrown by\n   * subscribers.\n   *\n   * <p>If no subscribers have been subscribed for {@code event}'s class, and {@code event} is not\n   * already a {@link DeadEvent}, it will be wrapped in a DeadEvent and reposted.\n   *\n   * @param event event to post.\n   */\n  public void post(Object event) {\n    Iterator<Subscriber> eventSubscribers = subscribers.getSubscribers(event);\n    if (eventSubscribers.hasNext()) {\n      dispatcher.dispatch(event, eventSubscribers);\n    } else if (!(event instanceof DeadEvent)) {\n      // the event had no subscribers and was not itself a DeadEvent\n      post(new DeadEvent(this, event));\n    }\n  }\n```\n\n这里的`dispatcher`默认是`Dispatcher.perThreadDispatchQueue()`\n\n它的`dispatch`方法实现如下：\n\n```java\n\n    /**\n     * Per-thread queue of events to dispatch.\n     */\n    private final ThreadLocal<Queue<Event>> queue =\n        new ThreadLocal<Queue<Event>>() {\n          @Override\n          protected Queue<Event> initialValue() {\n            return Queues.newArrayDeque();\n          }\n        };\n\n    /**\n     * Per-thread dispatch state, used to avoid reentrant event dispatching.\n     */\n    private final ThreadLocal<Boolean> dispatching =\n        new ThreadLocal<Boolean>() {\n          @Override\n          protected Boolean initialValue() {\n            return false;\n          }\n        };\n\n\n    @Override\n    void dispatch(Object event, Iterator<Subscriber> subscribers) {\n      //入参校验\n      checkNotNull(event);\n      checkNotNull(subscribers);\n      //从ThreadLocal中拿到队列\n      Queue<Event> queueForThread = queue.get();\n      //先把事件入队列\n      queueForThread.offer(new Event(event, subscribers));\n\n      if (!dispatching.get()) {\n        dispatching.set(true);\n        try {\n          Event nextEvent;\n          //遍历队列中的事件，并分发给相应的订阅者\n          while ((nextEvent = queueForThread.poll()) != null) {\n            while (nextEvent.subscribers.hasNext()) {\n              nextEvent.subscribers.next().dispatchEvent(nextEvent.event);\n            }\n          }\n        } finally {\n          dispatching.remove();\n          queue.remove();\n        }\n      }\n    }\n```\n\nEventBus的注解提取（简单的缓存），构建相应的Map，以及事件的分发设计地非常好，有了一个大型系统完整的雏形。\n\n## 参考\n\n1. [Guava学习笔记：EventBus - peida - 博客园](http://www.cnblogs.com/peida/p/EventBus.html)\n\n2. [EventBusExplained · google/guava Wiki](https://github.com/google/guava/wiki/EventBusExplained)\n\n3. [观察者模式 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F)\n\n4. [观察者模式 — Graphic Design Patterns](http://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/observer.html)","slug":"guava-eventbus","published":1,"updated":"2017-02-02T09:10:04.092Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgbg003vw4pyfkdayh76"},{"title":"grep 总结","toc":true,"date":"2016-12-06T16:12:54.000Z","_content":"\n\n## 常见用法\n\n示例文本：\n> \"Night gathers, and now my watch begins. It shall not end \nuntil my death. I shall take no wife, hold no lands, father no \nchildren. I shall wear no crowns and win no glory. I shall live \nand die at my post. I am the sword in the darkness. I am the \nwatcher on the walls. I am the shield that guards the realms of \nmen. I pledge my life and honor to the Night's Watch, for this \nnight and all the nights to come.\"\n\n\n### `grep 'keyword' filename`\n\n在一个文件按照关键字查找\n\n `grep 'now' test.txt` 输出\n\n > \"Night gathers, and now my watch begins. It shall not end\n\n### `grep -n `\n\n显示行号\n\n `grep -n 'now' test.txt` 输出\n\n> 1:\"Night gathers, and now my watch begins. It shall not end\n\n### `grep -i` \n\n忽略大小写\n\n `grep -i 'watch' test.txt` 输出\n\n> \"Night gathers, and now my watch begins. It shall not end\nwatcher on the walls. I am the shield that guards the realms of\nmen. I pledge my life and honor to the Night's Watch, for this\n\n### `grep -v`\n\n输出不包含 `-v` 后面关键字的行\n\n`grep -v 'watch' test.txt` 输出\n\n> until my death. I shall take no wife, hold no lands, father no\nchildren. I shall wear no crowns and win no glory. I shall live\nand die at my post. I am the sword in the darkness. I am the\nmen. I pledge my life and honor to the Night's Watch, for this\nnight and all the nights to come.\"\n\n### `grep -e`\n\n提供正则的支持，关键字中可以包含正则表达式\n\n### `grep -B10`\n\n输出匹配行的同事， 也输出匹配行之前的10行（before）\n\n### `grep -A10`\n\n输出匹配行的同时，也输出匹配行之后的10行（after）\n\n### `grep -C10`\n\n输出匹配行的同时，输出之前和之后的10行\n\n### `grep -o`\n\n只输出匹配的内容\n\n`grep -o 'watch' test.txt`\n\n> watch\n  watch\n\n### `grep -c`\n\n输出匹配的行数的个数\n\n`grep -ci 'watch' test.txt`\n\n> 3\n\n### `grep -l`\n\n显示有匹配行的文件，只显示文件名称，不显示内容\n\n`grep -l 'watch' test.txt`\n\n> test.txt\n\n### `grep -H`\n\n在匹配行的前面同时输出文件名\n\n`grep -H 'watch' test.txt`\n\n> test.txt:\"Night gathers, and now my watch begins. It shall not end\ntest.txt:watcher on the walls. I am the shield that guards the realms of\n\n## 高亮\n\n### grep --color\n\n`grep -H --color 'watch' test.txt`\n\n{%  asset_img   color.jpg  %}\n\n\n\n\n### 设置环境变量\n\n在用户目录下的`.bashrc`中设置环境变量，也可以达到高亮的目的\n\n```bash\nexport GREP_OPTIONS='--color=auto'\n```\n\n添加之后记得`source ~/.bashrc`, 然后才能生效\n\n## egrep\n\n> egrep 命令与 grep 命令带 -E 标志是一样的，除了错误消息和使用情况消息不同以及 -s 标志的功能不同之外。\n\n### 多关键字\n\n使用正则就可以同时搜索多个关键字\n\n`grep -E 'keyword1 | keyword2' filename`\n\n`grep --color -E  'am | to' test.txt`\n\n{%  asset_img   egrep.jpg  %}\n\n\n\n\n## zgrep\n\nzgrep 可以在压缩文件中搜索内容\n\n## 参考\n\n1. [HowTo: Use grep Command In Linux / UNIX – Examples](https://www.cyberciti.biz/faq/howto-use-grep-command-in-linux-unix/)\n\n2. [egrep 命令 - IBM](https://www.ibm.com/support/knowledgecenter/zh/ssw_aix_61/com.ibm.aix.cmds2/egrep.htm)","source":"_posts/grep.md","raw":"---\ntitle: grep 总结\ntags: shell\ncategory: linux\ntoc: true\ndate: 2016-12-07 00:12:54\n---\n\n\n## 常见用法\n\n示例文本：\n> \"Night gathers, and now my watch begins. It shall not end \nuntil my death. I shall take no wife, hold no lands, father no \nchildren. I shall wear no crowns and win no glory. I shall live \nand die at my post. I am the sword in the darkness. I am the \nwatcher on the walls. I am the shield that guards the realms of \nmen. I pledge my life and honor to the Night's Watch, for this \nnight and all the nights to come.\"\n\n\n### `grep 'keyword' filename`\n\n在一个文件按照关键字查找\n\n `grep 'now' test.txt` 输出\n\n > \"Night gathers, and now my watch begins. It shall not end\n\n### `grep -n `\n\n显示行号\n\n `grep -n 'now' test.txt` 输出\n\n> 1:\"Night gathers, and now my watch begins. It shall not end\n\n### `grep -i` \n\n忽略大小写\n\n `grep -i 'watch' test.txt` 输出\n\n> \"Night gathers, and now my watch begins. It shall not end\nwatcher on the walls. I am the shield that guards the realms of\nmen. I pledge my life and honor to the Night's Watch, for this\n\n### `grep -v`\n\n输出不包含 `-v` 后面关键字的行\n\n`grep -v 'watch' test.txt` 输出\n\n> until my death. I shall take no wife, hold no lands, father no\nchildren. I shall wear no crowns and win no glory. I shall live\nand die at my post. I am the sword in the darkness. I am the\nmen. I pledge my life and honor to the Night's Watch, for this\nnight and all the nights to come.\"\n\n### `grep -e`\n\n提供正则的支持，关键字中可以包含正则表达式\n\n### `grep -B10`\n\n输出匹配行的同事， 也输出匹配行之前的10行（before）\n\n### `grep -A10`\n\n输出匹配行的同时，也输出匹配行之后的10行（after）\n\n### `grep -C10`\n\n输出匹配行的同时，输出之前和之后的10行\n\n### `grep -o`\n\n只输出匹配的内容\n\n`grep -o 'watch' test.txt`\n\n> watch\n  watch\n\n### `grep -c`\n\n输出匹配的行数的个数\n\n`grep -ci 'watch' test.txt`\n\n> 3\n\n### `grep -l`\n\n显示有匹配行的文件，只显示文件名称，不显示内容\n\n`grep -l 'watch' test.txt`\n\n> test.txt\n\n### `grep -H`\n\n在匹配行的前面同时输出文件名\n\n`grep -H 'watch' test.txt`\n\n> test.txt:\"Night gathers, and now my watch begins. It shall not end\ntest.txt:watcher on the walls. I am the shield that guards the realms of\n\n## 高亮\n\n### grep --color\n\n`grep -H --color 'watch' test.txt`\n\n{%  asset_img   color.jpg  %}\n\n\n\n\n### 设置环境变量\n\n在用户目录下的`.bashrc`中设置环境变量，也可以达到高亮的目的\n\n```bash\nexport GREP_OPTIONS='--color=auto'\n```\n\n添加之后记得`source ~/.bashrc`, 然后才能生效\n\n## egrep\n\n> egrep 命令与 grep 命令带 -E 标志是一样的，除了错误消息和使用情况消息不同以及 -s 标志的功能不同之外。\n\n### 多关键字\n\n使用正则就可以同时搜索多个关键字\n\n`grep -E 'keyword1 | keyword2' filename`\n\n`grep --color -E  'am | to' test.txt`\n\n{%  asset_img   egrep.jpg  %}\n\n\n\n\n## zgrep\n\nzgrep 可以在压缩文件中搜索内容\n\n## 参考\n\n1. [HowTo: Use grep Command In Linux / UNIX – Examples](https://www.cyberciti.biz/faq/howto-use-grep-command-in-linux-unix/)\n\n2. [egrep 命令 - IBM](https://www.ibm.com/support/knowledgecenter/zh/ssw_aix_61/com.ibm.aix.cmds2/egrep.htm)","slug":"grep","published":1,"updated":"2017-02-02T09:10:04.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgbk0040w4pyse8hb9al"},{"title":"fabric 分布式部署","toc":true,"date":"2015-11-03T15:55:34.000Z","_content":"\n## 前言\n   在一台linux主机上执行命令，如果太繁琐可以写成 Shell 脚本；如果在一个集群上批量执行命令呢？\n一台一台的ssh登录去执行当然是可以的，如果集群太大，就太繁琐了。下面介绍一些在集群上执行命令的方法。\n\n## ssh 远程执行命令\n\t通过 ssh 可以按照下面的方式远程执行命令\n``` bash\n ssh user@host 'command1;command2;command3'\n```\n或者使用管道\n``` bash\n ssh user@host 'command1|command2|command3'\n```\n或者使用如下的\n``` bash\n\t$ ssh [user]@[server] << EOF\n\tcommand 1\n\tcommand 2\n\tcommand 3\n\tEOF\n```\n或者将要执行的命令写入 Shell 脚本\n``` bash\n\t$ ssh user@host 'bash -s' < local_script.sh\n```\n\n可以通过指定ssh 参数 `-o StrictHostKeyChecking=no` 来省去下面的交互过程 \n \n\n\n![](http://farm8.staticflickr.com/7399/8778510478_4a428cc5f4.jpg    )\n\n\n\n\n**但是上面的方法执行 sudo 命令的时候会出错**\n此时需要加上 ssh 的 `-t` 参数\nman 一下 ssh 查找 -t 参数可以看到如下的解释\n\n> -t      \n> Force pseudo-tty allocation.  This can be used to execute arbi‐\n             trary screen-based programs on a remote machine, which can be\n             very useful, e.g. when implementing menu services.  Multiple -t\n             options force tty allocation, even if ssh has no local tty.\n\n具体的意思就是强制提供一个远程服务器的虚拟tty终端\n``` bash\n\tssh -t -p port user@host 'cmd'\n```\n即可执行sudo命令，但是自己还要手工输入远程服务器的密码\n---\n要想写在脚本中自动执行还需要使用 expect\nexpect是 linux下的一个命令用来处理执行命令中的交互，python 也有相应的库 pexpect\n> Expect  is a program that \"talks\" to other interactive programs accord‐\n       ing to a script. \n\n下面是参考的一些文章\n > [Send Remote Commands Via SSH](http://malcontentcomics.com/systemsboy/2006/07/send-remote-commands-via-ssh.html)\n > [Running Commands on a Remote Linux Server over SSH](http://www.shellhacks.com/en/Running-Commands-on-a-Remote-Linux-Server-over-SSH)\n\n## 其他集群管理命令\n\n如 pssh mussh\n\n> [linux集群管理工具mussh和pssh](http://xiaorui.cc/2014/07/09/linux%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7mussh%E5%92%8Cpssh/)\n\n## fabric \n\nfabric 是基于 ssh 的一个python库，主要用来做运维或者批量部署\n[fabric官网](http://www.fabfile.org/)\n* 安装 fabric\n``` bash\n\tpip install fabric\n```\n\n安装完成即可使用 fabric，fabric上手简单，功能强大\n\n``` bash\n\tfab -f xxx.py command\n```\nfab 默认在当前目录下寻找 fabfiles，如果你的文件是其他的名字，使用 `-f`指定即可\n\n脚本的编写\n``` python\n\tfrom fabric.api import run\n\n\tdef host_type():\n\t\trun('uname -s')\n```\n运行\n``` bash\n\t$ fab -H localhost,linuxbox host_type\n\t\t[localhost] run: uname -s\n\t\t[localhost] out: Darwin\n\t\t[linuxbox] run: uname -s\n\t\t[linuxbox] out: Linux\n\t\t\n\t\tDone.\n\t\tDisconnecting from localhost... done.\n\t\tDisconnecting from linuxbox... done.\n```\n使用 `-H`可以指定运行的host， 也可以在代码中指定。\n用户名和密码都是存在 env 环境变量中，也可在脚本中更改\n[The environment dictionary](http://docs.fabfile.org/en/1.10/usage/env.html?highlight=env)\n\n同时 fabric 还提供了一些装饰器，具体的可以查文档\n``` python\n\t@parralel\n\t@task\n\t@role()\n\t@host()\n```\n详细讲解可以参考这篇文章 [Python fabric实现远程操作和部署 ](http://wklken.me/posts/2013/03/25/python-tool-fabric.html)\n","source":"_posts/fabric.md","raw":"---\ntitle: fabric 分布式部署\ntags: fabric\ncategory: python\ntoc: true\ndate: 2015-11-03 23:55:34\n---\n\n## 前言\n   在一台linux主机上执行命令，如果太繁琐可以写成 Shell 脚本；如果在一个集群上批量执行命令呢？\n一台一台的ssh登录去执行当然是可以的，如果集群太大，就太繁琐了。下面介绍一些在集群上执行命令的方法。\n\n## ssh 远程执行命令\n\t通过 ssh 可以按照下面的方式远程执行命令\n``` bash\n ssh user@host 'command1;command2;command3'\n```\n或者使用管道\n``` bash\n ssh user@host 'command1|command2|command3'\n```\n或者使用如下的\n``` bash\n\t$ ssh [user]@[server] << EOF\n\tcommand 1\n\tcommand 2\n\tcommand 3\n\tEOF\n```\n或者将要执行的命令写入 Shell 脚本\n``` bash\n\t$ ssh user@host 'bash -s' < local_script.sh\n```\n\n可以通过指定ssh 参数 `-o StrictHostKeyChecking=no` 来省去下面的交互过程 \n \n\n\n![](http://farm8.staticflickr.com/7399/8778510478_4a428cc5f4.jpg    )\n\n\n\n\n**但是上面的方法执行 sudo 命令的时候会出错**\n此时需要加上 ssh 的 `-t` 参数\nman 一下 ssh 查找 -t 参数可以看到如下的解释\n\n> -t      \n> Force pseudo-tty allocation.  This can be used to execute arbi‐\n             trary screen-based programs on a remote machine, which can be\n             very useful, e.g. when implementing menu services.  Multiple -t\n             options force tty allocation, even if ssh has no local tty.\n\n具体的意思就是强制提供一个远程服务器的虚拟tty终端\n``` bash\n\tssh -t -p port user@host 'cmd'\n```\n即可执行sudo命令，但是自己还要手工输入远程服务器的密码\n---\n要想写在脚本中自动执行还需要使用 expect\nexpect是 linux下的一个命令用来处理执行命令中的交互，python 也有相应的库 pexpect\n> Expect  is a program that \"talks\" to other interactive programs accord‐\n       ing to a script. \n\n下面是参考的一些文章\n > [Send Remote Commands Via SSH](http://malcontentcomics.com/systemsboy/2006/07/send-remote-commands-via-ssh.html)\n > [Running Commands on a Remote Linux Server over SSH](http://www.shellhacks.com/en/Running-Commands-on-a-Remote-Linux-Server-over-SSH)\n\n## 其他集群管理命令\n\n如 pssh mussh\n\n> [linux集群管理工具mussh和pssh](http://xiaorui.cc/2014/07/09/linux%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7mussh%E5%92%8Cpssh/)\n\n## fabric \n\nfabric 是基于 ssh 的一个python库，主要用来做运维或者批量部署\n[fabric官网](http://www.fabfile.org/)\n* 安装 fabric\n``` bash\n\tpip install fabric\n```\n\n安装完成即可使用 fabric，fabric上手简单，功能强大\n\n``` bash\n\tfab -f xxx.py command\n```\nfab 默认在当前目录下寻找 fabfiles，如果你的文件是其他的名字，使用 `-f`指定即可\n\n脚本的编写\n``` python\n\tfrom fabric.api import run\n\n\tdef host_type():\n\t\trun('uname -s')\n```\n运行\n``` bash\n\t$ fab -H localhost,linuxbox host_type\n\t\t[localhost] run: uname -s\n\t\t[localhost] out: Darwin\n\t\t[linuxbox] run: uname -s\n\t\t[linuxbox] out: Linux\n\t\t\n\t\tDone.\n\t\tDisconnecting from localhost... done.\n\t\tDisconnecting from linuxbox... done.\n```\n使用 `-H`可以指定运行的host， 也可以在代码中指定。\n用户名和密码都是存在 env 环境变量中，也可在脚本中更改\n[The environment dictionary](http://docs.fabfile.org/en/1.10/usage/env.html?highlight=env)\n\n同时 fabric 还提供了一些装饰器，具体的可以查文档\n``` python\n\t@parralel\n\t@task\n\t@role()\n\t@host()\n```\n详细讲解可以参考这篇文章 [Python fabric实现远程操作和部署 ](http://wklken.me/posts/2013/03/25/python-tool-fabric.html)\n","slug":"fabric","published":1,"updated":"2017-02-02T09:10:04.885Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgbt0044w4pys1ml0r8j"},{"title":"Spring自定义标签，使用和源码","toc":true,"date":"2016-10-23T11:43:57.000Z","_content":"\n\n## 自定义标签\n\nSpring中的标签具有很强的扩展性，我们可以很方便的扩展出自己的标签，做出类似下面的标签\n```xml\n<dubbo:service interface=\"com.foo.BarService\" ref=\"barService\" />\n<dubbo:reference id=\"barService\" interface=\"com.foo.BarService\" />\n```\n\n### 1. Authoring the schema\n定义标签的xml描述：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsd:schema xmlns=\"http://www.mycompany.com/schema/myns\"\n        xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n        xmlns:beans=\"http://www.springframework.org/schema/beans\"\n        targetNamespace=\"http://www.mycompany.com/schema/myns\"\n        elementFormDefault=\"qualified\"\n        attributeFormDefault=\"unqualified\">\n\n    <xsd:import namespace=\"http://www.springframework.org/schema/beans\"/>\n\n    <xsd:element name=\"dateformat\">\n        <xsd:complexType>\n            <xsd:complexContent>\n                <xsd:extension base=\"beans:identifiedType\">\n                    <xsd:attribute name=\"lenient\" type=\"xsd:boolean\"/>\n                    <xsd:attribute name=\"pattern\" type=\"xsd:string\" use=\"required\"/>\n                </xsd:extension>\n            </xsd:complexContent>\n        </xsd:complexType>\n    </xsd:element>\n</xsd:schema>\n```\n定义了标签里面的属性和属性的类型， 在解析xml的时候spring会进行校验\n\n### 2. Coding a NamespaceHandler\n\n```java\npackage org.springframework.samples.xml;\n\nimport org.springframework.beans.factory.xml.NamespaceHandlerSupport;\n\npublic class MyNamespaceHandler extends NamespaceHandlerSupport {\n\n    public void init() {\n        registerBeanDefinitionParser(\"dateformat\", new SimpleDateFormatBeanDefinitionParser());\n    }\n\n}\n```\n主要是定义标签的处理类，这里是`SimpleDateFormatBeanDefinitionParser`\n\n### 3. BeanDefinitionParser\n```java\npackage org.springframework.samples.xml;\n\nimport org.springframework.beans.factory.support.BeanDefinitionBuilder;\nimport org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;\nimport org.springframework.util.StringUtils;\nimport org.w3c.dom.Element;\n\nimport java.text.SimpleDateFormat;\n\npublic class SimpleDateFormatBeanDefinitionParser extends AbstractSingleBeanDefinitionParser {\n\n    protected Class getBeanClass(Element element) {\n        return SimpleDateFormat.class;\n    }\n\n    protected void doParse(Element element, BeanDefinitionBuilder bean) {\n        // this will never be null since the schema explicitly requires that a value be supplied\n        String pattern = element.getAttribute(\"pattern\");\n        bean.addConstructorArg(pattern);\n\n        // this however is an optional property\n        String lenient = element.getAttribute(\"lenient\");\n        if (StringUtils.hasText(lenient)) {\n            bean.addPropertyValue(\"lenient\", Boolean.valueOf(lenient));\n        }\n    }\n\n}\n```\n\n该类继承自spring提供的抽象类`AbstractSingleBeanDefinitionParser`，提供了许多基本的功能，解析标签的方法在`doParse`中，spring会传入一个标签元素`Element`和`BeanDefinitionBuilder`的上下文。\n\n### 4. Registering the handler and the schema\n```\n└─META-INF\n        spring.handlers\n        spring.schemas\n```\n`spring.handlers`中的内容如下：\n\n```xml\nhttp\\://www.mycompany.com/schema/myns=org.springframework.samples.xml.MyNamespaceHandler\n```\n`spring.schemas`中内容如下：\n\n```xml\nhttp\\://www.mycompany.com/schema/myns/myns.xsd=org/springframework/samples/xml/myns.xsd\n```\n\nspring在加载这个jar包的时候会自动的从这些文件中解析到我们的配置，当解析到相应的标签的时候就会交给我们定义的解析类来处理。\n```xml\n<myns:dateformat id=\"dateFormat\"\npattern=\"yyyy-MM-dd HH:mm\"\nlenient=\"true\"/>\n```\n\n## Custom attributes on 'normal' elements\n\n除了自定义标签外，还可以为已有标签装饰一个新的属性\n\n```xml\n<bean id=\"checkingAccountService\" class=\"com.foo.DefaultCheckingAccountService\"\n        jcache:cache-name=\"checking.account\">\n    <!-- other dependencies here... -->\n</bean>\n```\nspring可以让我们单独处理这个`jcache:cache-name`这个属性。\n\n### 定义schema\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n\n<xsd:schema xmlns=\"http://www.foo.com/schema/jcache\"\n        xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n        targetNamespace=\"http://www.foo.com/schema/jcache\"\n        elementFormDefault=\"qualified\">\n\n    <xsd:attribute name=\"cache-name\" type=\"xsd:string\"/>\n\n</xsd:schema>\n```\n\n### NamespaceHandler\n\n```java\npublic class JCacheNamespaceHandler extends NamespaceHandlerSupport {\n\n    public void init() {\n        super.registerBeanDefinitionDecoratorForAttribute(\"cache-name\",\n            new JCacheInitializingBeanDefinitionDecorator());\n    }\n\n}\n```\n\n实际的调用行为已经被抽象到`NamespaceHandlerSupport`中\n\n```java\n/**\n * Decorates the supplied {@link Node} by delegating to the {@link BeanDefinitionDecorator} that\n * is registered to handle that {@link Node}.\n */\n@Override\npublic BeanDefinitionHolder decorate(\n    Node node, BeanDefinitionHolder definition, ParserContext parserContext) {\n\n  return findDecoratorForNode(node, parserContext).decorate(node, definition, parserContext);\n}\n```\n\n### BeanDefinitionDecorator\n\n```java\npublic class JCacheInitializingBeanDefinitionDecorator implements BeanDefinitionDecorator {\n\n    private static final String[] EMPTY_STRING_ARRAY = new String[0];\n\n    public BeanDefinitionHolder decorate(Node source, BeanDefinitionHolder holder,\n            ParserContext ctx) {\n        String initializerBeanName = registerJCacheInitializer(source, ctx);\n        createDependencyOnJCacheInitializer(holder, initializerBeanName);\n        return holder;\n    }\n\n    private void createDependencyOnJCacheInitializer(BeanDefinitionHolder holder,\n            String initializerBeanName) {\n        AbstractBeanDefinition definition = ((AbstractBeanDefinition) holder.getBeanDefinition());\n        String[] dependsOn = definition.getDependsOn();\n        if (dependsOn == null) {\n            dependsOn = new String[]{initializerBeanName};\n        } else {\n            List dependencies = new ArrayList(Arrays.asList(dependsOn));\n            dependencies.add(initializerBeanName);\n            dependsOn = (String[]) dependencies.toArray(EMPTY_STRING_ARRAY);\n        }\n        definition.setDependsOn(dependsOn);\n    }\n\n    private String registerJCacheInitializer(Node source, ParserContext ctx) {\n        String cacheName = ((Attr) source).getValue();\n        String beanName = cacheName + \"-initializer\";\n        if (!ctx.getRegistry().containsBeanDefinition(beanName)) {\n            BeanDefinitionBuilder initializer = BeanDefinitionBuilder.rootBeanDefinition(JCacheInitializer.class);\n            initializer.addConstructorArg(cacheName);\n            ctx.getRegistry().registerBeanDefinition(beanName, initializer.getBeanDefinition());\n        }\n        return beanName;\n    }\n\n}\n\n```\n\n### META-INF\n```xml\n# in 'META-INF/spring.handlers'\nhttp\\://www.foo.com/schema/jcache=com.foo.JCacheNamespaceHandler\n# in 'META-INF/spring.schemas'\nhttp\\://www.foo.com/schema/jcache/jcache.xsd=com/foo/jcache.xsd\n\n```\n\n## 参考\n\n1. [spring-framework-reference](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/)\n","source":"_posts/custom-tag.md","raw":"---\ntitle: Spring自定义标签，使用和源码\ntags: 自定义标签\ncategory: spring\ntoc: true\ndate: 2016-10-23 19:43:57\n---\n\n\n## 自定义标签\n\nSpring中的标签具有很强的扩展性，我们可以很方便的扩展出自己的标签，做出类似下面的标签\n```xml\n<dubbo:service interface=\"com.foo.BarService\" ref=\"barService\" />\n<dubbo:reference id=\"barService\" interface=\"com.foo.BarService\" />\n```\n\n### 1. Authoring the schema\n定义标签的xml描述：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsd:schema xmlns=\"http://www.mycompany.com/schema/myns\"\n        xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n        xmlns:beans=\"http://www.springframework.org/schema/beans\"\n        targetNamespace=\"http://www.mycompany.com/schema/myns\"\n        elementFormDefault=\"qualified\"\n        attributeFormDefault=\"unqualified\">\n\n    <xsd:import namespace=\"http://www.springframework.org/schema/beans\"/>\n\n    <xsd:element name=\"dateformat\">\n        <xsd:complexType>\n            <xsd:complexContent>\n                <xsd:extension base=\"beans:identifiedType\">\n                    <xsd:attribute name=\"lenient\" type=\"xsd:boolean\"/>\n                    <xsd:attribute name=\"pattern\" type=\"xsd:string\" use=\"required\"/>\n                </xsd:extension>\n            </xsd:complexContent>\n        </xsd:complexType>\n    </xsd:element>\n</xsd:schema>\n```\n定义了标签里面的属性和属性的类型， 在解析xml的时候spring会进行校验\n\n### 2. Coding a NamespaceHandler\n\n```java\npackage org.springframework.samples.xml;\n\nimport org.springframework.beans.factory.xml.NamespaceHandlerSupport;\n\npublic class MyNamespaceHandler extends NamespaceHandlerSupport {\n\n    public void init() {\n        registerBeanDefinitionParser(\"dateformat\", new SimpleDateFormatBeanDefinitionParser());\n    }\n\n}\n```\n主要是定义标签的处理类，这里是`SimpleDateFormatBeanDefinitionParser`\n\n### 3. BeanDefinitionParser\n```java\npackage org.springframework.samples.xml;\n\nimport org.springframework.beans.factory.support.BeanDefinitionBuilder;\nimport org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;\nimport org.springframework.util.StringUtils;\nimport org.w3c.dom.Element;\n\nimport java.text.SimpleDateFormat;\n\npublic class SimpleDateFormatBeanDefinitionParser extends AbstractSingleBeanDefinitionParser {\n\n    protected Class getBeanClass(Element element) {\n        return SimpleDateFormat.class;\n    }\n\n    protected void doParse(Element element, BeanDefinitionBuilder bean) {\n        // this will never be null since the schema explicitly requires that a value be supplied\n        String pattern = element.getAttribute(\"pattern\");\n        bean.addConstructorArg(pattern);\n\n        // this however is an optional property\n        String lenient = element.getAttribute(\"lenient\");\n        if (StringUtils.hasText(lenient)) {\n            bean.addPropertyValue(\"lenient\", Boolean.valueOf(lenient));\n        }\n    }\n\n}\n```\n\n该类继承自spring提供的抽象类`AbstractSingleBeanDefinitionParser`，提供了许多基本的功能，解析标签的方法在`doParse`中，spring会传入一个标签元素`Element`和`BeanDefinitionBuilder`的上下文。\n\n### 4. Registering the handler and the schema\n```\n└─META-INF\n        spring.handlers\n        spring.schemas\n```\n`spring.handlers`中的内容如下：\n\n```xml\nhttp\\://www.mycompany.com/schema/myns=org.springframework.samples.xml.MyNamespaceHandler\n```\n`spring.schemas`中内容如下：\n\n```xml\nhttp\\://www.mycompany.com/schema/myns/myns.xsd=org/springframework/samples/xml/myns.xsd\n```\n\nspring在加载这个jar包的时候会自动的从这些文件中解析到我们的配置，当解析到相应的标签的时候就会交给我们定义的解析类来处理。\n```xml\n<myns:dateformat id=\"dateFormat\"\npattern=\"yyyy-MM-dd HH:mm\"\nlenient=\"true\"/>\n```\n\n## Custom attributes on 'normal' elements\n\n除了自定义标签外，还可以为已有标签装饰一个新的属性\n\n```xml\n<bean id=\"checkingAccountService\" class=\"com.foo.DefaultCheckingAccountService\"\n        jcache:cache-name=\"checking.account\">\n    <!-- other dependencies here... -->\n</bean>\n```\nspring可以让我们单独处理这个`jcache:cache-name`这个属性。\n\n### 定义schema\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n\n<xsd:schema xmlns=\"http://www.foo.com/schema/jcache\"\n        xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n        targetNamespace=\"http://www.foo.com/schema/jcache\"\n        elementFormDefault=\"qualified\">\n\n    <xsd:attribute name=\"cache-name\" type=\"xsd:string\"/>\n\n</xsd:schema>\n```\n\n### NamespaceHandler\n\n```java\npublic class JCacheNamespaceHandler extends NamespaceHandlerSupport {\n\n    public void init() {\n        super.registerBeanDefinitionDecoratorForAttribute(\"cache-name\",\n            new JCacheInitializingBeanDefinitionDecorator());\n    }\n\n}\n```\n\n实际的调用行为已经被抽象到`NamespaceHandlerSupport`中\n\n```java\n/**\n * Decorates the supplied {@link Node} by delegating to the {@link BeanDefinitionDecorator} that\n * is registered to handle that {@link Node}.\n */\n@Override\npublic BeanDefinitionHolder decorate(\n    Node node, BeanDefinitionHolder definition, ParserContext parserContext) {\n\n  return findDecoratorForNode(node, parserContext).decorate(node, definition, parserContext);\n}\n```\n\n### BeanDefinitionDecorator\n\n```java\npublic class JCacheInitializingBeanDefinitionDecorator implements BeanDefinitionDecorator {\n\n    private static final String[] EMPTY_STRING_ARRAY = new String[0];\n\n    public BeanDefinitionHolder decorate(Node source, BeanDefinitionHolder holder,\n            ParserContext ctx) {\n        String initializerBeanName = registerJCacheInitializer(source, ctx);\n        createDependencyOnJCacheInitializer(holder, initializerBeanName);\n        return holder;\n    }\n\n    private void createDependencyOnJCacheInitializer(BeanDefinitionHolder holder,\n            String initializerBeanName) {\n        AbstractBeanDefinition definition = ((AbstractBeanDefinition) holder.getBeanDefinition());\n        String[] dependsOn = definition.getDependsOn();\n        if (dependsOn == null) {\n            dependsOn = new String[]{initializerBeanName};\n        } else {\n            List dependencies = new ArrayList(Arrays.asList(dependsOn));\n            dependencies.add(initializerBeanName);\n            dependsOn = (String[]) dependencies.toArray(EMPTY_STRING_ARRAY);\n        }\n        definition.setDependsOn(dependsOn);\n    }\n\n    private String registerJCacheInitializer(Node source, ParserContext ctx) {\n        String cacheName = ((Attr) source).getValue();\n        String beanName = cacheName + \"-initializer\";\n        if (!ctx.getRegistry().containsBeanDefinition(beanName)) {\n            BeanDefinitionBuilder initializer = BeanDefinitionBuilder.rootBeanDefinition(JCacheInitializer.class);\n            initializer.addConstructorArg(cacheName);\n            ctx.getRegistry().registerBeanDefinition(beanName, initializer.getBeanDefinition());\n        }\n        return beanName;\n    }\n\n}\n\n```\n\n### META-INF\n```xml\n# in 'META-INF/spring.handlers'\nhttp\\://www.foo.com/schema/jcache=com.foo.JCacheNamespaceHandler\n# in 'META-INF/spring.schemas'\nhttp\\://www.foo.com/schema/jcache/jcache.xsd=com/foo/jcache.xsd\n\n```\n\n## 参考\n\n1. [spring-framework-reference](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/)\n","slug":"custom-tag","published":1,"updated":"2017-02-02T09:10:05.381Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgbw0048w4py9crwei2n"},{"title":"Unicode历史","toc":true,"date":"2016-09-26T08:56:08.000Z","_content":"# 字符编码\n\n>字符编码（英语：Character encoding）、字集码是把字符集中的字符编码为指定集合中某一对象（例如：比特模式、自然数序列、8位组或者电脉冲），以便文本在计算机中存储和通过通信网络的传递。\n\n简单的说，就是计算机只认`0`和`1`，于是在数据取出来的时候根据一个类似字典的东西，按照一定的规则将比特信息转换成对应的字符信息，这样人们才可以理解到底存储了什么。\n## ASCII编码\n\n`ASCII`（American Standard Code for Information Interchange） 编码是基于拉丁字母的一套编码系统。\n\n`ASCII`使用指定的`7` 位或`8` 位二进制数组合来表示`128` 或`256` 种可能的字符。\n\n> ASCII的局限在于只能显示26个基本拉丁字母、阿拉伯数目字和英式标点符号，因此只能用于显示现代美国英语（而且在处理英语当中的外来词如naïve、café、élite等等时，所有重音符号都不得不去掉，即使这样做会违反拼写规则）。而EASCII虽然解决了部分西欧语言的显示问题，但对更多其他语言依然无能为力。因此现在的软件系统大多采用Unicode。\n\n后续有其扩展版本`EASCII`。这个扩展的版本虽然扩充了一些字符，增大了EASCII的表达能力，但是仍不能满足全球各个国家的需求。于是各个国家就自己搞了一套编码的规则，但是随着web的发展，越来越需要一套统一的编解码标准，于是Unicode应运而出。\n\n## Unicode编码\n\n{%  asset_img   Unicode_logo.jpg  %}\n\n\n\n\n>Unicode provides a unique number for every character,\n\n> no matter what the platform,\n\n> no matter what the program,\n\n> no matter what the language.\n\n定义：\n\n>Unicode（中文：万国码、国际码、统一码、单一码）是计算机科学领域里的一项业界标准。它对世界上大部分的文字系统进行了整理、编码，使得电脑可以用更为简单的方式来呈现和处理文字。\n\n>In Unicode, a character is de\u001cned as the smallest component of a written language that has semantic value.\nThe number assigned to a character is called a **code point**. A code point is denoted by \u0010U+\u0011 following by a\nhexadecimal number from 4 to 8 digits long. Most of the code points in use are 4 digits long. For example,\n`U+03C6` is the code point for the Greek character f.\n\n{%  asset_img   unicode-layout.jpg  %}\n\n\n\n\n>在文字处理方面，统一码为每一个字符而非字形定义唯一的代码（即一个整数）。换句话说，统一码以一种抽象的方式（即数字）来处理字符，并将视觉上的演绎工作（例如字体大小、外观形状、字体形态、文体等）留给其他软件来处理，例如网页浏览器或是文字处理器。\n\n### Java中判断是否是中文字符\n\n>Java判断一个字符串是否有中文一般情况是利用Unicode编码(CJK统一汉字的编码区间：0x4e00–0x9fbb)的正则来做判断，但是其实这个区间来判断中文不是非常精确，因为有些中文的标点符号比如：，。等等是不能识别的。\n\n具体的参见参考中的`Java 完美判断中文字符`\n\n\n### 遗留的问题\n\n>需要注意的是，Unicode只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。\n\n存储中存在的问题：\n\n1. 如何区分Unicode和ASCII码？\n\n2. 如何存储能节省空间？\n\n\n>它们造成的结果是：\n\n>1）出现了Unicode的多种存储方式，也就是说有许多种不同的二进制格式，可以用来表示Unicode。\n\n>2）Unicode在很长一段时间内无法推广，直到互联网的出现。\n\n### CJK\n\n>Q: What does the term \"CJK\" mean?\n\n>A: It is a commonly used acronym for \"Chinese, Japanese, and Korean\". The term \"CJK character\" generally refers to \"Chinese characters\", or more specifically, the Chinese (= Han) ideographs used in the writing systems of the Chinese and Japanese languages, occasionally for Korean, and historically in Vietnam.\n\n### UTF-8编码\n\n>互联网的普及，强烈要求出现一种统一的编码方式。**UTF-8就是在互联网上使用最广的一种Unicode的实现方式。**其他实现方式还包括UTF-16（字符用两个字节或四个字节表示）和UTF-32（字符用四个字节表示），不过在互联网上基本不用。重复一遍，这里的关系是，UTF-8是Unicode的实现方式之一。\n\n#### 8的含义\n> unicode在很长一段时间内无法推广，直到互联网的出现，为解决unicode如何在网络上传输的问题，于是面向传输的众多 **UTF（UCS Transfer Format）标准出现了，顾名思义，UTF-8就是每次8个位传输数据，而UTF-16就是每次16个位。**UTF-8就是在互联网上使用最广的一种unicode的实现方式，这是为传输而设计的编码，并使编码无国界，这样就可以显示全世界上所有文化的字符了。\n\n#### UTF-8和Unicode\n\n> UTF-8最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度，当字符在ASCII 码的范围时，就用一个字节表示，保留了ASCII字符一个字节的编码做为它的一部分，注意的是unicode一个中文字符占2个字节，而UTF-8一个中 文字符占3个字节）。从unicode到uft-8并不是直接的对应，而是要过一些算法和规则来转换。\n\n### 编码方式\n\n>UTF-8的编码规则很简单，只有二条：\n\n>1）对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。\n\n>2）对于n字节的符号（n>1），**第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10**。剩下的没有提及的二进制位，全部为这个符号的unicode码。\n\n所以如果第一个字节是`0`开头的，那么就是兼容ASCII码的单字节字符；如果第一个字节是`1`开头的就是多字节字符，数一数前面有多少个`1`，就知道这个字符占了几个字节。\n\n所以UTF-8编码后的二进制形式应该如下：\n\n```\n0xxxxxxx 1个byte\n\n110xxxxx 10xxxxxx 2个byte\n\n1110xxxx 10xxxxxx 10xxxxxx 3个byte\n\n11110xxx 10xxxxxx 10xxxxxx 10xxxxxx 4个byte\n\n111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 5个byte\n\n111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 6个byte\n```\n\n> The bytes `0xFE(11111110)` and `0xFF(11111111)` are never used in the UTF-8 encoding.\n\n这两个特殊的字节被用来标示是大端编码和小端编码\n\n\nUTF-8编码的范围和Unicode对应的关系如下：\n\n|总比特数 |Code Point占的位数  |范围|\n|---|----|---|\n| 1 | 7  | 00000000 - 0000007F |\n| 2 | 11 | 00000080 - 000007FF |\n| 3 | 16 | 00000800 - 0000FFFF |\n| 4 | 21 | 00001000 - 001FFFFF |\n| 5 | 26 | 00200000 - 03FFFFFF |\n| 6 | 31 | 04000000 - FFFFFFFF |\n\n编码示例：\n\n`U+05E7 ` 使用`UTF-8`编码示例:\n\n1. 查上表得知， `05E7`在 `0080 - 07FF` 范围内，总共占2个字节\n应该是类似 `110xxxxx 10xxxxxx `\n\n2. 将其写成二进制形式，`0000 0101 1110 0111`\n\n3. 将数据替换上述的`x`，得到 `11010111 10100111 = 0xD7A7`\n\n#### 字节序\n\nUTF-8最多使用6个byte表示一个字符，于是就存在一个字节序的问题。\n字节序分为两种：\n\n1. **Little-Endian**:\n 字节序低位在前  小尾 在操作系统上很常用，也是计算机系统上最常用的字节序\n2. **Big-Endian**: 字节序高位在前 大尾  也称为网络字节序\n\n```\n16进制数字0x12345678，little-endian的存储为:  0x78 0x56 0x34 0x12     地址依次为100, 101, 102, 103\n\n16进制数字0x12345678，big-endian的存储为:     0x12 0x34 0x56 0x78       地址依次为100, 101, 102, 103\n```\n>\"endian\"这个词出自《格列佛游记》。小人国的内战就源于吃鸡蛋时是究竟从大头(Big-Endian)敲开还是从小头(Little-Endian)敲开，由此曾发生过六次叛乱，其中一个皇帝送了命，另一个丢了王位。\n\n#### 字节序用途\n>Little-Endian最常用，大部分用户的操作系统（如windows, FreeBsd,Linux）是Little Endian的。\n\n>Big-Endian最常用在网络协议上，例如TCP/IP协议使用的是big endian. 操作系统上如MAC OS ,是Big Endian 的。\n本质上说，Little Endian还是Big Endian与操作系统和芯片类型都有关系。PowerPC系列采用big endian方式存储数据，x86系列则采用little endian方式存储数据。\n\n```\nBig Endian\n   低地址                                           高地址\n   ----------------------------------------->\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |     12     |      34    |     56      |     78    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nLittle Endian\n   低地址                                           高地址\n   ----------------------------------------->\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |     78     |      56    |     34      |     12    |\n```\n\n> Unicode规范中定义，每一个文件的最前面分别加入一个表示编码顺序的字符，这个字符的名字叫做\"零宽度非换行空格\"（ZERO WIDTH NO-BREAK SPACE），用FEFF表示。这正好是两个字节，而且FF比FE大1。\n如果一个文本文件的头两个字节是FE FF，就表示该文件采用大头方式；如果头两个字节是FF FE，就表示该文件采用小头方式。\n\n## emoji\n\n{%  asset_img   emoji.jpg  %}\n\n\n\n\nemoji表情采用的是 Unicode编码，Emoji就是一种在Unicode位于`\\u1F601-\\u1F64F`区段的字符。这个显然超过了目前常用的UTF-8字符集的编码范围`\\u0000-\\uFFFF`。\n\n使用utf8mb4编码便可以解决上述的问题\n\n## 宽字符\n\n宽字符（Wide character） 是程序设计的术语。它是一个抽象的术语（没有规定具体实现细节），用以表示比8位字符还宽的数据类型。它不同于Unicode。\n\nwchar_t在ANSI/ISO C中是一个数据类型，且某些其它的编程语言也用它来表示宽字符。\n\n## 参考文章\n\n1. [字符编码](https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81)\n\n2. [Unicode_and_Character_Sets.md](https://github.com/acmerfight/insight_python/blob/master/Unicode_and_Character_Sets.md)\n\n3. [Unicode and UTF-8](http://www.compsci.hunter.cuny.edu/~sweiss/resources/Unicode.pdf)\n\n4. [Java 完美判断中文字符](http://www.micmiu.com/lang/java/java-check-chinese/)\n\n5. [Full Emoji Data, v3.0](http://unicode.org/emoji/charts/full-emoji-list.html)\n\n6. [微信emoji表情编码](http://www.tuicool.com/articles/aQBVny)\n\n7. [关于Big Endian 和 Little Endian](http://blog.csdn.net/sunshine1314/article/details/2309655)\n\n8. [字符编码笔记：ASCII，Unicode和UTF-8](http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html)\n","source":"_posts/character-encoding.md","raw":"---\ntitle: Unicode历史\ntags: 编码\ncategory: base\ntoc: true\ndate: 2016-09-26 16:56:08\n---\n# 字符编码\n\n>字符编码（英语：Character encoding）、字集码是把字符集中的字符编码为指定集合中某一对象（例如：比特模式、自然数序列、8位组或者电脉冲），以便文本在计算机中存储和通过通信网络的传递。\n\n简单的说，就是计算机只认`0`和`1`，于是在数据取出来的时候根据一个类似字典的东西，按照一定的规则将比特信息转换成对应的字符信息，这样人们才可以理解到底存储了什么。\n## ASCII编码\n\n`ASCII`（American Standard Code for Information Interchange） 编码是基于拉丁字母的一套编码系统。\n\n`ASCII`使用指定的`7` 位或`8` 位二进制数组合来表示`128` 或`256` 种可能的字符。\n\n> ASCII的局限在于只能显示26个基本拉丁字母、阿拉伯数目字和英式标点符号，因此只能用于显示现代美国英语（而且在处理英语当中的外来词如naïve、café、élite等等时，所有重音符号都不得不去掉，即使这样做会违反拼写规则）。而EASCII虽然解决了部分西欧语言的显示问题，但对更多其他语言依然无能为力。因此现在的软件系统大多采用Unicode。\n\n后续有其扩展版本`EASCII`。这个扩展的版本虽然扩充了一些字符，增大了EASCII的表达能力，但是仍不能满足全球各个国家的需求。于是各个国家就自己搞了一套编码的规则，但是随着web的发展，越来越需要一套统一的编解码标准，于是Unicode应运而出。\n\n## Unicode编码\n\n{%  asset_img   Unicode_logo.jpg  %}\n\n\n\n\n>Unicode provides a unique number for every character,\n\n> no matter what the platform,\n\n> no matter what the program,\n\n> no matter what the language.\n\n定义：\n\n>Unicode（中文：万国码、国际码、统一码、单一码）是计算机科学领域里的一项业界标准。它对世界上大部分的文字系统进行了整理、编码，使得电脑可以用更为简单的方式来呈现和处理文字。\n\n>In Unicode, a character is de\u001cned as the smallest component of a written language that has semantic value.\nThe number assigned to a character is called a **code point**. A code point is denoted by \u0010U+\u0011 following by a\nhexadecimal number from 4 to 8 digits long. Most of the code points in use are 4 digits long. For example,\n`U+03C6` is the code point for the Greek character f.\n\n{%  asset_img   unicode-layout.jpg  %}\n\n\n\n\n>在文字处理方面，统一码为每一个字符而非字形定义唯一的代码（即一个整数）。换句话说，统一码以一种抽象的方式（即数字）来处理字符，并将视觉上的演绎工作（例如字体大小、外观形状、字体形态、文体等）留给其他软件来处理，例如网页浏览器或是文字处理器。\n\n### Java中判断是否是中文字符\n\n>Java判断一个字符串是否有中文一般情况是利用Unicode编码(CJK统一汉字的编码区间：0x4e00–0x9fbb)的正则来做判断，但是其实这个区间来判断中文不是非常精确，因为有些中文的标点符号比如：，。等等是不能识别的。\n\n具体的参见参考中的`Java 完美判断中文字符`\n\n\n### 遗留的问题\n\n>需要注意的是，Unicode只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。\n\n存储中存在的问题：\n\n1. 如何区分Unicode和ASCII码？\n\n2. 如何存储能节省空间？\n\n\n>它们造成的结果是：\n\n>1）出现了Unicode的多种存储方式，也就是说有许多种不同的二进制格式，可以用来表示Unicode。\n\n>2）Unicode在很长一段时间内无法推广，直到互联网的出现。\n\n### CJK\n\n>Q: What does the term \"CJK\" mean?\n\n>A: It is a commonly used acronym for \"Chinese, Japanese, and Korean\". The term \"CJK character\" generally refers to \"Chinese characters\", or more specifically, the Chinese (= Han) ideographs used in the writing systems of the Chinese and Japanese languages, occasionally for Korean, and historically in Vietnam.\n\n### UTF-8编码\n\n>互联网的普及，强烈要求出现一种统一的编码方式。**UTF-8就是在互联网上使用最广的一种Unicode的实现方式。**其他实现方式还包括UTF-16（字符用两个字节或四个字节表示）和UTF-32（字符用四个字节表示），不过在互联网上基本不用。重复一遍，这里的关系是，UTF-8是Unicode的实现方式之一。\n\n#### 8的含义\n> unicode在很长一段时间内无法推广，直到互联网的出现，为解决unicode如何在网络上传输的问题，于是面向传输的众多 **UTF（UCS Transfer Format）标准出现了，顾名思义，UTF-8就是每次8个位传输数据，而UTF-16就是每次16个位。**UTF-8就是在互联网上使用最广的一种unicode的实现方式，这是为传输而设计的编码，并使编码无国界，这样就可以显示全世界上所有文化的字符了。\n\n#### UTF-8和Unicode\n\n> UTF-8最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度，当字符在ASCII 码的范围时，就用一个字节表示，保留了ASCII字符一个字节的编码做为它的一部分，注意的是unicode一个中文字符占2个字节，而UTF-8一个中 文字符占3个字节）。从unicode到uft-8并不是直接的对应，而是要过一些算法和规则来转换。\n\n### 编码方式\n\n>UTF-8的编码规则很简单，只有二条：\n\n>1）对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。\n\n>2）对于n字节的符号（n>1），**第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10**。剩下的没有提及的二进制位，全部为这个符号的unicode码。\n\n所以如果第一个字节是`0`开头的，那么就是兼容ASCII码的单字节字符；如果第一个字节是`1`开头的就是多字节字符，数一数前面有多少个`1`，就知道这个字符占了几个字节。\n\n所以UTF-8编码后的二进制形式应该如下：\n\n```\n0xxxxxxx 1个byte\n\n110xxxxx 10xxxxxx 2个byte\n\n1110xxxx 10xxxxxx 10xxxxxx 3个byte\n\n11110xxx 10xxxxxx 10xxxxxx 10xxxxxx 4个byte\n\n111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 5个byte\n\n111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 6个byte\n```\n\n> The bytes `0xFE(11111110)` and `0xFF(11111111)` are never used in the UTF-8 encoding.\n\n这两个特殊的字节被用来标示是大端编码和小端编码\n\n\nUTF-8编码的范围和Unicode对应的关系如下：\n\n|总比特数 |Code Point占的位数  |范围|\n|---|----|---|\n| 1 | 7  | 00000000 - 0000007F |\n| 2 | 11 | 00000080 - 000007FF |\n| 3 | 16 | 00000800 - 0000FFFF |\n| 4 | 21 | 00001000 - 001FFFFF |\n| 5 | 26 | 00200000 - 03FFFFFF |\n| 6 | 31 | 04000000 - FFFFFFFF |\n\n编码示例：\n\n`U+05E7 ` 使用`UTF-8`编码示例:\n\n1. 查上表得知， `05E7`在 `0080 - 07FF` 范围内，总共占2个字节\n应该是类似 `110xxxxx 10xxxxxx `\n\n2. 将其写成二进制形式，`0000 0101 1110 0111`\n\n3. 将数据替换上述的`x`，得到 `11010111 10100111 = 0xD7A7`\n\n#### 字节序\n\nUTF-8最多使用6个byte表示一个字符，于是就存在一个字节序的问题。\n字节序分为两种：\n\n1. **Little-Endian**:\n 字节序低位在前  小尾 在操作系统上很常用，也是计算机系统上最常用的字节序\n2. **Big-Endian**: 字节序高位在前 大尾  也称为网络字节序\n\n```\n16进制数字0x12345678，little-endian的存储为:  0x78 0x56 0x34 0x12     地址依次为100, 101, 102, 103\n\n16进制数字0x12345678，big-endian的存储为:     0x12 0x34 0x56 0x78       地址依次为100, 101, 102, 103\n```\n>\"endian\"这个词出自《格列佛游记》。小人国的内战就源于吃鸡蛋时是究竟从大头(Big-Endian)敲开还是从小头(Little-Endian)敲开，由此曾发生过六次叛乱，其中一个皇帝送了命，另一个丢了王位。\n\n#### 字节序用途\n>Little-Endian最常用，大部分用户的操作系统（如windows, FreeBsd,Linux）是Little Endian的。\n\n>Big-Endian最常用在网络协议上，例如TCP/IP协议使用的是big endian. 操作系统上如MAC OS ,是Big Endian 的。\n本质上说，Little Endian还是Big Endian与操作系统和芯片类型都有关系。PowerPC系列采用big endian方式存储数据，x86系列则采用little endian方式存储数据。\n\n```\nBig Endian\n   低地址                                           高地址\n   ----------------------------------------->\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |     12     |      34    |     56      |     78    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nLittle Endian\n   低地址                                           高地址\n   ----------------------------------------->\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |     78     |      56    |     34      |     12    |\n```\n\n> Unicode规范中定义，每一个文件的最前面分别加入一个表示编码顺序的字符，这个字符的名字叫做\"零宽度非换行空格\"（ZERO WIDTH NO-BREAK SPACE），用FEFF表示。这正好是两个字节，而且FF比FE大1。\n如果一个文本文件的头两个字节是FE FF，就表示该文件采用大头方式；如果头两个字节是FF FE，就表示该文件采用小头方式。\n\n## emoji\n\n{%  asset_img   emoji.jpg  %}\n\n\n\n\nemoji表情采用的是 Unicode编码，Emoji就是一种在Unicode位于`\\u1F601-\\u1F64F`区段的字符。这个显然超过了目前常用的UTF-8字符集的编码范围`\\u0000-\\uFFFF`。\n\n使用utf8mb4编码便可以解决上述的问题\n\n## 宽字符\n\n宽字符（Wide character） 是程序设计的术语。它是一个抽象的术语（没有规定具体实现细节），用以表示比8位字符还宽的数据类型。它不同于Unicode。\n\nwchar_t在ANSI/ISO C中是一个数据类型，且某些其它的编程语言也用它来表示宽字符。\n\n## 参考文章\n\n1. [字符编码](https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81)\n\n2. [Unicode_and_Character_Sets.md](https://github.com/acmerfight/insight_python/blob/master/Unicode_and_Character_Sets.md)\n\n3. [Unicode and UTF-8](http://www.compsci.hunter.cuny.edu/~sweiss/resources/Unicode.pdf)\n\n4. [Java 完美判断中文字符](http://www.micmiu.com/lang/java/java-check-chinese/)\n\n5. [Full Emoji Data, v3.0](http://unicode.org/emoji/charts/full-emoji-list.html)\n\n6. [微信emoji表情编码](http://www.tuicool.com/articles/aQBVny)\n\n7. [关于Big Endian 和 Little Endian](http://blog.csdn.net/sunshine1314/article/details/2309655)\n\n8. [字符编码笔记：ASCII，Unicode和UTF-8](http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html)\n","slug":"character-encoding","published":1,"updated":"2017-02-02T09:10:06.138Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgc0004cw4pyq5p7zasm"},{"title":"Base64编码原理","toc":true,"date":"2016-09-26T06:37:33.000Z","_content":"\n## 是什么？\n\n> Base64 is a group of similar binary-to-text encoding schemes that represent binary data in an ASCII string format by translating it into a radix-64 representation. The term Base64 originates from a specific MIME content transfer encoding\n来自 [wikipedia](https://en.wikipedia.org/wiki/Base64)\n\n说白了就是将二进制的数据转换成字符编码。Base64由大小写字母各26个，`0-9`的10个数字，加号`+`\n以及斜杠`/`，一共64个字符组成，另外还用`=`来用作后缀，总共涉及的字符达到65个。\n\n> a）所有的二进制文件，都可以因此转化为可打印的文本编码，使用文本软件进行编辑；\n\n> b）能够对文本进行简单的加密。\n\n> 来自 [Base64笔记-阮一峰](http://www.ruanyifeng.com/blog/2008/06/base64.html)\n\n## 原理\n{%  asset_img   encoding.jpg  %}\n\n\n\n\n>转换的时候，将三个byte的数据，先后放入一个24bit的缓冲区中，先来的byte占高位。数据不足3byte的话，于缓冲器中剩下的bit用0补足。然后，每次取出6（因为26=64）个bit，按照其值选择ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/中的字符作为编码后的输出。不断进行，直到全部输入数据转换完成。\n\n> <https://zh.wikipedia.org/wiki/Base64>\n\n如果要编码的字节数不能被3整除:\n\n  1. 先使用0字节值在末尾补足，使其能够被3整除\n  2. 进行base64的编码\n  3. 在编码后的base64文本后加上一个或两个'='号，代表补足的字节数\n\n  {%  asset_img   encoding2.jpg  %}\n\n\n\n\n  Base64字符串只可能最后出现一个或两个\"=\"，中间是不可能出现\"=\"的\n\n## 用途\n\n>Base64 主要不是加密，它主要的用途是把一些二进制数转成普通字符用于网络传输。由于一些二进制字符在传输协议中属于控制字符，不能直接传送需要转换一下。Base64编码就是把二进制字节序列转化为ASCII字符序列。一般增加1/3长度，而且也是不可读的。\n\n>[BASE64编码原理及应用](http://nieyong.github.io/wiki_web/BASE64%E7%BC%96%E7%A0%81%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8.html)\n\n>Base64常用于在通常处理文本数据的场合，表示、传输、存储一些二进制数据。包括MIME的email、在XML中存储复杂数据。\n\n> <https://zh.wikipedia.org/wiki/Base64>\n\n## python中简单使用\n\n``` python\n>>> import base64\n>>> encoded = base64.b64encode('hello world')\n>>> print encoded\naGVsbG8gd29ybGQ=\n>>> data = base64.b64decode(encoded)\n>>> print data\nhello world\n```\n\n[base64 — RFC 3548: Base16, Base32, Base64 Data Encodings](https://docs.python.org/2/library/base64.html)\n\n## 参考链接\n\n1. [Base64笔记_阮一峰](http://www.ruanyifeng.com/blog/2008/06/base64.html)\n\n2. [Base64_wiki](https://en.wikipedia.org/wiki/Base64)\n\n3. [BASE64编码原理及应用](http://nieyong.github.io/wiki_web/BASE64%E7%BC%96%E7%A0%81%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8.html)\n\n4. [Base64加密](https://github.com/CharonChui/AndroidNote/blob/master/Java%E5%9F%BA%E7%A1%80/Base64%E5%8A%A0%E5%AF%86.md)\n","source":"_posts/base64.md","raw":"---\ntitle: Base64编码原理\ntags: 编码\ncategory: base\ntoc: true\ndate: 2016-09-26 14:37:33\n---\n\n## 是什么？\n\n> Base64 is a group of similar binary-to-text encoding schemes that represent binary data in an ASCII string format by translating it into a radix-64 representation. The term Base64 originates from a specific MIME content transfer encoding\n来自 [wikipedia](https://en.wikipedia.org/wiki/Base64)\n\n说白了就是将二进制的数据转换成字符编码。Base64由大小写字母各26个，`0-9`的10个数字，加号`+`\n以及斜杠`/`，一共64个字符组成，另外还用`=`来用作后缀，总共涉及的字符达到65个。\n\n> a）所有的二进制文件，都可以因此转化为可打印的文本编码，使用文本软件进行编辑；\n\n> b）能够对文本进行简单的加密。\n\n> 来自 [Base64笔记-阮一峰](http://www.ruanyifeng.com/blog/2008/06/base64.html)\n\n## 原理\n{%  asset_img   encoding.jpg  %}\n\n\n\n\n>转换的时候，将三个byte的数据，先后放入一个24bit的缓冲区中，先来的byte占高位。数据不足3byte的话，于缓冲器中剩下的bit用0补足。然后，每次取出6（因为26=64）个bit，按照其值选择ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/中的字符作为编码后的输出。不断进行，直到全部输入数据转换完成。\n\n> <https://zh.wikipedia.org/wiki/Base64>\n\n如果要编码的字节数不能被3整除:\n\n  1. 先使用0字节值在末尾补足，使其能够被3整除\n  2. 进行base64的编码\n  3. 在编码后的base64文本后加上一个或两个'='号，代表补足的字节数\n\n  {%  asset_img   encoding2.jpg  %}\n\n\n\n\n  Base64字符串只可能最后出现一个或两个\"=\"，中间是不可能出现\"=\"的\n\n## 用途\n\n>Base64 主要不是加密，它主要的用途是把一些二进制数转成普通字符用于网络传输。由于一些二进制字符在传输协议中属于控制字符，不能直接传送需要转换一下。Base64编码就是把二进制字节序列转化为ASCII字符序列。一般增加1/3长度，而且也是不可读的。\n\n>[BASE64编码原理及应用](http://nieyong.github.io/wiki_web/BASE64%E7%BC%96%E7%A0%81%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8.html)\n\n>Base64常用于在通常处理文本数据的场合，表示、传输、存储一些二进制数据。包括MIME的email、在XML中存储复杂数据。\n\n> <https://zh.wikipedia.org/wiki/Base64>\n\n## python中简单使用\n\n``` python\n>>> import base64\n>>> encoded = base64.b64encode('hello world')\n>>> print encoded\naGVsbG8gd29ybGQ=\n>>> data = base64.b64decode(encoded)\n>>> print data\nhello world\n```\n\n[base64 — RFC 3548: Base16, Base32, Base64 Data Encodings](https://docs.python.org/2/library/base64.html)\n\n## 参考链接\n\n1. [Base64笔记_阮一峰](http://www.ruanyifeng.com/blog/2008/06/base64.html)\n\n2. [Base64_wiki](https://en.wikipedia.org/wiki/Base64)\n\n3. [BASE64编码原理及应用](http://nieyong.github.io/wiki_web/BASE64%E7%BC%96%E7%A0%81%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8.html)\n\n4. [Base64加密](https://github.com/CharonChui/AndroidNote/blob/master/Java%E5%9F%BA%E7%A1%80/Base64%E5%8A%A0%E5%AF%86.md)\n","slug":"base64","published":1,"updated":"2017-02-02T09:10:06.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgcd004gw4pyqs9ds0as"},{"title":"atnode——在集群上批量执行命令","toc":true,"date":"2016-12-12T16:07:02.000Z","_content":"\n\n## atnodes\n\natnode是一个用perl写成的工具，它可以方便的在集群上执行命令\n\n[官网链接](http://search.cpan.org/~agent/SSH-Batch-0.029/bin/atnodes)\n\n\n```bash\natnodes \"echo alias grep=\\'grep -n --color\\' >> ~/.bashrc \"  xxx.xx[1-10].com  yyy.yy[1-10].com\n```\n\n上述的命令就会在后面两个列表的主机上都执行一遍了。\n\n\n## tonodes\n\n与atnodes类似，tonodes 可以将文件传输到集群上的没一个文件\n\n## 其他\n\nfornodes: Expand patterns to machine host list\n\nkey2nodes: Push SSH public keys to remote clusters \n\n## 作者博客\n\n[agentzh的微博](http://weibo.com/u/1834459124?topnav=1&wvr=6&topsug=1&is_all=1)","source":"_posts/atnode.md","raw":"---\ntitle: atnode——在集群上批量执行命令\ntags: shell\ncategory: linux\ntoc: true\ndate: 2016-12-13 00:07:02\n---\n\n\n## atnodes\n\natnode是一个用perl写成的工具，它可以方便的在集群上执行命令\n\n[官网链接](http://search.cpan.org/~agent/SSH-Batch-0.029/bin/atnodes)\n\n\n```bash\natnodes \"echo alias grep=\\'grep -n --color\\' >> ~/.bashrc \"  xxx.xx[1-10].com  yyy.yy[1-10].com\n```\n\n上述的命令就会在后面两个列表的主机上都执行一遍了。\n\n\n## tonodes\n\n与atnodes类似，tonodes 可以将文件传输到集群上的没一个文件\n\n## 其他\n\nfornodes: Expand patterns to machine host list\n\nkey2nodes: Push SSH public keys to remote clusters \n\n## 作者博客\n\n[agentzh的微博](http://weibo.com/u/1834459124?topnav=1&wvr=6&topsug=1&is_all=1)","slug":"atnode","published":1,"updated":"2017-02-02T09:10:07.017Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgcx004jw4pyuy2g7fiy"},{"title":"Spring MVC 中的异常处理","toc":true,"date":"2017-01-08T17:57:08.000Z","_content":"\n\n## Spring MVC的异常处理\n\nSpring中的异常处理主要有两种方式，*一种*是实现`HandlerExceptionResolver`接口，\n\n这个接口中只有一个方法`resolveException`，返回值是一个`ModelAndView`的对象; \n\n*另外一种*是使用`@ExceptionHandler`注解作用在方法上，注解的值来指定这个方法能处理的异常的类，\n\n如果注解的值是空的，能处理的类以方法的参数为准。\n\n```java\npublic interface HandlerExceptionResolver {\n\n    /**\n     * Try to resolve the given exception that got thrown during handler execution,\n     * returning a {@link ModelAndView} that represents a specific error page if appropriate.\n     * <p>The returned {@code ModelAndView} may be {@linkplain ModelAndView#isEmpty() empty}\n     * to indicate that the exception has been resolved successfully but that no view\n     * should be rendered, for instance by setting a status code.\n     * @param request current HTTP request\n     * @param response current HTTP response\n     * @param handler the executed handler, or {@code null} if none chosen at the\n     * time of the exception (for example, if multipart resolution failed)\n     * @param ex the exception that got thrown during handler execution\n     * @return a corresponding {@code ModelAndView} to forward to, or {@code null}\n     * for default processing\n     */\n    ModelAndView resolveException(\n            HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex);\n\n}\n\n//@ExceptionHandler\n@Controller\npublic class SimpleController {\n\n    // @RequestMapping methods omitted ...\n\n    @ExceptionHandler(IOException.class)\n    public ResponseEntity<String> handleIOException(IOException ex) {\n        // prepare responseEntity\n        return responseEntity;\n    }\n\n}\n```\n\n### 异常相关的类\n\n{% pullquote mindmap %}\n#Spring MVC Exception\n##HandlerExceptionResolver\n###SimpleMappingExceptionResolver\n###DefaultHandlerExceptionResolver\n##@ExceptionHandler\n###@ControllerAdvice\n###ResponseEntityExceptionHandler\n##Default Servlet Container Error Page\n##@ResponseStatus\n###ResponseStatusExceptionResolver\n{% endpullquote %}\n\n### `SimpleMappingExceptionResolver`\n\n> The SimpleMappingExceptionResolver enables you to take the\nclass name of any exception that might be thrown and map it to a view name. \n\n这个Resolver可以将异常对应的类名映射到一个对应的view name上。\n\n```xml\n<bean class=\"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver\">\n    <property name=\"exceptionMappings\">\n        <props>\n            <prop key=\"com.howtodoinjava.demo.exception.AuthException\">\n                error/authExceptionView\n            </prop>\n        </props>\n    </property>\n    <property name=\"defaultErrorView\" value=\"error/genericView\"/>\n</bean>\n```\n\n### `DefaultHandlerExceptionResolver`\n\n> The DefaultHandlerExceptionResolver translates Spring MVC exceptions to specific error\nstatus codes.\n\n这个Resolver的作用就是将Spring MVC产生的一些异常翻译成对应的http status code。Spring MVC中\n\n默认注册了这个Resolver。\n\n转换列表：\n\n| Exception   |                    HTTP Status Code|\n| --- | ----- |\n| BindException   |                   400 (Bad Request)|\n| ConversionNotSupportedException   |                   500 (Internal Server Error)|\n| HttpMediaTypeNotAcceptableException   |                   406 (Not Acceptable)|\n| HttpMediaTypeNotSupportedException   |                   415 (Unsupported Media Type)|\n| HttpMessageNotReadableException   |                   400 (Bad Request)|\n| HttpMessageNotWritableException   |                   500 (Internal Server Error)|\n| HttpRequestMethodNotSupportedException   |                   405 (Method Not Allowed)|\n| MethodArgumentNotValidException   |                   400 (Bad Request)|\n| MissingPathVariableException   |                   500 (Internal Server Error)|\n| MissingServletRequestParameterException   |                   400 (Bad Request)|\n| MissingServletRequestPartException   |                   400 (Bad Request)|\n| NoHandlerFoundException   |                   404 (Not Found)|\n| NoSuchRequestHandlingMethodException   |                   404 (Not Found)|\n\n### @ExceptionHandler和@ControllerAdvice\n\n`@ExceptionHandler` 可以指定异常的处理类，`@ControllerAdvice`则可以实现全局的异常统一处理。\n\n两者可配合使用，达到统一处理异常的效果。\n\n\n> The @ControllerAdvice annotation is a component annotation allowing implementation classes\nto be auto-detected through classpath scanning. It is automatically enabled when using the MVC\nnamespace or the MVC Java config.\n\n`@ControllerAdvice`默认在Spring MVC的命名空间中启用。\n\n> Classes annotated with @ControllerAdvice can contain @ExceptionHandler, @InitBinder,\nand @ModelAttribute annotated methods, and these methods will apply to @RequestMapping\nmethods across all controller hierarchies as opposed to the controller hierarchy within which they are\ndeclared.\n\n`@ControllerAdvice`声明的异常处理方法默认对全局都是有效的。\n\n```java\n// Target all Controllers annotated with @RestController\n@ControllerAdvice(annotations = RestController.class)\npublic class AnnotationAdvice {}\n\n// Target all Controllers within specific packages\n@ControllerAdvice(\"org.example.controllers\")\npublic class BasePackageAdvice {}\n\n// Target all Controllers assignable to specific classes\n@ControllerAdvice(assignableTypes = {ControllerInterface.class, AbstractController.class})\npublic class AssignableTypesAdvice {}\n```\n\n还有一个`@RestControllerAdvice`和`@ControllerAdvice`相似，只是假定`@ResponseBody`出现在`@ExceptionHandler`上\n\n> @RestControllerAdvice is an alternative where @ExceptionHandler methods assume\n@ResponseBody semantics by default.\n\n### `ResponseEntityExceptionHandler`\n\n如果你想使用`@ExceptionHandler`来处理异常的话， 你可以继承这个类。\n\n这个类中定义好了一个异常处理的方法，来处理Spring MVC 的标准异常。\n\n```java\n/**\n     * Provides handling for standard Spring MVC exceptions.\n     * @param ex the target exception\n     * @param request the current request\n     */\n    @ExceptionHandler({\n            NoSuchRequestHandlingMethodException.class,\n            HttpRequestMethodNotSupportedException.class,\n            HttpMediaTypeNotSupportedException.class,\n            HttpMediaTypeNotAcceptableException.class,\n            MissingPathVariableException.class,\n            MissingServletRequestParameterException.class,\n            ServletRequestBindingException.class,\n            ConversionNotSupportedException.class,\n            TypeMismatchException.class,\n            HttpMessageNotReadableException.class,\n            HttpMessageNotWritableException.class,\n            MethodArgumentNotValidException.class,\n            MissingServletRequestPartException.class,\n            BindException.class,\n            NoHandlerFoundException.class\n        })\n    public final ResponseEntity<Object> handleException(Exception ex, WebRequest request) {\n\n            HttpHeaders headers = new HttpHeaders();\n\n            if (ex instanceof NoSuchRequestHandlingMethodException) {\n                HttpStatus status = HttpStatus.NOT_FOUND;\n                return handleNoSuchRequestHandlingMethod((NoSuchRequestHandlingMethodException) ex, headers, status, request);\n            }\n            ...\n            ...\n    }\n```\n\n\n\n### @ResponseStatus\n\n用于在自定义异常，设置http的状态码\n\n```java\n    @ResponseStatus(value=HttpStatus.NOT_FOUND, reason=\"No such Order\")  // 404\n    public class OrderNotFoundException extends RuntimeException {\n        // ...\n    }\n```\n\nSpring MVC 中默认开启了`ResponseStatusExceptionResolver`，这个Resolver会处理上面\n\n设置的Http status code。\n\n> A business exception can be annotated with @ResponseStatus. When the exception is raised, the\nResponseStatusExceptionResolver handles it by setting the status of the response accordingly.\nBy default the DispatcherServlet registers the ResponseStatusExceptionResolver and it is\navailable for use.\n\n```java\n@Override\n    protected ModelAndView doResolveException(HttpServletRequest request, HttpServletResponse response,\n            Object handler, Exception ex) {\n\n        ResponseStatus responseStatus = AnnotatedElementUtils.findMergedAnnotation(ex.getClass(), ResponseStatus.class);\n        if (responseStatus != null) {\n            try {\n                return resolveResponseStatus(responseStatus, request, response, handler, ex);\n            }\n            catch (Exception resolveEx) {\n                logger.warn(\"Handling of @ResponseStatus resulted in Exception\", resolveEx);\n            }\n        }\n        else if (ex.getCause() instanceof Exception) {\n            ex = (Exception) ex.getCause();\n            return doResolveException(request, response, handler, ex);\n        }\n        return null;\n    }\n```\n\n通过工具类拿到注解上的值，然后调用内部的`resolveResponseStatus`\n\n```java\nprotected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request,\n            HttpServletResponse response, Object handler, Exception ex) throws Exception {\n\n        int statusCode = responseStatus.code().value();\n        String reason = responseStatus.reason();\n        if (this.messageSource != null) {\n            reason = this.messageSource.getMessage(reason, null, reason, LocaleContextHolder.getLocale());\n        }\n        if (!StringUtils.hasLength(reason)) {\n            response.sendError(statusCode);\n        }\n        else {\n            response.sendError(statusCode, reason);\n        }\n        return new ModelAndView();\n    }\n```\n\n最终将http status code 设置到reponse中。\n\n\n\n### 源码\n\n\nSpring MVC 的异常处理在`DispatcherServlet`的`doDispatch`方法中\n\n```java\nprotected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpServletRequest processedRequest = request;\n        HandlerExecutionChain mappedHandler = null;\n        boolean multipartRequestParsed = false;\n\n        WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\n        try {\n            ModelAndView mv = null;\n            Exception dispatchException = null;\n\n            try {\n                //do Handle\n                ...\n                }\n            catch (Exception ex) {\n                dispatchException = ex;\n            }\n            processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);\n        }\n        catch (Exception ex) {\n            triggerAfterCompletion(processedRequest, response, mappedHandler, ex);\n        }\n        catch (Error err) {\n            triggerAfterCompletionWithError(processedRequest, response, mappedHandler, err);\n        }\n        finally {\n            //post process\n        }\n}\n\n```\n在内层的`try-catch`中有一个方法`processDispatchResult`, 在这个方法之前的catch块已经将处理过程可能出现的异常catch住了，并赋值给 `dispatchException`.\n\n然后调用`processDispatchResult`分发给能处理这个异常的`ExceptionResolver`。\n\n```java\n    /**\n     * Handle the result of handler selection and handler invocation, which is\n     * either a ModelAndView or an Exception to be resolved to a ModelAndView.\n     */\n    private void processDispatchResult(HttpServletRequest request, HttpServletResponse response,\n            HandlerExecutionChain mappedHandler, ModelAndView mv, Exception exception) throws Exception {\n\n        boolean errorView = false;\n\n        if (exception != null) {\n            if (exception instanceof ModelAndViewDefiningException) {\n                logger.debug(\"ModelAndViewDefiningException encountered\", exception);\n                mv = ((ModelAndViewDefiningException) exception).getModelAndView();\n            }\n            else {\n                Object handler = (mappedHandler != null ? mappedHandler.getHandler() : null);\n                mv = processHandlerException(request, response, handler, exception);\n                errorView = (mv != null);\n            }\n        }\n\n        // Did the handler return a view to render?\n        if (mv != null && !mv.wasCleared()) {\n            render(mv, request, response);\n            if (errorView) {\n                WebUtils.clearErrorRequestAttributes(request);\n            }\n        }\n        else {\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"Null ModelAndView returned to DispatcherServlet with name '\" + getServletName() +\n                        \"': assuming HandlerAdapter completed request handling\");\n            }\n        }\n\n        if (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) {\n            // Concurrent handling started during a forward\n            return;\n        }\n\n        if (mappedHandler != null) {\n            mappedHandler.triggerAfterCompletion(request, response, null);\n        }\n    }\n\nprotected ModelAndView processHandlerException(HttpServletRequest request, HttpServletResponse response,\n            Object handler, Exception ex) throws Exception {\n\n        // Check registered HandlerExceptionResolvers...\n        ModelAndView exMv = null;\n        for (HandlerExceptionResolver handlerExceptionResolver : this.handlerExceptionResolvers) {\n            exMv = handlerExceptionResolver.resolveException(request, response, handler, ex);\n            if (exMv != null) {\n                break;\n            }\n        }\n        if (exMv != null) {\n            if (exMv.isEmpty()) {\n                request.setAttribute(EXCEPTION_ATTRIBUTE, ex);\n                return null;\n            }\n            // We might still need view name translation for a plain error model...\n            if (!exMv.hasView()) {\n                exMv.setViewName(getDefaultViewName(request));\n            }\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"Handler execution resulted in exception - forwarding to resolved error view: \" + exMv, ex);\n            }\n            WebUtils.exposeErrorRequestAttributes(request, ex, getServletName());\n            return exMv;\n        }\n\n        throw ex;\n    }\n\n```\n\n这个异常的处理和之前，查找handler的过程是一样的。\n\n遍历所有已经注册的`HandlerExceptionResolver`, 找到第一个能处理的。\n\n#### @ExceptionHandler的处理\n\n```java\n/**\n * Implementation of the {@link org.springframework.web.portlet.HandlerExceptionResolver} interface that handles\n * exceptions through the {@link ExceptionHandler} annotation.\n *\n * <p>This exception resolver is enabled by default in the {@link org.springframework.web.portlet.DispatcherPortlet}.\n *\n * @author Arjen Poutsma\n * @author Juergen Hoeller\n * @since 3.0\n */\npublic class AnnotationMethodHandlerExceptionResolver extends AbstractHandlerExceptionResolver {\n    ...\n\n    @Override\n    protected ModelAndView doResolveException(\n            PortletRequest request, MimeResponse response, Object handler, Exception ex) {\n\n        if (handler != null) {\n            Method handlerMethod = findBestExceptionHandlerMethod(handler, ex);\n            if (handlerMethod != null) {\n                NativeWebRequest webRequest = new PortletWebRequest(request, response);\n                try {\n                    Object[] args = resolveHandlerArguments(handlerMethod, handler, webRequest, ex);\n                    if (logger.isDebugEnabled()) {\n                        logger.debug(\"Invoking request handler method: \" + handlerMethod);\n                    }\n                    Object retVal = doInvokeMethod(handlerMethod, handler, args);\n                    return getModelAndView(retVal);\n                }\n                catch (Exception invocationEx) {\n                    logger.error(\"Invoking request method resulted in exception : \" + handlerMethod, invocationEx);\n                }\n            }\n        }\n        return null;\n    }\n\n}\n\n```\n\n和普通的处理类似，从所有标注了`@ExceptionHandler`的方法中找到最佳匹配，然后解析参数，调用。\n\n## web容器的错误处理\n\n`WEB-INF/web.xml`\n\n```xml\n<error-page>\n    <error-code>500</error-code>\n    <location>/Error.jsp</location>\n</error-page>\n\n<error-page>\n    <exception-type>java.lang.Exception</exception-type>\n    <location>/Error.jsp</location>\n</error-page>\n```\n\nlocation中的值可以是一个jsp，也可以是一个URL（包括`@Controller`注解的）\n\n处理error的Controller示例：\n\n```java\n@Controller\npublic class ErrorController {\n\n    @RequestMapping(path = \"/error\", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)\n    @ResponseBody\n    public Map<String, Object> handle(HttpServletRequest request) {\n\n        Map<String, Object> map = new HashMap<String, Object>();\n        map.put(\"status\", request.getAttribute(\"javax.servlet.error.status_code\"));\n        map.put(\"reason\", request.getAttribute(\"javax.servlet.error.message\"));\n\n        return map;\n    }\n\n}\n```\n\nJSP示例：\n\n```\n<%@ page contentType=\"application/json\" pageEncoding=\"UTF-8\"%>\n{\nstatus:<%=request.getAttribute(\"javax.servlet.error.status_code\") %>,\nreason:<%=request.getAttribute(\"javax.servlet.error.message\") %>\n}\n```\n\n\n## 参考\n\n1. [SpringMVC 异常处理 - 纵酒挥刀斩人头 - 博客园](http://www.cnblogs.com/hupengcool/p/4586910.html)\n\n2. [22. Web MVC framework](https://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-exceptionhandlers)\n\n3. [Spring MVC Mapping Exceptions to Views Example | Spring MVC SimpleMappingExceptionResolver Example](http://howtodoinjava.com/spring/spring-mvc/spring-mvc-simplemappingexceptionresolver-example/)\n\n4. [java - Custom Error Page in Tomcat 7 for Error Code 500 - Stack Overflow](http://stackoverflow.com/questions/15987212/custom-error-page-in-tomcat-7-for-error-code-500)","source":"_posts/Spring-mvc-exception.md","raw":"---\ntitle: Spring MVC 中的异常处理\ntags: exception\ncategory: spring\ntoc: true\ndate: 2017-01-09 01:57:08\n---\n\n\n## Spring MVC的异常处理\n\nSpring中的异常处理主要有两种方式，*一种*是实现`HandlerExceptionResolver`接口，\n\n这个接口中只有一个方法`resolveException`，返回值是一个`ModelAndView`的对象; \n\n*另外一种*是使用`@ExceptionHandler`注解作用在方法上，注解的值来指定这个方法能处理的异常的类，\n\n如果注解的值是空的，能处理的类以方法的参数为准。\n\n```java\npublic interface HandlerExceptionResolver {\n\n    /**\n     * Try to resolve the given exception that got thrown during handler execution,\n     * returning a {@link ModelAndView} that represents a specific error page if appropriate.\n     * <p>The returned {@code ModelAndView} may be {@linkplain ModelAndView#isEmpty() empty}\n     * to indicate that the exception has been resolved successfully but that no view\n     * should be rendered, for instance by setting a status code.\n     * @param request current HTTP request\n     * @param response current HTTP response\n     * @param handler the executed handler, or {@code null} if none chosen at the\n     * time of the exception (for example, if multipart resolution failed)\n     * @param ex the exception that got thrown during handler execution\n     * @return a corresponding {@code ModelAndView} to forward to, or {@code null}\n     * for default processing\n     */\n    ModelAndView resolveException(\n            HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex);\n\n}\n\n//@ExceptionHandler\n@Controller\npublic class SimpleController {\n\n    // @RequestMapping methods omitted ...\n\n    @ExceptionHandler(IOException.class)\n    public ResponseEntity<String> handleIOException(IOException ex) {\n        // prepare responseEntity\n        return responseEntity;\n    }\n\n}\n```\n\n### 异常相关的类\n\n{% pullquote mindmap %}\n#Spring MVC Exception\n##HandlerExceptionResolver\n###SimpleMappingExceptionResolver\n###DefaultHandlerExceptionResolver\n##@ExceptionHandler\n###@ControllerAdvice\n###ResponseEntityExceptionHandler\n##Default Servlet Container Error Page\n##@ResponseStatus\n###ResponseStatusExceptionResolver\n{% endpullquote %}\n\n### `SimpleMappingExceptionResolver`\n\n> The SimpleMappingExceptionResolver enables you to take the\nclass name of any exception that might be thrown and map it to a view name. \n\n这个Resolver可以将异常对应的类名映射到一个对应的view name上。\n\n```xml\n<bean class=\"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver\">\n    <property name=\"exceptionMappings\">\n        <props>\n            <prop key=\"com.howtodoinjava.demo.exception.AuthException\">\n                error/authExceptionView\n            </prop>\n        </props>\n    </property>\n    <property name=\"defaultErrorView\" value=\"error/genericView\"/>\n</bean>\n```\n\n### `DefaultHandlerExceptionResolver`\n\n> The DefaultHandlerExceptionResolver translates Spring MVC exceptions to specific error\nstatus codes.\n\n这个Resolver的作用就是将Spring MVC产生的一些异常翻译成对应的http status code。Spring MVC中\n\n默认注册了这个Resolver。\n\n转换列表：\n\n| Exception   |                    HTTP Status Code|\n| --- | ----- |\n| BindException   |                   400 (Bad Request)|\n| ConversionNotSupportedException   |                   500 (Internal Server Error)|\n| HttpMediaTypeNotAcceptableException   |                   406 (Not Acceptable)|\n| HttpMediaTypeNotSupportedException   |                   415 (Unsupported Media Type)|\n| HttpMessageNotReadableException   |                   400 (Bad Request)|\n| HttpMessageNotWritableException   |                   500 (Internal Server Error)|\n| HttpRequestMethodNotSupportedException   |                   405 (Method Not Allowed)|\n| MethodArgumentNotValidException   |                   400 (Bad Request)|\n| MissingPathVariableException   |                   500 (Internal Server Error)|\n| MissingServletRequestParameterException   |                   400 (Bad Request)|\n| MissingServletRequestPartException   |                   400 (Bad Request)|\n| NoHandlerFoundException   |                   404 (Not Found)|\n| NoSuchRequestHandlingMethodException   |                   404 (Not Found)|\n\n### @ExceptionHandler和@ControllerAdvice\n\n`@ExceptionHandler` 可以指定异常的处理类，`@ControllerAdvice`则可以实现全局的异常统一处理。\n\n两者可配合使用，达到统一处理异常的效果。\n\n\n> The @ControllerAdvice annotation is a component annotation allowing implementation classes\nto be auto-detected through classpath scanning. It is automatically enabled when using the MVC\nnamespace or the MVC Java config.\n\n`@ControllerAdvice`默认在Spring MVC的命名空间中启用。\n\n> Classes annotated with @ControllerAdvice can contain @ExceptionHandler, @InitBinder,\nand @ModelAttribute annotated methods, and these methods will apply to @RequestMapping\nmethods across all controller hierarchies as opposed to the controller hierarchy within which they are\ndeclared.\n\n`@ControllerAdvice`声明的异常处理方法默认对全局都是有效的。\n\n```java\n// Target all Controllers annotated with @RestController\n@ControllerAdvice(annotations = RestController.class)\npublic class AnnotationAdvice {}\n\n// Target all Controllers within specific packages\n@ControllerAdvice(\"org.example.controllers\")\npublic class BasePackageAdvice {}\n\n// Target all Controllers assignable to specific classes\n@ControllerAdvice(assignableTypes = {ControllerInterface.class, AbstractController.class})\npublic class AssignableTypesAdvice {}\n```\n\n还有一个`@RestControllerAdvice`和`@ControllerAdvice`相似，只是假定`@ResponseBody`出现在`@ExceptionHandler`上\n\n> @RestControllerAdvice is an alternative where @ExceptionHandler methods assume\n@ResponseBody semantics by default.\n\n### `ResponseEntityExceptionHandler`\n\n如果你想使用`@ExceptionHandler`来处理异常的话， 你可以继承这个类。\n\n这个类中定义好了一个异常处理的方法，来处理Spring MVC 的标准异常。\n\n```java\n/**\n     * Provides handling for standard Spring MVC exceptions.\n     * @param ex the target exception\n     * @param request the current request\n     */\n    @ExceptionHandler({\n            NoSuchRequestHandlingMethodException.class,\n            HttpRequestMethodNotSupportedException.class,\n            HttpMediaTypeNotSupportedException.class,\n            HttpMediaTypeNotAcceptableException.class,\n            MissingPathVariableException.class,\n            MissingServletRequestParameterException.class,\n            ServletRequestBindingException.class,\n            ConversionNotSupportedException.class,\n            TypeMismatchException.class,\n            HttpMessageNotReadableException.class,\n            HttpMessageNotWritableException.class,\n            MethodArgumentNotValidException.class,\n            MissingServletRequestPartException.class,\n            BindException.class,\n            NoHandlerFoundException.class\n        })\n    public final ResponseEntity<Object> handleException(Exception ex, WebRequest request) {\n\n            HttpHeaders headers = new HttpHeaders();\n\n            if (ex instanceof NoSuchRequestHandlingMethodException) {\n                HttpStatus status = HttpStatus.NOT_FOUND;\n                return handleNoSuchRequestHandlingMethod((NoSuchRequestHandlingMethodException) ex, headers, status, request);\n            }\n            ...\n            ...\n    }\n```\n\n\n\n### @ResponseStatus\n\n用于在自定义异常，设置http的状态码\n\n```java\n    @ResponseStatus(value=HttpStatus.NOT_FOUND, reason=\"No such Order\")  // 404\n    public class OrderNotFoundException extends RuntimeException {\n        // ...\n    }\n```\n\nSpring MVC 中默认开启了`ResponseStatusExceptionResolver`，这个Resolver会处理上面\n\n设置的Http status code。\n\n> A business exception can be annotated with @ResponseStatus. When the exception is raised, the\nResponseStatusExceptionResolver handles it by setting the status of the response accordingly.\nBy default the DispatcherServlet registers the ResponseStatusExceptionResolver and it is\navailable for use.\n\n```java\n@Override\n    protected ModelAndView doResolveException(HttpServletRequest request, HttpServletResponse response,\n            Object handler, Exception ex) {\n\n        ResponseStatus responseStatus = AnnotatedElementUtils.findMergedAnnotation(ex.getClass(), ResponseStatus.class);\n        if (responseStatus != null) {\n            try {\n                return resolveResponseStatus(responseStatus, request, response, handler, ex);\n            }\n            catch (Exception resolveEx) {\n                logger.warn(\"Handling of @ResponseStatus resulted in Exception\", resolveEx);\n            }\n        }\n        else if (ex.getCause() instanceof Exception) {\n            ex = (Exception) ex.getCause();\n            return doResolveException(request, response, handler, ex);\n        }\n        return null;\n    }\n```\n\n通过工具类拿到注解上的值，然后调用内部的`resolveResponseStatus`\n\n```java\nprotected ModelAndView resolveResponseStatus(ResponseStatus responseStatus, HttpServletRequest request,\n            HttpServletResponse response, Object handler, Exception ex) throws Exception {\n\n        int statusCode = responseStatus.code().value();\n        String reason = responseStatus.reason();\n        if (this.messageSource != null) {\n            reason = this.messageSource.getMessage(reason, null, reason, LocaleContextHolder.getLocale());\n        }\n        if (!StringUtils.hasLength(reason)) {\n            response.sendError(statusCode);\n        }\n        else {\n            response.sendError(statusCode, reason);\n        }\n        return new ModelAndView();\n    }\n```\n\n最终将http status code 设置到reponse中。\n\n\n\n### 源码\n\n\nSpring MVC 的异常处理在`DispatcherServlet`的`doDispatch`方法中\n\n```java\nprotected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {\n        HttpServletRequest processedRequest = request;\n        HandlerExecutionChain mappedHandler = null;\n        boolean multipartRequestParsed = false;\n\n        WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\n        try {\n            ModelAndView mv = null;\n            Exception dispatchException = null;\n\n            try {\n                //do Handle\n                ...\n                }\n            catch (Exception ex) {\n                dispatchException = ex;\n            }\n            processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);\n        }\n        catch (Exception ex) {\n            triggerAfterCompletion(processedRequest, response, mappedHandler, ex);\n        }\n        catch (Error err) {\n            triggerAfterCompletionWithError(processedRequest, response, mappedHandler, err);\n        }\n        finally {\n            //post process\n        }\n}\n\n```\n在内层的`try-catch`中有一个方法`processDispatchResult`, 在这个方法之前的catch块已经将处理过程可能出现的异常catch住了，并赋值给 `dispatchException`.\n\n然后调用`processDispatchResult`分发给能处理这个异常的`ExceptionResolver`。\n\n```java\n    /**\n     * Handle the result of handler selection and handler invocation, which is\n     * either a ModelAndView or an Exception to be resolved to a ModelAndView.\n     */\n    private void processDispatchResult(HttpServletRequest request, HttpServletResponse response,\n            HandlerExecutionChain mappedHandler, ModelAndView mv, Exception exception) throws Exception {\n\n        boolean errorView = false;\n\n        if (exception != null) {\n            if (exception instanceof ModelAndViewDefiningException) {\n                logger.debug(\"ModelAndViewDefiningException encountered\", exception);\n                mv = ((ModelAndViewDefiningException) exception).getModelAndView();\n            }\n            else {\n                Object handler = (mappedHandler != null ? mappedHandler.getHandler() : null);\n                mv = processHandlerException(request, response, handler, exception);\n                errorView = (mv != null);\n            }\n        }\n\n        // Did the handler return a view to render?\n        if (mv != null && !mv.wasCleared()) {\n            render(mv, request, response);\n            if (errorView) {\n                WebUtils.clearErrorRequestAttributes(request);\n            }\n        }\n        else {\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"Null ModelAndView returned to DispatcherServlet with name '\" + getServletName() +\n                        \"': assuming HandlerAdapter completed request handling\");\n            }\n        }\n\n        if (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) {\n            // Concurrent handling started during a forward\n            return;\n        }\n\n        if (mappedHandler != null) {\n            mappedHandler.triggerAfterCompletion(request, response, null);\n        }\n    }\n\nprotected ModelAndView processHandlerException(HttpServletRequest request, HttpServletResponse response,\n            Object handler, Exception ex) throws Exception {\n\n        // Check registered HandlerExceptionResolvers...\n        ModelAndView exMv = null;\n        for (HandlerExceptionResolver handlerExceptionResolver : this.handlerExceptionResolvers) {\n            exMv = handlerExceptionResolver.resolveException(request, response, handler, ex);\n            if (exMv != null) {\n                break;\n            }\n        }\n        if (exMv != null) {\n            if (exMv.isEmpty()) {\n                request.setAttribute(EXCEPTION_ATTRIBUTE, ex);\n                return null;\n            }\n            // We might still need view name translation for a plain error model...\n            if (!exMv.hasView()) {\n                exMv.setViewName(getDefaultViewName(request));\n            }\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"Handler execution resulted in exception - forwarding to resolved error view: \" + exMv, ex);\n            }\n            WebUtils.exposeErrorRequestAttributes(request, ex, getServletName());\n            return exMv;\n        }\n\n        throw ex;\n    }\n\n```\n\n这个异常的处理和之前，查找handler的过程是一样的。\n\n遍历所有已经注册的`HandlerExceptionResolver`, 找到第一个能处理的。\n\n#### @ExceptionHandler的处理\n\n```java\n/**\n * Implementation of the {@link org.springframework.web.portlet.HandlerExceptionResolver} interface that handles\n * exceptions through the {@link ExceptionHandler} annotation.\n *\n * <p>This exception resolver is enabled by default in the {@link org.springframework.web.portlet.DispatcherPortlet}.\n *\n * @author Arjen Poutsma\n * @author Juergen Hoeller\n * @since 3.0\n */\npublic class AnnotationMethodHandlerExceptionResolver extends AbstractHandlerExceptionResolver {\n    ...\n\n    @Override\n    protected ModelAndView doResolveException(\n            PortletRequest request, MimeResponse response, Object handler, Exception ex) {\n\n        if (handler != null) {\n            Method handlerMethod = findBestExceptionHandlerMethod(handler, ex);\n            if (handlerMethod != null) {\n                NativeWebRequest webRequest = new PortletWebRequest(request, response);\n                try {\n                    Object[] args = resolveHandlerArguments(handlerMethod, handler, webRequest, ex);\n                    if (logger.isDebugEnabled()) {\n                        logger.debug(\"Invoking request handler method: \" + handlerMethod);\n                    }\n                    Object retVal = doInvokeMethod(handlerMethod, handler, args);\n                    return getModelAndView(retVal);\n                }\n                catch (Exception invocationEx) {\n                    logger.error(\"Invoking request method resulted in exception : \" + handlerMethod, invocationEx);\n                }\n            }\n        }\n        return null;\n    }\n\n}\n\n```\n\n和普通的处理类似，从所有标注了`@ExceptionHandler`的方法中找到最佳匹配，然后解析参数，调用。\n\n## web容器的错误处理\n\n`WEB-INF/web.xml`\n\n```xml\n<error-page>\n    <error-code>500</error-code>\n    <location>/Error.jsp</location>\n</error-page>\n\n<error-page>\n    <exception-type>java.lang.Exception</exception-type>\n    <location>/Error.jsp</location>\n</error-page>\n```\n\nlocation中的值可以是一个jsp，也可以是一个URL（包括`@Controller`注解的）\n\n处理error的Controller示例：\n\n```java\n@Controller\npublic class ErrorController {\n\n    @RequestMapping(path = \"/error\", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)\n    @ResponseBody\n    public Map<String, Object> handle(HttpServletRequest request) {\n\n        Map<String, Object> map = new HashMap<String, Object>();\n        map.put(\"status\", request.getAttribute(\"javax.servlet.error.status_code\"));\n        map.put(\"reason\", request.getAttribute(\"javax.servlet.error.message\"));\n\n        return map;\n    }\n\n}\n```\n\nJSP示例：\n\n```\n<%@ page contentType=\"application/json\" pageEncoding=\"UTF-8\"%>\n{\nstatus:<%=request.getAttribute(\"javax.servlet.error.status_code\") %>,\nreason:<%=request.getAttribute(\"javax.servlet.error.message\") %>\n}\n```\n\n\n## 参考\n\n1. [SpringMVC 异常处理 - 纵酒挥刀斩人头 - 博客园](http://www.cnblogs.com/hupengcool/p/4586910.html)\n\n2. [22. Web MVC framework](https://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-exceptionhandlers)\n\n3. [Spring MVC Mapping Exceptions to Views Example | Spring MVC SimpleMappingExceptionResolver Example](http://howtodoinjava.com/spring/spring-mvc/spring-mvc-simplemappingexceptionresolver-example/)\n\n4. [java - Custom Error Page in Tomcat 7 for Error Code 500 - Stack Overflow](http://stackoverflow.com/questions/15987212/custom-error-page-in-tomcat-7-for-error-code-500)","slug":"Spring-mvc-exception","published":1,"updated":"2017-02-02T09:09:50.755Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgd2004mw4pytff2nixv"},{"title":"HttpMessageConverter 原理和源码","toc":true,"abbrlink":"55451865","date":"2016-11-28T18:48:45.000Z","_content":"\n## 架构\n{%  asset_img   arch.jpg  %}\n\n\n\n\n## HttpMessageConverter接口\n\n\n\n{%  asset_img http-message-converter.jpg    )\n\n\n\n\n>`HttpMessageConverter` used to\nmarshal objects into the HTTP request body and to unmarshal any response back into an object.\n\n提供将Java中的对象和http请求、响应相互转换的功能\n\n### spring 中的配置\n\nxml配置示例：\n\n```xml\n<mvc:annotation-driven conversion-service=\"conversionService\">\n    <mvc:message-converters>\n        <bean class=\"org.springframework.http.converter.StringHttpMessageConverter\"/>\n        <bean class=\"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter\">\n            <property name=\"objectMapper\" ref=\"jsonObjectMapper\"/>\n        </bean>\n    </mvc:message-converters>\n</mvc:annotation-driven>\n```\n\njava配置示例：\n\n```java\n@Configuration\npublic class WebConfig extends DelegatingWebMvcConfiguration {\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry){\n    // ...\n    }\n\n    @Override\n    @Bean\n    public RequestMappingHandlerAdapter requestMappingHandlerAdapter() {\n    // Create or let \"super\" create the adapter\n    // Then customize one of its properties\n    }\n}\n```\n\n### 接口描述\n```java\npackage org.springframework.http.converter;\n\nimport java.io.IOException;\nimport java.util.List;\n\nimport org.springframework.http.HttpInputMessage;\nimport org.springframework.http.HttpOutputMessage;\nimport org.springframework.http.MediaType;\n\n/**\n * Strategy interface that specifies a converter that can convert from and to HTTP requests and responses.\n *\n * @author Arjen Poutsma\n * @author Juergen Hoeller\n * @since 3.0\n */\npublic interface HttpMessageConverter<T> {\n\n\t/**\n\t * Indicates whether the given class can be read by this converter.\n\t * @param clazz the class to test for readability\n\t * @param mediaType the media type to read, can be {@code null} if not specified.\n\t * Typically the value of a {@code Content-Type} header.\n\t * @return {@code true} if readable; {@code false} otherwise\n\t */\n\tboolean canRead(Class<?> clazz, MediaType mediaType);\n\n\t/**\n\t * Indicates whether the given class can be written by this converter.\n\t * @param clazz the class to test for writability\n\t * @param mediaType the media type to write, can be {@code null} if not specified.\n\t * Typically the value of an {@code Accept} header.\n\t * @return {@code true} if writable; {@code false} otherwise\n\t */\n\tboolean canWrite(Class<?> clazz, MediaType mediaType);\n\n\t/**\n\t * Return the list of {@link MediaType} objects supported by this converter.\n\t * @return the list of supported media types\n\t */\n\tList<MediaType> getSupportedMediaTypes();\n\n\t/**\n\t * Read an object of the given type form the given input message, and returns it.\n\t * @param clazz the type of object to return. This type must have previously been passed to the\n\t * {@link #canRead canRead} method of this interface, which must have returned {@code true}.\n\t * @param inputMessage the HTTP input message to read from\n\t * @return the converted object\n\t * @throws IOException in case of I/O errors\n\t * @throws HttpMessageNotReadableException in case of conversion errors\n\t */\n\tT read(Class<? extends T> clazz, HttpInputMessage inputMessage)\n\t\t\tthrows IOException, HttpMessageNotReadableException;\n\n\t/**\n\t * Write an given object to the given output message.\n\t * @param t the object to write to the output message. The type of this object must have previously been\n\t * passed to the {@link #canWrite canWrite} method of this interface, which must have returned {@code true}.\n\t * @param contentType the content type to use when writing. May be {@code null} to indicate that the\n\t * default content type of the converter must be used. If not {@code null}, this media type must have\n\t * previously been passed to the {@link #canWrite canWrite} method of this interface, which must have\n\t * returned {@code true}.\n\t * @param outputMessage the message to write to\n\t * @throws IOException in case of I/O errors\n\t * @throws HttpMessageNotWritableException in case of conversion errors\n\t */\n\tvoid write(T t, MediaType contentType, HttpOutputMessage outputMessage)\n\t\t\tthrows IOException, HttpMessageNotWritableException;\n\n}\n\n```\n\n### spring 提供的实现类\n\n{%  asset_img   inherit.jpg  %}\n\n\n\n\n|名称|\n|---|\n|ByteArrayHttpMessageConverter|\n|FormHttpMessageConverter|\n|XmlAwareFormHttpMessageConverter|\n|ResourceHttpMessageConverter|\n|SourceHttpMessageConverter|\n|StringHttpMessageConverter|\n|SimpleXmlHttpMessageConverter|\n|MappingJackson2HttpMessageConverter|\n|GsonHttpMessageConverter|\n|SyndFeedHttpMessageConverter|\n|RssChannelHttpMessageConverter|\n|AtomFeedHttpMessageConverter|\n\n具体功能见 [RestTemplate Module](http://docs.spring.io/autorepo/docs/spring-android/1.0.x/reference/html/rest-template.html)\n\n想研究源码的可以从最简单的 `StringHttpMessageConverter`看起\n\n## Spring调用过程\n\n在DispatcherServlet初始化的过程会调用一个叫做`initHandlerAdapters`的方法，\n该方法内部会扫描容器中所有的类，以及他们的父类，找到所有实现了`HandlerAdapter`接口的类，\n并将他们注册到`DispatcherServlet`的`HandlerAdapters`中。\n\n\n如果没有扫描到的HandlerAdapter，这个方法会加载一些默认的HandlerAdapter。\n\n> The default implementation uses the \"DispatcherServlet.properties\" file (in the same\n  package as the DispatcherServlet class) to determine the class names. \n\n  {%  asset_img   DispatcherServlet-properties.jpg  %}\n\n\n\n\nSpring 4.3.2 中有一个实现了`HandlerAdapter`接口的类会被扫描到，这个类叫做`RequestMappingHandlerAdapter`\n\n### RequestMappingHandlerAdapter\n这个类在构造的时候就加载了许多messageConverter\n\n```java\n    public RequestMappingHandlerAdapter() {\n        StringHttpMessageConverter stringHttpMessageConverter = new StringHttpMessageConverter();\n        stringHttpMessageConverter.setWriteAcceptCharset(false);  // see SPR-7316\n\n        this.messageConverters = new ArrayList<HttpMessageConverter<?>>(4);\n        this.messageConverters.add(new ByteArrayHttpMessageConverter());\n        this.messageConverters.add(stringHttpMessageConverter);\n        this.messageConverters.add(new SourceHttpMessageConverter<Source>());\n        this.messageConverters.add(new AllEncompassingFormHttpMessageConverter());\n    }\n```\n其中`AllEncompassingFormHttpMessageConverter`继承自`FormHttpMessageConverter`， 它有一个变量叫做\n`partConverters`，存储了一系列的`HttpMessageConverter`\n```java\n    private List<HttpMessageConverter<?>> partConverters = new ArrayList<HttpMessageConverter<?>>();\n    public FormHttpMessageConverter() {\n        this.supportedMediaTypes.add(MediaType.APPLICATION_FORM_URLENCODED);\n        this.supportedMediaTypes.add(MediaType.MULTIPART_FORM_DATA);\n        this.partConverters.add(new ByteArrayHttpMessageConverter());\n        StringHttpMessageConverter stringHttpMessageConverter = new StringHttpMessageConverter();\n        stringHttpMessageConverter.setWriteAcceptCharset(false);\n        this.partConverters.add(stringHttpMessageConverter);\n        this.partConverters.add(new ResourceHttpMessageConverter());\n    }\n```\n在`AllEncompassingFormHttpMessageConverter`中又根据classPath中是否包含jackson、Gson等jar包来动态的\n注册了一些`HttpMessageConverter`:\n\n```java\npublic class AllEncompassingFormHttpMessageConverter extends FormHttpMessageConverter {\n\n    private static final boolean jaxb2Present =\n            ClassUtils.isPresent(\"javax.xml.bind.Binder\", AllEncompassingFormHttpMessageConverter.class.getClassLoader());\n\n    private static final boolean jackson2Present =\n            ClassUtils.isPresent(\"com.fasterxml.jackson.databind.ObjectMapper\", AllEncompassingFormHttpMessageConverter.class.getClassLoader()) &&\n                    ClassUtils.isPresent(\"com.fasterxml.jackson.core.JsonGenerator\", AllEncompassingFormHttpMessageConverter.class.getClassLoader());\n\n    private static final boolean jackson2XmlPresent =\n            ClassUtils.isPresent(\"com.fasterxml.jackson.dataformat.xml.XmlMapper\", AllEncompassingFormHttpMessageConverter.class.getClassLoader());\n\n    private static final boolean gsonPresent =\n            ClassUtils.isPresent(\"com.google.gson.Gson\", AllEncompassingFormHttpMessageConverter.class.getClassLoader());\n\n\n    public AllEncompassingFormHttpMessageConverter() {\n        addPartConverter(new SourceHttpMessageConverter<Source>());\n\n        if (jaxb2Present && !jackson2Present) {\n            addPartConverter(new Jaxb2RootElementHttpMessageConverter());\n        }\n\n        if (jackson2Present) {\n            addPartConverter(new MappingJackson2HttpMessageConverter());\n        }\n        else if (gsonPresent) {\n            addPartConverter(new GsonHttpMessageConverter());\n        }\n\n        if (jackson2XmlPresent) {\n            addPartConverter(new MappingJackson2XmlHttpMessageConverter());\n        }\n    }\n\n}\n```\n\n至于这些转换器是怎么使用的，要看`RequestMappingHandlerAdapter`中的`getDefaultArgumentResolver`\n\n```java\n/**\n     * Return the list of argument resolvers to use including built-in resolvers\n     * and custom resolvers provided via {@link #setCustomArgumentResolvers}.\n     */\n    private List<HandlerMethodArgumentResolver> getDefaultArgumentResolvers() {\n        List<HandlerMethodArgumentResolver> resolvers = new ArrayList<HandlerMethodArgumentResolver>();\n\n        // Annotation-based argument resolution\n        resolvers.add(new RequestParamMethodArgumentResolver(getBeanFactory(), false));\n        resolvers.add(new RequestParamMapMethodArgumentResolver());\n        resolvers.add(new PathVariableMethodArgumentResolver());\n        resolvers.add(new PathVariableMapMethodArgumentResolver());\n        resolvers.add(new MatrixVariableMethodArgumentResolver());\n        resolvers.add(new MatrixVariableMapMethodArgumentResolver());\n        resolvers.add(new ServletModelAttributeMethodProcessor(false));\n        resolvers.add(new RequestResponseBodyMethodProcessor(getMessageConverters(), this.requestResponseBodyAdvice));\n        resolvers.add(new RequestPartMethodArgumentResolver(getMessageConverters(), this.requestResponseBodyAdvice));\n        resolvers.add(new RequestHeaderMethodArgumentResolver(getBeanFactory()));\n        resolvers.add(new RequestHeaderMapMethodArgumentResolver());\n        resolvers.add(new ServletCookieValueMethodArgumentResolver(getBeanFactory()));\n        resolvers.add(new ExpressionValueMethodArgumentResolver(getBeanFactory()));\n\n        // Type-based argument resolution\n        resolvers.add(new ServletRequestMethodArgumentResolver());\n        resolvers.add(new ServletResponseMethodArgumentResolver());\n        resolvers.add(new HttpEntityMethodProcessor(getMessageConverters(), this.requestResponseBodyAdvice));\n        resolvers.add(new RedirectAttributesMethodArgumentResolver());\n        resolvers.add(new ModelMethodProcessor());\n        resolvers.add(new MapMethodProcessor());\n        resolvers.add(new ErrorsMethodArgumentResolver());\n        resolvers.add(new SessionStatusMethodArgumentResolver());\n        resolvers.add(new UriComponentsBuilderMethodArgumentResolver());\n\n        // Custom arguments\n        if (getCustomArgumentResolvers() != null) {\n            resolvers.addAll(getCustomArgumentResolvers());\n        }\n\n        // Catch-all\n        resolvers.add(new RequestParamMethodArgumentResolver(getBeanFactory(), true));\n        resolvers.add(new ServletModelAttributeMethodProcessor(true));\n\n        return resolvers;\n    }\n```\n\n可以看到所有的Converter最终作为一个构造参数传入了`RequestResponseBodyMethodProcessor`和`RequestPartMethodArgumentResolver`。 前者其实是负责处理`@RequestBody`和`@ResponseBody`的, \n后者则是处理`@RequestPart`这个注解的。拿`RequestResponseBodyMethodProcessor`为例来看。\n\n这个类的父类实现了`HandlerMethodReturnValueHandler`接口，这个接口的作用对照上面的系统整体架构图\n可知，是处理Controller返回的结果值的，看其`handleReturnValue`方法 。\n\n```java\n    @Override\n    public void handleReturnValue(Object returnValue, MethodParameter returnType,\n            ModelAndViewContainer mavContainer, NativeWebRequest webRequest)\n            throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {\n        mavContainer.setRequestHandled(true);\n        // Try even with null return value. ResponseBodyAdvice could get involved.\n        writeWithMessageConverters(returnValue, returnType, webRequest);\n    }\n```\n首先标记这个请求已经处理过了，然后调用了一个内部方法，从名字就可以看出来，是使用MessageConverter进行\n转换。\n\n```java\n    /**\n     * Writes the given return value to the given web request. Delegates to\n     * {@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)}\n     */\n    protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest)\n            throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {\n\n        ServletServerHttpRequest inputMessage = createInputMessage(webRequest);\n        ServletServerHttpResponse outputMessage = createOutputMessage(webRequest);\n        writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage);\n    }\n\n```\n真正的逻辑还是内部的`writeWithMessageConveters()\n\n```java\n/**\n     * Writes the given return type to the given output message.\n     * @param returnValue the value to write to the output message\n     * @param returnType the type of the value\n     * @param inputMessage the input messages. Used to inspect the {@code Accept} header.\n     * @param outputMessage the output message to write to\n     * @throws IOException thrown in case of I/O errors\n     * @throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on\n     * the request cannot be met by the message converters\n     */\n    @SuppressWarnings(\"unchecked\")\n    protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType,\n            ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)\n            throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {\n\n        Class<?> returnValueClass = getReturnValueType(returnValue, returnType);\n        Type returnValueType = getGenericType(returnType);\n        HttpServletRequest servletRequest = inputMessage.getServletRequest();\n        //从请求头获取可能的返回类型（默认会加载两种策略，比如从路径名的后缀上推断）\n        List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest);\n        //根据请求和返回的值得类型，推断可能的返回值类型\n        List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass, returnValueType);\n\n        if (returnValue != null && producibleMediaTypes.isEmpty()) {\n            throw new IllegalArgumentException(\"No converter found for return value of type: \" + returnValueClass);\n        }\n        \n        //筛选\n        Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>();\n        for (MediaType requestedType : requestedMediaTypes) {\n            for (MediaType producibleType : producibleMediaTypes) {\n                if (requestedType.isCompatibleWith(producibleType)) {\n                    compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType));\n                }\n            }\n        }\n        if (compatibleMediaTypes.isEmpty()) {\n            if (returnValue != null) {\n                throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes);\n            }\n            return;\n        }\n\n        List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes);\n        MediaType.sortBySpecificityAndQuality(mediaTypes);\n\n        MediaType selectedMediaType = null;\n        for (MediaType mediaType : mediaTypes) {\n            if (mediaType.isConcrete()) {//具体的，没有通配符的\n                selectedMediaType = mediaType;\n                break;// 找到一个就跳出循环\n            }\n            else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {\n                selectedMediaType = MediaType.APPLICATION_OCTET_STREAM;\n                break;// 找到一个就跳出循环\n            }\n        }\n\n            //找到能处理这种类型的HttpMessageConverter\n        if (selectedMediaType != null) {\n            selectedMediaType = selectedMediaType.removeQualityValue();\n            for (HttpMessageConverter<?> messageConverter : this.messageConverters) {\n                if (messageConverter instanceof GenericHttpMessageConverter) {\n                    if (((GenericHttpMessageConverter<T>) messageConverter).canWrite(returnValueType,\n                            returnValueClass, selectedMediaType)) {\n                        returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,\n                                (Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),\n                                inputMessage, outputMessage);\n                        if (returnValue != null) {\n                            addContentDispositionHeader(inputMessage, outputMessage);\n                            ((GenericHttpMessageConverter<T>) messageConverter).write(returnValue,\n                                    returnValueType, selectedMediaType, outputMessage);\n                            if (logger.isDebugEnabled()) {\n                                logger.debug(\"Written [\" + returnValue + \"] as \\\"\" +\n                                        selectedMediaType + \"\\\" using [\" + messageConverter + \"]\");\n                            }\n                        }\n                        return;\n                    }\n                }\n                else if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {\n                    returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,\n                            (Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),\n                            inputMessage, outputMessage);\n                    if (returnValue != null) {\n                        addContentDispositionHeader(inputMessage, outputMessage);\n                        ((HttpMessageConverter<T>) messageConverter).write(returnValue,\n                                selectedMediaType, outputMessage);\n                        if (logger.isDebugEnabled()) {\n                            logger.debug(\"Written [\" + returnValue + \"] as \\\"\" +\n                                    selectedMediaType + \"\\\" using [\" + messageConverter + \"]\");\n                        }\n                    }\n                    return;\n                }\n            }\n        }\n\n        if (returnValue != null) {\n            throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes);\n        }\n    }\n```\n\n至此，HttpMessageConverter如何工作的就真相大白了。\n\n## 参考链接\n\n1. [SpringMVC关于json、xml自动转换的原理研究(附带源码分析)](http://www.cnblogs.com/fangjian0423/p/springMVC-xml-json-convert.html)\n","source":"_posts/HttpMessageConverter.md","raw":"---\ntitle: HttpMessageConverter 原理和源码\ntags: messageConverter\ncategory: spring\ntoc: true\nabbrlink: '55451865'\ndate: 2016-11-29 02:48:45\n---\n\n## 架构\n{%  asset_img   arch.jpg  %}\n\n\n\n\n## HttpMessageConverter接口\n\n\n\n{%  asset_img http-message-converter.jpg    )\n\n\n\n\n>`HttpMessageConverter` used to\nmarshal objects into the HTTP request body and to unmarshal any response back into an object.\n\n提供将Java中的对象和http请求、响应相互转换的功能\n\n### spring 中的配置\n\nxml配置示例：\n\n```xml\n<mvc:annotation-driven conversion-service=\"conversionService\">\n    <mvc:message-converters>\n        <bean class=\"org.springframework.http.converter.StringHttpMessageConverter\"/>\n        <bean class=\"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter\">\n            <property name=\"objectMapper\" ref=\"jsonObjectMapper\"/>\n        </bean>\n    </mvc:message-converters>\n</mvc:annotation-driven>\n```\n\njava配置示例：\n\n```java\n@Configuration\npublic class WebConfig extends DelegatingWebMvcConfiguration {\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry){\n    // ...\n    }\n\n    @Override\n    @Bean\n    public RequestMappingHandlerAdapter requestMappingHandlerAdapter() {\n    // Create or let \"super\" create the adapter\n    // Then customize one of its properties\n    }\n}\n```\n\n### 接口描述\n```java\npackage org.springframework.http.converter;\n\nimport java.io.IOException;\nimport java.util.List;\n\nimport org.springframework.http.HttpInputMessage;\nimport org.springframework.http.HttpOutputMessage;\nimport org.springframework.http.MediaType;\n\n/**\n * Strategy interface that specifies a converter that can convert from and to HTTP requests and responses.\n *\n * @author Arjen Poutsma\n * @author Juergen Hoeller\n * @since 3.0\n */\npublic interface HttpMessageConverter<T> {\n\n\t/**\n\t * Indicates whether the given class can be read by this converter.\n\t * @param clazz the class to test for readability\n\t * @param mediaType the media type to read, can be {@code null} if not specified.\n\t * Typically the value of a {@code Content-Type} header.\n\t * @return {@code true} if readable; {@code false} otherwise\n\t */\n\tboolean canRead(Class<?> clazz, MediaType mediaType);\n\n\t/**\n\t * Indicates whether the given class can be written by this converter.\n\t * @param clazz the class to test for writability\n\t * @param mediaType the media type to write, can be {@code null} if not specified.\n\t * Typically the value of an {@code Accept} header.\n\t * @return {@code true} if writable; {@code false} otherwise\n\t */\n\tboolean canWrite(Class<?> clazz, MediaType mediaType);\n\n\t/**\n\t * Return the list of {@link MediaType} objects supported by this converter.\n\t * @return the list of supported media types\n\t */\n\tList<MediaType> getSupportedMediaTypes();\n\n\t/**\n\t * Read an object of the given type form the given input message, and returns it.\n\t * @param clazz the type of object to return. This type must have previously been passed to the\n\t * {@link #canRead canRead} method of this interface, which must have returned {@code true}.\n\t * @param inputMessage the HTTP input message to read from\n\t * @return the converted object\n\t * @throws IOException in case of I/O errors\n\t * @throws HttpMessageNotReadableException in case of conversion errors\n\t */\n\tT read(Class<? extends T> clazz, HttpInputMessage inputMessage)\n\t\t\tthrows IOException, HttpMessageNotReadableException;\n\n\t/**\n\t * Write an given object to the given output message.\n\t * @param t the object to write to the output message. The type of this object must have previously been\n\t * passed to the {@link #canWrite canWrite} method of this interface, which must have returned {@code true}.\n\t * @param contentType the content type to use when writing. May be {@code null} to indicate that the\n\t * default content type of the converter must be used. If not {@code null}, this media type must have\n\t * previously been passed to the {@link #canWrite canWrite} method of this interface, which must have\n\t * returned {@code true}.\n\t * @param outputMessage the message to write to\n\t * @throws IOException in case of I/O errors\n\t * @throws HttpMessageNotWritableException in case of conversion errors\n\t */\n\tvoid write(T t, MediaType contentType, HttpOutputMessage outputMessage)\n\t\t\tthrows IOException, HttpMessageNotWritableException;\n\n}\n\n```\n\n### spring 提供的实现类\n\n{%  asset_img   inherit.jpg  %}\n\n\n\n\n|名称|\n|---|\n|ByteArrayHttpMessageConverter|\n|FormHttpMessageConverter|\n|XmlAwareFormHttpMessageConverter|\n|ResourceHttpMessageConverter|\n|SourceHttpMessageConverter|\n|StringHttpMessageConverter|\n|SimpleXmlHttpMessageConverter|\n|MappingJackson2HttpMessageConverter|\n|GsonHttpMessageConverter|\n|SyndFeedHttpMessageConverter|\n|RssChannelHttpMessageConverter|\n|AtomFeedHttpMessageConverter|\n\n具体功能见 [RestTemplate Module](http://docs.spring.io/autorepo/docs/spring-android/1.0.x/reference/html/rest-template.html)\n\n想研究源码的可以从最简单的 `StringHttpMessageConverter`看起\n\n## Spring调用过程\n\n在DispatcherServlet初始化的过程会调用一个叫做`initHandlerAdapters`的方法，\n该方法内部会扫描容器中所有的类，以及他们的父类，找到所有实现了`HandlerAdapter`接口的类，\n并将他们注册到`DispatcherServlet`的`HandlerAdapters`中。\n\n\n如果没有扫描到的HandlerAdapter，这个方法会加载一些默认的HandlerAdapter。\n\n> The default implementation uses the \"DispatcherServlet.properties\" file (in the same\n  package as the DispatcherServlet class) to determine the class names. \n\n  {%  asset_img   DispatcherServlet-properties.jpg  %}\n\n\n\n\nSpring 4.3.2 中有一个实现了`HandlerAdapter`接口的类会被扫描到，这个类叫做`RequestMappingHandlerAdapter`\n\n### RequestMappingHandlerAdapter\n这个类在构造的时候就加载了许多messageConverter\n\n```java\n    public RequestMappingHandlerAdapter() {\n        StringHttpMessageConverter stringHttpMessageConverter = new StringHttpMessageConverter();\n        stringHttpMessageConverter.setWriteAcceptCharset(false);  // see SPR-7316\n\n        this.messageConverters = new ArrayList<HttpMessageConverter<?>>(4);\n        this.messageConverters.add(new ByteArrayHttpMessageConverter());\n        this.messageConverters.add(stringHttpMessageConverter);\n        this.messageConverters.add(new SourceHttpMessageConverter<Source>());\n        this.messageConverters.add(new AllEncompassingFormHttpMessageConverter());\n    }\n```\n其中`AllEncompassingFormHttpMessageConverter`继承自`FormHttpMessageConverter`， 它有一个变量叫做\n`partConverters`，存储了一系列的`HttpMessageConverter`\n```java\n    private List<HttpMessageConverter<?>> partConverters = new ArrayList<HttpMessageConverter<?>>();\n    public FormHttpMessageConverter() {\n        this.supportedMediaTypes.add(MediaType.APPLICATION_FORM_URLENCODED);\n        this.supportedMediaTypes.add(MediaType.MULTIPART_FORM_DATA);\n        this.partConverters.add(new ByteArrayHttpMessageConverter());\n        StringHttpMessageConverter stringHttpMessageConverter = new StringHttpMessageConverter();\n        stringHttpMessageConverter.setWriteAcceptCharset(false);\n        this.partConverters.add(stringHttpMessageConverter);\n        this.partConverters.add(new ResourceHttpMessageConverter());\n    }\n```\n在`AllEncompassingFormHttpMessageConverter`中又根据classPath中是否包含jackson、Gson等jar包来动态的\n注册了一些`HttpMessageConverter`:\n\n```java\npublic class AllEncompassingFormHttpMessageConverter extends FormHttpMessageConverter {\n\n    private static final boolean jaxb2Present =\n            ClassUtils.isPresent(\"javax.xml.bind.Binder\", AllEncompassingFormHttpMessageConverter.class.getClassLoader());\n\n    private static final boolean jackson2Present =\n            ClassUtils.isPresent(\"com.fasterxml.jackson.databind.ObjectMapper\", AllEncompassingFormHttpMessageConverter.class.getClassLoader()) &&\n                    ClassUtils.isPresent(\"com.fasterxml.jackson.core.JsonGenerator\", AllEncompassingFormHttpMessageConverter.class.getClassLoader());\n\n    private static final boolean jackson2XmlPresent =\n            ClassUtils.isPresent(\"com.fasterxml.jackson.dataformat.xml.XmlMapper\", AllEncompassingFormHttpMessageConverter.class.getClassLoader());\n\n    private static final boolean gsonPresent =\n            ClassUtils.isPresent(\"com.google.gson.Gson\", AllEncompassingFormHttpMessageConverter.class.getClassLoader());\n\n\n    public AllEncompassingFormHttpMessageConverter() {\n        addPartConverter(new SourceHttpMessageConverter<Source>());\n\n        if (jaxb2Present && !jackson2Present) {\n            addPartConverter(new Jaxb2RootElementHttpMessageConverter());\n        }\n\n        if (jackson2Present) {\n            addPartConverter(new MappingJackson2HttpMessageConverter());\n        }\n        else if (gsonPresent) {\n            addPartConverter(new GsonHttpMessageConverter());\n        }\n\n        if (jackson2XmlPresent) {\n            addPartConverter(new MappingJackson2XmlHttpMessageConverter());\n        }\n    }\n\n}\n```\n\n至于这些转换器是怎么使用的，要看`RequestMappingHandlerAdapter`中的`getDefaultArgumentResolver`\n\n```java\n/**\n     * Return the list of argument resolvers to use including built-in resolvers\n     * and custom resolvers provided via {@link #setCustomArgumentResolvers}.\n     */\n    private List<HandlerMethodArgumentResolver> getDefaultArgumentResolvers() {\n        List<HandlerMethodArgumentResolver> resolvers = new ArrayList<HandlerMethodArgumentResolver>();\n\n        // Annotation-based argument resolution\n        resolvers.add(new RequestParamMethodArgumentResolver(getBeanFactory(), false));\n        resolvers.add(new RequestParamMapMethodArgumentResolver());\n        resolvers.add(new PathVariableMethodArgumentResolver());\n        resolvers.add(new PathVariableMapMethodArgumentResolver());\n        resolvers.add(new MatrixVariableMethodArgumentResolver());\n        resolvers.add(new MatrixVariableMapMethodArgumentResolver());\n        resolvers.add(new ServletModelAttributeMethodProcessor(false));\n        resolvers.add(new RequestResponseBodyMethodProcessor(getMessageConverters(), this.requestResponseBodyAdvice));\n        resolvers.add(new RequestPartMethodArgumentResolver(getMessageConverters(), this.requestResponseBodyAdvice));\n        resolvers.add(new RequestHeaderMethodArgumentResolver(getBeanFactory()));\n        resolvers.add(new RequestHeaderMapMethodArgumentResolver());\n        resolvers.add(new ServletCookieValueMethodArgumentResolver(getBeanFactory()));\n        resolvers.add(new ExpressionValueMethodArgumentResolver(getBeanFactory()));\n\n        // Type-based argument resolution\n        resolvers.add(new ServletRequestMethodArgumentResolver());\n        resolvers.add(new ServletResponseMethodArgumentResolver());\n        resolvers.add(new HttpEntityMethodProcessor(getMessageConverters(), this.requestResponseBodyAdvice));\n        resolvers.add(new RedirectAttributesMethodArgumentResolver());\n        resolvers.add(new ModelMethodProcessor());\n        resolvers.add(new MapMethodProcessor());\n        resolvers.add(new ErrorsMethodArgumentResolver());\n        resolvers.add(new SessionStatusMethodArgumentResolver());\n        resolvers.add(new UriComponentsBuilderMethodArgumentResolver());\n\n        // Custom arguments\n        if (getCustomArgumentResolvers() != null) {\n            resolvers.addAll(getCustomArgumentResolvers());\n        }\n\n        // Catch-all\n        resolvers.add(new RequestParamMethodArgumentResolver(getBeanFactory(), true));\n        resolvers.add(new ServletModelAttributeMethodProcessor(true));\n\n        return resolvers;\n    }\n```\n\n可以看到所有的Converter最终作为一个构造参数传入了`RequestResponseBodyMethodProcessor`和`RequestPartMethodArgumentResolver`。 前者其实是负责处理`@RequestBody`和`@ResponseBody`的, \n后者则是处理`@RequestPart`这个注解的。拿`RequestResponseBodyMethodProcessor`为例来看。\n\n这个类的父类实现了`HandlerMethodReturnValueHandler`接口，这个接口的作用对照上面的系统整体架构图\n可知，是处理Controller返回的结果值的，看其`handleReturnValue`方法 。\n\n```java\n    @Override\n    public void handleReturnValue(Object returnValue, MethodParameter returnType,\n            ModelAndViewContainer mavContainer, NativeWebRequest webRequest)\n            throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {\n        mavContainer.setRequestHandled(true);\n        // Try even with null return value. ResponseBodyAdvice could get involved.\n        writeWithMessageConverters(returnValue, returnType, webRequest);\n    }\n```\n首先标记这个请求已经处理过了，然后调用了一个内部方法，从名字就可以看出来，是使用MessageConverter进行\n转换。\n\n```java\n    /**\n     * Writes the given return value to the given web request. Delegates to\n     * {@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)}\n     */\n    protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest)\n            throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {\n\n        ServletServerHttpRequest inputMessage = createInputMessage(webRequest);\n        ServletServerHttpResponse outputMessage = createOutputMessage(webRequest);\n        writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage);\n    }\n\n```\n真正的逻辑还是内部的`writeWithMessageConveters()\n\n```java\n/**\n     * Writes the given return type to the given output message.\n     * @param returnValue the value to write to the output message\n     * @param returnType the type of the value\n     * @param inputMessage the input messages. Used to inspect the {@code Accept} header.\n     * @param outputMessage the output message to write to\n     * @throws IOException thrown in case of I/O errors\n     * @throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on\n     * the request cannot be met by the message converters\n     */\n    @SuppressWarnings(\"unchecked\")\n    protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType,\n            ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)\n            throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {\n\n        Class<?> returnValueClass = getReturnValueType(returnValue, returnType);\n        Type returnValueType = getGenericType(returnType);\n        HttpServletRequest servletRequest = inputMessage.getServletRequest();\n        //从请求头获取可能的返回类型（默认会加载两种策略，比如从路径名的后缀上推断）\n        List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest);\n        //根据请求和返回的值得类型，推断可能的返回值类型\n        List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass, returnValueType);\n\n        if (returnValue != null && producibleMediaTypes.isEmpty()) {\n            throw new IllegalArgumentException(\"No converter found for return value of type: \" + returnValueClass);\n        }\n        \n        //筛选\n        Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>();\n        for (MediaType requestedType : requestedMediaTypes) {\n            for (MediaType producibleType : producibleMediaTypes) {\n                if (requestedType.isCompatibleWith(producibleType)) {\n                    compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType));\n                }\n            }\n        }\n        if (compatibleMediaTypes.isEmpty()) {\n            if (returnValue != null) {\n                throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes);\n            }\n            return;\n        }\n\n        List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes);\n        MediaType.sortBySpecificityAndQuality(mediaTypes);\n\n        MediaType selectedMediaType = null;\n        for (MediaType mediaType : mediaTypes) {\n            if (mediaType.isConcrete()) {//具体的，没有通配符的\n                selectedMediaType = mediaType;\n                break;// 找到一个就跳出循环\n            }\n            else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {\n                selectedMediaType = MediaType.APPLICATION_OCTET_STREAM;\n                break;// 找到一个就跳出循环\n            }\n        }\n\n            //找到能处理这种类型的HttpMessageConverter\n        if (selectedMediaType != null) {\n            selectedMediaType = selectedMediaType.removeQualityValue();\n            for (HttpMessageConverter<?> messageConverter : this.messageConverters) {\n                if (messageConverter instanceof GenericHttpMessageConverter) {\n                    if (((GenericHttpMessageConverter<T>) messageConverter).canWrite(returnValueType,\n                            returnValueClass, selectedMediaType)) {\n                        returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,\n                                (Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),\n                                inputMessage, outputMessage);\n                        if (returnValue != null) {\n                            addContentDispositionHeader(inputMessage, outputMessage);\n                            ((GenericHttpMessageConverter<T>) messageConverter).write(returnValue,\n                                    returnValueType, selectedMediaType, outputMessage);\n                            if (logger.isDebugEnabled()) {\n                                logger.debug(\"Written [\" + returnValue + \"] as \\\"\" +\n                                        selectedMediaType + \"\\\" using [\" + messageConverter + \"]\");\n                            }\n                        }\n                        return;\n                    }\n                }\n                else if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {\n                    returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,\n                            (Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),\n                            inputMessage, outputMessage);\n                    if (returnValue != null) {\n                        addContentDispositionHeader(inputMessage, outputMessage);\n                        ((HttpMessageConverter<T>) messageConverter).write(returnValue,\n                                selectedMediaType, outputMessage);\n                        if (logger.isDebugEnabled()) {\n                            logger.debug(\"Written [\" + returnValue + \"] as \\\"\" +\n                                    selectedMediaType + \"\\\" using [\" + messageConverter + \"]\");\n                        }\n                    }\n                    return;\n                }\n            }\n        }\n\n        if (returnValue != null) {\n            throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes);\n        }\n    }\n```\n\n至此，HttpMessageConverter如何工作的就真相大白了。\n\n## 参考链接\n\n1. [SpringMVC关于json、xml自动转换的原理研究(附带源码分析)](http://www.cnblogs.com/fangjian0423/p/springMVC-xml-json-convert.html)\n","slug":"HttpMessageConverter","published":1,"updated":"2017-02-02T08:19:13.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgd7004pw4py4r4pr6s7"},{"title":"windows命令操作剪贴板——CLIP","toc":true,"date":"2017-01-07T12:00:09.000Z","_content":"\n## 使用说明\n\n> CLIP\n\n> Description:\n    Redirects output of command line tools to the Windows clipboard.\n    This text output can then be pasted into other programs.\n\n> Parameter List:\n    /?                  Displays this help message.\n\n> Examples:\n    DIR | CLIP          Places a copy of the current directory\n                        listing into the Windows clipboard.\n\n>    CLIP < README.TXT   Places a copy of the text from readme.txt\n                        on to the Windows clipboard.\n\n## 简单应用\n\n### 将ip地址拷贝到剪贴板\n\n```bash\nipconfig | find \"IPv4\" | find /V \"自动\"  | find /V \"Auto\" | awk \"{ print $(NF);}\" | CLIP\n```\n\n也可以添加一个alias，这样就不用每次敲`ipconfig`, 然后复制ip了\n\n## 参考\n\n1. [Fastest method to determine my PC's IP address (Windows) - Super User](http://superuser.com/questions/382265/fastest-method-to-determine-my-pcs-ip-address-windows)","source":"_posts/CLIP.md","raw":"---\ntitle: windows命令操作剪贴板——CLIP\ntoc: true\ntags: 剪贴板\ncategory: shell\ndate: 2017-01-07 20:00:09\n---\n\n## 使用说明\n\n> CLIP\n\n> Description:\n    Redirects output of command line tools to the Windows clipboard.\n    This text output can then be pasted into other programs.\n\n> Parameter List:\n    /?                  Displays this help message.\n\n> Examples:\n    DIR | CLIP          Places a copy of the current directory\n                        listing into the Windows clipboard.\n\n>    CLIP < README.TXT   Places a copy of the text from readme.txt\n                        on to the Windows clipboard.\n\n## 简单应用\n\n### 将ip地址拷贝到剪贴板\n\n```bash\nipconfig | find \"IPv4\" | find /V \"自动\"  | find /V \"Auto\" | awk \"{ print $(NF);}\" | CLIP\n```\n\n也可以添加一个alias，这样就不用每次敲`ipconfig`, 然后复制ip了\n\n## 参考\n\n1. [Fastest method to determine my PC's IP address (Windows) - Super User](http://superuser.com/questions/382265/fastest-method-to-determine-my-pcs-ip-address-windows)","slug":"CLIP","published":1,"updated":"2017-02-02T09:10:05.786Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgdt004tw4pyu9okgphw"},{"title":"zookeeper","toc":true,"category":null,"_content":"\n\nhttp://www.ibm.com/developerworks/cn/opensource/os-cn-zookeeper-code/","source":"_drafts/zookeeper.md","raw":"---\ntitle: zookeeper\ntoc: true\ntags:\ncategory:\n---\n\n\nhttp://www.ibm.com/developerworks/cn/opensource/os-cn-zookeeper-code/","slug":"zookeeper","published":0,"date":"2017-02-02T09:10:07.377Z","updated":"2017-02-02T09:10:07.377Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgdx004yw4pyhmlfk1a4"},{"title":"vim","toc":true,"category":null,"_content":"\n\n\n","source":"_drafts/vim.md","raw":"---\ntitle: vim\ntoc: true\ntags:\ncategory:\n---\n\n\n\n","slug":"vim","published":0,"date":"2017-02-02T09:10:08.530Z","updated":"2017-02-02T09:10:08.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmge0004zw4pyftfaubkh"},{"title":"Tomcat工作流程","toc":true,"date":"2017-01-20T16:59:55.000Z","_content":"\nStringManager\n\n\n禁用DNS轮询，DNS的优化点？?\n\n\nWindows 7下安装了Cygwin，发现没有telnet这个命令。在cygwin的搜索中也找不到telnet。\n但是经常使用telnet这个小工具。Google了一下发现包含telnet的包是 inetutils。直接安装inetutils即可。\n\n\ntelnet localhost 8097 shutdown\n\n➜  dev which telnet\n/usr/bin/telnet\n➜  dev telnet localhost 8005\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\nSHUTDOWN\nConnection closed by foreign host.\n\n\n## Connector\n\n##  \n\n## 线程池策略\n\n场景1：接受一个请求，此时tomcat启动的线程数还没有达到corePoolSize(tomcat里头叫minSpareThreads)，tomcat会启动一个线程来处理该请求；\n场景2：接受一个请求，此时tomcat启动的线程数已经达到了corePoolSize，tomcat把该请求放入队列(offer)，如果放入队列成功，则返回，放入队列不成功，则尝试增加工作线程，在当前线程个数<maxThreads的时候，可以继续增加线程来处理，超过maxThreads的时候，则继续往等待队列里头放，等待队列放不进去，则抛出RejectedExecutionException；\n\n## JDK线程池策略\n\n每次提交任务时，如果线程数还没达到coreSize就创建新线程并绑定该任务。所以第coreSize次提交任务后线程总数必达到coreSize，不会重用之前的空闲线程。\n线程数达到coreSize后，新增的任务就放到工作队列里，而线程池里的线程则努力的使用take()从工作队列里拉活来干。\n如果队列是个有界队列，又如果线程池里的线程不能及时将任务取走，工作队列可能会满掉，插入任务就会失败，此时线程池就会紧急的再创建新的临时线程来补救。\n临时线程使用poll(keepAliveTime，timeUnit)来从工作队列拉活，如果时候到了仍然两手空空没拉到活，表明它太闲了，就会被解雇掉。\n如果core线程数＋临时线程数 >maxSize，则不能再创建新的临时线程了，转头执行RejectExecutionHanlder。默认的AbortPolicy抛RejectedExecutionException异常，其他选择包括静默放弃当前任务(Discard)，放弃工作队列里最老的任务(DisacardOldest)，或由主线程来直接执行(CallerRuns).\n\n\nCachedPool则把coreSize设成0，然后选用了一种特殊的Queue -- SynchronousQueue，只要当前没有空闲线程，Queue就会立刻报插入失败，让线程池增加新的临时线程，默认的KeepAliveTime是1分钟，而且maxSize是整型的最大值，也就是说只要有干不完的活，都会无限增增加线程数，直到高峰过去线程数才会回落。\n\n## console 被tomcat 重定向到 catalina.out中\n\n\n## 参考\n\nrequestProcess.pdf\n\n7. [Java-Latte: Architecture of Apache Tomcat](http://java-latte.blogspot.kr/2014/10/introduction-to-architecture-of-apache-tomcat-with-server.xml.html)\n\n[Tomcat 系统架构与设计模式，第 1 部分: 工作原理](https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/)\n\n[Guidewire, SAP, Oracle, UNIX, Genesys Technology Blog: Tomcat shutdown port 8005 - Remote Shutdown](http://singcheong.blogspot.kr/2012/10/tomcat-shutdown-port-8005-remote.html)\n\n[tomcat线程池策略 - xixicat - SegmentFault](https://segmentfault.com/a/1190000008052008)\n\n[Java ThreadPool的正确打开方式 | 江南白衣](http://calvin1978.blogcn.com/articles/java-threadpool.html)\n\n[Tomcat线程池，更符合大家想象的可扩展线程池 | 江南白衣](http://calvin1978.blogcn.com/articles/tomcat-threadpool.html)\n\n\n","source":"_drafts/tomcat-arch.md","raw":"---\ntitle: Tomcat工作流程\ntoc: true\ncategory: tomcat\ndate: 2017-01-21 00:59:55\ntags:\n---\n\nStringManager\n\n\n禁用DNS轮询，DNS的优化点？?\n\n\nWindows 7下安装了Cygwin，发现没有telnet这个命令。在cygwin的搜索中也找不到telnet。\n但是经常使用telnet这个小工具。Google了一下发现包含telnet的包是 inetutils。直接安装inetutils即可。\n\n\ntelnet localhost 8097 shutdown\n\n➜  dev which telnet\n/usr/bin/telnet\n➜  dev telnet localhost 8005\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\nSHUTDOWN\nConnection closed by foreign host.\n\n\n## Connector\n\n##  \n\n## 线程池策略\n\n场景1：接受一个请求，此时tomcat启动的线程数还没有达到corePoolSize(tomcat里头叫minSpareThreads)，tomcat会启动一个线程来处理该请求；\n场景2：接受一个请求，此时tomcat启动的线程数已经达到了corePoolSize，tomcat把该请求放入队列(offer)，如果放入队列成功，则返回，放入队列不成功，则尝试增加工作线程，在当前线程个数<maxThreads的时候，可以继续增加线程来处理，超过maxThreads的时候，则继续往等待队列里头放，等待队列放不进去，则抛出RejectedExecutionException；\n\n## JDK线程池策略\n\n每次提交任务时，如果线程数还没达到coreSize就创建新线程并绑定该任务。所以第coreSize次提交任务后线程总数必达到coreSize，不会重用之前的空闲线程。\n线程数达到coreSize后，新增的任务就放到工作队列里，而线程池里的线程则努力的使用take()从工作队列里拉活来干。\n如果队列是个有界队列，又如果线程池里的线程不能及时将任务取走，工作队列可能会满掉，插入任务就会失败，此时线程池就会紧急的再创建新的临时线程来补救。\n临时线程使用poll(keepAliveTime，timeUnit)来从工作队列拉活，如果时候到了仍然两手空空没拉到活，表明它太闲了，就会被解雇掉。\n如果core线程数＋临时线程数 >maxSize，则不能再创建新的临时线程了，转头执行RejectExecutionHanlder。默认的AbortPolicy抛RejectedExecutionException异常，其他选择包括静默放弃当前任务(Discard)，放弃工作队列里最老的任务(DisacardOldest)，或由主线程来直接执行(CallerRuns).\n\n\nCachedPool则把coreSize设成0，然后选用了一种特殊的Queue -- SynchronousQueue，只要当前没有空闲线程，Queue就会立刻报插入失败，让线程池增加新的临时线程，默认的KeepAliveTime是1分钟，而且maxSize是整型的最大值，也就是说只要有干不完的活，都会无限增增加线程数，直到高峰过去线程数才会回落。\n\n## console 被tomcat 重定向到 catalina.out中\n\n\n## 参考\n\nrequestProcess.pdf\n\n7. [Java-Latte: Architecture of Apache Tomcat](http://java-latte.blogspot.kr/2014/10/introduction-to-architecture-of-apache-tomcat-with-server.xml.html)\n\n[Tomcat 系统架构与设计模式，第 1 部分: 工作原理](https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/)\n\n[Guidewire, SAP, Oracle, UNIX, Genesys Technology Blog: Tomcat shutdown port 8005 - Remote Shutdown](http://singcheong.blogspot.kr/2012/10/tomcat-shutdown-port-8005-remote.html)\n\n[tomcat线程池策略 - xixicat - SegmentFault](https://segmentfault.com/a/1190000008052008)\n\n[Java ThreadPool的正确打开方式 | 江南白衣](http://calvin1978.blogcn.com/articles/java-threadpool.html)\n\n[Tomcat线程池，更符合大家想象的可扩展线程池 | 江南白衣](http://calvin1978.blogcn.com/articles/tomcat-threadpool.html)\n\n\n","slug":"tomcat-arch","published":0,"updated":"2017-02-02T10:55:14.683Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmge30050w4pyyzpne6ik"},{"title":"task","toc":true,"category":null,"_content":"\n\nFuture\n\nCallable\n\njava8 中的改进","source":"_drafts/task.md","raw":"title: task\ntoc: true\ntags:\ncategory:\n---\n\n\nFuture\n\nCallable\n\njava8 中的改进","slug":"task","published":0,"date":"2017-02-02T11:23:24.455Z","updated":"2017-02-02T11:23:24.455Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmge50052w4pyatik2680"},{"title":"ssh","toc":true,"_content":"","source":"_drafts/ssh.md","raw":"---\ntitle: ssh\ntags: ssh\ncategory: linux\ntoc: true\n---\n","slug":"ssh","published":0,"date":"2017-02-02T09:10:09.425Z","updated":"2017-02-02T09:10:09.425Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmge70053w4py5zkx209v"},{"title":"异步Servlet使用和原理解析","toc":true,"_content":"\n并发，qps\n\n        QPS（TPS）：每秒钟request/事务 数量\n\n        并发数： 系统同时处理的request/事务数\n\n        响应时间：  一般取平均响应时间\n\n        QPS（TPS）= 并发数/平均响应时间\n\n        串行处理和并行处理，qps\n\n## 测试\n\n限定 tomcat的连接池个数为50，并发为200（>> 线程池大小），时异步具有很大的优势。\n\n如果并发量小于线程池大小，异步的反倒比同步的时间长了很久。\n\n```xml\n<Connector port=\"8080\" protocol=\"HTTP/1.1\"\n            maxThreads=\"50\"\n            connectionTimeout=\"20000\"\n            redirectPort=\"8443\" URIEncoding=\"UTF-8\"/>\n```\n\n### async ab测试\n\n```\n$ ab -n 10000 -c 200 http://localhost:8080/async\nThis is ApacheBench, Version 2.3 <$Revision: 655654 $>\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\nLicensed to The Apache Software Foundation, http://www.apache.org/\n\nBenchmarking localhost (be patient)\nCompleted 1000 requests\nCompleted 2000 requests\nCompleted 3000 requests\nCompleted 4000 requests\nCompleted 5000 requests\nCompleted 6000 requests\nCompleted 7000 requests\nCompleted 8000 requests\nCompleted 9000 requests\nCompleted 10000 requests\nFinished 10000 requests\n\n\nServer Software:        Apache-Coyote/1.1\nServer Hostname:        localhost\nServer Port:            8080\n\nDocument Path:          /async\nDocument Length:        40 bytes\n\nConcurrency Level:      200\nTime taken for tests:   1000.284 seconds\nComplete requests:      10000\nFailed requests:        47\n   (Connect: 0, Receive: 0, Length: 47, Exceptions: 0)\nWrite errors:           0\nNon-2xx responses:      47\nTotal transferred:      1530740 bytes\nHTML transferred:       506980 bytes\nRequests per second:    10.00 [#/sec] (mean)\nTime per request:       20005.686 [ms] (mean)\nTime per request:       100.028 [ms] (mean, across all concurrent requests)\nTransfer rate:          1.49 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    0   5.0      0     501\nProcessing:     2 19810 1683.3  20001   20560\nWaiting:        1 19810 1683.4  20000   20558\nTotal:          2 19811 1683.0  20001   20560\n\nPercentage of the requests served within a certain time (ms)\n  50%  20001\n  66%  20001\n  75%  20002\n  80%  20002\n  90%  20004\n  95%  20009\n  98%  20020\n  99%  20035\n 100%  20560 (longest request)\n```\n\n测试过程中出的异常：\n\n```\n一月 21, 2017 1:05:32 上午 org.apache.catalina.core.StandardWrapperValve invoke\n严重: Servlet.service() for servlet [com.air.async.AsyncServlet] in context with path [] threw exception\njava.util.concurrent.RejectedExecutionException: Task com.air.async.AsyncRequestProcessor@3caec762 rejected from java.util.concurrent.ThreadPoolExecutor@64db0f23[Running, pool size = 100, active threads = 100, queued tasks = 100, completed tasks = 9726]\n  at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2048)\n  at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:821)\n  at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1372)\n  at com.air.async.AsyncServlet.doGet(AsyncServlet.java:25)\n  at javax.servlet.http.HttpServlet.service(HttpServlet.java:621)\n  at javax.servlet.http.HttpServlet.service(HttpServlet.java:728)\n  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305)\n  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)\n  at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)\n  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)\n  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)\n  at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:222)\n  at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123)\n  at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)\n  at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171)\n  at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100)\n  at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:953)\n  at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)\n  at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408)\n  at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1041)\n  at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:603)\n  at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.doRun(AprEndpoint.java:2430)\n  at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run(AprEndpoint.java:2419)\n  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n  at java.lang.Thread.run(Thread.java:745)\n```\n\n有47个失败的case，是队列满了，然后丢掉了请求。\n\ntomcat的请求队列？？？？\n\n#### sync ab测试\n\n```\n$ ab -n 10000 -c 200 http://localhost:8080/hello\nThis is ApacheBench, Version 2.3 <$Revision: 655654 $>\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\nLicensed to The Apache Software Foundation, http://www.apache.org/\n\nBenchmarking localhost (be patient)\nCompleted 1000 requests\nCompleted 2000 requests\nCompleted 3000 requests\nCompleted 4000 requests\nCompleted 5000 requests\nCompleted 6000 requests\nCompleted 7000 requests\nCompleted 8000 requests\nCompleted 9000 requests\nCompleted 10000 requests\nFinished 10000 requests\n\n\nServer Software:        Apache-Coyote/1.1\nServer Hostname:        localhost\nServer Port:            8080\n\nDocument Path:          /hello\nDocument Length:        12 bytes\n\nConcurrency Level:      200\nTime taken for tests:   2002.151 seconds\nComplete requests:      10000\nFailed requests:        0\nWrite errors:           0\nTotal transferred:      1340000 bytes\nHTML transferred:       120000 bytes\nRequests per second:    4.99 [#/sec] (mean)\nTime per request:       40043.028 [ms] (mean)\nTime per request:       200.215 [ms] (mean, across all concurrent requests)\nTransfer rate:          0.65 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    0   0.4      0       8\nProcessing: 10002 39740 2686.3  40005   50319\nWaiting:    10002 39740 2686.4  40004   50319\nTotal:      10002 39741 2686.3  40005   50319\n\nPercentage of the requests served within a certain time (ms)\n  50%  40005\n  66%  40009\n  75%  40014\n  80%  40022\n  90%  40122\n  95%  40316\n  98%  40449\n  99%  40483\n 100%  50319 (longest request)\n```\n\n## 实现\n\n```java\n /**\n     * Puts this request into asynchronous mode, and initializes its\n     * {@link AsyncContext} with the original (unwrapped) ServletRequest\n     * and ServletResponse objects.\n     *\n     * <p>Calling this method will cause committal of the associated\n     * response to be delayed until {@link AsyncContext#complete} is\n     * called on the returned {@link AsyncContext}, or the asynchronous\n     * operation has timed out.\n     *\n     * <p>Calling {@link AsyncContext#hasOriginalRequestAndResponse()} on\n     * the returned AsyncContext will return <code>true</code>. Any filters\n     * invoked in the <i>outbound</i> direction after this request was put\n     * into asynchronous mode may use this as an indication that any request\n     * and/or response wrappers that they added during their <i>inbound</i>\n     * invocation need not stay around for the duration of the asynchronous\n     * operation, and therefore any of their associated resources may be\n     * released.\n     *\n     * <p>This method clears the list of {@link AsyncListener} instances\n     * (if any) that were registered with the AsyncContext returned by the\n     * previous call to one of the startAsync methods, after calling each\n     * AsyncListener at its {@link AsyncListener#onStartAsync onStartAsync}\n     * method.\n     *\n     * <p>Subsequent invocations of this method, or its overloaded \n     * variant, will return the same AsyncContext instance, reinitialized\n     * as appropriate.\n     *\n     * @return the (re)initialized AsyncContext\n     * \n     * @throws IllegalStateException if this request is within the scope of\n     * a filter or servlet that does not support asynchronous operations\n     * (that is, {@link #isAsyncSupported} returns false),\n     * or if this method is called again without any asynchronous dispatch\n     * (resulting from one of the {@link AsyncContext#dispatch} methods),\n     * is called outside the scope of any such dispatch, or is called again\n     * within the scope of the same dispatch, or if the response has\n     * already been closed\n     *\n     * @see AsyncContext#dispatch()\n     * @since Servlet 3.0\n     */\n        public AsyncContext startAsync() throws IllegalStateException;\n```\n\n## Spring 对异步Servlet的支持\n\n\n\n## 参考\n\n1. [Async Servlet Feature of Servlet 3 - JournalDev](http://www.journaldev.com/2008/async-servlet-feature-of-servlet-3)\n\n2. [17.12 Asynchronous Processing - Java Platform, Enterprise Edition: The Java EE Tutorial (Release 7)](https://docs.oracle.com/javaee/7/tutorial/servlets012.htm)\n\n3. [ab - Apache HTTP server benchmarking tool - Apache HTTP Server Version 2.4](https://httpd.apache.org/docs/2.4/programs/ab.html)\n\n4. [系统吞吐量（TPS）、用户并发量、性能测试概念和公式](http://www.ha97.com/5095.html)\n\n5. [servlet3新特性——异步请求处理 | 晓的技术博客](https://lanjingling.github.io/2016/01/20/servlet3-new-furture/)\n\n6. [解决java.util.concurrent.RejectedExecutionException - 小一的专栏 - 博客频道 - CSDN.NET](http://blog.csdn.net/wzy_1988/article/details/38922449)\n\n","source":"_drafts/servlet-async.md","raw":"---\ntitle: 异步Servlet使用和原理解析\ntoc: true\ntags: servlet\ncategory: spring\n---\n\n并发，qps\n\n        QPS（TPS）：每秒钟request/事务 数量\n\n        并发数： 系统同时处理的request/事务数\n\n        响应时间：  一般取平均响应时间\n\n        QPS（TPS）= 并发数/平均响应时间\n\n        串行处理和并行处理，qps\n\n## 测试\n\n限定 tomcat的连接池个数为50，并发为200（>> 线程池大小），时异步具有很大的优势。\n\n如果并发量小于线程池大小，异步的反倒比同步的时间长了很久。\n\n```xml\n<Connector port=\"8080\" protocol=\"HTTP/1.1\"\n            maxThreads=\"50\"\n            connectionTimeout=\"20000\"\n            redirectPort=\"8443\" URIEncoding=\"UTF-8\"/>\n```\n\n### async ab测试\n\n```\n$ ab -n 10000 -c 200 http://localhost:8080/async\nThis is ApacheBench, Version 2.3 <$Revision: 655654 $>\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\nLicensed to The Apache Software Foundation, http://www.apache.org/\n\nBenchmarking localhost (be patient)\nCompleted 1000 requests\nCompleted 2000 requests\nCompleted 3000 requests\nCompleted 4000 requests\nCompleted 5000 requests\nCompleted 6000 requests\nCompleted 7000 requests\nCompleted 8000 requests\nCompleted 9000 requests\nCompleted 10000 requests\nFinished 10000 requests\n\n\nServer Software:        Apache-Coyote/1.1\nServer Hostname:        localhost\nServer Port:            8080\n\nDocument Path:          /async\nDocument Length:        40 bytes\n\nConcurrency Level:      200\nTime taken for tests:   1000.284 seconds\nComplete requests:      10000\nFailed requests:        47\n   (Connect: 0, Receive: 0, Length: 47, Exceptions: 0)\nWrite errors:           0\nNon-2xx responses:      47\nTotal transferred:      1530740 bytes\nHTML transferred:       506980 bytes\nRequests per second:    10.00 [#/sec] (mean)\nTime per request:       20005.686 [ms] (mean)\nTime per request:       100.028 [ms] (mean, across all concurrent requests)\nTransfer rate:          1.49 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    0   5.0      0     501\nProcessing:     2 19810 1683.3  20001   20560\nWaiting:        1 19810 1683.4  20000   20558\nTotal:          2 19811 1683.0  20001   20560\n\nPercentage of the requests served within a certain time (ms)\n  50%  20001\n  66%  20001\n  75%  20002\n  80%  20002\n  90%  20004\n  95%  20009\n  98%  20020\n  99%  20035\n 100%  20560 (longest request)\n```\n\n测试过程中出的异常：\n\n```\n一月 21, 2017 1:05:32 上午 org.apache.catalina.core.StandardWrapperValve invoke\n严重: Servlet.service() for servlet [com.air.async.AsyncServlet] in context with path [] threw exception\njava.util.concurrent.RejectedExecutionException: Task com.air.async.AsyncRequestProcessor@3caec762 rejected from java.util.concurrent.ThreadPoolExecutor@64db0f23[Running, pool size = 100, active threads = 100, queued tasks = 100, completed tasks = 9726]\n  at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2048)\n  at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:821)\n  at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1372)\n  at com.air.async.AsyncServlet.doGet(AsyncServlet.java:25)\n  at javax.servlet.http.HttpServlet.service(HttpServlet.java:621)\n  at javax.servlet.http.HttpServlet.service(HttpServlet.java:728)\n  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305)\n  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)\n  at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)\n  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)\n  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)\n  at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:222)\n  at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123)\n  at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)\n  at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171)\n  at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100)\n  at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:953)\n  at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)\n  at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408)\n  at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1041)\n  at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:603)\n  at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.doRun(AprEndpoint.java:2430)\n  at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run(AprEndpoint.java:2419)\n  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n  at java.lang.Thread.run(Thread.java:745)\n```\n\n有47个失败的case，是队列满了，然后丢掉了请求。\n\ntomcat的请求队列？？？？\n\n#### sync ab测试\n\n```\n$ ab -n 10000 -c 200 http://localhost:8080/hello\nThis is ApacheBench, Version 2.3 <$Revision: 655654 $>\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\nLicensed to The Apache Software Foundation, http://www.apache.org/\n\nBenchmarking localhost (be patient)\nCompleted 1000 requests\nCompleted 2000 requests\nCompleted 3000 requests\nCompleted 4000 requests\nCompleted 5000 requests\nCompleted 6000 requests\nCompleted 7000 requests\nCompleted 8000 requests\nCompleted 9000 requests\nCompleted 10000 requests\nFinished 10000 requests\n\n\nServer Software:        Apache-Coyote/1.1\nServer Hostname:        localhost\nServer Port:            8080\n\nDocument Path:          /hello\nDocument Length:        12 bytes\n\nConcurrency Level:      200\nTime taken for tests:   2002.151 seconds\nComplete requests:      10000\nFailed requests:        0\nWrite errors:           0\nTotal transferred:      1340000 bytes\nHTML transferred:       120000 bytes\nRequests per second:    4.99 [#/sec] (mean)\nTime per request:       40043.028 [ms] (mean)\nTime per request:       200.215 [ms] (mean, across all concurrent requests)\nTransfer rate:          0.65 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    0   0.4      0       8\nProcessing: 10002 39740 2686.3  40005   50319\nWaiting:    10002 39740 2686.4  40004   50319\nTotal:      10002 39741 2686.3  40005   50319\n\nPercentage of the requests served within a certain time (ms)\n  50%  40005\n  66%  40009\n  75%  40014\n  80%  40022\n  90%  40122\n  95%  40316\n  98%  40449\n  99%  40483\n 100%  50319 (longest request)\n```\n\n## 实现\n\n```java\n /**\n     * Puts this request into asynchronous mode, and initializes its\n     * {@link AsyncContext} with the original (unwrapped) ServletRequest\n     * and ServletResponse objects.\n     *\n     * <p>Calling this method will cause committal of the associated\n     * response to be delayed until {@link AsyncContext#complete} is\n     * called on the returned {@link AsyncContext}, or the asynchronous\n     * operation has timed out.\n     *\n     * <p>Calling {@link AsyncContext#hasOriginalRequestAndResponse()} on\n     * the returned AsyncContext will return <code>true</code>. Any filters\n     * invoked in the <i>outbound</i> direction after this request was put\n     * into asynchronous mode may use this as an indication that any request\n     * and/or response wrappers that they added during their <i>inbound</i>\n     * invocation need not stay around for the duration of the asynchronous\n     * operation, and therefore any of their associated resources may be\n     * released.\n     *\n     * <p>This method clears the list of {@link AsyncListener} instances\n     * (if any) that were registered with the AsyncContext returned by the\n     * previous call to one of the startAsync methods, after calling each\n     * AsyncListener at its {@link AsyncListener#onStartAsync onStartAsync}\n     * method.\n     *\n     * <p>Subsequent invocations of this method, or its overloaded \n     * variant, will return the same AsyncContext instance, reinitialized\n     * as appropriate.\n     *\n     * @return the (re)initialized AsyncContext\n     * \n     * @throws IllegalStateException if this request is within the scope of\n     * a filter or servlet that does not support asynchronous operations\n     * (that is, {@link #isAsyncSupported} returns false),\n     * or if this method is called again without any asynchronous dispatch\n     * (resulting from one of the {@link AsyncContext#dispatch} methods),\n     * is called outside the scope of any such dispatch, or is called again\n     * within the scope of the same dispatch, or if the response has\n     * already been closed\n     *\n     * @see AsyncContext#dispatch()\n     * @since Servlet 3.0\n     */\n        public AsyncContext startAsync() throws IllegalStateException;\n```\n\n## Spring 对异步Servlet的支持\n\n\n\n## 参考\n\n1. [Async Servlet Feature of Servlet 3 - JournalDev](http://www.journaldev.com/2008/async-servlet-feature-of-servlet-3)\n\n2. [17.12 Asynchronous Processing - Java Platform, Enterprise Edition: The Java EE Tutorial (Release 7)](https://docs.oracle.com/javaee/7/tutorial/servlets012.htm)\n\n3. [ab - Apache HTTP server benchmarking tool - Apache HTTP Server Version 2.4](https://httpd.apache.org/docs/2.4/programs/ab.html)\n\n4. [系统吞吐量（TPS）、用户并发量、性能测试概念和公式](http://www.ha97.com/5095.html)\n\n5. [servlet3新特性——异步请求处理 | 晓的技术博客](https://lanjingling.github.io/2016/01/20/servlet3-new-furture/)\n\n6. [解决java.util.concurrent.RejectedExecutionException - 小一的专栏 - 博客频道 - CSDN.NET](http://blog.csdn.net/wzy_1988/article/details/38922449)\n\n","slug":"servlet-async","published":0,"date":"2017-02-02T11:00:04.239Z","updated":"2017-02-02T11:00:04.239Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgec0056w4pyqyfinajv"},{"title":"rpc","toc":true,"category":null,"_content":"\n\n```\n start rmiregistry 2001\n```\n\n","source":"_drafts/rpc.md","raw":"---\ntitle: rpc\ntoc: true\ntags:\ncategory:\n---\n\n\n```\n start rmiregistry 2001\n```\n\n","slug":"rpc","published":0,"date":"2017-02-02T09:10:21.572Z","updated":"2017-02-02T09:10:21.572Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgeh0059w4pybgbezy2j"},{"title":"Guava之ratelimiter,限流利器","toc":true,"_content":"\n","source":"_drafts/ratelimiter.md","raw":"---\ntitle: 'Guava之ratelimiter,限流利器'\ntoc: true\ntags: rate-limiter\ncategory: guava\n---\n\n","slug":"ratelimiter","published":0,"date":"2017-02-02T09:10:11.158Z","updated":"2017-02-02T09:10:11.158Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgej005aw4py4jhvnpb2"},{"title":"python-json","toc":true,"category":null,"_content":"\nhttps://blog.nicky-zs.com/blog/17/\n\nFormat JSON with python\n\nhttps://pypi.python.org/pypi/jsondiff/0.1.0","source":"_drafts/python-json.md","raw":"---\ntitle: python-json\ntoc: true\ntags:\ncategory:\n---\n\nhttps://blog.nicky-zs.com/blog/17/\n\nFormat JSON with python\n\nhttps://pypi.python.org/pypi/jsondiff/0.1.0","slug":"python-json","published":0,"date":"2017-02-02T09:10:11.682Z","updated":"2017-02-02T09:10:11.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgel005ew4py1tj4hl9f"},{"title":"protobuf","toc":true,"category":null,"_content":"\n\n原理\n\n兼容性\n\nkryo 比较\n\n深入一点！","source":"_drafts/protobuf.md","raw":"---\ntitle: protobuf\ntoc: true\ntags:\ncategory:\n---\n\n\n原理\n\n兼容性\n\nkryo 比较\n\n深入一点！","slug":"protobuf","published":0,"date":"2017-02-02T09:10:12.143Z","updated":"2017-02-02T09:10:12.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgeo005fw4pyrzi0gtzh"},{"title":"netty","toc":true,"category":null,"_content":"\n\nnetty nio \n\nsocket 层的封装\n\n## 参考\n\n[Netty和Jetty的Java NIO 网络框架模型分析](http://codefine.co/652.html)\n\n[Netty: Home](http://netty.io/)","source":"_drafts/netty.md","raw":"---\ntitle: netty\ntoc: true\ntags:\ncategory:\n---\n\n\nnetty nio \n\nsocket 层的封装\n\n## 参考\n\n[Netty和Jetty的Java NIO 网络框架模型分析](http://codefine.co/652.html)\n\n[Netty: Home](http://netty.io/)","slug":"netty","published":0,"date":"2017-02-02T11:23:48.691Z","updated":"2017-02-02T11:23:48.691Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgeu005gw4pylbt4s4ed"},{"abbrlink":"0","_content":"title: murmur哈希算法\ntoc: true\ntags: hash\ncategory: algorithm\n--- \n\nGeoHash\n\n一致性hash\n\n## 参考\n\n1. [Murmur哈希 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/Murmur%E5%93%88%E5%B8%8C)\n\n","source":"_drafts/murmur.md","raw":"---\nabbrlink: '0'\n---\ntitle: murmur哈希算法\ntoc: true\ntags: hash\ncategory: algorithm\n--- \n\nGeoHash\n\n一致性hash\n\n## 参考\n\n1. [Murmur哈希 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/Murmur%E5%93%88%E5%B8%8C)\n\n","slug":"murmur","published":0,"date":"2017-02-02T08:19:13.700Z","updated":"2017-02-02T08:19:13.700Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgez005hw4pyg6xjt3ij"},{"title":"logback 使用","toc":true,"_content":"\n# Logback总结\n\n配置示例：\n\n{% gist 06f32243a766ea3d5da8746e9de25729 %}\n\n### Colored Log in Console\n\nhighlight 关键字\n\n```xml\n<appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n    <encoder>\n        <pattern>\n            %d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) [%-40.40logger{10}] - %msg%n\n        </pattern>\n    </encoder>\n</appender>\n```\n效果:\n\n{%  asset_img   colored.jpg  %}\n\n\n## 按照包名设置日志级别\n\n```xml\n    <logger name=\"com.air.nio\" level=\"error\">\n        <appender-ref ref=\"STDOUT\" />\n    </logger>\n```\n\n通过上面的配置，`com.air.nio`包下打印的日志级别必须在`error`才能打印出来。\n\n\n## Filter\n\n\n\n\n\n# 参考\n1. [COLORED LOGS IN A CONSOLE (ANSI STYLING)](http://blog.codeleak.pl/2014/02/colored-logs-in-console-ansi-styling.html)\n\n2. [Chapter 7: Filters](https://logback.qos.ch/manual/filters.html)\n\n","source":"_drafts/logback.md","raw":"---\ntitle: logback 使用\ntags: logback\ncategory: java\ntoc: true\n---\n\n# Logback总结\n\n配置示例：\n\n{% gist 06f32243a766ea3d5da8746e9de25729 %}\n\n### Colored Log in Console\n\nhighlight 关键字\n\n```xml\n<appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n    <encoder>\n        <pattern>\n            %d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) [%-40.40logger{10}] - %msg%n\n        </pattern>\n    </encoder>\n</appender>\n```\n效果:\n\n{%  asset_img   colored.jpg  %}\n\n\n## 按照包名设置日志级别\n\n```xml\n    <logger name=\"com.air.nio\" level=\"error\">\n        <appender-ref ref=\"STDOUT\" />\n    </logger>\n```\n\n通过上面的配置，`com.air.nio`包下打印的日志级别必须在`error`才能打印出来。\n\n\n## Filter\n\n\n\n\n\n# 参考\n1. [COLORED LOGS IN A CONSOLE (ANSI STYLING)](http://blog.codeleak.pl/2014/02/colored-logs-in-console-ansi-styling.html)\n\n2. [Chapter 7: Filters](https://logback.qos.ch/manual/filters.html)\n\n","slug":"logback","published":0,"date":"2017-02-02T10:56:10.237Z","updated":"2017-02-02T10:56:10.237Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgf3005iw4py0ldvmf2i"},{"title":"kibana","toc":true,"category":null,"_content":"\n\n\n## 参考\n\n1. [ELK：kibana使用的lucene查询语法](https://segmentfault.com/a/1190000002972420)\n\n2. [Kibana3指南](http://www.code123.cc/docs/kibana-logstash/v3/index.html)\n\n3. []\n","source":"_drafts/kibana.md","raw":"---\ntitle: kibana\ntoc: true\ntags:\ncategory:\n---\n\n\n\n## 参考\n\n1. [ELK：kibana使用的lucene查询语法](https://segmentfault.com/a/1190000002972420)\n\n2. [Kibana3指南](http://www.code123.cc/docs/kibana-logstash/v3/index.html)\n\n3. []\n","slug":"kibana","published":0,"date":"2017-02-02T09:10:13.788Z","updated":"2017-02-02T09:10:13.788Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgf5005mw4pyvrxd5gd7"},{"title":"java代理总结","toc":true,"_content":"\n## 静态代理\n\n## 动态代理\n\n## cglib\n\n\n","source":"_drafts/java-proxy.md","raw":"---\ntitle: java代理总结\ntoc: true\ntags: proxy\ncategory: java\n---\n\n## 静态代理\n\n## 动态代理\n\n## cglib\n\n\n","slug":"java-proxy","published":0,"date":"2017-02-02T09:10:14.625Z","updated":"2017-02-02T09:10:14.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgf7005nw4pyvakguj3l"},{"title":"java-object-diff","toc":true,"category":null,"_content":"\n\n存在的问题：\n\n1. 为什么不使用json diff？\n\njson的数据结构比较简单，Java中的Set、List、Array到json中都变成了Json Array\n\n这样，List就没有办法做diff了（涉及到顺序和重复插入）\n\n2. Java Object Diff\n\n- 要解决 List的重复插入，顺序问题\n\n- \n\n\nDiffNode：代表了对象的一部分。可以是对象本身，也可以是对象的一个属性，集合的一个元素或者是Map的一个entry。一个DiffNode可以拥有任意数量的子node，但最多只有一个父node。\nDiffNode.State:ADDED,CHANGED,REMOVED,UNTOUCHED,CIRCULAR,IGNORED,INACCESSIBLE.\nDiffNode.Visitor:一个用于遍历diff树的接口。\nInstances：这个类有几个属性：sourceAccessor，working，base，以及fresh。其中fresh是用反射从working类型创建的一个对象。\nAccessor：一个通用的访问接口，实现类有：CollectionItemAccessor，MapEntryAccessor，PropertyAccessor，PropertyAwareAccessor，RootAccessor，TypeAwareAccessor。\nDiffer:接口，根据数据类型，有几个实现类：BeanDiffer，CollectionDiffer，MapDiffer以及PrimitiveDiffer。\nComparisonStrategy接口：比较的策略定义。实现类有ComparableComparisonStrategy和EqualsOnlyComparisonStrategy，从命名就可以知道前者是通过Comparable接口比较，而后者是通过equals方法比较。\n\n对list的支持不是很好\n\nhttps://github.com/SQiShER/java-object-diff/issues/143\n\nNo item is expected to be present more than once and if it is, it’s not handled specially.\nOrder doesn’t matter and is expected to be handled by the underlying collection.\n\n\n[Diff Examples — JaVers Documentation](http://javers.org/documentation/diff-examples/)\n\n[SQiShER/java-object-diff: Library to diff and merge Java objects with ease](https://github.com/SQiShER/java-object-diff)\n\n[java-object-diff Documentation](http://java-object-diff.readthedocs.io/en/latest/)","source":"_drafts/java-object-diff.md","raw":"---\ntitle: java-object-diff\ntoc: true\ntags:\ncategory:\n---\n\n\n存在的问题：\n\n1. 为什么不使用json diff？\n\njson的数据结构比较简单，Java中的Set、List、Array到json中都变成了Json Array\n\n这样，List就没有办法做diff了（涉及到顺序和重复插入）\n\n2. Java Object Diff\n\n- 要解决 List的重复插入，顺序问题\n\n- \n\n\nDiffNode：代表了对象的一部分。可以是对象本身，也可以是对象的一个属性，集合的一个元素或者是Map的一个entry。一个DiffNode可以拥有任意数量的子node，但最多只有一个父node。\nDiffNode.State:ADDED,CHANGED,REMOVED,UNTOUCHED,CIRCULAR,IGNORED,INACCESSIBLE.\nDiffNode.Visitor:一个用于遍历diff树的接口。\nInstances：这个类有几个属性：sourceAccessor，working，base，以及fresh。其中fresh是用反射从working类型创建的一个对象。\nAccessor：一个通用的访问接口，实现类有：CollectionItemAccessor，MapEntryAccessor，PropertyAccessor，PropertyAwareAccessor，RootAccessor，TypeAwareAccessor。\nDiffer:接口，根据数据类型，有几个实现类：BeanDiffer，CollectionDiffer，MapDiffer以及PrimitiveDiffer。\nComparisonStrategy接口：比较的策略定义。实现类有ComparableComparisonStrategy和EqualsOnlyComparisonStrategy，从命名就可以知道前者是通过Comparable接口比较，而后者是通过equals方法比较。\n\n对list的支持不是很好\n\nhttps://github.com/SQiShER/java-object-diff/issues/143\n\nNo item is expected to be present more than once and if it is, it’s not handled specially.\nOrder doesn’t matter and is expected to be handled by the underlying collection.\n\n\n[Diff Examples — JaVers Documentation](http://javers.org/documentation/diff-examples/)\n\n[SQiShER/java-object-diff: Library to diff and merge Java objects with ease](https://github.com/SQiShER/java-object-diff)\n\n[java-object-diff Documentation](http://java-object-diff.readthedocs.io/en/latest/)","slug":"java-object-diff","published":0,"date":"2017-02-02T09:10:25.743Z","updated":"2017-02-02T09:10:25.743Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgf9005rw4pyu7r5z0xg"},{"title":"java-introspector","toc":true,"category":null,"_content":"\nhttp://www.slideshare.net/kim.mens/basics-of-reflection-in-java\n\nhttp://jjhou.boolan.com/javatwo-2004-reflection.pdf\n\n/**\n * The Introspector class provides a standard way for tools to learn about\n * the properties, events, and methods supported by a target Java Bean.\n * <p>\n * For more information about introspection and design patterns, please\n * consult the\n *  <a href=\"http://www.oracle.com/technetwork/java/javase/documentation/spec-136004.html\">JavaBeans&trade; specification</a>.\n */\n\npublic class Introspector {\n\nBeanInfo  \n\n\ninstanceof  C++\n\npython 中的内省\n\nmethod\n\n","source":"_drafts/java-introspector.md","raw":"---\ntitle: java-introspector\ntoc: true\ntags:\ncategory:\n---\n\nhttp://www.slideshare.net/kim.mens/basics-of-reflection-in-java\n\nhttp://jjhou.boolan.com/javatwo-2004-reflection.pdf\n\n/**\n * The Introspector class provides a standard way for tools to learn about\n * the properties, events, and methods supported by a target Java Bean.\n * <p>\n * For more information about introspection and design patterns, please\n * consult the\n *  <a href=\"http://www.oracle.com/technetwork/java/javase/documentation/spec-136004.html\">JavaBeans&trade; specification</a>.\n */\n\npublic class Introspector {\n\nBeanInfo  \n\n\ninstanceof  C++\n\npython 中的内省\n\nmethod\n\n","slug":"java-introspector","published":0,"date":"2017-02-02T09:09:44.574Z","updated":"2017-02-02T09:09:44.574Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgfc005sw4py6b1alk9z"},{"title":"java-URL","toc":true,"category":null,"_content":"","source":"_drafts/java-URL.md","raw":"---\ntitle: java-URL\ntoc: true\ntags:\ncategory:\n---\n","slug":"java-URL","published":0,"date":"2017-02-02T09:10:14.200Z","updated":"2017-02-02T09:10:14.200Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgff005tw4pyg7ngxqww"},{"title":"jackson_custom","toc":true,"_content":"\n## 使用\n\n### maven 依赖\n\n\n默认解析公有的字段，和带有getter和setter的字段\n@JsonAutoDetect\n\nChanging property auto-detection\n\nThe default Jackson property detection rules will find:\n\nAll ''public'' fields\nAll ''public'' getters ('getXxx()' methods)\nAll setters ('setXxx(value)' methods), ''regardless of visibility'')\n\n```java\n@JsonAutoDetect(fieldVisibility=JsonAutoDetect.Visibility.NONE)\npublic class POJOWithNoFields {\n  // will NOT be included, unless there is access 'getValue()'\n  public int value;\n}\n```\n\n## jackson-annotations\n\n\n### 忽略属性\n\n@JsonIgnore\n忽略一些属性\n@JsonIgnoreProperties({\"ignored1\", \"ignored2\"})\nignoreUnknown=true\n\n\n@JsonProperty\n指定输出的key\n\n@JsonFilter\n\n@JsonGetter\n\n定制\n\n@JsonDeserialize\n@JsonSerialize\n\n默认使用无参的构造函数来构造，但是可以使用@JsonCreator去指定构造函数\n\n使用@JsonProperty去指定参数\n\n```java\npublic class CtorPOJO {\n   private final int _x, _y;\n\n   @JsonCreator\n   public CtorPOJO(@JsonProperty(\"x\") int x, @JsonProperty(\"y\") int y) {\n      _x = x;\n      _y = y;\n   }\n}\n```\n\njackson-annotations  定义一些注解\n\n\n\n\n定义解析\n\n多态支持\n\n@JsonTypeInfo\n\n```java\n// Include Java class name (\"com.myempl.ImplClass\") as JSON property \"class\"\n@JsonTypeInfo(use=Id.CLASS, include=As.PROPERTY, property=\"class\")\npublic abstract class BaseClass {\n}\n\npublic class Impl1 extends BaseClass {\n  public int x;\n}\npublic class Impl2 extends BaseClass {\n  public String name;\n}\n\npublic class PojoWithTypedObjects {\n  public List<BaseClass> items;\n}\n```\n\n空字段\n\n各种配置\n\nMap的Key Deserializer 构造函数\n\n@JsonDeserialize(keyUsing = ShortDateKeyDeserializer.class)\n\ncom.fasterxml.jackson.databind.JsonMappingException: Can not find a (Map) Key deserializer for type [simple type, class com.qunar.hotel.price.root.beans.time.ShortDate]\n\n## 参考\n\n1. [FasterXML/jackson-annotations: Core annotations (annotations that only depend on jackson-core) for Jackson data processor](https://github.com/FasterXML/jackson-annotations)\n\n\n\n注入的message-converters优先级高于默认注入的json转换器","source":"_drafts/jackson-custom.md","raw":"---\ntitle: jackson_custom\ntags: jackson\ncategory: jackson\ntoc: true\n---\n\n## 使用\n\n### maven 依赖\n\n\n默认解析公有的字段，和带有getter和setter的字段\n@JsonAutoDetect\n\nChanging property auto-detection\n\nThe default Jackson property detection rules will find:\n\nAll ''public'' fields\nAll ''public'' getters ('getXxx()' methods)\nAll setters ('setXxx(value)' methods), ''regardless of visibility'')\n\n```java\n@JsonAutoDetect(fieldVisibility=JsonAutoDetect.Visibility.NONE)\npublic class POJOWithNoFields {\n  // will NOT be included, unless there is access 'getValue()'\n  public int value;\n}\n```\n\n## jackson-annotations\n\n\n### 忽略属性\n\n@JsonIgnore\n忽略一些属性\n@JsonIgnoreProperties({\"ignored1\", \"ignored2\"})\nignoreUnknown=true\n\n\n@JsonProperty\n指定输出的key\n\n@JsonFilter\n\n@JsonGetter\n\n定制\n\n@JsonDeserialize\n@JsonSerialize\n\n默认使用无参的构造函数来构造，但是可以使用@JsonCreator去指定构造函数\n\n使用@JsonProperty去指定参数\n\n```java\npublic class CtorPOJO {\n   private final int _x, _y;\n\n   @JsonCreator\n   public CtorPOJO(@JsonProperty(\"x\") int x, @JsonProperty(\"y\") int y) {\n      _x = x;\n      _y = y;\n   }\n}\n```\n\njackson-annotations  定义一些注解\n\n\n\n\n定义解析\n\n多态支持\n\n@JsonTypeInfo\n\n```java\n// Include Java class name (\"com.myempl.ImplClass\") as JSON property \"class\"\n@JsonTypeInfo(use=Id.CLASS, include=As.PROPERTY, property=\"class\")\npublic abstract class BaseClass {\n}\n\npublic class Impl1 extends BaseClass {\n  public int x;\n}\npublic class Impl2 extends BaseClass {\n  public String name;\n}\n\npublic class PojoWithTypedObjects {\n  public List<BaseClass> items;\n}\n```\n\n空字段\n\n各种配置\n\nMap的Key Deserializer 构造函数\n\n@JsonDeserialize(keyUsing = ShortDateKeyDeserializer.class)\n\ncom.fasterxml.jackson.databind.JsonMappingException: Can not find a (Map) Key deserializer for type [simple type, class com.qunar.hotel.price.root.beans.time.ShortDate]\n\n## 参考\n\n1. [FasterXML/jackson-annotations: Core annotations (annotations that only depend on jackson-core) for Jackson data processor](https://github.com/FasterXML/jackson-annotations)\n\n\n\n注入的message-converters优先级高于默认注入的json转换器","slug":"jackson-custom","published":0,"date":"2017-02-02T09:09:45.269Z","updated":"2017-02-02T09:09:45.269Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgfh005uw4pyvft3yx5b"},{"title":"inode","toc":true,"category":null,"_content":"","source":"_drafts/inode.md","raw":"---\ntitle: inode\ntoc: true\ntags:\ncategory:\n---\n","slug":"inode","published":0,"date":"2017-02-02T09:09:46.051Z","updated":"2017-02-02T09:09:46.051Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgfk005yw4pye4ydjfkt"},{"title":"impress.js","toc":true,"category":null,"_content":"","source":"_drafts/impress-js.md","raw":"---\ntitle: impress.js\ntoc: true\ntags:\ncategory:\n---\n","slug":"impress-js","published":0,"date":"2017-02-02T09:09:46.783Z","updated":"2017-02-02T09:09:46.783Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgfn005zw4pylz6nzkkp"},{"title":"idea-plugins","toc":true,"category":null,"_content":"","source":"_drafts/idea-plugins.md","raw":"---\ntitle: idea-plugins\ntoc: true\ntags:\ncategory:\n---\n","slug":"idea-plugins","published":0,"date":"2017-02-02T09:09:47.515Z","updated":"2017-02-02T09:09:47.515Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgfp0060w4pyksf5b6os"},{"title":"http协议详解","toc":true,"_content":"\n\n## HTTP Request组成\n\n{% asset_img  http_request_message.png %}\n\nCRLF分隔\n\n### Request LINE\n\n### Request HEADER\n\n### PAYLOAD\n\n## HTTP Response组成\n\n### URI 协议 \n\n### Response HEADER\n\n### Response Body\n\n\n### CGI示例\n\ncache \n\nkeep-alive\n\nwebsocket\n\n## 缺点\n\n文本协议，需要转换\n\n\n# HTTP 2.0\n\n> SPDY（发音如英语：speedy），一种开放的网络传输协议，由Google开发，用来发送网页内容。基于传输控制协议（TCP）的应用层协议。SPDY也就是HTTP/2的前身。Google最早是在Chromium中提出的SPDY协议[1]。被用于Google Chrome浏览器中来访问Google的SSL加密服务。SPDY并不是首字母缩略字，而仅仅是\"speedy\"的缩写。SPDY现为Google的商标[2]。HTTP/2的关键功能主要来自SPDY技术，换言之，SPDY的成果被采纳而最终演变为HTTP/2。\n\n## 参考\n\n[In Introduction to HTTP Basics](https://www.ntu.edu.sg/home/ehchua/programming/webprogramming/HTTP_Basics.html)\n\n[HTTP2.0的奇妙日常 | Web前端 腾讯AlloyTeam Blog | 愿景: 成为地球卓越的Web团队！](http://www.alloyteam.com/2015/03/http2-0-di-qi-miao-ri-chang/)\n\n[Ed Burns谈HTTP/2和Java EE Servlet 4规范](http://www.infoq.com/cn/news/2015/04/burns-servlet-http2)","source":"_drafts/http.md","raw":"---\ntitle: http协议详解\ntoc: true\ntags: http\ncategory: web\n---\n\n\n## HTTP Request组成\n\n{% asset_img  http_request_message.png %}\n\nCRLF分隔\n\n### Request LINE\n\n### Request HEADER\n\n### PAYLOAD\n\n## HTTP Response组成\n\n### URI 协议 \n\n### Response HEADER\n\n### Response Body\n\n\n### CGI示例\n\ncache \n\nkeep-alive\n\nwebsocket\n\n## 缺点\n\n文本协议，需要转换\n\n\n# HTTP 2.0\n\n> SPDY（发音如英语：speedy），一种开放的网络传输协议，由Google开发，用来发送网页内容。基于传输控制协议（TCP）的应用层协议。SPDY也就是HTTP/2的前身。Google最早是在Chromium中提出的SPDY协议[1]。被用于Google Chrome浏览器中来访问Google的SSL加密服务。SPDY并不是首字母缩略字，而仅仅是\"speedy\"的缩写。SPDY现为Google的商标[2]。HTTP/2的关键功能主要来自SPDY技术，换言之，SPDY的成果被采纳而最终演变为HTTP/2。\n\n## 参考\n\n[In Introduction to HTTP Basics](https://www.ntu.edu.sg/home/ehchua/programming/webprogramming/HTTP_Basics.html)\n\n[HTTP2.0的奇妙日常 | Web前端 腾讯AlloyTeam Blog | 愿景: 成为地球卓越的Web团队！](http://www.alloyteam.com/2015/03/http2-0-di-qi-miao-ri-chang/)\n\n[Ed Burns谈HTTP/2和Java EE Servlet 4规范](http://www.infoq.com/cn/news/2015/04/burns-servlet-http2)","slug":"http","published":0,"date":"2017-02-05T10:01:54.012Z","updated":"2017-02-05T10:01:54.012Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgfu0061w4pycfj6yjwu"},{"title":"快速了解一个系统","toc":true,"_content":"\n\n>例如，你可能把一棵树看作一个单独、离散的对象，立在地面。但事实上，一棵树至少是两个主要系统的连接点：树叶和空气的处理循环与根和泥土的处理循环。树不是静止的，也不是孤立的。更有趣的是，几乎没有人只是系统的一个观察者，不论你是否意识到，很可能你就是这个系统的一部分\n\n从系统的交互入手，输入/输出\n\n- 依赖的外部系统\n\n- 对外提供的服务\n\n从测试入手\n\n自顶向下得阅读代码，抽象层级越来越低\n\n先看接口","source":"_drafts/getting-started-with-system.md","raw":"---\ntitle: 快速了解一个系统\ntoc: true\ntags: beginner\ncategory: 内功\n---\n\n\n>例如，你可能把一棵树看作一个单独、离散的对象，立在地面。但事实上，一棵树至少是两个主要系统的连接点：树叶和空气的处理循环与根和泥土的处理循环。树不是静止的，也不是孤立的。更有趣的是，几乎没有人只是系统的一个观察者，不论你是否意识到，很可能你就是这个系统的一部分\n\n从系统的交互入手，输入/输出\n\n- 依赖的外部系统\n\n- 对外提供的服务\n\n从测试入手\n\n自顶向下得阅读代码，抽象层级越来越低\n\n先看接口","slug":"getting-started-with-system","published":0,"date":"2017-02-02T09:10:17.435Z","updated":"2017-02-02T09:10:17.435Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgg60066w4py9u56wy9g"},{"title":"Spring中factorybean的使用","toc":true,"_content":"\n```Java\n/**\n* <p>Bean factory implementations should support the standard bean lifecycle interfaces\n* as far as possible. The full set of initialization methods and their standard order is:<br>\n* 1. BeanNameAware's {@code setBeanName}<br>\n* 2. BeanClassLoaderAware's {@code setBeanClassLoader}<br>\n* 3. BeanFactoryAware's {@code setBeanFactory}<br>\n* 4. ResourceLoaderAware's {@code setResourceLoader}\n* (only applicable when running in an application context)<br>\n* 5. ApplicationEventPublisherAware's {@code setApplicationEventPublisher}\n* (only applicable when running in an application context)<br>\n* 6. MessageSourceAware's {@code setMessageSource}\n* (only applicable when running in an application context)<br>\n* 7. ApplicationContextAware's {@code setApplicationContext}\n* (only applicable when running in an application context)<br>\n* 8. ServletContextAware's {@code setServletContext}\n* (only applicable when running in a web application context)<br>\n* 9. {@code postProcessBeforeInitialization} methods of BeanPostProcessors<br>\n* 10. InitializingBean's {@code afterPropertiesSet}<br>\n* 11. a custom init-method definition<br>\n* 12. {@code postProcessAfterInitialization} methods of BeanPostProcessors\n*\n* <p>On shutdown of a bean factory, the following lifecycle methods apply:<br>\n* 1. DisposableBean's {@code destroy}<br>\n* 2. a custom destroy-method definition\n**/\n```\n\n\n## 参考\n\n1. []()","source":"_drafts/factorybean.md","raw":"---\ntitle: Spring中factorybean的使用\ntags: beanfactory\ncategory: spring\ntoc: true\n---\n\n```Java\n/**\n* <p>Bean factory implementations should support the standard bean lifecycle interfaces\n* as far as possible. The full set of initialization methods and their standard order is:<br>\n* 1. BeanNameAware's {@code setBeanName}<br>\n* 2. BeanClassLoaderAware's {@code setBeanClassLoader}<br>\n* 3. BeanFactoryAware's {@code setBeanFactory}<br>\n* 4. ResourceLoaderAware's {@code setResourceLoader}\n* (only applicable when running in an application context)<br>\n* 5. ApplicationEventPublisherAware's {@code setApplicationEventPublisher}\n* (only applicable when running in an application context)<br>\n* 6. MessageSourceAware's {@code setMessageSource}\n* (only applicable when running in an application context)<br>\n* 7. ApplicationContextAware's {@code setApplicationContext}\n* (only applicable when running in an application context)<br>\n* 8. ServletContextAware's {@code setServletContext}\n* (only applicable when running in a web application context)<br>\n* 9. {@code postProcessBeforeInitialization} methods of BeanPostProcessors<br>\n* 10. InitializingBean's {@code afterPropertiesSet}<br>\n* 11. a custom init-method definition<br>\n* 12. {@code postProcessAfterInitialization} methods of BeanPostProcessors\n*\n* <p>On shutdown of a bean factory, the following lifecycle methods apply:<br>\n* 1. DisposableBean's {@code destroy}<br>\n* 2. a custom destroy-method definition\n**/\n```\n\n\n## 参考\n\n1. []()","slug":"factorybean","published":0,"date":"2017-02-02T09:10:17.954Z","updated":"2017-02-02T09:10:17.954Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgg9006bw4pygvn1lcxy"},{"title":"dozer","toc":true,"category":null,"_content":"","source":"_drafts/dozer.md","raw":"---\ntitle: dozer\ntoc: true\ntags:\ncategory:\n---\n","slug":"dozer","published":0,"date":"2017-02-02T09:10:18.443Z","updated":"2017-02-02T09:10:18.443Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmggc006fw4py14qmzby6"},{"title":"digester","toc":true,"_content":"\nXML 文件中如何使用它来把节点转换为 Java 对象","source":"_drafts/digester.md","raw":"---\ntitle: digester\ntoc: true\ntags: xml\ncategory: java\n---\n\nXML 文件中如何使用它来把节点转换为 Java 对象","slug":"digester","published":0,"date":"2017-02-02T09:10:18.975Z","updated":"2017-02-02T09:10:18.975Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmgge006gw4py6xi24sfi"},{"title":"diffy","toc":true,"_content":"\n\n\n## 参考\n\n1. [Diffy：Twitter的开源自动化测试工具](http://www.infoq.com/cn/articles/diffy-twitter-open-source-automation-testing-tool)","source":"_drafts/diffy.md","raw":"---\ntitle: diffy\ntoc: true\ntags: test\ncategory: 工具\n---\n\n\n\n## 参考\n\n1. [Diffy：Twitter的开源自动化测试工具](http://www.infoq.com/cn/articles/diffy-twitter-open-source-automation-testing-tool)","slug":"diffy","published":0,"date":"2017-02-02T09:10:19.417Z","updated":"2017-02-02T09:10:19.417Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmggg006jw4pyseaiceh9"},{"title":"Spring中的bean属性编辑器——BeanWrapper","toc":true,"_content":"\n## 源起\n\n最近在翻阅Spring MVC的源码的时候看到了这么一段\n\n```java\ntry {\n        PropertyValues pvs = new ServletConfigPropertyValues(getServletConfig(), this.requiredProperties);\n        BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(this);\n        ResourceLoader resourceLoader = new ServletContextResourceLoader(getServletContext());\n        bw.registerCustomEditor(Resource.class, new ResourceEditor(resourceLoader, getEnvironment()));\n        initBeanWrapper(bw);\n        bw.setPropertyValues(pvs, true);\n    }\n    catch (xx){\n        ...\n    }\n```\n这段代码是在`DispatcherServlet`的父类`HttpServletBean`初始化的时候使用的。\n`bw.setPropertyValues(pvs, true);` 这一句直接操作了`Bean`的属性，将Servlet启动文件中\n指定的初始化信息加载过来。\n\n## JavaBeans规范\n\n1. 所有的属性都是private的\n\n2. 有一个公有的无参构造函数\n\n3. 可序列化（实现`Serializable`接口）\n\n\n## Apache Commons\n\nUnsafe 类\n\n## 参考\n\n1. [What is a JavaBean exactly?](http://stackoverflow.com/questions/3295496/what-is-a-javabean-exactly)","source":"_drafts/custom-editor.md","raw":"---\ntitle: Spring中的bean属性编辑器——BeanWrapper\ntags: PropertyEditor\ncategory: spring\ntoc: true\n---\n\n## 源起\n\n最近在翻阅Spring MVC的源码的时候看到了这么一段\n\n```java\ntry {\n        PropertyValues pvs = new ServletConfigPropertyValues(getServletConfig(), this.requiredProperties);\n        BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(this);\n        ResourceLoader resourceLoader = new ServletContextResourceLoader(getServletContext());\n        bw.registerCustomEditor(Resource.class, new ResourceEditor(resourceLoader, getEnvironment()));\n        initBeanWrapper(bw);\n        bw.setPropertyValues(pvs, true);\n    }\n    catch (xx){\n        ...\n    }\n```\n这段代码是在`DispatcherServlet`的父类`HttpServletBean`初始化的时候使用的。\n`bw.setPropertyValues(pvs, true);` 这一句直接操作了`Bean`的属性，将Servlet启动文件中\n指定的初始化信息加载过来。\n\n## JavaBeans规范\n\n1. 所有的属性都是private的\n\n2. 有一个公有的无参构造函数\n\n3. 可序列化（实现`Serializable`接口）\n\n\n## Apache Commons\n\nUnsafe 类\n\n## 参考\n\n1. [What is a JavaBean exactly?](http://stackoverflow.com/questions/3295496/what-is-a-javabean-exactly)","slug":"custom-editor","published":0,"date":"2017-02-05T09:43:18.727Z","updated":"2017-02-05T09:43:18.727Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmggj006ow4py52n6yunz"},{"title":"classloader","toc":true,"_content":"\n### URLClassLoader\n\n>This class loader is used to load classes and resources from a search\n path of URLs referring to both JAR files and directories. Any URL that\n ends with a '/' is assumed to refer to a directory. Otherwise, the URL\n is assumed to refer to a JAR file which will be opened as needed.\n <p>\n The AccessControlContext of the thread that created the instance of\n URLClassLoader will be used when subsequently loading classes and\n resources.\n <p>\n The classes that are loaded are by default granted permission only to\n access the URLs specified when the URLClassLoader was created. \n @author  David Connelly\n @since   1.2\n\n","source":"_drafts/classloader.md","raw":"---\ntitle: classloader\ntags: classloader\ncategory: java\ntoc: true\n---\n\n### URLClassLoader\n\n>This class loader is used to load classes and resources from a search\n path of URLs referring to both JAR files and directories. Any URL that\n ends with a '/' is assumed to refer to a directory. Otherwise, the URL\n is assumed to refer to a JAR file which will be opened as needed.\n <p>\n The AccessControlContext of the thread that created the instance of\n URLClassLoader will be used when subsequently loading classes and\n resources.\n <p>\n The classes that are loaded are by default granted permission only to\n access the URLs specified when the URLClassLoader was created. \n @author  David Connelly\n @since   1.2\n\n","slug":"classloader","published":0,"date":"2017-02-02T09:10:20.467Z","updated":"2017-02-02T09:10:20.467Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmggm006sw4pyh7hf8cba"},{"title":"burpsuite-https","toc":true,"category":null,"_content":"","source":"_drafts/burpsuite-https.md","raw":"---\ntitle: burpsuite-https\ntoc: true\ntags:\ncategory:\n---\n","slug":"burpsuite-https","published":0,"date":"2017-02-02T09:10:20.923Z","updated":"2017-02-02T09:10:20.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmggp006ww4pyq8m3k6u0"},{"title":"WeakHashMap","toc":true,"category":null,"_content":"","source":"_drafts/WeakHashMap.md","raw":"---\ntitle: WeakHashMap\ntoc: true\ntags:\ncategory:\n---\n","slug":"WeakHashMap","published":0,"date":"2017-02-02T09:10:08.000Z","updated":"2017-02-02T09:10:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmggs006xw4pyt9ch7fb0"},{"title":"ServletInvocableHandlerMethod","toc":true,"category":null,"_content":"","source":"_drafts/ServletInvocableHandlerMethod.md","raw":"---\ntitle: ServletInvocableHandlerMethod\ntoc: true\ntags:\ncategory:\n---\n","slug":"ServletInvocableHandlerMethod","published":0,"date":"2017-02-02T09:10:10.069Z","updated":"2017-02-02T09:10:10.069Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmggu006yw4pyys3yarvp"},{"title":"P98","toc":true,"category":null,"_content":"","source":"_drafts/P98.md","raw":"---\ntitle: P98\ntoc: true\ntags:\ncategory:\n---\n","slug":"P98","published":0,"date":"2017-02-02T09:10:12.590Z","updated":"2017-02-02T09:10:12.590Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmggw006zw4pye1x7dgus"},{"title":"HandlerMethodArgumentResolver","toc":true,"category":null,"_content":"\n","source":"_drafts/HandlerMethodArgumentResolver.md","raw":"---\ntitle: HandlerMethodArgumentResolver\ntoc: true\ntags:\ncategory:\n---\n\n","slug":"HandlerMethodArgumentResolver","published":0,"date":"2017-02-02T09:10:15.892Z","updated":"2017-02-02T09:10:15.892Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmggy0070w4pyefa03izb"},{"title":"HandlerMapping","toc":true,"category":null,"_content":"","source":"_drafts/HandlerMapping.md","raw":"---\ntitle: HandlerMapping\ntoc: true\ntags:\ncategory:\n---\n","slug":"HandlerMapping","published":0,"date":"2017-02-02T09:10:16.455Z","updated":"2017-02-02T09:10:16.455Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyswmggz0071w4pymoaz9hxo"}],"PostAsset":[{"_id":"source/_posts/spring-resource/resource.jpg","post":"ciyswmg5b000xw4py0f53knqf","slug":"resource.jpg","modified":1},{"_id":"source/_posts/spring-mvc/Servlet_LifeCycle.jpg","post":"ciyswmg5l0012w4py50c3wdid","slug":"Servlet_LifeCycle.jpg","modified":1},{"_id":"source/_posts/spring-mvc/arch.jpg","post":"ciyswmg5l0012w4py50c3wdid","slug":"arch.jpg","modified":1},{"_id":"source/_posts/spring-mvc/hierachy.jpg","post":"ciyswmg5l0012w4py50c3wdid","slug":"hierachy.jpg","modified":1},{"_id":"source/_posts/spring-mvc/servlet-interface.jpg","post":"ciyswmg5l0012w4py50c3wdid","slug":"servlet-interface.jpg","modified":1},{"_id":"source/_posts/spi/usage.jpg","post":"ciyswmg6a0019w4pyj6wgvcxp","slug":"usage.jpg","modified":1},{"_id":"source/_posts/property-placeholder/hierarchy.jpg","post":"ciyswmg74001rw4py2ie0bbtk","slug":"hierarchy.jpg","modified":1},{"_id":"source/_posts/property-placeholder/location.jpg","post":"ciyswmg74001rw4py2ie0bbtk","slug":"location.jpg","modified":1},{"_id":"source/_posts/property-placeholder/post-processors.jpg","post":"ciyswmg74001rw4py2ie0bbtk","slug":"post-processors.jpg","modified":1},{"_id":"source/_posts/postgre/arch.jpg","post":"ciyswmg7o001vw4pywknkuskq","slug":"arch.jpg","modified":1},{"_id":"source/_posts/postgre/history.jpg","post":"ciyswmg7o001vw4pywknkuskq","slug":"history.jpg","modified":1},{"_id":"source/_posts/pagination/PPC2009_mysql_pagination.pdf","post":"ciyswmg8n0028w4pyg8pplh9e","slug":"PPC2009_mysql_pagination.pdf","modified":1},{"_id":"source/_posts/markdown-mindmap/relations.png","post":"ciyswmg92002jw4pycz2ayhud","slug":"relations.png","modified":1},{"_id":"source/_posts/markdown-mindmap/sample.jpg","post":"ciyswmg92002jw4pycz2ayhud","slug":"sample.jpg","modified":1},{"_id":"source/_posts/markdown-here/additional.jpg","post":"ciyswmg9d002nw4py2y0gok66","slug":"additional.jpg","modified":1},{"_id":"source/_posts/markdown-here/mail.jpg","post":"ciyswmg9d002nw4py2y0gok66","slug":"mail.jpg","modified":1},{"_id":"source/_posts/jsonp/cors.png","post":"ciyswmg9z002xw4py7wid50dh","slug":"cors.png","modified":1},{"_id":"source/_posts/jsonp/sample.png","post":"ciyswmg9z002xw4py7wid50dh","slug":"sample.png","modified":1},{"_id":"source/_posts/jackson-guava/jar.png","post":"ciyswmgau003jw4py5h7pp408","slug":"jar.png","modified":1},{"_id":"source/_posts/idea-template/profiles.jpg","post":"ciyswmgb0003nw4pyke2uifaw","slug":"profiles.jpg","modified":1},{"_id":"source/_posts/grep/color.jpg","post":"ciyswmgbk0040w4pyse8hb9al","slug":"color.jpg","modified":1},{"_id":"source/_posts/grep/egrep.jpg","post":"ciyswmgbk0040w4pyse8hb9al","slug":"egrep.jpg","modified":1},{"_id":"source/_posts/character-encoding/Unicode_logo.jpg","post":"ciyswmgc0004cw4pyq5p7zasm","slug":"Unicode_logo.jpg","modified":1},{"_id":"source/_posts/character-encoding/emoji.jpg","post":"ciyswmgc0004cw4pyq5p7zasm","slug":"emoji.jpg","modified":1},{"_id":"source/_posts/character-encoding/unicode-layout.jpg","post":"ciyswmgc0004cw4pyq5p7zasm","slug":"unicode-layout.jpg","modified":1},{"_id":"source/_posts/base64/encoding.jpg","post":"ciyswmgcd004gw4pyqs9ds0as","slug":"encoding.jpg","modified":1},{"_id":"source/_posts/base64/encoding2.jpg","post":"ciyswmgcd004gw4pyqs9ds0as","slug":"encoding2.jpg","modified":1},{"_id":"source/_posts/HttpMessageConverter/DispatcherServlet-properties.jpg","post":"ciyswmgd7004pw4py4r4pr6s7","slug":"DispatcherServlet-properties.jpg","modified":1},{"_id":"source/_posts/HttpMessageConverter/arch.jpg","post":"ciyswmgd7004pw4py4r4pr6s7","slug":"arch.jpg","modified":1},{"_id":"source/_posts/HttpMessageConverter/http-message-converter.jpg","post":"ciyswmgd7004pw4py4r4pr6s7","slug":"http-message-converter.jpg","modified":1},{"_id":"source/_posts/HttpMessageConverter/inherit.jpg","post":"ciyswmgd7004pw4py4r4pr6s7","slug":"inherit.jpg","modified":1},{"_id":"source/_drafts/http/10-21-http-request.png","post":"ciyswmgfu0061w4pycfj6yjwu","slug":"10-21-http-request.png","modified":1},{"_id":"source/_drafts/http/http_request_message.png","post":"ciyswmgfu0061w4pycfj6yjwu","slug":"http_request_message.png","modified":1}],"PostCategory":[{"post_id":"ciyswmg480004w4py027at54q","category_id":"ciyswmg4c0005w4pygar1wvte","_id":"ciyswmg4h0008w4pyhk431mj6"},{"post_id":"ciyswmg4j0009w4py7a8c1szn","category_id":"ciyswmg4k000aw4py34f8rtr4","_id":"ciyswmg4m000dw4pyd7ez1r79"},{"post_id":"ciyswmg4p000ew4py3gzkqv8m","category_id":"ciyswmg4k000aw4py34f8rtr4","_id":"ciyswmg4r000fw4py81r27d04"},{"post_id":"ciyswmg4t000iw4pyq846ie4c","category_id":"ciyswmg4k000aw4py34f8rtr4","_id":"ciyswmg4v000jw4pymsnkwi7k"},{"post_id":"ciyswmg4y000mw4py6p5l1b7n","category_id":"ciyswmg4k000aw4py34f8rtr4","_id":"ciyswmg4z000nw4pyr3wvphec"},{"post_id":"ciyswmg53000qw4pym4b9agit","category_id":"ciyswmg4k000aw4py34f8rtr4","_id":"ciyswmg54000rw4py3o3ourjv"},{"post_id":"ciyswmg57000sw4py681b0uz9","category_id":"ciyswmg58000tw4pyvnend2ql","_id":"ciyswmg59000ww4pyvwloeewb"},{"post_id":"ciyswmg5b000xw4py0f53knqf","category_id":"ciyswmg5c000yw4pyu84w4zx9","_id":"ciyswmg5e0011w4py4w2nfa9d"},{"post_id":"ciyswmg5l0012w4py50c3wdid","category_id":"ciyswmg5c000yw4pyu84w4zx9","_id":"ciyswmg5m0013w4pyjq7rrfvk"},{"post_id":"ciyswmg670016w4pyk5urvk37","category_id":"ciyswmg5c000yw4pyu84w4zx9","_id":"ciyswmg680017w4pyahgcdo0c"},{"post_id":"ciyswmg6a0019w4pyj6wgvcxp","category_id":"ciyswmg4c0005w4pygar1wvte","_id":"ciyswmg6c001aw4pyownc9tf6"},{"post_id":"ciyswmg6l001dw4pyap47m4pt","category_id":"ciyswmg58000tw4pyvnend2ql","_id":"ciyswmg6m001ew4pyyc5de5ft"},{"post_id":"ciyswmg6r001hw4pyebld0yds","category_id":"ciyswmg6s001iw4py9e9ov683","_id":"ciyswmg6u001lw4pyh4pmnpx7"},{"post_id":"ciyswmg6w001mw4pywvuszy7j","category_id":"ciyswmg6x001nw4py7rm150nx","_id":"ciyswmg6z001qw4pyux074jg5"},{"post_id":"ciyswmg74001rw4py2ie0bbtk","category_id":"ciyswmg5c000yw4pyu84w4zx9","_id":"ciyswmg75001sw4pygl0ck8zj"},{"post_id":"ciyswmg7o001vw4pywknkuskq","category_id":"ciyswmg6s001iw4py9e9ov683","_id":"ciyswmg7q001ww4pyp6xbbtz6"},{"post_id":"ciyswmg87001zw4pyd4r44ru4","category_id":"ciyswmg890020w4pykzkle4bn","_id":"ciyswmg8b0023w4py7tcez8yb"},{"post_id":"ciyswmg8e0024w4pyp8lhh0b5","category_id":"ciyswmg6x001nw4py7rm150nx","_id":"ciyswmg8g0025w4pylwp0az8q"},{"post_id":"ciyswmg8n0028w4pyg8pplh9e","category_id":"ciyswmg6s001iw4py9e9ov683","_id":"ciyswmg8o0029w4pypiey3lfv"},{"post_id":"ciyswmg8v002cw4py8vb29qua","category_id":"ciyswmg58000tw4pyvnend2ql","_id":"ciyswmg8x002dw4pywelpprdz"},{"post_id":"ciyswmg8z002gw4pyktau5gym","category_id":"ciyswmg6s001iw4py9e9ov683","_id":"ciyswmg90002hw4py1eigormy"},{"post_id":"ciyswmg92002jw4pycz2ayhud","category_id":"ciyswmg890020w4pykzkle4bn","_id":"ciyswmg93002kw4pyk18m0ne6"},{"post_id":"ciyswmg9d002nw4py2y0gok66","category_id":"ciyswmg9f002ow4pyggqyihqa","_id":"ciyswmg9g002rw4pybz6ajzru"},{"post_id":"ciyswmg9t002sw4pyhjmvcudj","category_id":"ciyswmg9v002tw4pymc65osvl","_id":"ciyswmg9w002ww4pynlpi5zkl"},{"post_id":"ciyswmg9z002xw4py7wid50dh","category_id":"ciyswmga0002yw4pye5ig4jdk","_id":"ciyswmga10031w4pyg87yohy9"},{"post_id":"ciyswmgag0032w4pyquopoim4","category_id":"ciyswmgah0033w4pywm2ntlpd","_id":"ciyswmgai0036w4py0wey2o8z"},{"post_id":"ciyswmgaj0037w4pyzv7860ra","category_id":"ciyswmg4c0005w4pygar1wvte","_id":"ciyswmgak0038w4pyjmft0hqy"},{"post_id":"ciyswmgam003bw4py8lyb4dx9","category_id":"ciyswmg4c0005w4pygar1wvte","_id":"ciyswmgan003cw4pyv7di9rdk"},{"post_id":"ciyswmgar003fw4py7wofbmsk","category_id":"ciyswmg4c0005w4pygar1wvte","_id":"ciyswmgas003gw4py6vvpe4l0"},{"post_id":"ciyswmgau003jw4py5h7pp408","category_id":"ciyswmg5c000yw4pyu84w4zx9","_id":"ciyswmgav003kw4pyf1sfjl2w"},{"post_id":"ciyswmgb0003nw4pyke2uifaw","category_id":"ciyswmgah0033w4pywm2ntlpd","_id":"ciyswmgb2003ow4pytjbv4jqk"},{"post_id":"ciyswmgbd003rw4pyuqj5u8vh","category_id":"ciyswmg890020w4pykzkle4bn","_id":"ciyswmgbf003sw4pyo4mwp770"},{"post_id":"ciyswmgbg003vw4pyfkdayh76","category_id":"ciyswmgbh003ww4pyhwr2vao8","_id":"ciyswmgbi003zw4pybd592dlo"},{"post_id":"ciyswmgbk0040w4pyse8hb9al","category_id":"ciyswmg58000tw4pyvnend2ql","_id":"ciyswmgbn0041w4pyfyxqj663"},{"post_id":"ciyswmgbt0044w4pys1ml0r8j","category_id":"ciyswmg6x001nw4py7rm150nx","_id":"ciyswmgbu0045w4py1rioof1g"},{"post_id":"ciyswmgbw0048w4py9crwei2n","category_id":"ciyswmg5c000yw4pyu84w4zx9","_id":"ciyswmgby0049w4py4se8aojb"},{"post_id":"ciyswmgc0004cw4pyq5p7zasm","category_id":"ciyswmg6s001iw4py9e9ov683","_id":"ciyswmgc1004dw4pyfdg9ny4c"},{"post_id":"ciyswmgcd004gw4pyqs9ds0as","category_id":"ciyswmg6s001iw4py9e9ov683","_id":"ciyswmgce004hw4pyjj1z4xer"},{"post_id":"ciyswmgcx004jw4pyuy2g7fiy","category_id":"ciyswmg58000tw4pyvnend2ql","_id":"ciyswmgcy004kw4py06vjiskj"},{"post_id":"ciyswmgd2004mw4pytff2nixv","category_id":"ciyswmg5c000yw4pyu84w4zx9","_id":"ciyswmgd5004nw4pyw3ec3ses"},{"post_id":"ciyswmgd7004pw4py4r4pr6s7","category_id":"ciyswmg5c000yw4pyu84w4zx9","_id":"ciyswmgd8004qw4pywftjwm9x"},{"post_id":"ciyswmgdt004tw4pyu9okgphw","category_id":"ciyswmgdu004uw4py5phtuvkp","_id":"ciyswmgdv004xw4pyrqutb578"},{"post_id":"ciyswmge30050w4pyyzpne6ik","category_id":"ciyswmg4k000aw4py34f8rtr4","_id":"ciyswmge40051w4pydwdrd8io"},{"post_id":"ciyswmge70053w4py5zkx209v","category_id":"ciyswmg58000tw4pyvnend2ql","_id":"ciyswmge80054w4pybi32o2gz"},{"post_id":"ciyswmgec0056w4pyqyfinajv","category_id":"ciyswmg5c000yw4pyu84w4zx9","_id":"ciyswmgee0057w4pyy51lmvem"},{"post_id":"ciyswmgej005aw4py4jhvnpb2","category_id":"ciyswmgbh003ww4pyhwr2vao8","_id":"ciyswmgek005bw4py0hkphfex"},{"post_id":"ciyswmgf3005iw4py0ldvmf2i","category_id":"ciyswmg4c0005w4pygar1wvte","_id":"ciyswmgf4005jw4pyrfw1l7x3"},{"post_id":"ciyswmgf7005nw4pyvakguj3l","category_id":"ciyswmg4c0005w4pygar1wvte","_id":"ciyswmgf8005ow4pywqo4p0xi"},{"post_id":"ciyswmgfh005uw4pyvft3yx5b","category_id":"ciyswmgfi005vw4pymy1o4w5e","_id":"ciyswmgfj005xw4pygrz0kbh0"},{"post_id":"ciyswmgfu0061w4pycfj6yjwu","category_id":"ciyswmgfv0062w4pyftmvz9f5","_id":"ciyswmgfx0065w4pyiyvui4tq"},{"post_id":"ciyswmgg60066w4py9u56wy9g","category_id":"ciyswmgg70067w4py6jalkxqv","_id":"ciyswmgg7006aw4pyz3vzdqmx"},{"post_id":"ciyswmgg9006bw4pygvn1lcxy","category_id":"ciyswmg5c000yw4pyu84w4zx9","_id":"ciyswmgga006cw4pygo7p7hhf"},{"post_id":"ciyswmgge006gw4py6xi24sfi","category_id":"ciyswmg4c0005w4pygar1wvte","_id":"ciyswmggf006hw4pysens3wql"},{"post_id":"ciyswmggg006jw4pyseaiceh9","category_id":"ciyswmggh006kw4pyid80vefq","_id":"ciyswmggi006nw4pypxfjzlzw"},{"post_id":"ciyswmggj006ow4py52n6yunz","category_id":"ciyswmg5c000yw4pyu84w4zx9","_id":"ciyswmggk006pw4pyrrkta09w"},{"post_id":"ciyswmggm006sw4pyh7hf8cba","category_id":"ciyswmg4c0005w4pygar1wvte","_id":"ciyswmggn006tw4py1j6gmxye"}],"PostTag":[{"post_id":"ciyswmg480004w4py027at54q","tag_id":"ciyswmg4d0006w4pye3lrxely","_id":"ciyswmg4g0007w4pyqgmbv70o"},{"post_id":"ciyswmg4j0009w4py7a8c1szn","tag_id":"ciyswmg4l000bw4pyaqjxwk6i","_id":"ciyswmg4l000cw4pyb0eyy544"},{"post_id":"ciyswmg4p000ew4py3gzkqv8m","tag_id":"ciyswmg4r000gw4pym5niuwyp","_id":"ciyswmg4s000hw4pyp1wzq3y8"},{"post_id":"ciyswmg4t000iw4pyq846ie4c","tag_id":"ciyswmg4v000kw4py5tcfmjch","_id":"ciyswmg4w000lw4pyi30lzmup"},{"post_id":"ciyswmg4y000mw4py6p5l1b7n","tag_id":"ciyswmg4z000ow4pyu4kgnkns","_id":"ciyswmg4z000pw4pyk1nrpmrr"},{"post_id":"ciyswmg57000sw4py681b0uz9","tag_id":"ciyswmg59000uw4py3oniawbx","_id":"ciyswmg59000vw4py1xref0ty"},{"post_id":"ciyswmg5b000xw4py0f53knqf","tag_id":"ciyswmg5c000zw4py8hxg2yjf","_id":"ciyswmg5d0010w4py44m08s80"},{"post_id":"ciyswmg5l0012w4py50c3wdid","tag_id":"ciyswmg5n0014w4pyakqhqq0w","_id":"ciyswmg5o0015w4pynau42mzs"},{"post_id":"ciyswmg670016w4pyk5urvk37","tag_id":"ciyswmg5n0014w4pyakqhqq0w","_id":"ciyswmg690018w4pyoulhiwy4"},{"post_id":"ciyswmg6a0019w4pyj6wgvcxp","tag_id":"ciyswmg6c001bw4pysczbrfrd","_id":"ciyswmg6d001cw4pypiwy0u7r"},{"post_id":"ciyswmg6l001dw4pyap47m4pt","tag_id":"ciyswmg6n001fw4pyiw6epzh9","_id":"ciyswmg6o001gw4pyi6qkqkgo"},{"post_id":"ciyswmg6r001hw4pyebld0yds","tag_id":"ciyswmg6t001jw4pycp35zrnx","_id":"ciyswmg6t001kw4pyzxihlwx2"},{"post_id":"ciyswmg6w001mw4pywvuszy7j","tag_id":"ciyswmg6y001ow4py8ruz6uzd","_id":"ciyswmg6y001pw4pyznim6g5t"},{"post_id":"ciyswmg74001rw4py2ie0bbtk","tag_id":"ciyswmg76001tw4pyq5p6wgy6","_id":"ciyswmg77001uw4pykvfx3rmq"},{"post_id":"ciyswmg7o001vw4pywknkuskq","tag_id":"ciyswmg7q001xw4py6utvt9es","_id":"ciyswmg7s001yw4pyxgwgrilb"},{"post_id":"ciyswmg87001zw4pyd4r44ru4","tag_id":"ciyswmg890021w4pyqolfv6bo","_id":"ciyswmg8b0022w4pyuz1jnh1b"},{"post_id":"ciyswmg8e0024w4pyp8lhh0b5","tag_id":"ciyswmg8h0026w4pymv52ie4q","_id":"ciyswmg8j0027w4pylvdcvs2g"},{"post_id":"ciyswmg8n0028w4pyg8pplh9e","tag_id":"ciyswmg8p002aw4pytucu93di","_id":"ciyswmg8q002bw4pyhx4cwhqd"},{"post_id":"ciyswmg8v002cw4py8vb29qua","tag_id":"ciyswmg8x002ew4py33h20x5r","_id":"ciyswmg8y002fw4py48z111nc"},{"post_id":"ciyswmg8z002gw4pyktau5gym","tag_id":"ciyswmg8p002aw4pytucu93di","_id":"ciyswmg90002iw4pyfthuz8ms"},{"post_id":"ciyswmg92002jw4pycz2ayhud","tag_id":"ciyswmg93002lw4pyc8vffuoa","_id":"ciyswmg93002mw4py453r7xo9"},{"post_id":"ciyswmg9d002nw4py2y0gok66","tag_id":"ciyswmg9f002pw4pymo4u6dqq","_id":"ciyswmg9g002qw4py71agqfdg"},{"post_id":"ciyswmg9t002sw4pyhjmvcudj","tag_id":"ciyswmg9v002uw4pynmykpdaf","_id":"ciyswmg9w002vw4pyv0ahxu75"},{"post_id":"ciyswmg9z002xw4py7wid50dh","tag_id":"ciyswmga0002zw4pyua542sds","_id":"ciyswmga10030w4pypx7kqry8"},{"post_id":"ciyswmgag0032w4pyquopoim4","tag_id":"ciyswmgah0034w4py8yahshbb","_id":"ciyswmgai0035w4pya497ktxg"},{"post_id":"ciyswmgaj0037w4pyzv7860ra","tag_id":"ciyswmgak0039w4pyxfywm3tg","_id":"ciyswmgal003aw4pyh044u05i"},{"post_id":"ciyswmgam003bw4py8lyb4dx9","tag_id":"ciyswmgan003dw4pyhyntd793","_id":"ciyswmgap003ew4pyq2ji3rnk"},{"post_id":"ciyswmgar003fw4py7wofbmsk","tag_id":"ciyswmgas003hw4pyhgmnhsmg","_id":"ciyswmgat003iw4pyijoovjsd"},{"post_id":"ciyswmgau003jw4py5h7pp408","tag_id":"ciyswmgav003lw4py3l7hhd1y","_id":"ciyswmgaw003mw4pym8ndr3o6"},{"post_id":"ciyswmgb0003nw4pyke2uifaw","tag_id":"ciyswmgb2003pw4pywsffzcku","_id":"ciyswmgb3003qw4py8kn206jd"},{"post_id":"ciyswmgbd003rw4pyuqj5u8vh","tag_id":"ciyswmgbf003tw4pyur4ga96h","_id":"ciyswmgbg003uw4py3lgnzjsp"},{"post_id":"ciyswmgbg003vw4pyfkdayh76","tag_id":"ciyswmgbi003xw4pybh7gscci","_id":"ciyswmgbi003yw4pyyyl7p3jq"},{"post_id":"ciyswmgbk0040w4pyse8hb9al","tag_id":"ciyswmgbn0042w4pyo3e1a6ty","_id":"ciyswmgbo0043w4pyb60jwru6"},{"post_id":"ciyswmgbt0044w4pys1ml0r8j","tag_id":"ciyswmgbv0046w4py6yjjmpia","_id":"ciyswmgbv0047w4py2lhona55"},{"post_id":"ciyswmgbw0048w4py9crwei2n","tag_id":"ciyswmgby004aw4pynzvc8ws4","_id":"ciyswmgbz004bw4pyu7yquj63"},{"post_id":"ciyswmgc0004cw4pyq5p7zasm","tag_id":"ciyswmgc1004ew4pysqad0u1v","_id":"ciyswmgc1004fw4py4cg0g5n1"},{"post_id":"ciyswmgcd004gw4pyqs9ds0as","tag_id":"ciyswmgc1004ew4pysqad0u1v","_id":"ciyswmgcf004iw4py7q3ozrkx"},{"post_id":"ciyswmgcx004jw4pyuy2g7fiy","tag_id":"ciyswmgbn0042w4pyo3e1a6ty","_id":"ciyswmgcz004lw4py9oiqify1"},{"post_id":"ciyswmgd2004mw4pytff2nixv","tag_id":"ciyswmgan003dw4pyhyntd793","_id":"ciyswmgd6004ow4pyztsqn4ql"},{"post_id":"ciyswmgd7004pw4py4r4pr6s7","tag_id":"ciyswmgd8004rw4pymtohbfq4","_id":"ciyswmgd9004sw4py375v35mw"},{"post_id":"ciyswmgdt004tw4pyu9okgphw","tag_id":"ciyswmgdv004vw4pyb8hrghi4","_id":"ciyswmgdv004ww4pyv6odqfym"},{"post_id":"ciyswmge70053w4py5zkx209v","tag_id":"ciyswmg59000uw4py3oniawbx","_id":"ciyswmge80055w4pyal02kgbm"},{"post_id":"ciyswmgec0056w4pyqyfinajv","tag_id":"ciyswmg4l000bw4pyaqjxwk6i","_id":"ciyswmgee0058w4py9ioldu09"},{"post_id":"ciyswmgej005aw4py4jhvnpb2","tag_id":"ciyswmgek005cw4pylvz0ejlb","_id":"ciyswmgek005dw4py4ycf3ul8"},{"post_id":"ciyswmgf3005iw4py0ldvmf2i","tag_id":"ciyswmgf4005kw4pynx1zzigm","_id":"ciyswmgf4005lw4py5krk8yb9"},{"post_id":"ciyswmgf7005nw4pyvakguj3l","tag_id":"ciyswmgf8005pw4pyzeip51oz","_id":"ciyswmgf8005qw4pyre6vsoj7"},{"post_id":"ciyswmgfh005uw4pyvft3yx5b","tag_id":"ciyswmgav003lw4py3l7hhd1y","_id":"ciyswmgfj005ww4pymsq8weq1"},{"post_id":"ciyswmgfu0061w4pycfj6yjwu","tag_id":"ciyswmgfw0063w4py38k5swob","_id":"ciyswmgfw0064w4pyq6osq27j"},{"post_id":"ciyswmgg60066w4py9u56wy9g","tag_id":"ciyswmgg70068w4py3f5hb21p","_id":"ciyswmgg70069w4pyk66wm8tk"},{"post_id":"ciyswmgg9006bw4pygvn1lcxy","tag_id":"ciyswmggb006dw4py4ryxgrhl","_id":"ciyswmggb006ew4pyr0livqj7"},{"post_id":"ciyswmgge006gw4py6xi24sfi","tag_id":"ciyswmg4d0006w4pye3lrxely","_id":"ciyswmggf006iw4pyxx8wte21"},{"post_id":"ciyswmggg006jw4pyseaiceh9","tag_id":"ciyswmggh006lw4pyleb2k20o","_id":"ciyswmggi006mw4pynb4evgns"},{"post_id":"ciyswmggj006ow4py52n6yunz","tag_id":"ciyswmggl006qw4py9w930k3r","_id":"ciyswmggl006rw4pyld48tbii"},{"post_id":"ciyswmggm006sw4pyh7hf8cba","tag_id":"ciyswmggn006uw4pyi6pzfts4","_id":"ciyswmggo006vw4pys35rcmc7"}],"Tag":[{"name":"xml","_id":"ciyswmg4d0006w4pye3lrxely"},{"name":"servlet","_id":"ciyswmg4l000bw4pyaqjxwk6i"},{"name":"string-manager","_id":"ciyswmg4r000gw4pym5niuwyp"},{"name":"encoding","_id":"ciyswmg4v000kw4py5tcfmjch"},{"name":"access-log","_id":"ciyswmg4z000ow4pyu4kgnkns"},{"name":"ssh","_id":"ciyswmg59000uw4py3oniawbx"},{"name":"resource","_id":"ciyswmg5c000zw4py8hxg2yjf"},{"name":"spring mvc","_id":"ciyswmg5n0014w4pyakqhqq0w"},{"name":"spi","_id":"ciyswmg6c001bw4pysczbrfrd"},{"name":"shadowsocks","_id":"ciyswmg6n001fw4pyiw6epzh9"},{"name":"re","_id":"ciyswmg6t001jw4pycp35zrnx"},{"name":"python-util","_id":"ciyswmg6y001ow4py8ruz6uzd"},{"name":"placeholder","_id":"ciyswmg76001tw4pyq5p6wgy6"},{"name":"postgresql","_id":"ciyswmg7q001xw4py6utvt9es"},{"name":"uml","_id":"ciyswmg890021w4pyqolfv6bo"},{"name":"pip","_id":"ciyswmg8h0026w4pymv52ie4q"},{"name":"mysql","_id":"ciyswmg8p002aw4pytucu93di"},{"name":"netcat","_id":"ciyswmg8x002ew4py33h20x5r"},{"name":"mindmap","_id":"ciyswmg93002lw4pyc8vffuoa"},{"name":"markdown-here","_id":"ciyswmg9f002pw4pymo4u6dqq"},{"name":"机器学习","_id":"ciyswmg9v002uw4pynmykpdaf"},{"name":"ajax","_id":"ciyswmga0002zw4pyua542sds"},{"name":"Javadoc","_id":"ciyswmgah0034w4py8yahshbb"},{"name":"访问权限","_id":"ciyswmgak0039w4pyxfywm3tg"},{"name":"exception","_id":"ciyswmgan003dw4pyhyntd793"},{"name":"jar","_id":"ciyswmgas003hw4pyhgmnhsmg"},{"name":"jackson","_id":"ciyswmgav003lw4py3l7hhd1y"},{"name":"template","_id":"ciyswmgb2003pw4pywsffzcku"},{"name":"hexo install","_id":"ciyswmgbf003tw4pyur4ga96h"},{"name":"event-bus","_id":"ciyswmgbi003xw4pybh7gscci"},{"name":"shell","_id":"ciyswmgbn0042w4pyo3e1a6ty"},{"name":"fabric","_id":"ciyswmgbv0046w4py6yjjmpia"},{"name":"自定义标签","_id":"ciyswmgby004aw4pynzvc8ws4"},{"name":"编码","_id":"ciyswmgc1004ew4pysqad0u1v"},{"name":"messageConverter","_id":"ciyswmgd8004rw4pymtohbfq4"},{"name":"剪贴板","_id":"ciyswmgdv004vw4pyb8hrghi4"},{"name":"rate-limiter","_id":"ciyswmgek005cw4pylvz0ejlb"},{"name":"logback","_id":"ciyswmgf4005kw4pynx1zzigm"},{"name":"proxy","_id":"ciyswmgf8005pw4pyzeip51oz"},{"name":"http","_id":"ciyswmgfw0063w4py38k5swob"},{"name":"beginner","_id":"ciyswmgg70068w4py3f5hb21p"},{"name":"beanfactory","_id":"ciyswmggb006dw4py4ryxgrhl"},{"name":"test","_id":"ciyswmggh006lw4pyleb2k20o"},{"name":"PropertyEditor","_id":"ciyswmggl006qw4py9w930k3r"},{"name":"classloader","_id":"ciyswmggn006uw4pyi6pzfts4"}]}}