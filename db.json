{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/jacman/source/js/totop.js","path":"js/totop.js","modified":0},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","path":"js/jquery.qrcode-0.12.0.min.js","modified":0},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":0},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":0},{"_id":"themes/jacman/source/js/gallery.js","path":"js/gallery.js","modified":0},{"_id":"themes/jacman/source/img/scrollup.png","path":"img/scrollup.png","modified":0},{"_id":"themes/jacman/source/img/logo.svg","path":"img/logo.svg","modified":0},{"_id":"themes/jacman/source/img/logo.png","path":"img/logo.png","modified":0},{"_id":"themes/jacman/source/img/jacman.jpg","path":"img/jacman.jpg","modified":0},{"_id":"themes/jacman/source/img/favicon.ico2","path":"img/favicon.ico2","modified":0},{"_id":"themes/jacman/source/img/favicon.ico","path":"img/favicon.ico","modified":0},{"_id":"themes/jacman/source/img/cc-zero.svg","path":"img/cc-zero.svg","modified":0},{"_id":"themes/jacman/source/img/cc-by.svg","path":"img/cc-by.svg","modified":0},{"_id":"themes/jacman/source/img/cc-by-sa.svg","path":"img/cc-by-sa.svg","modified":0},{"_id":"themes/jacman/source/img/cc-by-nd.svg","path":"img/cc-by-nd.svg","modified":0},{"_id":"themes/jacman/source/img/cc-by-nc.svg","path":"img/cc-by-nc.svg","modified":0},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","path":"img/cc-by-nc-sa.svg","modified":0},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","path":"img/cc-by-nc-nd.svg","modified":0},{"_id":"themes/jacman/source/img/banner.jpg","path":"img/banner.jpg","modified":0},{"_id":"themes/jacman/source/font/fontdiao.woff","path":"font/fontdiao.woff","modified":0},{"_id":"themes/jacman/source/font/fontdiao.ttf","path":"font/fontdiao.ttf","modified":0},{"_id":"themes/jacman/source/font/fontdiao.svg","path":"font/fontdiao.svg","modified":0},{"_id":"themes/jacman/source/font/fontdiao.eot","path":"font/fontdiao.eot","modified":0},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":0},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":0},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":0},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":0},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":0},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":0},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":0},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":0},{"_id":"themes/jacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":0},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0},{"_id":"themes/jacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0},{"_id":"themes/jacman/source/css/style.styl","path":"css/style.styl","modified":0}],"Cache":[{"_id":"source/_drafts/HandlerAdapter.md","shasum":"c3fdc4b8f50263dba48c8686c638271d3c20f954","modified":1480788017823},{"_id":"source/_drafts/HandlerMapping.md","shasum":"6aa5ab818a8affd0a866ea0cf1218346228d5b2c","modified":1480788005452},{"_id":"source/_drafts/classloader.md","shasum":"394e0767574d342b94d96f3f51cf25cebca08d70","modified":1479648164615},{"_id":"source/_drafts/HandlerMethodArgumentResolver.md","shasum":"a576f379678db314b4b56e3f97241c60ffed852a","modified":1481041749225},{"_id":"source/_drafts/burpsuite-https.md","shasum":"9ec00889f4ce52e78046e810cdbbdc35fa447beb","modified":1478710083356},{"_id":"source/_drafts/custom-editor.md","shasum":"16ce4c862aee5d9f22f9c0ba2e71485db313f6fc","modified":1482108260746},{"_id":"source/_drafts/idea-plugins.md","shasum":"7e2d2ce33d0c78e07993dcd3270855330f057581","modified":1482426002552},{"_id":"source/_drafts/impress-js.md","shasum":"d54a38c8256aeece3d8b5e982aff666370b89861","modified":1481732166119},{"_id":"source/_drafts/inode.md","shasum":"baeae4b7a15e1218dd572cf0e16bc7711b99ec12","modified":1481732308334},{"_id":"source/_drafts/factorybean.md","shasum":"ae7e2d6e0d4951705d1b0a2a84d80a2a22a195de","modified":1482108263150},{"_id":"source/_drafts/jackson-custom.md","shasum":"a9fcf275c7e40df8b356d7572c283385716ec1df","modified":1481479115317},{"_id":"source/_drafts/java-URL.md","shasum":"5ff044897643fddea3ac8dc95d33698bd1c23209","modified":1479629701541},{"_id":"source/_drafts/idea-template.md","shasum":"081fc1eb9a381f6363f28495fe03d71648901a48","modified":1482426846099},{"_id":"source/_drafts/kibana.md","shasum":"124b6b94441732918363f18727abd141b85d4441","modified":1479225274986},{"_id":"source/_drafts/logback.md","shasum":"5949f97a9206275b5968db6fc68d74e2ac4dc6d8","modified":1480437826480},{"_id":"source/_drafts/java-introspector.md","shasum":"fd4df0385f17517210fb242651aec301cbb611c3","modified":1481163171271},{"_id":"source/_drafts/protobuf.md","shasum":"a046502a7280d36337ee98b61b2fbe03ad8f025e","modified":1480435662646},{"_id":"source/_drafts/ServletInvocableHandlerMethod.md","shasum":"e683d17f6316c174889a2770743df19101381744","modified":1480617540710},{"_id":"source/_drafts/python-json.md","shasum":"50ccf2309be4f4d326587baf57492e7bfca28ffb","modified":1481255172567},{"_id":"source/_drafts/spring-exception-handle.md","shasum":"c990dcc8878c53b5434928225790b03c8597ab62","modified":1482427154407},{"_id":"source/_drafts/logback/colored.jpg","shasum":"30c5aacc297c729704fd2118947d293ae3a4267e","modified":1480437195047},{"_id":"source/_drafts/vim.md","shasum":"351040eff3d41269c34df6d9b3c0a4307d6e5d2a","modified":1481558574829},{"_id":"source/_drafts/ssh.md","shasum":"80d9916d83e55b085945b7296dbfe4bac04e516c","modified":1482031664572},{"_id":"source/_posts/HttpMessageConverter/inherit.jpg","shasum":"1776d8f3e17b516ecc36fb3c55a398e6348760d7","modified":1480358925426},{"_id":"source/_posts/HttpMessageConverter.md","shasum":"5f1ae3e1255ff9fb3de466d1d3c96c7b636a4cc8","modified":1482037753824},{"_id":"source/_posts/atnode.md","shasum":"243e23d585ca38ff678df8235732813ff63a7429","modified":1482037803774},{"_id":"source/_posts/base64/encoding.jpg","shasum":"5ed8de255bfe78f23b7cc920171655a4487a509b","modified":1474874531606},{"_id":"source/_posts/base64/encoding2.jpg","shasum":"da197012f219ae5c3cacf049e0d15e9c9693c981","modified":1474874848223},{"_id":"source/_posts/base64.md","shasum":"1f99a013d14d27d877137e8de08023028a8e5e08","modified":1482037836122},{"_id":"source/_posts/character-encoding/Unicode_logo.jpg","shasum":"8ca31a7bd95ffb6a1aa6456c1b0970e1a5458fd7","modified":1474991148859},{"_id":"source/_posts/character-encoding/emoji.jpg","shasum":"e4e05e46031c997ddd9b3d53a385c6d653963cd6","modified":1475050573543},{"_id":"source/_posts/character-encoding/unicode-layout.jpg","shasum":"59c7ccbffd30aeb97f811b67a9f94a0f5c1bb5e0","modified":1474992935333},{"_id":"source/_posts/character-encoding.md","shasum":"55e3047cc3fab1c76ec83f427b1acb8f2f00b2ce","modified":1482038502639},{"_id":"source/_posts/custom-tag.md","shasum":"2a8ae8b070f43e0c3164277dcd09846fc2c3d6e3","modified":1482037783901},{"_id":"source/_posts/fabric.md","shasum":"a120eddbd7e66ec08d67e048ad5da2d86848743b","modified":1446647142000},{"_id":"source/_posts/grep/color.jpg","shasum":"9b1ae87a35402005befa583795e231ccc49dca29","modified":1481040774761},{"_id":"source/_posts/grep/egrep.jpg","shasum":"d13cb7333887eb76541f6ffb9a294c1d9404942e","modified":1481040774774},{"_id":"source/_posts/grep.md","shasum":"7b865d9370c7df57d4c59d599b55c5257b3ee709","modified":1481040774740},{"_id":"source/_posts/hello-world.md","shasum":"0d66f40c0ea561ab8eafa811a8346fe14f19a45c","modified":1482037727643},{"_id":"source/_posts/idea-template.md","shasum":"975d1fa3daf6c432981d8bcfcf3bf8a171876a32","modified":1482426659477},{"_id":"source/_posts/idea-template/profiles.jpg","shasum":"cc82791405ece2982b41af9f5eebd9ebf2009708","modified":1482426659488},{"_id":"source/_posts/jackson-guava.md","shasum":"0f5a0c53e23b9b6971d03c69d56f3c112676fe45","modified":1479226221665},{"_id":"source/_posts/javadoc.md","shasum":"ec6b3ac0072a7a24193a69d0a7eae5048d2c5e9c","modified":1475597624837},{"_id":"source/_posts/java-permission-control.md","shasum":"260951327f95058c3895384c65fbc618a2899dd5","modified":1446613387000},{"_id":"source/_posts/java-exception.md","shasum":"3f3a9bc30c88808ae6d3c2653b886bfe9618a24f","modified":1474818354130},{"_id":"source/_posts/jsonp/cors.png","shasum":"03174e532d5fab79c1d9fd0a00139d4978443df0","modified":1475379733169},{"_id":"source/_posts/jsonp.md","shasum":"c4e477ceedd9626323c3a676913489de898c1c54","modified":1475379733143},{"_id":"source/_posts/jsonp/sample.png","shasum":"5c66eed23ecf164fca1d7f1f71eb2bd33d85c770","modified":1475379733170},{"_id":"source/_posts/machine_learning.md","shasum":"73c937bdfec387c8f6ec4189e121b5037054413d","modified":1474645724835},{"_id":"source/_posts/mysql-time.md","shasum":"352aa231b8510ece1001affea4d4ebf7e580b07b","modified":1482037881266},{"_id":"source/_posts/nc.md","shasum":"336bef6018102642e5403ba1ac8d0abb826e784a","modified":1482037916048},{"_id":"source/_posts/pagination.md","shasum":"40b6160380b63454d80887cd7aa8fd3a6254fb07","modified":1475167908544},{"_id":"source/_posts/plantuml.md","shasum":"9c7951b86afc47294a2b8a1cfbe4d4eea009a6c7","modified":1482037948189},{"_id":"source/_posts/postgre.md","shasum":"f67f0aa7bf2ec039baa7ca6d9a7af2a1245e189f","modified":1482037617023},{"_id":"source/_posts/postgre/history.jpg","shasum":"b40a177bc06fe594dbbf51ead88b1949d11ae5da","modified":1474959657307},{"_id":"source/_posts/property-placeholder/hierarchy.jpg","shasum":"df248929441da0b2bdbe7afbf56d4729ae8f524d","modified":1477844543984},{"_id":"source/_posts/property-placeholder/location.jpg","shasum":"cf8a3be6950b18df2310584921d7058f45b4ffcf","modified":1477844543987},{"_id":"source/_posts/python-util.md","shasum":"eb07d36b5dd4d1651674af2c6faec9630fa90a1a","modified":1482425805844},{"_id":"source/_posts/property-placeholder.md","shasum":"e979f329b6e94f5133e807d9e683e208cbe97043","modified":1482038006901},{"_id":"source/_posts/re.md","shasum":"5bea006fe656815384aeeaa4afac7a0804387bff","modified":1481730492927},{"_id":"source/_posts/spring-mockMvc.md","shasum":"8ffaab3d30feaac8a09d72d132130ba12de47e15","modified":1482037683726},{"_id":"source/_posts/shadowsocks.md","shasum":"a2e77d33e4aa9abc59b0173b4ed84b2b2f0e6976","modified":1444437036000},{"_id":"source/_posts/spi.md","shasum":"2564e92f67308f864946dace7c7a441f8e24012a","modified":1482037624767},{"_id":"source/_posts/spring-mvc/Servlet_LifeCycle.jpg","shasum":"ec5a5ed7867fd6fd38c21edd4bd4336a39446614","modified":1475417665207},{"_id":"source/_posts/spring-mvc/hierachy.jpg","shasum":"d2791a173d265df7a59e2a1a83f86bbb93a949b4","modified":1475417665210},{"_id":"source/_posts/spring-mvc/servlet-interface.jpg","shasum":"362e1f8d17678f77285a987de921dc70a2647454","modified":1475417665215},{"_id":"source/_posts/spring-mvc.md","shasum":"7b69fde7ee4838fb7a034efe8393998bc514654f","modified":1482037665301},{"_id":"source/_posts/tomcat-access-log.html","shasum":"192a1c5856910712a03dd6ee6d791347aa9707d1","modified":1482459183539},{"_id":"source/_posts/tomcat-access-log.md","shasum":"1558859058482bcb02b8ac511628acd5601f4aba","modified":1482459897656},{"_id":"source/_posts/spring-resource/resource.jpg","shasum":"f45bcaa3dd495300355ff09830a1500c36c71870","modified":1479643934397},{"_id":"source/_posts/ssh-passwd-free.md","shasum":"097e138310f0a6dd0852a018e5f23fb3b2039de4","modified":1482037696377},{"_id":"source/_posts/spring-resource.md","shasum":"dcc1274e6ecae66c73c4fc5ef0abb57826b6a52a","modified":1482037649230},{"_id":"source/tags/index.md","shasum":"279e590647b1cce4055de9e16aca93fcb3d7662b","modified":1474646861453},{"_id":"source/_posts/tomcat-encoding.md","shasum":"0b6bbfdc54a7c000432ab52a603920350563d709","modified":1482425250453},{"_id":"source/_posts/HttpMessageConverter/DispatcherServlet-properties.jpg","shasum":"2dd94eb25a05e8dd5a8bc0f8fc2eb05ebd73f89c","modified":1480358925393},{"_id":"source/_posts/HttpMessageConverter/arch.jpg","shasum":"57bcfe2eac52149a1964cc576ba50409d4861c2c","modified":1480358925403},{"_id":"source/_posts/HttpMessageConverter/http-message-converter.jpg","shasum":"fb06cf8a039b6d402ddb4cba11abb408caaa58fd","modified":1480358925414},{"_id":"source/_posts/postgre/arch.jpg","shasum":"53839b9675327b7b18c652c1bf568b903017145e","modified":1474961332959},{"_id":"source/_posts/property-placeholder/post-processors.jpg","shasum":"db5b21a4d6ace84afb24d14b158833558a5ad809","modified":1477844543990},{"_id":"source/_posts/spi/usage.jpg","shasum":"ccda980477add78ccf794d40482fbf65cd880de1","modified":1481981972203},{"_id":"source/_posts/spring-mvc/arch.jpg","shasum":"57bcfe2eac52149a1964cc576ba50409d4861c2c","modified":1475417665212},{"_id":"source/_posts/jackson-guava/jar.png","shasum":"0067332eb536099b9f5efc79e466e3302867d714","modified":1479226221677},{"_id":"source/_posts/pagination/PPC2009_mysql_pagination.pdf","shasum":"606f57614083e01b5dc97653b2b699a91e92ee31","modified":1475145748829},{"_id":"themes/jacman/LICENSE","shasum":"931516aa36c53eb7843c83d82662eb50cc3c4367","modified":1474967198204},{"_id":"themes/jacman/README_zh.md","shasum":"d6014b16eaccc97dc54a7779c9e36003752410e1","modified":1474967198205},{"_id":"themes/jacman/README.md","shasum":"75a5c9fbd7c9cec4d2f277042d2fee550e4936be","modified":1474967198204},{"_id":"themes/jacman/_config.yml","shasum":"3424390779680599dc49d94d27d282288ebf2ec1","modified":1482422509403},{"_id":"themes/jacman/languages/default.yml","shasum":"eea72d6138497287c0b3f4bd93e4f6f62b7aff37","modified":1474967198206},{"_id":"themes/jacman/languages/zh-CN.yml","shasum":"1f3b9d00dd4322352b0c9c82a76dc9865a616d41","modified":1482422528768},{"_id":"themes/jacman/languages/zh-TW.yml","shasum":"61a02ba818d641579a86fcd7f5926ab1e6ab5f70","modified":1474967198207},{"_id":"themes/jacman/layout/_partial/analytics.ejs","shasum":"697601996220fe0a0f9cd628be67dec3c86ae2aa","modified":1474967198208},{"_id":"themes/jacman/layout/_partial/categories.ejs","shasum":"8a52d0344d5bce1925cf586ed73c11192925209b","modified":1474967198210},{"_id":"themes/jacman/layout/_partial/after_footer.ejs","shasum":"c703b0c25139b8a5f8f9d24a334a07905e2b7987","modified":1474967198208},{"_id":"themes/jacman/layout/_partial/article_row.ejs","shasum":"4cb855d91ece7f67b2ca0992fffa55472d0b9c93","modified":1474967198209},{"_id":"themes/jacman/layout/_partial/archive.ejs","shasum":"2c7395e7563fe016521712a645c28a13f952d52a","modified":1474967198209},{"_id":"themes/jacman/layout/_partial/article.ejs","shasum":"261ecacb8456f4cb972632b6a9103860fa63b9a3","modified":1474967198209},{"_id":"themes/jacman/layout/_partial/head.ejs","shasum":"761941be4922cd3c177c8130296b909bf7db5c09","modified":1475411707728},{"_id":"themes/jacman/layout/_partial/footer.ejs","shasum":"08e2d82e719f6a41163cca9f29a052c830429109","modified":1474973930117},{"_id":"themes/jacman/layout/_partial/header.ejs","shasum":"18515612344ff048b9372b91b7eef6f3b143801f","modified":1474967198211},{"_id":"themes/jacman/layout/_partial/mathjax.ejs","shasum":"d42994ac696f52ba99c1cbac382cd76d5b04a3e8","modified":1474967198212},{"_id":"themes/jacman/layout/_partial/post/comment.ejs","shasum":"c88bc8f5805173920a5fdd7e9234a850e3d8e151","modified":1474967198215},{"_id":"themes/jacman/layout/_partial/post/catetags.ejs","shasum":"0e37bababc8f4659f5b59a552a946b46d89e4158","modified":1474967198215},{"_id":"themes/jacman/layout/_partial/post/gallery.ejs","shasum":"fafc2501d7e65983b0f5c2b58151ca12e57c0574","modified":1474967198216},{"_id":"themes/jacman/layout/_partial/post/article.ejs","shasum":"b09e3acea7076e1f01dfe0c2295e19951ea09437","modified":1474967198214},{"_id":"themes/jacman/layout/_partial/post/footer.ejs","shasum":"b12ec08a5845a3d8c01257614f1dfead879c87d2","modified":1474967198215},{"_id":"themes/jacman/layout/_partial/post/header.ejs","shasum":"4eb877212bca6f8c997fb2009011ce16839ff44e","modified":1475174354604},{"_id":"themes/jacman/layout/_partial/post/jiathis.ejs","shasum":"d7f5960039ac74924559ab6ba03c64457b8f0966","modified":1474967198216},{"_id":"themes/jacman/layout/_partial/sidebar.ejs","shasum":"c4f527fff0070fbe65919053a16224412317f40d","modified":1474967198217},{"_id":"themes/jacman/layout/_partial/tags.ejs","shasum":"b33b2b5d08f1d53a8de25a95f660f7f1cea7b3cb","modified":1474967198217},{"_id":"themes/jacman/layout/_partial/post/pagination.ejs","shasum":"7de9c07a4c968429a8088c31a28b7f3a993ded1b","modified":1474967198217},{"_id":"themes/jacman/layout/_partial/tinysou_search.ejs","shasum":"06ecddc8a9d40b480fe2e958af1dab857a9d5441","modified":1474967198218},{"_id":"themes/jacman/layout/_partial/totop.ejs","shasum":"bea5bb7cb9350b8af7d97a8d223af63a5b30ab78","modified":1474967198218},{"_id":"themes/jacman/layout/_widget/archive.ejs","shasum":"39ea6b7888406fbd1b4cf236ebd718e881493374","modified":1474967198218},{"_id":"themes/jacman/layout/_partial/search.ejs","shasum":"1083824a6c6c3df02767f2f3b727aee78ebb76ec","modified":1474967198217},{"_id":"themes/jacman/layout/_widget/category.ejs","shasum":"c1fae96b5053da021bcc04ab2ce5c2c8d30de8a2","modified":1474967198219},{"_id":"themes/jacman/layout/_widget/douban.ejs","shasum":"e3820c36169e88663e6c9177666b2904c1ce47e6","modified":1474967198219},{"_id":"themes/jacman/layout/_widget/github-card.ejs","shasum":"5c759b6ea214bac56a393247de27e67ce73fb33f","modified":1474967198219},{"_id":"themes/jacman/layout/_partial/pagination.ejs","shasum":"6146ac37dfb4f8613090bc52b3fc8cfa911a186a","modified":1474967198213},{"_id":"themes/jacman/layout/_widget/links.ejs","shasum":"e49868063439c2092cdf9a8ec82cc295b0e42f66","modified":1474967198219},{"_id":"themes/jacman/layout/_widget/pv.ejs","shasum":"8d6a53963cfaa88b548d731b0e1c73c00807644c","modified":1475173062500},{"_id":"themes/jacman/layout/_widget/rss.ejs","shasum":"0a4b5f2a2e36a1d504fe2e7c6c8372cbb4628aab","modified":1474967198220},{"_id":"themes/jacman/layout/_widget/tag.ejs","shasum":"7e82ad9c916b9ce871b2f65ce8f283c5ba47947b","modified":1474967198220},{"_id":"themes/jacman/layout/_widget/tagcloud.ejs","shasum":"10a1001189d5c28ce6d42494563b9637c302b454","modified":1474967198220},{"_id":"themes/jacman/layout/_widget/weibo.ejs","shasum":"a31c2b223d0feb2a227e203cac9e5d13b7d328a8","modified":1474967198220},{"_id":"themes/jacman/layout/archive.ejs","shasum":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1474967198220},{"_id":"themes/jacman/layout/category.ejs","shasum":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1474967198221},{"_id":"themes/jacman/layout/index.ejs","shasum":"75cef2172c286994af412e11ab7f4f5a0daaf1f5","modified":1474967198221},{"_id":"themes/jacman/layout/page.ejs","shasum":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1474967198222},{"_id":"themes/jacman/layout/post.ejs","shasum":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1474967198222},{"_id":"themes/jacman/layout/tag.ejs","shasum":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1474967198223},{"_id":"themes/jacman/scripts/fancybox.js","shasum":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1474967198224},{"_id":"themes/jacman/layout/layout.ejs","shasum":"5b4289a4526899809b9c2facea535367ff51ba2b","modified":1474967198221},{"_id":"themes/jacman/source/css/_base/font.styl","shasum":"c8a0faf43b08e37ad07a5669db76d595da966159","modified":1474967198224},{"_id":"themes/jacman/source/css/_base/highlight/highlight.styl","shasum":"91b62bfc58390b0d5db782a75be6965ee3665eb3","modified":1474967198225},{"_id":"themes/jacman/source/css/_base/highlight/theme.styl","shasum":"e3a59bd427ba37a54ead9eeba9a5356b3f720a48","modified":1474967198225},{"_id":"themes/jacman/source/css/_base/public.styl","shasum":"f016180726019927b9a835ed01e04d153f27a149","modified":1474967198226},{"_id":"themes/jacman/source/css/_base/variable.styl","shasum":"cb652eb83c28a208743fabab92de896f8b7cbf7b","modified":1474967198226},{"_id":"themes/jacman/source/css/_partial/article.styl","shasum":"49be70165c7adb2e1c9a54cdf167e2ffc6cdbaeb","modified":1475174961483},{"_id":"themes/jacman/source/css/_partial/aside.styl","shasum":"506fde1d67ce750452cbe84bee01a19c7d027c5e","modified":1474967198227},{"_id":"themes/jacman/source/css/_partial/duoshuo.styl","shasum":"e85f1192283f043115c272a9deb3cb6ced793990","modified":1474967198228},{"_id":"themes/jacman/source/css/_partial/footer.styl","shasum":"c76c259671976796d2d855a35a23caf7a44bf53b","modified":1474972059753},{"_id":"themes/jacman/source/css/_partial/gallery.styl","shasum":"7246809f4ce3166ec1b259bf475cae1a48e29aad","modified":1474967198229},{"_id":"themes/jacman/source/css/_partial/totop.styl","shasum":"96363d7c5aaed5f649667fc0752a62620a67e872","modified":1474967198232},{"_id":"themes/jacman/source/css/_partial/header.styl","shasum":"5121ceb712be3f2dde98b8b6e589b546e19eab8f","modified":1474967198230},{"_id":"themes/jacman/source/css/style.styl","shasum":"a0a45af186a72ae68979bf26f2a5d0d2303189ca","modified":1474967198232},{"_id":"themes/jacman/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1474967198233},{"_id":"themes/jacman/source/css/_partial/helper.styl","shasum":"1136600932b97534b88465bf05ef313630b2de3d","modified":1474967198231},{"_id":"themes/jacman/source/css/_partial/index.styl","shasum":"a72ff14effd276015264f870f47ed8f8413bf5d3","modified":1474967198231},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1474967198233},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1474967198233},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1474967198234},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1474967198234},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1474967198234},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1474967198235},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1474967198235},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1474967198235},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1474967198236},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1474967198236},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1474967198236},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1474967198236},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1474967198237},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1474967198237},{"_id":"themes/jacman/source/font/FontAwesome.otf","shasum":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1474967198238},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","shasum":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1474967198239},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","shasum":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1474967198242},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","shasum":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1474967198242},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1474967198243},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","shasum":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1474967198247},{"_id":"themes/jacman/source/font/fontdiao.eot","shasum":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1474967198248},{"_id":"themes/jacman/source/font/fontdiao.ttf","shasum":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1474967198250},{"_id":"themes/jacman/source/font/fontdiao.woff","shasum":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1474967198250},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","shasum":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1474967198253},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","shasum":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1474967198253},{"_id":"themes/jacman/source/img/cc-by-nc.svg","shasum":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1474967198253},{"_id":"themes/jacman/source/img/cc-by-nd.svg","shasum":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1474967198254},{"_id":"themes/jacman/source/img/cc-by-sa.svg","shasum":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1474967198254},{"_id":"themes/jacman/source/img/cc-by.svg","shasum":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1474967198254},{"_id":"themes/jacman/source/img/cc-zero.svg","shasum":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1474967198255},{"_id":"themes/jacman/source/img/favicon.ico2","shasum":"2d22a3e0c7905a894e832c831dd91c29c209c7a5","modified":1474967198255},{"_id":"themes/jacman/source/img/jacman.jpg","shasum":"0ba14a4a5e3be012826fc713c33479912126d34e","modified":1474967198255},{"_id":"themes/jacman/source/img/scrollup.png","shasum":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1474967198259},{"_id":"themes/jacman/source/js/gallery.js","shasum":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1474967198259},{"_id":"themes/jacman/source/img/logo.svg","shasum":"9ae38f7225c38624faeb7b74996efa9de7bf065b","modified":1474967198258},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","shasum":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1474967198260},{"_id":"themes/jacman/source/js/totop.js","shasum":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb","modified":1474967198261},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","shasum":"57c3987166a26415a71292162690e82c21e315ad","modified":1474967198261},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","shasum":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53","modified":1474967198241},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1474967198247},{"_id":"themes/jacman/source/font/fontdiao.svg","shasum":"334a94e6a66a8b089be7315d876bec93efe38d2b","modified":1474967198249},{"_id":"themes/jacman/source/img/favicon.ico","shasum":"dde197278788a97a83c9f867a7c9808d4c87bec1","modified":1475169314442},{"_id":"themes/jacman/source/img/logo.png","shasum":"fd08d12d1fa147cf894e8f8327e38f1758de32ed","modified":1474967198258},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","shasum":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d","modified":1474967198260},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","shasum":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1474967198245},{"_id":"themes/jacman/source/img/banner.jpg","shasum":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1474967198252},{"_id":"public/js/totop.js","modified":1482459939122,"shasum":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb"},{"_id":"public/js/jquery.qrcode-0.12.0.min.js","modified":1482459939131,"shasum":"57c3987166a26415a71292162690e82c21e315ad"},{"_id":"public/js/jquery.imagesloaded.min.js","modified":1482459939136,"shasum":"4109837b1f6477bacc6b095a863b1b95b1b3693f"},{"_id":"public/js/jquery-2.0.3.min.js","modified":1482459939140,"shasum":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d"},{"_id":"public/js/gallery.js","modified":1482459939146,"shasum":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed"},{"_id":"public/img/scrollup.png","modified":1482459939155,"shasum":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3"},{"_id":"public/img/logo.svg","modified":1482459939163,"shasum":"9ae38f7225c38624faeb7b74996efa9de7bf065b"},{"_id":"public/img/logo.png","modified":1482459939168,"shasum":"fd08d12d1fa147cf894e8f8327e38f1758de32ed"},{"_id":"public/img/jacman.jpg","modified":1482459939172,"shasum":"0ba14a4a5e3be012826fc713c33479912126d34e"},{"_id":"public/img/favicon.ico2","modified":1482459939185,"shasum":"2d22a3e0c7905a894e832c831dd91c29c209c7a5"},{"_id":"public/img/favicon.ico","modified":1482459939189,"shasum":"dde197278788a97a83c9f867a7c9808d4c87bec1"},{"_id":"public/img/cc-zero.svg","modified":1482459939194,"shasum":"87669bf8ac268a91d027a0a4802c92a1473e9030"},{"_id":"public/img/cc-by.svg","modified":1482459939201,"shasum":"28a0a4fe355a974a5e42f68031652b76798d4f7e"},{"_id":"public/img/cc-by-sa.svg","modified":1482459939207,"shasum":"aa4742d733c8af8d38d4c183b8adbdcab045872e"},{"_id":"public/img/cc-by-nd.svg","modified":1482459939214,"shasum":"c563508ce9ced1e66948024ba1153400ac0e0621"},{"_id":"public/img/cc-by-nc.svg","modified":1482459939219,"shasum":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7"},{"_id":"public/img/cc-by-nc-sa.svg","modified":1482459939222,"shasum":"3031be41e8753c70508aa88e84ed8f4f653f157e"},{"_id":"public/img/cc-by-nc-nd.svg","modified":1482459939230,"shasum":"c6524ece3f8039a5f612feaf865d21ec8a794564"},{"_id":"public/img/banner.jpg","modified":1482459939238,"shasum":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74"},{"_id":"public/font/fontdiao.woff","modified":1482459939248,"shasum":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f"},{"_id":"public/font/fontdiao.ttf","modified":1482459939251,"shasum":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab"},{"_id":"public/font/fontdiao.svg","modified":1482459939255,"shasum":"334a94e6a66a8b089be7315d876bec93efe38d2b"},{"_id":"public/font/fontdiao.eot","modified":1482459939260,"shasum":"9544a0d7ba208989302bc4da5a184faeb0e883c9"},{"_id":"public/font/fontawesome-webfont.woff","modified":1482459939266,"shasum":"04c3bf56d87a0828935bd6b4aee859995f321693"},{"_id":"public/font/fontawesome-webfont.ttf","modified":1482459939270,"shasum":"7f09c97f333917034ad08fa7295e916c9f72fd3f"},{"_id":"public/font/fontawesome-webfont.svg","modified":1482459939274,"shasum":"46fcc0194d75a0ddac0a038aee41b23456784814"},{"_id":"public/font/fontawesome-webfont.eot","modified":1482459939282,"shasum":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e"},{"_id":"public/font/coveredbyyourgrace-webfont.woff","modified":1482459939285,"shasum":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e"},{"_id":"public/font/coveredbyyourgrace-webfont.ttf","modified":1482459939290,"shasum":"194ccb4acf77a03dc25bcc174edb266143704fec"},{"_id":"public/font/coveredbyyourgrace-webfont.svg","modified":1482459939297,"shasum":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53"},{"_id":"public/font/coveredbyyourgrace-webfont.eot","modified":1482459939302,"shasum":"a17d0f10534303e40f210c506ebb8703fa23b7de"},{"_id":"public/font/FontAwesome.otf","modified":1482459939307,"shasum":"b5b4f9be85f91f10799e87a083da1d050f842734"},{"_id":"public/fancybox/jquery.fancybox.pack.js","modified":1482459939311,"shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e"},{"_id":"public/fancybox/jquery.fancybox.js","modified":1482459939314,"shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed"},{"_id":"public/fancybox/jquery.fancybox.css","modified":1482459939317,"shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","modified":1482459939320,"shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c"},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","modified":1482459939329,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","modified":1482459939332,"shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","modified":1482459939335,"shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019"},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","modified":1482459939339,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/fancybox/helpers/fancybox_buttons.png","modified":1482459939343,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/fancybox/fancybox_sprite@2x.png","modified":1482459939346,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/fancybox/fancybox_sprite.png","modified":1482459939350,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/fancybox/fancybox_overlay.png","modified":1482459939355,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/fancybox/fancybox_loading@2x.gif","modified":1482459939358,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/fancybox/fancybox_loading.gif","modified":1482459939362,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/fancybox/blank.gif","modified":1482459939365,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/css/style.css","modified":1482459940537,"shasum":"b29a6047214fc89fd591674e60e4efa9e03587ad"},{"_id":"public/2016/11/20/spring-resource/resource.jpg","modified":1482459940976,"shasum":"f45bcaa3dd495300355ff09830a1500c36c71870"},{"_id":"public/2016/10/02/spring-mvc/Servlet_LifeCycle.jpg","modified":1482459940983,"shasum":"ec5a5ed7867fd6fd38c21edd4bd4336a39446614"},{"_id":"public/2016/10/02/spring-mvc/arch.jpg","modified":1482459940989,"shasum":"57bcfe2eac52149a1964cc576ba50409d4861c2c"},{"_id":"public/2016/10/02/spring-mvc/hierachy.jpg","modified":1482459940996,"shasum":"d2791a173d265df7a59e2a1a83f86bbb93a949b4"},{"_id":"public/2016/10/02/spring-mvc/servlet-interface.jpg","modified":1482459941003,"shasum":"362e1f8d17678f77285a987de921dc70a2647454"},{"_id":"public/2016/12/17/spi/usage.jpg","modified":1482459941010,"shasum":"ccda980477add78ccf794d40482fbf65cd880de1"},{"_id":"public/2016/10/31/property-placeholder/hierarchy.jpg","modified":1482459941016,"shasum":"df248929441da0b2bdbe7afbf56d4729ae8f524d"},{"_id":"public/2016/10/31/property-placeholder/location.jpg","modified":1482459941023,"shasum":"cf8a3be6950b18df2310584921d7058f45b4ffcf"},{"_id":"public/2016/10/31/property-placeholder/post-processors.jpg","modified":1482459941030,"shasum":"db5b21a4d6ace84afb24d14b158833558a5ad809"},{"_id":"public/2016/09/27/postgre/arch.jpg","modified":1482459941036,"shasum":"53839b9675327b7b18c652c1bf568b903017145e"},{"_id":"public/2016/09/27/postgre/history.jpg","modified":1482459941045,"shasum":"b40a177bc06fe594dbbf51ead88b1949d11ae5da"},{"_id":"public/2016/09/30/pagination/PPC2009_mysql_pagination.pdf","modified":1482459941051,"shasum":"606f57614083e01b5dc97653b2b699a91e92ee31"},{"_id":"public/2016/10/02/jsonp/cors.png","modified":1482459941060,"shasum":"03174e532d5fab79c1d9fd0a00139d4978443df0"},{"_id":"public/2016/10/02/jsonp/sample.png","modified":1482459941079,"shasum":"5c66eed23ecf164fca1d7f1f71eb2bd33d85c770"},{"_id":"public/2016/11/16/jackson-guava/jar.png","modified":1482459941082,"shasum":"0067332eb536099b9f5efc79e466e3302867d714"},{"_id":"public/2016/12/23/idea-template/profiles.jpg","modified":1482459941089,"shasum":"cc82791405ece2982b41af9f5eebd9ebf2009708"},{"_id":"public/2016/12/07/grep/color.jpg","modified":1482459941094,"shasum":"9b1ae87a35402005befa583795e231ccc49dca29"},{"_id":"public/2016/12/07/grep/egrep.jpg","modified":1482459941101,"shasum":"d13cb7333887eb76541f6ffb9a294c1d9404942e"},{"_id":"public/2016/09/26/character-encoding/Unicode_logo.jpg","modified":1482459941108,"shasum":"8ca31a7bd95ffb6a1aa6456c1b0970e1a5458fd7"},{"_id":"public/2016/09/26/character-encoding/emoji.jpg","modified":1482459941115,"shasum":"e4e05e46031c997ddd9b3d53a385c6d653963cd6"},{"_id":"public/2016/09/26/character-encoding/unicode-layout.jpg","modified":1482459941121,"shasum":"59c7ccbffd30aeb97f811b67a9f94a0f5c1bb5e0"},{"_id":"public/2016/09/26/base64/encoding.jpg","modified":1482459941128,"shasum":"5ed8de255bfe78f23b7cc920171655a4487a509b"},{"_id":"public/2016/09/26/base64/encoding2.jpg","modified":1482459941134,"shasum":"da197012f219ae5c3cacf049e0d15e9c9693c981"},{"_id":"public/2016/11/29/HttpMessageConverter/DispatcherServlet-properties.jpg","modified":1482459941139,"shasum":"2dd94eb25a05e8dd5a8bc0f8fc2eb05ebd73f89c"},{"_id":"public/2016/11/29/HttpMessageConverter/arch.jpg","modified":1482459941146,"shasum":"57bcfe2eac52149a1964cc576ba50409d4861c2c"},{"_id":"public/2016/11/29/HttpMessageConverter/http-message-converter.jpg","modified":1482459941152,"shasum":"fb06cf8a039b6d402ddb4cba11abb408caaa58fd"},{"_id":"public/2016/11/29/HttpMessageConverter/inherit.jpg","modified":1482459941158,"shasum":"1776d8f3e17b516ecc36fb3c55a398e6348760d7"},{"_id":"public/2016/11/30/logback/colored.jpg","modified":1482459941164,"shasum":"30c5aacc297c729704fd2118947d293ae3a4267e"},{"_id":"public/tags/index.html","modified":1482459941223,"shasum":"16179a861b17e0f0ca006529b63ff3aa469f7438"},{"_id":"public/2016/12/23/tomcat-access-log/index.html","modified":1482459941306,"shasum":"0c47d022ca98f403ebe22539d7658ee65d91ca5f"},{"_id":"public/2016/12/23/idea-template/index.html","modified":1482459941358,"shasum":"2b4ba848b62d385481c4d20c3ec069245001f4ab"},{"_id":"public/2016/12/23/tomcat-encoding/index.html","modified":1482459941390,"shasum":"9eba863f62854c5ff6fbe4546e9dc25685db8ee5"},{"_id":"public/2016/12/18/python-util/index.html","modified":1482459941414,"shasum":"55dbc45d4dee7619ece3f046532d7cfeedc9d983"},{"_id":"public/2016/12/18/nc/index.html","modified":1482459941431,"shasum":"4ff8da001829344e18be070bb3d1809207769f83"},{"_id":"public/2016/12/17/spi/index.html","modified":1482459941452,"shasum":"1baac91b311b7d7aed5bc5fc92fe315708931a5c"},{"_id":"public/2016/12/14/re/index.html","modified":1482459941470,"shasum":"c7b2428708c83dc82ecf39c142021d66817e1854"},{"_id":"public/2016/12/13/atnode/index.html","modified":1482459941495,"shasum":"39bf4cad105489fa9d298051334d9b937a561691"},{"_id":"public/2016/12/07/grep/index.html","modified":1482459941517,"shasum":"64d1f49e710356d696344aa17b16c5d7953fc0f2"},{"_id":"public/2016/11/29/HttpMessageConverter/index.html","modified":1482459941555,"shasum":"4b2933d099ffe9371d8d721dcafcd878d24059f1"},{"_id":"public/2016/11/20/spring-resource/index.html","modified":1482459941584,"shasum":"533d6c3540969abc20b772f6f657877e56f016bd"},{"_id":"public/2016/11/16/jackson-guava/index.html","modified":1482459941631,"shasum":"24a5f1bc2b071ae270eaa317250a8a83085f8945"},{"_id":"public/2016/10/31/property-placeholder/index.html","modified":1482459941689,"shasum":"14a93e4a4d94b6ac0bd2d8826c2317085a1785d8"},{"_id":"public/2016/10/23/custom-tag/index.html","modified":1482459941744,"shasum":"f12f79364ebbed0927f300fc9d88faf122336561"},{"_id":"public/2016/10/16/plantuml/index.html","modified":1482459941781,"shasum":"582ff602b1015bbaa6ae313e516ad80674f9dbe9"},{"_id":"public/2016/10/05/javadoc/index.html","modified":1482459941801,"shasum":"8d6f750486c68e5bfb600cae31ea8f136b88e179"},{"_id":"public/2016/10/02/spring-mvc/index.html","modified":1482459941889,"shasum":"c6e344261fe07223dd6e2496f0047ff7f7e6e785"},{"_id":"public/2016/10/02/jsonp/index.html","modified":1482459941922,"shasum":"70a65167c3296242356d97fcec2a2b70a7420500"},{"_id":"public/2016/09/30/pagination/index.html","modified":1482459941936,"shasum":"9c60e419697a1030ef837f12d3e00b55ad7bacd5"},{"_id":"public/2016/09/27/postgre/index.html","modified":1482459941952,"shasum":"350d73d3fa38f619d15cd73e215f5d27c76d24c0"},{"_id":"public/2016/09/26/character-encoding/index.html","modified":1482459941971,"shasum":"a10fdcbd60e231bd2ecbae0810a9934bc85255ac"},{"_id":"public/2016/09/26/base64/index.html","modified":1482459941984,"shasum":"043a4b01e887b920c854462954167b3874ca6714"},{"_id":"public/2016/09/25/spring-mockMvc/index.html","modified":1482459941998,"shasum":"5a72ad4c55b616cb1ed61b77ff08bf2874b3f98b"},{"_id":"public/2016/09/25/java-exception/index.html","modified":1482459942025,"shasum":"bbff50ccf158a24a8825522a1f3fcddbab3cbf8b"},{"_id":"public/2016/09/25/mysql-time/index.html","modified":1482459942038,"shasum":"2dccd323067bc3c3d8efd7e5a04f506a4900ac7b"},{"_id":"public/2015/11/03/fabric/index.html","modified":1482459942053,"shasum":"f349f6d1f57027ecd00ad61a7820ac1a7fd2efea"},{"_id":"public/2015/11/03/machine_learning/index.html","modified":1482459942069,"shasum":"3522d420c4e309a4b489ea919b5638b920eb42b4"},{"_id":"public/2015/10/20/java-permission-control/index.html","modified":1482459942089,"shasum":"6e8c8777995685ff0f6cfbea531746f0d4a2f821"},{"_id":"public/2015/10/09/shadowsocks/index.html","modified":1482459942108,"shasum":"196a0813f715d085b68c6fdfb818016ec765c84c"},{"_id":"public/2015/10/08/ssh-passwd-free/index.html","modified":1482459942130,"shasum":"752ed31700686ea88e47ae141d71b40f95589d59"},{"_id":"public/2015/10/08/hello-world/index.html","modified":1482459942152,"shasum":"a142a7a1fa46a5e6e6b8fe1e71546459f46306f1"},{"_id":"public/archives/index.html","modified":1482459942171,"shasum":"6300823feacc7db591038cb1f5b42320a8af5131"},{"_id":"public/archives/page/2/index.html","modified":1482459942182,"shasum":"f66b1d4afde3d596d00b151a0bc3fe4f2e434321"},{"_id":"public/archives/page/3/index.html","modified":1482459942193,"shasum":"26190787a0841ad6e15d14a65ebe88066b73d722"},{"_id":"public/archives/page/4/index.html","modified":1482459942203,"shasum":"951e1bc4176a95b058fa94ec886b5a9ef9c5026d"},{"_id":"public/archives/page/5/index.html","modified":1482459942213,"shasum":"8784e27516e89b294dda979646b67af9c4683bdf"},{"_id":"public/archives/2015/index.html","modified":1482459942227,"shasum":"e9d0307b8443159b9f7578816850d25114cc35cb"},{"_id":"public/archives/2015/10/index.html","modified":1482459942234,"shasum":"df3eaf40c9d5334df9b4699965ea3229a7e042bf"},{"_id":"public/archives/2015/11/index.html","modified":1482459942242,"shasum":"21a24700e6c654b2b17840e1873a523c7c7dab91"},{"_id":"public/archives/2016/index.html","modified":1482459942253,"shasum":"f2f739db362652d68d7200178063611397f4e93b"},{"_id":"public/archives/2016/page/2/index.html","modified":1482459942267,"shasum":"01ccee032e87c4f58684db823b82c75bb24dfae8"},{"_id":"public/archives/2016/page/3/index.html","modified":1482459942276,"shasum":"7d2650afd50722d3364955911b2f2cd425264832"},{"_id":"public/archives/2016/page/4/index.html","modified":1482459942287,"shasum":"e9b44e67638d727356eb30f4a5846156ddd9eb15"},{"_id":"public/archives/2016/09/index.html","modified":1482459942295,"shasum":"6ea37e13eb70065debff115503583ece77a1f4c2"},{"_id":"public/archives/2016/10/index.html","modified":1482459942303,"shasum":"2a8ab67fd84a731c8de2e297ef956ae2b12ab839"},{"_id":"public/archives/2016/11/index.html","modified":1482459942312,"shasum":"421c9d26712d214f0a48cbde4a71e2c62a61eb8f"},{"_id":"public/archives/2016/12/index.html","modified":1482459942320,"shasum":"35f1b30a86f425538dfa20d0bc5299a50d5b60e7"},{"_id":"public/archives/2016/12/page/2/index.html","modified":1482459942331,"shasum":"d3bd430e7a92dd900025ae7606eadd6df2c32e37"},{"_id":"public/baidusitemap.xml","modified":1482459942338,"shasum":"83b1b157d59bc8d046674aee1484a1c99a3a4086"},{"_id":"public/categories/tomcat/index.html","modified":1482459942346,"shasum":"9446315769817e711ed4bce74287a49d8b7d9982"},{"_id":"public/categories/linux/index.html","modified":1482459942352,"shasum":"5b753b69a6cab93e23715e28eb6b862f2b495dd5"},{"_id":"public/categories/spring/index.html","modified":1482459942362,"shasum":"053b1b63e71ae61726c19b8393c1e432946796c5"},{"_id":"public/categories/java/index.html","modified":1482459942369,"shasum":"6f86aea26029c6313a48f810b47a6ecea816d572"},{"_id":"public/categories/base/index.html","modified":1482459942375,"shasum":"4dc4e8f3c88cfba8dbe18a1769c2f647d52741b3"},{"_id":"public/categories/python/index.html","modified":1482459942384,"shasum":"cbd13c31173d5d9173b27ac34cd0564a654d18b5"},{"_id":"public/categories/hexo/index.html","modified":1482459942393,"shasum":"cacc0651d87b498a66db1a187c17516be7bd24b8"},{"_id":"public/categories/机器学习/index.html","modified":1482459942397,"shasum":"b3f44f731997eb547aa0ed52725965a9f403b560"},{"_id":"public/categories/fe/index.html","modified":1482459942405,"shasum":"e3276f87154c055209e9960ba2c564e4376c60c6"},{"_id":"public/categories/idea/index.html","modified":1482459942415,"shasum":"4f9ab860ca57322f592e095cfe850c6f6f368eab"},{"_id":"public/categories/python-linux/index.html","modified":1482459942420,"shasum":"1828d8c0bf2e198d286233f55d3b2e314048c304"},{"_id":"public/categories/web/index.html","modified":1482459942426,"shasum":"5912a34ec42dd5a2d3524da040e28d1a7aae1f69"},{"_id":"public/index.html","modified":1482459942440,"shasum":"3b3066832c5764f8bbd2cc579ec6c6e0cadcb491"},{"_id":"public/page/2/index.html","modified":1482459942458,"shasum":"6a58b26198c0c95bbafdcdf1d594ec0a1791d4e4"},{"_id":"public/page/3/index.html","modified":1482459942472,"shasum":"7834055141adf16d22b2bf9031f50a9132942ad9"},{"_id":"public/page/4/index.html","modified":1482459942491,"shasum":"259de63208909529c05b393f58c5ea6454299085"},{"_id":"public/page/5/index.html","modified":1482459942503,"shasum":"23925e57cdb48dd6374597ce5d803bbafad6bb35"},{"_id":"public/robots.txt","modified":1482459942507,"shasum":"9cff661887cd0b45c9cb599aae136a168cdf2430"},{"_id":"public/tags/encoding/index.html","modified":1482459942513,"shasum":"b8d6e0519b70aef07ef0ec3be1f0e49bcafff0a7"},{"_id":"public/tags/access-log/index.html","modified":1482459942519,"shasum":"a98cfc7f393cc7d5ef965aac57b6582e062a2f07"},{"_id":"public/tags/ssh/index.html","modified":1482459942525,"shasum":"8d576a02f4c7688ad9fc407cbc7d87826883257c"},{"_id":"public/tags/resource/index.html","modified":1482459942531,"shasum":"f24c1e3d596a44fea31ae51d4a134b2e37068e53"},{"_id":"public/tags/spring-mvc/index.html","modified":1482459942539,"shasum":"b86320113591df9668de9d228a1610f6a0cddc92"},{"_id":"public/tags/spi/index.html","modified":1482459942545,"shasum":"6fb8390a0d3ec05b97d20e594f91c6173b136041"},{"_id":"public/tags/shadowsocks/index.html","modified":1482459942551,"shasum":"6201dba4de8303c66cd80cb64440afe4d5213775"},{"_id":"public/tags/re/index.html","modified":1482459942557,"shasum":"17ecfa611f416f642b373c7dc346cf2a933b388c"},{"_id":"public/tags/python-util/index.html","modified":1482459942562,"shasum":"7e2c108615b89f89bd190ef58eccad62efdef9a7"},{"_id":"public/tags/placeholder/index.html","modified":1482459942567,"shasum":"46eb3666e0e71a727ae7556f1738a0b290734891"},{"_id":"public/tags/postgresql/index.html","modified":1482459942574,"shasum":"51a4bf1978f6d75e552cb443ec7e27c9d78b1b5e"},{"_id":"public/tags/uml/index.html","modified":1482459942579,"shasum":"f4f87fb35307382d3e6eb8190fe1109119cf7bbe"},{"_id":"public/tags/mysql/index.html","modified":1482459942585,"shasum":"3682215b8c18fe3668a758e1a15dbaa40f743a51"},{"_id":"public/tags/netcat/index.html","modified":1482459942590,"shasum":"d83aee95e696d31607a5965b62e7a8d181297a6b"},{"_id":"public/tags/机器学习/index.html","modified":1482459942596,"shasum":"2651d373eb4424929c7ea890b654b45c6f5400cc"},{"_id":"public/tags/ajax/index.html","modified":1482459942600,"shasum":"9a95d082f16a0f9b64f0c246320e6c1a03e2c99c"},{"_id":"public/tags/Javadoc/index.html","modified":1482459942605,"shasum":"84b7c721d6798d31322fd3536b6abf60acf47373"},{"_id":"public/tags/访问权限/index.html","modified":1482459942610,"shasum":"2b79c7e592c137a50fbf792105da7d12ad2a7154"},{"_id":"public/tags/exception/index.html","modified":1482459942617,"shasum":"602baadf0ef41e470a071cea6170220587acde20"},{"_id":"public/tags/jackson/index.html","modified":1482459942623,"shasum":"dbe2660d5837d1072cb3acca5ef33355b64dc0d6"},{"_id":"public/tags/template/index.html","modified":1482459942629,"shasum":"d9cb36555ee1699e33b555186d22840f3328ffd8"},{"_id":"public/tags/hexo-install/index.html","modified":1482459942636,"shasum":"1631dfcea6e0eaa3715de683c128bee3bc7f5e32"},{"_id":"public/tags/shell/index.html","modified":1482459942642,"shasum":"84956fae6594bfa2f41ea7ea371f9797db50785c"},{"_id":"public/tags/fabric-运维/index.html","modified":1482459942648,"shasum":"bbc3d015d72438060e51540d0407fa86b61cd86b"},{"_id":"public/tags/自定义标签/index.html","modified":1482459942655,"shasum":"c5b484217316d9bb00c6c1c3cdd6a881055a85d4"},{"_id":"public/tags/编码/index.html","modified":1482459942663,"shasum":"35a25a86fc7a7423fdfc5e9b155cab7e224b9315"},{"_id":"public/tags/spring/index.html","modified":1482459942670,"shasum":"07f2dd2c12d25993f348035e0b57e234383fc803"},{"_id":"public/sitemap.xml","modified":1482459942673,"shasum":"f0b6c1fcd03a0fa48e367c823d780bd19714fa22"},{"_id":"public/atom.xml","modified":1482459942683,"shasum":"4d8d9606597f4d6cb5e58e6a4903e9f6ee2c0531"}],"Category":[{"name":"tomcat","_id":"cix16db0b000390pyxsjnp0bw"},{"name":"linux","_id":"cix16db0p000d90py77rpp6b1"},{"name":"spring","_id":"cix16db0t000i90pygx7sclt8"},{"name":"java","_id":"cix16db1y000u90pyxakyoky0"},{"name":"base","_id":"cix16db28001390py4q6wnqck"},{"name":"python","_id":"cix16db2e001890pyyr5p91th"},{"name":"hexo","_id":"cix16db3i001l90pyb0boocy5"},{"name":"机器学习","_id":"cix16db49002190py9o15xoy0"},{"name":"fe","_id":"cix16db4e002690py0f2bj4mc"},{"name":"idea","_id":"cix16db4t002b90pyya1v91s1"},{"name":"python linux","_id":"cix16db64003490py418enem2"},{"name":"web","_id":"cix16db6w003n90pyjuhl3996"}],"Data":[],"Page":[{"title":"tags","date":"2016-09-23T16:07:17.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"title: tags\ndate: 2016-09-24 00:07:17\ntype: \"tags\"\n---\n","updated":"2016-09-23T16:07:41.453Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cix16db07000190pyzkwm28r9"}],"Post":[{"title":"HandlerAdapter","category":null,"_content":"","source":"_drafts/HandlerAdapter.md","raw":"title: HandlerAdapter\ntags:\ncategory:\n---\n","slug":"HandlerAdapter","published":0,"date":"2016-12-03T18:00:17.823Z","updated":"2016-12-03T18:00:17.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16dazx000090py46apwu06"},{"title":"tomcat中文编码设置","date":"2016-12-22T16:43:20.000Z","_content":"\n\n## tomcat中文乱码\n\ntomcat 默认的编`ISO-8859-1`编码，部分中文会出现乱码\n\n> *URIEncoding*   \nThis specifies the character encoding used to decode the URI bytes, after %xx decoding the URL. If not specified, ISO-8859-1 will be used.\n\n\n## 编码设置\n\n`conf/server.xml`\n\n修改前：\n\n```xml\n<Connector port=\"8080\" redirectPort=\"8443\" connectionTimeout=\"20000\" protocol=\"HTTP/1.1\"/>\n```\n\n修改后：\n\n```xml\n    <Connector port=\"8080\" redirectPort=\"8443\" connectionTimeout=\"20000\" \n    protocol=\"HTTP/1.1\"               \n    URIEncoding=\"UTF-8\"/>\n```\n\n## 参考\n\n1. [The HTTP Connector](https://tomcat.apache.org/tomcat-7.0-doc/config/http.html)\n\n","source":"_posts/tomcat-encoding.md","raw":"title: tomcat中文编码设置\ntags: encoding\ncategory: tomcat\ndate: 2016-12-23 00:43:20\n---\n\n\n## tomcat中文乱码\n\ntomcat 默认的编`ISO-8859-1`编码，部分中文会出现乱码\n\n> *URIEncoding*   \nThis specifies the character encoding used to decode the URI bytes, after %xx decoding the URL. If not specified, ISO-8859-1 will be used.\n\n\n## 编码设置\n\n`conf/server.xml`\n\n修改前：\n\n```xml\n<Connector port=\"8080\" redirectPort=\"8443\" connectionTimeout=\"20000\" protocol=\"HTTP/1.1\"/>\n```\n\n修改后：\n\n```xml\n    <Connector port=\"8080\" redirectPort=\"8443\" connectionTimeout=\"20000\" \n    protocol=\"HTTP/1.1\"               \n    URIEncoding=\"UTF-8\"/>\n```\n\n## 参考\n\n1. [The HTTP Connector](https://tomcat.apache.org/tomcat-7.0-doc/config/http.html)\n\n","slug":"tomcat-encoding","published":1,"updated":"2016-12-22T16:47:30.453Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db0a000290pykj91eh9q"},{"title":"tomcat access log 格式设置","date":"2016-12-22T16:43:10.000Z","_content":"\n\n## Tomcat access log 日志格式\n\n\n文件位置: `conf/server.xml`\n\n默认配置\n\n```xml\n        <!-- Access log processes all example.\n             Documentation at: /docs/config/valve.html\n             Note: The pattern used is equivalent to using pattern=\"common\" -->\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\"\n               prefix=\"localhost_access_log.\" suffix=\".txt\"\n               pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" />\n```\n\n|名称 | 含义|\n|-|-|\n|%a | Remote IP address|\n|%A | Local IP address|\n|%b | Bytes sent, excluding HTTP headers, or '-' if zero|\n|%B | Bytes sent, excluding HTTP headers|\n|%h | Remote host name (or IP address if enableLookups for the connector is false)|\n|%H | Request protocol|\n|%l | Remote logical username from identd (always returns '-')|\n|%m | Request method (GET, POST, etc.)|\n|%p | Local port on which this request was received|\n|%q | Query string (prepended with a '?' if it exists)|\n|%r | First line of the request (method and request URI)|\n|%s | HTTP status code of the response|\n|%S | User session ID|\n|%t | Date and time, in Common Log Format|\n|%u | Remote user that was authenticated (if any), else '-'|\n|%U | Requested URL path|\n|%v | Local server name|\n|%D | Time taken to process the request, in millis|\n|%T | Time taken to process the request, in seconds|\n|%F | Time taken to commit the response, in millis|\n|%I | Current request thread name (can compare later with stacktraces)|\n\n默认的配置打出来的access日志如下：\n\n||||||||\n| -| -| -|-|- |- | -|\n|127.0.0.1 |-| -| [07/Oct/2016:22:31:56 +0800]| \"GET /dubbo/ HTTP/1.1\" |404 |963|\n|远程IP |logical username| remote user|时间和日期| http请求的第一行| 状态码| 除去http头的发送大小| \n\n### header、cookie、session其他字段的支持\n\n> There is also support to write information incoming or outgoing headers, cookies, session or request attributes and special timestamp formats. It is modeled after the Apache HTTP Server log configuration syntax:\n\n|名称 | 含义|\n|-|-|\n|%{xxx}i |for incoming headers|\n|%{xxx}o |for outgoing response headers|\n|%{xxx}c |for a specific cookie|\n|%{xxx}r |xxx is an attribute in the ServletRequest|\n|%{xxx}s |xxx is an attribute in the HttpSession|\n|%{xxx}t |xxx is an enhanced SimpleDateFormat pattern|\n\n例如： `%{X-Forwarded-For}i`即可打印出实际访问的ip地址（考虑到ng的反向代理）\n\nHTTP头一般格式如下:\n\n`X-Forwarded-For: client1, proxy1, proxy2`\n>其中的值通过一个 逗号+空格 把多个IP地址区分开, 最左边（client1）是最原始客户端的IP地址, 代理服务器每成功收到一个请求，就把请求来源IP地址添加到右边。 在上面这个例子中，这个请求成功通过了三台代理服务器：proxy1, proxy2 及 proxy3。请求由client1发出，到达了proxy3（proxy3可能是请求的终点）。请求刚从client1中发出时，XFF是空的，请求被发往proxy1；通过proxy1的时候，client1被添加到XFF中，之后请求被发往proxy2;通过proxy2的时候，proxy1被添加到XFF中，之后请求被发往proxy3；通过proxy3时，proxy2被添加到XFF中，之后请求的的去向不明，如果proxy3不是请求终点，请求会被继续转发。\n\n>鉴于伪造这一字段非常容易，应该谨慎使用X-Forwarded-For字段。正常情况下XFF中最后一个IP地址是最后一个代理服务器的IP地址, 这通常是一个比较可靠的信息来源。\n\n\n## 参考\n\n1. [The Valve Component](http://tomcat.apache.org/tomcat-7.0-doc/config/valve.html)\n\n2. [X-Forwarded-For](https://zh.wikipedia.org/wiki/X-Forwarded-For)","source":"_posts/tomcat-access-log.md","raw":"title: tomcat access log 格式设置\ntags: access-log\ncategory: tomcat\ndate: 2016-12-23 00:43:10\n---\n\n\n## Tomcat access log 日志格式\n\n\n文件位置: `conf/server.xml`\n\n默认配置\n\n```xml\n        <!-- Access log processes all example.\n             Documentation at: /docs/config/valve.html\n             Note: The pattern used is equivalent to using pattern=\"common\" -->\n        <Valve className=\"org.apache.catalina.valves.AccessLogValve\" directory=\"logs\"\n               prefix=\"localhost_access_log.\" suffix=\".txt\"\n               pattern=\"%h %l %u %t &quot;%r&quot; %s %b\" />\n```\n\n|名称 | 含义|\n|-|-|\n|%a | Remote IP address|\n|%A | Local IP address|\n|%b | Bytes sent, excluding HTTP headers, or '-' if zero|\n|%B | Bytes sent, excluding HTTP headers|\n|%h | Remote host name (or IP address if enableLookups for the connector is false)|\n|%H | Request protocol|\n|%l | Remote logical username from identd (always returns '-')|\n|%m | Request method (GET, POST, etc.)|\n|%p | Local port on which this request was received|\n|%q | Query string (prepended with a '?' if it exists)|\n|%r | First line of the request (method and request URI)|\n|%s | HTTP status code of the response|\n|%S | User session ID|\n|%t | Date and time, in Common Log Format|\n|%u | Remote user that was authenticated (if any), else '-'|\n|%U | Requested URL path|\n|%v | Local server name|\n|%D | Time taken to process the request, in millis|\n|%T | Time taken to process the request, in seconds|\n|%F | Time taken to commit the response, in millis|\n|%I | Current request thread name (can compare later with stacktraces)|\n\n默认的配置打出来的access日志如下：\n\n||||||||\n| -| -| -|-|- |- | -|\n|127.0.0.1 |-| -| [07/Oct/2016:22:31:56 +0800]| \"GET /dubbo/ HTTP/1.1\" |404 |963|\n|远程IP |logical username| remote user|时间和日期| http请求的第一行| 状态码| 除去http头的发送大小| \n\n### header、cookie、session其他字段的支持\n\n> There is also support to write information incoming or outgoing headers, cookies, session or request attributes and special timestamp formats. It is modeled after the Apache HTTP Server log configuration syntax:\n\n|名称 | 含义|\n|-|-|\n|%{xxx}i |for incoming headers|\n|%{xxx}o |for outgoing response headers|\n|%{xxx}c |for a specific cookie|\n|%{xxx}r |xxx is an attribute in the ServletRequest|\n|%{xxx}s |xxx is an attribute in the HttpSession|\n|%{xxx}t |xxx is an enhanced SimpleDateFormat pattern|\n\n例如： `%{X-Forwarded-For}i`即可打印出实际访问的ip地址（考虑到ng的反向代理）\n\nHTTP头一般格式如下:\n\n`X-Forwarded-For: client1, proxy1, proxy2`\n>其中的值通过一个 逗号+空格 把多个IP地址区分开, 最左边（client1）是最原始客户端的IP地址, 代理服务器每成功收到一个请求，就把请求来源IP地址添加到右边。 在上面这个例子中，这个请求成功通过了三台代理服务器：proxy1, proxy2 及 proxy3。请求由client1发出，到达了proxy3（proxy3可能是请求的终点）。请求刚从client1中发出时，XFF是空的，请求被发往proxy1；通过proxy1的时候，client1被添加到XFF中，之后请求被发往proxy2;通过proxy2的时候，proxy1被添加到XFF中，之后请求被发往proxy3；通过proxy3时，proxy2被添加到XFF中，之后请求的的去向不明，如果proxy3不是请求终点，请求会被继续转发。\n\n>鉴于伪造这一字段非常容易，应该谨慎使用X-Forwarded-For字段。正常情况下XFF中最后一个IP地址是最后一个代理服务器的IP地址, 这通常是一个比较可靠的信息来源。\n\n\n## 参考\n\n1. [The Valve Component](http://tomcat.apache.org/tomcat-7.0-doc/config/valve.html)\n\n2. [X-Forwarded-For](https://zh.wikipedia.org/wiki/X-Forwarded-For)","slug":"tomcat-access-log","published":1,"updated":"2016-12-23T02:24:57.656Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db0g000790py3lxzp8u5"},{"_content":"<!DOCTYPE html><html><head><meta charset=\"utf-8\"><meta name=\"category\" content=\"tomcat\">\n<meta name=\"tags\" content=\"access-log\">\n<meta name=\"date\" content=\"2016-12-23 00:43:10\"><style>body {\n  width: 45em;\n  border: 1px solid #ddd;\n  outline: 1300px solid #fff;\n  margin: 16px auto;\n}\n\nbody .markdown-body\n{\n  padding: 30px;\n}\n\n@font-face {\n  font-family: fontawesome-mini;\n  src: url(data:font/woff;charset=utf-8;base64,d09GRgABAAAAAAzUABAAAAAAFNgAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAABbAAAABwAAAAcZMzaOEdERUYAAAGIAAAAHQAAACAAOQAET1MvMgAAAagAAAA+AAAAYHqhde9jbWFwAAAB6AAAAFIAAAFa4azkLWN2dCAAAAI8AAAAKAAAACgFgwioZnBnbQAAAmQAAAGxAAACZVO0L6dnYXNwAAAEGAAAAAgAAAAIAAAAEGdseWYAAAQgAAAFDgAACMz7eroHaGVhZAAACTAAAAAwAAAANgWEOEloaGVhAAAJYAAAAB0AAAAkDGEGa2htdHgAAAmAAAAAEwAAADBEgAAQbG9jYQAACZQAAAAaAAAAGgsICJBtYXhwAAAJsAAAACAAAAAgASgBD25hbWUAAAnQAAACZwAABOD4no+3cG9zdAAADDgAAABsAAAAmF+yXM9wcmVwAAAMpAAAAC4AAAAusPIrFAAAAAEAAAAAyYlvMQAAAADLVHQgAAAAAM/u9uZ4nGNgZGBg4ANiCQYQYGJgBEJuIGYB8xgABMMAPgAAAHicY2Bm42OcwMDKwMLSw2LMwMDQBqGZihmiwHycoKCyqJjB4YPDh4NsDP+BfNb3DIuAFCOSEgUGRgAKDgt4AAB4nGNgYGBmgGAZBkYGEAgB8hjBfBYGCyDNxcDBwMTA9MHhQ9SHrA8H//9nYACyQyFs/sP86/kX8HtB9UIBIxsDXICRCUgwMaACRoZhDwA3fxKSAAAAAAHyAHABJQB/AIEAdAFGAOsBIwC/ALgAxACGAGYAugBNACcA/wCIeJxdUbtOW0EQ3Q0PA4HE2CA52hSzmZDGe6EFCcTVjWJkO4XlCGk3cpGLcQEfQIFEDdqvGaChpEibBiEXSHxCPiESM2uIojQ7O7NzzpkzS8qRqnfpa89T5ySQwt0GzTb9Tki1swD3pOvrjYy0gwdabGb0ynX7/gsGm9GUO2oA5T1vKQ8ZTTuBWrSn/tH8Cob7/B/zOxi0NNP01DoJ6SEE5ptxS4PvGc26yw/6gtXhYjAwpJim4i4/plL+tzTnasuwtZHRvIMzEfnJNEBTa20Emv7UIdXzcRRLkMumsTaYmLL+JBPBhcl0VVO1zPjawV2ys+hggyrNgQfYw1Z5DB4ODyYU0rckyiwNEfZiq8QIEZMcCjnl3Mn+pED5SBLGvElKO+OGtQbGkdfAoDZPs/88m01tbx3C+FkcwXe/GUs6+MiG2hgRYjtiKYAJREJGVfmGGs+9LAbkUvvPQJSA5fGPf50ItO7YRDyXtXUOMVYIen7b3PLLirtWuc6LQndvqmqo0inN+17OvscDnh4Lw0FjwZvP+/5Kgfo8LK40aA4EQ3o3ev+iteqIq7wXPrIn07+xWgAAAAABAAH//wAPeJyFlctvG1UUh+/12DPN1B7P3JnYjj2Ox4/MuDHxJH5N3UdaEUQLqBIkfQQioJWQ6AMEQkIqsPGCPwA1otuWSmTBhjtps2ADWbJg3EpIXbGouqSbCraJw7kzNo2dRN1cnXN1ZvT7zuuiMEI7ncizyA0URofRBJpCdbQuIFShYY+GZRrxMDVtih5TwQPHtXDFFSIKoWIbuREBjLH27Ny4MsbVx+uOJThavebgVrNRLAiYx06rXsvhxLgWx9xpfHdrs/ekc2Pl2cpPCVEITQpwbj8VQhfXSq2m+Wxqaq2D73Kne5e3NjHqQNj3CRYlJlgUl/jRNP+2Gs2pNYRQiOnmUaQDqm30KqKiTTWPWjboxnTWpvgxjXo0KrtZXAHt7hwIz0YVcj88JnKlJKi3NPAwLyDwZudSmJSMMJFDYaOkaol6XtESx3Gt1VTytdZJ3DCLeaVhVnCBH1fycHTxFXwPX+l2e3d6H/TufGGmMTLTnbSJUdo00zuBswMO/nl3YLeL/wnu9/limCuD3vC54h5NBVz6Li414AI8Vx3iiosKcQXUbrvhFFiYb++HN4DaF4XzFW0fIN4XDWJ3a3XQoq9V8WiyRmdsatV9xUcHims1JloH0YUa090G3Tro3mC6c01f+YwCPquINr1PTaCP6rVTOOmf0GE2dBc7zWIhji3/5MchSuBHgDbU99RMWt3YUNMZMJmx92YP6NsHx/5/M1yvInpnkIOM3Z8fA3JQ2lW1RFC1KaBPDFXNAHYYvGy73aYZZZ3HifbeuiVZCpwA3oQBs0wGPYJbJfg60xrKEbKiNtTe1adwrpBRwlAuQ3q3VRaX0QmQ9a49BTSCuF1MLfQ6+tinOubRBZuWPNoMevGMT+V41KitO1is3D/tpMcq1JHZqDHGs8DoYGDkxJgKjHROeTCmhZvzPm9pod+ltKm4PN7Dyvvldlpsg8D+4AUJZ3F/JBstZz7cbFRxsaAGV6yX/dkcycWf8eS3QlQea+YLjdm3yrOnrhFpUyKVvFE4lpv4bO3Svx/6F/4xmiDu/RT5iI++lko18mY1oX+5UGKR6kmVjM/Zb76yfHtxy+h/SyQ0lLdpdKy/lWB6szatetQJ8nZ80A2Qt6ift6gJeavU3BO4gtxs/KCtNPVibCtYCWY3SIlSBPKXZALXiIR9oZeJ1AuMyxLpHIy/yO7vSiSE+kZvk0ihJ30HgHfzZtEMmvV58x6dtqns0XTAW7Vdm4HJ04OCp/crOO7rd9SGxQAE/mVA9xRN+kVSMRFF6S9JFGUtthkjBA5tFCWc2l4V43Ex9GmUP3SI37Jjmir9KqlaDJ4S4JB3vuM/jzyH1+8MuoZ+QGzfnvPoJb96cZlWjMcKLfgDwB7E634JTY+asjsPzS5CiVnEWY+KsrsIN5rn3mAPjqmQBxGjcGKB9f9ZxY3mYC2L85CJ2FXIxKKyHk+dg0FHbuEc7D5NzWUX32WxFcWNGRAbvwSx0RmIXVDuYySafluQBmzA/ssqJAMLnli+WIC90Gw4lm85wcp0qjArEDPJJV/sSx4P9ungTpgMw5gVC1XO4uULq0s3v1rqLi0vX/z65vlH50f8T/RHmSPTk5xxWBWOluMT6WiOy+tdvWxlV/XQb3o3c6Ssr+r6I708GsX9/nzp1tKFh0s3v7m4vAy/Hnb/KMOvc1wump6Il48K6mGDy02X9Yd65pa+nQIjk76lWxCkG8NBCP0HQS9IpAAAeJxjYGRgYGBhcCrq214Qz2/zlUGenQEEzr/77oug/zewFbB+AHI5GJhAogBwKQ0qeJxjYGRgYH3/P46BgZ0BBNgKGBgZUAEPAE/7At0AAAB4nGNngAB2IGYjhBsYBAAIYADVAAAAAAAAAAAAAFwAyAEeAaACCgKmAx4DggRmAAAAAQAAAAwAagAEAAAAAAACAAEAAgAWAAABAAChAAAAAHiclZI7bxQxFIWPd/JkUYQChEhIyAVKgdBMskm1QkKrRETpQiLRUczueB/K7HhlOxttg8LvoKPgP9DxFxANDR0tHRWi4NjrPIBEgh1p/dm+vufcawNYFWsQmP6e4jSyQB2fI9cwj++RE9wTjyPP4LYoI89iWbyLPIe6+Bh5Hs9rryMv4GbtW+RF3EhuRa7jbrIbeQkPkjdUETOLnL0Kip4FVvAhco1RXyMnSPEz8gzWxE7kWTwUp5HnsCLeR57HW/El8gJWa58iL+JO7UfkOh4l9yMv4UnyEtvQGGECgwF66MNBooF1bGCL1ELB/TYU+ZBRlvsKQ44Se6jQ4a7hef+fh72Crv25kp+8lNWGmeKoOI5jJLb1aGIGvb6TjfWNLdkqdFvJw4l1amjlXtXRZqRN7lSRylZZyhBqpVFWmTEXgWfUrpi/hZOQXdOd4rKuXOtEWT3k5IArPRzTUU5tHKjecZkTpnVbNOnt6jzN8240GD4xtikvZW56043rPMg/dS+dlOceXoR+WPbJ55Dsekq1lJpnypsMUsYOdCW30o103Ytu/lvh+5RWFLfBjm9/N8hJntPhvx92rnoE/kyHdGasGy754kw36vsVf/lFeBi+0COu+cfgQr42G3CRpeLoZ53gmfe3X6rcKt5oVxnptHR9JS8ehVUd5wvvahN2uqxOOpMXapibI5k7Zwbt4xBSaTfoKBufhAnO/uqNcfK8OTs0OQ6l7JIqFjDhYj5WcjevCnI/1DDiI8j4ndWb/5YzDZWh79yomWXeXj7Nnw70/2TIeFPTrlSh89k1ObOSRVZWZfgF0r/zJQB4nG2JUQuCQBCEd07TTg36fb2IyBaLd3vWaUh/vmSJnvpgmG8YcmS8X3Shf3R7QA4OBUocUKHGER5NNbOOEvwc1txnuWkTRb/aPjimJ5vXabI+3VfOiyS15UWvyezM2xiGOPyuMohOH8O8JiO4Af+FsAGNAEuwCFBYsQEBjlmxRgYrWCGwEFlLsBRSWCGwgFkdsAYrXFhZsBQrAAA=) format('woff');\n}\n\n@font-face {\n  font-family: octicons-anchor;\n  src: url(data:font/woff;charset=utf-8;base64,d09GRgABAAAAAAYcAA0AAAAACjQAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAABMAAAABwAAAAca8vGTk9TLzIAAAFMAAAARAAAAFZG1VHVY21hcAAAAZAAAAA+AAABQgAP9AdjdnQgAAAB0AAAAAQAAAAEACICiGdhc3AAAAHUAAAACAAAAAj//wADZ2x5ZgAAAdwAAADRAAABEKyikaNoZWFkAAACsAAAAC0AAAA2AtXoA2hoZWEAAALgAAAAHAAAACQHngNFaG10eAAAAvwAAAAQAAAAEAwAACJsb2NhAAADDAAAAAoAAAAKALIAVG1heHAAAAMYAAAAHwAAACABEAB2bmFtZQAAAzgAAALBAAAFu3I9x/Nwb3N0AAAF/AAAAB0AAAAvaoFvbwAAAAEAAAAAzBdyYwAAAADP2IQvAAAAAM/bz7t4nGNgZGFgnMDAysDB1Ml0hoGBoR9CM75mMGLkYGBgYmBlZsAKAtJcUxgcPsR8iGF2+O/AEMPsznAYKMwIkgMA5REMOXicY2BgYGaAYBkGRgYQsAHyGMF8FgYFIM0ChED+h5j//yEk/3KoSgZGNgYYk4GRCUgwMaACRoZhDwCs7QgGAAAAIgKIAAAAAf//AAJ4nHWMMQrCQBBF/0zWrCCIKUQsTDCL2EXMohYGSSmorScInsRGL2DOYJe0Ntp7BK+gJ1BxF1stZvjz/v8DRghQzEc4kIgKwiAppcA9LtzKLSkdNhKFY3HF4lK69ExKslx7Xa+vPRVS43G98vG1DnkDMIBUgFN0MDXflU8tbaZOUkXUH0+U27RoRpOIyCKjbMCVejwypzJJG4jIwb43rfl6wbwanocrJm9XFYfskuVC5K/TPyczNU7b84CXcbxks1Un6H6tLH9vf2LRnn8Ax7A5WQAAAHicY2BkYGAA4teL1+yI57f5ysDNwgAC529f0kOmWRiYVgEpDgYmEA8AUzEKsQAAAHicY2BkYGB2+O/AEMPCAAJAkpEBFbAAADgKAe0EAAAiAAAAAAQAAAAEAAAAAAAAKgAqACoAiAAAeJxjYGRgYGBhsGFgYgABEMkFhAwM/xn0QAIAD6YBhwB4nI1Ty07cMBS9QwKlQapQW3VXySvEqDCZGbGaHULiIQ1FKgjWMxknMfLEke2A+IJu+wntrt/QbVf9gG75jK577Lg8K1qQPCfnnnt8fX1NRC/pmjrk/zprC+8D7tBy9DHgBXoWfQ44Av8t4Bj4Z8CLtBL9CniJluPXASf0Lm4CXqFX8Q84dOLnMB17N4c7tBo1AS/Qi+hTwBH4rwHHwN8DXqQ30XXAS7QaLwSc0Gn8NuAVWou/gFmnjLrEaEh9GmDdDGgL3B4JsrRPDU2hTOiMSuJUIdKQQayiAth69r6akSSFqIJuA19TrzCIaY8sIoxyrNIrL//pw7A2iMygkX5vDj+G+kuoLdX4GlGK/8Lnlz6/h9MpmoO9rafrz7ILXEHHaAx95s9lsI7AHNMBWEZHULnfAXwG9/ZqdzLI08iuwRloXE8kfhXYAvE23+23DU3t626rbs8/8adv+9DWknsHp3E17oCf+Z48rvEQNZ78paYM38qfk3v/u3l3u3GXN2Dmvmvpf1Srwk3pB/VSsp512bA/GG5i2WJ7wu430yQ5K3nFGiOqgtmSB5pJVSizwaacmUZzZhXLlZTq8qGGFY2YcSkqbth6aW1tRmlaCFs2016m5qn36SbJrqosG4uMV4aP2PHBmB3tjtmgN2izkGQyLWprekbIntJFing32a5rKWCN/SdSoga45EJykyQ7asZvHQ8PTm6cslIpwyeyjbVltNikc2HTR7YKh9LBl9DADC0U/jLcBZDKrMhUBfQBvXRzLtFtjU9eNHKin0x5InTqb8lNpfKv1s1xHzTXRqgKzek/mb7nB8RZTCDhGEX3kK/8Q75AmUM/eLkfA+0Hi908Kx4eNsMgudg5GLdRD7a84npi+YxNr5i5KIbW5izXas7cHXIMAau1OueZhfj+cOcP3P8MNIWLyYOBuxL6DRylJ4cAAAB4nGNgYoAALjDJyIAOWMCiTIxMLDmZedkABtIBygAAAA==) format('woff');\n}\n\n.markdown-body {\n  font-family: sans-serif;\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n  color: #333333;\n  overflow: hidden;\n  font-family: \"Helvetica Neue\", Helvetica, \"Segoe UI\", Arial, freesans, sans-serif;\n  font-size: 16px;\n  line-height: 1.6;\n  word-wrap: break-word;\n}\n\n.markdown-body a {\n  background: transparent;\n}\n\n.markdown-body a:active,\n.markdown-body a:hover {\n  outline: 0;\n}\n\n.markdown-body b,\n.markdown-body strong {\n  font-weight: bold;\n}\n\n.markdown-body mark {\n  background: #ff0;\n  color: #000;\n  font-style: italic;\n  font-weight: bold;\n}\n\n.markdown-body sub,\n.markdown-body sup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n.markdown-body sup {\n  top: -0.5em;\n}\n.markdown-body sub {\n  bottom: -0.25em;\n}\n\n.markdown-body h1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n.markdown-body img {\n  border: 0;\n}\n\n.markdown-body hr {\n  -moz-box-sizing: content-box;\n  box-sizing: content-box;\n  height: 0;\n}\n\n.markdown-body pre {\n  overflow: auto;\n}\n\n.markdown-body code,\n.markdown-body kbd,\n.markdown-body pre,\n.markdown-body samp {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n\n.markdown-body input {\n  color: inherit;\n  font: inherit;\n  margin: 0;\n}\n\n.markdown-body html input[disabled] {\n  cursor: default;\n}\n\n.markdown-body input {\n  line-height: normal;\n}\n\n.markdown-body input[type=\"checkbox\"] {\n  box-sizing: border-box;\n  padding: 0;\n}\n\n.markdown-body table {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\n.markdown-body td,\n.markdown-body th {\n  padding: 0;\n}\n\n.markdown-body .codehilitetable {\n  border: 0;\n  border-spacing: 0;\n}\n\n.markdown-body .codehilitetable tr {\n  border: 0;\n}\n\n.markdown-body .codehilitetable pre,\n.markdown-body .codehilitetable div.codehilite {\n  margin: 0;\n}\n\n.markdown-body .linenos,\n.markdown-body .code,\n.markdown-body .codehilitetable td {\n  border: 0;\n  padding: 0;\n}\n\n.markdown-body td:not(.linenos) .linenodiv {\n  padding: 0 !important;\n}\n\n.markdown-body .code {\n  width: 100%;\n}\n\n.markdown-body .linenos div pre,\n.markdown-body .linenodiv pre,\n.markdown-body .linenodiv {\n  border: 0;\n  -webkit-border-radius: 0;\n  -moz-border-radius: 0;\n  border-radius: 0;\n  -webkit-border-top-left-radius: 3px;\n  -webkit-border-bottom-left-radius: 3px;\n  -moz-border-radius-topleft: 3px;\n  -moz-border-radius-bottomleft: 3px;\n  border-top-left-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n\n.markdown-body .code div pre,\n.markdown-body .code div {\n  border: 0;\n  -webkit-border-radius: 0;\n  -moz-border-radius: 0;\n  border-radius: 0;\n  -webkit-border-top-right-radius: 3px;\n  -webkit-border-bottom-right-radius: 3px;\n  -moz-border-radius-topright: 3px;\n  -moz-border-radius-bottomright: 3px;\n  border-top-right-radius: 3px;\n  border-bottom-right-radius: 3px;\n}\n\n.markdown-body * {\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n\n.markdown-body input {\n  font: 13px Helvetica, arial, freesans, clean, sans-serif, \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n  line-height: 1.4;\n}\n\n.markdown-body a {\n  color: #4183c4;\n  text-decoration: none;\n}\n\n.markdown-body a:hover,\n.markdown-body a:focus,\n.markdown-body a:active {\n  text-decoration: underline;\n}\n\n.markdown-body hr {\n  height: 0;\n  margin: 15px 0;\n  overflow: hidden;\n  background: transparent;\n  border: 0;\n  border-bottom: 1px solid #ddd;\n}\n\n.markdown-body hr:before,\n.markdown-body hr:after {\n  display: table;\n  content: \" \";\n}\n\n.markdown-body hr:after {\n  clear: both;\n}\n\n.markdown-body h1,\n.markdown-body h2,\n.markdown-body h3,\n.markdown-body h4,\n.markdown-body h5,\n.markdown-body h6 {\n  margin-top: 15px;\n  margin-bottom: 15px;\n  line-height: 1.1;\n}\n\n.markdown-body h1 {\n  font-size: 30px;\n}\n\n.markdown-body h2 {\n  font-size: 21px;\n}\n\n.markdown-body h3 {\n  font-size: 16px;\n}\n\n.markdown-body h4 {\n  font-size: 14px;\n}\n\n.markdown-body h5 {\n  font-size: 12px;\n}\n\n.markdown-body h6 {\n  font-size: 11px;\n}\n\n.markdown-body blockquote {\n  margin: 0;\n}\n\n.markdown-body ul,\n.markdown-body ol {\n  padding: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body ol ol,\n.markdown-body ul ol {\n  list-style-type: lower-roman;\n}\n\n.markdown-body ul ul ol,\n.markdown-body ul ol ol,\n.markdown-body ol ul ol,\n.markdown-body ol ol ol {\n  list-style-type: lower-alpha;\n}\n\n.markdown-body dd {\n  margin-left: 0;\n}\n\n.markdown-body code,\n.markdown-body pre,\n.markdown-body samp {\n  font-family: Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  font-size: 12px;\n}\n\n.markdown-body pre {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body kbd {\n  background-color: #e7e7e7;\n  background-image: -moz-linear-gradient(#fefefe, #e7e7e7);\n  background-image: -webkit-linear-gradient(#fefefe, #e7e7e7);\n  background-image: linear-gradient(#fefefe, #e7e7e7);\n  background-repeat: repeat-x;\n  border-radius: 2px;\n  border: 1px solid #cfcfcf;\n  color: #000;\n  padding: 3px 5px;\n  line-height: 10px;\n  font: 11px Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  display: inline-block;\n}\n\n.markdown-body>*:first-child {\n  margin-top: 0 !important;\n}\n\n.markdown-body>*:last-child {\n  margin-bottom: 0 !important;\n}\n\n.markdown-body .headeranchor-link {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  display: block;\n  padding-right: 6px;\n  padding-left: 30px;\n  margin-left: -30px;\n}\n\n.markdown-body .headeranchor-link:focus {\n  outline: none;\n}\n\n.markdown-body h1,\n.markdown-body h2,\n.markdown-body h3,\n.markdown-body h4,\n.markdown-body h5,\n.markdown-body h6 {\n  position: relative;\n  margin-top: 1em;\n  margin-bottom: 16px;\n  font-weight: bold;\n  line-height: 1.4;\n}\n\n.markdown-body h1 .headeranchor,\n.markdown-body h2 .headeranchor,\n.markdown-body h3 .headeranchor,\n.markdown-body h4 .headeranchor,\n.markdown-body h5 .headeranchor,\n.markdown-body h6 .headeranchor {\n  display: none;\n  color: #000;\n  vertical-align: middle;\n}\n\n.markdown-body h1:hover .headeranchor-link,\n.markdown-body h2:hover .headeranchor-link,\n.markdown-body h3:hover .headeranchor-link,\n.markdown-body h4:hover .headeranchor-link,\n.markdown-body h5:hover .headeranchor-link,\n.markdown-body h6:hover .headeranchor-link {\n  height: 1em;\n  padding-left: 8px;\n  margin-left: -30px;\n  line-height: 1;\n  text-decoration: none;\n}\n\n.markdown-body h1:hover .headeranchor-link .headeranchor,\n.markdown-body h2:hover .headeranchor-link .headeranchor,\n.markdown-body h3:hover .headeranchor-link .headeranchor,\n.markdown-body h4:hover .headeranchor-link .headeranchor,\n.markdown-body h5:hover .headeranchor-link .headeranchor,\n.markdown-body h6:hover .headeranchor-link .headeranchor {\n  display: inline-block;\n}\n\n.markdown-body h1 {\n  padding-bottom: 0.3em;\n  font-size: 2.25em;\n  line-height: 1.2;\n  border-bottom: 1px solid #eee;\n}\n\n.markdown-body h2 {\n  padding-bottom: 0.3em;\n  font-size: 1.75em;\n  line-height: 1.225;\n  border-bottom: 1px solid #eee;\n}\n\n.markdown-body h3 {\n  font-size: 1.5em;\n  line-height: 1.43;\n}\n\n.markdown-body h4 {\n  font-size: 1.25em;\n}\n\n.markdown-body h5 {\n  font-size: 1em;\n}\n\n.markdown-body h6 {\n  font-size: 1em;\n  color: #777;\n}\n\n.markdown-body p,\n.markdown-body blockquote,\n.markdown-body ul,\n.markdown-body ol,\n.markdown-body dl,\n.markdown-body table,\n.markdown-body pre,\n.markdown-body .admonition {\n  margin-top: 0;\n  margin-bottom: 16px;\n}\n\n.markdown-body hr {\n  height: 4px;\n  padding: 0;\n  margin: 16px 0;\n  background-color: #e7e7e7;\n  border: 0 none;\n}\n\n.markdown-body ul,\n.markdown-body ol {\n  padding-left: 2em;\n}\n\n.markdown-body ul ul,\n.markdown-body ul ol,\n.markdown-body ol ol,\n.markdown-body ol ul {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body li>p {\n  margin-top: 16px;\n}\n\n.markdown-body dl {\n  padding: 0;\n}\n\n.markdown-body dl dt {\n  padding: 0;\n  margin-top: 16px;\n  font-size: 1em;\n  font-style: italic;\n  font-weight: bold;\n}\n\n.markdown-body dl dd {\n  padding: 0 16px;\n  margin-bottom: 16px;\n}\n\n.markdown-body blockquote {\n  padding: 0 15px;\n  color: #777;\n  border-left: 4px solid #ddd;\n}\n\n.markdown-body blockquote>:first-child {\n  margin-top: 0;\n}\n\n.markdown-body blockquote>:last-child {\n  margin-bottom: 0;\n}\n\n.markdown-body table {\n  display: block;\n  width: 100%;\n  overflow: auto;\n  word-break: normal;\n  word-break: keep-all;\n}\n\n.markdown-body table th {\n  font-weight: bold;\n}\n\n.markdown-body table th,\n.markdown-body table td {\n  padding: 6px 13px;\n  border: 1px solid #ddd;\n}\n\n.markdown-body table tr {\n  background-color: #fff;\n  border-top: 1px solid #ccc;\n}\n\n.markdown-body table tr:nth-child(2n) {\n  background-color: #f8f8f8;\n}\n\n.markdown-body img {\n  max-width: 100%;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n\n.markdown-body code,\n.markdown-body samp {\n  padding: 0;\n  padding-top: 0.2em;\n  padding-bottom: 0.2em;\n  margin: 0;\n  font-size: 85%;\n  background-color: rgba(0,0,0,0.04);\n  border-radius: 3px;\n}\n\n.markdown-body code:before,\n.markdown-body code:after {\n  letter-spacing: -0.2em;\n  content: \"\\00a0\";\n}\n\n.markdown-body pre>code {\n  padding: 0;\n  margin: 0;\n  font-size: 100%;\n  word-break: normal;\n  white-space: pre;\n  background: transparent;\n  border: 0;\n}\n\n.markdown-body .codehilite {\n  margin-bottom: 16px;\n}\n\n.markdown-body .codehilite pre,\n.markdown-body pre {\n  padding: 16px;\n  overflow: auto;\n  font-size: 85%;\n  line-height: 1.45;\n  background-color: #f7f7f7;\n  border-radius: 3px;\n}\n\n.markdown-body .codehilite pre {\n  margin-bottom: 0;\n  word-break: normal;\n}\n\n.markdown-body pre {\n  word-wrap: normal;\n}\n\n.markdown-body pre code {\n  display: inline;\n  max-width: initial;\n  padding: 0;\n  margin: 0;\n  overflow: initial;\n  line-height: inherit;\n  word-wrap: normal;\n  background-color: transparent;\n  border: 0;\n}\n\n.markdown-body pre code:before,\n.markdown-body pre code:after {\n  content: normal;\n}\n\n/* Admonition */\n.markdown-body .admonition {\n  -webkit-border-radius: 3px;\n  -moz-border-radius: 3px;\n  position: relative;\n  border-radius: 3px;\n  border: 1px solid #e0e0e0;\n  border-left: 6px solid #333;\n  padding: 10px 10px 10px 30px;\n}\n\n.markdown-body .admonition table {\n  color: #333;\n}\n\n.markdown-body .admonition p {\n  padding: 0;\n}\n\n.markdown-body .admonition-title {\n  font-weight: bold;\n  margin: 0;\n}\n\n.markdown-body .admonition>.admonition-title {\n  color: #333;\n}\n\n.markdown-body .attention>.admonition-title {\n  color: #a6d796;\n}\n\n.markdown-body .caution>.admonition-title {\n  color: #d7a796;\n}\n\n.markdown-body .hint>.admonition-title {\n  color: #96c6d7;\n}\n\n.markdown-body .danger>.admonition-title {\n  color: #c25f77;\n}\n\n.markdown-body .question>.admonition-title {\n  color: #96a6d7;\n}\n\n.markdown-body .note>.admonition-title {\n  color: #d7c896;\n}\n\n.markdown-body .admonition:before,\n.markdown-body .attention:before,\n.markdown-body .caution:before,\n.markdown-body .hint:before,\n.markdown-body .danger:before,\n.markdown-body .question:before,\n.markdown-body .note:before {\n  font: normal normal 16px fontawesome-mini;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  line-height: 1.5;\n  color: #333;\n  position: absolute;\n  left: 0;\n  top: 0;\n  padding-top: 10px;\n  padding-left: 10px;\n}\n\n.markdown-body .admonition:before {\n  content: \"\\f056\\00a0\";\n  color: 333;\n}\n\n.markdown-body .attention:before {\n  content: \"\\f058\\00a0\";\n  color: #a6d796;\n}\n\n.markdown-body .caution:before {\n  content: \"\\f06a\\00a0\";\n  color: #d7a796;\n}\n\n.markdown-body .hint:before {\n  content: \"\\f05a\\00a0\";\n  color: #96c6d7;\n}\n\n.markdown-body .danger:before {\n  content: \"\\f057\\00a0\";\n  color: #c25f77;\n}\n\n.markdown-body .question:before {\n  content: \"\\f059\\00a0\";\n  color: #96a6d7;\n}\n\n.markdown-body .note:before {\n  content: \"\\f040\\00a0\";\n  color: #d7c896;\n}\n\n.markdown-body .admonition::after {\n  content: normal;\n}\n\n.markdown-body .attention {\n  border-left: 6px solid #a6d796;\n}\n\n.markdown-body .caution {\n  border-left: 6px solid #d7a796;\n}\n\n.markdown-body .hint {\n  border-left: 6px solid #96c6d7;\n}\n\n.markdown-body .danger {\n  border-left: 6px solid #c25f77;\n}\n\n.markdown-body .question {\n  border-left: 6px solid #96a6d7;\n}\n\n.markdown-body .note {\n  border-left: 6px solid #d7c896;\n}\n\n.markdown-body .admonition>*:first-child {\n  margin-top: 0 !important;\n}\n\n.markdown-body .admonition>*:last-child {\n  margin-bottom: 0 !important;\n}\n\n/* progress bar*/\n.markdown-body .progress {\n  display: block;\n  width: 300px;\n  margin: 10px 0;\n  height: 24px;\n  -webkit-border-radius: 3px;\n  -moz-border-radius: 3px;\n  border-radius: 3px;\n  background-color: #ededed;\n  position: relative;\n  box-shadow: inset -1px 1px 3px rgba(0, 0, 0, .1);\n}\n\n.markdown-body .progress-label {\n  position: absolute;\n  text-align: center;\n  font-weight: bold;\n  width: 100%; margin: 0;\n  line-height: 24px;\n  color: #333;\n  text-shadow: 1px 1px 0 #fefefe, -1px -1px 0 #fefefe, -1px 1px 0 #fefefe, 1px -1px 0 #fefefe, 0 1px 0 #fefefe, 0 -1px 0 #fefefe, 1px 0 0 #fefefe, -1px 0 0 #fefefe, 1px 1px 2px #000;\n  -webkit-font-smoothing: antialiased !important;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n.markdown-body .progress-bar {\n  height: 24px;\n  float: left;\n  -webkit-border-radius: 3px;\n  -moz-border-radius: 3px;\n  border-radius: 3px;\n  background-color: #96c6d7;\n  box-shadow: inset 0 1px 0 rgba(255, 255, 255, .5), inset 0 -1px 0 rgba(0, 0, 0, .1);\n  background-size: 30px 30px;\n  background-image: -webkit-linear-gradient(\n    135deg, rgba(255, 255, 255, .4) 27%,\n    transparent 27%,\n    transparent 52%, rgba(255, 255, 255, .4) 52%,\n    rgba(255, 255, 255, .4) 77%,\n    transparent 77%, transparent\n  );\n  background-image: -moz-linear-gradient(\n    135deg,\n    rgba(255, 255, 255, .4) 27%, transparent 27%,\n    transparent 52%, rgba(255, 255, 255, .4) 52%,\n    rgba(255, 255, 255, .4) 77%, transparent 77%,\n    transparent\n  );\n  background-image: -ms-linear-gradient(\n    135deg,\n    rgba(255, 255, 255, .4) 27%, transparent 27%,\n    transparent 52%, rgba(255, 255, 255, .4) 52%,\n    rgba(255, 255, 255, .4) 77%, transparent 77%,\n    transparent\n  );\n  background-image: -o-linear-gradient(\n    135deg,\n    rgba(255, 255, 255, .4) 27%, transparent 27%,\n    transparent 52%, rgba(255, 255, 255, .4) 52%,\n    rgba(255, 255, 255, .4) 77%, transparent 77%,\n    transparent\n  );\n  background-image: linear-gradient(\n    135deg,\n    rgba(255, 255, 255, .4) 27%, transparent 27%,\n    transparent 52%, rgba(255, 255, 255, .4) 52%,\n    rgba(255, 255, 255, .4) 77%, transparent 77%,\n    transparent\n  );\n}\n\n.markdown-body .progress-100plus .progress-bar {\n  background-color: #a6d796;\n}\n\n.markdown-body .progress-80plus .progress-bar {\n  background-color: #c6d796;\n}\n\n.markdown-body .progress-60plus .progress-bar {\n  background-color: #d7c896;\n}\n\n.markdown-body .progress-40plus .progress-bar {\n  background-color: #d7a796;\n}\n\n.markdown-body .progress-20plus .progress-bar {\n  background-color: #d796a6;\n}\n\n.markdown-body .progress-0plus .progress-bar {\n  background-color: #c25f77;\n}\n\n.markdown-body .candystripe-animate .progress-bar{\n  -webkit-animation: animate-stripes 3s linear infinite;\n  -moz-animation: animate-stripes 3s linear infinite;\n  animation: animate-stripes 3s linear infinite;\n}\n\n@-webkit-keyframes animate-stripes {\n  0% {\n    background-position: 0 0;\n  }\n\n  100% {\n    background-position: 60px 0;\n  }\n}\n\n@-moz-keyframes animate-stripes {\n  0% {\n    background-position: 0 0;\n  }\n\n  100% {\n    background-position: 60px 0;\n  }\n}\n\n@keyframes animate-stripes {\n  0% {\n    background-position: 0 0;\n  }\n\n  100% {\n    background-position: 60px 0;\n  }\n}\n\n.markdown-body .gloss .progress-bar {\n  box-shadow:\n    inset 0 4px 12px rgba(255, 255, 255, .7),\n    inset 0 -12px 0 rgba(0, 0, 0, .05);\n}\n\n/* Multimarkdown Critic Blocks */\n.markdown-body .critic_mark {\n  background: #ff0;\n}\n\n.markdown-body .critic_delete {\n  color: #c82829;\n  text-decoration: line-through;\n}\n\n.markdown-body .critic_insert {\n  color: #718c00 ;\n  text-decoration: underline;\n}\n\n.markdown-body .critic_comment {\n  color: #8e908c;\n  font-style: italic;\n}\n\n.markdown-body .headeranchor {\n  font: normal normal 16px octicons-anchor;\n  line-height: 1;\n  display: inline-block;\n  text-decoration: none;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n\n.headeranchor:before {\n  content: '\\f05c';\n}\n\n.markdown-body .task-list-item {\n  list-style-type: none;\n}\n\n.markdown-body .task-list-item+.task-list-item {\n  margin-top: 3px;\n}\n\n.markdown-body .task-list-item input {\n  margin: 0 4px 0.25em -20px;\n  vertical-align: middle;\n}\n\n/* Media */\n@media only screen and (min-width: 480px) {\n  .markdown-body {\n    font-size:14px;\n  }\n}\n\n@media only screen and (min-width: 768px) {\n  .markdown-body {\n    font-size:16px;\n  }\n}\n\n@media print {\n  .markdown-body * {\n    background: transparent !important;\n    color: black !important;\n    filter:none !important;\n    -ms-filter: none !important;\n  }\n\n  .markdown-body {\n    font-size:12pt;\n    max-width:100%;\n    outline:none;\n    border: 0;\n  }\n\n  .markdown-body a,\n  .markdown-body a:visited {\n    text-decoration: underline;\n  }\n\n  .markdown-body .headeranchor-link {\n    display: none;\n  }\n\n  .markdown-body a[href]:after {\n    content: \" (\" attr(href) \")\";\n  }\n\n  .markdown-body abbr[title]:after {\n    content: \" (\" attr(title) \")\";\n  }\n\n  .markdown-body .ir a:after,\n  .markdown-body a[href^=\"javascript:\"]:after,\n  .markdown-body a[href^=\"#\"]:after {\n    content: \"\";\n  }\n\n  .markdown-body pre {\n    white-space: pre;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n  }\n\n  .markdown-body pre,\n  .markdown-body blockquote {\n    border: 1px solid #999;\n    padding-right: 1em;\n    page-break-inside: avoid;\n  }\n\n  .markdown-body .progress,\n  .markdown-body .progress-bar {\n    -moz-box-shadow: none;\n    -webkit-box-shadow: none;\n    box-shadow: none;\n  }\n\n  .markdown-body .progress {\n    border: 1px solid #ddd;\n  }\n\n  .markdown-body .progress-bar {\n    height: 22px;\n    border-right: 1px solid #ddd;\n  }\n\n  .markdown-body tr,\n  .markdown-body img {\n    page-break-inside: avoid;\n  }\n\n  .markdown-body img {\n    max-width: 100% !important;\n  }\n\n  .markdown-body p,\n  .markdown-body h2,\n  .markdown-body h3 {\n    orphans: 3;\n    widows: 3;\n  }\n\n  .markdown-body h2,\n  .markdown-body h3 {\n    page-break-after: avoid;\n  }\n}\n</style><title>tomcat access log 格式设置</title></head><body><article class=\"markdown-body\"><h2 id=\"tomcat-access-log\"><a name=\"user-content-tomcat-access-log\" href=\"#tomcat-access-log\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>Tomcat access log 日志格式</h2>\n<p>文件位置: <code>conf/server.xml</code></p>\n<p>默认配置</p>\n<pre><code class=\"xml\">        &lt;!-- Access log processes all example.\n             Documentation at: /docs/config/valve.html\n             Note: The pattern used is equivalent to using pattern=&quot;common&quot; --&gt;\n        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;\n               prefix=&quot;localhost_access_log.&quot; suffix=&quot;.txt&quot;\n               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;\n</code></pre>\n\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%a</td>\n<td>Remote IP address</td>\n</tr>\n<tr>\n<td>%A</td>\n<td>Local IP address</td>\n</tr>\n<tr>\n<td>%b</td>\n<td>Bytes sent, excluding HTTP headers, or &lsquo;-&lsquo; if zero</td>\n</tr>\n<tr>\n<td>%B</td>\n<td>Bytes sent, excluding HTTP headers</td>\n</tr>\n<tr>\n<td>%h</td>\n<td>Remote host name (or IP address if enableLookups for the connector is false)</td>\n</tr>\n<tr>\n<td>%H</td>\n<td>Request protocol</td>\n</tr>\n<tr>\n<td>%l</td>\n<td>Remote logical username from identd (always returns &lsquo;-&lsquo;)</td>\n</tr>\n<tr>\n<td>%m</td>\n<td>Request method (GET, POST, etc.)</td>\n</tr>\n<tr>\n<td>%p</td>\n<td>Local port on which this request was received</td>\n</tr>\n<tr>\n<td>%q</td>\n<td>Query string (prepended with a &lsquo;?&rsquo; if it exists)</td>\n</tr>\n<tr>\n<td>%r</td>\n<td>First line of the request (method and request URI)</td>\n</tr>\n<tr>\n<td>%s</td>\n<td>HTTP status code of the response</td>\n</tr>\n<tr>\n<td>%S</td>\n<td>User session ID</td>\n</tr>\n<tr>\n<td>%t</td>\n<td>Date and time, in Common Log Format</td>\n</tr>\n<tr>\n<td>%u</td>\n<td>Remote user that was authenticated (if any), else &lsquo;-&lsquo;</td>\n</tr>\n<tr>\n<td>%U</td>\n<td>Requested URL path</td>\n</tr>\n<tr>\n<td>%v</td>\n<td>Local server name</td>\n</tr>\n<tr>\n<td>%D</td>\n<td>Time taken to process the request, in millis</td>\n</tr>\n<tr>\n<td>%T</td>\n<td>Time taken to process the request, in seconds</td>\n</tr>\n<tr>\n<td>%F</td>\n<td>Time taken to commit the response, in millis</td>\n</tr>\n<tr>\n<td>%I</td>\n<td>Current request thread name (can compare later with stacktraces)</td>\n</tr>\n</tbody>\n</table>\n<p>默认的配置打出来的access日志如下：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>127.0.0.1</td>\n<td>-</td>\n<td>-</td>\n<td>[07/Oct/2016:22:31:56 +0800]</td>\n<td>&ldquo;GET /dubbo/ HTTP/1.1&rdquo;</td>\n<td>404</td>\n<td>963</td>\n</tr>\n<tr>\n<td>远程IP</td>\n<td>logical username</td>\n<td>remote user</td>\n<td>时间和日期</td>\n<td>http请求的第一行</td>\n<td>状态码</td>\n<td>除去http头的发送大小</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"headercookiesession\"><a name=\"user-content-headercookiesession\" href=\"#headercookiesession\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>header、cookie、session其他字段的支持</h3>\n<blockquote>\n<p>There is also support to write information incoming or outgoing headers, cookies, session or request attributes and special timestamp formats. It is modeled after the Apache HTTP Server log configuration syntax:</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td xxx=\"xxx\">%</td>\n<td>for incoming headers</td>\n</tr>\n<tr>\n<td xxx=\"xxx\">%</td>\n<td>for outgoing response headers</td>\n</tr>\n<tr>\n<td xxx=\"xxx\">%</td>\n<td>for a specific cookie</td>\n</tr>\n<tr>\n<td xxx=\"xxx\">%</td>\n<td>xxx is an attribute in the ServletRequest</td>\n</tr>\n<tr>\n<td xxx=\"xxx\">%</td>\n<td>xxx is an attribute in the HttpSession</td>\n</tr>\n<tr>\n<td xxx=\"xxx\">%</td>\n<td>xxx is an enhanced SimpleDateFormat pattern</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"_1\"><a name=\"user-content-_1\" href=\"#_1\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>参考</h2>\n<ol>\n<li><a href=\"http://tomcat.apache.org/tomcat-7.0-doc/config/valve.html\">The Valve Component</a></li>\n</ol></article></body></html>","source":"_posts/tomcat-access-log.html","raw":"<!DOCTYPE html><html><head><meta charset=\"utf-8\"><meta name=\"category\" content=\"tomcat\">\n<meta name=\"tags\" content=\"access-log\">\n<meta name=\"date\" content=\"2016-12-23 00:43:10\"><style>body {\n  width: 45em;\n  border: 1px solid #ddd;\n  outline: 1300px solid #fff;\n  margin: 16px auto;\n}\n\nbody .markdown-body\n{\n  padding: 30px;\n}\n\n@font-face {\n  font-family: fontawesome-mini;\n  src: url(data:font/woff;charset=utf-8;base64,d09GRgABAAAAAAzUABAAAAAAFNgAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAABbAAAABwAAAAcZMzaOEdERUYAAAGIAAAAHQAAACAAOQAET1MvMgAAAagAAAA+AAAAYHqhde9jbWFwAAAB6AAAAFIAAAFa4azkLWN2dCAAAAI8AAAAKAAAACgFgwioZnBnbQAAAmQAAAGxAAACZVO0L6dnYXNwAAAEGAAAAAgAAAAIAAAAEGdseWYAAAQgAAAFDgAACMz7eroHaGVhZAAACTAAAAAwAAAANgWEOEloaGVhAAAJYAAAAB0AAAAkDGEGa2htdHgAAAmAAAAAEwAAADBEgAAQbG9jYQAACZQAAAAaAAAAGgsICJBtYXhwAAAJsAAAACAAAAAgASgBD25hbWUAAAnQAAACZwAABOD4no+3cG9zdAAADDgAAABsAAAAmF+yXM9wcmVwAAAMpAAAAC4AAAAusPIrFAAAAAEAAAAAyYlvMQAAAADLVHQgAAAAAM/u9uZ4nGNgZGBg4ANiCQYQYGJgBEJuIGYB8xgABMMAPgAAAHicY2Bm42OcwMDKwMLSw2LMwMDQBqGZihmiwHycoKCyqJjB4YPDh4NsDP+BfNb3DIuAFCOSEgUGRgAKDgt4AAB4nGNgYGBmgGAZBkYGEAgB8hjBfBYGCyDNxcDBwMTA9MHhQ9SHrA8H//9nYACyQyFs/sP86/kX8HtB9UIBIxsDXICRCUgwMaACRoZhDwA3fxKSAAAAAAHyAHABJQB/AIEAdAFGAOsBIwC/ALgAxACGAGYAugBNACcA/wCIeJxdUbtOW0EQ3Q0PA4HE2CA52hSzmZDGe6EFCcTVjWJkO4XlCGk3cpGLcQEfQIFEDdqvGaChpEibBiEXSHxCPiESM2uIojQ7O7NzzpkzS8qRqnfpa89T5ySQwt0GzTb9Tki1swD3pOvrjYy0gwdabGb0ynX7/gsGm9GUO2oA5T1vKQ8ZTTuBWrSn/tH8Cob7/B/zOxi0NNP01DoJ6SEE5ptxS4PvGc26yw/6gtXhYjAwpJim4i4/plL+tzTnasuwtZHRvIMzEfnJNEBTa20Emv7UIdXzcRRLkMumsTaYmLL+JBPBhcl0VVO1zPjawV2ys+hggyrNgQfYw1Z5DB4ODyYU0rckyiwNEfZiq8QIEZMcCjnl3Mn+pED5SBLGvElKO+OGtQbGkdfAoDZPs/88m01tbx3C+FkcwXe/GUs6+MiG2hgRYjtiKYAJREJGVfmGGs+9LAbkUvvPQJSA5fGPf50ItO7YRDyXtXUOMVYIen7b3PLLirtWuc6LQndvqmqo0inN+17OvscDnh4Lw0FjwZvP+/5Kgfo8LK40aA4EQ3o3ev+iteqIq7wXPrIn07+xWgAAAAABAAH//wAPeJyFlctvG1UUh+/12DPN1B7P3JnYjj2Ox4/MuDHxJH5N3UdaEUQLqBIkfQQioJWQ6AMEQkIqsPGCPwA1otuWSmTBhjtps2ADWbJg3EpIXbGouqSbCraJw7kzNo2dRN1cnXN1ZvT7zuuiMEI7ncizyA0URofRBJpCdbQuIFShYY+GZRrxMDVtih5TwQPHtXDFFSIKoWIbuREBjLH27Ny4MsbVx+uOJThavebgVrNRLAiYx06rXsvhxLgWx9xpfHdrs/ekc2Pl2cpPCVEITQpwbj8VQhfXSq2m+Wxqaq2D73Kne5e3NjHqQNj3CRYlJlgUl/jRNP+2Gs2pNYRQiOnmUaQDqm30KqKiTTWPWjboxnTWpvgxjXo0KrtZXAHt7hwIz0YVcj88JnKlJKi3NPAwLyDwZudSmJSMMJFDYaOkaol6XtESx3Gt1VTytdZJ3DCLeaVhVnCBH1fycHTxFXwPX+l2e3d6H/TufGGmMTLTnbSJUdo00zuBswMO/nl3YLeL/wnu9/limCuD3vC54h5NBVz6Li414AI8Vx3iiosKcQXUbrvhFFiYb++HN4DaF4XzFW0fIN4XDWJ3a3XQoq9V8WiyRmdsatV9xUcHims1JloH0YUa090G3Tro3mC6c01f+YwCPquINr1PTaCP6rVTOOmf0GE2dBc7zWIhji3/5MchSuBHgDbU99RMWt3YUNMZMJmx92YP6NsHx/5/M1yvInpnkIOM3Z8fA3JQ2lW1RFC1KaBPDFXNAHYYvGy73aYZZZ3HifbeuiVZCpwA3oQBs0wGPYJbJfg60xrKEbKiNtTe1adwrpBRwlAuQ3q3VRaX0QmQ9a49BTSCuF1MLfQ6+tinOubRBZuWPNoMevGMT+V41KitO1is3D/tpMcq1JHZqDHGs8DoYGDkxJgKjHROeTCmhZvzPm9pod+ltKm4PN7Dyvvldlpsg8D+4AUJZ3F/JBstZz7cbFRxsaAGV6yX/dkcycWf8eS3QlQea+YLjdm3yrOnrhFpUyKVvFE4lpv4bO3Svx/6F/4xmiDu/RT5iI++lko18mY1oX+5UGKR6kmVjM/Zb76yfHtxy+h/SyQ0lLdpdKy/lWB6szatetQJ8nZ80A2Qt6ift6gJeavU3BO4gtxs/KCtNPVibCtYCWY3SIlSBPKXZALXiIR9oZeJ1AuMyxLpHIy/yO7vSiSE+kZvk0ihJ30HgHfzZtEMmvV58x6dtqns0XTAW7Vdm4HJ04OCp/crOO7rd9SGxQAE/mVA9xRN+kVSMRFF6S9JFGUtthkjBA5tFCWc2l4V43Ex9GmUP3SI37Jjmir9KqlaDJ4S4JB3vuM/jzyH1+8MuoZ+QGzfnvPoJb96cZlWjMcKLfgDwB7E634JTY+asjsPzS5CiVnEWY+KsrsIN5rn3mAPjqmQBxGjcGKB9f9ZxY3mYC2L85CJ2FXIxKKyHk+dg0FHbuEc7D5NzWUX32WxFcWNGRAbvwSx0RmIXVDuYySafluQBmzA/ssqJAMLnli+WIC90Gw4lm85wcp0qjArEDPJJV/sSx4P9ungTpgMw5gVC1XO4uULq0s3v1rqLi0vX/z65vlH50f8T/RHmSPTk5xxWBWOluMT6WiOy+tdvWxlV/XQb3o3c6Ssr+r6I708GsX9/nzp1tKFh0s3v7m4vAy/Hnb/KMOvc1wump6Il48K6mGDy02X9Yd65pa+nQIjk76lWxCkG8NBCP0HQS9IpAAAeJxjYGRgYGBhcCrq214Qz2/zlUGenQEEzr/77oug/zewFbB+AHI5GJhAogBwKQ0qeJxjYGRgYH3/P46BgZ0BBNgKGBgZUAEPAE/7At0AAAB4nGNngAB2IGYjhBsYBAAIYADVAAAAAAAAAAAAAFwAyAEeAaACCgKmAx4DggRmAAAAAQAAAAwAagAEAAAAAAACAAEAAgAWAAABAAChAAAAAHiclZI7bxQxFIWPd/JkUYQChEhIyAVKgdBMskm1QkKrRETpQiLRUczueB/K7HhlOxttg8LvoKPgP9DxFxANDR0tHRWi4NjrPIBEgh1p/dm+vufcawNYFWsQmP6e4jSyQB2fI9cwj++RE9wTjyPP4LYoI89iWbyLPIe6+Bh5Hs9rryMv4GbtW+RF3EhuRa7jbrIbeQkPkjdUETOLnL0Kip4FVvAhco1RXyMnSPEz8gzWxE7kWTwUp5HnsCLeR57HW/El8gJWa58iL+JO7UfkOh4l9yMv4UnyEtvQGGECgwF66MNBooF1bGCL1ELB/TYU+ZBRlvsKQ44Se6jQ4a7hef+fh72Crv25kp+8lNWGmeKoOI5jJLb1aGIGvb6TjfWNLdkqdFvJw4l1amjlXtXRZqRN7lSRylZZyhBqpVFWmTEXgWfUrpi/hZOQXdOd4rKuXOtEWT3k5IArPRzTUU5tHKjecZkTpnVbNOnt6jzN8240GD4xtikvZW56043rPMg/dS+dlOceXoR+WPbJ55Dsekq1lJpnypsMUsYOdCW30o103Ytu/lvh+5RWFLfBjm9/N8hJntPhvx92rnoE/kyHdGasGy754kw36vsVf/lFeBi+0COu+cfgQr42G3CRpeLoZ53gmfe3X6rcKt5oVxnptHR9JS8ehVUd5wvvahN2uqxOOpMXapibI5k7Zwbt4xBSaTfoKBufhAnO/uqNcfK8OTs0OQ6l7JIqFjDhYj5WcjevCnI/1DDiI8j4ndWb/5YzDZWh79yomWXeXj7Nnw70/2TIeFPTrlSh89k1ObOSRVZWZfgF0r/zJQB4nG2JUQuCQBCEd07TTg36fb2IyBaLd3vWaUh/vmSJnvpgmG8YcmS8X3Shf3R7QA4OBUocUKHGER5NNbOOEvwc1txnuWkTRb/aPjimJ5vXabI+3VfOiyS15UWvyezM2xiGOPyuMohOH8O8JiO4Af+FsAGNAEuwCFBYsQEBjlmxRgYrWCGwEFlLsBRSWCGwgFkdsAYrXFhZsBQrAAA=) format('woff');\n}\n\n@font-face {\n  font-family: octicons-anchor;\n  src: url(data:font/woff;charset=utf-8;base64,d09GRgABAAAAAAYcAA0AAAAACjQAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAABMAAAABwAAAAca8vGTk9TLzIAAAFMAAAARAAAAFZG1VHVY21hcAAAAZAAAAA+AAABQgAP9AdjdnQgAAAB0AAAAAQAAAAEACICiGdhc3AAAAHUAAAACAAAAAj//wADZ2x5ZgAAAdwAAADRAAABEKyikaNoZWFkAAACsAAAAC0AAAA2AtXoA2hoZWEAAALgAAAAHAAAACQHngNFaG10eAAAAvwAAAAQAAAAEAwAACJsb2NhAAADDAAAAAoAAAAKALIAVG1heHAAAAMYAAAAHwAAACABEAB2bmFtZQAAAzgAAALBAAAFu3I9x/Nwb3N0AAAF/AAAAB0AAAAvaoFvbwAAAAEAAAAAzBdyYwAAAADP2IQvAAAAAM/bz7t4nGNgZGFgnMDAysDB1Ml0hoGBoR9CM75mMGLkYGBgYmBlZsAKAtJcUxgcPsR8iGF2+O/AEMPsznAYKMwIkgMA5REMOXicY2BgYGaAYBkGRgYQsAHyGMF8FgYFIM0ChED+h5j//yEk/3KoSgZGNgYYk4GRCUgwMaACRoZhDwCs7QgGAAAAIgKIAAAAAf//AAJ4nHWMMQrCQBBF/0zWrCCIKUQsTDCL2EXMohYGSSmorScInsRGL2DOYJe0Ntp7BK+gJ1BxF1stZvjz/v8DRghQzEc4kIgKwiAppcA9LtzKLSkdNhKFY3HF4lK69ExKslx7Xa+vPRVS43G98vG1DnkDMIBUgFN0MDXflU8tbaZOUkXUH0+U27RoRpOIyCKjbMCVejwypzJJG4jIwb43rfl6wbwanocrJm9XFYfskuVC5K/TPyczNU7b84CXcbxks1Un6H6tLH9vf2LRnn8Ax7A5WQAAAHicY2BkYGAA4teL1+yI57f5ysDNwgAC529f0kOmWRiYVgEpDgYmEA8AUzEKsQAAAHicY2BkYGB2+O/AEMPCAAJAkpEBFbAAADgKAe0EAAAiAAAAAAQAAAAEAAAAAAAAKgAqACoAiAAAeJxjYGRgYGBhsGFgYgABEMkFhAwM/xn0QAIAD6YBhwB4nI1Ty07cMBS9QwKlQapQW3VXySvEqDCZGbGaHULiIQ1FKgjWMxknMfLEke2A+IJu+wntrt/QbVf9gG75jK577Lg8K1qQPCfnnnt8fX1NRC/pmjrk/zprC+8D7tBy9DHgBXoWfQ44Av8t4Bj4Z8CLtBL9CniJluPXASf0Lm4CXqFX8Q84dOLnMB17N4c7tBo1AS/Qi+hTwBH4rwHHwN8DXqQ30XXAS7QaLwSc0Gn8NuAVWou/gFmnjLrEaEh9GmDdDGgL3B4JsrRPDU2hTOiMSuJUIdKQQayiAth69r6akSSFqIJuA19TrzCIaY8sIoxyrNIrL//pw7A2iMygkX5vDj+G+kuoLdX4GlGK/8Lnlz6/h9MpmoO9rafrz7ILXEHHaAx95s9lsI7AHNMBWEZHULnfAXwG9/ZqdzLI08iuwRloXE8kfhXYAvE23+23DU3t626rbs8/8adv+9DWknsHp3E17oCf+Z48rvEQNZ78paYM38qfk3v/u3l3u3GXN2Dmvmvpf1Srwk3pB/VSsp512bA/GG5i2WJ7wu430yQ5K3nFGiOqgtmSB5pJVSizwaacmUZzZhXLlZTq8qGGFY2YcSkqbth6aW1tRmlaCFs2016m5qn36SbJrqosG4uMV4aP2PHBmB3tjtmgN2izkGQyLWprekbIntJFing32a5rKWCN/SdSoga45EJykyQ7asZvHQ8PTm6cslIpwyeyjbVltNikc2HTR7YKh9LBl9DADC0U/jLcBZDKrMhUBfQBvXRzLtFtjU9eNHKin0x5InTqb8lNpfKv1s1xHzTXRqgKzek/mb7nB8RZTCDhGEX3kK/8Q75AmUM/eLkfA+0Hi908Kx4eNsMgudg5GLdRD7a84npi+YxNr5i5KIbW5izXas7cHXIMAau1OueZhfj+cOcP3P8MNIWLyYOBuxL6DRylJ4cAAAB4nGNgYoAALjDJyIAOWMCiTIxMLDmZedkABtIBygAAAA==) format('woff');\n}\n\n.markdown-body {\n  font-family: sans-serif;\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n  color: #333333;\n  overflow: hidden;\n  font-family: \"Helvetica Neue\", Helvetica, \"Segoe UI\", Arial, freesans, sans-serif;\n  font-size: 16px;\n  line-height: 1.6;\n  word-wrap: break-word;\n}\n\n.markdown-body a {\n  background: transparent;\n}\n\n.markdown-body a:active,\n.markdown-body a:hover {\n  outline: 0;\n}\n\n.markdown-body b,\n.markdown-body strong {\n  font-weight: bold;\n}\n\n.markdown-body mark {\n  background: #ff0;\n  color: #000;\n  font-style: italic;\n  font-weight: bold;\n}\n\n.markdown-body sub,\n.markdown-body sup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n.markdown-body sup {\n  top: -0.5em;\n}\n.markdown-body sub {\n  bottom: -0.25em;\n}\n\n.markdown-body h1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n.markdown-body img {\n  border: 0;\n}\n\n.markdown-body hr {\n  -moz-box-sizing: content-box;\n  box-sizing: content-box;\n  height: 0;\n}\n\n.markdown-body pre {\n  overflow: auto;\n}\n\n.markdown-body code,\n.markdown-body kbd,\n.markdown-body pre,\n.markdown-body samp {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n\n.markdown-body input {\n  color: inherit;\n  font: inherit;\n  margin: 0;\n}\n\n.markdown-body html input[disabled] {\n  cursor: default;\n}\n\n.markdown-body input {\n  line-height: normal;\n}\n\n.markdown-body input[type=\"checkbox\"] {\n  box-sizing: border-box;\n  padding: 0;\n}\n\n.markdown-body table {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\n.markdown-body td,\n.markdown-body th {\n  padding: 0;\n}\n\n.markdown-body .codehilitetable {\n  border: 0;\n  border-spacing: 0;\n}\n\n.markdown-body .codehilitetable tr {\n  border: 0;\n}\n\n.markdown-body .codehilitetable pre,\n.markdown-body .codehilitetable div.codehilite {\n  margin: 0;\n}\n\n.markdown-body .linenos,\n.markdown-body .code,\n.markdown-body .codehilitetable td {\n  border: 0;\n  padding: 0;\n}\n\n.markdown-body td:not(.linenos) .linenodiv {\n  padding: 0 !important;\n}\n\n.markdown-body .code {\n  width: 100%;\n}\n\n.markdown-body .linenos div pre,\n.markdown-body .linenodiv pre,\n.markdown-body .linenodiv {\n  border: 0;\n  -webkit-border-radius: 0;\n  -moz-border-radius: 0;\n  border-radius: 0;\n  -webkit-border-top-left-radius: 3px;\n  -webkit-border-bottom-left-radius: 3px;\n  -moz-border-radius-topleft: 3px;\n  -moz-border-radius-bottomleft: 3px;\n  border-top-left-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n\n.markdown-body .code div pre,\n.markdown-body .code div {\n  border: 0;\n  -webkit-border-radius: 0;\n  -moz-border-radius: 0;\n  border-radius: 0;\n  -webkit-border-top-right-radius: 3px;\n  -webkit-border-bottom-right-radius: 3px;\n  -moz-border-radius-topright: 3px;\n  -moz-border-radius-bottomright: 3px;\n  border-top-right-radius: 3px;\n  border-bottom-right-radius: 3px;\n}\n\n.markdown-body * {\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n\n.markdown-body input {\n  font: 13px Helvetica, arial, freesans, clean, sans-serif, \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n  line-height: 1.4;\n}\n\n.markdown-body a {\n  color: #4183c4;\n  text-decoration: none;\n}\n\n.markdown-body a:hover,\n.markdown-body a:focus,\n.markdown-body a:active {\n  text-decoration: underline;\n}\n\n.markdown-body hr {\n  height: 0;\n  margin: 15px 0;\n  overflow: hidden;\n  background: transparent;\n  border: 0;\n  border-bottom: 1px solid #ddd;\n}\n\n.markdown-body hr:before,\n.markdown-body hr:after {\n  display: table;\n  content: \" \";\n}\n\n.markdown-body hr:after {\n  clear: both;\n}\n\n.markdown-body h1,\n.markdown-body h2,\n.markdown-body h3,\n.markdown-body h4,\n.markdown-body h5,\n.markdown-body h6 {\n  margin-top: 15px;\n  margin-bottom: 15px;\n  line-height: 1.1;\n}\n\n.markdown-body h1 {\n  font-size: 30px;\n}\n\n.markdown-body h2 {\n  font-size: 21px;\n}\n\n.markdown-body h3 {\n  font-size: 16px;\n}\n\n.markdown-body h4 {\n  font-size: 14px;\n}\n\n.markdown-body h5 {\n  font-size: 12px;\n}\n\n.markdown-body h6 {\n  font-size: 11px;\n}\n\n.markdown-body blockquote {\n  margin: 0;\n}\n\n.markdown-body ul,\n.markdown-body ol {\n  padding: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body ol ol,\n.markdown-body ul ol {\n  list-style-type: lower-roman;\n}\n\n.markdown-body ul ul ol,\n.markdown-body ul ol ol,\n.markdown-body ol ul ol,\n.markdown-body ol ol ol {\n  list-style-type: lower-alpha;\n}\n\n.markdown-body dd {\n  margin-left: 0;\n}\n\n.markdown-body code,\n.markdown-body pre,\n.markdown-body samp {\n  font-family: Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  font-size: 12px;\n}\n\n.markdown-body pre {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body kbd {\n  background-color: #e7e7e7;\n  background-image: -moz-linear-gradient(#fefefe, #e7e7e7);\n  background-image: -webkit-linear-gradient(#fefefe, #e7e7e7);\n  background-image: linear-gradient(#fefefe, #e7e7e7);\n  background-repeat: repeat-x;\n  border-radius: 2px;\n  border: 1px solid #cfcfcf;\n  color: #000;\n  padding: 3px 5px;\n  line-height: 10px;\n  font: 11px Consolas, \"Liberation Mono\", Menlo, Courier, monospace;\n  display: inline-block;\n}\n\n.markdown-body>*:first-child {\n  margin-top: 0 !important;\n}\n\n.markdown-body>*:last-child {\n  margin-bottom: 0 !important;\n}\n\n.markdown-body .headeranchor-link {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  display: block;\n  padding-right: 6px;\n  padding-left: 30px;\n  margin-left: -30px;\n}\n\n.markdown-body .headeranchor-link:focus {\n  outline: none;\n}\n\n.markdown-body h1,\n.markdown-body h2,\n.markdown-body h3,\n.markdown-body h4,\n.markdown-body h5,\n.markdown-body h6 {\n  position: relative;\n  margin-top: 1em;\n  margin-bottom: 16px;\n  font-weight: bold;\n  line-height: 1.4;\n}\n\n.markdown-body h1 .headeranchor,\n.markdown-body h2 .headeranchor,\n.markdown-body h3 .headeranchor,\n.markdown-body h4 .headeranchor,\n.markdown-body h5 .headeranchor,\n.markdown-body h6 .headeranchor {\n  display: none;\n  color: #000;\n  vertical-align: middle;\n}\n\n.markdown-body h1:hover .headeranchor-link,\n.markdown-body h2:hover .headeranchor-link,\n.markdown-body h3:hover .headeranchor-link,\n.markdown-body h4:hover .headeranchor-link,\n.markdown-body h5:hover .headeranchor-link,\n.markdown-body h6:hover .headeranchor-link {\n  height: 1em;\n  padding-left: 8px;\n  margin-left: -30px;\n  line-height: 1;\n  text-decoration: none;\n}\n\n.markdown-body h1:hover .headeranchor-link .headeranchor,\n.markdown-body h2:hover .headeranchor-link .headeranchor,\n.markdown-body h3:hover .headeranchor-link .headeranchor,\n.markdown-body h4:hover .headeranchor-link .headeranchor,\n.markdown-body h5:hover .headeranchor-link .headeranchor,\n.markdown-body h6:hover .headeranchor-link .headeranchor {\n  display: inline-block;\n}\n\n.markdown-body h1 {\n  padding-bottom: 0.3em;\n  font-size: 2.25em;\n  line-height: 1.2;\n  border-bottom: 1px solid #eee;\n}\n\n.markdown-body h2 {\n  padding-bottom: 0.3em;\n  font-size: 1.75em;\n  line-height: 1.225;\n  border-bottom: 1px solid #eee;\n}\n\n.markdown-body h3 {\n  font-size: 1.5em;\n  line-height: 1.43;\n}\n\n.markdown-body h4 {\n  font-size: 1.25em;\n}\n\n.markdown-body h5 {\n  font-size: 1em;\n}\n\n.markdown-body h6 {\n  font-size: 1em;\n  color: #777;\n}\n\n.markdown-body p,\n.markdown-body blockquote,\n.markdown-body ul,\n.markdown-body ol,\n.markdown-body dl,\n.markdown-body table,\n.markdown-body pre,\n.markdown-body .admonition {\n  margin-top: 0;\n  margin-bottom: 16px;\n}\n\n.markdown-body hr {\n  height: 4px;\n  padding: 0;\n  margin: 16px 0;\n  background-color: #e7e7e7;\n  border: 0 none;\n}\n\n.markdown-body ul,\n.markdown-body ol {\n  padding-left: 2em;\n}\n\n.markdown-body ul ul,\n.markdown-body ul ol,\n.markdown-body ol ol,\n.markdown-body ol ul {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n.markdown-body li>p {\n  margin-top: 16px;\n}\n\n.markdown-body dl {\n  padding: 0;\n}\n\n.markdown-body dl dt {\n  padding: 0;\n  margin-top: 16px;\n  font-size: 1em;\n  font-style: italic;\n  font-weight: bold;\n}\n\n.markdown-body dl dd {\n  padding: 0 16px;\n  margin-bottom: 16px;\n}\n\n.markdown-body blockquote {\n  padding: 0 15px;\n  color: #777;\n  border-left: 4px solid #ddd;\n}\n\n.markdown-body blockquote>:first-child {\n  margin-top: 0;\n}\n\n.markdown-body blockquote>:last-child {\n  margin-bottom: 0;\n}\n\n.markdown-body table {\n  display: block;\n  width: 100%;\n  overflow: auto;\n  word-break: normal;\n  word-break: keep-all;\n}\n\n.markdown-body table th {\n  font-weight: bold;\n}\n\n.markdown-body table th,\n.markdown-body table td {\n  padding: 6px 13px;\n  border: 1px solid #ddd;\n}\n\n.markdown-body table tr {\n  background-color: #fff;\n  border-top: 1px solid #ccc;\n}\n\n.markdown-body table tr:nth-child(2n) {\n  background-color: #f8f8f8;\n}\n\n.markdown-body img {\n  max-width: 100%;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n\n.markdown-body code,\n.markdown-body samp {\n  padding: 0;\n  padding-top: 0.2em;\n  padding-bottom: 0.2em;\n  margin: 0;\n  font-size: 85%;\n  background-color: rgba(0,0,0,0.04);\n  border-radius: 3px;\n}\n\n.markdown-body code:before,\n.markdown-body code:after {\n  letter-spacing: -0.2em;\n  content: \"\\00a0\";\n}\n\n.markdown-body pre>code {\n  padding: 0;\n  margin: 0;\n  font-size: 100%;\n  word-break: normal;\n  white-space: pre;\n  background: transparent;\n  border: 0;\n}\n\n.markdown-body .codehilite {\n  margin-bottom: 16px;\n}\n\n.markdown-body .codehilite pre,\n.markdown-body pre {\n  padding: 16px;\n  overflow: auto;\n  font-size: 85%;\n  line-height: 1.45;\n  background-color: #f7f7f7;\n  border-radius: 3px;\n}\n\n.markdown-body .codehilite pre {\n  margin-bottom: 0;\n  word-break: normal;\n}\n\n.markdown-body pre {\n  word-wrap: normal;\n}\n\n.markdown-body pre code {\n  display: inline;\n  max-width: initial;\n  padding: 0;\n  margin: 0;\n  overflow: initial;\n  line-height: inherit;\n  word-wrap: normal;\n  background-color: transparent;\n  border: 0;\n}\n\n.markdown-body pre code:before,\n.markdown-body pre code:after {\n  content: normal;\n}\n\n/* Admonition */\n.markdown-body .admonition {\n  -webkit-border-radius: 3px;\n  -moz-border-radius: 3px;\n  position: relative;\n  border-radius: 3px;\n  border: 1px solid #e0e0e0;\n  border-left: 6px solid #333;\n  padding: 10px 10px 10px 30px;\n}\n\n.markdown-body .admonition table {\n  color: #333;\n}\n\n.markdown-body .admonition p {\n  padding: 0;\n}\n\n.markdown-body .admonition-title {\n  font-weight: bold;\n  margin: 0;\n}\n\n.markdown-body .admonition>.admonition-title {\n  color: #333;\n}\n\n.markdown-body .attention>.admonition-title {\n  color: #a6d796;\n}\n\n.markdown-body .caution>.admonition-title {\n  color: #d7a796;\n}\n\n.markdown-body .hint>.admonition-title {\n  color: #96c6d7;\n}\n\n.markdown-body .danger>.admonition-title {\n  color: #c25f77;\n}\n\n.markdown-body .question>.admonition-title {\n  color: #96a6d7;\n}\n\n.markdown-body .note>.admonition-title {\n  color: #d7c896;\n}\n\n.markdown-body .admonition:before,\n.markdown-body .attention:before,\n.markdown-body .caution:before,\n.markdown-body .hint:before,\n.markdown-body .danger:before,\n.markdown-body .question:before,\n.markdown-body .note:before {\n  font: normal normal 16px fontawesome-mini;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  line-height: 1.5;\n  color: #333;\n  position: absolute;\n  left: 0;\n  top: 0;\n  padding-top: 10px;\n  padding-left: 10px;\n}\n\n.markdown-body .admonition:before {\n  content: \"\\f056\\00a0\";\n  color: 333;\n}\n\n.markdown-body .attention:before {\n  content: \"\\f058\\00a0\";\n  color: #a6d796;\n}\n\n.markdown-body .caution:before {\n  content: \"\\f06a\\00a0\";\n  color: #d7a796;\n}\n\n.markdown-body .hint:before {\n  content: \"\\f05a\\00a0\";\n  color: #96c6d7;\n}\n\n.markdown-body .danger:before {\n  content: \"\\f057\\00a0\";\n  color: #c25f77;\n}\n\n.markdown-body .question:before {\n  content: \"\\f059\\00a0\";\n  color: #96a6d7;\n}\n\n.markdown-body .note:before {\n  content: \"\\f040\\00a0\";\n  color: #d7c896;\n}\n\n.markdown-body .admonition::after {\n  content: normal;\n}\n\n.markdown-body .attention {\n  border-left: 6px solid #a6d796;\n}\n\n.markdown-body .caution {\n  border-left: 6px solid #d7a796;\n}\n\n.markdown-body .hint {\n  border-left: 6px solid #96c6d7;\n}\n\n.markdown-body .danger {\n  border-left: 6px solid #c25f77;\n}\n\n.markdown-body .question {\n  border-left: 6px solid #96a6d7;\n}\n\n.markdown-body .note {\n  border-left: 6px solid #d7c896;\n}\n\n.markdown-body .admonition>*:first-child {\n  margin-top: 0 !important;\n}\n\n.markdown-body .admonition>*:last-child {\n  margin-bottom: 0 !important;\n}\n\n/* progress bar*/\n.markdown-body .progress {\n  display: block;\n  width: 300px;\n  margin: 10px 0;\n  height: 24px;\n  -webkit-border-radius: 3px;\n  -moz-border-radius: 3px;\n  border-radius: 3px;\n  background-color: #ededed;\n  position: relative;\n  box-shadow: inset -1px 1px 3px rgba(0, 0, 0, .1);\n}\n\n.markdown-body .progress-label {\n  position: absolute;\n  text-align: center;\n  font-weight: bold;\n  width: 100%; margin: 0;\n  line-height: 24px;\n  color: #333;\n  text-shadow: 1px 1px 0 #fefefe, -1px -1px 0 #fefefe, -1px 1px 0 #fefefe, 1px -1px 0 #fefefe, 0 1px 0 #fefefe, 0 -1px 0 #fefefe, 1px 0 0 #fefefe, -1px 0 0 #fefefe, 1px 1px 2px #000;\n  -webkit-font-smoothing: antialiased !important;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n.markdown-body .progress-bar {\n  height: 24px;\n  float: left;\n  -webkit-border-radius: 3px;\n  -moz-border-radius: 3px;\n  border-radius: 3px;\n  background-color: #96c6d7;\n  box-shadow: inset 0 1px 0 rgba(255, 255, 255, .5), inset 0 -1px 0 rgba(0, 0, 0, .1);\n  background-size: 30px 30px;\n  background-image: -webkit-linear-gradient(\n    135deg, rgba(255, 255, 255, .4) 27%,\n    transparent 27%,\n    transparent 52%, rgba(255, 255, 255, .4) 52%,\n    rgba(255, 255, 255, .4) 77%,\n    transparent 77%, transparent\n  );\n  background-image: -moz-linear-gradient(\n    135deg,\n    rgba(255, 255, 255, .4) 27%, transparent 27%,\n    transparent 52%, rgba(255, 255, 255, .4) 52%,\n    rgba(255, 255, 255, .4) 77%, transparent 77%,\n    transparent\n  );\n  background-image: -ms-linear-gradient(\n    135deg,\n    rgba(255, 255, 255, .4) 27%, transparent 27%,\n    transparent 52%, rgba(255, 255, 255, .4) 52%,\n    rgba(255, 255, 255, .4) 77%, transparent 77%,\n    transparent\n  );\n  background-image: -o-linear-gradient(\n    135deg,\n    rgba(255, 255, 255, .4) 27%, transparent 27%,\n    transparent 52%, rgba(255, 255, 255, .4) 52%,\n    rgba(255, 255, 255, .4) 77%, transparent 77%,\n    transparent\n  );\n  background-image: linear-gradient(\n    135deg,\n    rgba(255, 255, 255, .4) 27%, transparent 27%,\n    transparent 52%, rgba(255, 255, 255, .4) 52%,\n    rgba(255, 255, 255, .4) 77%, transparent 77%,\n    transparent\n  );\n}\n\n.markdown-body .progress-100plus .progress-bar {\n  background-color: #a6d796;\n}\n\n.markdown-body .progress-80plus .progress-bar {\n  background-color: #c6d796;\n}\n\n.markdown-body .progress-60plus .progress-bar {\n  background-color: #d7c896;\n}\n\n.markdown-body .progress-40plus .progress-bar {\n  background-color: #d7a796;\n}\n\n.markdown-body .progress-20plus .progress-bar {\n  background-color: #d796a6;\n}\n\n.markdown-body .progress-0plus .progress-bar {\n  background-color: #c25f77;\n}\n\n.markdown-body .candystripe-animate .progress-bar{\n  -webkit-animation: animate-stripes 3s linear infinite;\n  -moz-animation: animate-stripes 3s linear infinite;\n  animation: animate-stripes 3s linear infinite;\n}\n\n@-webkit-keyframes animate-stripes {\n  0% {\n    background-position: 0 0;\n  }\n\n  100% {\n    background-position: 60px 0;\n  }\n}\n\n@-moz-keyframes animate-stripes {\n  0% {\n    background-position: 0 0;\n  }\n\n  100% {\n    background-position: 60px 0;\n  }\n}\n\n@keyframes animate-stripes {\n  0% {\n    background-position: 0 0;\n  }\n\n  100% {\n    background-position: 60px 0;\n  }\n}\n\n.markdown-body .gloss .progress-bar {\n  box-shadow:\n    inset 0 4px 12px rgba(255, 255, 255, .7),\n    inset 0 -12px 0 rgba(0, 0, 0, .05);\n}\n\n/* Multimarkdown Critic Blocks */\n.markdown-body .critic_mark {\n  background: #ff0;\n}\n\n.markdown-body .critic_delete {\n  color: #c82829;\n  text-decoration: line-through;\n}\n\n.markdown-body .critic_insert {\n  color: #718c00 ;\n  text-decoration: underline;\n}\n\n.markdown-body .critic_comment {\n  color: #8e908c;\n  font-style: italic;\n}\n\n.markdown-body .headeranchor {\n  font: normal normal 16px octicons-anchor;\n  line-height: 1;\n  display: inline-block;\n  text-decoration: none;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n\n.headeranchor:before {\n  content: '\\f05c';\n}\n\n.markdown-body .task-list-item {\n  list-style-type: none;\n}\n\n.markdown-body .task-list-item+.task-list-item {\n  margin-top: 3px;\n}\n\n.markdown-body .task-list-item input {\n  margin: 0 4px 0.25em -20px;\n  vertical-align: middle;\n}\n\n/* Media */\n@media only screen and (min-width: 480px) {\n  .markdown-body {\n    font-size:14px;\n  }\n}\n\n@media only screen and (min-width: 768px) {\n  .markdown-body {\n    font-size:16px;\n  }\n}\n\n@media print {\n  .markdown-body * {\n    background: transparent !important;\n    color: black !important;\n    filter:none !important;\n    -ms-filter: none !important;\n  }\n\n  .markdown-body {\n    font-size:12pt;\n    max-width:100%;\n    outline:none;\n    border: 0;\n  }\n\n  .markdown-body a,\n  .markdown-body a:visited {\n    text-decoration: underline;\n  }\n\n  .markdown-body .headeranchor-link {\n    display: none;\n  }\n\n  .markdown-body a[href]:after {\n    content: \" (\" attr(href) \")\";\n  }\n\n  .markdown-body abbr[title]:after {\n    content: \" (\" attr(title) \")\";\n  }\n\n  .markdown-body .ir a:after,\n  .markdown-body a[href^=\"javascript:\"]:after,\n  .markdown-body a[href^=\"#\"]:after {\n    content: \"\";\n  }\n\n  .markdown-body pre {\n    white-space: pre;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n  }\n\n  .markdown-body pre,\n  .markdown-body blockquote {\n    border: 1px solid #999;\n    padding-right: 1em;\n    page-break-inside: avoid;\n  }\n\n  .markdown-body .progress,\n  .markdown-body .progress-bar {\n    -moz-box-shadow: none;\n    -webkit-box-shadow: none;\n    box-shadow: none;\n  }\n\n  .markdown-body .progress {\n    border: 1px solid #ddd;\n  }\n\n  .markdown-body .progress-bar {\n    height: 22px;\n    border-right: 1px solid #ddd;\n  }\n\n  .markdown-body tr,\n  .markdown-body img {\n    page-break-inside: avoid;\n  }\n\n  .markdown-body img {\n    max-width: 100% !important;\n  }\n\n  .markdown-body p,\n  .markdown-body h2,\n  .markdown-body h3 {\n    orphans: 3;\n    widows: 3;\n  }\n\n  .markdown-body h2,\n  .markdown-body h3 {\n    page-break-after: avoid;\n  }\n}\n</style><title>tomcat access log 格式设置</title></head><body><article class=\"markdown-body\"><h2 id=\"tomcat-access-log\"><a name=\"user-content-tomcat-access-log\" href=\"#tomcat-access-log\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>Tomcat access log 日志格式</h2>\n<p>文件位置: <code>conf/server.xml</code></p>\n<p>默认配置</p>\n<pre><code class=\"xml\">        &lt;!-- Access log processes all example.\n             Documentation at: /docs/config/valve.html\n             Note: The pattern used is equivalent to using pattern=&quot;common&quot; --&gt;\n        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;\n               prefix=&quot;localhost_access_log.&quot; suffix=&quot;.txt&quot;\n               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;\n</code></pre>\n\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%a</td>\n<td>Remote IP address</td>\n</tr>\n<tr>\n<td>%A</td>\n<td>Local IP address</td>\n</tr>\n<tr>\n<td>%b</td>\n<td>Bytes sent, excluding HTTP headers, or &lsquo;-&lsquo; if zero</td>\n</tr>\n<tr>\n<td>%B</td>\n<td>Bytes sent, excluding HTTP headers</td>\n</tr>\n<tr>\n<td>%h</td>\n<td>Remote host name (or IP address if enableLookups for the connector is false)</td>\n</tr>\n<tr>\n<td>%H</td>\n<td>Request protocol</td>\n</tr>\n<tr>\n<td>%l</td>\n<td>Remote logical username from identd (always returns &lsquo;-&lsquo;)</td>\n</tr>\n<tr>\n<td>%m</td>\n<td>Request method (GET, POST, etc.)</td>\n</tr>\n<tr>\n<td>%p</td>\n<td>Local port on which this request was received</td>\n</tr>\n<tr>\n<td>%q</td>\n<td>Query string (prepended with a &lsquo;?&rsquo; if it exists)</td>\n</tr>\n<tr>\n<td>%r</td>\n<td>First line of the request (method and request URI)</td>\n</tr>\n<tr>\n<td>%s</td>\n<td>HTTP status code of the response</td>\n</tr>\n<tr>\n<td>%S</td>\n<td>User session ID</td>\n</tr>\n<tr>\n<td>%t</td>\n<td>Date and time, in Common Log Format</td>\n</tr>\n<tr>\n<td>%u</td>\n<td>Remote user that was authenticated (if any), else &lsquo;-&lsquo;</td>\n</tr>\n<tr>\n<td>%U</td>\n<td>Requested URL path</td>\n</tr>\n<tr>\n<td>%v</td>\n<td>Local server name</td>\n</tr>\n<tr>\n<td>%D</td>\n<td>Time taken to process the request, in millis</td>\n</tr>\n<tr>\n<td>%T</td>\n<td>Time taken to process the request, in seconds</td>\n</tr>\n<tr>\n<td>%F</td>\n<td>Time taken to commit the response, in millis</td>\n</tr>\n<tr>\n<td>%I</td>\n<td>Current request thread name (can compare later with stacktraces)</td>\n</tr>\n</tbody>\n</table>\n<p>默认的配置打出来的access日志如下：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>127.0.0.1</td>\n<td>-</td>\n<td>-</td>\n<td>[07/Oct/2016:22:31:56 +0800]</td>\n<td>&ldquo;GET /dubbo/ HTTP/1.1&rdquo;</td>\n<td>404</td>\n<td>963</td>\n</tr>\n<tr>\n<td>远程IP</td>\n<td>logical username</td>\n<td>remote user</td>\n<td>时间和日期</td>\n<td>http请求的第一行</td>\n<td>状态码</td>\n<td>除去http头的发送大小</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"headercookiesession\"><a name=\"user-content-headercookiesession\" href=\"#headercookiesession\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>header、cookie、session其他字段的支持</h3>\n<blockquote>\n<p>There is also support to write information incoming or outgoing headers, cookies, session or request attributes and special timestamp formats. It is modeled after the Apache HTTP Server log configuration syntax:</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td xxx=\"xxx\">%</td>\n<td>for incoming headers</td>\n</tr>\n<tr>\n<td xxx=\"xxx\">%</td>\n<td>for outgoing response headers</td>\n</tr>\n<tr>\n<td xxx=\"xxx\">%</td>\n<td>for a specific cookie</td>\n</tr>\n<tr>\n<td xxx=\"xxx\">%</td>\n<td>xxx is an attribute in the ServletRequest</td>\n</tr>\n<tr>\n<td xxx=\"xxx\">%</td>\n<td>xxx is an attribute in the HttpSession</td>\n</tr>\n<tr>\n<td xxx=\"xxx\">%</td>\n<td>xxx is an enhanced SimpleDateFormat pattern</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"_1\"><a name=\"user-content-_1\" href=\"#_1\" class=\"headeranchor-link\" aria-hidden=\"true\"><span class=\"headeranchor\"></span></a>参考</h2>\n<ol>\n<li><a href=\"http://tomcat.apache.org/tomcat-7.0-doc/config/valve.html\">The Valve Component</a></li>\n</ol></article></body></html>","slug":"tomcat-access-log","published":1,"date":"2016-12-23T02:13:03.539Z","updated":"2016-12-23T02:13:03.539Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db0l000b90py2ixbqvdx"},{"title":"ssh免密码登录设置","date":"2015-10-08T08:00:08.000Z","_content":"\n## 应用场景\n  现有A和B两台机器，我们要实现A在ssh登录到B的时候不用输入密码，B->A的过程类似\n## 具体过程\n  1. 在**A机器**上，生成 ssh 公钥密钥对\n\t``` bash\n\t$ ssh-keygen -t rsa\n\t```\n  2.  生成的文件存在 ~/.ssh/目录下，windows存在C\\Users\\your_name\\.ssh\\ 目录下\n\tid_rsa是私钥，id_rsa.pub是公钥\n\n  3.  将A中生成的公钥加入到**B机器**的 authorized_keys 这个文件中，默认目录linux下是~/.ssh/ ，没有的话可以自己新建\n\t拷贝的过程可以使用以下命令\n\t``` bash\n\t$ ssh-copy-id -i 公钥文件路径 -p ssh端口  user@server\n\t```\n\t>ssh-copy-id  -  install  your  public  key in a remote machine's autho‐rized_keys. \n\t>If the  -i  option  is  given  then  the  identity  file  (defaults  to ~/.ssh/id_rsa.pub) is used,\n\t>regardless of whether there are any keys in your ssh-agent.\n\n此时A机器 ssh 登录B机器是不需要密码的\n\n\n\n","source":"_posts/ssh-passwd-free.md","raw":"title: ssh免密码登录设置\ndate: 2015-10-08 16:00:08\ntags: ssh\ncategory: linux\n---\n\n## 应用场景\n  现有A和B两台机器，我们要实现A在ssh登录到B的时候不用输入密码，B->A的过程类似\n## 具体过程\n  1. 在**A机器**上，生成 ssh 公钥密钥对\n\t``` bash\n\t$ ssh-keygen -t rsa\n\t```\n  2.  生成的文件存在 ~/.ssh/目录下，windows存在C\\Users\\your_name\\.ssh\\ 目录下\n\tid_rsa是私钥，id_rsa.pub是公钥\n\n  3.  将A中生成的公钥加入到**B机器**的 authorized_keys 这个文件中，默认目录linux下是~/.ssh/ ，没有的话可以自己新建\n\t拷贝的过程可以使用以下命令\n\t``` bash\n\t$ ssh-copy-id -i 公钥文件路径 -p ssh端口  user@server\n\t```\n\t>ssh-copy-id  -  install  your  public  key in a remote machine's autho‐rized_keys. \n\t>If the  -i  option  is  given  then  the  identity  file  (defaults  to ~/.ssh/id_rsa.pub) is used,\n\t>regardless of whether there are any keys in your ssh-agent.\n\n此时A机器 ssh 登录B机器是不需要密码的\n\n\n\n","slug":"ssh-passwd-free","published":1,"updated":"2016-12-18T05:08:16.377Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db0o000c90py54896oo8"},{"title":"spring-resource源码剖析","date":"2016-11-20T12:12:14.000Z","_content":"\n\n# Spring Resource\n\n## Why not Java URL类\n\n原因： 对底层资源的支持不足。\n\n1. there is no standardized URL implementation that may be used to access a resource that needs to be obtained from the classpath,or relative to a ServletContext.\n\n2. 不自定义URL handler的原因：\n\n  a. 过于复杂\n  b. lack some desirable functionality（如对URL所指资源是否存在的判断）\n\n\n## Resource 接口\n\n```java\n\npublic interface InputStreamSource {\n\n\t/**\n\t * Return an {@link InputStream}.\n\t * <p>It is expected that each call creates a <i>fresh</i> stream.\n\t * <p>This requirement is particularly important when you consider an API such\n\t * as JavaMail, which needs to be able to read the stream multiple times when\n\t * creating mail attachments. For such a use case, it is <i>required</i>\n\t * that each {@code getInputStream()} call returns a fresh stream.\n\t * @return the input stream for the underlying resource (must not be {@code null})\n\t * @throws IOException if the stream could not be opened\n\t * @see org.springframework.mail.javamail.MimeMessageHelper#addAttachment(String, InputStreamSource)\n\t */\n\tInputStream getInputStream() throws IOException;\n\n}\n\n\n\npublic interface Resource extends InputStreamSource {\n\n\t/**\n\t * Return whether this resource actually exists in physical form.\n\t * <p>This method performs a definitive existence check, whereas the\n\t * existence of a {@code Resource} handle only guarantees a\n\t * valid descriptor handle.\n\t */\n\tboolean exists();\n\n\t/**\n\t * Return whether the contents of this resource can be read,\n\t * e.g. via {@link #getInputStream()} or {@link #getFile()}.\n\t * <p>Will be {@code true} for typical resource descriptors;\n\t * note that actual content reading may still fail when attempted.\n\t * However, a value of {@code false} is a definitive indication\n\t * that the resource content cannot be read.\n\t * @see #getInputStream()\n\t */\n\tboolean isReadable();\n\n\t/**\n\t * Return whether this resource represents a handle with an open\n\t * stream. If true, the InputStream cannot be read multiple times,\n\t * and must be read and closed to avoid resource leaks.\n\t * <p>Will be {@code false} for typical resource descriptors.\n\t */\n\tboolean isOpen();\n\n\t/**\n\t * Return a URL handle for this resource.\n\t * @throws IOException if the resource cannot be resolved as URL,\n\t * i.e. if the resource is not available as descriptor\n\t */\n\tURL getURL() throws IOException;\n\n\t/**\n\t * Return a URI handle for this resource.\n\t * @throws IOException if the resource cannot be resolved as URI,\n\t * i.e. if the resource is not available as descriptor\n\t */\n\tURI getURI() throws IOException;\n\n\t/**\n\t * Return a File handle for this resource.\n\t * @throws IOException if the resource cannot be resolved as absolute\n\t * file path, i.e. if the resource is not available in a file system\n\t */\n\tFile getFile() throws IOException;\n\n\t/**\n\t * Determine the content length for this resource.\n\t * @throws IOException if the resource cannot be resolved\n\t * (in the file system or as some other known physical resource type)\n\t */\n\tlong contentLength() throws IOException;\n\n\t/**\n\t * Determine the last-modified timestamp for this resource.\n\t * @throws IOException if the resource cannot be resolved\n\t * (in the file system or as some other known physical resource type)\n\t */\n\tlong lastModified() throws IOException;\n\n\t/**\n\t * Create a resource relative to this resource.\n\t * @param relativePath the relative path (relative to this resource)\n\t * @return the resource handle for the relative resource\n\t * @throws IOException if the relative resource cannot be determined\n\t */\n\tResource createRelative(String relativePath) throws IOException;\n\n\t/**\n\t * Determine a filename for this resource, i.e. typically the last\n\t * part of the path: for example, \"myfile.txt\".\n\t * <p>Returns {@code null} if this type of resource does not\n\t * have a filename.\n\t */\n\tString getFilename();\n\n\t/**\n\t * Return a description for this resource,\n\t * to be used for error output when working with the resource.\n\t * <p>Implementations are also encouraged to return this value\n\t * from their {@code toString} method.\n\t * @see Object#toString()\n\t */\n\tString getDescription();\n\n}\n```\n### 继承体系\n\n![](resource.jpg)\n\n## ResourceLoader\n\n```java\npublic interface ResourceLoader {\n\n\t/** Pseudo URL prefix for loading from the class path: \"classpath:\" */\n\tString CLASSPATH_URL_PREFIX = ResourceUtils.CLASSPATH_URL_PREFIX;\n\n\n\t/**\n\t * Return a Resource handle for the specified resource.\n\t * The handle should always be a reusable resource descriptor,\n\t * allowing for multiple {@link Resource#getInputStream()} calls.\n\t * <p><ul>\n\t * <li>Must support fully qualified URLs, e.g. \"file:C:/test.dat\".\n\t * <li>Must support classpath pseudo-URLs, e.g. \"classpath:test.dat\".\n\t * <li>Should support relative file paths, e.g. \"WEB-INF/test.dat\".\n\t * (This will be implementation-specific, typically provided by an\n\t * ApplicationContext implementation.)\n\t * </ul>\n\t * <p>Note that a Resource handle does not imply an existing resource;\n\t * you need to invoke {@link Resource#exists} to check for existence.\n\t * @param location the resource location\n\t * @return a corresponding Resource handle\n\t * @see #CLASSPATH_URL_PREFIX\n\t * @see org.springframework.core.io.Resource#exists\n\t * @see org.springframework.core.io.Resource#getInputStream\n\t */\n\tResource getResource(String location);\n\n\t/**\n\t * Expose the ClassLoader used by this ResourceLoader.\n\t * <p>Clients which need to access the ClassLoader directly can do so\n\t * in a uniform manner with the ResourceLoader, rather than relying\n\t * on the thread context ClassLoader.\n\t * @return the ClassLoader (only {@code null} if even the system\n\t * ClassLoader isn't accessible)\n\t * @see org.springframework.util.ClassUtils#getDefaultClassLoader()\n\t */\n\tClassLoader getClassLoader();\n\n}\n\n```\n\nResourceLoader　负责加载Resource, 所有的application context都实现了这个接口。\n\n```java\nResource template = ctx.getResource(\"some/resource/path/myTemplate.txt\");\n```\n\n如果上述的ctx的类型是 ClassPathXmlApplicationContext，那么返回的Resource的具体类型就是\n\nClassPathResource； 如果ctx的类型是FileSystemXmlApplicationContext, 返回的类型就变成了\n\nFileSystemResource。\n\n### 指定返回的Resource类型\n```java\nResource template = ctx.getResource(\"classpath:some/resource/path/myTemplate.txt\");\n```\n\n通过显式的指定classpath前缀，返回的Resource的实际类型就是 ClassPathResource\n\n对应的关系见表格：\n\n|Prefix|Example|Explanation|\n|-|-|-|\n|classpath:|classpath:com/myapp/config.xml|Loaded from the classpath|\n|file: | file:///data/config.xml | Loaded as a URL, from the system|\n|http: | http://myserver/logo.png | Loaded as a URL |\n|（none） | /data/config.xml | Depends on the underlying ApplicationContext |\n\n#### classpath*\n\nclasspath*:conf/appContext.xml\n\n这个特殊的前缀会使spring在所有的ClassPath中查找和指定的名字相同的资源，他们会合并形成最终的\n\n上下文。\n\n>This special prefix specifies that all classpath resources that match the given name must be obtained\n(internally, this essentially happens via a ClassLoader.getResources(…) call), and then merged\nto form the final application context definition.\n\n### ResourceLoaderAware\n\n```java\npublic interface ResourceLoaderAware extends Aware {\n\n\t/**\n\t * Set the ResourceLoader that this object runs in.\n\t * <p>This might be a ResourcePatternResolver, which can be checked\n\t * through {@code instanceof ResourcePatternResolver}. See also the\n\t * {@code ResourcePatternUtils.getResourcePatternResolver} method.\n\t * <p>Invoked after population of normal bean properties but before an init callback\n\t * like InitializingBean's {@code afterPropertiesSet} or a custom init-method.\n\t * Invoked before ApplicationContextAware's {@code setApplicationContext}.\n\t * @param resourceLoader ResourceLoader object to be used by this object\n\t * @see org.springframework.core.io.support.ResourcePatternResolver\n\t * @see org.springframework.core.io.support.ResourcePatternUtils#getResourcePatternResolver\n\t */\n\tvoid setResourceLoader(ResourceLoader resourceLoader);\n\n}\n```\n\n实现这个接口的类，可以获得所在容器的ResourceLoader实例，一般来说就是相应的Application Context。也可以当做\n\nApplicationContextAware的替代。\n\n>   Interface to be implemented by any object that wishes to be notified of\n  the <b>ResourceLoader</b> (typically the ApplicationContext) that it runs in.\n  This is an alternative to a full ApplicationContext dependency via the\n  ApplicationContextAware interface.\n\n\n除了实现上述接口，还可以使用基于类型的注入，将ResourceLoader注入到需要的地方。\n","source":"_posts/spring-resource.md","raw":"title: spring-resource源码剖析\ndate: 2016-11-20 20:12:14\ntags: resource\ncategory: spring\n---\n\n\n# Spring Resource\n\n## Why not Java URL类\n\n原因： 对底层资源的支持不足。\n\n1. there is no standardized URL implementation that may be used to access a resource that needs to be obtained from the classpath,or relative to a ServletContext.\n\n2. 不自定义URL handler的原因：\n\n  a. 过于复杂\n  b. lack some desirable functionality（如对URL所指资源是否存在的判断）\n\n\n## Resource 接口\n\n```java\n\npublic interface InputStreamSource {\n\n\t/**\n\t * Return an {@link InputStream}.\n\t * <p>It is expected that each call creates a <i>fresh</i> stream.\n\t * <p>This requirement is particularly important when you consider an API such\n\t * as JavaMail, which needs to be able to read the stream multiple times when\n\t * creating mail attachments. For such a use case, it is <i>required</i>\n\t * that each {@code getInputStream()} call returns a fresh stream.\n\t * @return the input stream for the underlying resource (must not be {@code null})\n\t * @throws IOException if the stream could not be opened\n\t * @see org.springframework.mail.javamail.MimeMessageHelper#addAttachment(String, InputStreamSource)\n\t */\n\tInputStream getInputStream() throws IOException;\n\n}\n\n\n\npublic interface Resource extends InputStreamSource {\n\n\t/**\n\t * Return whether this resource actually exists in physical form.\n\t * <p>This method performs a definitive existence check, whereas the\n\t * existence of a {@code Resource} handle only guarantees a\n\t * valid descriptor handle.\n\t */\n\tboolean exists();\n\n\t/**\n\t * Return whether the contents of this resource can be read,\n\t * e.g. via {@link #getInputStream()} or {@link #getFile()}.\n\t * <p>Will be {@code true} for typical resource descriptors;\n\t * note that actual content reading may still fail when attempted.\n\t * However, a value of {@code false} is a definitive indication\n\t * that the resource content cannot be read.\n\t * @see #getInputStream()\n\t */\n\tboolean isReadable();\n\n\t/**\n\t * Return whether this resource represents a handle with an open\n\t * stream. If true, the InputStream cannot be read multiple times,\n\t * and must be read and closed to avoid resource leaks.\n\t * <p>Will be {@code false} for typical resource descriptors.\n\t */\n\tboolean isOpen();\n\n\t/**\n\t * Return a URL handle for this resource.\n\t * @throws IOException if the resource cannot be resolved as URL,\n\t * i.e. if the resource is not available as descriptor\n\t */\n\tURL getURL() throws IOException;\n\n\t/**\n\t * Return a URI handle for this resource.\n\t * @throws IOException if the resource cannot be resolved as URI,\n\t * i.e. if the resource is not available as descriptor\n\t */\n\tURI getURI() throws IOException;\n\n\t/**\n\t * Return a File handle for this resource.\n\t * @throws IOException if the resource cannot be resolved as absolute\n\t * file path, i.e. if the resource is not available in a file system\n\t */\n\tFile getFile() throws IOException;\n\n\t/**\n\t * Determine the content length for this resource.\n\t * @throws IOException if the resource cannot be resolved\n\t * (in the file system or as some other known physical resource type)\n\t */\n\tlong contentLength() throws IOException;\n\n\t/**\n\t * Determine the last-modified timestamp for this resource.\n\t * @throws IOException if the resource cannot be resolved\n\t * (in the file system or as some other known physical resource type)\n\t */\n\tlong lastModified() throws IOException;\n\n\t/**\n\t * Create a resource relative to this resource.\n\t * @param relativePath the relative path (relative to this resource)\n\t * @return the resource handle for the relative resource\n\t * @throws IOException if the relative resource cannot be determined\n\t */\n\tResource createRelative(String relativePath) throws IOException;\n\n\t/**\n\t * Determine a filename for this resource, i.e. typically the last\n\t * part of the path: for example, \"myfile.txt\".\n\t * <p>Returns {@code null} if this type of resource does not\n\t * have a filename.\n\t */\n\tString getFilename();\n\n\t/**\n\t * Return a description for this resource,\n\t * to be used for error output when working with the resource.\n\t * <p>Implementations are also encouraged to return this value\n\t * from their {@code toString} method.\n\t * @see Object#toString()\n\t */\n\tString getDescription();\n\n}\n```\n### 继承体系\n\n![](resource.jpg)\n\n## ResourceLoader\n\n```java\npublic interface ResourceLoader {\n\n\t/** Pseudo URL prefix for loading from the class path: \"classpath:\" */\n\tString CLASSPATH_URL_PREFIX = ResourceUtils.CLASSPATH_URL_PREFIX;\n\n\n\t/**\n\t * Return a Resource handle for the specified resource.\n\t * The handle should always be a reusable resource descriptor,\n\t * allowing for multiple {@link Resource#getInputStream()} calls.\n\t * <p><ul>\n\t * <li>Must support fully qualified URLs, e.g. \"file:C:/test.dat\".\n\t * <li>Must support classpath pseudo-URLs, e.g. \"classpath:test.dat\".\n\t * <li>Should support relative file paths, e.g. \"WEB-INF/test.dat\".\n\t * (This will be implementation-specific, typically provided by an\n\t * ApplicationContext implementation.)\n\t * </ul>\n\t * <p>Note that a Resource handle does not imply an existing resource;\n\t * you need to invoke {@link Resource#exists} to check for existence.\n\t * @param location the resource location\n\t * @return a corresponding Resource handle\n\t * @see #CLASSPATH_URL_PREFIX\n\t * @see org.springframework.core.io.Resource#exists\n\t * @see org.springframework.core.io.Resource#getInputStream\n\t */\n\tResource getResource(String location);\n\n\t/**\n\t * Expose the ClassLoader used by this ResourceLoader.\n\t * <p>Clients which need to access the ClassLoader directly can do so\n\t * in a uniform manner with the ResourceLoader, rather than relying\n\t * on the thread context ClassLoader.\n\t * @return the ClassLoader (only {@code null} if even the system\n\t * ClassLoader isn't accessible)\n\t * @see org.springframework.util.ClassUtils#getDefaultClassLoader()\n\t */\n\tClassLoader getClassLoader();\n\n}\n\n```\n\nResourceLoader　负责加载Resource, 所有的application context都实现了这个接口。\n\n```java\nResource template = ctx.getResource(\"some/resource/path/myTemplate.txt\");\n```\n\n如果上述的ctx的类型是 ClassPathXmlApplicationContext，那么返回的Resource的具体类型就是\n\nClassPathResource； 如果ctx的类型是FileSystemXmlApplicationContext, 返回的类型就变成了\n\nFileSystemResource。\n\n### 指定返回的Resource类型\n```java\nResource template = ctx.getResource(\"classpath:some/resource/path/myTemplate.txt\");\n```\n\n通过显式的指定classpath前缀，返回的Resource的实际类型就是 ClassPathResource\n\n对应的关系见表格：\n\n|Prefix|Example|Explanation|\n|-|-|-|\n|classpath:|classpath:com/myapp/config.xml|Loaded from the classpath|\n|file: | file:///data/config.xml | Loaded as a URL, from the system|\n|http: | http://myserver/logo.png | Loaded as a URL |\n|（none） | /data/config.xml | Depends on the underlying ApplicationContext |\n\n#### classpath*\n\nclasspath*:conf/appContext.xml\n\n这个特殊的前缀会使spring在所有的ClassPath中查找和指定的名字相同的资源，他们会合并形成最终的\n\n上下文。\n\n>This special prefix specifies that all classpath resources that match the given name must be obtained\n(internally, this essentially happens via a ClassLoader.getResources(…) call), and then merged\nto form the final application context definition.\n\n### ResourceLoaderAware\n\n```java\npublic interface ResourceLoaderAware extends Aware {\n\n\t/**\n\t * Set the ResourceLoader that this object runs in.\n\t * <p>This might be a ResourcePatternResolver, which can be checked\n\t * through {@code instanceof ResourcePatternResolver}. See also the\n\t * {@code ResourcePatternUtils.getResourcePatternResolver} method.\n\t * <p>Invoked after population of normal bean properties but before an init callback\n\t * like InitializingBean's {@code afterPropertiesSet} or a custom init-method.\n\t * Invoked before ApplicationContextAware's {@code setApplicationContext}.\n\t * @param resourceLoader ResourceLoader object to be used by this object\n\t * @see org.springframework.core.io.support.ResourcePatternResolver\n\t * @see org.springframework.core.io.support.ResourcePatternUtils#getResourcePatternResolver\n\t */\n\tvoid setResourceLoader(ResourceLoader resourceLoader);\n\n}\n```\n\n实现这个接口的类，可以获得所在容器的ResourceLoader实例，一般来说就是相应的Application Context。也可以当做\n\nApplicationContextAware的替代。\n\n>   Interface to be implemented by any object that wishes to be notified of\n  the <b>ResourceLoader</b> (typically the ApplicationContext) that it runs in.\n  This is an alternative to a full ApplicationContext dependency via the\n  ApplicationContextAware interface.\n\n\n除了实现上述接口，还可以使用基于类型的注入，将ResourceLoader注入到需要的地方。\n","slug":"spring-resource","published":1,"updated":"2016-12-18T05:07:29.230Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db0s000h90pyz145gpim"},{"title":"Spring Mvc源码剖析","date":"2016-10-02T14:14:25.000Z","_content":"\n## 架构\n![](arch.jpg)\n\nSpringMVC的核心是 `DispatcherServlet`\n\n## 本质\n\n我们通过在`web.xml`中配置如下的语句，引入SpringMVC\n\n``` xml\n<servlet>\n    <servlet-name>mvc-dispatcher</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    <init-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>classpath:/spring/mvc/mvc-dispatcher-servlet.xml</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n</servlet>\n```\n\n上述代码段指定了servlet的class是spring的`DispatcherServlet`，初始化配置文件是`mvc-dispatcher-servlet.xml`,以及servlet的加载顺序。\n\n既然`DispatcherServlet`也是一个`Servlet`，那他肯定也遵从servlet的规范。\n我们知道Servlet定义了如下的接口：\n![](servlet-interface.jpg)\n其中比较重要的是`init`和`service`接口\n`init`方法在servlet的一生中只初始化一次，`service`接口是Servlet对外提供服务的接口\nServlet的生命周期如下:\n![](Servlet_LifeCycle.jpg)\n\n我们来看下`DispatcherServlet`的继承结构：\n\n![](hierachy.jpg)\n\n### init方法\n\n直接去看`DispatcherServlet`的源码是没有发现`init`方法的， 它的`init`方法继承自`HttpServletBean`，源码如下：\n```java\n    /**\n\t\t * Map config parameters onto bean properties of this servlet, and\n\t\t * invoke subclass initialization.\n\t\t * @throws ServletException if bean properties are invalid (or required\n\t\t * properties are missing), or if subclass initialization fails.\n\t\t */\n\t\t@Override\n\t\tpublic final void init() throws ServletException {\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Initializing servlet '\" + getServletName() + \"'\");\n\t\t\t}\n\n\t\t\t// Set bean properties from init parameters.\n\t\t\ttry {\n\t\t\t\tPropertyValues pvs = new ServletConfigPropertyValues(getServletConfig(), this.requiredProperties);\n\t\t\t\tBeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(this);\n\t\t\t\tResourceLoader resourceLoader = new ServletContextResourceLoader(getServletContext());\n\t\t\t\tbw.registerCustomEditor(Resource.class, new ResourceEditor(resourceLoader, getEnvironment()));\n\t\t\t\tinitBeanWrapper(bw);\n\t\t\t\tbw.setPropertyValues(pvs, true);\n\t\t\t}\n\t\t\tcatch (BeansException ex) {\n\t\t\t\tlogger.error(\"Failed to set bean properties on servlet '\" + getServletName() + \"'\", ex);\n\t\t\t\tthrow ex;\n\t\t\t}\n\n\t\t\t// Let subclasses do whatever initialization they like.\n\t\t\tinitServletBean();\n\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Servlet '\" + getServletName() + \"' configured successfully\");\n\t\t\t}\n\t\t}\n```\n\n在这个方法中，主要完成了bean属性的配置，并且给子类留下了相应的hook\n\n``` java\n// Let subclasses do whatever initialization they like.\ninitServletBean();\n```\n\n这个方法在FrameworkServlet中有具体的实现，现在看下FrameworkServlet中的实现。\n\n``` java\n/**\n\t * Overridden method of {@link HttpServletBean}, invoked after any bean properties\n\t * have been set. Creates this servlet's WebApplicationContext.\n\t */\n\t@Override\n\tprotected final void initServletBean() throws ServletException {\n\t\tgetServletContext().log(\"Initializing Spring FrameworkServlet '\" + getServletName() + \"'\");\n\t\tif (this.logger.isInfoEnabled()) {\n\t\t\tthis.logger.info(\"FrameworkServlet '\" + getServletName() + \"': initialization started\");\n\t\t}\n\t\tlong startTime = System.currentTimeMillis();\n\n\t\ttry {\n\t\t\tthis.webApplicationContext = initWebApplicationContext();\n\t\t\tinitFrameworkServlet();\n\t\t}\n\t\tcatch (ServletException ex) {\n\t\t\tthis.logger.error(\"Context initialization failed\", ex);\n\t\t\tthrow ex;\n\t\t}\n\t\tcatch (RuntimeException ex) {\n\t\t\tthis.logger.error(\"Context initialization failed\", ex);\n\t\t\tthrow ex;\n\t\t}\n\n\t\tif (this.logger.isInfoEnabled()) {\n\t\t\tlong elapsedTime = System.currentTimeMillis() - startTime;\n\t\t\tthis.logger.info(\"FrameworkServlet '\" + getServletName() + \"': initialization completed in \" +\n\t\t\t\t\telapsedTime + \" ms\");\n\t\t}\n\t}\n```\n`webApplicationContext`在此进行初始化，并且给子类留下了一个hook\n``` java\nthis.webApplicationContext = initWebApplicationContext();\ninitFrameworkServlet();\n```\n`initFrameworkServlet`在本类中并没有实现，用于子类控制\n\n```java\n/**\n* This method will be invoked after any bean properties have been set and\n* the WebApplicationContext has been loaded. The default implementation is empty;\n* subclasses may override this method to perform any initialization they require.\n* @throws ServletException in case of an initialization exception\n*/\nprotected void initFrameworkServlet() throws ServletException {\n}\n```\n\n在initWebApplicationContext方法中，有一个空实现的方法onRefresh()\n```java\n/**\n* Template method which can be overridden to add servlet-specific refresh work.\n* Called after successful context refresh.\n* <p>This implementation is empty.\n* @param context the current WebApplicationContext\n* @see #refresh()\n*/\nprotected void onRefresh(ApplicationContext context) {\n// For subclasses: do nothing by default.\n}\n```\n\n这个方法也是钩子方法，DispatcherServlet正是实现了这个方法。\n\n```java\n\n/**\n\t* This implementation calls {@link #initStrategies}.\n\t*/\n\t@Override\n\tprotected void onRefresh(ApplicationContext context) {\n\t\tinitStrategies(context);\n\t}\n\n\n\t/**\n\t\t * Initialize the strategy objects that this servlet uses.\n\t\t * <p>May be overridden in subclasses in order to initialize further strategy objects.\n\t\t */\n\t\tprotected void initStrategies(ApplicationContext context) {\n\t\t\tinitMultipartResolver(context);\n\t\t\tinitLocaleResolver(context);\n\t\t\tinitThemeResolver(context);\n\t\t\tinitHandlerMappings(context);\n\t\t\tinitHandlerAdapters(context);\n\t\t\tinitHandlerExceptionResolvers(context);\n\t\t\tinitRequestToViewNameTranslator(context);\n\t\t\tinitViewResolvers(context);\n\t\t\tinitFlashMapManager(context);\n\t\t}\n```\n\nonRefresh方法中又调用了initStrategies方法，在这个方法中进行了大量的初始化工作。\n\n视图解析器和HandlerMappings都是在这个方法中初始化的。\n\n重点看一下initHandlerMappings方法，这个方法是初始化url映射的\n\n```java\n/**\n\t * Initialize the HandlerMappings used by this class.\n\t * <p>If no HandlerMapping beans are defined in the BeanFactory for this namespace,\n\t * we default to BeanNameUrlHandlerMapping.\n\t */\n\tprivate void initHandlerMappings(ApplicationContext context) {\n\t\tthis.handlerMappings = null;\n\n\t\tif (this.detectAllHandlerMappings) {\n\t\t\t// Find all HandlerMappings in the ApplicationContext, including ancestor contexts.\n\t\t\tMap<String, HandlerMapping> matchingBeans =\n\t\t\t\t\tBeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping.class, true, false);\n\t\t\tif (!matchingBeans.isEmpty()) {\n\t\t\t\tthis.handlerMappings = new ArrayList<HandlerMapping>(matchingBeans.values());\n\t\t\t\t// We keep HandlerMappings in sorted order.\n\t\t\t\tAnnotationAwareOrderComparator.sort(this.handlerMappings);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\ttry {\n\t\t\t\tHandlerMapping hm = context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.class);\n\t\t\t\tthis.handlerMappings = Collections.singletonList(hm);\n\t\t\t}\n\t\t\tcatch (NoSuchBeanDefinitionException ex) {\n\t\t\t\t// Ignore, we'll add a default HandlerMapping later.\n\t\t\t}\n\t\t}\n\n\t\t// Ensure we have at least one HandlerMapping, by registering\n\t\t// a default HandlerMapping if no other mappings are found.\n\t\tif (this.handlerMappings == null) {\n\t\t\tthis.handlerMappings = getDefaultStrategies(context, HandlerMapping.class);\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"No HandlerMappings found in servlet '\" + getServletName() + \"': using default\");\n\t\t\t}\n\t\t}\n\t}\n  ```\n  其根据 this.detectAllHandlerMappings 的值来确定是否扫描祖先定义的handlermappings，如果用户没有配置的话，就会使用默认的HandlerMapping\n```java\n/** Detect all HandlerMappings or just expect \"handlerMapping\" bean? */\nprivate boolean detectAllHandlerMappings = true;\n```\n\n### service方法\n\nservlet接口中另外一个重要的方法叫做`service`\n\n`service`方法最早是在`HttpServlet`类中实现的，代码如下：\n```java\n/**\n     * Dispatches client requests to the protected\n     * <code>service</code> method. There's no need to\n     * override this method.\n     *\n     * @param req   the {@link HttpServletRequest} object that\n     *                  contains the request the client made of\n     *                  the servlet\n     *\n     * @param res   the {@link HttpServletResponse} object that\n     *                  contains the response the servlet returns\n     *                  to the client                                \n     *\n     * @exception IOException   if an input or output error occurs\n     *                              while the servlet is handling the\n     *                              HTTP request\n     *\n     * @exception ServletException  if the HTTP request cannot\n     *                                  be handled\n     *\n     * @see javax.servlet.Servlet#service\n     */\n    public void service(ServletRequest req, ServletResponse res)\n        throws ServletException, IOException\n    {\n        HttpServletRequest  request;\n        HttpServletResponse response;\n\n        if (!(req instanceof HttpServletRequest &&\n                res instanceof HttpServletResponse)) {\n            throw new ServletException(\"non-HTTP request or response\");\n        }\n\n        request = (HttpServletRequest) req;\n        response = (HttpServletResponse) res;\n\n        service(request, response);\n    }\n}\n\n```\n它又调用自身的一个`service`方法:\n```java\n/**\n    * Receives standard HTTP requests from the public\n    * <code>service</code> method and dispatches\n    * them to the <code>do</code><i>XXX</i> methods defined in\n    * this class. This method is an HTTP-specific version of the\n    * {@link javax.servlet.Servlet#service} method. There's no\n    * need to override this method.\n    *\n    * @param req   the {@link HttpServletRequest} object that\n    *                  contains the request the client made of\n    *                  the servlet\n    *\n    * @param resp  the {@link HttpServletResponse} object that\n    *                  contains the response the servlet returns\n    *                  to the client                                \n    *\n    * @exception IOException   if an input or output error occurs\n    *                              while the servlet is handling the\n    *                              HTTP request\n    *\n    * @exception ServletException  if the HTTP request\n    *                                  cannot be handled\n    *\n    * @see javax.servlet.Servlet#service\n    */\n   protected void service(HttpServletRequest req, HttpServletResponse resp)\n       throws ServletException, IOException\n   {\n       String method = req.getMethod();\n\n       if (method.equals(METHOD_GET)) {\n           long lastModified = getLastModified(req);\n           if (lastModified == -1) {\n               // servlet doesn't support if-modified-since, no reason\n               // to go through further expensive logic\n               doGet(req, resp);\n           } else {\n               long ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);\n               if (ifModifiedSince < lastModified) {\n                   // If the servlet mod time is later, call doGet()\n                   // Round down to the nearest second for a proper compare\n                   // A ifModifiedSince of -1 will always be less\n                   maybeSetLastModified(resp, lastModified);\n                   doGet(req, resp);\n               } else {\n                   resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n               }\n           }\n\n       } else if (method.equals(METHOD_HEAD)) {\n           long lastModified = getLastModified(req);\n           maybeSetLastModified(resp, lastModified);\n           doHead(req, resp);\n\n       } else if (method.equals(METHOD_POST)) {\n           doPost(req, resp);\n\n       } else if (method.equals(METHOD_PUT)) {\n           doPut(req, resp);\n\n       } else if (method.equals(METHOD_DELETE)) {\n           doDelete(req, resp);\n\n       } else if (method.equals(METHOD_OPTIONS)) {\n           doOptions(req,resp);\n\n       } else if (method.equals(METHOD_TRACE)) {\n           doTrace(req,resp);\n\n       } else {\n           //\n           // Note that this means NO servlet supports whatever\n           // method was requested, anywhere on this server.\n           //\n\n           String errMsg = lStrings.getString(\"http.method_not_implemented\");\n           Object[] errArgs = new Object[1];\n           errArgs[0] = method;\n           errMsg = MessageFormat.format(errMsg, errArgs);\n\n           resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);\n       }\n   }\n```\n\n这段代码就是根据请求的类型调用相应的处理方法\n\n这个方法又在`FrameWorkServlet`中被重写，如下：\n\n```java\n/**\n * Override the parent class implementation in order to intercept PATCH requests.\n */\n@Override\nprotected void service(HttpServletRequest request, HttpServletResponse response)\n    throws ServletException, IOException {\n\n  if (HttpMethod.PATCH.matches(request.getMethod())) {\n    processRequest(request, response);\n  }\n  else {\n    super.service(request, response);\n  }\n}\n```\n\n又增加了一个处理PATCH请求的方法，其他的还是调用`HttpServlet`的实现。\n\n同时，`FrameWorkServlet`又将`HttpServlet`中对应的各种HTTP请求的方法都进行了重写，如下：\n```java\n/**\n\t * Delegate GET requests to processRequest/doService.\n\t * <p>Will also be invoked by HttpServlet's default implementation of {@code doHead},\n\t * with a {@code NoBodyResponse} that just captures the content length.\n\t * @see #doService\n\t * @see #doHead\n\t */\n\t@Override\n\tprotected final void doGet(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tprocessRequest(request, response);\n\t}\n```\n\n所有的请求都被委托给了`processRequest`这个方法，它的实现如下：\n\n```java\n/**\n\t * Process this request, publishing an event regardless of the outcome.\n\t * <p>The actual event handling is performed by the abstract\n\t * {@link #doService} template method.\n\t */\n\tprotected final void processRequest(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tlong startTime = System.currentTimeMillis();\n\t\tThrowable failureCause = null;\n\n\t\tLocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();\n\t\tLocaleContext localeContext = buildLocaleContext(request);\n\n\t\tRequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();\n\t\tServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);\n\n\t\tWebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\t\tasyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), new RequestBindingInterceptor());\n\n\t\tinitContextHolders(request, localeContext, requestAttributes);\n\n\t\ttry {\n\t\t\tdoService(request, response);\n\t\t}\n\t\tcatch (ServletException ex) {\n\t\t\tfailureCause = ex;\n\t\t\tthrow ex;\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tfailureCause = ex;\n\t\t\tthrow ex;\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\tfailureCause = ex;\n\t\t\tthrow new NestedServletException(\"Request processing failed\", ex);\n\t\t}\n\n\t\tfinally {\n\t\t\tresetContextHolders(request, previousLocaleContext, previousAttributes);\n\t\t\tif (requestAttributes != null) {\n\t\t\t\trequestAttributes.requestCompleted();\n\t\t\t}\n\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tif (failureCause != null) {\n\t\t\t\t\tthis.logger.debug(\"Could not complete request\", failureCause);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\t\t\tlogger.debug(\"Leaving response open for concurrent processing\");\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.logger.debug(\"Successfully completed request\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpublishRequestHandledEvent(request, response, startTime, failureCause);\n\t\t}\n\t}\n\n```\n\n上述代码的异常处理很值得借鉴，上述代码中`doService(request, response)`是核心。\n\n它是`FrameWorkServlet`中定义的一个接口，它在`DispatcherServlet`中被实现。\n```java\n/**\n * Subclasses must implement this method to do the work of request handling,\n * receiving a centralized callback for GET, POST, PUT and DELETE.\n * <p>The contract is essentially the same as that for the commonly overridden\n * {@code doGet} or {@code doPost} methods of HttpServlet.\n * <p>This class intercepts calls to ensure that exception handling and\n * event publication takes place.\n * @param request current HTTP request\n * @param response current HTTP response\n * @throws Exception in case of any kind of processing failure\n * @see javax.servlet.http.HttpServlet#doGet\n * @see javax.servlet.http.HttpServlet#doPost\n */\nprotected abstract void doService(HttpServletRequest request, HttpServletResponse response)\n    throws Exception;\n```\n\n`DispatcherServlet`中的`doService`接口代码如下：\n```java\n/**\n\t * Exposes the DispatcherServlet-specific request attributes and delegates to {@link #doDispatch}\n\t * for the actual dispatching.\n\t */\n\t@Override\n\tprotected void doService(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tString resumed = WebAsyncUtils.getAsyncManager(request).hasConcurrentResult() ? \" resumed\" : \"\";\n\t\t\tlogger.debug(\"DispatcherServlet with name '\" + getServletName() + \"'\" + resumed +\n\t\t\t\t\t\" processing \" + request.getMethod() + \" request for [\" + getRequestUri(request) + \"]\");\n\t\t}\n\n\t\t// Keep a snapshot of the request attributes in case of an include,\n\t\t// to be able to restore the original attributes after the include.\n\t\tMap<String, Object> attributesSnapshot = null;\n\t\tif (WebUtils.isIncludeRequest(request)) {\n\t\t\tattributesSnapshot = new HashMap<String, Object>();\n\t\t\tEnumeration<?> attrNames = request.getAttributeNames();\n\t\t\twhile (attrNames.hasMoreElements()) {\n\t\t\t\tString attrName = (String) attrNames.nextElement();\n\t\t\t\tif (this.cleanupAfterInclude || attrName.startsWith(\"org.springframework.web.servlet\")) {\n\t\t\t\t\tattributesSnapshot.put(attrName, request.getAttribute(attrName));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Make framework objects available to handlers and view objects.\n\t\trequest.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());\n\t\trequest.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, this.localeResolver);\n\t\trequest.setAttribute(THEME_RESOLVER_ATTRIBUTE, this.themeResolver);\n\t\trequest.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());\n\n\t\tFlashMap inputFlashMap = this.flashMapManager.retrieveAndUpdate(request, response);\n\t\tif (inputFlashMap != null) {\n\t\t\trequest.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));\n\t\t}\n\t\trequest.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, new FlashMap());\n\t\trequest.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, this.flashMapManager);\n\n\t\ttry {\n\t\t\tdoDispatch(request, response);\n\t\t}\n\t\tfinally {\n\t\t\tif (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) {\n\t\t\t\t// Restore the original attribute snapshot, in case of an include.\n\t\t\t\tif (attributesSnapshot != null) {\n\t\t\t\t\trestoreAttributesAfterInclude(request, attributesSnapshot);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n```\n\n每次请求过来都会将系统的一些属性塞到request的attribute中，以便后面的handlers和view能够访问到。\n\n其中比较重要的是 `doDispatch(request, response)`，正是这个方法使得请求被真正的转发。\n\n```java\n/**\n\t * Process the actual dispatching to the handler.\n\t * <p>The handler will be obtained by applying the servlet's HandlerMappings in order.\n\t * The HandlerAdapter will be obtained by querying the servlet's installed HandlerAdapters\n\t * to find the first that supports the handler class.\n\t * <p>All HTTP methods are handled by this method. It's up to HandlerAdapters or handlers\n\t * themselves to decide which methods are acceptable.\n\t * @param request current HTTP request\n\t * @param response current HTTP response\n\t * @throws Exception in case of any kind of processing failure\n\t */\n\tprotected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\tHttpServletRequest processedRequest = request;\n\t\tHandlerExecutionChain mappedHandler = null;\n\t\tboolean multipartRequestParsed = false;\n\n\t\tWebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\n\t\ttry {\n\t\t\tModelAndView mv = null;\n\t\t\tException dispatchException = null;\n\n\t\t\ttry {\n\t\t\t\tprocessedRequest = checkMultipart(request);\n\t\t\t\tmultipartRequestParsed = (processedRequest != request);\n\n\t\t\t\t// Determine handler for the current request.\n\t\t\t\tmappedHandler = getHandler(processedRequest);\n\t\t\t\tif (mappedHandler == null || mappedHandler.getHandler() == null) {\n\t\t\t\t\tnoHandlerFound(processedRequest, response);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Determine handler adapter for the current request.\n\t\t\t\tHandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\n\n\t\t\t\t// Process last-modified header, if supported by the handler.\n\t\t\t\tString method = request.getMethod();\n\t\t\t\tboolean isGet = \"GET\".equals(method);\n\t\t\t\tif (isGet || \"HEAD\".equals(method)) {\n\t\t\t\t\tlong lastModified = ha.getLastModified(request, mappedHandler.getHandler());\n\t\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\t\tlogger.debug(\"Last-Modified value for [\" + getRequestUri(request) + \"] is: \" + lastModified);\n\t\t\t\t\t}\n\t\t\t\t\tif (new ServletWebRequest(request, response).checkNotModified(lastModified) && isGet) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!mappedHandler.applyPreHandle(processedRequest, response)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Actually invoke the handler.\n\t\t\t\tmv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n\n\t\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tapplyDefaultViewName(processedRequest, mv);\n\t\t\t\tmappedHandler.applyPostHandle(processedRequest, response, mv);\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tdispatchException = ex;\n\t\t\t}\n\t\t\tprocessDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler, ex);\n\t\t}\n\t\tcatch (Error err) {\n\t\t\ttriggerAfterCompletionWithError(processedRequest, response, mappedHandler, err);\n\t\t}\n\t\tfinally {\n\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\t// Instead of postHandle and afterCompletion\n\t\t\t\tif (mappedHandler != null) {\n\t\t\t\t\tmappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Clean up any resources used by a multipart request.\n\t\t\t\tif (multipartRequestParsed) {\n\t\t\t\t\tcleanupMultipart(processedRequest);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\n\nhandler 获取的顺序是从DispatcherServlet的HandlerMapping中按顺序取出的\n\nHandler对应的HandlerAdapter会从安装的HandlerAdapter找，将返回第一个合适的Adapter\n\n```java\n  HandlerExecutionChain mappedHandler = null;\n\n  // Determine handler for the current request.\n  mappedHandler = getHandler(processedRequest);\n              ...\n  // Determine handler adapter for the current request.\n  HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\n              ...\n\n  if (!mappedHandler.applyPreHandle(processedRequest, response)) {\n          return;\n  }\n  // Actually invoke the handler.\n  mv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n\n  mappedHandler.applyPostHandle(processedRequest, response, mv);\n\n  processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);\n```\n在applyPreHandle中也是检查拦截器的操作，并根据拦截器返回的布尔类型，判断是否进一步处理\n\n其中在applyPostHandle中又检查是否有各种拦截器,调用拦截器的postHandle方法\n\n处理完毕后，调用processDispatchResult方法将处理后的请求和mv进行分发\n\n```java\n//HandlerExecutionChain.java\n\n\t\t/**\n\t * Apply preHandle methods of registered interceptors.\n\t * @return {@code true} if the execution chain should proceed with the\n\t * next interceptor or the handler itself. Else, DispatcherServlet assumes\n\t * that this interceptor has already dealt with the response itself.\n\t */\n\tboolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\tHandlerInterceptor[] interceptors = getInterceptors();\n\t\tif (!ObjectUtils.isEmpty(interceptors)) {\n\t\t\tfor (int i = 0; i < interceptors.length; i++) {\n\t\t\t\tHandlerInterceptor interceptor = interceptors[i];\n\t\t\t\tif (!interceptor.preHandle(request, response, this.handler)) {\n\t\t\t\t\ttriggerAfterCompletion(request, response, null);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tthis.interceptorIndex = i;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t* Apply postHandle methods of registered interceptors.\n\t*/\n\tvoid applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) throws Exception {\n\tHandlerInterceptor[] interceptors = getInterceptors();\n\tif (!ObjectUtils.isEmpty(interceptors)) {\n\t\tfor (int i = interceptors.length - 1; i >= 0; i--) {\n\t\t\tHandlerInterceptor interceptor = interceptors[i];\n\t\t\tinterceptor.postHandle(request, response, this.handler, mv);\n\t\t}\n\t}\n```\n\nhandler处理后的结果是通过processDispatchResult传出去的\n\n```java\n//DispatcherServlet.java\n\n\t/**\n\t * Handle the result of handler selection and handler invocation, which is\n\t * either a ModelAndView or an Exception to be resolved to a ModelAndView.\n\t */\n\tprivate void processDispatchResult(HttpServletRequest request, HttpServletResponse response,\n\t\t\tHandlerExecutionChain mappedHandler, ModelAndView mv, Exception exception) throws Exception {\n\n\t\tboolean errorView = false;\n\n\t\tif (exception != null) {\n\t\t\tif (exception instanceof ModelAndViewDefiningException) {\n\t\t\t\tlogger.debug(\"ModelAndViewDefiningException encountered\", exception);\n\t\t\t\tmv = ((ModelAndViewDefiningException) exception).getModelAndView();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tObject handler = (mappedHandler != null ? mappedHandler.getHandler() : null);\n\t\t\t\tmv = processHandlerException(request, response, handler, exception);\n\t\t\t\terrorView = (mv != null);\n\t\t\t}\n\t\t}\n\n\t\t// Did the handler return a view to render?\n\t\tif (mv != null && !mv.wasCleared()) {\n\t\t\trender(mv, request, response);\n\t\t\tif (errorView) {\n\t\t\t\tWebUtils.clearErrorRequestAttributes(request);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Null ModelAndView returned to DispatcherServlet with name '\" + getServletName() +\n\t\t\t\t\t\t\"': assuming HandlerAdapter completed request handling\");\n\t\t\t}\n\t\t}\n\n\t\tif (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) {\n\t\t\t// Concurrent handling started during a forward\n\t\t\treturn;\n\t\t}\n\n\t\tif (mappedHandler != null) {\n\t\t\tmappedHandler.triggerAfterCompletion(request, response, null);\n\t\t}\n\t}\n```\n\n去各种判断，核心的方法就在`render(mv, request, response)`;\n\n它负责渲染返回的`ModelAndView`\n\n```java\n//DispatcherServlet.java\n\n\t/**\n\t* Render the given ModelAndView.\n\t* <p>This is the last stage in handling a request. It may involve resolving the view by name.\n\t* @param mv the ModelAndView to render\n\t* @param request current HTTP servlet request\n\t* @param response current HTTP servlet response\n\t* @throws ServletException if view is missing or cannot be resolved\n\t* @throws Exception if there's a problem rendering the view\n\t*/\n\tprotected void render(ModelAndView mv, HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\t// Determine locale for request and apply it to the response.\n\t\tLocale locale = this.localeResolver.resolveLocale(request);\n\t\tresponse.setLocale(locale);\n\n\t\tView view;\n\t\tif (mv.isReference()) {\n\t\t\t// We need to resolve the view name.\n\t\t\tview = resolveViewName(mv.getViewName(), mv.getModelInternal(), locale, request);\n\t\t\tif (view == null) {\n\t\t\t\tthrow new ServletException(\"Could not resolve view with name '\" + mv.getViewName() +\n\t\t\t\t\t\t\"' in servlet with name '\" + getServletName() + \"'\");\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// No need to lookup: the ModelAndView object contains the actual View object.\n\t\t\tview = mv.getView();\n\t\t\tif (view == null) {\n\t\t\t\tthrow new ServletException(\"ModelAndView [\" + mv + \"] neither contains a view name nor a \" +\n\t\t\t\t\t\t\"View object in servlet with name '\" + getServletName() + \"'\");\n\t\t\t}\n\t\t}\n\n\t\t// Delegate to the View object for rendering.\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Rendering view [\" + view + \"] in DispatcherServlet with name '\" + getServletName() + \"'\");\n\t\t}\n\t\ttry {\n\t\t\tview.render(mv.getModelInternal(), request, response);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Error rendering view [\" + view + \"] in DispatcherServlet with name '\" +\n\t\t\t\t\t\tgetServletName() + \"'\", ex);\n\t\t\t}\n\t\t\tthrow ex;\n\t\t}\n\t}\n```\n\n这个函数解析mv对象，如果是一个引用名就查找对应的view，最终返回一个View对象，\n\n然后将渲染的工作委托给这个view对象，`view.render(mv.getModelInternal(), request, response);`\n\n其中`resolveViewName`方法遍历 `DispatcherServlet`中注册的`viewResolver`，返回第一个非空的结果\n\n查找视图名称的方法如下:\n```java\n\n/** List of ViewResolvers used by this servlet */\nprivate List<ViewResolver> viewResolvers;\n\n\n/**\n\t* Resolve the given view name into a View object (to be rendered).\n\t* <p>The default implementations asks all ViewResolvers of this dispatcher.\n\t* Can be overridden for custom resolution strategies, potentially based on\n\t* specific model attributes or request parameters.\n\t* @param viewName the name of the view to resolve\n\t* @param model the model to be passed to the view\n\t* @param locale the current locale\n\t* @param request current HTTP servlet request\n\t* @return the View object, or {@code null} if none found\n\t* @throws Exception if the view cannot be resolved\n\t* (typically in case of problems creating an actual View object)\n\t* @see ViewResolver#resolveViewName\n\t*/\n\tprotected View resolveViewName(String viewName, Map<String, Object> model, Locale locale,\n\t\tHttpServletRequest request) throws Exception {\n\n\t\t\tfor (ViewResolver viewResolver : this.viewResolvers) {\n\t\t\t\tView view = viewResolver.resolveViewName(viewName, locale);\n\t\t\t\tif (view != null) {\n\t\t\t\t\treturn view;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t}\n```\n\n最终视图的渲染是View中定义的`render`方法进行的，它是一个抽象的接口\n\n```java\n/**\n\t * Render the view given the specified model.\n\t * <p>The first step will be preparing the request: In the JSP case,\n\t * this would mean setting model objects as request attributes.\n\t * The second step will be the actual rendering of the view,\n\t * for example including the JSP via a RequestDispatcher.\n\t * @param model Map with name Strings as keys and corresponding model\n\t * objects as values (Map can also be {@code null} in case of empty model)\n\t * @param request current HTTP request\n\t * @param response HTTP response we are building\n\t * @throws Exception if rendering failed\n\t */\n\tvoid render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response) throws Exception;\n```\n","source":"_posts/spring-mvc.md","raw":"title: Spring Mvc源码剖析\ntags: spring mvc\ncategory: spring\ndate: 2016-10-02 22:14:25\n---\n\n## 架构\n![](arch.jpg)\n\nSpringMVC的核心是 `DispatcherServlet`\n\n## 本质\n\n我们通过在`web.xml`中配置如下的语句，引入SpringMVC\n\n``` xml\n<servlet>\n    <servlet-name>mvc-dispatcher</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    <init-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>classpath:/spring/mvc/mvc-dispatcher-servlet.xml</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n</servlet>\n```\n\n上述代码段指定了servlet的class是spring的`DispatcherServlet`，初始化配置文件是`mvc-dispatcher-servlet.xml`,以及servlet的加载顺序。\n\n既然`DispatcherServlet`也是一个`Servlet`，那他肯定也遵从servlet的规范。\n我们知道Servlet定义了如下的接口：\n![](servlet-interface.jpg)\n其中比较重要的是`init`和`service`接口\n`init`方法在servlet的一生中只初始化一次，`service`接口是Servlet对外提供服务的接口\nServlet的生命周期如下:\n![](Servlet_LifeCycle.jpg)\n\n我们来看下`DispatcherServlet`的继承结构：\n\n![](hierachy.jpg)\n\n### init方法\n\n直接去看`DispatcherServlet`的源码是没有发现`init`方法的， 它的`init`方法继承自`HttpServletBean`，源码如下：\n```java\n    /**\n\t\t * Map config parameters onto bean properties of this servlet, and\n\t\t * invoke subclass initialization.\n\t\t * @throws ServletException if bean properties are invalid (or required\n\t\t * properties are missing), or if subclass initialization fails.\n\t\t */\n\t\t@Override\n\t\tpublic final void init() throws ServletException {\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Initializing servlet '\" + getServletName() + \"'\");\n\t\t\t}\n\n\t\t\t// Set bean properties from init parameters.\n\t\t\ttry {\n\t\t\t\tPropertyValues pvs = new ServletConfigPropertyValues(getServletConfig(), this.requiredProperties);\n\t\t\t\tBeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(this);\n\t\t\t\tResourceLoader resourceLoader = new ServletContextResourceLoader(getServletContext());\n\t\t\t\tbw.registerCustomEditor(Resource.class, new ResourceEditor(resourceLoader, getEnvironment()));\n\t\t\t\tinitBeanWrapper(bw);\n\t\t\t\tbw.setPropertyValues(pvs, true);\n\t\t\t}\n\t\t\tcatch (BeansException ex) {\n\t\t\t\tlogger.error(\"Failed to set bean properties on servlet '\" + getServletName() + \"'\", ex);\n\t\t\t\tthrow ex;\n\t\t\t}\n\n\t\t\t// Let subclasses do whatever initialization they like.\n\t\t\tinitServletBean();\n\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Servlet '\" + getServletName() + \"' configured successfully\");\n\t\t\t}\n\t\t}\n```\n\n在这个方法中，主要完成了bean属性的配置，并且给子类留下了相应的hook\n\n``` java\n// Let subclasses do whatever initialization they like.\ninitServletBean();\n```\n\n这个方法在FrameworkServlet中有具体的实现，现在看下FrameworkServlet中的实现。\n\n``` java\n/**\n\t * Overridden method of {@link HttpServletBean}, invoked after any bean properties\n\t * have been set. Creates this servlet's WebApplicationContext.\n\t */\n\t@Override\n\tprotected final void initServletBean() throws ServletException {\n\t\tgetServletContext().log(\"Initializing Spring FrameworkServlet '\" + getServletName() + \"'\");\n\t\tif (this.logger.isInfoEnabled()) {\n\t\t\tthis.logger.info(\"FrameworkServlet '\" + getServletName() + \"': initialization started\");\n\t\t}\n\t\tlong startTime = System.currentTimeMillis();\n\n\t\ttry {\n\t\t\tthis.webApplicationContext = initWebApplicationContext();\n\t\t\tinitFrameworkServlet();\n\t\t}\n\t\tcatch (ServletException ex) {\n\t\t\tthis.logger.error(\"Context initialization failed\", ex);\n\t\t\tthrow ex;\n\t\t}\n\t\tcatch (RuntimeException ex) {\n\t\t\tthis.logger.error(\"Context initialization failed\", ex);\n\t\t\tthrow ex;\n\t\t}\n\n\t\tif (this.logger.isInfoEnabled()) {\n\t\t\tlong elapsedTime = System.currentTimeMillis() - startTime;\n\t\t\tthis.logger.info(\"FrameworkServlet '\" + getServletName() + \"': initialization completed in \" +\n\t\t\t\t\telapsedTime + \" ms\");\n\t\t}\n\t}\n```\n`webApplicationContext`在此进行初始化，并且给子类留下了一个hook\n``` java\nthis.webApplicationContext = initWebApplicationContext();\ninitFrameworkServlet();\n```\n`initFrameworkServlet`在本类中并没有实现，用于子类控制\n\n```java\n/**\n* This method will be invoked after any bean properties have been set and\n* the WebApplicationContext has been loaded. The default implementation is empty;\n* subclasses may override this method to perform any initialization they require.\n* @throws ServletException in case of an initialization exception\n*/\nprotected void initFrameworkServlet() throws ServletException {\n}\n```\n\n在initWebApplicationContext方法中，有一个空实现的方法onRefresh()\n```java\n/**\n* Template method which can be overridden to add servlet-specific refresh work.\n* Called after successful context refresh.\n* <p>This implementation is empty.\n* @param context the current WebApplicationContext\n* @see #refresh()\n*/\nprotected void onRefresh(ApplicationContext context) {\n// For subclasses: do nothing by default.\n}\n```\n\n这个方法也是钩子方法，DispatcherServlet正是实现了这个方法。\n\n```java\n\n/**\n\t* This implementation calls {@link #initStrategies}.\n\t*/\n\t@Override\n\tprotected void onRefresh(ApplicationContext context) {\n\t\tinitStrategies(context);\n\t}\n\n\n\t/**\n\t\t * Initialize the strategy objects that this servlet uses.\n\t\t * <p>May be overridden in subclasses in order to initialize further strategy objects.\n\t\t */\n\t\tprotected void initStrategies(ApplicationContext context) {\n\t\t\tinitMultipartResolver(context);\n\t\t\tinitLocaleResolver(context);\n\t\t\tinitThemeResolver(context);\n\t\t\tinitHandlerMappings(context);\n\t\t\tinitHandlerAdapters(context);\n\t\t\tinitHandlerExceptionResolvers(context);\n\t\t\tinitRequestToViewNameTranslator(context);\n\t\t\tinitViewResolvers(context);\n\t\t\tinitFlashMapManager(context);\n\t\t}\n```\n\nonRefresh方法中又调用了initStrategies方法，在这个方法中进行了大量的初始化工作。\n\n视图解析器和HandlerMappings都是在这个方法中初始化的。\n\n重点看一下initHandlerMappings方法，这个方法是初始化url映射的\n\n```java\n/**\n\t * Initialize the HandlerMappings used by this class.\n\t * <p>If no HandlerMapping beans are defined in the BeanFactory for this namespace,\n\t * we default to BeanNameUrlHandlerMapping.\n\t */\n\tprivate void initHandlerMappings(ApplicationContext context) {\n\t\tthis.handlerMappings = null;\n\n\t\tif (this.detectAllHandlerMappings) {\n\t\t\t// Find all HandlerMappings in the ApplicationContext, including ancestor contexts.\n\t\t\tMap<String, HandlerMapping> matchingBeans =\n\t\t\t\t\tBeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping.class, true, false);\n\t\t\tif (!matchingBeans.isEmpty()) {\n\t\t\t\tthis.handlerMappings = new ArrayList<HandlerMapping>(matchingBeans.values());\n\t\t\t\t// We keep HandlerMappings in sorted order.\n\t\t\t\tAnnotationAwareOrderComparator.sort(this.handlerMappings);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\ttry {\n\t\t\t\tHandlerMapping hm = context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.class);\n\t\t\t\tthis.handlerMappings = Collections.singletonList(hm);\n\t\t\t}\n\t\t\tcatch (NoSuchBeanDefinitionException ex) {\n\t\t\t\t// Ignore, we'll add a default HandlerMapping later.\n\t\t\t}\n\t\t}\n\n\t\t// Ensure we have at least one HandlerMapping, by registering\n\t\t// a default HandlerMapping if no other mappings are found.\n\t\tif (this.handlerMappings == null) {\n\t\t\tthis.handlerMappings = getDefaultStrategies(context, HandlerMapping.class);\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"No HandlerMappings found in servlet '\" + getServletName() + \"': using default\");\n\t\t\t}\n\t\t}\n\t}\n  ```\n  其根据 this.detectAllHandlerMappings 的值来确定是否扫描祖先定义的handlermappings，如果用户没有配置的话，就会使用默认的HandlerMapping\n```java\n/** Detect all HandlerMappings or just expect \"handlerMapping\" bean? */\nprivate boolean detectAllHandlerMappings = true;\n```\n\n### service方法\n\nservlet接口中另外一个重要的方法叫做`service`\n\n`service`方法最早是在`HttpServlet`类中实现的，代码如下：\n```java\n/**\n     * Dispatches client requests to the protected\n     * <code>service</code> method. There's no need to\n     * override this method.\n     *\n     * @param req   the {@link HttpServletRequest} object that\n     *                  contains the request the client made of\n     *                  the servlet\n     *\n     * @param res   the {@link HttpServletResponse} object that\n     *                  contains the response the servlet returns\n     *                  to the client                                \n     *\n     * @exception IOException   if an input or output error occurs\n     *                              while the servlet is handling the\n     *                              HTTP request\n     *\n     * @exception ServletException  if the HTTP request cannot\n     *                                  be handled\n     *\n     * @see javax.servlet.Servlet#service\n     */\n    public void service(ServletRequest req, ServletResponse res)\n        throws ServletException, IOException\n    {\n        HttpServletRequest  request;\n        HttpServletResponse response;\n\n        if (!(req instanceof HttpServletRequest &&\n                res instanceof HttpServletResponse)) {\n            throw new ServletException(\"non-HTTP request or response\");\n        }\n\n        request = (HttpServletRequest) req;\n        response = (HttpServletResponse) res;\n\n        service(request, response);\n    }\n}\n\n```\n它又调用自身的一个`service`方法:\n```java\n/**\n    * Receives standard HTTP requests from the public\n    * <code>service</code> method and dispatches\n    * them to the <code>do</code><i>XXX</i> methods defined in\n    * this class. This method is an HTTP-specific version of the\n    * {@link javax.servlet.Servlet#service} method. There's no\n    * need to override this method.\n    *\n    * @param req   the {@link HttpServletRequest} object that\n    *                  contains the request the client made of\n    *                  the servlet\n    *\n    * @param resp  the {@link HttpServletResponse} object that\n    *                  contains the response the servlet returns\n    *                  to the client                                \n    *\n    * @exception IOException   if an input or output error occurs\n    *                              while the servlet is handling the\n    *                              HTTP request\n    *\n    * @exception ServletException  if the HTTP request\n    *                                  cannot be handled\n    *\n    * @see javax.servlet.Servlet#service\n    */\n   protected void service(HttpServletRequest req, HttpServletResponse resp)\n       throws ServletException, IOException\n   {\n       String method = req.getMethod();\n\n       if (method.equals(METHOD_GET)) {\n           long lastModified = getLastModified(req);\n           if (lastModified == -1) {\n               // servlet doesn't support if-modified-since, no reason\n               // to go through further expensive logic\n               doGet(req, resp);\n           } else {\n               long ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);\n               if (ifModifiedSince < lastModified) {\n                   // If the servlet mod time is later, call doGet()\n                   // Round down to the nearest second for a proper compare\n                   // A ifModifiedSince of -1 will always be less\n                   maybeSetLastModified(resp, lastModified);\n                   doGet(req, resp);\n               } else {\n                   resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n               }\n           }\n\n       } else if (method.equals(METHOD_HEAD)) {\n           long lastModified = getLastModified(req);\n           maybeSetLastModified(resp, lastModified);\n           doHead(req, resp);\n\n       } else if (method.equals(METHOD_POST)) {\n           doPost(req, resp);\n\n       } else if (method.equals(METHOD_PUT)) {\n           doPut(req, resp);\n\n       } else if (method.equals(METHOD_DELETE)) {\n           doDelete(req, resp);\n\n       } else if (method.equals(METHOD_OPTIONS)) {\n           doOptions(req,resp);\n\n       } else if (method.equals(METHOD_TRACE)) {\n           doTrace(req,resp);\n\n       } else {\n           //\n           // Note that this means NO servlet supports whatever\n           // method was requested, anywhere on this server.\n           //\n\n           String errMsg = lStrings.getString(\"http.method_not_implemented\");\n           Object[] errArgs = new Object[1];\n           errArgs[0] = method;\n           errMsg = MessageFormat.format(errMsg, errArgs);\n\n           resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);\n       }\n   }\n```\n\n这段代码就是根据请求的类型调用相应的处理方法\n\n这个方法又在`FrameWorkServlet`中被重写，如下：\n\n```java\n/**\n * Override the parent class implementation in order to intercept PATCH requests.\n */\n@Override\nprotected void service(HttpServletRequest request, HttpServletResponse response)\n    throws ServletException, IOException {\n\n  if (HttpMethod.PATCH.matches(request.getMethod())) {\n    processRequest(request, response);\n  }\n  else {\n    super.service(request, response);\n  }\n}\n```\n\n又增加了一个处理PATCH请求的方法，其他的还是调用`HttpServlet`的实现。\n\n同时，`FrameWorkServlet`又将`HttpServlet`中对应的各种HTTP请求的方法都进行了重写，如下：\n```java\n/**\n\t * Delegate GET requests to processRequest/doService.\n\t * <p>Will also be invoked by HttpServlet's default implementation of {@code doHead},\n\t * with a {@code NoBodyResponse} that just captures the content length.\n\t * @see #doService\n\t * @see #doHead\n\t */\n\t@Override\n\tprotected final void doGet(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tprocessRequest(request, response);\n\t}\n```\n\n所有的请求都被委托给了`processRequest`这个方法，它的实现如下：\n\n```java\n/**\n\t * Process this request, publishing an event regardless of the outcome.\n\t * <p>The actual event handling is performed by the abstract\n\t * {@link #doService} template method.\n\t */\n\tprotected final void processRequest(HttpServletRequest request, HttpServletResponse response)\n\t\t\tthrows ServletException, IOException {\n\n\t\tlong startTime = System.currentTimeMillis();\n\t\tThrowable failureCause = null;\n\n\t\tLocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();\n\t\tLocaleContext localeContext = buildLocaleContext(request);\n\n\t\tRequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();\n\t\tServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);\n\n\t\tWebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\t\tasyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), new RequestBindingInterceptor());\n\n\t\tinitContextHolders(request, localeContext, requestAttributes);\n\n\t\ttry {\n\t\t\tdoService(request, response);\n\t\t}\n\t\tcatch (ServletException ex) {\n\t\t\tfailureCause = ex;\n\t\t\tthrow ex;\n\t\t}\n\t\tcatch (IOException ex) {\n\t\t\tfailureCause = ex;\n\t\t\tthrow ex;\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\tfailureCause = ex;\n\t\t\tthrow new NestedServletException(\"Request processing failed\", ex);\n\t\t}\n\n\t\tfinally {\n\t\t\tresetContextHolders(request, previousLocaleContext, previousAttributes);\n\t\t\tif (requestAttributes != null) {\n\t\t\t\trequestAttributes.requestCompleted();\n\t\t\t}\n\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tif (failureCause != null) {\n\t\t\t\t\tthis.logger.debug(\"Could not complete request\", failureCause);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\t\t\tlogger.debug(\"Leaving response open for concurrent processing\");\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.logger.debug(\"Successfully completed request\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpublishRequestHandledEvent(request, response, startTime, failureCause);\n\t\t}\n\t}\n\n```\n\n上述代码的异常处理很值得借鉴，上述代码中`doService(request, response)`是核心。\n\n它是`FrameWorkServlet`中定义的一个接口，它在`DispatcherServlet`中被实现。\n```java\n/**\n * Subclasses must implement this method to do the work of request handling,\n * receiving a centralized callback for GET, POST, PUT and DELETE.\n * <p>The contract is essentially the same as that for the commonly overridden\n * {@code doGet} or {@code doPost} methods of HttpServlet.\n * <p>This class intercepts calls to ensure that exception handling and\n * event publication takes place.\n * @param request current HTTP request\n * @param response current HTTP response\n * @throws Exception in case of any kind of processing failure\n * @see javax.servlet.http.HttpServlet#doGet\n * @see javax.servlet.http.HttpServlet#doPost\n */\nprotected abstract void doService(HttpServletRequest request, HttpServletResponse response)\n    throws Exception;\n```\n\n`DispatcherServlet`中的`doService`接口代码如下：\n```java\n/**\n\t * Exposes the DispatcherServlet-specific request attributes and delegates to {@link #doDispatch}\n\t * for the actual dispatching.\n\t */\n\t@Override\n\tprotected void doService(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tString resumed = WebAsyncUtils.getAsyncManager(request).hasConcurrentResult() ? \" resumed\" : \"\";\n\t\t\tlogger.debug(\"DispatcherServlet with name '\" + getServletName() + \"'\" + resumed +\n\t\t\t\t\t\" processing \" + request.getMethod() + \" request for [\" + getRequestUri(request) + \"]\");\n\t\t}\n\n\t\t// Keep a snapshot of the request attributes in case of an include,\n\t\t// to be able to restore the original attributes after the include.\n\t\tMap<String, Object> attributesSnapshot = null;\n\t\tif (WebUtils.isIncludeRequest(request)) {\n\t\t\tattributesSnapshot = new HashMap<String, Object>();\n\t\t\tEnumeration<?> attrNames = request.getAttributeNames();\n\t\t\twhile (attrNames.hasMoreElements()) {\n\t\t\t\tString attrName = (String) attrNames.nextElement();\n\t\t\t\tif (this.cleanupAfterInclude || attrName.startsWith(\"org.springframework.web.servlet\")) {\n\t\t\t\t\tattributesSnapshot.put(attrName, request.getAttribute(attrName));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Make framework objects available to handlers and view objects.\n\t\trequest.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());\n\t\trequest.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, this.localeResolver);\n\t\trequest.setAttribute(THEME_RESOLVER_ATTRIBUTE, this.themeResolver);\n\t\trequest.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());\n\n\t\tFlashMap inputFlashMap = this.flashMapManager.retrieveAndUpdate(request, response);\n\t\tif (inputFlashMap != null) {\n\t\t\trequest.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));\n\t\t}\n\t\trequest.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, new FlashMap());\n\t\trequest.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, this.flashMapManager);\n\n\t\ttry {\n\t\t\tdoDispatch(request, response);\n\t\t}\n\t\tfinally {\n\t\t\tif (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) {\n\t\t\t\t// Restore the original attribute snapshot, in case of an include.\n\t\t\t\tif (attributesSnapshot != null) {\n\t\t\t\t\trestoreAttributesAfterInclude(request, attributesSnapshot);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n```\n\n每次请求过来都会将系统的一些属性塞到request的attribute中，以便后面的handlers和view能够访问到。\n\n其中比较重要的是 `doDispatch(request, response)`，正是这个方法使得请求被真正的转发。\n\n```java\n/**\n\t * Process the actual dispatching to the handler.\n\t * <p>The handler will be obtained by applying the servlet's HandlerMappings in order.\n\t * The HandlerAdapter will be obtained by querying the servlet's installed HandlerAdapters\n\t * to find the first that supports the handler class.\n\t * <p>All HTTP methods are handled by this method. It's up to HandlerAdapters or handlers\n\t * themselves to decide which methods are acceptable.\n\t * @param request current HTTP request\n\t * @param response current HTTP response\n\t * @throws Exception in case of any kind of processing failure\n\t */\n\tprotected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\tHttpServletRequest processedRequest = request;\n\t\tHandlerExecutionChain mappedHandler = null;\n\t\tboolean multipartRequestParsed = false;\n\n\t\tWebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);\n\n\t\ttry {\n\t\t\tModelAndView mv = null;\n\t\t\tException dispatchException = null;\n\n\t\t\ttry {\n\t\t\t\tprocessedRequest = checkMultipart(request);\n\t\t\t\tmultipartRequestParsed = (processedRequest != request);\n\n\t\t\t\t// Determine handler for the current request.\n\t\t\t\tmappedHandler = getHandler(processedRequest);\n\t\t\t\tif (mappedHandler == null || mappedHandler.getHandler() == null) {\n\t\t\t\t\tnoHandlerFound(processedRequest, response);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Determine handler adapter for the current request.\n\t\t\t\tHandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\n\n\t\t\t\t// Process last-modified header, if supported by the handler.\n\t\t\t\tString method = request.getMethod();\n\t\t\t\tboolean isGet = \"GET\".equals(method);\n\t\t\t\tif (isGet || \"HEAD\".equals(method)) {\n\t\t\t\t\tlong lastModified = ha.getLastModified(request, mappedHandler.getHandler());\n\t\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\t\tlogger.debug(\"Last-Modified value for [\" + getRequestUri(request) + \"] is: \" + lastModified);\n\t\t\t\t\t}\n\t\t\t\t\tif (new ServletWebRequest(request, response).checkNotModified(lastModified) && isGet) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!mappedHandler.applyPreHandle(processedRequest, response)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Actually invoke the handler.\n\t\t\t\tmv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n\n\t\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tapplyDefaultViewName(processedRequest, mv);\n\t\t\t\tmappedHandler.applyPostHandle(processedRequest, response, mv);\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tdispatchException = ex;\n\t\t\t}\n\t\t\tprocessDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\ttriggerAfterCompletion(processedRequest, response, mappedHandler, ex);\n\t\t}\n\t\tcatch (Error err) {\n\t\t\ttriggerAfterCompletionWithError(processedRequest, response, mappedHandler, err);\n\t\t}\n\t\tfinally {\n\t\t\tif (asyncManager.isConcurrentHandlingStarted()) {\n\t\t\t\t// Instead of postHandle and afterCompletion\n\t\t\t\tif (mappedHandler != null) {\n\t\t\t\t\tmappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Clean up any resources used by a multipart request.\n\t\t\t\tif (multipartRequestParsed) {\n\t\t\t\t\tcleanupMultipart(processedRequest);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\n\nhandler 获取的顺序是从DispatcherServlet的HandlerMapping中按顺序取出的\n\nHandler对应的HandlerAdapter会从安装的HandlerAdapter找，将返回第一个合适的Adapter\n\n```java\n  HandlerExecutionChain mappedHandler = null;\n\n  // Determine handler for the current request.\n  mappedHandler = getHandler(processedRequest);\n              ...\n  // Determine handler adapter for the current request.\n  HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());\n              ...\n\n  if (!mappedHandler.applyPreHandle(processedRequest, response)) {\n          return;\n  }\n  // Actually invoke the handler.\n  mv = ha.handle(processedRequest, response, mappedHandler.getHandler());\n\n  mappedHandler.applyPostHandle(processedRequest, response, mv);\n\n  processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);\n```\n在applyPreHandle中也是检查拦截器的操作，并根据拦截器返回的布尔类型，判断是否进一步处理\n\n其中在applyPostHandle中又检查是否有各种拦截器,调用拦截器的postHandle方法\n\n处理完毕后，调用processDispatchResult方法将处理后的请求和mv进行分发\n\n```java\n//HandlerExecutionChain.java\n\n\t\t/**\n\t * Apply preHandle methods of registered interceptors.\n\t * @return {@code true} if the execution chain should proceed with the\n\t * next interceptor or the handler itself. Else, DispatcherServlet assumes\n\t * that this interceptor has already dealt with the response itself.\n\t */\n\tboolean applyPreHandle(HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\tHandlerInterceptor[] interceptors = getInterceptors();\n\t\tif (!ObjectUtils.isEmpty(interceptors)) {\n\t\t\tfor (int i = 0; i < interceptors.length; i++) {\n\t\t\t\tHandlerInterceptor interceptor = interceptors[i];\n\t\t\t\tif (!interceptor.preHandle(request, response, this.handler)) {\n\t\t\t\t\ttriggerAfterCompletion(request, response, null);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tthis.interceptorIndex = i;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t* Apply postHandle methods of registered interceptors.\n\t*/\n\tvoid applyPostHandle(HttpServletRequest request, HttpServletResponse response, ModelAndView mv) throws Exception {\n\tHandlerInterceptor[] interceptors = getInterceptors();\n\tif (!ObjectUtils.isEmpty(interceptors)) {\n\t\tfor (int i = interceptors.length - 1; i >= 0; i--) {\n\t\t\tHandlerInterceptor interceptor = interceptors[i];\n\t\t\tinterceptor.postHandle(request, response, this.handler, mv);\n\t\t}\n\t}\n```\n\nhandler处理后的结果是通过processDispatchResult传出去的\n\n```java\n//DispatcherServlet.java\n\n\t/**\n\t * Handle the result of handler selection and handler invocation, which is\n\t * either a ModelAndView or an Exception to be resolved to a ModelAndView.\n\t */\n\tprivate void processDispatchResult(HttpServletRequest request, HttpServletResponse response,\n\t\t\tHandlerExecutionChain mappedHandler, ModelAndView mv, Exception exception) throws Exception {\n\n\t\tboolean errorView = false;\n\n\t\tif (exception != null) {\n\t\t\tif (exception instanceof ModelAndViewDefiningException) {\n\t\t\t\tlogger.debug(\"ModelAndViewDefiningException encountered\", exception);\n\t\t\t\tmv = ((ModelAndViewDefiningException) exception).getModelAndView();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tObject handler = (mappedHandler != null ? mappedHandler.getHandler() : null);\n\t\t\t\tmv = processHandlerException(request, response, handler, exception);\n\t\t\t\terrorView = (mv != null);\n\t\t\t}\n\t\t}\n\n\t\t// Did the handler return a view to render?\n\t\tif (mv != null && !mv.wasCleared()) {\n\t\t\trender(mv, request, response);\n\t\t\tif (errorView) {\n\t\t\t\tWebUtils.clearErrorRequestAttributes(request);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Null ModelAndView returned to DispatcherServlet with name '\" + getServletName() +\n\t\t\t\t\t\t\"': assuming HandlerAdapter completed request handling\");\n\t\t\t}\n\t\t}\n\n\t\tif (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) {\n\t\t\t// Concurrent handling started during a forward\n\t\t\treturn;\n\t\t}\n\n\t\tif (mappedHandler != null) {\n\t\t\tmappedHandler.triggerAfterCompletion(request, response, null);\n\t\t}\n\t}\n```\n\n去各种判断，核心的方法就在`render(mv, request, response)`;\n\n它负责渲染返回的`ModelAndView`\n\n```java\n//DispatcherServlet.java\n\n\t/**\n\t* Render the given ModelAndView.\n\t* <p>This is the last stage in handling a request. It may involve resolving the view by name.\n\t* @param mv the ModelAndView to render\n\t* @param request current HTTP servlet request\n\t* @param response current HTTP servlet response\n\t* @throws ServletException if view is missing or cannot be resolved\n\t* @throws Exception if there's a problem rendering the view\n\t*/\n\tprotected void render(ModelAndView mv, HttpServletRequest request, HttpServletResponse response) throws Exception {\n\t\t// Determine locale for request and apply it to the response.\n\t\tLocale locale = this.localeResolver.resolveLocale(request);\n\t\tresponse.setLocale(locale);\n\n\t\tView view;\n\t\tif (mv.isReference()) {\n\t\t\t// We need to resolve the view name.\n\t\t\tview = resolveViewName(mv.getViewName(), mv.getModelInternal(), locale, request);\n\t\t\tif (view == null) {\n\t\t\t\tthrow new ServletException(\"Could not resolve view with name '\" + mv.getViewName() +\n\t\t\t\t\t\t\"' in servlet with name '\" + getServletName() + \"'\");\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// No need to lookup: the ModelAndView object contains the actual View object.\n\t\t\tview = mv.getView();\n\t\t\tif (view == null) {\n\t\t\t\tthrow new ServletException(\"ModelAndView [\" + mv + \"] neither contains a view name nor a \" +\n\t\t\t\t\t\t\"View object in servlet with name '\" + getServletName() + \"'\");\n\t\t\t}\n\t\t}\n\n\t\t// Delegate to the View object for rendering.\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Rendering view [\" + view + \"] in DispatcherServlet with name '\" + getServletName() + \"'\");\n\t\t}\n\t\ttry {\n\t\t\tview.render(mv.getModelInternal(), request, response);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Error rendering view [\" + view + \"] in DispatcherServlet with name '\" +\n\t\t\t\t\t\tgetServletName() + \"'\", ex);\n\t\t\t}\n\t\t\tthrow ex;\n\t\t}\n\t}\n```\n\n这个函数解析mv对象，如果是一个引用名就查找对应的view，最终返回一个View对象，\n\n然后将渲染的工作委托给这个view对象，`view.render(mv.getModelInternal(), request, response);`\n\n其中`resolveViewName`方法遍历 `DispatcherServlet`中注册的`viewResolver`，返回第一个非空的结果\n\n查找视图名称的方法如下:\n```java\n\n/** List of ViewResolvers used by this servlet */\nprivate List<ViewResolver> viewResolvers;\n\n\n/**\n\t* Resolve the given view name into a View object (to be rendered).\n\t* <p>The default implementations asks all ViewResolvers of this dispatcher.\n\t* Can be overridden for custom resolution strategies, potentially based on\n\t* specific model attributes or request parameters.\n\t* @param viewName the name of the view to resolve\n\t* @param model the model to be passed to the view\n\t* @param locale the current locale\n\t* @param request current HTTP servlet request\n\t* @return the View object, or {@code null} if none found\n\t* @throws Exception if the view cannot be resolved\n\t* (typically in case of problems creating an actual View object)\n\t* @see ViewResolver#resolveViewName\n\t*/\n\tprotected View resolveViewName(String viewName, Map<String, Object> model, Locale locale,\n\t\tHttpServletRequest request) throws Exception {\n\n\t\t\tfor (ViewResolver viewResolver : this.viewResolvers) {\n\t\t\t\tView view = viewResolver.resolveViewName(viewName, locale);\n\t\t\t\tif (view != null) {\n\t\t\t\t\treturn view;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t}\n```\n\n最终视图的渲染是View中定义的`render`方法进行的，它是一个抽象的接口\n\n```java\n/**\n\t * Render the view given the specified model.\n\t * <p>The first step will be preparing the request: In the JSP case,\n\t * this would mean setting model objects as request attributes.\n\t * The second step will be the actual rendering of the view,\n\t * for example including the JSP via a RequestDispatcher.\n\t * @param model Map with name Strings as keys and corresponding model\n\t * objects as values (Map can also be {@code null} in case of empty model)\n\t * @param request current HTTP request\n\t * @param response HTTP response we are building\n\t * @throws Exception if rendering failed\n\t */\n\tvoid render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response) throws Exception;\n```\n","slug":"spring-mvc","published":1,"updated":"2016-12-18T05:07:45.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db14000m90pyipi2vuj2"},{"title":"spring 采用Mock的方式进行单元测试","date":"2016-09-25T15:44:53.000Z","_content":"\n## Spring & Mockito\n\n在Spring中，采用完全mock的方式进行单元测试，借助Mockito框架\n\n{% gist 3ad39c82972ed66de3d5934f1cdcedaa %}\n","source":"_posts/spring-mockMvc.md","raw":"title: spring 采用Mock的方式进行单元测试\ndate: 2016-09-25 23:44:53\ntags: spring mvc\ncategory: spring\n---\n\n## Spring & Mockito\n\n在Spring中，采用完全mock的方式进行单元测试，借助Mockito框架\n\n{% gist 3ad39c82972ed66de3d5934f1cdcedaa %}\n","slug":"spring-mockMvc","published":1,"updated":"2016-12-18T05:08:03.726Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db1s000q90py0e27u7ek"},{"title":"Java SPI 总结","date":"2016-12-17T13:39:32.000Z","_content":"\n\n## SPI ABC\n\nSPI 代表`Service Provider Interfaces`, 是一种服务提供发现的机制。JDK中为其提供了`ServiceLoader`用来加载接口对应的实现。\n\n## 使用约定\n\n![使用约定](usage.jpg)\n\n```\n\n└── src\n├── com\n│   └── ivanzhang\n│       └── spi\n│           ├── HelloInterface.java\n│           ├── impl\n│           │   ├── ImageHello.java\n│           │   └── TextHello.java\n│           └── SPIMain.java\n└── META-INF\n    └── services\n        └── com.ivanzhang.spi.HelloInterface\n\n```\n\n## 使用例子\n\n- common-logging\n\n> common-logging，apache最早提供的日志的门面接口。只有接口，没有实现。具体方案由各提供商实现，发现日志提供商是通过扫描 META-INF/services/org.apache.commons.logging.LogFactory配置文件，通过读取该文件的内容找到日志提工商实现类。只要我们的日志实现里包含了这个文件，并在文件里制定 LogFactory工厂接口的实现类即可。\n\n- jdbc\n\n> jdbc4.0以前，开发还需要基于Class.forName(\"xxx\")的方式来装载驱动，jdbc4也基于spi的机制来发现驱动提供商了，可以通过META-INF/services/java.sql.Driver文件里指定实现类的方式来暴露驱动提供者。\n\n*其他用途：*\n\n* Java Database Connectivity\n* Java Cryptography Extension\n* Java Naming and Directory Interface\n* Java API for XML Processing\n* Java Business Integration\n* Java Sound\n* Java Image I/O\n* Java File Systems\n\n## 参考\n\n1. [Java的SPI机制与简单示例](http://www.solinx.co/archives/142)\n\n2. [Java SPI机制简介 - oschina](https://my.oschina.net/u/1034176/blog/659445)\n\n3. [Java SPI机制简介 - 技术宅](http://ivanzhangwb.github.io/blog/2012/06/01/java-spi/)\n\n4. [Introduction to the Service Provider Interfaces](https://docs.oracle.com/javase/tutorial/sound/SPI-intro.html)\n\n5. [谈java SPI机制、spring-mvc启动及servlet3.0](http://www.jianshu.com/p/bd36c023ddf0)\n\n6. [Service Provider Interface](https://en.wikipedia.org/wiki/Service_provider_interface)\n\n7. [Replaceable Components and the Service Provider Interface ](http://resources.sei.cmu.edu/asset_files/TechnicalNote/2002_004_001_13958.pdf)","source":"_posts/spi.md","raw":"title: Java SPI 总结\ntags: spi\ncategory: java\ndate: 2016-12-17 21:39:32\n---\n\n\n## SPI ABC\n\nSPI 代表`Service Provider Interfaces`, 是一种服务提供发现的机制。JDK中为其提供了`ServiceLoader`用来加载接口对应的实现。\n\n## 使用约定\n\n![使用约定](usage.jpg)\n\n```\n\n└── src\n├── com\n│   └── ivanzhang\n│       └── spi\n│           ├── HelloInterface.java\n│           ├── impl\n│           │   ├── ImageHello.java\n│           │   └── TextHello.java\n│           └── SPIMain.java\n└── META-INF\n    └── services\n        └── com.ivanzhang.spi.HelloInterface\n\n```\n\n## 使用例子\n\n- common-logging\n\n> common-logging，apache最早提供的日志的门面接口。只有接口，没有实现。具体方案由各提供商实现，发现日志提供商是通过扫描 META-INF/services/org.apache.commons.logging.LogFactory配置文件，通过读取该文件的内容找到日志提工商实现类。只要我们的日志实现里包含了这个文件，并在文件里制定 LogFactory工厂接口的实现类即可。\n\n- jdbc\n\n> jdbc4.0以前，开发还需要基于Class.forName(\"xxx\")的方式来装载驱动，jdbc4也基于spi的机制来发现驱动提供商了，可以通过META-INF/services/java.sql.Driver文件里指定实现类的方式来暴露驱动提供者。\n\n*其他用途：*\n\n* Java Database Connectivity\n* Java Cryptography Extension\n* Java Naming and Directory Interface\n* Java API for XML Processing\n* Java Business Integration\n* Java Sound\n* Java Image I/O\n* Java File Systems\n\n## 参考\n\n1. [Java的SPI机制与简单示例](http://www.solinx.co/archives/142)\n\n2. [Java SPI机制简介 - oschina](https://my.oschina.net/u/1034176/blog/659445)\n\n3. [Java SPI机制简介 - 技术宅](http://ivanzhangwb.github.io/blog/2012/06/01/java-spi/)\n\n4. [Introduction to the Service Provider Interfaces](https://docs.oracle.com/javase/tutorial/sound/SPI-intro.html)\n\n5. [谈java SPI机制、spring-mvc启动及servlet3.0](http://www.jianshu.com/p/bd36c023ddf0)\n\n6. [Service Provider Interface](https://en.wikipedia.org/wiki/Service_provider_interface)\n\n7. [Replaceable Components and the Service Provider Interface ](http://resources.sei.cmu.edu/asset_files/TechnicalNote/2002_004_001_13958.pdf)","slug":"spi","published":1,"updated":"2016-12-18T05:07:04.767Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db1w000t90py6hfhng5n"},{"title":"linux 下使用 shadowsocks","date":"2015-10-09T11:44:14.000Z","_content":"## 安装shadowsocks\nshadowsocks 是使用 python 编写的，用 python 的包管理软件 pip 安装即可\n1.首先安装 pip\n``` bash\n  $ apt-get install python-pip\n```\n2.安装 shadowsocks\n``` bash\n  $ pip install shadowsocks\n```\n\n## shadowsocks 使用\nshadowsocks 分为两部分，一个 server 名字叫 ssserver ，一个 client 名字叫 sslocal\n默认都安装在  /usr/local/bin/ 目录下\n\n### **server 端**\nserver端主要搭建在自己购买的vps上面\n如下代码可使其在后台运行：\n``` bash\n  $ sudo ssserver -p 443 -k password -m rc4-md5 --user nobody -d start\n```\n具体可参见 [shadowsocks wiki](https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E)\n\n### **client 端**\nclient 端是运行在需要科学上网的机器上的\n``` bash\n  $ sslocal -s server_ip -p 443 -l 1080 -k \"passwd\" -t 600 -m aes-256-cfb &\n```\n& 是为了让其在后台运行\n查看后台运行的程序 \n``` bash\n $ jobs -l\n```\n``` bash\n[1]-  3918 Running                 hexo s &\n[2]+  4110 Stopped                 ping www.baidu.com\n```\n将后台的程序提到前端  %1   %后面的数字代表了要提到前台的任务\n``` bash\n$ %2\nping www.baidu.com\n64 bytes from 180.97.33.107: icmp_req=3 ttl=52 time=14.2 ms\n64 bytes from 180.97.33.107: icmp_req=4 ttl=52 time=12.7 ms\n```\n上述命令将 Ctrl + Z 挂起的任务，提到前台去了\nCtrl + C 是终止程序\nCtrl + Z 是挂起到后台\n\n至于浏览器端的代理插件，将代理地址配置成 127.0.0.1 端口 1080 （要与前面设置的端口一致）\n配置相应的代理规则即可科学上网\n\n至于开机自动启动，可以自己摸索\n\n\n\n\n\n","source":"_posts/shadowsocks.md","raw":"title: linux 下使用 shadowsocks\ndate: 2015-10-09 19:44:14\ntags: shadowsocks\ncategory: linux\n---\n## 安装shadowsocks\nshadowsocks 是使用 python 编写的，用 python 的包管理软件 pip 安装即可\n1.首先安装 pip\n``` bash\n  $ apt-get install python-pip\n```\n2.安装 shadowsocks\n``` bash\n  $ pip install shadowsocks\n```\n\n## shadowsocks 使用\nshadowsocks 分为两部分，一个 server 名字叫 ssserver ，一个 client 名字叫 sslocal\n默认都安装在  /usr/local/bin/ 目录下\n\n### **server 端**\nserver端主要搭建在自己购买的vps上面\n如下代码可使其在后台运行：\n``` bash\n  $ sudo ssserver -p 443 -k password -m rc4-md5 --user nobody -d start\n```\n具体可参见 [shadowsocks wiki](https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E)\n\n### **client 端**\nclient 端是运行在需要科学上网的机器上的\n``` bash\n  $ sslocal -s server_ip -p 443 -l 1080 -k \"passwd\" -t 600 -m aes-256-cfb &\n```\n& 是为了让其在后台运行\n查看后台运行的程序 \n``` bash\n $ jobs -l\n```\n``` bash\n[1]-  3918 Running                 hexo s &\n[2]+  4110 Stopped                 ping www.baidu.com\n```\n将后台的程序提到前端  %1   %后面的数字代表了要提到前台的任务\n``` bash\n$ %2\nping www.baidu.com\n64 bytes from 180.97.33.107: icmp_req=3 ttl=52 time=14.2 ms\n64 bytes from 180.97.33.107: icmp_req=4 ttl=52 time=12.7 ms\n```\n上述命令将 Ctrl + Z 挂起的任务，提到前台去了\nCtrl + C 是终止程序\nCtrl + Z 是挂起到后台\n\n至于浏览器端的代理插件，将代理地址配置成 127.0.0.1 端口 1080 （要与前面设置的端口一致）\n配置相应的代理规则即可科学上网\n\n至于开机自动启动，可以自己摸索\n\n\n\n\n\n","slug":"shadowsocks","published":1,"updated":"2015-10-10T00:30:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db23000y90pyeux7s6pc"},{"title":"正则总结","date":"2016-12-14T15:48:12.000Z","_content":"\n\n# 测试\n\n推荐使用`RegexBudy`\n\n![RegexBuddy](https://www.regexbuddy.com/img/icon.png)\n\n界面如下:\n\n![regexbuddy](https://www.regexbuddy.com/screens/regexbuddy.png)\n\n推荐python的 `VerbalExpressions` [PythonVerbalExpressions ](https://github.com/VerbalExpressions/PythonVerbalExpressions)\n\n# 使用心得\n\n## 匹配多个单词\n\n`\\b`可以匹配一个单词的开头或者结尾\n\n匹配单个单词： `\\bfoo\\b` 可以匹配单个单测 foo\n\n匹配多个单词： `\\b(foo|bar)\\b` 可以匹配foo 或者 bar\n\n## 匹配开头和结尾\n\n`^`可以匹配字符串的开头\n\n`$`可以匹配字符串的结尾\n\n## 零宽断言\n\n| 分类  | 代码/语法   |说明|\n|------|---|------------------|\n| 捕获 | (exp)   |匹配exp,并捕获文本到自动命名的组里|\n| |(?<name>exp)    | 匹配exp,并捕获文本到名称为name的组里，也可以写成(?'name'exp)|\n| |(?:exp) |匹配exp,不捕获匹配的文本，也不给此分组分配组号|\n| 零宽断言  |  (?=exp) 匹配exp前面的位置|\n| |(?<=exp)    |匹配exp后面的位置|\n| |(?!exp) |匹配后面跟的不是exp的位置|\n| |(?<!exp)    |匹配前面不是exp的位置|\n| 注释  (?#comment) |这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读|\n\n\n### 先行断言\n\n语法格式\n\n\n`[a-z]*(?=ing)`\n\n可匹配 cooking singing 中的cook 与 sing\n\n### 后发断言\n\n语法格式\n\n`(?<=abc)[a-z]*`\n\n\n可匹配 abcdefg 中的defg\n\n### 负向零宽断言\n\n语法格式\n\n`(?!exp)`\n\n断言此位置的后面不能匹配表达式`exp`\n\n`\\b\\w*q(?!u)\\w*\\b` 匹配q后面不出现u（可以以q结尾）\n\n# 参考\n\n1. [RegexBuddy官网](https://www.regexbuddy.com/)\n\n2. [正则表达式30分钟入门教程](https://luke0922.gitbooks.io/learnregularexpressionin30minutes/content/)\n\n3. [正则表达式怎样匹配多个单词](http://www.biliyu.com/article/1321.html)\n\n","source":"_posts/re.md","raw":"title: 正则总结\ntags: re\ncategory: base\ndate: 2016-12-14 23:48:12\n---\n\n\n# 测试\n\n推荐使用`RegexBudy`\n\n![RegexBuddy](https://www.regexbuddy.com/img/icon.png)\n\n界面如下:\n\n![regexbuddy](https://www.regexbuddy.com/screens/regexbuddy.png)\n\n推荐python的 `VerbalExpressions` [PythonVerbalExpressions ](https://github.com/VerbalExpressions/PythonVerbalExpressions)\n\n# 使用心得\n\n## 匹配多个单词\n\n`\\b`可以匹配一个单词的开头或者结尾\n\n匹配单个单词： `\\bfoo\\b` 可以匹配单个单测 foo\n\n匹配多个单词： `\\b(foo|bar)\\b` 可以匹配foo 或者 bar\n\n## 匹配开头和结尾\n\n`^`可以匹配字符串的开头\n\n`$`可以匹配字符串的结尾\n\n## 零宽断言\n\n| 分类  | 代码/语法   |说明|\n|------|---|------------------|\n| 捕获 | (exp)   |匹配exp,并捕获文本到自动命名的组里|\n| |(?<name>exp)    | 匹配exp,并捕获文本到名称为name的组里，也可以写成(?'name'exp)|\n| |(?:exp) |匹配exp,不捕获匹配的文本，也不给此分组分配组号|\n| 零宽断言  |  (?=exp) 匹配exp前面的位置|\n| |(?<=exp)    |匹配exp后面的位置|\n| |(?!exp) |匹配后面跟的不是exp的位置|\n| |(?<!exp)    |匹配前面不是exp的位置|\n| 注释  (?#comment) |这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读|\n\n\n### 先行断言\n\n语法格式\n\n\n`[a-z]*(?=ing)`\n\n可匹配 cooking singing 中的cook 与 sing\n\n### 后发断言\n\n语法格式\n\n`(?<=abc)[a-z]*`\n\n\n可匹配 abcdefg 中的defg\n\n### 负向零宽断言\n\n语法格式\n\n`(?!exp)`\n\n断言此位置的后面不能匹配表达式`exp`\n\n`\\b\\w*q(?!u)\\w*\\b` 匹配q后面不出现u（可以以q结尾）\n\n# 参考\n\n1. [RegexBuddy官网](https://www.regexbuddy.com/)\n\n2. [正则表达式30分钟入门教程](https://luke0922.gitbooks.io/learnregularexpressionin30minutes/content/)\n\n3. [正则表达式怎样匹配多个单词](http://www.biliyu.com/article/1321.html)\n\n","slug":"re","published":1,"updated":"2016-12-14T15:48:12.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db27001290pyfybr1grk"},{"title":"python 小技巧","date":"2016-12-18T03:57:35.000Z","_content":"\n\n## 开启一个简单的HTTP Server\n\n- 命令：\n\n`python -m SimpleHTTPServer port`\n\n`-m` 是指后面跟的是python的一个Module\n\n`port` 默认是`8080`，可以自行指定。\n\n- 作用：\n\n1. 可以当一个简单的httpserver，做测试用\n\n2. 可以简单的传输一些小文件（大文件性能不好，经常中断）,大文件的传输可以用nc\n\n见： {% post_link nc %}\n\n## 简单的cig server\n\n- 命令：\n`python -m CGIHTTPServer port`\n\n- 作用:\n\n可以开启一个简单的cgi服务器，支持python作为cgi的语言，cgi的脚本须放置在root目录下的`cgi-bin`\n\n## 格式化 json数据\n\n- 命令:\n\n`curl http://my_url/ | python -m json.tool`\n\n- 作用:\n\n在返回大量json数据时，在命令行里可以用这个工具进行格式化。\n\nchrome浏览器中的`JsonView`插件可以做到同样的事情[chrome商店链接](https://chrome.google.com/webstore/detail/json-viewer/aimiinbnnkboelefkjlenlgimcabobli?utm_source=chrome-ntp-icon)\n\n- 缺陷：\n\npython 2.x 中是使用ASCII码作为默认编码的，因此json中如果带有中文就只是16进制的表示，可以修改`json.tool`的源代码。\n\n参见[json处理小技巧](http://axiaoxin.com/article/77/)\n\n> Python也有命令行里面格式化显示json的模块json.tool\n\n> cat data.json\n{\"爱\": \"我\", \"中\": \"华\"}\n> cat data.json| python -m json.tool\n{\n    \"\\u4e2d\": \"\\u534e\",\n    \"\\u7231\": \"\\u6211\"\n}\n好像有什么不对劲？因为json.tool在实现的时候ensure_ascii为True，让我们用Python来自己实现一个更好的Unix filter。\n\n`filter.py`\n\n```python\n    import json\n    import fileinput\n    for l in fileinput.input():\n        print(json.dumps(json.loads(l), ensure_ascii=False).encode('utf-8'))\n```\n只需要写上面那 4 行代码，就可以这样使用它：\n\n> python filter.py data.json\n{\"爱\": \"我\", \"中\": \"华\"}\n> cat data.json| python filter.py\n{\"爱\": \"我\", \"中\": \"华\"}\n\n## 编码问题\n\npython 2.x 默认使用的编码是ascii编码，中文总是出问题。\n\n遇到乱码问题，一般使用如下的步骤即可解决:\n\n1. python文件自身的编码\n\n>     Python will default to ASCII as standard encoding if no other\n    encoding hints are given.\n\n    To define a source code encoding, a magic comment must\n    be placed into the source files either as first or second\n    line in the file, such as:\n\n          # coding=<encoding name>\n\n    or (using formats recognized by popular editors)\n\n          #!/usr/bin/python\n          # -*- coding: <encoding name> -*-\n\n在文件头加上默认编码即可：\n\n```python\n          #!/usr/local/bin/python\n          # coding: utf-8\n          import os, sys\n          ...\n```\n\n2. 重新设置系统模块的编码\n\n```python\nimport sys\nsys.setdefaultencoding('utf-8')\n```\n\n3. 使用Unicode\n\n`s = u'中文'` \n\n## to be continued\n\n\n# 参考\n\n1. [Defining Python Source Code Encodings](https://www.python.org/dev/peps/pep-0263/)","source":"_posts/python-util.md","raw":"title: python 小技巧\ntags: python-util\ncategory: python\ndate: 2016-12-18 11:57:35\n---\n\n\n## 开启一个简单的HTTP Server\n\n- 命令：\n\n`python -m SimpleHTTPServer port`\n\n`-m` 是指后面跟的是python的一个Module\n\n`port` 默认是`8080`，可以自行指定。\n\n- 作用：\n\n1. 可以当一个简单的httpserver，做测试用\n\n2. 可以简单的传输一些小文件（大文件性能不好，经常中断）,大文件的传输可以用nc\n\n见： {% post_link nc %}\n\n## 简单的cig server\n\n- 命令：\n`python -m CGIHTTPServer port`\n\n- 作用:\n\n可以开启一个简单的cgi服务器，支持python作为cgi的语言，cgi的脚本须放置在root目录下的`cgi-bin`\n\n## 格式化 json数据\n\n- 命令:\n\n`curl http://my_url/ | python -m json.tool`\n\n- 作用:\n\n在返回大量json数据时，在命令行里可以用这个工具进行格式化。\n\nchrome浏览器中的`JsonView`插件可以做到同样的事情[chrome商店链接](https://chrome.google.com/webstore/detail/json-viewer/aimiinbnnkboelefkjlenlgimcabobli?utm_source=chrome-ntp-icon)\n\n- 缺陷：\n\npython 2.x 中是使用ASCII码作为默认编码的，因此json中如果带有中文就只是16进制的表示，可以修改`json.tool`的源代码。\n\n参见[json处理小技巧](http://axiaoxin.com/article/77/)\n\n> Python也有命令行里面格式化显示json的模块json.tool\n\n> cat data.json\n{\"爱\": \"我\", \"中\": \"华\"}\n> cat data.json| python -m json.tool\n{\n    \"\\u4e2d\": \"\\u534e\",\n    \"\\u7231\": \"\\u6211\"\n}\n好像有什么不对劲？因为json.tool在实现的时候ensure_ascii为True，让我们用Python来自己实现一个更好的Unix filter。\n\n`filter.py`\n\n```python\n    import json\n    import fileinput\n    for l in fileinput.input():\n        print(json.dumps(json.loads(l), ensure_ascii=False).encode('utf-8'))\n```\n只需要写上面那 4 行代码，就可以这样使用它：\n\n> python filter.py data.json\n{\"爱\": \"我\", \"中\": \"华\"}\n> cat data.json| python filter.py\n{\"爱\": \"我\", \"中\": \"华\"}\n\n## 编码问题\n\npython 2.x 默认使用的编码是ascii编码，中文总是出问题。\n\n遇到乱码问题，一般使用如下的步骤即可解决:\n\n1. python文件自身的编码\n\n>     Python will default to ASCII as standard encoding if no other\n    encoding hints are given.\n\n    To define a source code encoding, a magic comment must\n    be placed into the source files either as first or second\n    line in the file, such as:\n\n          # coding=<encoding name>\n\n    or (using formats recognized by popular editors)\n\n          #!/usr/bin/python\n          # -*- coding: <encoding name> -*-\n\n在文件头加上默认编码即可：\n\n```python\n          #!/usr/local/bin/python\n          # coding: utf-8\n          import os, sys\n          ...\n```\n\n2. 重新设置系统模块的编码\n\n```python\nimport sys\nsys.setdefaultencoding('utf-8')\n```\n\n3. 使用Unicode\n\n`s = u'中文'` \n\n## to be continued\n\n\n# 参考\n\n1. [Defining Python Source Code Encodings](https://www.python.org/dev/peps/pep-0263/)","slug":"python-util","published":1,"updated":"2016-12-22T16:56:45.844Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db2c001790py5h0es258"},{"title":"Spring占位符（property-placeholder），源码阅读","date":"2016-10-30T16:22:23.000Z","_content":"\n\n##  `<context:property-placeholder location='xxx' />`的解析过程\n\n### schema\n\n在idea中`ctrl` + `b`或者，`ctrl` + 鼠标左键点击即可打开schema具体的位置\n\n![](location.jpg)\n\n`sping.handlers`中内容如下:\n\n```xml\nhttp\\://www.springframework.org/schema/context=org.springframework.context.config.ContextNamespaceHandler\nhttp\\://www.springframework.org/schema/jee=org.springframework.ejb.config.JeeNamespaceHandler\nhttp\\://www.springframework.org/schema/lang=org.springframework.scripting.config.LangNamespaceHandler\nhttp\\://www.springframework.org/schema/task=org.springframework.scheduling.config.TaskNamespaceHandler\nhttp\\://www.springframework.org/schema/cache=org.springframework.cache.config.CacheNamespaceHandler\n```\n`spring.schemas`中的内容如下：\n\n```xml\nhttp\\://www.springframework.org/schema/context/spring-context-2.5.xsd=org/springframework/context/config/spring-context-2.5.xsd\nhttp\\://www.springframework.org/schema/context/spring-context-3.0.xsd=org/springframework/context/config/spring-context-3.0.xsd\nhttp\\://www.springframework.org/schema/context/spring-context-3.1.xsd=org/springframework/context/config/spring-context-3.1.xsd\nhttp\\://www.springframework.org/schema/context/spring-context-3.2.xsd=org/springframework/context/config/spring-context-3.2.xsd\nhttp\\://www.springframework.org/schema/context/spring-context-4.0.xsd=org/springframework/context/config/spring-context-4.0.xsd\nhttp\\://www.springframework.org/schema/context/spring-context-4.1.xsd=org/springframework/context/config/spring-context-4.1.xsd\nhttp\\://www.springframework.org/schema/context/spring-context-4.2.xsd=org/springframework/context/config/spring-context-4.2.xsd\nhttp\\://www.springframework.org/schema/context/spring-context.xsd=org/springframework/context/config/spring-context-4.2.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee-2.0.xsd=org/springframework/ejb/config/spring-jee-2.0.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee-2.5.xsd=org/springframework/ejb/config/spring-jee-2.5.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee-3.0.xsd=org/springframework/ejb/config/spring-jee-3.0.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee-3.1.xsd=org/springframework/ejb/config/spring-jee-3.1.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee-3.2.xsd=org/springframework/ejb/config/spring-jee-3.2.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee-4.0.xsd=org/springframework/ejb/config/spring-jee-4.0.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee-4.1.xsd=org/springframework/ejb/config/spring-jee-4.1.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee-4.2.xsd=org/springframework/ejb/config/spring-jee-4.2.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee.xsd=org/springframework/ejb/config/spring-jee-4.2.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang-2.0.xsd=org/springframework/scripting/config/spring-lang-2.0.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang-2.5.xsd=org/springframework/scripting/config/spring-lang-2.5.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang-3.0.xsd=org/springframework/scripting/config/spring-lang-3.0.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang-3.1.xsd=org/springframework/scripting/config/spring-lang-3.1.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang-3.2.xsd=org/springframework/scripting/config/spring-lang-3.2.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang-4.0.xsd=org/springframework/scripting/config/spring-lang-4.0.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang-4.1.xsd=org/springframework/scripting/config/spring-lang-4.1.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang-4.2.xsd=org/springframework/scripting/config/spring-lang-4.2.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang.xsd=org/springframework/scripting/config/spring-lang-4.2.xsd\nhttp\\://www.springframework.org/schema/task/spring-task-3.0.xsd=org/springframework/scheduling/config/spring-task-3.0.xsd\nhttp\\://www.springframework.org/schema/task/spring-task-3.1.xsd=org/springframework/scheduling/config/spring-task-3.1.xsd\nhttp\\://www.springframework.org/schema/task/spring-task-3.2.xsd=org/springframework/scheduling/config/spring-task-3.2.xsd\nhttp\\://www.springframework.org/schema/task/spring-task-4.0.xsd=org/springframework/scheduling/config/spring-task-4.0.xsd\nhttp\\://www.springframework.org/schema/task/spring-task-4.1.xsd=org/springframework/scheduling/config/spring-task-4.1.xsd\nhttp\\://www.springframework.org/schema/task/spring-task-4.2.xsd=org/springframework/scheduling/config/spring-task-4.2.xsd\nhttp\\://www.springframework.org/schema/task/spring-task.xsd=org/springframework/scheduling/config/spring-task-4.2.xsd\nhttp\\://www.springframework.org/schema/cache/spring-cache-3.1.xsd=org/springframework/cache/config/spring-cache-3.1.xsd\nhttp\\://www.springframework.org/schema/cache/spring-cache-3.2.xsd=org/springframework/cache/config/spring-cache-3.2.xsd\nhttp\\://www.springframework.org/schema/cache/spring-cache-4.0.xsd=org/springframework/cache/config/spring-cache-4.0.xsd\nhttp\\://www.springframework.org/schema/cache/spring-cache-4.1.xsd=org/springframework/cache/config/spring-cache-4.1.xsd\nhttp\\://www.springframework.org/schema/cache/spring-cache-4.2.xsd=org/springframework/cache/config/spring-cache-4.2.xsd\nhttp\\://www.springframework.org/schema/cache/spring-cache.xsd=org/springframework/cache/config/spring-cache-4.2.xsd\n```\n### NamespaceHandlerSupport\n\n从`handler`中我们可以找出`context`标签的处理类是`org.springframework.context.config.ContextNamespaceHandler`,内容如下：\n\n```java\npublic class ContextNamespaceHandler extends NamespaceHandlerSupport {\n\n\t@Override\n\tpublic void init() {\n\t\tregisterBeanDefinitionParser(\"property-placeholder\", new PropertyPlaceholderBeanDefinitionParser());\n\t\tregisterBeanDefinitionParser(\"property-override\", new PropertyOverrideBeanDefinitionParser());\n\t\tregisterBeanDefinitionParser(\"annotation-config\", new AnnotationConfigBeanDefinitionParser());\n\t\tregisterBeanDefinitionParser(\"component-scan\", new ComponentScanBeanDefinitionParser());\n\t\tregisterBeanDefinitionParser(\"load-time-weaver\", new LoadTimeWeaverBeanDefinitionParser());\n\t\tregisterBeanDefinitionParser(\"spring-configured\", new SpringConfiguredBeanDefinitionParser());\n\t\tregisterBeanDefinitionParser(\"mbean-export\", new MBeanExportBeanDefinitionParser());\n\t\tregisterBeanDefinitionParser(\"mbean-server\", new MBeanServerBeanDefinitionParser());\n\t}\n}\n```\n顺藤摸瓜就能找到`property-placeholder`的处理类是`PropertyPlaceholderBeanDefinitionParser`\n\n### PropertyPlaceholderBeanDefinitionParser\n\n继承关系：\n\n![](hierarchy.jpg)\n\n```java\nclass PropertyPlaceholderBeanDefinitionParser extends AbstractPropertyLoadingBeanDefinitionParser {\n\n\tprivate static final String SYSTEM_PROPERTIES_MODE_ATTRIBUTE = \"system-properties-mode\";\n\n\tprivate static final String SYSTEM_PROPERTIES_MODE_DEFAULT = \"ENVIRONMENT\";\n\n\n\t@Override\n\tprotected Class<?> getBeanClass(Element element) {\n\t\t// As of Spring 3.1, the default value of system-properties-mode has changed from\n\t\t// 'FALLBACK' to 'ENVIRONMENT'. This latter value indicates that resolution of\n\t\t// placeholders against system properties is a function of the Environment and\n\t\t// its current set of PropertySources.\n\t\tif (SYSTEM_PROPERTIES_MODE_DEFAULT.equals(element.getAttribute(SYSTEM_PROPERTIES_MODE_ATTRIBUTE))) {\n\t\t\treturn PropertySourcesPlaceholderConfigurer.class;\n\t\t}\n\n\t\t// The user has explicitly specified a value for system-properties-mode: revert to\n\t\t// PropertyPlaceholderConfigurer to ensure backward compatibility with 3.0 and earlier.\n\t\treturn PropertyPlaceholderConfigurer.class;\n\t}\n\n\t@Override\n\tprotected void doParse(Element element, BeanDefinitionBuilder builder) {\n\t\tsuper.doParse(element, builder);\n\n\t\tbuilder.addPropertyValue(\"ignoreUnresolvablePlaceholders\",\n\t\t\t\tBoolean.valueOf(element.getAttribute(\"ignore-unresolvable\")));\n\n\t\tString systemPropertiesModeName = element.getAttribute(SYSTEM_PROPERTIES_MODE_ATTRIBUTE);\n\t\tif (StringUtils.hasLength(systemPropertiesModeName) &&\n\t\t\t\t!systemPropertiesModeName.equals(SYSTEM_PROPERTIES_MODE_DEFAULT)) {\n\t\t\tbuilder.addPropertyValue(\"systemPropertiesModeName\", \"SYSTEM_PROPERTIES_MODE_\" + systemPropertiesModeName);\n\t\t}\n\n\t\tif (element.hasAttribute(\"value-separator\")) {    \n\t\t\tbuilder.addPropertyValue(\"valueSeparator\", element.getAttribute(\"value-separator\"));\n\t\t}\n\n\t\tif (element.hasAttribute(\"null-value\")) {\n\t\t\tbuilder.addPropertyValue(\"nullValue\", element.getAttribute(\"null-value\"));\n\t\t}\n\t}\n\n}\n```\n在`getBeanClass`中，根据标签中的`system-properties-mode`属性来返回不同的类，来指明要实例化的类。\n\n再来看上述的`parse`方法，首先就是调用父类的`doParse`方法，然后就是解析标签中的相应属性，放到`BeanDefinitionBuilder`中，剩下的工作就交给spring这个框架来完成了。\n\n#### `system-properties-mode`\n\n决定解析placeholder的顺序。这个属性的取值如下：\n\n>\t**\"ENVIRONMENT\"** indicates placeholders should be resolved against the current Environment and against any local properties;\n\n>\t**\"NEVER\"** indicates placeholders should be resolved only against local properties and never against system properties;\n\n>\t**\"FALLBACK\"** indicates placeholders should be resolved against any local properties and then against system properties;\n\n>\t**\"OVERRIDE\"** indicates placeholders should be resolved first against system properties and then against any local properties;\n\n这个属性的默认值是`ENVIRONMENT`,也就是先从环境变量中解析，然后才从我们定义的properties文件中解析，如果环境中的变量名和配置文件中的变量名冲突，\n\n就会使用环境变量中的。\n\n>所以配置文件中的变量名最好带一个前缀，如`jdbc.username=`, 笔者在Ubuntu下就遇到过不带前缀的`username`和系统的'username'冲突的情况\n\n#### `ignore-unresolvable`\n\n>\tSpecifies if failure to find the property value to replace a key should be ignored.\n\tDefault is \"false\", meaning that this placeholder configurer will raise an exception\n\tif it cannot resolve a key. Set to \"true\" to allow the configurer to pass on the key\n\tto any others in the context that have not yet visited the key in question.\n\n这个属性很关键，他决定遇到无法解析的变量时是否抛出异常，默认是`fale`（抛出异常）,在有多个配置文件的时候应该设置为`true`。\n\n#### `value-separator`\n\nplaceHolder默认值得分隔符，默认是`:`\n\n> The separating character between the placeholder variable and the associated \tdefault value: by default, a ':' symbol.\n\n#### `null-value`\n\n>\tA value that should be treated as 'null' when resolved as a placeholder value:\n\te.g. \"\" (empty String) or \"null\". By default, no such null value is defined.\n\n**这些属性都可以在相应的`xsd`schema中找到。**\n\n\n### AbstractPropertyLoadingBeanDefinitionParser\n\n这是上面的那个解析类的父类。\n\n```java\nabstract class AbstractPropertyLoadingBeanDefinitionParser extends AbstractSingleBeanDefinitionParser {\n\n\t@Override\n\tprotected boolean shouldGenerateId() {\n\t\treturn true;\n\t}\n\n\t@Override\n\tprotected void doParse(Element element, BeanDefinitionBuilder builder) {\n\t\tString location = element.getAttribute(\"location\");\n\t\tif (StringUtils.hasLength(location)) {\n\t\t\tString[] locations = StringUtils.commaDelimitedListToStringArray(location);\n\t\t\tbuilder.addPropertyValue(\"locations\", locations);\n\t\t}\n\n\t\tString propertiesRef = element.getAttribute(\"properties-ref\");\n\t\tif (StringUtils.hasLength(propertiesRef)) {\n\t\t\tbuilder.addPropertyReference(\"properties\", propertiesRef);\n\t\t}\n\n\t\tString fileEncoding = element.getAttribute(\"file-encoding\");\n\t\tif (StringUtils.hasLength(fileEncoding)) {\n\t\t\tbuilder.addPropertyValue(\"fileEncoding\", fileEncoding);\n\t\t}\n\n\t\tString order = element.getAttribute(\"order\");\n\t\tif (StringUtils.hasLength(order)) {\n\t\t\tbuilder.addPropertyValue(\"order\", Integer.valueOf(order));\n\t\t}\n\n\t\tbuilder.addPropertyValue(\"ignoreResourceNotFound\",\n\t\t\t\tBoolean.valueOf(element.getAttribute(\"ignore-resource-not-found\")));\n\n\t\tbuilder.addPropertyValue(\"localOverride\",\n\t\t\t\tBoolean.valueOf(element.getAttribute(\"local-override\")));\n\n\t\tbuilder.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n\t}\n\n}\n\n```\n\n#### shouldGenerateId\n\n```java\n/**\n * Should an ID be generated instead of read from the passed in {@link Element}?\n * <p>Disabled by default; subclasses can override this to enable ID generation.\n * Note that this flag is about <i>always</i> generating an ID; the parser\n * won't even check for an \"id\" attribute in this case.\n * @return whether the parser should always generate an id\n */\nprotected boolean shouldGenerateId() {\n  return false;\n}\n```\n\n#### doParse\n\n这个方法负责解析配置文件的location、file-encoding等通用的属性，并放置到`builder`中。\n\n## Spring 调用handler的过程\n\nspring将特定的标签的解析委托给我们自己定义的handler的过程主要是在`DefaultBeanDefinitionDocumentReader`中\n```java\n/**\n\t * Parse the elements at the root level in the document:\n\t * \"import\", \"alias\", \"bean\".\n\t * @param root the DOM root element of the document\n\t */\n\tprotected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) {\n\t\tif (delegate.isDefaultNamespace(root)) {\n\t\t\tNodeList nl = root.getChildNodes();\n\t\t\tfor (int i = 0; i < nl.getLength(); i++) {\n\t\t\t\tNode node = nl.item(i);\n\t\t\t\tif (node instanceof Element) {\n\t\t\t\t\tElement ele = (Element) node;\n\t\t\t\t\tif (delegate.isDefaultNamespace(ele)) {\n\t\t\t\t\t\tparseDefaultElement(ele, delegate);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tdelegate.parseCustomElement(ele);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tdelegate.parseCustomElement(root);\n\t\t}\n\t}\n```\n`context`不是默认命名空间的标签，所以走`parseCustomElement`分支。\n\n走到`BeanDefinitionParserDelegate`的`parseCustomElement`方法中\n```java\npublic BeanDefinition parseCustomElement(Element ele) {\n\t\treturn parseCustomElement(ele, null);\n\t}\n\n\tpublic BeanDefinition parseCustomElement(Element ele, BeanDefinition containingBd) {\n\t\tString namespaceUri = getNamespaceURI(ele);\n\t\tNamespaceHandler handler = this.readerContext.getNamespaceHandlerResolver().resolve(namespaceUri);\n\t\tif (handler == null) {\n\t\t\terror(\"Unable to locate Spring NamespaceHandler for XML schema namespace [\" + namespaceUri + \"]\", ele);\n\t\t\treturn null;\n\t\t}\n\t\treturn handler.parse(ele, new ParserContext(this.readerContext, this, containingBd));\n\t}\n```\n\n这里从`NamespaceHandlerResolver`中根据`namespaceUri`获取到对应的`NamespaceHandler`,然后调用`handler`的`parse`\n方法进行解析，返回一个`BeanDefinition`，然后就注册到spring中了。\n\n这里的handler就是前面我们看到的实现了`NamespaceHandlerSupport `的那个`ContextNamespaceHandler`,`NamespaceHandlerSupport `继承自`NamespaceHandler`,它的parse 方法如下：\n\n```java\n/**\n\t * Parses the supplied {@link Element} by delegating to the {@link BeanDefinitionParser} that is\n\t * registered for that {@link Element}.\n\t */\n\t@Override\n\tpublic BeanDefinition parse(Element element, ParserContext parserContext) {\n\t\treturn findParserForElement(element, parserContext).parse(element, parserContext);\n\t}\n\n\t/**\n\t * Locates the {@link BeanDefinitionParser} from the register implementations using\n\t * the local name of the supplied {@link Element}.\n\t */\n\tprivate BeanDefinitionParser findParserForElement(Element element, ParserContext parserContext) {\n\t\tString localName = parserContext.getDelegate().getLocalName(element);\n\t\tBeanDefinitionParser parser = this.parsers.get(localName);\n\t\tif (parser == null) {\n\t\t\tparserContext.getReaderContext().fatal(\n\t\t\t\t\t\"Cannot locate BeanDefinitionParser for element [\" + localName + \"]\", element);\n\t\t}\n\t\treturn parser;\n\t}\n\n```\n就是从在`init()`方法中注册的`Parser`,根据对应的标签前缀，获取到parser，对xml元素进行解析。\n\n\n## 生效过程\n\n生效过程是在`BeanFactoryPostProcessor`被调用的过程中生效的, 继承关系\n\n![](post-processors.jpg)\n\n可以看到里面有两个熟悉的类——`PropertySourcesPlaceholderConfigurer`和`PropertyPlaceholderConfigurer`，正是`PropertyPlaceholderBeanDefinitionParser.getBeanClass`返回的两种类型, 也就是说他们两个是`BeanFactoryPostProcessor`.\n\n\n### PropertySourcesPlaceholderConfigurer\n```java\n/**\n\t * {@inheritDoc}\n\t * <p>Processing occurs by replacing ${...} placeholders in bean definitions by resolving each\n\t * against this configurer's set of {@link PropertySources}, which includes:\n\t * <ul>\n\t * <li>all {@linkplain org.springframework.core.env.ConfigurableEnvironment#getPropertySources\n\t * environment property sources}, if an {@code Environment} {@linkplain #setEnvironment is present}\n\t * <li>{@linkplain #mergeProperties merged local properties}, if {@linkplain #setLocation any}\n\t * {@linkplain #setLocations have} {@linkplain #setProperties been}\n\t * {@linkplain #setPropertiesArray specified}\n\t * <li>any property sources set by calling {@link #setPropertySources}\n\t * </ul>\n\t * <p>If {@link #setPropertySources} is called, <strong>environment and local properties will be\n\t * ignored</strong>. This method is designed to give the user fine-grained control over property\n\t * sources, and once set, the configurer makes no assumptions about adding additional sources.\n\t */\n\t@Override\n\tpublic void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {\n\t\tif (this.propertySources == null) {\n\t\t\tthis.propertySources = new MutablePropertySources();\n\t\t\tif (this.environment != null) {\n\t\t\t\tthis.propertySources.addLast(\n\t\t\t\t\tnew PropertySource<Environment>(ENVIRONMENT_PROPERTIES_PROPERTY_SOURCE_NAME, this.environment) {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic String getProperty(String key) {\n\t\t\t\t\t\t\treturn this.source.getProperty(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tPropertySource<?> localPropertySource =\n\t\t\t\t\t\tnew PropertiesPropertySource(LOCAL_PROPERTIES_PROPERTY_SOURCE_NAME, mergeProperties());\n\t\t\t\tif (this.localOverride) {\n\t\t\t\t\tthis.propertySources.addFirst(localPropertySource);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.propertySources.addLast(localPropertySource);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (IOException ex) {\n\t\t\t\tthrow new BeanInitializationException(\"Could not load properties\", ex);\n\t\t\t}\n\t\t}\n\n\t\tprocessProperties(beanFactory, new PropertySourcesPropertyResolver(this.propertySources));\n\t\tthis.appliedPropertySources = this.propertySources;\n\t}\n\n```\n\n注意上述的`localOverride`变量，它决定了是否用本地的替换系统的，主要是用加载的顺序呢控制的\n\n```java\n/**\n* <p>Any local properties (e.g. those added via {@link #setProperties}, {@link #setLocations}\n* et al.) are added as a {@code PropertySource}. Search precedence of local properties is\n* based on the value of the {@link #setLocalOverride localOverride} property, which is by\n* default {@code false} meaning that local properties are to be searched last, after all\n* environment property sources.\n*/\n```\n获取到所有的属性列表后，处理属性就交给了`processProperties`这个方法.\n\n```java\n/**\n\t * Visit each bean definition in the given bean factory and attempt to replace ${...} property\n\t * placeholders with values from the given properties.\n\t */\n\tprotected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess,\n\t\t\tfinal ConfigurablePropertyResolver propertyResolver) throws BeansException {\n\n\t\tpropertyResolver.setPlaceholderPrefix(this.placeholderPrefix);\n\t\tpropertyResolver.setPlaceholderSuffix(this.placeholderSuffix);\n\t\tpropertyResolver.setValueSeparator(this.valueSeparator);\n\n\t\tStringValueResolver valueResolver = new StringValueResolver() {\n\t\t\t@Override\n\t\t\tpublic String resolveStringValue(String strVal) {\n\t\t\t\tString resolved = ignoreUnresolvablePlaceholders ?\n\t\t\t\t\t\tpropertyResolver.resolvePlaceholders(strVal) :\n\t\t\t\t\t\tpropertyResolver.resolveRequiredPlaceholders(strVal);\n\t\t\t\treturn (resolved.equals(nullValue) ? null : resolved);\n\t\t\t}\n\t\t};\n\n\t\tdoProcessProperties(beanFactoryToProcess, valueResolver);\n\t}\n```\n\n先设置propertyResolver的prefix（默认是${}）和suffix(默认是})，以及默认值得分隔符(默认是:).\n\n然后创建了一个StringValueResolver, 这里根据`ignoreUnresolvablePlaceholders`的值来进行不同的解析，\n\n这个值默认是false, 但是可以在标签中配置。\n\n```xml\n<xsd:attribute name=\"ignore-unresolvable\" type=\"xsd:boolean\" default=\"false\">\n\t\t\t<xsd:annotation>\n\t\t\t\t<xsd:documentation><![CDATA[\n\tSpecifies if failure to find the property value to replace a key should be ignored.\n\tDefault is \"false\", meaning that this placeholder configurer will raise an exception\n\tif it cannot resolve a key. Set to \"true\" to allow the configurer to pass on the key\n\tto any others in the context that have not yet visited the key in question.\n\t\t\t\t]]></xsd:documentation>\n\t\t\t</xsd:annotation>\n\t\t</xsd:attribute>\n```\n\n`false`就以为者遇到无法解析的值就会直接抛出异常\n\n接下来看看`doProcessProperties`\n\n```java\nprotected void doProcessProperties(ConfigurableListableBeanFactory beanFactoryToProcess,\n\t\tStringValueResolver valueResolver) {\n\n\tBeanDefinitionVisitor visitor = new BeanDefinitionVisitor(valueResolver);\n\n\tString[] beanNames = beanFactoryToProcess.getBeanDefinitionNames();\n\tfor (String curName : beanNames) {\n\t\t// Check that we're not parsing our own bean definition,\n\t\t// to avoid failing on unresolvable placeholders in properties file locations.\n\t\tif (!(curName.equals(this.beanName) && beanFactoryToProcess.equals(this.beanFactory))) {\n\t\t\tBeanDefinition bd = beanFactoryToProcess.getBeanDefinition(curName);\n\t\t\ttry {\n\t\t\t\tvisitor.visitBeanDefinition(bd);\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tthrow new BeanDefinitionStoreException(bd.getResourceDescription(), curName, ex.getMessage(), ex);\n\t\t\t}\n\t\t}\n\t}\n\n\t// New in Spring 2.5: resolve placeholders in alias target names and aliases as well.\n\tbeanFactoryToProcess.resolveAliases(valueResolver);\n\n\t// New in Spring 3.0: resolve placeholders in embedded values such as annotation attributes.\n\tbeanFactoryToProcess.addEmbeddedValueResolver(valueResolver);\n}\n```\n这里采用的是visitor模式，查看`BeanDefinitionVisitor#visitBeanDefinition`\n\n```java\n/**\n\t * Traverse the given BeanDefinition object and the MutablePropertyValues\n\t * and ConstructorArgumentValues contained in them.\n\t * @param beanDefinition the BeanDefinition object to traverse\n\t * @see #resolveStringValue(String)\n\t */\n\tpublic void visitBeanDefinition(BeanDefinition beanDefinition) {\n\t\tvisitParentName(beanDefinition);\n\t\tvisitBeanClassName(beanDefinition);\n\t\tvisitFactoryBeanName(beanDefinition);\n\t\tvisitFactoryMethodName(beanDefinition);\n\t\tvisitScope(beanDefinition);\n\t\tvisitPropertyValues(beanDefinition.getPropertyValues());\n\t\tConstructorArgumentValues cas = beanDefinition.getConstructorArgumentValues();\n\t\tvisitIndexedArgumentValues(cas.getIndexedArgumentValues());\n\t\tvisitGenericArgumentValues(cas.getGenericArgumentValues());\n\t}\n```\n以其中的`visitParentName`为例：\n```java\nprotected void visitParentName(BeanDefinition beanDefinition) {\n\tString parentName = beanDefinition.getParentName();\n\tif (parentName != null) {\n\t\tString resolvedName = resolveStringValue(parentName);\n\t\tif (!parentName.equals(resolvedName)) {\n\t\t\tbeanDefinition.setParentName(resolvedName);\n\t\t}\n\t}\n}\n\n```\n就是先获取`parentName`，然后替换相应的属性之后的`resolvedName`,如果和原来的不一样就设置`resolvedName`\n\n为新的parentName\n\n```java\n/**\n * Resolve the given String value, for example parsing placeholders.\n * @param strVal the original String value\n * @return the resolved String value\n */\nprotected String resolveStringValue(String strVal) {\n\tif (this.valueResolver == null) {\n\t\tthrow new IllegalStateException(\"No StringValueResolver specified - pass a resolver \" +\n\t\t\t\t\"object into the constructor or override the 'resolveStringValue' method\");\n\t}\n\tString resolvedValue = this.valueResolver.resolveStringValue(strVal);\n\t// Return original String if not modified.\n\treturn (strVal.equals(resolvedValue) ? strVal : resolvedValue);\n}\n```\n\n顺藤摸瓜,看看`valueResolver`,就是之前的`StringValueResolver`\n\n这是一个接口只有一个方法\n\n```java\npublic interface StringValueResolver {\n\n\t/**\n\t * Resolve the given String value, for example parsing placeholders.\n\t * @param strVal the original String value\n\t * @return the resolved String value\n\t */\n\tString resolveStringValue(String strVal);\n\n}\n```\n\n之前传入的其实就是对应`ConfigurablePropertyResolver`的两个方法, 之前传入的是它的子类\n\n`PropertySourcesPropertyResolver`\n\n```java\n@Override\n\tpublic String resolvePlaceholders(String text) {\n\t\tif (this.nonStrictHelper == null) {\n\t\t\tthis.nonStrictHelper = createPlaceholderHelper(true);\n\t\t}\n\t\treturn doResolvePlaceholders(text, this.nonStrictHelper);\n\t}\n\n\t@Override\n\tpublic String resolveRequiredPlaceholders(String text) throws IllegalArgumentException {\n\t\tif (this.strictHelper == null) {\n\t\t\tthis.strictHelper = createPlaceholderHelper(false);\n\t\t}\n\t\treturn doResolvePlaceholders(text, this.strictHelper);\n\t}\n```\n\n调用的是内部方法:\n\n```java\nprivate String doResolvePlaceholders(String text, PropertyPlaceholderHelper helper) {\n\treturn helper.replacePlaceholders(text, new PropertyPlaceholderHelper.PlaceholderResolver() {\n\t\t@Override\n\t\tpublic String resolvePlaceholder(String placeholderName) {\n\t\t\treturn getPropertyAsRawString(placeholderName);\n\t\t}\n\t});\n}\n\n```\n\n最终调用功能的是`PropertyPlaceholderHelper`的replacePlaceholders方法，\n\n这个helper在构造是通过 `createPlaceholderHelper`方法构建的，他接受一个bool类型的参数\n\n```java\nprivate PropertyPlaceholderHelper createPlaceholderHelper(boolean ignoreUnresolvablePlaceholders) {\n\treturn new PropertyPlaceholderHelper(this.placeholderPrefix, this.placeholderSuffix,\n\t\t\tthis.valueSeparator, ignoreUnresolvablePlaceholders);\n}\n```\n\n这个bool值就是表示是否要ignore掉不能解析的属性。\n\n```java\n/**\n\t * Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix.\n\t * @param placeholderPrefix the prefix that denotes the start of a placeholder\n\t * @param placeholderSuffix the suffix that denotes the end of a placeholder\n\t * @param valueSeparator the separating character between the placeholder variable\n\t * and the associated default value, if any\n\t * @param ignoreUnresolvablePlaceholders indicates whether unresolvable placeholders should\n\t * be ignored ({@code true}) or cause an exception ({@code false})\n\t */\n```\n接着追\n\n```java\n/**\n * Replaces all placeholders of format {@code ${name}} with the value returned\n * from the supplied {@link PlaceholderResolver}.\n * @param value the value containing the placeholders to be replaced\n * @param placeholderResolver the {@code PlaceholderResolver} to use for replacement\n * @return the supplied value with placeholders replaced inline\n */\npublic String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {\n\tAssert.notNull(value, \"'value' must not be null\");\n\treturn parseStringValue(value, placeholderResolver, new HashSet<String>());\n}\n\nprotected String parseStringValue(\n\t\t\tString strVal, PlaceholderResolver placeholderResolver, Set<String> visitedPlaceholders) {\n\n\t\tStringBuilder result = new StringBuilder(strVal);\n\n\t\tint startIndex = strVal.indexOf(this.placeholderPrefix);\n\t\twhile (startIndex != -1) {\n\t\t\tint endIndex = findPlaceholderEndIndex(result, startIndex);\n\t\t\tif (endIndex != -1) {\n\t\t\t\tString placeholder = result.substring(startIndex + this.placeholderPrefix.length(), endIndex);\n\t\t\t\tString originalPlaceholder = placeholder;\n\t\t\t\tif (!visitedPlaceholders.add(originalPlaceholder)) {\n\t\t\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\t\t\"Circular placeholder reference '\" + originalPlaceholder + \"' in property definitions\");\n\t\t\t\t}\n\t\t\t\t// Recursive invocation, parsing placeholders contained in the placeholder key.\n\t\t\t\tplaceholder = parseStringValue(placeholder, placeholderResolver, visitedPlaceholders);\n\t\t\t\t// Now obtain the value for the fully resolved key...\n\t\t\t\tString propVal = placeholderResolver.resolvePlaceholder(placeholder);\n\t\t\t\tif (propVal == null && this.valueSeparator != null) {\n\t\t\t\t\tint separatorIndex = placeholder.indexOf(this.valueSeparator);\n\t\t\t\t\tif (separatorIndex != -1) {\n\t\t\t\t\t\tString actualPlaceholder = placeholder.substring(0, separatorIndex);\n\t\t\t\t\t\tString defaultValue = placeholder.substring(separatorIndex + this.valueSeparator.length());\n\t\t\t\t\t\tpropVal = placeholderResolver.resolvePlaceholder(actualPlaceholder);\n\t\t\t\t\t\tif (propVal == null) {\n\t\t\t\t\t\t\tpropVal = defaultValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (propVal != null) {\n\t\t\t\t\t// Recursive invocation, parsing placeholders contained in the\n\t\t\t\t\t// previously resolved placeholder value.\n\t\t\t\t\tpropVal = parseStringValue(propVal, placeholderResolver, visitedPlaceholders);\n\t\t\t\t\tresult.replace(startIndex, endIndex + this.placeholderSuffix.length(), propVal);\n\t\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t\t\tlogger.trace(\"Resolved placeholder '\" + placeholder + \"'\");\n\t\t\t\t\t}\n\t\t\t\t\tstartIndex = result.indexOf(this.placeholderPrefix, startIndex + propVal.length());\n\t\t\t\t}\n\t\t\t\telse if (this.ignoreUnresolvablePlaceholders) {\n\t\t\t\t\t// Proceed with unprocessed value.\n\t\t\t\t\tstartIndex = result.indexOf(this.placeholderPrefix, endIndex + this.placeholderSuffix.length());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow new IllegalArgumentException(\"Could not resolve placeholder '\" +\n\t\t\t\t\t\t\tplaceholder + \"'\" + \" in string value \\\"\" + strVal + \"\\\"\");\n\t\t\t\t}\n\t\t\t\tvisitedPlaceholders.remove(originalPlaceholder);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstartIndex = -1;\n\t\t\t}\n\t\t}\n\n\t\treturn result.toString();\n\t}\n\n```\n\n实际解析的代码都在这里：\n\n1. 取出placeHolder的名称.\n2. 判断有没有循环引用的情况.\n3. 递归替换，获取对应的值.\n4. 如果值为空，解析默认值.\n\n\n### PropertyPlaceholderConfigurer\n\n应该和上面的类似，抽时间补。\n","source":"_posts/property-placeholder.md","raw":"title: Spring占位符（property-placeholder），源码阅读\ntags: placeholder\ncategory: spring\ndate: 2016-10-31 00:22:23\n---\n\n\n##  `<context:property-placeholder location='xxx' />`的解析过程\n\n### schema\n\n在idea中`ctrl` + `b`或者，`ctrl` + 鼠标左键点击即可打开schema具体的位置\n\n![](location.jpg)\n\n`sping.handlers`中内容如下:\n\n```xml\nhttp\\://www.springframework.org/schema/context=org.springframework.context.config.ContextNamespaceHandler\nhttp\\://www.springframework.org/schema/jee=org.springframework.ejb.config.JeeNamespaceHandler\nhttp\\://www.springframework.org/schema/lang=org.springframework.scripting.config.LangNamespaceHandler\nhttp\\://www.springframework.org/schema/task=org.springframework.scheduling.config.TaskNamespaceHandler\nhttp\\://www.springframework.org/schema/cache=org.springframework.cache.config.CacheNamespaceHandler\n```\n`spring.schemas`中的内容如下：\n\n```xml\nhttp\\://www.springframework.org/schema/context/spring-context-2.5.xsd=org/springframework/context/config/spring-context-2.5.xsd\nhttp\\://www.springframework.org/schema/context/spring-context-3.0.xsd=org/springframework/context/config/spring-context-3.0.xsd\nhttp\\://www.springframework.org/schema/context/spring-context-3.1.xsd=org/springframework/context/config/spring-context-3.1.xsd\nhttp\\://www.springframework.org/schema/context/spring-context-3.2.xsd=org/springframework/context/config/spring-context-3.2.xsd\nhttp\\://www.springframework.org/schema/context/spring-context-4.0.xsd=org/springframework/context/config/spring-context-4.0.xsd\nhttp\\://www.springframework.org/schema/context/spring-context-4.1.xsd=org/springframework/context/config/spring-context-4.1.xsd\nhttp\\://www.springframework.org/schema/context/spring-context-4.2.xsd=org/springframework/context/config/spring-context-4.2.xsd\nhttp\\://www.springframework.org/schema/context/spring-context.xsd=org/springframework/context/config/spring-context-4.2.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee-2.0.xsd=org/springframework/ejb/config/spring-jee-2.0.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee-2.5.xsd=org/springframework/ejb/config/spring-jee-2.5.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee-3.0.xsd=org/springframework/ejb/config/spring-jee-3.0.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee-3.1.xsd=org/springframework/ejb/config/spring-jee-3.1.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee-3.2.xsd=org/springframework/ejb/config/spring-jee-3.2.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee-4.0.xsd=org/springframework/ejb/config/spring-jee-4.0.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee-4.1.xsd=org/springframework/ejb/config/spring-jee-4.1.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee-4.2.xsd=org/springframework/ejb/config/spring-jee-4.2.xsd\nhttp\\://www.springframework.org/schema/jee/spring-jee.xsd=org/springframework/ejb/config/spring-jee-4.2.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang-2.0.xsd=org/springframework/scripting/config/spring-lang-2.0.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang-2.5.xsd=org/springframework/scripting/config/spring-lang-2.5.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang-3.0.xsd=org/springframework/scripting/config/spring-lang-3.0.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang-3.1.xsd=org/springframework/scripting/config/spring-lang-3.1.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang-3.2.xsd=org/springframework/scripting/config/spring-lang-3.2.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang-4.0.xsd=org/springframework/scripting/config/spring-lang-4.0.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang-4.1.xsd=org/springframework/scripting/config/spring-lang-4.1.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang-4.2.xsd=org/springframework/scripting/config/spring-lang-4.2.xsd\nhttp\\://www.springframework.org/schema/lang/spring-lang.xsd=org/springframework/scripting/config/spring-lang-4.2.xsd\nhttp\\://www.springframework.org/schema/task/spring-task-3.0.xsd=org/springframework/scheduling/config/spring-task-3.0.xsd\nhttp\\://www.springframework.org/schema/task/spring-task-3.1.xsd=org/springframework/scheduling/config/spring-task-3.1.xsd\nhttp\\://www.springframework.org/schema/task/spring-task-3.2.xsd=org/springframework/scheduling/config/spring-task-3.2.xsd\nhttp\\://www.springframework.org/schema/task/spring-task-4.0.xsd=org/springframework/scheduling/config/spring-task-4.0.xsd\nhttp\\://www.springframework.org/schema/task/spring-task-4.1.xsd=org/springframework/scheduling/config/spring-task-4.1.xsd\nhttp\\://www.springframework.org/schema/task/spring-task-4.2.xsd=org/springframework/scheduling/config/spring-task-4.2.xsd\nhttp\\://www.springframework.org/schema/task/spring-task.xsd=org/springframework/scheduling/config/spring-task-4.2.xsd\nhttp\\://www.springframework.org/schema/cache/spring-cache-3.1.xsd=org/springframework/cache/config/spring-cache-3.1.xsd\nhttp\\://www.springframework.org/schema/cache/spring-cache-3.2.xsd=org/springframework/cache/config/spring-cache-3.2.xsd\nhttp\\://www.springframework.org/schema/cache/spring-cache-4.0.xsd=org/springframework/cache/config/spring-cache-4.0.xsd\nhttp\\://www.springframework.org/schema/cache/spring-cache-4.1.xsd=org/springframework/cache/config/spring-cache-4.1.xsd\nhttp\\://www.springframework.org/schema/cache/spring-cache-4.2.xsd=org/springframework/cache/config/spring-cache-4.2.xsd\nhttp\\://www.springframework.org/schema/cache/spring-cache.xsd=org/springframework/cache/config/spring-cache-4.2.xsd\n```\n### NamespaceHandlerSupport\n\n从`handler`中我们可以找出`context`标签的处理类是`org.springframework.context.config.ContextNamespaceHandler`,内容如下：\n\n```java\npublic class ContextNamespaceHandler extends NamespaceHandlerSupport {\n\n\t@Override\n\tpublic void init() {\n\t\tregisterBeanDefinitionParser(\"property-placeholder\", new PropertyPlaceholderBeanDefinitionParser());\n\t\tregisterBeanDefinitionParser(\"property-override\", new PropertyOverrideBeanDefinitionParser());\n\t\tregisterBeanDefinitionParser(\"annotation-config\", new AnnotationConfigBeanDefinitionParser());\n\t\tregisterBeanDefinitionParser(\"component-scan\", new ComponentScanBeanDefinitionParser());\n\t\tregisterBeanDefinitionParser(\"load-time-weaver\", new LoadTimeWeaverBeanDefinitionParser());\n\t\tregisterBeanDefinitionParser(\"spring-configured\", new SpringConfiguredBeanDefinitionParser());\n\t\tregisterBeanDefinitionParser(\"mbean-export\", new MBeanExportBeanDefinitionParser());\n\t\tregisterBeanDefinitionParser(\"mbean-server\", new MBeanServerBeanDefinitionParser());\n\t}\n}\n```\n顺藤摸瓜就能找到`property-placeholder`的处理类是`PropertyPlaceholderBeanDefinitionParser`\n\n### PropertyPlaceholderBeanDefinitionParser\n\n继承关系：\n\n![](hierarchy.jpg)\n\n```java\nclass PropertyPlaceholderBeanDefinitionParser extends AbstractPropertyLoadingBeanDefinitionParser {\n\n\tprivate static final String SYSTEM_PROPERTIES_MODE_ATTRIBUTE = \"system-properties-mode\";\n\n\tprivate static final String SYSTEM_PROPERTIES_MODE_DEFAULT = \"ENVIRONMENT\";\n\n\n\t@Override\n\tprotected Class<?> getBeanClass(Element element) {\n\t\t// As of Spring 3.1, the default value of system-properties-mode has changed from\n\t\t// 'FALLBACK' to 'ENVIRONMENT'. This latter value indicates that resolution of\n\t\t// placeholders against system properties is a function of the Environment and\n\t\t// its current set of PropertySources.\n\t\tif (SYSTEM_PROPERTIES_MODE_DEFAULT.equals(element.getAttribute(SYSTEM_PROPERTIES_MODE_ATTRIBUTE))) {\n\t\t\treturn PropertySourcesPlaceholderConfigurer.class;\n\t\t}\n\n\t\t// The user has explicitly specified a value for system-properties-mode: revert to\n\t\t// PropertyPlaceholderConfigurer to ensure backward compatibility with 3.0 and earlier.\n\t\treturn PropertyPlaceholderConfigurer.class;\n\t}\n\n\t@Override\n\tprotected void doParse(Element element, BeanDefinitionBuilder builder) {\n\t\tsuper.doParse(element, builder);\n\n\t\tbuilder.addPropertyValue(\"ignoreUnresolvablePlaceholders\",\n\t\t\t\tBoolean.valueOf(element.getAttribute(\"ignore-unresolvable\")));\n\n\t\tString systemPropertiesModeName = element.getAttribute(SYSTEM_PROPERTIES_MODE_ATTRIBUTE);\n\t\tif (StringUtils.hasLength(systemPropertiesModeName) &&\n\t\t\t\t!systemPropertiesModeName.equals(SYSTEM_PROPERTIES_MODE_DEFAULT)) {\n\t\t\tbuilder.addPropertyValue(\"systemPropertiesModeName\", \"SYSTEM_PROPERTIES_MODE_\" + systemPropertiesModeName);\n\t\t}\n\n\t\tif (element.hasAttribute(\"value-separator\")) {    \n\t\t\tbuilder.addPropertyValue(\"valueSeparator\", element.getAttribute(\"value-separator\"));\n\t\t}\n\n\t\tif (element.hasAttribute(\"null-value\")) {\n\t\t\tbuilder.addPropertyValue(\"nullValue\", element.getAttribute(\"null-value\"));\n\t\t}\n\t}\n\n}\n```\n在`getBeanClass`中，根据标签中的`system-properties-mode`属性来返回不同的类，来指明要实例化的类。\n\n再来看上述的`parse`方法，首先就是调用父类的`doParse`方法，然后就是解析标签中的相应属性，放到`BeanDefinitionBuilder`中，剩下的工作就交给spring这个框架来完成了。\n\n#### `system-properties-mode`\n\n决定解析placeholder的顺序。这个属性的取值如下：\n\n>\t**\"ENVIRONMENT\"** indicates placeholders should be resolved against the current Environment and against any local properties;\n\n>\t**\"NEVER\"** indicates placeholders should be resolved only against local properties and never against system properties;\n\n>\t**\"FALLBACK\"** indicates placeholders should be resolved against any local properties and then against system properties;\n\n>\t**\"OVERRIDE\"** indicates placeholders should be resolved first against system properties and then against any local properties;\n\n这个属性的默认值是`ENVIRONMENT`,也就是先从环境变量中解析，然后才从我们定义的properties文件中解析，如果环境中的变量名和配置文件中的变量名冲突，\n\n就会使用环境变量中的。\n\n>所以配置文件中的变量名最好带一个前缀，如`jdbc.username=`, 笔者在Ubuntu下就遇到过不带前缀的`username`和系统的'username'冲突的情况\n\n#### `ignore-unresolvable`\n\n>\tSpecifies if failure to find the property value to replace a key should be ignored.\n\tDefault is \"false\", meaning that this placeholder configurer will raise an exception\n\tif it cannot resolve a key. Set to \"true\" to allow the configurer to pass on the key\n\tto any others in the context that have not yet visited the key in question.\n\n这个属性很关键，他决定遇到无法解析的变量时是否抛出异常，默认是`fale`（抛出异常）,在有多个配置文件的时候应该设置为`true`。\n\n#### `value-separator`\n\nplaceHolder默认值得分隔符，默认是`:`\n\n> The separating character between the placeholder variable and the associated \tdefault value: by default, a ':' symbol.\n\n#### `null-value`\n\n>\tA value that should be treated as 'null' when resolved as a placeholder value:\n\te.g. \"\" (empty String) or \"null\". By default, no such null value is defined.\n\n**这些属性都可以在相应的`xsd`schema中找到。**\n\n\n### AbstractPropertyLoadingBeanDefinitionParser\n\n这是上面的那个解析类的父类。\n\n```java\nabstract class AbstractPropertyLoadingBeanDefinitionParser extends AbstractSingleBeanDefinitionParser {\n\n\t@Override\n\tprotected boolean shouldGenerateId() {\n\t\treturn true;\n\t}\n\n\t@Override\n\tprotected void doParse(Element element, BeanDefinitionBuilder builder) {\n\t\tString location = element.getAttribute(\"location\");\n\t\tif (StringUtils.hasLength(location)) {\n\t\t\tString[] locations = StringUtils.commaDelimitedListToStringArray(location);\n\t\t\tbuilder.addPropertyValue(\"locations\", locations);\n\t\t}\n\n\t\tString propertiesRef = element.getAttribute(\"properties-ref\");\n\t\tif (StringUtils.hasLength(propertiesRef)) {\n\t\t\tbuilder.addPropertyReference(\"properties\", propertiesRef);\n\t\t}\n\n\t\tString fileEncoding = element.getAttribute(\"file-encoding\");\n\t\tif (StringUtils.hasLength(fileEncoding)) {\n\t\t\tbuilder.addPropertyValue(\"fileEncoding\", fileEncoding);\n\t\t}\n\n\t\tString order = element.getAttribute(\"order\");\n\t\tif (StringUtils.hasLength(order)) {\n\t\t\tbuilder.addPropertyValue(\"order\", Integer.valueOf(order));\n\t\t}\n\n\t\tbuilder.addPropertyValue(\"ignoreResourceNotFound\",\n\t\t\t\tBoolean.valueOf(element.getAttribute(\"ignore-resource-not-found\")));\n\n\t\tbuilder.addPropertyValue(\"localOverride\",\n\t\t\t\tBoolean.valueOf(element.getAttribute(\"local-override\")));\n\n\t\tbuilder.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n\t}\n\n}\n\n```\n\n#### shouldGenerateId\n\n```java\n/**\n * Should an ID be generated instead of read from the passed in {@link Element}?\n * <p>Disabled by default; subclasses can override this to enable ID generation.\n * Note that this flag is about <i>always</i> generating an ID; the parser\n * won't even check for an \"id\" attribute in this case.\n * @return whether the parser should always generate an id\n */\nprotected boolean shouldGenerateId() {\n  return false;\n}\n```\n\n#### doParse\n\n这个方法负责解析配置文件的location、file-encoding等通用的属性，并放置到`builder`中。\n\n## Spring 调用handler的过程\n\nspring将特定的标签的解析委托给我们自己定义的handler的过程主要是在`DefaultBeanDefinitionDocumentReader`中\n```java\n/**\n\t * Parse the elements at the root level in the document:\n\t * \"import\", \"alias\", \"bean\".\n\t * @param root the DOM root element of the document\n\t */\n\tprotected void parseBeanDefinitions(Element root, BeanDefinitionParserDelegate delegate) {\n\t\tif (delegate.isDefaultNamespace(root)) {\n\t\t\tNodeList nl = root.getChildNodes();\n\t\t\tfor (int i = 0; i < nl.getLength(); i++) {\n\t\t\t\tNode node = nl.item(i);\n\t\t\t\tif (node instanceof Element) {\n\t\t\t\t\tElement ele = (Element) node;\n\t\t\t\t\tif (delegate.isDefaultNamespace(ele)) {\n\t\t\t\t\t\tparseDefaultElement(ele, delegate);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tdelegate.parseCustomElement(ele);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tdelegate.parseCustomElement(root);\n\t\t}\n\t}\n```\n`context`不是默认命名空间的标签，所以走`parseCustomElement`分支。\n\n走到`BeanDefinitionParserDelegate`的`parseCustomElement`方法中\n```java\npublic BeanDefinition parseCustomElement(Element ele) {\n\t\treturn parseCustomElement(ele, null);\n\t}\n\n\tpublic BeanDefinition parseCustomElement(Element ele, BeanDefinition containingBd) {\n\t\tString namespaceUri = getNamespaceURI(ele);\n\t\tNamespaceHandler handler = this.readerContext.getNamespaceHandlerResolver().resolve(namespaceUri);\n\t\tif (handler == null) {\n\t\t\terror(\"Unable to locate Spring NamespaceHandler for XML schema namespace [\" + namespaceUri + \"]\", ele);\n\t\t\treturn null;\n\t\t}\n\t\treturn handler.parse(ele, new ParserContext(this.readerContext, this, containingBd));\n\t}\n```\n\n这里从`NamespaceHandlerResolver`中根据`namespaceUri`获取到对应的`NamespaceHandler`,然后调用`handler`的`parse`\n方法进行解析，返回一个`BeanDefinition`，然后就注册到spring中了。\n\n这里的handler就是前面我们看到的实现了`NamespaceHandlerSupport `的那个`ContextNamespaceHandler`,`NamespaceHandlerSupport `继承自`NamespaceHandler`,它的parse 方法如下：\n\n```java\n/**\n\t * Parses the supplied {@link Element} by delegating to the {@link BeanDefinitionParser} that is\n\t * registered for that {@link Element}.\n\t */\n\t@Override\n\tpublic BeanDefinition parse(Element element, ParserContext parserContext) {\n\t\treturn findParserForElement(element, parserContext).parse(element, parserContext);\n\t}\n\n\t/**\n\t * Locates the {@link BeanDefinitionParser} from the register implementations using\n\t * the local name of the supplied {@link Element}.\n\t */\n\tprivate BeanDefinitionParser findParserForElement(Element element, ParserContext parserContext) {\n\t\tString localName = parserContext.getDelegate().getLocalName(element);\n\t\tBeanDefinitionParser parser = this.parsers.get(localName);\n\t\tif (parser == null) {\n\t\t\tparserContext.getReaderContext().fatal(\n\t\t\t\t\t\"Cannot locate BeanDefinitionParser for element [\" + localName + \"]\", element);\n\t\t}\n\t\treturn parser;\n\t}\n\n```\n就是从在`init()`方法中注册的`Parser`,根据对应的标签前缀，获取到parser，对xml元素进行解析。\n\n\n## 生效过程\n\n生效过程是在`BeanFactoryPostProcessor`被调用的过程中生效的, 继承关系\n\n![](post-processors.jpg)\n\n可以看到里面有两个熟悉的类——`PropertySourcesPlaceholderConfigurer`和`PropertyPlaceholderConfigurer`，正是`PropertyPlaceholderBeanDefinitionParser.getBeanClass`返回的两种类型, 也就是说他们两个是`BeanFactoryPostProcessor`.\n\n\n### PropertySourcesPlaceholderConfigurer\n```java\n/**\n\t * {@inheritDoc}\n\t * <p>Processing occurs by replacing ${...} placeholders in bean definitions by resolving each\n\t * against this configurer's set of {@link PropertySources}, which includes:\n\t * <ul>\n\t * <li>all {@linkplain org.springframework.core.env.ConfigurableEnvironment#getPropertySources\n\t * environment property sources}, if an {@code Environment} {@linkplain #setEnvironment is present}\n\t * <li>{@linkplain #mergeProperties merged local properties}, if {@linkplain #setLocation any}\n\t * {@linkplain #setLocations have} {@linkplain #setProperties been}\n\t * {@linkplain #setPropertiesArray specified}\n\t * <li>any property sources set by calling {@link #setPropertySources}\n\t * </ul>\n\t * <p>If {@link #setPropertySources} is called, <strong>environment and local properties will be\n\t * ignored</strong>. This method is designed to give the user fine-grained control over property\n\t * sources, and once set, the configurer makes no assumptions about adding additional sources.\n\t */\n\t@Override\n\tpublic void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) throws BeansException {\n\t\tif (this.propertySources == null) {\n\t\t\tthis.propertySources = new MutablePropertySources();\n\t\t\tif (this.environment != null) {\n\t\t\t\tthis.propertySources.addLast(\n\t\t\t\t\tnew PropertySource<Environment>(ENVIRONMENT_PROPERTIES_PROPERTY_SOURCE_NAME, this.environment) {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic String getProperty(String key) {\n\t\t\t\t\t\t\treturn this.source.getProperty(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tPropertySource<?> localPropertySource =\n\t\t\t\t\t\tnew PropertiesPropertySource(LOCAL_PROPERTIES_PROPERTY_SOURCE_NAME, mergeProperties());\n\t\t\t\tif (this.localOverride) {\n\t\t\t\t\tthis.propertySources.addFirst(localPropertySource);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.propertySources.addLast(localPropertySource);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (IOException ex) {\n\t\t\t\tthrow new BeanInitializationException(\"Could not load properties\", ex);\n\t\t\t}\n\t\t}\n\n\t\tprocessProperties(beanFactory, new PropertySourcesPropertyResolver(this.propertySources));\n\t\tthis.appliedPropertySources = this.propertySources;\n\t}\n\n```\n\n注意上述的`localOverride`变量，它决定了是否用本地的替换系统的，主要是用加载的顺序呢控制的\n\n```java\n/**\n* <p>Any local properties (e.g. those added via {@link #setProperties}, {@link #setLocations}\n* et al.) are added as a {@code PropertySource}. Search precedence of local properties is\n* based on the value of the {@link #setLocalOverride localOverride} property, which is by\n* default {@code false} meaning that local properties are to be searched last, after all\n* environment property sources.\n*/\n```\n获取到所有的属性列表后，处理属性就交给了`processProperties`这个方法.\n\n```java\n/**\n\t * Visit each bean definition in the given bean factory and attempt to replace ${...} property\n\t * placeholders with values from the given properties.\n\t */\n\tprotected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess,\n\t\t\tfinal ConfigurablePropertyResolver propertyResolver) throws BeansException {\n\n\t\tpropertyResolver.setPlaceholderPrefix(this.placeholderPrefix);\n\t\tpropertyResolver.setPlaceholderSuffix(this.placeholderSuffix);\n\t\tpropertyResolver.setValueSeparator(this.valueSeparator);\n\n\t\tStringValueResolver valueResolver = new StringValueResolver() {\n\t\t\t@Override\n\t\t\tpublic String resolveStringValue(String strVal) {\n\t\t\t\tString resolved = ignoreUnresolvablePlaceholders ?\n\t\t\t\t\t\tpropertyResolver.resolvePlaceholders(strVal) :\n\t\t\t\t\t\tpropertyResolver.resolveRequiredPlaceholders(strVal);\n\t\t\t\treturn (resolved.equals(nullValue) ? null : resolved);\n\t\t\t}\n\t\t};\n\n\t\tdoProcessProperties(beanFactoryToProcess, valueResolver);\n\t}\n```\n\n先设置propertyResolver的prefix（默认是${}）和suffix(默认是})，以及默认值得分隔符(默认是:).\n\n然后创建了一个StringValueResolver, 这里根据`ignoreUnresolvablePlaceholders`的值来进行不同的解析，\n\n这个值默认是false, 但是可以在标签中配置。\n\n```xml\n<xsd:attribute name=\"ignore-unresolvable\" type=\"xsd:boolean\" default=\"false\">\n\t\t\t<xsd:annotation>\n\t\t\t\t<xsd:documentation><![CDATA[\n\tSpecifies if failure to find the property value to replace a key should be ignored.\n\tDefault is \"false\", meaning that this placeholder configurer will raise an exception\n\tif it cannot resolve a key. Set to \"true\" to allow the configurer to pass on the key\n\tto any others in the context that have not yet visited the key in question.\n\t\t\t\t]]></xsd:documentation>\n\t\t\t</xsd:annotation>\n\t\t</xsd:attribute>\n```\n\n`false`就以为者遇到无法解析的值就会直接抛出异常\n\n接下来看看`doProcessProperties`\n\n```java\nprotected void doProcessProperties(ConfigurableListableBeanFactory beanFactoryToProcess,\n\t\tStringValueResolver valueResolver) {\n\n\tBeanDefinitionVisitor visitor = new BeanDefinitionVisitor(valueResolver);\n\n\tString[] beanNames = beanFactoryToProcess.getBeanDefinitionNames();\n\tfor (String curName : beanNames) {\n\t\t// Check that we're not parsing our own bean definition,\n\t\t// to avoid failing on unresolvable placeholders in properties file locations.\n\t\tif (!(curName.equals(this.beanName) && beanFactoryToProcess.equals(this.beanFactory))) {\n\t\t\tBeanDefinition bd = beanFactoryToProcess.getBeanDefinition(curName);\n\t\t\ttry {\n\t\t\t\tvisitor.visitBeanDefinition(bd);\n\t\t\t}\n\t\t\tcatch (Exception ex) {\n\t\t\t\tthrow new BeanDefinitionStoreException(bd.getResourceDescription(), curName, ex.getMessage(), ex);\n\t\t\t}\n\t\t}\n\t}\n\n\t// New in Spring 2.5: resolve placeholders in alias target names and aliases as well.\n\tbeanFactoryToProcess.resolveAliases(valueResolver);\n\n\t// New in Spring 3.0: resolve placeholders in embedded values such as annotation attributes.\n\tbeanFactoryToProcess.addEmbeddedValueResolver(valueResolver);\n}\n```\n这里采用的是visitor模式，查看`BeanDefinitionVisitor#visitBeanDefinition`\n\n```java\n/**\n\t * Traverse the given BeanDefinition object and the MutablePropertyValues\n\t * and ConstructorArgumentValues contained in them.\n\t * @param beanDefinition the BeanDefinition object to traverse\n\t * @see #resolveStringValue(String)\n\t */\n\tpublic void visitBeanDefinition(BeanDefinition beanDefinition) {\n\t\tvisitParentName(beanDefinition);\n\t\tvisitBeanClassName(beanDefinition);\n\t\tvisitFactoryBeanName(beanDefinition);\n\t\tvisitFactoryMethodName(beanDefinition);\n\t\tvisitScope(beanDefinition);\n\t\tvisitPropertyValues(beanDefinition.getPropertyValues());\n\t\tConstructorArgumentValues cas = beanDefinition.getConstructorArgumentValues();\n\t\tvisitIndexedArgumentValues(cas.getIndexedArgumentValues());\n\t\tvisitGenericArgumentValues(cas.getGenericArgumentValues());\n\t}\n```\n以其中的`visitParentName`为例：\n```java\nprotected void visitParentName(BeanDefinition beanDefinition) {\n\tString parentName = beanDefinition.getParentName();\n\tif (parentName != null) {\n\t\tString resolvedName = resolveStringValue(parentName);\n\t\tif (!parentName.equals(resolvedName)) {\n\t\t\tbeanDefinition.setParentName(resolvedName);\n\t\t}\n\t}\n}\n\n```\n就是先获取`parentName`，然后替换相应的属性之后的`resolvedName`,如果和原来的不一样就设置`resolvedName`\n\n为新的parentName\n\n```java\n/**\n * Resolve the given String value, for example parsing placeholders.\n * @param strVal the original String value\n * @return the resolved String value\n */\nprotected String resolveStringValue(String strVal) {\n\tif (this.valueResolver == null) {\n\t\tthrow new IllegalStateException(\"No StringValueResolver specified - pass a resolver \" +\n\t\t\t\t\"object into the constructor or override the 'resolveStringValue' method\");\n\t}\n\tString resolvedValue = this.valueResolver.resolveStringValue(strVal);\n\t// Return original String if not modified.\n\treturn (strVal.equals(resolvedValue) ? strVal : resolvedValue);\n}\n```\n\n顺藤摸瓜,看看`valueResolver`,就是之前的`StringValueResolver`\n\n这是一个接口只有一个方法\n\n```java\npublic interface StringValueResolver {\n\n\t/**\n\t * Resolve the given String value, for example parsing placeholders.\n\t * @param strVal the original String value\n\t * @return the resolved String value\n\t */\n\tString resolveStringValue(String strVal);\n\n}\n```\n\n之前传入的其实就是对应`ConfigurablePropertyResolver`的两个方法, 之前传入的是它的子类\n\n`PropertySourcesPropertyResolver`\n\n```java\n@Override\n\tpublic String resolvePlaceholders(String text) {\n\t\tif (this.nonStrictHelper == null) {\n\t\t\tthis.nonStrictHelper = createPlaceholderHelper(true);\n\t\t}\n\t\treturn doResolvePlaceholders(text, this.nonStrictHelper);\n\t}\n\n\t@Override\n\tpublic String resolveRequiredPlaceholders(String text) throws IllegalArgumentException {\n\t\tif (this.strictHelper == null) {\n\t\t\tthis.strictHelper = createPlaceholderHelper(false);\n\t\t}\n\t\treturn doResolvePlaceholders(text, this.strictHelper);\n\t}\n```\n\n调用的是内部方法:\n\n```java\nprivate String doResolvePlaceholders(String text, PropertyPlaceholderHelper helper) {\n\treturn helper.replacePlaceholders(text, new PropertyPlaceholderHelper.PlaceholderResolver() {\n\t\t@Override\n\t\tpublic String resolvePlaceholder(String placeholderName) {\n\t\t\treturn getPropertyAsRawString(placeholderName);\n\t\t}\n\t});\n}\n\n```\n\n最终调用功能的是`PropertyPlaceholderHelper`的replacePlaceholders方法，\n\n这个helper在构造是通过 `createPlaceholderHelper`方法构建的，他接受一个bool类型的参数\n\n```java\nprivate PropertyPlaceholderHelper createPlaceholderHelper(boolean ignoreUnresolvablePlaceholders) {\n\treturn new PropertyPlaceholderHelper(this.placeholderPrefix, this.placeholderSuffix,\n\t\t\tthis.valueSeparator, ignoreUnresolvablePlaceholders);\n}\n```\n\n这个bool值就是表示是否要ignore掉不能解析的属性。\n\n```java\n/**\n\t * Creates a new {@code PropertyPlaceholderHelper} that uses the supplied prefix and suffix.\n\t * @param placeholderPrefix the prefix that denotes the start of a placeholder\n\t * @param placeholderSuffix the suffix that denotes the end of a placeholder\n\t * @param valueSeparator the separating character between the placeholder variable\n\t * and the associated default value, if any\n\t * @param ignoreUnresolvablePlaceholders indicates whether unresolvable placeholders should\n\t * be ignored ({@code true}) or cause an exception ({@code false})\n\t */\n```\n接着追\n\n```java\n/**\n * Replaces all placeholders of format {@code ${name}} with the value returned\n * from the supplied {@link PlaceholderResolver}.\n * @param value the value containing the placeholders to be replaced\n * @param placeholderResolver the {@code PlaceholderResolver} to use for replacement\n * @return the supplied value with placeholders replaced inline\n */\npublic String replacePlaceholders(String value, PlaceholderResolver placeholderResolver) {\n\tAssert.notNull(value, \"'value' must not be null\");\n\treturn parseStringValue(value, placeholderResolver, new HashSet<String>());\n}\n\nprotected String parseStringValue(\n\t\t\tString strVal, PlaceholderResolver placeholderResolver, Set<String> visitedPlaceholders) {\n\n\t\tStringBuilder result = new StringBuilder(strVal);\n\n\t\tint startIndex = strVal.indexOf(this.placeholderPrefix);\n\t\twhile (startIndex != -1) {\n\t\t\tint endIndex = findPlaceholderEndIndex(result, startIndex);\n\t\t\tif (endIndex != -1) {\n\t\t\t\tString placeholder = result.substring(startIndex + this.placeholderPrefix.length(), endIndex);\n\t\t\t\tString originalPlaceholder = placeholder;\n\t\t\t\tif (!visitedPlaceholders.add(originalPlaceholder)) {\n\t\t\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\t\t\"Circular placeholder reference '\" + originalPlaceholder + \"' in property definitions\");\n\t\t\t\t}\n\t\t\t\t// Recursive invocation, parsing placeholders contained in the placeholder key.\n\t\t\t\tplaceholder = parseStringValue(placeholder, placeholderResolver, visitedPlaceholders);\n\t\t\t\t// Now obtain the value for the fully resolved key...\n\t\t\t\tString propVal = placeholderResolver.resolvePlaceholder(placeholder);\n\t\t\t\tif (propVal == null && this.valueSeparator != null) {\n\t\t\t\t\tint separatorIndex = placeholder.indexOf(this.valueSeparator);\n\t\t\t\t\tif (separatorIndex != -1) {\n\t\t\t\t\t\tString actualPlaceholder = placeholder.substring(0, separatorIndex);\n\t\t\t\t\t\tString defaultValue = placeholder.substring(separatorIndex + this.valueSeparator.length());\n\t\t\t\t\t\tpropVal = placeholderResolver.resolvePlaceholder(actualPlaceholder);\n\t\t\t\t\t\tif (propVal == null) {\n\t\t\t\t\t\t\tpropVal = defaultValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (propVal != null) {\n\t\t\t\t\t// Recursive invocation, parsing placeholders contained in the\n\t\t\t\t\t// previously resolved placeholder value.\n\t\t\t\t\tpropVal = parseStringValue(propVal, placeholderResolver, visitedPlaceholders);\n\t\t\t\t\tresult.replace(startIndex, endIndex + this.placeholderSuffix.length(), propVal);\n\t\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t\t\tlogger.trace(\"Resolved placeholder '\" + placeholder + \"'\");\n\t\t\t\t\t}\n\t\t\t\t\tstartIndex = result.indexOf(this.placeholderPrefix, startIndex + propVal.length());\n\t\t\t\t}\n\t\t\t\telse if (this.ignoreUnresolvablePlaceholders) {\n\t\t\t\t\t// Proceed with unprocessed value.\n\t\t\t\t\tstartIndex = result.indexOf(this.placeholderPrefix, endIndex + this.placeholderSuffix.length());\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow new IllegalArgumentException(\"Could not resolve placeholder '\" +\n\t\t\t\t\t\t\tplaceholder + \"'\" + \" in string value \\\"\" + strVal + \"\\\"\");\n\t\t\t\t}\n\t\t\t\tvisitedPlaceholders.remove(originalPlaceholder);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstartIndex = -1;\n\t\t\t}\n\t\t}\n\n\t\treturn result.toString();\n\t}\n\n```\n\n实际解析的代码都在这里：\n\n1. 取出placeHolder的名称.\n2. 判断有没有循环引用的情况.\n3. 递归替换，获取对应的值.\n4. 如果值为空，解析默认值.\n\n\n### PropertyPlaceholderConfigurer\n\n应该和上面的类似，抽时间补。\n","slug":"property-placeholder","published":1,"updated":"2016-12-18T05:13:26.901Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db2h001c90pym20tnypr"},{"title":"Postgre数据库简介","date":"2016-09-27T05:15:07.000Z","_content":"\n![](https://www.postgresql.org/media/img/layout/hdr_left.png)\n\n## 简介\n\n>PostgreSQL是自由的对象-关系型数据库服务器（数据库管理系统）\n\n> <https://zh.wikipedia.org/wiki/PostgreSQL>\n\n\n发展流程:\n\n![](history.jpg)\n\n> PostgreSQL 的前身是 BSD 的始于 1977 年的 Ingres 项目，82年，项目领导人Michael Stonebraker 将其商业化。85年正式更名为Postgres。\n\n> 92年两名伯克利的研究生在做研究生课题的时候，用SQL92替换了原有的Postquel作为查询语言，并将其更名为Postgres95。\n\n> 96年，一群黑客们接手了Postgres95，开始修改及稳定它的代码，并与同年8月发布了第一个开源版本，将其更名为PostgreSQL。\n\nPG支持的数据类型非常丰富，他支持任意精度的数值类型，无限长度的文本类型，同时具有一些nosql的特性，也可以存储hash表（hstore），ltree树状结构，支持jsonb、xml、array的存储和操作。同时PG提供了对IP地址和地理信息的良好支持。\n\nPG支持的语言非常多，各种脚本语言，例如：Lua、Perl、Python、Ruby等，也支持各种编译语言，如c、c++和JAVA等，对统计语言R也有良好的支持。\n\n架构图：\n\n![](arch.jpg)\n> 图片来自\n> <https://wiki.postgresql.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E6%AF%94>\n\nPostgreSQL采用的是C/S结构，一个客户端对应一个服务器端的守护进程(开销会略大)\n\n## 安装\n\n参考官网：<https://www.postgresql.org/download/>\n\n也可以参考阮一峰老师的这篇 [PostgreSQL新手入门](http://www.ruanyifeng.com/blog/2013/12/getting_started_with_postgresql.html)\n\n## 使用\n\n[PostgreSQL 9.5.3 中文在线手册](http://www.postgres.cn/docs/9.5/)\n\n[离线中文手册](https://github.com/postgres-cn/pgdoc-cn/releases)\n\n### psql --  PostgreSQL的交互式终端的使用\n\n详细请参见 [psql](http://www.postgres.cn/docs/9.5/app-psql.html)\n\n登录到数据库，类似mysql\n``` shell\npsql -U dbuser -d exampledb -h 127.0.0.1 -p 5432\n```\n>-U指定用户，-d指定数据库，-h指定服务器，-p指定端口。\n\n|命令 |作用|\n|-----|----|\n| \\h|查看SQL命令的解释，比如\\h select。|\n| \\?|查看psql命令列表。|\n| \\l|列出所有数据库。|\n| \\c [database_name]：| 连接其他数据库。|\n| \\d| 列出当前数据库的所有表格。|\n| \\d [table_name]：| 列出某一张表格的结构。|\n|\\di               | 查看索引|\n| \\du| 列出所有用户。|\n| \\e| 打开文本编辑器。|\n|\\\\! pwd|显示当前工作目录|\n|\\q |退出交互shell|\n| \\conninfo| 列出当前数据库和连接的信息。|\n\n``` shell\n\nexampledb=> \\d\n             关联列表             \n架构模式 |   名称   |  类型  | 拥有者\n----------+----------+--------+--------\npublic   | user_tbl | 数据表 | dbuser\n(1 行记录)\n\nexampledb=> \\l\n                                                      数据库列表\n 名称    |  拥有者  | 字元编码 |            校对规则            |             Ctype              |       存取权限\n-----------+----------+----------+--------------------------------+--------------------------------+-----------------------\nexampledb | dbuser   | UTF8     | Chinese (Simplified)_China.936 | Chinese (Simplified)_China.936 | =Tc/dbuser           +\n         |          |          |                                |                                | dbuser=CTc/dbuser\npostgres  | postgres | UTF8     | Chinese (Simplified)_China.936 | Chinese (Simplified)_China.936 |\ntemplate0 | postgres | UTF8     | Chinese (Simplified)_China.936 | Chinese (Simplified)_China.936 | =c/postgres          +\n         |          |          |                                |                                | postgres=CTc/postgres\ntemplate1 | postgres | UTF8     | Chinese (Simplified)_China.936 | Chinese (Simplified)_China.936 | =c/postgres          +\n         |          |          |                                |                                | postgres=CTc/postgres\n(4 行记录)\n\nexampledb=> \\du\n                           角色列表\n角色名称 |                    属性                    | 成员属于\n----------+--------------------------------------------+----------\ndbuser   |                                            | {}\npostgres | 超级用户, 建立角色, 建立 DB, 复制, 绕过RLS | {}\n\n\nexampledb=> \\dt\n             关联列表\n架构模式 |   名称   |  类型  | 拥有者\n----------+----------+--------+--------\npublic   | user_tbl | 数据表 | dbuser\n(1 行记录)\n\nexampledb=> \\d user_tbl;\n         数据表 \"public.user_tbl\"\n  栏位     |         类型          | 修饰词\n-------------+-----------------------+--------\nname        | character varying(20) |\nsignup_date | date                  |\n\n```\n## 参考文章\n\n1. [Uber的底层存储从Postgres换成MySQL之后](http://www.infoq.com/cn/articles/underlying-storage-of-uber-change-from-mysql-to-postgres)\n\n2. [PostgreSQL数据库的特点](http://database.51cto.com/art/200511/10875.htm)\n\n3. [PostgreSQL新手入门_阮一峰](http://www.ruanyifeng.com/blog/2013/12/getting_started_with_postgresql.html)\n\n4. [PostgreSQL简介及发展历程](http://book.51cto.com/art/201201/313178.htm)\n\n5. [数据库对比_wiki](https://wiki.postgresql.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E6%AF%94)\n\n6. [postgres-cn/pgdoc-cn](https://github.com/postgres-cn/pgdoc-cn)\n\n7. [postgresql 查看数据库,表,索引,表空间以及大小](http://blog.51yip.com/pgsql/1525.html)\n","source":"_posts/postgre.md","raw":"title: Postgre数据库简介\ndate: 2016-09-27 13:15:07\ntags: postgresql\ncategory: base\n---\n\n![](https://www.postgresql.org/media/img/layout/hdr_left.png)\n\n## 简介\n\n>PostgreSQL是自由的对象-关系型数据库服务器（数据库管理系统）\n\n> <https://zh.wikipedia.org/wiki/PostgreSQL>\n\n\n发展流程:\n\n![](history.jpg)\n\n> PostgreSQL 的前身是 BSD 的始于 1977 年的 Ingres 项目，82年，项目领导人Michael Stonebraker 将其商业化。85年正式更名为Postgres。\n\n> 92年两名伯克利的研究生在做研究生课题的时候，用SQL92替换了原有的Postquel作为查询语言，并将其更名为Postgres95。\n\n> 96年，一群黑客们接手了Postgres95，开始修改及稳定它的代码，并与同年8月发布了第一个开源版本，将其更名为PostgreSQL。\n\nPG支持的数据类型非常丰富，他支持任意精度的数值类型，无限长度的文本类型，同时具有一些nosql的特性，也可以存储hash表（hstore），ltree树状结构，支持jsonb、xml、array的存储和操作。同时PG提供了对IP地址和地理信息的良好支持。\n\nPG支持的语言非常多，各种脚本语言，例如：Lua、Perl、Python、Ruby等，也支持各种编译语言，如c、c++和JAVA等，对统计语言R也有良好的支持。\n\n架构图：\n\n![](arch.jpg)\n> 图片来自\n> <https://wiki.postgresql.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E6%AF%94>\n\nPostgreSQL采用的是C/S结构，一个客户端对应一个服务器端的守护进程(开销会略大)\n\n## 安装\n\n参考官网：<https://www.postgresql.org/download/>\n\n也可以参考阮一峰老师的这篇 [PostgreSQL新手入门](http://www.ruanyifeng.com/blog/2013/12/getting_started_with_postgresql.html)\n\n## 使用\n\n[PostgreSQL 9.5.3 中文在线手册](http://www.postgres.cn/docs/9.5/)\n\n[离线中文手册](https://github.com/postgres-cn/pgdoc-cn/releases)\n\n### psql --  PostgreSQL的交互式终端的使用\n\n详细请参见 [psql](http://www.postgres.cn/docs/9.5/app-psql.html)\n\n登录到数据库，类似mysql\n``` shell\npsql -U dbuser -d exampledb -h 127.0.0.1 -p 5432\n```\n>-U指定用户，-d指定数据库，-h指定服务器，-p指定端口。\n\n|命令 |作用|\n|-----|----|\n| \\h|查看SQL命令的解释，比如\\h select。|\n| \\?|查看psql命令列表。|\n| \\l|列出所有数据库。|\n| \\c [database_name]：| 连接其他数据库。|\n| \\d| 列出当前数据库的所有表格。|\n| \\d [table_name]：| 列出某一张表格的结构。|\n|\\di               | 查看索引|\n| \\du| 列出所有用户。|\n| \\e| 打开文本编辑器。|\n|\\\\! pwd|显示当前工作目录|\n|\\q |退出交互shell|\n| \\conninfo| 列出当前数据库和连接的信息。|\n\n``` shell\n\nexampledb=> \\d\n             关联列表             \n架构模式 |   名称   |  类型  | 拥有者\n----------+----------+--------+--------\npublic   | user_tbl | 数据表 | dbuser\n(1 行记录)\n\nexampledb=> \\l\n                                                      数据库列表\n 名称    |  拥有者  | 字元编码 |            校对规则            |             Ctype              |       存取权限\n-----------+----------+----------+--------------------------------+--------------------------------+-----------------------\nexampledb | dbuser   | UTF8     | Chinese (Simplified)_China.936 | Chinese (Simplified)_China.936 | =Tc/dbuser           +\n         |          |          |                                |                                | dbuser=CTc/dbuser\npostgres  | postgres | UTF8     | Chinese (Simplified)_China.936 | Chinese (Simplified)_China.936 |\ntemplate0 | postgres | UTF8     | Chinese (Simplified)_China.936 | Chinese (Simplified)_China.936 | =c/postgres          +\n         |          |          |                                |                                | postgres=CTc/postgres\ntemplate1 | postgres | UTF8     | Chinese (Simplified)_China.936 | Chinese (Simplified)_China.936 | =c/postgres          +\n         |          |          |                                |                                | postgres=CTc/postgres\n(4 行记录)\n\nexampledb=> \\du\n                           角色列表\n角色名称 |                    属性                    | 成员属于\n----------+--------------------------------------------+----------\ndbuser   |                                            | {}\npostgres | 超级用户, 建立角色, 建立 DB, 复制, 绕过RLS | {}\n\n\nexampledb=> \\dt\n             关联列表\n架构模式 |   名称   |  类型  | 拥有者\n----------+----------+--------+--------\npublic   | user_tbl | 数据表 | dbuser\n(1 行记录)\n\nexampledb=> \\d user_tbl;\n         数据表 \"public.user_tbl\"\n  栏位     |         类型          | 修饰词\n-------------+-----------------------+--------\nname        | character varying(20) |\nsignup_date | date                  |\n\n```\n## 参考文章\n\n1. [Uber的底层存储从Postgres换成MySQL之后](http://www.infoq.com/cn/articles/underlying-storage-of-uber-change-from-mysql-to-postgres)\n\n2. [PostgreSQL数据库的特点](http://database.51cto.com/art/200511/10875.htm)\n\n3. [PostgreSQL新手入门_阮一峰](http://www.ruanyifeng.com/blog/2013/12/getting_started_with_postgresql.html)\n\n4. [PostgreSQL简介及发展历程](http://book.51cto.com/art/201201/313178.htm)\n\n5. [数据库对比_wiki](https://wiki.postgresql.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E6%AF%94)\n\n6. [postgres-cn/pgdoc-cn](https://github.com/postgres-cn/pgdoc-cn)\n\n7. [postgresql 查看数据库,表,索引,表空间以及大小](http://blog.51yip.com/pgsql/1525.html)\n","slug":"postgre","published":1,"updated":"2016-12-18T05:06:57.023Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db33001g90pyx66onzlj"},{"title":"plantuml——用编码的方式画UML","date":"2016-10-15T16:56:07.000Z","_content":"## 是什么？\n\n>PlantUML is a component that allows to quickly write :\n\n> * Sequence diagram,\n\n> * Usecase diagram,\n\n> * Class diagram,\n\n> * Activity diagram, (here is the new syntax),\n\n> * Component diagram,\n\n> * State diagram,\n\n> * Deployment diagram,\n\n> * Object diagram.\n\n> * wireframe graphical interface\n\n> Diagrams are defined using a simple and intuitive  language. ( see PlantUML Language Reference Guide).\n\n## 例子\n\n```\n{% plantuml %}\nskinparam backgroundColor #EEEBDC\nskinparam handwritten true\n\nskinparam sequence {\n\tArrowColor DeepSkyBlue\n\tActorBorderColor DeepSkyBlue\n\tLifeLineBorderColor blue\n\tLifeLineBackgroundColor #A9DCDF\n\n\tParticipantBorderColor DeepSkyBlue\n\tParticipantBackgroundColor DodgerBlue\n\tParticipantFontName Impact\n\tParticipantFontSize 17\n\tParticipantFontColor #A9DCDF\n\n\tActorBackgroundColor aqua\n\tActorFontColor DeepSkyBlue\n\tActorFontSize 17\n\tActorFontName Aapex\n}\n\nactor User\nparticipant \"First Class\" as A\nparticipant \"Second Class\" as B\nparticipant \"Last Class\" as C\n\nUser -> A: DoWork\nactivate A\n\nA -> B: Create Request\nactivate B\n\nB -> C: DoWork\nactivate C\nC --> B: WorkDone\ndestroy C\n\nB --> A: Request Created\ndeactivate B\n\nA --> User: Done\ndeactivate A\n\n{% endplantuml %}\n```\n\n上述代码的效果如下：\n\n{% plantuml %}\n\nskinparam backgroundColor #EEEBDC\nskinparam handwritten true\n\nskinparam sequence {\n\tArrowColor DeepSkyBlue\n\tActorBorderColor DeepSkyBlue\n\tLifeLineBorderColor blue\n\tLifeLineBackgroundColor #A9DCDF\n\n\tParticipantBorderColor DeepSkyBlue\n\tParticipantBackgroundColor DodgerBlue\n\tParticipantFontName Impact\n\tParticipantFontSize 17\n\tParticipantFontColor #A9DCDF\n\n\tActorBackgroundColor aqua\n\tActorFontColor DeepSkyBlue\n\tActorFontSize 17\n\tActorFontName Aapex\n}\n\nactor User\nparticipant \"First Class\" as A\nparticipant \"Second Class\" as B\nparticipant \"Last Class\" as C\n\nUser -> A: DoWork\nactivate A\n\nA -> B: Create Request\nactivate B\n\nB -> C: DoWork\nactivate C\nC --> B: WorkDone\ndestroy C\n\nB --> A: Request Created\ndeactivate B\n\nA --> User: Done\ndeactivate A\n\n{% endplantuml %}\n\n## 平台\n\n可以在chromeapp中找到： [链接](https://chrome.google.com/webstore/detail/uml-diagram-editor/hoepdgfgogmeofkgkpapbdpdjkplcode?utm_source=chrome-ntp-icon), 开箱即用\n\n另可以和idea和eclipse、atom等编辑器集成，hexo中也有相应的插件，具体可看下面的教程\n\n## 参考\n\n1. [(记录)plantuml安装配置](http://skyao.github.io/2014/12/05/plantuml-installation/index.html)\n\n2. [Hexo博客中的绘图](http://keyun.ml/2016/07/25/2016-07-25-hexo-uml.html)\n\n3. [官网](http://plantuml.com/)\n","source":"_posts/plantuml.md","raw":"title: plantuml——用编码的方式画UML\ndate: 2016-10-16 00:56:07\ntags: uml\ncategory: hexo\n---\n## 是什么？\n\n>PlantUML is a component that allows to quickly write :\n\n> * Sequence diagram,\n\n> * Usecase diagram,\n\n> * Class diagram,\n\n> * Activity diagram, (here is the new syntax),\n\n> * Component diagram,\n\n> * State diagram,\n\n> * Deployment diagram,\n\n> * Object diagram.\n\n> * wireframe graphical interface\n\n> Diagrams are defined using a simple and intuitive  language. ( see PlantUML Language Reference Guide).\n\n## 例子\n\n```\n{% plantuml %}\nskinparam backgroundColor #EEEBDC\nskinparam handwritten true\n\nskinparam sequence {\n\tArrowColor DeepSkyBlue\n\tActorBorderColor DeepSkyBlue\n\tLifeLineBorderColor blue\n\tLifeLineBackgroundColor #A9DCDF\n\n\tParticipantBorderColor DeepSkyBlue\n\tParticipantBackgroundColor DodgerBlue\n\tParticipantFontName Impact\n\tParticipantFontSize 17\n\tParticipantFontColor #A9DCDF\n\n\tActorBackgroundColor aqua\n\tActorFontColor DeepSkyBlue\n\tActorFontSize 17\n\tActorFontName Aapex\n}\n\nactor User\nparticipant \"First Class\" as A\nparticipant \"Second Class\" as B\nparticipant \"Last Class\" as C\n\nUser -> A: DoWork\nactivate A\n\nA -> B: Create Request\nactivate B\n\nB -> C: DoWork\nactivate C\nC --> B: WorkDone\ndestroy C\n\nB --> A: Request Created\ndeactivate B\n\nA --> User: Done\ndeactivate A\n\n{% endplantuml %}\n```\n\n上述代码的效果如下：\n\n{% plantuml %}\n\nskinparam backgroundColor #EEEBDC\nskinparam handwritten true\n\nskinparam sequence {\n\tArrowColor DeepSkyBlue\n\tActorBorderColor DeepSkyBlue\n\tLifeLineBorderColor blue\n\tLifeLineBackgroundColor #A9DCDF\n\n\tParticipantBorderColor DeepSkyBlue\n\tParticipantBackgroundColor DodgerBlue\n\tParticipantFontName Impact\n\tParticipantFontSize 17\n\tParticipantFontColor #A9DCDF\n\n\tActorBackgroundColor aqua\n\tActorFontColor DeepSkyBlue\n\tActorFontSize 17\n\tActorFontName Aapex\n}\n\nactor User\nparticipant \"First Class\" as A\nparticipant \"Second Class\" as B\nparticipant \"Last Class\" as C\n\nUser -> A: DoWork\nactivate A\n\nA -> B: Create Request\nactivate B\n\nB -> C: DoWork\nactivate C\nC --> B: WorkDone\ndestroy C\n\nB --> A: Request Created\ndeactivate B\n\nA --> User: Done\ndeactivate A\n\n{% endplantuml %}\n\n## 平台\n\n可以在chromeapp中找到： [链接](https://chrome.google.com/webstore/detail/uml-diagram-editor/hoepdgfgogmeofkgkpapbdpdjkplcode?utm_source=chrome-ntp-icon), 开箱即用\n\n另可以和idea和eclipse、atom等编辑器集成，hexo中也有相应的插件，具体可看下面的教程\n\n## 参考\n\n1. [(记录)plantuml安装配置](http://skyao.github.io/2014/12/05/plantuml-installation/index.html)\n\n2. [Hexo博客中的绘图](http://keyun.ml/2016/07/25/2016-07-25-hexo-uml.html)\n\n3. [官网](http://plantuml.com/)\n","slug":"plantuml","published":1,"updated":"2016-12-18T05:12:28.189Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db3h001k90pyyfvta5dp"},{"title":"数据库分页","date":"2016-09-29T16:19:07.000Z","_content":"\n## 逻辑分页\n\n就是将所有的结果集拿出来，然后在程序中进行截取，由于所有的数据都是在内存中的，占用内存比较大\n\n## 物理分页\n\n物理分页是指基于数据库提供的类似 `limit offset,rows`这样的语法。\n\n但是，比如`limit 10000,20`,  就会读取10020条数据，但是只会返回后面20条数据。\n\n## 手工计算\n\n如果id是有序的，可以做一个简单的转换，比如使用  `where id between 10000 and 10020`, 这样的效率就会相对的高些\n\n## 附件\n [PPC2009_mysql_pagination.pdf](PPC2009_mysql_pagination.pdf)\n","source":"_posts/pagination.md","raw":"title: 数据库分页\ndate: 2016-09-30 00:19:07\ntags: mysql\ncategory: base\n---\n\n## 逻辑分页\n\n就是将所有的结果集拿出来，然后在程序中进行截取，由于所有的数据都是在内存中的，占用内存比较大\n\n## 物理分页\n\n物理分页是指基于数据库提供的类似 `limit offset,rows`这样的语法。\n\n但是，比如`limit 10000,20`,  就会读取10020条数据，但是只会返回后面20条数据。\n\n## 手工计算\n\n如果id是有序的，可以做一个简单的转换，比如使用  `where id between 10000 and 10020`, 这样的效率就会相对的高些\n\n## 附件\n [PPC2009_mysql_pagination.pdf](PPC2009_mysql_pagination.pdf)\n","slug":"pagination","published":1,"updated":"2016-09-29T16:51:48.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db3m001p90pyj65e9uin"},{"title":"netcat(nc) —— 使用小结","date":"2016-12-18T03:29:28.000Z","_content":"\n\nnc的全称是netcat，提供了许多关于网络操作的功能，号称网络工具中的瑞士军刀。\n\nnc也有windows的移植版本：[](https://eternallybored.org/misc/netcat/)\n\n>   Netcat is a featured networking utility which reads and writes data across network connections, using the TCP/IP protocol.\nIt is designed to be a reliable \"back-end\" tool that can be used directly or easily driven by other programs and scripts. At the same time, it is a feature-rich network debugging and exploration tool, since it can create almost any kind of connection you would need and has several interesting built-in capabilities.\n\n## 常见用途\n### nc 传输文件：\n\n- 传送文件\n\n发送端：`nc -l 6666 < file`\n接收端: `nc host 6666 | pv -L 30m > wrapper`\n\n其中pv是一个限流的工具。\n\n- 压缩传输一个文件夹\n\n`tar zcvf folder.tar.gz folder | nc -l 6666`\n\n\n## 参考链接\n\n1. [The GNU Netcat](http://netcat.sourceforge.net/)\n2. [Linux Netcat 命令——网络工具中的瑞士军刀](https://www.oschina.net/translate/linux-netcat-command)","source":"_posts/nc.md","raw":"title: netcat(nc) —— 使用小结\ntags: netcat\ncategory: linux\ndate: 2016-12-18 11:29:28\n---\n\n\nnc的全称是netcat，提供了许多关于网络操作的功能，号称网络工具中的瑞士军刀。\n\nnc也有windows的移植版本：[](https://eternallybored.org/misc/netcat/)\n\n>   Netcat is a featured networking utility which reads and writes data across network connections, using the TCP/IP protocol.\nIt is designed to be a reliable \"back-end\" tool that can be used directly or easily driven by other programs and scripts. At the same time, it is a feature-rich network debugging and exploration tool, since it can create almost any kind of connection you would need and has several interesting built-in capabilities.\n\n## 常见用途\n### nc 传输文件：\n\n- 传送文件\n\n发送端：`nc -l 6666 < file`\n接收端: `nc host 6666 | pv -L 30m > wrapper`\n\n其中pv是一个限流的工具。\n\n- 压缩传输一个文件夹\n\n`tar zcvf folder.tar.gz folder | nc -l 6666`\n\n\n## 参考链接\n\n1. [The GNU Netcat](http://netcat.sourceforge.net/)\n2. [Linux Netcat 命令——网络工具中的瑞士军刀](https://www.oschina.net/translate/linux-netcat-command)","slug":"nc","published":1,"updated":"2016-12-18T05:11:56.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db3v001t90pybyljjbbq"},{"title":"mysql中时间相关的问题","date":"2016-09-24T16:27:52.000Z","_content":"\n## 自动更新时间戳\n\n> TIMESTAMP and DATETIME columns can be automatically initializated and updated to the current date and time (that is, the current timestamp).\n\n> For any TIMESTAMP or DATETIME column in a table, you can assign the current timestamp as the default value, the auto-update value, or both:\n\n[mysql官方文档说明](http://dev.mysql.com/doc/refman/5.7/en/timestamp-initialization.html)\n\n代码示例：\n```\nCREATE TABLE t1 (\n  ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  dt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n);\n```\n\n## 多个timestamp\n\nmysql中默认一张表中只能有一个timestamp类型的字段，如果有多个的话创建表的时候就会报错\n\n`Incorrect table definition; there can be only one TIMESTAMP column with CURRENT_TIMESTAMP in DEFAULT or ON UPDATE clause  `\n\n在`5.6.4`之前有这个限制，在之后好像就没有这个限制了。参见<https://segmentfault.com/q/1010000000488523>\n","source":"_posts/mysql-time.md","raw":"title: mysql中时间相关的问题\ndate: 2016-09-25 00:27:52\ntags: mysql\ncategory: base\n---\n\n## 自动更新时间戳\n\n> TIMESTAMP and DATETIME columns can be automatically initializated and updated to the current date and time (that is, the current timestamp).\n\n> For any TIMESTAMP or DATETIME column in a table, you can assign the current timestamp as the default value, the auto-update value, or both:\n\n[mysql官方文档说明](http://dev.mysql.com/doc/refman/5.7/en/timestamp-initialization.html)\n\n代码示例：\n```\nCREATE TABLE t1 (\n  ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  dt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n);\n```\n\n## 多个timestamp\n\nmysql中默认一张表中只能有一个timestamp类型的字段，如果有多个的话创建表的时候就会报错\n\n`Incorrect table definition; there can be only one TIMESTAMP column with CURRENT_TIMESTAMP in DEFAULT or ON UPDATE clause  `\n\n在`5.6.4`之前有这个限制，在之后好像就没有这个限制了。参见<https://segmentfault.com/q/1010000000488523>\n","slug":"mysql-time","published":1,"updated":"2016-12-18T05:11:21.266Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db43001x90pye6jfh0do"},{"title":"机器学习框架调研","date":"2015-11-03T15:55:34.000Z","_content":"\n# 机器学习框架调研\n## DMTK\n <img src=\"http://www.dmtk.io/img/pic1_V7.jpg\" width = \"150\" height = \"150\" alt=\"图片名称\" align=center />\n\n项目地址：[https://github.com/Microsoft/DMTK](https://github.com/Microsoft/DMTK)\n文档地址:[http://www.dmtk.io/document.html](http://www.dmtk.io/document.html)\n语言: CPP\n项目简介:\n Microsoft Distributed Machine Learning Tookit\n\n- DMTK分布式机器学习框架：\n>它由参数服务器和客户端软件开发包（SDK）两部分构成。参数服务器在原有基础上从性能和功能上都得到了进一步提升——支持存储混合数据结构模型、接受并聚合工作节点服务器的数据模型更新、控制模型同步逻辑等。客户端软件开发包（SDK）支持维护节点模型缓存（与全局模型服务器同步）、节点模型训练和模型通讯的流水线控制、以及片状调度大模型训练等。\n\n-  LightLDA：\n> LightLDA是一种全新的用于训练主题模型，计算复杂度与主题数目无关的高效算法。在其分布式实现中，我们做了大量的系统优化使得LightLDA能够在一个普通计算机集群上处理超大规模的数据和模型。例如，在一个由8台计算机组成的集群上，我们可以在具有2千亿训练样本（token）的数据集上训练具有1百万词汇表和1百万个话题（topic）的LDA模型（约1万亿个参数），这种规模的实验以往要在数千台计算机的集群上才能运行。\n\n- 分布式词向量：\n> 词向量技术近来被普遍地应用于计算词汇的语义表示，它可以用作很多自然语言处理任务的词特征。我们为两种计算词向量的算法提供了高效的分步式实现：\n> \t\t1. 一种是标准的word2vec算法\n> \t\t2. 另一种是可以对多义词计算多个词向量的新算法。\n\n<img src=\"http://www.msra.cn/zh-cn/research/release/images/dmtk-2.png\" width = \"500\" height = \"200\" alt=\"图片名称\" align=center />\n\n### Reference\n\n> [1] Tian, F., Dai, H., Bian, J., Gao, B., Zhang, R., Chen, E., & Liu, T. Y. (2014). [A probabilistic model for learning multi-prototype word embeddings](http://www.aclweb.org/anthology/C14-1016). In Proceedings of COLING (pp. 151-160).\n\n## TensorFlow\n\n![](http://tensorflow.org/images/tensors_flowing.gif)\n文档地址: [http://tensorflow.org/get_started/index.html](http://tensorflow.org/get_started/index.html)\n项目地址： [http://tensorflow.org/](http://tensorflow.org/)\n语言: Python\n简介：\n>   1. TensorFlow是谷歌研发的第二代人工智能学习系统，而第一代的DistBelief比这个要早好多年。\n>   \n>   2. TensorFlow支持CNN、RNN和LSTM算法，这都是目前在Image，Speech和NLP最流行的深度神经网络模型。\n>   \n>   3. 此外，TensorFlow一大亮点是支持异构设备分布式计算，它能够在各个平台上自动运行模型，从电话、单个CPU / GPU到成百上千GPU卡组成的分布式系统。也就是说，任何基于梯度的机器学习算法都能够受益于TensorFlow的自动分化（auto-differentiation）。\n\n### 参考链接\n[http://news.zol.com.cn/551/5513527.html](http://news.zol.com.cn/551/5513527.html)\n[http://www.leiphone.com/news/201511/Voza1pFNQB4bzKdR.html](http://www.leiphone.com/news/201511/Voza1pFNQB4bzKdR.html)\n\n## Torch\n![](http://torch.ch/static/flow-hero-logo.png)\n项目地址: [https://github.com/torch/torch7](https://github.com/torch/torch7)\n项目博客: [http://torch.ch/blog/](http://torch.ch/blog/)\nSlides: [https://github.com/soumith/cvpr2015/blob/master/cvpr-torch.pdf](https://github.com/soumith/cvpr2015/blob/master/cvpr-torch.pdf)\n语言: Lua\n项目简介:\n> Torch并没有跟随Python的潮流，它是基于Lua的。对于解释器没有必要像Matlab或者Python那样，Lua会给你神奇的控制台。Torch被Facebook人工智能研究实验室和位于伦敦的谷歌DeepMind大量使用。\n\n> Torch is a scientific computing framework with wide support for machine learning algorithms. It is > > easy to use and efficient, thanks to an easy and fast scripting language, LuaJIT, and an underlying > C/CUDA implementation.\n\n> A summary of core features:\n>\n>    - a powerful N-dimensional array\n>    - lots of routines for indexing, slicing, transposing, ...\n>    - amazing interface to C, via LuaJIT\n>    - linear algebra routines\n>    - neural network, and energy-based models\n>    - numeric optimization routines\n>    - Fast and efficient GPU support\n>    - Embeddable, with ports to iOS, Android and FPGA backends\n\n### 参考链接\n[2015深度学习回顾：ConvNet、Caffe、Torch及其他](http://www.chinacloud.cn/show.aspx?id=21212&cid=17)\n\n\n## GraphLab\n\n项目简介： [http://www.select.cs.cmu.edu/code/graphlab/](http://www.select.cs.cmu.edu/code/graphlab/)\n语言: Java/Python\n简介:\n> GraphLab是一个流行的图谱分析（Graph Analysis）和机器学习的开源项目，2013年该项目剥离出一个独立运作的商业公司GraphLab Inc\n> - HDFS。GraphLab 内置对HDFS 的支持，GraphLab 能够直接从HDFS中读数据或者将计算结果数据直接写入到HDFS 中。\n\n![http://www.ctocio.com/wp-content/uploads/2014/10/graphlab-deeplearning-_thumb.png](http://www.ctocio.com/wp-content/uploads/2014/10/graphlab-deeplearning-_thumb.png)\n\n### 参考链接\n[GraphLab Create使深度学习更easy](http://planckscale.info/?p=226)\n[GraphLab:新的面向机器学习的并行框架](https://blog.inf.ed.ac.uk/graphprocs/2014/11/25/graphlab%E6%96%B0%E7%9A%84%E9%9D%A2%E5%90%91%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%B9%B6%E8%A1%8C%E6%A1%86%E6%9E%B6/)\n\n## Deeplearning4j\n项目文档: [http://deeplearning4j.org/](http://deeplearning4j.org/)\n项目地址: [https://github.com/deeplearning4j/deeplearning4j](https://github.com/deeplearning4j/deeplearning4j)\n语言: Java/Scala\n项目简介:\n> Deeplearning4j is the first commercial-grade, open-source, distributed deep-learning library written for Java and Scala. Integrated with Hadoop and Spark, DL4J is designed to be used in business environments, rather than as a research tool.\n>    - Versatile n-dimensional array class\n>    - GPU integration\n>    - Scalable on Hadoop, Spark and Akka + AWS et al\n\n![](http://deeplearning4j.org/img/schematic_overview.png)\n\n### 参考链接\n[DL4J vs. Torch vs. Theano vs. Caffe](http://deeplearning4j.org/compare-dl4j-torch7-pylearn.html)\n\n\n\n## Caffe\n项目主页: [http://caffe.berkeleyvision.org/](http://caffe.berkeleyvision.org/)\n项目地址: [https://github.com/BVLC/caffe](https://github.com/BVLC/caffe)\nSlides: [https://docs.google.com/presentation/d/1UeKXVgRvvxg9OUdh_UiC5G71UMscNPlvArsWER41PsU/edit#slide=id.gc2fcdcce7_216_211](https://docs.google.com/presentation/d/1UeKXVgRvvxg9OUdh_UiC5G71UMscNPlvArsWER41PsU/edit#slide=id.gc2fcdcce7_216_211)\n项目简介:\n>The Caffe framework from UC Berkeley is designed to let researchers create and explore CNNs and other Deep Neural Networks (DNNs) easily, while delivering high speed needed for both experiments and industrial deployment [5]. Caffe provides state-of-the-art modeling for advancing and deploying deep learning in research and industry with support for a wide variety of architectures and efficient implementations of prediction and learning.\n\n\n![](http://d.hiphotos.baidu.com/baike/c0%3Dbaike92%2C5%2C5%2C92%2C30/sign=520e49ddb51bb0519b29bb7a5713b1d1/5882b2b7d0a20cf4cad4bb2070094b36adaf998d.jpg)\n![](http://img.ptcms.csdn.net/article/201507/08/559cebc9330f2_middle.jpg)\n### 参考链接\n[Caffe: Convolutional Architecture for Fast Feature Embedding](http://ucb-icsi-vision-group.github.io/caffe-paper/caffe.pdf)\n\n[KDnuggets热门深度学习工具排行：Pylearn2 居首，Caffe第三](http://www.csdn.net/article/1970-01-01/2825166)\n\n\n## Theano\n项目主页: [http://deeplearning.net/software/theano/](http://deeplearning.net/software/theano/)\n项目地址: [https://github.com/Theano/Theano](https://github.com/Theano/Theano)\n\n## Pylearn2\n 文档地址: [http://deeplearning.net/software/pylearn2/](http://deeplearning.net/software/pylearn2/)\n 项目地址: [https://github.com/lisa-lab/pylearn2](https://github.com/lisa-lab/pylearn2)\n项目简介:\n\n>Pylearn2和Theano由同一个开发团队开发，Pylearn2是一个机器学习库，它把深度学习和人工智能研究许多常用的模型以及训练算法封装成一个单一的实验包，如随机梯度下降。\n","source":"_posts/machine_learning.md","raw":"title: 机器学习框架调研\ndate: 2015-11-03 23:55:34\ntags: 机器学习  \ncategory: 机器学习\n---\n\n# 机器学习框架调研\n## DMTK\n <img src=\"http://www.dmtk.io/img/pic1_V7.jpg\" width = \"150\" height = \"150\" alt=\"图片名称\" align=center />\n\n项目地址：[https://github.com/Microsoft/DMTK](https://github.com/Microsoft/DMTK)\n文档地址:[http://www.dmtk.io/document.html](http://www.dmtk.io/document.html)\n语言: CPP\n项目简介:\n Microsoft Distributed Machine Learning Tookit\n\n- DMTK分布式机器学习框架：\n>它由参数服务器和客户端软件开发包（SDK）两部分构成。参数服务器在原有基础上从性能和功能上都得到了进一步提升——支持存储混合数据结构模型、接受并聚合工作节点服务器的数据模型更新、控制模型同步逻辑等。客户端软件开发包（SDK）支持维护节点模型缓存（与全局模型服务器同步）、节点模型训练和模型通讯的流水线控制、以及片状调度大模型训练等。\n\n-  LightLDA：\n> LightLDA是一种全新的用于训练主题模型，计算复杂度与主题数目无关的高效算法。在其分布式实现中，我们做了大量的系统优化使得LightLDA能够在一个普通计算机集群上处理超大规模的数据和模型。例如，在一个由8台计算机组成的集群上，我们可以在具有2千亿训练样本（token）的数据集上训练具有1百万词汇表和1百万个话题（topic）的LDA模型（约1万亿个参数），这种规模的实验以往要在数千台计算机的集群上才能运行。\n\n- 分布式词向量：\n> 词向量技术近来被普遍地应用于计算词汇的语义表示，它可以用作很多自然语言处理任务的词特征。我们为两种计算词向量的算法提供了高效的分步式实现：\n> \t\t1. 一种是标准的word2vec算法\n> \t\t2. 另一种是可以对多义词计算多个词向量的新算法。\n\n<img src=\"http://www.msra.cn/zh-cn/research/release/images/dmtk-2.png\" width = \"500\" height = \"200\" alt=\"图片名称\" align=center />\n\n### Reference\n\n> [1] Tian, F., Dai, H., Bian, J., Gao, B., Zhang, R., Chen, E., & Liu, T. Y. (2014). [A probabilistic model for learning multi-prototype word embeddings](http://www.aclweb.org/anthology/C14-1016). In Proceedings of COLING (pp. 151-160).\n\n## TensorFlow\n\n![](http://tensorflow.org/images/tensors_flowing.gif)\n文档地址: [http://tensorflow.org/get_started/index.html](http://tensorflow.org/get_started/index.html)\n项目地址： [http://tensorflow.org/](http://tensorflow.org/)\n语言: Python\n简介：\n>   1. TensorFlow是谷歌研发的第二代人工智能学习系统，而第一代的DistBelief比这个要早好多年。\n>   \n>   2. TensorFlow支持CNN、RNN和LSTM算法，这都是目前在Image，Speech和NLP最流行的深度神经网络模型。\n>   \n>   3. 此外，TensorFlow一大亮点是支持异构设备分布式计算，它能够在各个平台上自动运行模型，从电话、单个CPU / GPU到成百上千GPU卡组成的分布式系统。也就是说，任何基于梯度的机器学习算法都能够受益于TensorFlow的自动分化（auto-differentiation）。\n\n### 参考链接\n[http://news.zol.com.cn/551/5513527.html](http://news.zol.com.cn/551/5513527.html)\n[http://www.leiphone.com/news/201511/Voza1pFNQB4bzKdR.html](http://www.leiphone.com/news/201511/Voza1pFNQB4bzKdR.html)\n\n## Torch\n![](http://torch.ch/static/flow-hero-logo.png)\n项目地址: [https://github.com/torch/torch7](https://github.com/torch/torch7)\n项目博客: [http://torch.ch/blog/](http://torch.ch/blog/)\nSlides: [https://github.com/soumith/cvpr2015/blob/master/cvpr-torch.pdf](https://github.com/soumith/cvpr2015/blob/master/cvpr-torch.pdf)\n语言: Lua\n项目简介:\n> Torch并没有跟随Python的潮流，它是基于Lua的。对于解释器没有必要像Matlab或者Python那样，Lua会给你神奇的控制台。Torch被Facebook人工智能研究实验室和位于伦敦的谷歌DeepMind大量使用。\n\n> Torch is a scientific computing framework with wide support for machine learning algorithms. It is > > easy to use and efficient, thanks to an easy and fast scripting language, LuaJIT, and an underlying > C/CUDA implementation.\n\n> A summary of core features:\n>\n>    - a powerful N-dimensional array\n>    - lots of routines for indexing, slicing, transposing, ...\n>    - amazing interface to C, via LuaJIT\n>    - linear algebra routines\n>    - neural network, and energy-based models\n>    - numeric optimization routines\n>    - Fast and efficient GPU support\n>    - Embeddable, with ports to iOS, Android and FPGA backends\n\n### 参考链接\n[2015深度学习回顾：ConvNet、Caffe、Torch及其他](http://www.chinacloud.cn/show.aspx?id=21212&cid=17)\n\n\n## GraphLab\n\n项目简介： [http://www.select.cs.cmu.edu/code/graphlab/](http://www.select.cs.cmu.edu/code/graphlab/)\n语言: Java/Python\n简介:\n> GraphLab是一个流行的图谱分析（Graph Analysis）和机器学习的开源项目，2013年该项目剥离出一个独立运作的商业公司GraphLab Inc\n> - HDFS。GraphLab 内置对HDFS 的支持，GraphLab 能够直接从HDFS中读数据或者将计算结果数据直接写入到HDFS 中。\n\n![http://www.ctocio.com/wp-content/uploads/2014/10/graphlab-deeplearning-_thumb.png](http://www.ctocio.com/wp-content/uploads/2014/10/graphlab-deeplearning-_thumb.png)\n\n### 参考链接\n[GraphLab Create使深度学习更easy](http://planckscale.info/?p=226)\n[GraphLab:新的面向机器学习的并行框架](https://blog.inf.ed.ac.uk/graphprocs/2014/11/25/graphlab%E6%96%B0%E7%9A%84%E9%9D%A2%E5%90%91%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%B9%B6%E8%A1%8C%E6%A1%86%E6%9E%B6/)\n\n## Deeplearning4j\n项目文档: [http://deeplearning4j.org/](http://deeplearning4j.org/)\n项目地址: [https://github.com/deeplearning4j/deeplearning4j](https://github.com/deeplearning4j/deeplearning4j)\n语言: Java/Scala\n项目简介:\n> Deeplearning4j is the first commercial-grade, open-source, distributed deep-learning library written for Java and Scala. Integrated with Hadoop and Spark, DL4J is designed to be used in business environments, rather than as a research tool.\n>    - Versatile n-dimensional array class\n>    - GPU integration\n>    - Scalable on Hadoop, Spark and Akka + AWS et al\n\n![](http://deeplearning4j.org/img/schematic_overview.png)\n\n### 参考链接\n[DL4J vs. Torch vs. Theano vs. Caffe](http://deeplearning4j.org/compare-dl4j-torch7-pylearn.html)\n\n\n\n## Caffe\n项目主页: [http://caffe.berkeleyvision.org/](http://caffe.berkeleyvision.org/)\n项目地址: [https://github.com/BVLC/caffe](https://github.com/BVLC/caffe)\nSlides: [https://docs.google.com/presentation/d/1UeKXVgRvvxg9OUdh_UiC5G71UMscNPlvArsWER41PsU/edit#slide=id.gc2fcdcce7_216_211](https://docs.google.com/presentation/d/1UeKXVgRvvxg9OUdh_UiC5G71UMscNPlvArsWER41PsU/edit#slide=id.gc2fcdcce7_216_211)\n项目简介:\n>The Caffe framework from UC Berkeley is designed to let researchers create and explore CNNs and other Deep Neural Networks (DNNs) easily, while delivering high speed needed for both experiments and industrial deployment [5]. Caffe provides state-of-the-art modeling for advancing and deploying deep learning in research and industry with support for a wide variety of architectures and efficient implementations of prediction and learning.\n\n\n![](http://d.hiphotos.baidu.com/baike/c0%3Dbaike92%2C5%2C5%2C92%2C30/sign=520e49ddb51bb0519b29bb7a5713b1d1/5882b2b7d0a20cf4cad4bb2070094b36adaf998d.jpg)\n![](http://img.ptcms.csdn.net/article/201507/08/559cebc9330f2_middle.jpg)\n### 参考链接\n[Caffe: Convolutional Architecture for Fast Feature Embedding](http://ucb-icsi-vision-group.github.io/caffe-paper/caffe.pdf)\n\n[KDnuggets热门深度学习工具排行：Pylearn2 居首，Caffe第三](http://www.csdn.net/article/1970-01-01/2825166)\n\n\n## Theano\n项目主页: [http://deeplearning.net/software/theano/](http://deeplearning.net/software/theano/)\n项目地址: [https://github.com/Theano/Theano](https://github.com/Theano/Theano)\n\n## Pylearn2\n 文档地址: [http://deeplearning.net/software/pylearn2/](http://deeplearning.net/software/pylearn2/)\n 项目地址: [https://github.com/lisa-lab/pylearn2](https://github.com/lisa-lab/pylearn2)\n项目简介:\n\n>Pylearn2和Theano由同一个开发团队开发，Pylearn2是一个机器学习库，它把深度学习和人工智能研究许多常用的模型以及训练算法封装成一个单一的实验包，如随机梯度下降。\n","slug":"machine_learning","published":1,"updated":"2016-09-23T15:48:44.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db48002090py9eo2m8x3"},{"title":"JS跨域原理","date":"2016-10-02T03:42:13.000Z","_content":"\n\n## 同源策略\n\n>同源策略限制了一个源（origin）中加载文本或脚本与来自其它源（origin）中资源的交互方式。\n\n例如在使用XMLHttpRequest 或 <img> 标签时则会受到同源策略的约束。交互通常分为三类：\n\n1. 通常允许进行跨域写操作（`Cross-origin writes`）。例如链接（links），重定向以及表单提交。特定少数的HTTP请求需要添加 preflight。\n\n2. 通常允许跨域资源嵌入（`Cross-origin embedding`）。\n3. 通常不允许跨域读操作（`Cross-origin reads`）。\n\n下表给出了相对`http://store.company.com/dir/page.html`同源检测的示例:\n\n|URL\t|结果|\t原因|\n|---|---|\n|http://store.company.com/dir2/other.html\t|成功|\t |\n|http://store.company.com/dir/inner/another.html\t|成功|\t |\n|https://store.company.com/secure.html\t|失败|\t协议不同|\n|http://store.company.com:81/dir/etc.html\t|失败|\t端口不同|\n|http://news.company.com/dir/other.html\t|失败|\t主机名不同|\n\n\n\n## ajax 跨域\n\n> 同源政策规定，AJAX请求只能发给同源的网址，否则就报错。\n\n请求其他域资源的时候，由于同源策略的限制一般会出现如下的错误：\n\n>XMLHttpRequest cannot load http://xxxxx. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'null' is therefore not allowed access. The response had HTTP status code 500.\n\n### JSONP\n\n`<script src=\"...\"></script>` 标签是支持跨域的，JSONP的原理就是使用这个标签。\n\n服务器会在传给浏览器前将JSON数据填充到回调函数中\n\n{% gist cc896797f4ef746e9cbc75b8f6ebc24f %}\n\n上述代码中`    return param + '(' + json.dumps(data) + ')'`是将返回的数据填充到回调函数中\n\n前端的代码如下：\n\n{% gist 8d90c2a0599818488a647177b4f196c2 %}\n\n使用了jQuery的ajax请求\n\n**但是JSONP的方式只支持get请求**\n\n### CORS (`Cross-Origin Resource Sharing`)\n\nCORS是一个W3C标准, 不仅支持GET方式还支持POST方式的跨域请求\n\n> 浏览器将CORS请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。\n\n请求的流程图如下：\n![](cors.png)\n\n详细原理参考阮一峰老师的[跨域资源共享 CORS 详解](http://www.ruanyifeng.com/blog/2016/04/cors.html)\n\n### Websocket\n\n>WebSocket是一种通信协议，使用ws://（非加密）和wss://（加密）作为协议前缀。该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信。\n\n详细原理参考阮一峰老师的 [浏览器的同源策略](https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy)\n\n## 参考链接\n\n1. [跨域资源共享 CORS 详解](http://www.ruanyifeng.com/blog/2016/04/cors.html)\n\n2. [浏览器的同源策略](https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy)\n\n3. [浏览器同源政策及其规避方法](http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html)\n\n4. [ ajax 设置Access-Control-Allow-Origin实现跨域访问](http://blog.csdn.net/fdipzone/article/details/46390573)\n\n5. [使用CORS（译）](http://liuwanlin.info/corsxiang-jie/)\n","source":"_posts/jsonp.md","raw":"title: JS跨域原理\ntags: ajax\ncategory: fe\ndate: 2016-10-02 11:42:13\n---\n\n\n## 同源策略\n\n>同源策略限制了一个源（origin）中加载文本或脚本与来自其它源（origin）中资源的交互方式。\n\n例如在使用XMLHttpRequest 或 <img> 标签时则会受到同源策略的约束。交互通常分为三类：\n\n1. 通常允许进行跨域写操作（`Cross-origin writes`）。例如链接（links），重定向以及表单提交。特定少数的HTTP请求需要添加 preflight。\n\n2. 通常允许跨域资源嵌入（`Cross-origin embedding`）。\n3. 通常不允许跨域读操作（`Cross-origin reads`）。\n\n下表给出了相对`http://store.company.com/dir/page.html`同源检测的示例:\n\n|URL\t|结果|\t原因|\n|---|---|\n|http://store.company.com/dir2/other.html\t|成功|\t |\n|http://store.company.com/dir/inner/another.html\t|成功|\t |\n|https://store.company.com/secure.html\t|失败|\t协议不同|\n|http://store.company.com:81/dir/etc.html\t|失败|\t端口不同|\n|http://news.company.com/dir/other.html\t|失败|\t主机名不同|\n\n\n\n## ajax 跨域\n\n> 同源政策规定，AJAX请求只能发给同源的网址，否则就报错。\n\n请求其他域资源的时候，由于同源策略的限制一般会出现如下的错误：\n\n>XMLHttpRequest cannot load http://xxxxx. No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'null' is therefore not allowed access. The response had HTTP status code 500.\n\n### JSONP\n\n`<script src=\"...\"></script>` 标签是支持跨域的，JSONP的原理就是使用这个标签。\n\n服务器会在传给浏览器前将JSON数据填充到回调函数中\n\n{% gist cc896797f4ef746e9cbc75b8f6ebc24f %}\n\n上述代码中`    return param + '(' + json.dumps(data) + ')'`是将返回的数据填充到回调函数中\n\n前端的代码如下：\n\n{% gist 8d90c2a0599818488a647177b4f196c2 %}\n\n使用了jQuery的ajax请求\n\n**但是JSONP的方式只支持get请求**\n\n### CORS (`Cross-Origin Resource Sharing`)\n\nCORS是一个W3C标准, 不仅支持GET方式还支持POST方式的跨域请求\n\n> 浏览器将CORS请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。\n\n请求的流程图如下：\n![](cors.png)\n\n详细原理参考阮一峰老师的[跨域资源共享 CORS 详解](http://www.ruanyifeng.com/blog/2016/04/cors.html)\n\n### Websocket\n\n>WebSocket是一种通信协议，使用ws://（非加密）和wss://（加密）作为协议前缀。该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信。\n\n详细原理参考阮一峰老师的 [浏览器的同源策略](https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy)\n\n## 参考链接\n\n1. [跨域资源共享 CORS 详解](http://www.ruanyifeng.com/blog/2016/04/cors.html)\n\n2. [浏览器的同源策略](https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy)\n\n3. [浏览器同源政策及其规避方法](http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html)\n\n4. [ ajax 设置Access-Control-Allow-Origin实现跨域访问](http://blog.csdn.net/fdipzone/article/details/46390573)\n\n5. [使用CORS（译）](http://liuwanlin.info/corsxiang-jie/)\n","slug":"jsonp","published":1,"updated":"2016-10-02T03:42:13.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db4d002590pyc716lzub"},{"title":"在Intellij Idea中生成Javadoc","date":"2016-10-04T16:06:29.000Z","_content":"\n`Tools | Generate JavaDoc`, 写上输出路径即可。\n\n## 注意事项\n\n1. locale\n\n  简体中文写`zh_CN`\n\n2. 编码\n\n  在`Other Commandline arguments`中指定\n  ```\n  -encoding UTF-8 -charset UTF-8\n  ```\n\n## 参考链接\n\n1. [在 IntelliJ IDEA 中为自己设计的类库生成 JavaDoc](http://www.cnblogs.com/cyberniuniu/p/5021910.html)\n\n2. [Generate JavaDoc Dialog](https://www.jetbrains.com/help/idea/2016.2/generate-javadoc-dialog.html)\n\n3. [Generating JavaDoc Reference for a Project](https://www.jetbrains.com/help/idea/2016.2/generating-javadoc-reference-for-a-project.html)\n","source":"_posts/javadoc.md","raw":"title: 在Intellij Idea中生成Javadoc\ndate: 2016-10-05 00:06:29\ntags: Javadoc\ncategory: idea\n---\n\n`Tools | Generate JavaDoc`, 写上输出路径即可。\n\n## 注意事项\n\n1. locale\n\n  简体中文写`zh_CN`\n\n2. 编码\n\n  在`Other Commandline arguments`中指定\n  ```\n  -encoding UTF-8 -charset UTF-8\n  ```\n\n## 参考链接\n\n1. [在 IntelliJ IDEA 中为自己设计的类库生成 JavaDoc](http://www.cnblogs.com/cyberniuniu/p/5021910.html)\n\n2. [Generate JavaDoc Dialog](https://www.jetbrains.com/help/idea/2016.2/generate-javadoc-dialog.html)\n\n3. [Generating JavaDoc Reference for a Project](https://www.jetbrains.com/help/idea/2016.2/generating-javadoc-reference-for-a-project.html)\n","slug":"javadoc","published":1,"updated":"2016-10-04T16:13:44.837Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db4r002a90py1k1notmd"},{"title":"java 访问权限区别","date":"2015-10-20T01:57:22.000Z","_content":"## 类成员的访问权限\n|  Modifier |  Class  | Package      | Subclass  |  World       |   \n| ----------| --------| -------------| --------- | ------------- \n|  public   |   √     |   √           |  √         |   √           |   \n|  protect  |   √     |   √           |   √        |    x          |  \n|  no modifier |   √  |   √            |  x         |    x          |   \n|  private  |   √     |     x        |     x      |       x       |   \n\n没有修饰符的话就相当于package可见，如果子类不在同一个package则也不能访问相应的方法。\n\n > [Controlling Access to Members of a Class](https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html)\n > [JAVA修饰符类型](http://blog.csdn.net/johnstrive/article/details/5880357)","source":"_posts/java-permission-control.md","raw":"title: java 访问权限区别\ndate: 2015-10-20 09:57:22\ntags: 访问权限\ncategory: java\n---\n## 类成员的访问权限\n|  Modifier |  Class  | Package      | Subclass  |  World       |   \n| ----------| --------| -------------| --------- | ------------- \n|  public   |   √     |   √           |  √         |   √           |   \n|  protect  |   √     |   √           |   √        |    x          |  \n|  no modifier |   √  |   √            |  x         |    x          |   \n|  private  |   √     |     x        |     x      |       x       |   \n\n没有修饰符的话就相当于package可见，如果子类不在同一个package则也不能访问相应的方法。\n\n > [Controlling Access to Members of a Class](https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html)\n > [JAVA修饰符类型](http://blog.csdn.net/johnstrive/article/details/5880357)","slug":"java-permission-control","published":1,"updated":"2015-11-04T05:03:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db4w002f90py1nwjgxw9"},{"title":"Java中的异常处理","date":"2016-09-25T14:49:04.000Z","_content":"\n## 异常的分类\n\n* 业务异常\n\n> 处理业务的时候80%的时候是没问题的，但可能有20%的时候事情没\n> 有按理想的方向发展。例如注册用户的时候，正常情况是注册成功，但\n> 可能用户提交请求的时候，系统发现用户名已经被别人注册了，这是就\n> 可以抛出一个UserAlreadyExistsException\n>\n来自 <https://github.com/kyfxbl/blog/blob/master/source/_posts/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.md>\n\n业务异常一般是上层可以处理的，一般声明为`CheckedException`，强制上层进行捕获处理\n\n业务异常定义示例摘自[spring mvc 异常统一处理](http://gaojiewyh.iteye.com/blog/1297746#bc2369985)：\n\n```\npublic class BusinessException extends Exception {  \n   \n    private static final long serialVersionUID = 1L;  \n   \n    public BusinessException() {  \n        // TODO Auto-generated constructor stub  \n    }  \n   \n    public BusinessException(String message) {  \n        super(message);  \n        // TODO Auto-generated constructor stub  \n    }  \n   \n    public BusinessException(Throwable cause) {  \n        super(cause);  \n        // TODO Auto-generated constructor stub  \n    }  \n   \n    public BusinessException(String message, Throwable cause) {  \n        super(message, cause);  \n        // TODO Auto-generated constructor stub  \n    }  \n   \n}  \n```\n\n一般是继承自`Exception`, 这样就成为`CheckedException`， 必须强制捕获\n\n* 逻辑异常\n\n> 系统异常与具体业务流程没有直接的关系，例如编程错误导致的NullPointExcpetion，\n> 还有环境问题，例如磁盘损坏或者网络连接不稳定造成了IOException。\n\n> 来自  <https://github.com/kyfxbl/blog/blob/master/source/_posts/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.md>\n\n系统异常一般是上层无法处理的，所以一般声明为`UncheckedException`，不强制用户捕获。\n```\npublic class SystemException extends RuntimeException {  \n   \n    private static final long serialVersionUID = 1L;  \n   \n    public SystemException() {  \n        // TODO Auto-generated constructor stub  \n    }  \n   \n    /** \n     * @param message \n     */  \n    public SystemException(String message) {  \n        super(message);  \n        // TODO Auto-generated constructor stub  \n    }  \n   \n    /** \n     * @param cause \n     */  \n    public SystemException(Throwable cause) {  \n        super(cause);  \n        // TODO Auto-generated constructor stub  \n    }  \n   \n    /** \n     * @param message \n     * @param cause \n     */  \n    public SystemException(String message, Throwable cause) {  \n        super(message, cause);  \n        // TODO Auto-generated constructor stub  \n    }  \n   \n}  \n\n```\n\n## 异常的捕获\n\n• 在Service层中应该捕获Dao层抛出的异常并且包装成相应的异常，如业务异常、系统异常等\n\n  业务层中，通过异常链保存原始异常信息。程序员必须自己编码来保存原始异常的信息。在业务逻辑中，捕获DataAccessException异常，处理包装成SystemException异常抛出。捕获ObjectNotFoundException，DuplicateKeyException异常，处理包装成BusinessException异常抛出。业务层中应根据业务的不同，将异常尽量分得细一点，否则，自定义的异常没有太多的意义。\n\n来自 <http://gaojiewyh.iteye.com/blog/1739662>\n\n```\npublic addUser(User user) throws BusinessException,SystemException{  \n        try{  \n              userDao.addUser(user);  \n        }catch(DuplicatekeyException ex){  \n             log.infor(\"......................\");  \n             throw new BusinessException(ex.getCause(),\"国际化信息\"）；  \n        }catch(DataAccessException ex){  \n             log.error(\"......................\");  \n             throw new SystemException(ex.getCause(),\"国际化信息\"）；  \n        }  \n}  \n\n```\n\n## 常见误区\n\n### 一、定义上捕获者需要用到的信息\n\n```\npublic class DuplicateUsernameException extends Exception {  \n}  \n```\n\n#### 理由: \n它除了有一个\"意义明确\"的名字以外没有任何有用的信息了。不要忘记Exception跟其他的Java类一样，客户端可以调用其中的方法来得到更多的信息。  \n\n```\npublic class DuplicateUsernameException extends Exception {\n    private static final long serialVersionUID = -6113064394525919823L;\n    private String username = null;\n    private String[] availableNames = new String[0];\n \n    public DuplicateUsernameException(String username) {\n            this.username = username;\n    }\n \n    public DuplicateUsernameException(String username, String[] availableNames) {\n            this(username);\n            this.availableNames = availableNames;\n    }\n \n    public String requestedUsername() {\n            return this.username;\n    }\n \n    public String[] availableNames() {\n            return this.availableNames;\n    }\n}\n```\n来自 <http://www.iteye.com/topic/857443>\n\n### 二、尽可能避免（因抛出异常带来的）接口污染\n\n来自 <http://lavasoft.blog.51cto.com/62575/244138/>\n\n### 三、异常链传播\n\n```\npublic void dataAccessCode(){\n    try{\n        ..some code that throws SQLException\n    }catch(SQLException ex){\n        throw new RuntimeException(ex);\n    }\n}\n```\n\n## 参考链接：\n\n1. [Best Practices for Exception Handling](http://www.onjava.com/pub/a/onjava/2003/11/19/exceptions.html?page=2)\n\n2. [基于Spring的异常体系处理](http://gaojiewyh.iteye.com/blog/1739662)\n\n3. [spring mvc 异常统一处理](http://gaojiewyh.iteye.com/blog/1297746#bc2369985)\n\n4. [异常处理最佳实践.md](https://github.com/kyfxbl/blog/blob/master/source/_posts/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.md)\n","source":"_posts/java-exception.md","raw":"title: Java中的异常处理\ndate: 2016-09-25 22:49:04\ntags: exception\ncategory: java\n---\n\n## 异常的分类\n\n* 业务异常\n\n> 处理业务的时候80%的时候是没问题的，但可能有20%的时候事情没\n> 有按理想的方向发展。例如注册用户的时候，正常情况是注册成功，但\n> 可能用户提交请求的时候，系统发现用户名已经被别人注册了，这是就\n> 可以抛出一个UserAlreadyExistsException\n>\n来自 <https://github.com/kyfxbl/blog/blob/master/source/_posts/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.md>\n\n业务异常一般是上层可以处理的，一般声明为`CheckedException`，强制上层进行捕获处理\n\n业务异常定义示例摘自[spring mvc 异常统一处理](http://gaojiewyh.iteye.com/blog/1297746#bc2369985)：\n\n```\npublic class BusinessException extends Exception {  \n   \n    private static final long serialVersionUID = 1L;  \n   \n    public BusinessException() {  \n        // TODO Auto-generated constructor stub  \n    }  \n   \n    public BusinessException(String message) {  \n        super(message);  \n        // TODO Auto-generated constructor stub  \n    }  \n   \n    public BusinessException(Throwable cause) {  \n        super(cause);  \n        // TODO Auto-generated constructor stub  \n    }  \n   \n    public BusinessException(String message, Throwable cause) {  \n        super(message, cause);  \n        // TODO Auto-generated constructor stub  \n    }  \n   \n}  \n```\n\n一般是继承自`Exception`, 这样就成为`CheckedException`， 必须强制捕获\n\n* 逻辑异常\n\n> 系统异常与具体业务流程没有直接的关系，例如编程错误导致的NullPointExcpetion，\n> 还有环境问题，例如磁盘损坏或者网络连接不稳定造成了IOException。\n\n> 来自  <https://github.com/kyfxbl/blog/blob/master/source/_posts/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.md>\n\n系统异常一般是上层无法处理的，所以一般声明为`UncheckedException`，不强制用户捕获。\n```\npublic class SystemException extends RuntimeException {  \n   \n    private static final long serialVersionUID = 1L;  \n   \n    public SystemException() {  \n        // TODO Auto-generated constructor stub  \n    }  \n   \n    /** \n     * @param message \n     */  \n    public SystemException(String message) {  \n        super(message);  \n        // TODO Auto-generated constructor stub  \n    }  \n   \n    /** \n     * @param cause \n     */  \n    public SystemException(Throwable cause) {  \n        super(cause);  \n        // TODO Auto-generated constructor stub  \n    }  \n   \n    /** \n     * @param message \n     * @param cause \n     */  \n    public SystemException(String message, Throwable cause) {  \n        super(message, cause);  \n        // TODO Auto-generated constructor stub  \n    }  \n   \n}  \n\n```\n\n## 异常的捕获\n\n• 在Service层中应该捕获Dao层抛出的异常并且包装成相应的异常，如业务异常、系统异常等\n\n  业务层中，通过异常链保存原始异常信息。程序员必须自己编码来保存原始异常的信息。在业务逻辑中，捕获DataAccessException异常，处理包装成SystemException异常抛出。捕获ObjectNotFoundException，DuplicateKeyException异常，处理包装成BusinessException异常抛出。业务层中应根据业务的不同，将异常尽量分得细一点，否则，自定义的异常没有太多的意义。\n\n来自 <http://gaojiewyh.iteye.com/blog/1739662>\n\n```\npublic addUser(User user) throws BusinessException,SystemException{  \n        try{  \n              userDao.addUser(user);  \n        }catch(DuplicatekeyException ex){  \n             log.infor(\"......................\");  \n             throw new BusinessException(ex.getCause(),\"国际化信息\"）；  \n        }catch(DataAccessException ex){  \n             log.error(\"......................\");  \n             throw new SystemException(ex.getCause(),\"国际化信息\"）；  \n        }  \n}  \n\n```\n\n## 常见误区\n\n### 一、定义上捕获者需要用到的信息\n\n```\npublic class DuplicateUsernameException extends Exception {  \n}  \n```\n\n#### 理由: \n它除了有一个\"意义明确\"的名字以外没有任何有用的信息了。不要忘记Exception跟其他的Java类一样，客户端可以调用其中的方法来得到更多的信息。  \n\n```\npublic class DuplicateUsernameException extends Exception {\n    private static final long serialVersionUID = -6113064394525919823L;\n    private String username = null;\n    private String[] availableNames = new String[0];\n \n    public DuplicateUsernameException(String username) {\n            this.username = username;\n    }\n \n    public DuplicateUsernameException(String username, String[] availableNames) {\n            this(username);\n            this.availableNames = availableNames;\n    }\n \n    public String requestedUsername() {\n            return this.username;\n    }\n \n    public String[] availableNames() {\n            return this.availableNames;\n    }\n}\n```\n来自 <http://www.iteye.com/topic/857443>\n\n### 二、尽可能避免（因抛出异常带来的）接口污染\n\n来自 <http://lavasoft.blog.51cto.com/62575/244138/>\n\n### 三、异常链传播\n\n```\npublic void dataAccessCode(){\n    try{\n        ..some code that throws SQLException\n    }catch(SQLException ex){\n        throw new RuntimeException(ex);\n    }\n}\n```\n\n## 参考链接：\n\n1. [Best Practices for Exception Handling](http://www.onjava.com/pub/a/onjava/2003/11/19/exceptions.html?page=2)\n\n2. [基于Spring的异常体系处理](http://gaojiewyh.iteye.com/blog/1739662)\n\n3. [spring mvc 异常统一处理](http://gaojiewyh.iteye.com/blog/1297746#bc2369985)\n\n4. [异常处理最佳实践.md](https://github.com/kyfxbl/blog/blob/master/source/_posts/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.md)\n","slug":"java-exception","published":1,"updated":"2016-09-25T15:45:54.130Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db50002j90pyd8uzvwiv"},{"title":"jackson对guava新增集合的支持","date":"2016-11-15T16:10:21.000Z","_content":"\n\n\n## 问题\n\nGuava中新增了不少好用的集合比如`MultiMap`、`MultiSet`、`Table`等，当使用jackson进行序列化的时候\n\n这些集合并不能正确的序列化，出现下面的情况：\n\n正常序列化应该为：\n```json\n{\n  \"fields\":{\n    \"Field1\":[\n      {\n        \"index\":0,\n        \"header\":\"Field1\",\n        \"fieldType\":\"fieldtype\",\n        \"description\":null,\n        \"cleanHeader\":null\n      }\n    ],\n    \"Field2\":[\n      {\n        \"index\":1,\n        \"header\":\"Field2\",\n        \"fieldType\":\"fieldtype\",\n        \"description\":null,\n        \"cleanHeader\":null\n      }\n    ]\n  }\n}\n```\n\n使用默认的spring出现的是：\n\n```json\n{\n  \"fields\":{\n    \"empty\": false\n  }\n}\n```\n\n## 解决方案\n\n要解决这个问题就要手动向jackson的ObjectMapper中注册一个Module\n\n```java\nTable study = getTable();\n\nObjectMapper mapper = new ObjectMapper();\nmapper.registerModule(new GuavaModule());\n\nString tableString = mapper.writeValueAsString(table);\n```\n\n\n\n这个`GuavaModule`是jackson对Guava集合支持的包，它的maven依赖如下：\n\n```xml\n<dependency>\n  <groupId>com.fasterxml.jackson.datatype</groupId>\n  <artifactId>jackson-datatype-guava</artifactId>\n  <version>2.2.0</version>\n</dependency>\n```\n\n也可以使用基于xml配置的方式将这个Module导入\n```xml\n<!-- JSON parser configuration-->\n<bean id=\"guavaObjectMapper\" class=\"com.fasterxml.jackson.databind.ObjectMapper\"/>\n\n<bean class=\"org.springframework.beans.factory.config.MethodInvokingFactoryBean\">\n    <property name=\"targetObject\"><ref local=\"guavaObjectMapper\" /></property>\n    <property name=\"targetMethod\"><value>registerModule</value></property>\n    <property name=\"arguments\">\n        <list>\n            <bean id=\"guavaModule\" class=\"com.fasterxml.jackson.datatype.guava.GuavaModule\"/>\n        </list>\n    </property>\n</bean>\n\n\n<mvc:annotation-driven>\n    <mvc:message-converters register-defaults=\"true\">\n        <bean class=\"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter\">\n            <property name=\"objectMapper\">\n                <ref  local=\"guavaObjectMapper\"/>\n            </property>\n        </bean>\n    </mvc:message-converters>\n</mvc:annotation-driven>\n```\n\n## 支持的类型\n\n![](jar.png)\n\n## 参考\n\n1. [Spring MVC configuration + Jackson + Guava multimap](http://stackoverflow.com/questions/26979120/spring-mvc-configuration-jackson-guava-multimap)\n\n2. [Json to guava multimap](http://www.leveluplunch.com/java/examples/convert-json-to-guava-multimap-with-jackson/)\n","source":"_posts/jackson-guava.md","raw":"title: jackson对guava新增集合的支持\ntags: jackson\ncategory: spring\ndate: 2016-11-16 00:10:21\n---\n\n\n\n## 问题\n\nGuava中新增了不少好用的集合比如`MultiMap`、`MultiSet`、`Table`等，当使用jackson进行序列化的时候\n\n这些集合并不能正确的序列化，出现下面的情况：\n\n正常序列化应该为：\n```json\n{\n  \"fields\":{\n    \"Field1\":[\n      {\n        \"index\":0,\n        \"header\":\"Field1\",\n        \"fieldType\":\"fieldtype\",\n        \"description\":null,\n        \"cleanHeader\":null\n      }\n    ],\n    \"Field2\":[\n      {\n        \"index\":1,\n        \"header\":\"Field2\",\n        \"fieldType\":\"fieldtype\",\n        \"description\":null,\n        \"cleanHeader\":null\n      }\n    ]\n  }\n}\n```\n\n使用默认的spring出现的是：\n\n```json\n{\n  \"fields\":{\n    \"empty\": false\n  }\n}\n```\n\n## 解决方案\n\n要解决这个问题就要手动向jackson的ObjectMapper中注册一个Module\n\n```java\nTable study = getTable();\n\nObjectMapper mapper = new ObjectMapper();\nmapper.registerModule(new GuavaModule());\n\nString tableString = mapper.writeValueAsString(table);\n```\n\n\n\n这个`GuavaModule`是jackson对Guava集合支持的包，它的maven依赖如下：\n\n```xml\n<dependency>\n  <groupId>com.fasterxml.jackson.datatype</groupId>\n  <artifactId>jackson-datatype-guava</artifactId>\n  <version>2.2.0</version>\n</dependency>\n```\n\n也可以使用基于xml配置的方式将这个Module导入\n```xml\n<!-- JSON parser configuration-->\n<bean id=\"guavaObjectMapper\" class=\"com.fasterxml.jackson.databind.ObjectMapper\"/>\n\n<bean class=\"org.springframework.beans.factory.config.MethodInvokingFactoryBean\">\n    <property name=\"targetObject\"><ref local=\"guavaObjectMapper\" /></property>\n    <property name=\"targetMethod\"><value>registerModule</value></property>\n    <property name=\"arguments\">\n        <list>\n            <bean id=\"guavaModule\" class=\"com.fasterxml.jackson.datatype.guava.GuavaModule\"/>\n        </list>\n    </property>\n</bean>\n\n\n<mvc:annotation-driven>\n    <mvc:message-converters register-defaults=\"true\">\n        <bean class=\"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter\">\n            <property name=\"objectMapper\">\n                <ref  local=\"guavaObjectMapper\"/>\n            </property>\n        </bean>\n    </mvc:message-converters>\n</mvc:annotation-driven>\n```\n\n## 支持的类型\n\n![](jar.png)\n\n## 参考\n\n1. [Spring MVC configuration + Jackson + Guava multimap](http://stackoverflow.com/questions/26979120/spring-mvc-configuration-jackson-guava-multimap)\n\n2. [Json to guava multimap](http://www.leveluplunch.com/java/examples/convert-json-to-guava-multimap-with-jackson/)\n","slug":"jackson-guava","published":1,"updated":"2016-11-15T16:10:21.665Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db54002n90pylf3wsh7e"},{"title":"idea文件模板","date":"2016-12-22T17:10:59.000Z","_content":"\n\n# 版权信息\n\n代码前面一般都会有相应的版权信息，拿guava的代码为例\n\n```java\n/*\n * Copyright (C) 2007 The Guava Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.common.collect;\n\n```\n\n## idea自动生成版权信息\n\n`File` > `Settings` > `Copyright` > `Copyright Profiles`\n\n新建一个profile，填入如下的内容\n```\n/* * Copyright (c) $today.year xx.com. All Rights Reserved. */\n```\n\n`$today.year`代表当前的年\n\n![](profiles.jpg)\n\n新建java文件时就自动生成了版权信息：\n\n```java\n/*\n *  * Copyright (c) 2016 Qunar.com. All Rights Reserved. \n */\n\npackage com.xxx.handler;\n```\n\n\n# 作者、日期、邮箱等\n\n`File` > `Settings` > `File and Ocde Templates` > `Includes` > `File Header`\n\n```java\n#set( $email = \"xx@xx.com\")\n#set( $author = \"xxx\")\n\n/**\n * @author ${author}\n * @email ${email}\n * @date ${DATE} ${TIME}\n */\n\n```\n\n这个使用的`velocity`渲染的，可以参考`velocity`的语法\n\n","source":"_posts/idea-template.md","raw":"title: idea文件模板\ntags: template\ncategory: idea\ndate: 2016-12-23 01:10:59\n---\n\n\n# 版权信息\n\n代码前面一般都会有相应的版权信息，拿guava的代码为例\n\n```java\n/*\n * Copyright (C) 2007 The Guava Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.common.collect;\n\n```\n\n## idea自动生成版权信息\n\n`File` > `Settings` > `Copyright` > `Copyright Profiles`\n\n新建一个profile，填入如下的内容\n```\n/* * Copyright (c) $today.year xx.com. All Rights Reserved. */\n```\n\n`$today.year`代表当前的年\n\n![](profiles.jpg)\n\n新建java文件时就自动生成了版权信息：\n\n```java\n/*\n *  * Copyright (c) 2016 Qunar.com. All Rights Reserved. \n */\n\npackage com.xxx.handler;\n```\n\n\n# 作者、日期、邮箱等\n\n`File` > `Settings` > `File and Ocde Templates` > `Includes` > `File Header`\n\n```java\n#set( $email = \"xx@xx.com\")\n#set( $author = \"xxx\")\n\n/**\n * @author ${author}\n * @email ${email}\n * @date ${DATE} ${TIME}\n */\n\n```\n\n这个使用的`velocity`渲染的，可以参考`velocity`的语法\n\n","slug":"idea-template","published":1,"updated":"2016-12-22T17:10:59.477Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db5b002r90pyfsoopdsy"},{"title":"Hexo搭建博客","date":"2015-10-08T02:30:14.000Z","_content":"Welcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n\n### hexo 草稿\n\n``` bash\n$ hexo new draft <title>\n$ hexo server --draft\n$ hexo publish <filename>\n```\n\n### 静态资源\n\n对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。这个稍微有些复杂但是管理资源非常方便的功能可以通过将 config.yml 文件中的 post_asset_folder 选项设为 true 来打开。\n```\n_config.yml\npost_asset_folder: true\n```\n\n当资源文件管理功能打开后，Hexo将会在你每一次通过 hexo new [layout] <title> 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个 markdown 文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。\n\n### 内链\n\n[Hexo使用内链及文章中加入图片的方法](http://marshal.ohtly.com/2015/09/12/internal-link-and-image-for-hexo/)\n\n### seo\n\n[Hexo Seo优化让你的博客在google搜索排名第一](http://www.jianshu.com/p/86557c34b671)\n\n## Markdown 语法简介\n```\n\n1、分段： 两个回车\n\n2、换行 两个空格 + 回车\n\n3、标题 #~###### 井号的个数表示几级标题，即Markdown可以表示一级标题到六级标题\n\n4、引用 >\n\n5、列表 *，+，-，1.，选其中之一，注意后面有个空格\n\n6、代码区块 四个空格开头\n\n7、链接 [文字](链接地址)\n\n8、图片 ![图片说明](图片地址)，图片地址可以是本地路劲，也可以是网络地址\n\n9、强调 **文字**，__文字__，_文字_，*文字*\n\n10、代码 ```\n\n >[Markdown——入门指南](http://www.jianshu.com/p/1e402922ee32/)\n\n ## 在Hexo中插入gist\n\n ```\n {% gist 1f10fa5b8b76f3b5efaf74ad3d6da413  %}\n ```\n 其中一长串是gist生成的id\n","source":"_posts/hello-world.md","raw":"title: Hexo搭建博客\ndate: 2015-10-08 10:30:14\ncategories: hexo\ntags: hexo install\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)\n\n### hexo 草稿\n\n``` bash\n$ hexo new draft <title>\n$ hexo server --draft\n$ hexo publish <filename>\n```\n\n### 静态资源\n\n对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。这个稍微有些复杂但是管理资源非常方便的功能可以通过将 config.yml 文件中的 post_asset_folder 选项设为 true 来打开。\n```\n_config.yml\npost_asset_folder: true\n```\n\n当资源文件管理功能打开后，Hexo将会在你每一次通过 hexo new [layout] <title> 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个 markdown 文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。\n\n### 内链\n\n[Hexo使用内链及文章中加入图片的方法](http://marshal.ohtly.com/2015/09/12/internal-link-and-image-for-hexo/)\n\n### seo\n\n[Hexo Seo优化让你的博客在google搜索排名第一](http://www.jianshu.com/p/86557c34b671)\n\n## Markdown 语法简介\n```\n\n1、分段： 两个回车\n\n2、换行 两个空格 + 回车\n\n3、标题 #~###### 井号的个数表示几级标题，即Markdown可以表示一级标题到六级标题\n\n4、引用 >\n\n5、列表 *，+，-，1.，选其中之一，注意后面有个空格\n\n6、代码区块 四个空格开头\n\n7、链接 [文字](链接地址)\n\n8、图片 ![图片说明](图片地址)，图片地址可以是本地路劲，也可以是网络地址\n\n9、强调 **文字**，__文字__，_文字_，*文字*\n\n10、代码 ```\n\n >[Markdown——入门指南](http://www.jianshu.com/p/1e402922ee32/)\n\n ## 在Hexo中插入gist\n\n ```\n {% gist 1f10fa5b8b76f3b5efaf74ad3d6da413  %}\n ```\n 其中一长串是gist生成的id\n","slug":"hello-world","published":1,"updated":"2016-12-18T05:08:47.643Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db5k002v90pyicenr5rp"},{"title":"grep 总结","date":"2016-12-06T16:12:54.000Z","_content":"\n\n## 常见用法\n\n示例文本：\n> \"Night gathers, and now my watch begins. It shall not end \nuntil my death. I shall take no wife, hold no lands, father no \nchildren. I shall wear no crowns and win no glory. I shall live \nand die at my post. I am the sword in the darkness. I am the \nwatcher on the walls. I am the shield that guards the realms of \nmen. I pledge my life and honor to the Night's Watch, for this \nnight and all the nights to come.\"\n\n\n### `grep 'keyword' filename`\n\n在一个文件按照关键字查找\n\n `grep 'now' test.txt` 输出\n\n > \"Night gathers, and now my watch begins. It shall not end\n\n### `grep -n `\n\n显示行号\n\n `grep -n 'now' test.txt` 输出\n\n> 1:\"Night gathers, and now my watch begins. It shall not end\n\n### `grep -i` \n\n忽略大小写\n\n `grep -i 'watch' test.txt` 输出\n\n> \"Night gathers, and now my watch begins. It shall not end\nwatcher on the walls. I am the shield that guards the realms of\nmen. I pledge my life and honor to the Night's Watch, for this\n\n### `grep -v`\n\n输出不包含 `-v` 后面关键字的行\n\n`grep -v 'watch' test.txt` 输出\n\n> until my death. I shall take no wife, hold no lands, father no\nchildren. I shall wear no crowns and win no glory. I shall live\nand die at my post. I am the sword in the darkness. I am the\nmen. I pledge my life and honor to the Night's Watch, for this\nnight and all the nights to come.\"\n\n### `grep -e`\n\n提供正则的支持，关键字中可以包含正则表达式\n\n### `grep -B10`\n\n输出匹配行的同事， 也输出匹配行之前的10行（before）\n\n### `grep -A10`\n\n输出匹配行的同时，也输出匹配行之后的10行（after）\n\n### `grep -C10`\n\n输出匹配行的同时，输出之前和之后的10行\n\n### `grep -o`\n\n只输出匹配的内容\n\n`grep -o 'watch' test.txt`\n\n> watch\n  watch\n\n### `grep -c`\n\n输出匹配的行数的个数\n\n`grep -ci 'watch' test.txt`\n\n> 3\n\n### `grep -l`\n\n显示有匹配行的文件，只显示文件名称，不显示内容\n\n`grep -l 'watch' test.txt`\n\n> test.txt\n\n### `grep -H`\n\n在匹配行的前面同时输出文件名\n\n`grep -H 'watch' test.txt`\n\n> test.txt:\"Night gathers, and now my watch begins. It shall not end\ntest.txt:watcher on the walls. I am the shield that guards the realms of\n\n## 高亮\n\n### grep --color\n\n`grep -H --color 'watch' test.txt`\n\n![](color.jpg)\n\n### 设置环境变量\n\n在用户目录下的`.bashrc`中设置环境变量，也可以达到高亮的目的\n\n```bash\nexport GREP_OPTIONS='--color=auto'\n```\n\n添加之后记得`source ~/.bashrc`, 然后才能生效\n\n## egrep\n\n> egrep 命令与 grep 命令带 -E 标志是一样的，除了错误消息和使用情况消息不同以及 -s 标志的功能不同之外。\n\n### 多关键字\n\n使用正则就可以同时搜索多个关键字\n\n`grep -E 'keyword1 | keyword2' filename`\n\n`grep --color -E  'am | to' test.txt`\n\n![](egrep.jpg)\n\n## zgrep\n\nzgrep 可以在压缩文件中搜索内容\n\n## 参考\n\n1. [HowTo: Use grep Command In Linux / UNIX – Examples](https://www.cyberciti.biz/faq/howto-use-grep-command-in-linux-unix/)\n\n2. [egrep 命令 - IBM](https://www.ibm.com/support/knowledgecenter/zh/ssw_aix_61/com.ibm.aix.cmds2/egrep.htm)","source":"_posts/grep.md","raw":"title: grep 总结\ntags: shell\ncategory: linux\ndate: 2016-12-07 00:12:54\n---\n\n\n## 常见用法\n\n示例文本：\n> \"Night gathers, and now my watch begins. It shall not end \nuntil my death. I shall take no wife, hold no lands, father no \nchildren. I shall wear no crowns and win no glory. I shall live \nand die at my post. I am the sword in the darkness. I am the \nwatcher on the walls. I am the shield that guards the realms of \nmen. I pledge my life and honor to the Night's Watch, for this \nnight and all the nights to come.\"\n\n\n### `grep 'keyword' filename`\n\n在一个文件按照关键字查找\n\n `grep 'now' test.txt` 输出\n\n > \"Night gathers, and now my watch begins. It shall not end\n\n### `grep -n `\n\n显示行号\n\n `grep -n 'now' test.txt` 输出\n\n> 1:\"Night gathers, and now my watch begins. It shall not end\n\n### `grep -i` \n\n忽略大小写\n\n `grep -i 'watch' test.txt` 输出\n\n> \"Night gathers, and now my watch begins. It shall not end\nwatcher on the walls. I am the shield that guards the realms of\nmen. I pledge my life and honor to the Night's Watch, for this\n\n### `grep -v`\n\n输出不包含 `-v` 后面关键字的行\n\n`grep -v 'watch' test.txt` 输出\n\n> until my death. I shall take no wife, hold no lands, father no\nchildren. I shall wear no crowns and win no glory. I shall live\nand die at my post. I am the sword in the darkness. I am the\nmen. I pledge my life and honor to the Night's Watch, for this\nnight and all the nights to come.\"\n\n### `grep -e`\n\n提供正则的支持，关键字中可以包含正则表达式\n\n### `grep -B10`\n\n输出匹配行的同事， 也输出匹配行之前的10行（before）\n\n### `grep -A10`\n\n输出匹配行的同时，也输出匹配行之后的10行（after）\n\n### `grep -C10`\n\n输出匹配行的同时，输出之前和之后的10行\n\n### `grep -o`\n\n只输出匹配的内容\n\n`grep -o 'watch' test.txt`\n\n> watch\n  watch\n\n### `grep -c`\n\n输出匹配的行数的个数\n\n`grep -ci 'watch' test.txt`\n\n> 3\n\n### `grep -l`\n\n显示有匹配行的文件，只显示文件名称，不显示内容\n\n`grep -l 'watch' test.txt`\n\n> test.txt\n\n### `grep -H`\n\n在匹配行的前面同时输出文件名\n\n`grep -H 'watch' test.txt`\n\n> test.txt:\"Night gathers, and now my watch begins. It shall not end\ntest.txt:watcher on the walls. I am the shield that guards the realms of\n\n## 高亮\n\n### grep --color\n\n`grep -H --color 'watch' test.txt`\n\n![](color.jpg)\n\n### 设置环境变量\n\n在用户目录下的`.bashrc`中设置环境变量，也可以达到高亮的目的\n\n```bash\nexport GREP_OPTIONS='--color=auto'\n```\n\n添加之后记得`source ~/.bashrc`, 然后才能生效\n\n## egrep\n\n> egrep 命令与 grep 命令带 -E 标志是一样的，除了错误消息和使用情况消息不同以及 -s 标志的功能不同之外。\n\n### 多关键字\n\n使用正则就可以同时搜索多个关键字\n\n`grep -E 'keyword1 | keyword2' filename`\n\n`grep --color -E  'am | to' test.txt`\n\n![](egrep.jpg)\n\n## zgrep\n\nzgrep 可以在压缩文件中搜索内容\n\n## 参考\n\n1. [HowTo: Use grep Command In Linux / UNIX – Examples](https://www.cyberciti.biz/faq/howto-use-grep-command-in-linux-unix/)\n\n2. [egrep 命令 - IBM](https://www.ibm.com/support/knowledgecenter/zh/ssw_aix_61/com.ibm.aix.cmds2/egrep.htm)","slug":"grep","published":1,"updated":"2016-12-06T16:12:54.740Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db5r002z90pyjq4q9qm2"},{"title":"fabric 分布式部署","date":"2015-11-03T15:55:34.000Z","_content":"\n## 前言\n   在一台linux主机上执行命令，如果太繁琐可以写成 Shell 脚本；如果在一个集群上批量执行命令呢？\n一台一台的ssh登录去执行当然是可以的，如果集群太大，就太繁琐了。下面介绍一些在集群上执行命令的方法。\n\n## ssh 远程执行命令\n\t通过 ssh 可以按照下面的方式远程执行命令\n``` bash\n ssh user@host 'command1;command2;command3'\n```\n或者使用管道\n``` bash\n ssh user@host 'command1|command2|command3'\n```\n或者使用如下的\n``` bash\n\t$ ssh [user]@[server] << EOF\n\tcommand 1\n\tcommand 2\n\tcommand 3\n\tEOF\n```\n或者将要执行的命令写入 Shell 脚本\n``` bash\n\t$ ssh user@host 'bash -s' < local_script.sh\n```\n\n可以通过指定ssh 参数 `-o StrictHostKeyChecking=no` 来省去下面的交互过程 \n \n![](http://farm8.staticflickr.com/7399/8778510478_4a428cc5f4.jpg)\n\n**但是上面的方法执行 sudo 命令的时候会出错**\n此时需要加上 ssh 的 `-t` 参数\nman 一下 ssh 查找 -t 参数可以看到如下的解释\n\n> -t      \n> Force pseudo-tty allocation.  This can be used to execute arbi‐\n             trary screen-based programs on a remote machine, which can be\n             very useful, e.g. when implementing menu services.  Multiple -t\n             options force tty allocation, even if ssh has no local tty.\n\n具体的意思就是强制提供一个远程服务器的虚拟tty终端\n``` bash\n\tssh -t -p port user@host 'cmd'\n```\n即可执行sudo命令，但是自己还要手工输入远程服务器的密码\n---\n要想写在脚本中自动执行还需要使用 expect\nexpect是 linux下的一个命令用来处理执行命令中的交互，python 也有相应的库 pexpect\n> Expect  is a program that \"talks\" to other interactive programs accord‐\n       ing to a script. \n\n下面是参考的一些文章\n > [Send Remote Commands Via SSH](http://malcontentcomics.com/systemsboy/2006/07/send-remote-commands-via-ssh.html)\n > [Running Commands on a Remote Linux Server over SSH](http://www.shellhacks.com/en/Running-Commands-on-a-Remote-Linux-Server-over-SSH)\n\n## 其他集群管理命令\n\n如 pssh mussh\n\n> [linux集群管理工具mussh和pssh](http://xiaorui.cc/2014/07/09/linux%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7mussh%E5%92%8Cpssh/)\n\n## fabric \n\nfabric 是基于 ssh 的一个python库，主要用来做运维或者批量部署\n[fabric官网](http://www.fabfile.org/)\n* 安装 fabric\n``` bash\n\tpip install fabric\n```\n\n安装完成即可使用 fabric，fabric上手简单，功能强大\n\n``` bash\n\tfab -f xxx.py command\n```\nfab 默认在当前目录下寻找 fabfiles，如果你的文件是其他的名字，使用 `-f`指定即可\n\n脚本的编写\n``` python\n\tfrom fabric.api import run\n\n\tdef host_type():\n\t\trun('uname -s')\n```\n运行\n``` bash\n\t$ fab -H localhost,linuxbox host_type\n\t\t[localhost] run: uname -s\n\t\t[localhost] out: Darwin\n\t\t[linuxbox] run: uname -s\n\t\t[linuxbox] out: Linux\n\t\t\n\t\tDone.\n\t\tDisconnecting from localhost... done.\n\t\tDisconnecting from linuxbox... done.\n```\n使用 `-H`可以指定运行的host， 也可以在代码中指定。\n用户名和密码都是存在 env 环境变量中，也可在脚本中更改\n[The environment dictionary](http://docs.fabfile.org/en/1.10/usage/env.html?highlight=env)\n\n同时 fabric 还提供了一些装饰器，具体的可以查文档\n``` python\n\t@parralel\n\t@task\n\t@role()\n\t@host()\n```\n详细讲解可以参考这篇文章 [Python fabric实现远程操作和部署 ](http://wklken.me/posts/2013/03/25/python-tool-fabric.html)\n","source":"_posts/fabric.md","raw":"title: fabric 分布式部署\ndate: 2015-11-03 23:55:34\ntags: fabric  运维\ncategory: python linux\n---\n\n## 前言\n   在一台linux主机上执行命令，如果太繁琐可以写成 Shell 脚本；如果在一个集群上批量执行命令呢？\n一台一台的ssh登录去执行当然是可以的，如果集群太大，就太繁琐了。下面介绍一些在集群上执行命令的方法。\n\n## ssh 远程执行命令\n\t通过 ssh 可以按照下面的方式远程执行命令\n``` bash\n ssh user@host 'command1;command2;command3'\n```\n或者使用管道\n``` bash\n ssh user@host 'command1|command2|command3'\n```\n或者使用如下的\n``` bash\n\t$ ssh [user]@[server] << EOF\n\tcommand 1\n\tcommand 2\n\tcommand 3\n\tEOF\n```\n或者将要执行的命令写入 Shell 脚本\n``` bash\n\t$ ssh user@host 'bash -s' < local_script.sh\n```\n\n可以通过指定ssh 参数 `-o StrictHostKeyChecking=no` 来省去下面的交互过程 \n \n![](http://farm8.staticflickr.com/7399/8778510478_4a428cc5f4.jpg)\n\n**但是上面的方法执行 sudo 命令的时候会出错**\n此时需要加上 ssh 的 `-t` 参数\nman 一下 ssh 查找 -t 参数可以看到如下的解释\n\n> -t      \n> Force pseudo-tty allocation.  This can be used to execute arbi‐\n             trary screen-based programs on a remote machine, which can be\n             very useful, e.g. when implementing menu services.  Multiple -t\n             options force tty allocation, even if ssh has no local tty.\n\n具体的意思就是强制提供一个远程服务器的虚拟tty终端\n``` bash\n\tssh -t -p port user@host 'cmd'\n```\n即可执行sudo命令，但是自己还要手工输入远程服务器的密码\n---\n要想写在脚本中自动执行还需要使用 expect\nexpect是 linux下的一个命令用来处理执行命令中的交互，python 也有相应的库 pexpect\n> Expect  is a program that \"talks\" to other interactive programs accord‐\n       ing to a script. \n\n下面是参考的一些文章\n > [Send Remote Commands Via SSH](http://malcontentcomics.com/systemsboy/2006/07/send-remote-commands-via-ssh.html)\n > [Running Commands on a Remote Linux Server over SSH](http://www.shellhacks.com/en/Running-Commands-on-a-Remote-Linux-Server-over-SSH)\n\n## 其他集群管理命令\n\n如 pssh mussh\n\n> [linux集群管理工具mussh和pssh](http://xiaorui.cc/2014/07/09/linux%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7mussh%E5%92%8Cpssh/)\n\n## fabric \n\nfabric 是基于 ssh 的一个python库，主要用来做运维或者批量部署\n[fabric官网](http://www.fabfile.org/)\n* 安装 fabric\n``` bash\n\tpip install fabric\n```\n\n安装完成即可使用 fabric，fabric上手简单，功能强大\n\n``` bash\n\tfab -f xxx.py command\n```\nfab 默认在当前目录下寻找 fabfiles，如果你的文件是其他的名字，使用 `-f`指定即可\n\n脚本的编写\n``` python\n\tfrom fabric.api import run\n\n\tdef host_type():\n\t\trun('uname -s')\n```\n运行\n``` bash\n\t$ fab -H localhost,linuxbox host_type\n\t\t[localhost] run: uname -s\n\t\t[localhost] out: Darwin\n\t\t[linuxbox] run: uname -s\n\t\t[linuxbox] out: Linux\n\t\t\n\t\tDone.\n\t\tDisconnecting from localhost... done.\n\t\tDisconnecting from linuxbox... done.\n```\n使用 `-H`可以指定运行的host， 也可以在代码中指定。\n用户名和密码都是存在 env 环境变量中，也可在脚本中更改\n[The environment dictionary](http://docs.fabfile.org/en/1.10/usage/env.html?highlight=env)\n\n同时 fabric 还提供了一些装饰器，具体的可以查文档\n``` python\n\t@parralel\n\t@task\n\t@role()\n\t@host()\n```\n详细讲解可以参考这篇文章 [Python fabric实现远程操作和部署 ](http://wklken.me/posts/2013/03/25/python-tool-fabric.html)\n","slug":"fabric","published":1,"updated":"2015-11-04T14:25:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db63003390pyx6kdpz3e"},{"title":"Spring自定义标签，使用和源码","date":"2016-10-23T11:43:57.000Z","_content":"\n\n## 自定义标签\n\nSpring中的标签具有很强的扩展性，我们可以很方便的扩展出自己的标签，做出类似下面的标签\n```xml\n<dubbo:service interface=\"com.foo.BarService\" ref=\"barService\" />\n<dubbo:reference id=\"barService\" interface=\"com.foo.BarService\" />\n```\n\n### 1. Authoring the schema\n定义标签的xml描述：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsd:schema xmlns=\"http://www.mycompany.com/schema/myns\"\n        xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n        xmlns:beans=\"http://www.springframework.org/schema/beans\"\n        targetNamespace=\"http://www.mycompany.com/schema/myns\"\n        elementFormDefault=\"qualified\"\n        attributeFormDefault=\"unqualified\">\n\n    <xsd:import namespace=\"http://www.springframework.org/schema/beans\"/>\n\n    <xsd:element name=\"dateformat\">\n        <xsd:complexType>\n            <xsd:complexContent>\n                <xsd:extension base=\"beans:identifiedType\">\n                    <xsd:attribute name=\"lenient\" type=\"xsd:boolean\"/>\n                    <xsd:attribute name=\"pattern\" type=\"xsd:string\" use=\"required\"/>\n                </xsd:extension>\n            </xsd:complexContent>\n        </xsd:complexType>\n    </xsd:element>\n</xsd:schema>\n```\n定义了标签里面的属性和属性的类型， 在解析xml的时候spring会进行校验\n\n### 2. Coding a NamespaceHandler\n\n```java\npackage org.springframework.samples.xml;\n\nimport org.springframework.beans.factory.xml.NamespaceHandlerSupport;\n\npublic class MyNamespaceHandler extends NamespaceHandlerSupport {\n\n    public void init() {\n        registerBeanDefinitionParser(\"dateformat\", new SimpleDateFormatBeanDefinitionParser());\n    }\n\n}\n```\n主要是定义标签的处理类，这里是`SimpleDateFormatBeanDefinitionParser`\n\n### 3. BeanDefinitionParser\n```java\npackage org.springframework.samples.xml;\n\nimport org.springframework.beans.factory.support.BeanDefinitionBuilder;\nimport org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;\nimport org.springframework.util.StringUtils;\nimport org.w3c.dom.Element;\n\nimport java.text.SimpleDateFormat;\n\npublic class SimpleDateFormatBeanDefinitionParser extends AbstractSingleBeanDefinitionParser {\n\n    protected Class getBeanClass(Element element) {\n        return SimpleDateFormat.class;\n    }\n\n    protected void doParse(Element element, BeanDefinitionBuilder bean) {\n        // this will never be null since the schema explicitly requires that a value be supplied\n        String pattern = element.getAttribute(\"pattern\");\n        bean.addConstructorArg(pattern);\n\n        // this however is an optional property\n        String lenient = element.getAttribute(\"lenient\");\n        if (StringUtils.hasText(lenient)) {\n            bean.addPropertyValue(\"lenient\", Boolean.valueOf(lenient));\n        }\n    }\n\n}\n```\n\n该类继承自spring提供的抽象类`AbstractSingleBeanDefinitionParser`，提供了许多基本的功能，解析标签的方法在`doParse`中，spring会传入一个标签元素`Element`和`BeanDefinitionBuilder`的上下文。\n\n### 4. Registering the handler and the schema\n```\n└─META-INF\n        spring.handlers\n        spring.schemas\n```\n`spring.handlers`中的内容如下：\n\n```xml\nhttp\\://www.mycompany.com/schema/myns=org.springframework.samples.xml.MyNamespaceHandler\n```\n`spring.schemas`中内容如下：\n\n```xml\nhttp\\://www.mycompany.com/schema/myns/myns.xsd=org/springframework/samples/xml/myns.xsd\n```\n\nspring在加载这个jar包的时候会自动的从这些文件中解析到我们的配置，当解析到相应的标签的时候就会交给我们定义的解析类来处理。\n```xml\n<myns:dateformat id=\"dateFormat\"\npattern=\"yyyy-MM-dd HH:mm\"\nlenient=\"true\"/>\n```\n\n## Custom attributes on 'normal' elements\n\n除了自定义标签外，还可以为已有标签装饰一个新的属性\n\n```xml\n<bean id=\"checkingAccountService\" class=\"com.foo.DefaultCheckingAccountService\"\n        jcache:cache-name=\"checking.account\">\n    <!-- other dependencies here... -->\n</bean>\n```\nspring可以让我们单独处理这个`jcache:cache-name`这个属性。\n\n### 定义schema\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n\n<xsd:schema xmlns=\"http://www.foo.com/schema/jcache\"\n        xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n        targetNamespace=\"http://www.foo.com/schema/jcache\"\n        elementFormDefault=\"qualified\">\n\n    <xsd:attribute name=\"cache-name\" type=\"xsd:string\"/>\n\n</xsd:schema>\n```\n\n### NamespaceHandler\n\n```java\npublic class JCacheNamespaceHandler extends NamespaceHandlerSupport {\n\n    public void init() {\n        super.registerBeanDefinitionDecoratorForAttribute(\"cache-name\",\n            new JCacheInitializingBeanDefinitionDecorator());\n    }\n\n}\n```\n\n实际的调用行为已经被抽象到`NamespaceHandlerSupport`中\n\n```java\n/**\n * Decorates the supplied {@link Node} by delegating to the {@link BeanDefinitionDecorator} that\n * is registered to handle that {@link Node}.\n */\n@Override\npublic BeanDefinitionHolder decorate(\n    Node node, BeanDefinitionHolder definition, ParserContext parserContext) {\n\n  return findDecoratorForNode(node, parserContext).decorate(node, definition, parserContext);\n}\n```\n\n### BeanDefinitionDecorator\n\n```java\npublic class JCacheInitializingBeanDefinitionDecorator implements BeanDefinitionDecorator {\n\n    private static final String[] EMPTY_STRING_ARRAY = new String[0];\n\n    public BeanDefinitionHolder decorate(Node source, BeanDefinitionHolder holder,\n            ParserContext ctx) {\n        String initializerBeanName = registerJCacheInitializer(source, ctx);\n        createDependencyOnJCacheInitializer(holder, initializerBeanName);\n        return holder;\n    }\n\n    private void createDependencyOnJCacheInitializer(BeanDefinitionHolder holder,\n            String initializerBeanName) {\n        AbstractBeanDefinition definition = ((AbstractBeanDefinition) holder.getBeanDefinition());\n        String[] dependsOn = definition.getDependsOn();\n        if (dependsOn == null) {\n            dependsOn = new String[]{initializerBeanName};\n        } else {\n            List dependencies = new ArrayList(Arrays.asList(dependsOn));\n            dependencies.add(initializerBeanName);\n            dependsOn = (String[]) dependencies.toArray(EMPTY_STRING_ARRAY);\n        }\n        definition.setDependsOn(dependsOn);\n    }\n\n    private String registerJCacheInitializer(Node source, ParserContext ctx) {\n        String cacheName = ((Attr) source).getValue();\n        String beanName = cacheName + \"-initializer\";\n        if (!ctx.getRegistry().containsBeanDefinition(beanName)) {\n            BeanDefinitionBuilder initializer = BeanDefinitionBuilder.rootBeanDefinition(JCacheInitializer.class);\n            initializer.addConstructorArg(cacheName);\n            ctx.getRegistry().registerBeanDefinition(beanName, initializer.getBeanDefinition());\n        }\n        return beanName;\n    }\n\n}\n\n```\n\n### META-INF\n```xml\n# in 'META-INF/spring.handlers'\nhttp\\://www.foo.com/schema/jcache=com.foo.JCacheNamespaceHandler\n# in 'META-INF/spring.schemas'\nhttp\\://www.foo.com/schema/jcache/jcache.xsd=com/foo/jcache.xsd\n\n```\n\n## 参考\n\n1. [spring-framework-reference](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/)\n","source":"_posts/custom-tag.md","raw":"title: Spring自定义标签，使用和源码\ntags: 自定义标签\ncategory: spring\ndate: 2016-10-23 19:43:57\n---\n\n\n## 自定义标签\n\nSpring中的标签具有很强的扩展性，我们可以很方便的扩展出自己的标签，做出类似下面的标签\n```xml\n<dubbo:service interface=\"com.foo.BarService\" ref=\"barService\" />\n<dubbo:reference id=\"barService\" interface=\"com.foo.BarService\" />\n```\n\n### 1. Authoring the schema\n定义标签的xml描述：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsd:schema xmlns=\"http://www.mycompany.com/schema/myns\"\n        xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n        xmlns:beans=\"http://www.springframework.org/schema/beans\"\n        targetNamespace=\"http://www.mycompany.com/schema/myns\"\n        elementFormDefault=\"qualified\"\n        attributeFormDefault=\"unqualified\">\n\n    <xsd:import namespace=\"http://www.springframework.org/schema/beans\"/>\n\n    <xsd:element name=\"dateformat\">\n        <xsd:complexType>\n            <xsd:complexContent>\n                <xsd:extension base=\"beans:identifiedType\">\n                    <xsd:attribute name=\"lenient\" type=\"xsd:boolean\"/>\n                    <xsd:attribute name=\"pattern\" type=\"xsd:string\" use=\"required\"/>\n                </xsd:extension>\n            </xsd:complexContent>\n        </xsd:complexType>\n    </xsd:element>\n</xsd:schema>\n```\n定义了标签里面的属性和属性的类型， 在解析xml的时候spring会进行校验\n\n### 2. Coding a NamespaceHandler\n\n```java\npackage org.springframework.samples.xml;\n\nimport org.springframework.beans.factory.xml.NamespaceHandlerSupport;\n\npublic class MyNamespaceHandler extends NamespaceHandlerSupport {\n\n    public void init() {\n        registerBeanDefinitionParser(\"dateformat\", new SimpleDateFormatBeanDefinitionParser());\n    }\n\n}\n```\n主要是定义标签的处理类，这里是`SimpleDateFormatBeanDefinitionParser`\n\n### 3. BeanDefinitionParser\n```java\npackage org.springframework.samples.xml;\n\nimport org.springframework.beans.factory.support.BeanDefinitionBuilder;\nimport org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;\nimport org.springframework.util.StringUtils;\nimport org.w3c.dom.Element;\n\nimport java.text.SimpleDateFormat;\n\npublic class SimpleDateFormatBeanDefinitionParser extends AbstractSingleBeanDefinitionParser {\n\n    protected Class getBeanClass(Element element) {\n        return SimpleDateFormat.class;\n    }\n\n    protected void doParse(Element element, BeanDefinitionBuilder bean) {\n        // this will never be null since the schema explicitly requires that a value be supplied\n        String pattern = element.getAttribute(\"pattern\");\n        bean.addConstructorArg(pattern);\n\n        // this however is an optional property\n        String lenient = element.getAttribute(\"lenient\");\n        if (StringUtils.hasText(lenient)) {\n            bean.addPropertyValue(\"lenient\", Boolean.valueOf(lenient));\n        }\n    }\n\n}\n```\n\n该类继承自spring提供的抽象类`AbstractSingleBeanDefinitionParser`，提供了许多基本的功能，解析标签的方法在`doParse`中，spring会传入一个标签元素`Element`和`BeanDefinitionBuilder`的上下文。\n\n### 4. Registering the handler and the schema\n```\n└─META-INF\n        spring.handlers\n        spring.schemas\n```\n`spring.handlers`中的内容如下：\n\n```xml\nhttp\\://www.mycompany.com/schema/myns=org.springframework.samples.xml.MyNamespaceHandler\n```\n`spring.schemas`中内容如下：\n\n```xml\nhttp\\://www.mycompany.com/schema/myns/myns.xsd=org/springframework/samples/xml/myns.xsd\n```\n\nspring在加载这个jar包的时候会自动的从这些文件中解析到我们的配置，当解析到相应的标签的时候就会交给我们定义的解析类来处理。\n```xml\n<myns:dateformat id=\"dateFormat\"\npattern=\"yyyy-MM-dd HH:mm\"\nlenient=\"true\"/>\n```\n\n## Custom attributes on 'normal' elements\n\n除了自定义标签外，还可以为已有标签装饰一个新的属性\n\n```xml\n<bean id=\"checkingAccountService\" class=\"com.foo.DefaultCheckingAccountService\"\n        jcache:cache-name=\"checking.account\">\n    <!-- other dependencies here... -->\n</bean>\n```\nspring可以让我们单独处理这个`jcache:cache-name`这个属性。\n\n### 定义schema\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n\n<xsd:schema xmlns=\"http://www.foo.com/schema/jcache\"\n        xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n        targetNamespace=\"http://www.foo.com/schema/jcache\"\n        elementFormDefault=\"qualified\">\n\n    <xsd:attribute name=\"cache-name\" type=\"xsd:string\"/>\n\n</xsd:schema>\n```\n\n### NamespaceHandler\n\n```java\npublic class JCacheNamespaceHandler extends NamespaceHandlerSupport {\n\n    public void init() {\n        super.registerBeanDefinitionDecoratorForAttribute(\"cache-name\",\n            new JCacheInitializingBeanDefinitionDecorator());\n    }\n\n}\n```\n\n实际的调用行为已经被抽象到`NamespaceHandlerSupport`中\n\n```java\n/**\n * Decorates the supplied {@link Node} by delegating to the {@link BeanDefinitionDecorator} that\n * is registered to handle that {@link Node}.\n */\n@Override\npublic BeanDefinitionHolder decorate(\n    Node node, BeanDefinitionHolder definition, ParserContext parserContext) {\n\n  return findDecoratorForNode(node, parserContext).decorate(node, definition, parserContext);\n}\n```\n\n### BeanDefinitionDecorator\n\n```java\npublic class JCacheInitializingBeanDefinitionDecorator implements BeanDefinitionDecorator {\n\n    private static final String[] EMPTY_STRING_ARRAY = new String[0];\n\n    public BeanDefinitionHolder decorate(Node source, BeanDefinitionHolder holder,\n            ParserContext ctx) {\n        String initializerBeanName = registerJCacheInitializer(source, ctx);\n        createDependencyOnJCacheInitializer(holder, initializerBeanName);\n        return holder;\n    }\n\n    private void createDependencyOnJCacheInitializer(BeanDefinitionHolder holder,\n            String initializerBeanName) {\n        AbstractBeanDefinition definition = ((AbstractBeanDefinition) holder.getBeanDefinition());\n        String[] dependsOn = definition.getDependsOn();\n        if (dependsOn == null) {\n            dependsOn = new String[]{initializerBeanName};\n        } else {\n            List dependencies = new ArrayList(Arrays.asList(dependsOn));\n            dependencies.add(initializerBeanName);\n            dependsOn = (String[]) dependencies.toArray(EMPTY_STRING_ARRAY);\n        }\n        definition.setDependsOn(dependsOn);\n    }\n\n    private String registerJCacheInitializer(Node source, ParserContext ctx) {\n        String cacheName = ((Attr) source).getValue();\n        String beanName = cacheName + \"-initializer\";\n        if (!ctx.getRegistry().containsBeanDefinition(beanName)) {\n            BeanDefinitionBuilder initializer = BeanDefinitionBuilder.rootBeanDefinition(JCacheInitializer.class);\n            initializer.addConstructorArg(cacheName);\n            ctx.getRegistry().registerBeanDefinition(beanName, initializer.getBeanDefinition());\n        }\n        return beanName;\n    }\n\n}\n\n```\n\n### META-INF\n```xml\n# in 'META-INF/spring.handlers'\nhttp\\://www.foo.com/schema/jcache=com.foo.JCacheNamespaceHandler\n# in 'META-INF/spring.schemas'\nhttp\\://www.foo.com/schema/jcache/jcache.xsd=com/foo/jcache.xsd\n\n```\n\n## 参考\n\n1. [spring-framework-reference](http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/)\n","slug":"custom-tag","published":1,"updated":"2016-12-18T05:09:43.901Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db67003890pyglnei9ym"},{"title":"Unicode历史","date":"2016-09-26T08:56:08.000Z","_content":"# 字符编码\n\n>字符编码（英语：Character encoding）、字集码是把字符集中的字符编码为指定集合中某一对象（例如：比特模式、自然数序列、8位组或者电脉冲），以便文本在计算机中存储和通过通信网络的传递。\n\n简单的说，就是计算机只认`0`和`1`，于是在数据取出来的时候根据一个类似字典的东西，按照一定的规则将比特信息转换成对应的字符信息，这样人们才可以理解到底存储了什么。\n## ASCII编码\n\n`ASCII`（American Standard Code for Information Interchange） 编码是基于拉丁字母的一套编码系统。\n\n`ASCII`使用指定的`7` 位或`8` 位二进制数组合来表示`128` 或`256` 种可能的字符。\n\n> ASCII的局限在于只能显示26个基本拉丁字母、阿拉伯数目字和英式标点符号，因此只能用于显示现代美国英语（而且在处理英语当中的外来词如naïve、café、élite等等时，所有重音符号都不得不去掉，即使这样做会违反拼写规则）。而EASCII虽然解决了部分西欧语言的显示问题，但对更多其他语言依然无能为力。因此现在的软件系统大多采用Unicode。\n\n后续有其扩展版本`EASCII`。这个扩展的版本虽然扩充了一些字符，增大了EASCII的表达能力，但是仍不能满足全球各个国家的需求。于是各个国家就自己搞了一套编码的规则，但是随着web的发展，越来越需要一套统一的编解码标准，于是Unicode应运而出。\n\n## Unicode编码\n\n![](Unicode_logo.jpg)\n\n>Unicode provides a unique number for every character,\n\n> no matter what the platform,\n\n> no matter what the program,\n\n> no matter what the language.\n\n定义：\n\n>Unicode（中文：万国码、国际码、统一码、单一码）是计算机科学领域里的一项业界标准。它对世界上大部分的文字系统进行了整理、编码，使得电脑可以用更为简单的方式来呈现和处理文字。\n\n>In Unicode, a character is de\u001cned as the smallest component of a written language that has semantic value.\nThe number assigned to a character is called a **code point**. A code point is denoted by \u0010U+\u0011 following by a\nhexadecimal number from 4 to 8 digits long. Most of the code points in use are 4 digits long. For example,\n`U+03C6` is the code point for the Greek character f.\n\n![](unicode-layout.jpg)\n\n>在文字处理方面，统一码为每一个字符而非字形定义唯一的代码（即一个整数）。换句话说，统一码以一种抽象的方式（即数字）来处理字符，并将视觉上的演绎工作（例如字体大小、外观形状、字体形态、文体等）留给其他软件来处理，例如网页浏览器或是文字处理器。\n\n### Java中判断是否是中文字符\n\n>Java判断一个字符串是否有中文一般情况是利用Unicode编码(CJK统一汉字的编码区间：0x4e00–0x9fbb)的正则来做判断，但是其实这个区间来判断中文不是非常精确，因为有些中文的标点符号比如：，。等等是不能识别的。\n\n具体的参见参考中的`Java 完美判断中文字符`\n\n\n### 遗留的问题\n\n>需要注意的是，Unicode只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。\n\n存储中存在的问题：\n\n1. 如何区分Unicode和ASCII码？\n\n2. 如何存储能节省空间？\n\n\n>它们造成的结果是：\n\n>1）出现了Unicode的多种存储方式，也就是说有许多种不同的二进制格式，可以用来表示Unicode。\n\n>2）Unicode在很长一段时间内无法推广，直到互联网的出现。\n\n### CJK\n\n>Q: What does the term \"CJK\" mean?\n\n>A: It is a commonly used acronym for \"Chinese, Japanese, and Korean\". The term \"CJK character\" generally refers to \"Chinese characters\", or more specifically, the Chinese (= Han) ideographs used in the writing systems of the Chinese and Japanese languages, occasionally for Korean, and historically in Vietnam.\n\n### UTF-8编码\n\n>互联网的普及，强烈要求出现一种统一的编码方式。**UTF-8就是在互联网上使用最广的一种Unicode的实现方式。**其他实现方式还包括UTF-16（字符用两个字节或四个字节表示）和UTF-32（字符用四个字节表示），不过在互联网上基本不用。重复一遍，这里的关系是，UTF-8是Unicode的实现方式之一。\n\n#### 8的含义\n> unicode在很长一段时间内无法推广，直到互联网的出现，为解决unicode如何在网络上传输的问题，于是面向传输的众多 **UTF（UCS Transfer Format）标准出现了，顾名思义，UTF-8就是每次8个位传输数据，而UTF-16就是每次16个位。**UTF-8就是在互联网上使用最广的一种unicode的实现方式，这是为传输而设计的编码，并使编码无国界，这样就可以显示全世界上所有文化的字符了。\n\n#### UTF-8和Unicode\n\n> UTF-8最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度，当字符在ASCII 码的范围时，就用一个字节表示，保留了ASCII字符一个字节的编码做为它的一部分，注意的是unicode一个中文字符占2个字节，而UTF-8一个中 文字符占3个字节）。从unicode到uft-8并不是直接的对应，而是要过一些算法和规则来转换。\n\n### 编码方式\n\n>UTF-8的编码规则很简单，只有二条：\n\n>1）对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。\n\n>2）对于n字节的符号（n>1），**第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10**。剩下的没有提及的二进制位，全部为这个符号的unicode码。\n\n所以如果第一个字节是`0`开头的，那么就是兼容ASCII码的单字节字符；如果第一个字节是`1`开头的就是多字节字符，数一数前面有多少个`1`，就知道这个字符占了几个字节。\n\n所以UTF-8编码后的二进制形式应该如下：\n\n```\n0xxxxxxx 1个byte\n\n110xxxxx 10xxxxxx 2个byte\n\n1110xxxx 10xxxxxx 10xxxxxx 3个byte\n\n11110xxx 10xxxxxx 10xxxxxx 10xxxxxx 4个byte\n\n111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 5个byte\n\n111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 6个byte\n```\n\n> The bytes `0xFE(11111110)` and `0xFF(11111111)` are never used in the UTF-8 encoding.\n\n这两个特殊的字节被用来标示是大端编码和小端编码\n\n\nUTF-8编码的范围和Unicode对应的关系如下：\n\n|总比特数 |Code Point占的位数  |范围|\n|---|----|---|\n| 1 | 7  | 00000000 - 0000007F |\n| 2 | 11 | 00000080 - 000007FF |\n| 3 | 16 | 00000800 - 0000FFFF |\n| 4 | 21 | 00001000 - 001FFFFF |\n| 5 | 26 | 00200000 - 03FFFFFF |\n| 6 | 31 | 04000000 - FFFFFFFF |\n\n编码示例：\n\n`U+05E7 ` 使用`UTF-8`编码示例:\n\n1. 查上表得知， `05E7`在 `0080 - 07FF` 范围内，总共占2个字节\n应该是类似 `110xxxxx 10xxxxxx `\n\n2. 将其写成二进制形式，`0000 0101 1110 0111`\n\n3. 将数据替换上述的`x`，得到 `11010111 10100111 = 0xD7A7`\n\n#### 字节序\n\nUTF-8最多使用6个byte表示一个字符，于是就存在一个字节序的问题。\n字节序分为两种：\n\n1. **Little-Endian**:\n 字节序低位在前  小尾 在操作系统上很常用，也是计算机系统上最常用的字节序\n2. **Big-Endian**: 字节序高位在前 大尾  也称为网络字节序\n\n```\n16进制数字0x12345678，little-endian的存储为:  0x78 0x56 0x34 0x12     地址依次为100, 101, 102, 103\n\n16进制数字0x12345678，big-endian的存储为:     0x12 0x34 0x56 0x78       地址依次为100, 101, 102, 103\n```\n>\"endian\"这个词出自《格列佛游记》。小人国的内战就源于吃鸡蛋时是究竟从大头(Big-Endian)敲开还是从小头(Little-Endian)敲开，由此曾发生过六次叛乱，其中一个皇帝送了命，另一个丢了王位。\n\n#### 字节序用途\n>Little-Endian最常用，大部分用户的操作系统（如windows, FreeBsd,Linux）是Little Endian的。\n\n>Big-Endian最常用在网络协议上，例如TCP/IP协议使用的是big endian. 操作系统上如MAC OS ,是Big Endian 的。\n本质上说，Little Endian还是Big Endian与操作系统和芯片类型都有关系。PowerPC系列采用big endian方式存储数据，x86系列则采用little endian方式存储数据。\n\n```\nBig Endian\n   低地址                                           高地址\n   ----------------------------------------->\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |     12     |      34    |     56      |     78    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nLittle Endian\n   低地址                                           高地址\n   ----------------------------------------->\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |     78     |      56    |     34      |     12    |\n```\n\n> Unicode规范中定义，每一个文件的最前面分别加入一个表示编码顺序的字符，这个字符的名字叫做\"零宽度非换行空格\"（ZERO WIDTH NO-BREAK SPACE），用FEFF表示。这正好是两个字节，而且FF比FE大1。\n如果一个文本文件的头两个字节是FE FF，就表示该文件采用大头方式；如果头两个字节是FF FE，就表示该文件采用小头方式。\n\n## emoji\n\n![](emoji.jpg)\n\nemoji表情采用的是 Unicode编码，Emoji就是一种在Unicode位于`\\u1F601-\\u1F64F`区段的字符。这个显然超过了目前常用的UTF-8字符集的编码范围`\\u0000-\\uFFFF`。\n\n使用utf8mb4编码便可以解决上述的问题\n\n## 宽字符\n\n宽字符（Wide character） 是程序设计的术语。它是一个抽象的术语（没有规定具体实现细节），用以表示比8位字符还宽的数据类型。它不同于Unicode。\n\nwchar_t在ANSI/ISO C中是一个数据类型，且某些其它的编程语言也用它来表示宽字符。\n\n## 参考文章\n\n1. [字符编码](https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81)\n\n2. [Unicode_and_Character_Sets.md](https://github.com/acmerfight/insight_python/blob/master/Unicode_and_Character_Sets.md)\n\n3. [Unicode and UTF-8](http://www.compsci.hunter.cuny.edu/~sweiss/resources/Unicode.pdf)\n\n4. [Java 完美判断中文字符](http://www.micmiu.com/lang/java/java-check-chinese/)\n\n5. [Full Emoji Data, v3.0](http://unicode.org/emoji/charts/full-emoji-list.html)\n\n6. [微信emoji表情编码](http://www.tuicool.com/articles/aQBVny)\n\n7. [关于Big Endian 和 Little Endian](http://blog.csdn.net/sunshine1314/article/details/2309655)\n\n8. [字符编码笔记：ASCII，Unicode和UTF-8](http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html)\n","source":"_posts/character-encoding.md","raw":"title: Unicode历史\ndate: 2016-09-26 16:56:08\ntags: 编码\ncategory: base\n---\n# 字符编码\n\n>字符编码（英语：Character encoding）、字集码是把字符集中的字符编码为指定集合中某一对象（例如：比特模式、自然数序列、8位组或者电脉冲），以便文本在计算机中存储和通过通信网络的传递。\n\n简单的说，就是计算机只认`0`和`1`，于是在数据取出来的时候根据一个类似字典的东西，按照一定的规则将比特信息转换成对应的字符信息，这样人们才可以理解到底存储了什么。\n## ASCII编码\n\n`ASCII`（American Standard Code for Information Interchange） 编码是基于拉丁字母的一套编码系统。\n\n`ASCII`使用指定的`7` 位或`8` 位二进制数组合来表示`128` 或`256` 种可能的字符。\n\n> ASCII的局限在于只能显示26个基本拉丁字母、阿拉伯数目字和英式标点符号，因此只能用于显示现代美国英语（而且在处理英语当中的外来词如naïve、café、élite等等时，所有重音符号都不得不去掉，即使这样做会违反拼写规则）。而EASCII虽然解决了部分西欧语言的显示问题，但对更多其他语言依然无能为力。因此现在的软件系统大多采用Unicode。\n\n后续有其扩展版本`EASCII`。这个扩展的版本虽然扩充了一些字符，增大了EASCII的表达能力，但是仍不能满足全球各个国家的需求。于是各个国家就自己搞了一套编码的规则，但是随着web的发展，越来越需要一套统一的编解码标准，于是Unicode应运而出。\n\n## Unicode编码\n\n![](Unicode_logo.jpg)\n\n>Unicode provides a unique number for every character,\n\n> no matter what the platform,\n\n> no matter what the program,\n\n> no matter what the language.\n\n定义：\n\n>Unicode（中文：万国码、国际码、统一码、单一码）是计算机科学领域里的一项业界标准。它对世界上大部分的文字系统进行了整理、编码，使得电脑可以用更为简单的方式来呈现和处理文字。\n\n>In Unicode, a character is de\u001cned as the smallest component of a written language that has semantic value.\nThe number assigned to a character is called a **code point**. A code point is denoted by \u0010U+\u0011 following by a\nhexadecimal number from 4 to 8 digits long. Most of the code points in use are 4 digits long. For example,\n`U+03C6` is the code point for the Greek character f.\n\n![](unicode-layout.jpg)\n\n>在文字处理方面，统一码为每一个字符而非字形定义唯一的代码（即一个整数）。换句话说，统一码以一种抽象的方式（即数字）来处理字符，并将视觉上的演绎工作（例如字体大小、外观形状、字体形态、文体等）留给其他软件来处理，例如网页浏览器或是文字处理器。\n\n### Java中判断是否是中文字符\n\n>Java判断一个字符串是否有中文一般情况是利用Unicode编码(CJK统一汉字的编码区间：0x4e00–0x9fbb)的正则来做判断，但是其实这个区间来判断中文不是非常精确，因为有些中文的标点符号比如：，。等等是不能识别的。\n\n具体的参见参考中的`Java 完美判断中文字符`\n\n\n### 遗留的问题\n\n>需要注意的是，Unicode只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。\n\n存储中存在的问题：\n\n1. 如何区分Unicode和ASCII码？\n\n2. 如何存储能节省空间？\n\n\n>它们造成的结果是：\n\n>1）出现了Unicode的多种存储方式，也就是说有许多种不同的二进制格式，可以用来表示Unicode。\n\n>2）Unicode在很长一段时间内无法推广，直到互联网的出现。\n\n### CJK\n\n>Q: What does the term \"CJK\" mean?\n\n>A: It is a commonly used acronym for \"Chinese, Japanese, and Korean\". The term \"CJK character\" generally refers to \"Chinese characters\", or more specifically, the Chinese (= Han) ideographs used in the writing systems of the Chinese and Japanese languages, occasionally for Korean, and historically in Vietnam.\n\n### UTF-8编码\n\n>互联网的普及，强烈要求出现一种统一的编码方式。**UTF-8就是在互联网上使用最广的一种Unicode的实现方式。**其他实现方式还包括UTF-16（字符用两个字节或四个字节表示）和UTF-32（字符用四个字节表示），不过在互联网上基本不用。重复一遍，这里的关系是，UTF-8是Unicode的实现方式之一。\n\n#### 8的含义\n> unicode在很长一段时间内无法推广，直到互联网的出现，为解决unicode如何在网络上传输的问题，于是面向传输的众多 **UTF（UCS Transfer Format）标准出现了，顾名思义，UTF-8就是每次8个位传输数据，而UTF-16就是每次16个位。**UTF-8就是在互联网上使用最广的一种unicode的实现方式，这是为传输而设计的编码，并使编码无国界，这样就可以显示全世界上所有文化的字符了。\n\n#### UTF-8和Unicode\n\n> UTF-8最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度，当字符在ASCII 码的范围时，就用一个字节表示，保留了ASCII字符一个字节的编码做为它的一部分，注意的是unicode一个中文字符占2个字节，而UTF-8一个中 文字符占3个字节）。从unicode到uft-8并不是直接的对应，而是要过一些算法和规则来转换。\n\n### 编码方式\n\n>UTF-8的编码规则很简单，只有二条：\n\n>1）对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。\n\n>2）对于n字节的符号（n>1），**第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10**。剩下的没有提及的二进制位，全部为这个符号的unicode码。\n\n所以如果第一个字节是`0`开头的，那么就是兼容ASCII码的单字节字符；如果第一个字节是`1`开头的就是多字节字符，数一数前面有多少个`1`，就知道这个字符占了几个字节。\n\n所以UTF-8编码后的二进制形式应该如下：\n\n```\n0xxxxxxx 1个byte\n\n110xxxxx 10xxxxxx 2个byte\n\n1110xxxx 10xxxxxx 10xxxxxx 3个byte\n\n11110xxx 10xxxxxx 10xxxxxx 10xxxxxx 4个byte\n\n111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 5个byte\n\n111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 6个byte\n```\n\n> The bytes `0xFE(11111110)` and `0xFF(11111111)` are never used in the UTF-8 encoding.\n\n这两个特殊的字节被用来标示是大端编码和小端编码\n\n\nUTF-8编码的范围和Unicode对应的关系如下：\n\n|总比特数 |Code Point占的位数  |范围|\n|---|----|---|\n| 1 | 7  | 00000000 - 0000007F |\n| 2 | 11 | 00000080 - 000007FF |\n| 3 | 16 | 00000800 - 0000FFFF |\n| 4 | 21 | 00001000 - 001FFFFF |\n| 5 | 26 | 00200000 - 03FFFFFF |\n| 6 | 31 | 04000000 - FFFFFFFF |\n\n编码示例：\n\n`U+05E7 ` 使用`UTF-8`编码示例:\n\n1. 查上表得知， `05E7`在 `0080 - 07FF` 范围内，总共占2个字节\n应该是类似 `110xxxxx 10xxxxxx `\n\n2. 将其写成二进制形式，`0000 0101 1110 0111`\n\n3. 将数据替换上述的`x`，得到 `11010111 10100111 = 0xD7A7`\n\n#### 字节序\n\nUTF-8最多使用6个byte表示一个字符，于是就存在一个字节序的问题。\n字节序分为两种：\n\n1. **Little-Endian**:\n 字节序低位在前  小尾 在操作系统上很常用，也是计算机系统上最常用的字节序\n2. **Big-Endian**: 字节序高位在前 大尾  也称为网络字节序\n\n```\n16进制数字0x12345678，little-endian的存储为:  0x78 0x56 0x34 0x12     地址依次为100, 101, 102, 103\n\n16进制数字0x12345678，big-endian的存储为:     0x12 0x34 0x56 0x78       地址依次为100, 101, 102, 103\n```\n>\"endian\"这个词出自《格列佛游记》。小人国的内战就源于吃鸡蛋时是究竟从大头(Big-Endian)敲开还是从小头(Little-Endian)敲开，由此曾发生过六次叛乱，其中一个皇帝送了命，另一个丢了王位。\n\n#### 字节序用途\n>Little-Endian最常用，大部分用户的操作系统（如windows, FreeBsd,Linux）是Little Endian的。\n\n>Big-Endian最常用在网络协议上，例如TCP/IP协议使用的是big endian. 操作系统上如MAC OS ,是Big Endian 的。\n本质上说，Little Endian还是Big Endian与操作系统和芯片类型都有关系。PowerPC系列采用big endian方式存储数据，x86系列则采用little endian方式存储数据。\n\n```\nBig Endian\n   低地址                                           高地址\n   ----------------------------------------->\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |     12     |      34    |     56      |     78    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nLittle Endian\n   低地址                                           高地址\n   ----------------------------------------->\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |     78     |      56    |     34      |     12    |\n```\n\n> Unicode规范中定义，每一个文件的最前面分别加入一个表示编码顺序的字符，这个字符的名字叫做\"零宽度非换行空格\"（ZERO WIDTH NO-BREAK SPACE），用FEFF表示。这正好是两个字节，而且FF比FE大1。\n如果一个文本文件的头两个字节是FE FF，就表示该文件采用大头方式；如果头两个字节是FF FE，就表示该文件采用小头方式。\n\n## emoji\n\n![](emoji.jpg)\n\nemoji表情采用的是 Unicode编码，Emoji就是一种在Unicode位于`\\u1F601-\\u1F64F`区段的字符。这个显然超过了目前常用的UTF-8字符集的编码范围`\\u0000-\\uFFFF`。\n\n使用utf8mb4编码便可以解决上述的问题\n\n## 宽字符\n\n宽字符（Wide character） 是程序设计的术语。它是一个抽象的术语（没有规定具体实现细节），用以表示比8位字符还宽的数据类型。它不同于Unicode。\n\nwchar_t在ANSI/ISO C中是一个数据类型，且某些其它的编程语言也用它来表示宽字符。\n\n## 参考文章\n\n1. [字符编码](https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81)\n\n2. [Unicode_and_Character_Sets.md](https://github.com/acmerfight/insight_python/blob/master/Unicode_and_Character_Sets.md)\n\n3. [Unicode and UTF-8](http://www.compsci.hunter.cuny.edu/~sweiss/resources/Unicode.pdf)\n\n4. [Java 完美判断中文字符](http://www.micmiu.com/lang/java/java-check-chinese/)\n\n5. [Full Emoji Data, v3.0](http://unicode.org/emoji/charts/full-emoji-list.html)\n\n6. [微信emoji表情编码](http://www.tuicool.com/articles/aQBVny)\n\n7. [关于Big Endian 和 Little Endian](http://blog.csdn.net/sunshine1314/article/details/2309655)\n\n8. [字符编码笔记：ASCII，Unicode和UTF-8](http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html)\n","slug":"character-encoding","published":1,"updated":"2016-12-18T05:21:42.639Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db6a003c90pyx6qr66ve"},{"title":"Base64编码原理","date":"2016-09-26T06:37:33.000Z","_content":"\n## 是什么？\n\n> Base64 is a group of similar binary-to-text encoding schemes that represent binary data in an ASCII string format by translating it into a radix-64 representation. The term Base64 originates from a specific MIME content transfer encoding\n来自 [wikipedia](https://en.wikipedia.org/wiki/Base64)\n\n说白了就是将二进制的数据转换成字符编码。Base64由大小写字母各26个，`0-9`的10个数字，加号`+`\n以及斜杠`/`，一共64个字符组成，另外还用`=`来用作后缀，总共涉及的字符达到65个。\n\n> a）所有的二进制文件，都可以因此转化为可打印的文本编码，使用文本软件进行编辑；\n\n> b）能够对文本进行简单的加密。\n\n> 来自 [Base64笔记-阮一峰](http://www.ruanyifeng.com/blog/2008/06/base64.html)\n\n## 原理\n![](encoding.jpg)\n\n>转换的时候，将三个byte的数据，先后放入一个24bit的缓冲区中，先来的byte占高位。数据不足3byte的话，于缓冲器中剩下的bit用0补足。然后，每次取出6（因为26=64）个bit，按照其值选择ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/中的字符作为编码后的输出。不断进行，直到全部输入数据转换完成。\n\n> <https://zh.wikipedia.org/wiki/Base64>\n\n如果要编码的字节数不能被3整除:\n\n  1. 先使用0字节值在末尾补足，使其能够被3整除\n  2. 进行base64的编码\n  3. 在编码后的base64文本后加上一个或两个'='号，代表补足的字节数\n\n  ![](encoding2.jpg)\n\n  Base64字符串只可能最后出现一个或两个\"=\"，中间是不可能出现\"=\"的\n\n## 用途\n\n>Base64 主要不是加密，它主要的用途是把一些二进制数转成普通字符用于网络传输。由于一些二进制字符在传输协议中属于控制字符，不能直接传送需要转换一下。Base64编码就是把二进制字节序列转化为ASCII字符序列。一般增加1/3长度，而且也是不可读的。\n\n>[BASE64编码原理及应用](http://nieyong.github.io/wiki_web/BASE64%E7%BC%96%E7%A0%81%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8.html)\n\n>Base64常用于在通常处理文本数据的场合，表示、传输、存储一些二进制数据。包括MIME的email、在XML中存储复杂数据。\n\n> <https://zh.wikipedia.org/wiki/Base64>\n\n## python中简单使用\n\n``` python\n>>> import base64\n>>> encoded = base64.b64encode('hello world')\n>>> print encoded\naGVsbG8gd29ybGQ=\n>>> data = base64.b64decode(encoded)\n>>> print data\nhello world\n```\n\n[base64 — RFC 3548: Base16, Base32, Base64 Data Encodings](https://docs.python.org/2/library/base64.html)\n\n## 参考链接\n\n1. [Base64笔记_阮一峰](http://www.ruanyifeng.com/blog/2008/06/base64.html)\n\n2. [Base64_wiki](https://en.wikipedia.org/wiki/Base64)\n\n3. [BASE64编码原理及应用](http://nieyong.github.io/wiki_web/BASE64%E7%BC%96%E7%A0%81%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8.html)\n\n4. [Base64加密](https://github.com/CharonChui/AndroidNote/blob/master/Java%E5%9F%BA%E7%A1%80/Base64%E5%8A%A0%E5%AF%86.md)\n","source":"_posts/base64.md","raw":"title: Base64编码原理\ndate: 2016-09-26 14:37:33\ntags: 编码\ncategory: base\n---\n\n## 是什么？\n\n> Base64 is a group of similar binary-to-text encoding schemes that represent binary data in an ASCII string format by translating it into a radix-64 representation. The term Base64 originates from a specific MIME content transfer encoding\n来自 [wikipedia](https://en.wikipedia.org/wiki/Base64)\n\n说白了就是将二进制的数据转换成字符编码。Base64由大小写字母各26个，`0-9`的10个数字，加号`+`\n以及斜杠`/`，一共64个字符组成，另外还用`=`来用作后缀，总共涉及的字符达到65个。\n\n> a）所有的二进制文件，都可以因此转化为可打印的文本编码，使用文本软件进行编辑；\n\n> b）能够对文本进行简单的加密。\n\n> 来自 [Base64笔记-阮一峰](http://www.ruanyifeng.com/blog/2008/06/base64.html)\n\n## 原理\n![](encoding.jpg)\n\n>转换的时候，将三个byte的数据，先后放入一个24bit的缓冲区中，先来的byte占高位。数据不足3byte的话，于缓冲器中剩下的bit用0补足。然后，每次取出6（因为26=64）个bit，按照其值选择ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/中的字符作为编码后的输出。不断进行，直到全部输入数据转换完成。\n\n> <https://zh.wikipedia.org/wiki/Base64>\n\n如果要编码的字节数不能被3整除:\n\n  1. 先使用0字节值在末尾补足，使其能够被3整除\n  2. 进行base64的编码\n  3. 在编码后的base64文本后加上一个或两个'='号，代表补足的字节数\n\n  ![](encoding2.jpg)\n\n  Base64字符串只可能最后出现一个或两个\"=\"，中间是不可能出现\"=\"的\n\n## 用途\n\n>Base64 主要不是加密，它主要的用途是把一些二进制数转成普通字符用于网络传输。由于一些二进制字符在传输协议中属于控制字符，不能直接传送需要转换一下。Base64编码就是把二进制字节序列转化为ASCII字符序列。一般增加1/3长度，而且也是不可读的。\n\n>[BASE64编码原理及应用](http://nieyong.github.io/wiki_web/BASE64%E7%BC%96%E7%A0%81%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8.html)\n\n>Base64常用于在通常处理文本数据的场合，表示、传输、存储一些二进制数据。包括MIME的email、在XML中存储复杂数据。\n\n> <https://zh.wikipedia.org/wiki/Base64>\n\n## python中简单使用\n\n``` python\n>>> import base64\n>>> encoded = base64.b64encode('hello world')\n>>> print encoded\naGVsbG8gd29ybGQ=\n>>> data = base64.b64decode(encoded)\n>>> print data\nhello world\n```\n\n[base64 — RFC 3548: Base16, Base32, Base64 Data Encodings](https://docs.python.org/2/library/base64.html)\n\n## 参考链接\n\n1. [Base64笔记_阮一峰](http://www.ruanyifeng.com/blog/2008/06/base64.html)\n\n2. [Base64_wiki](https://en.wikipedia.org/wiki/Base64)\n\n3. [BASE64编码原理及应用](http://nieyong.github.io/wiki_web/BASE64%E7%BC%96%E7%A0%81%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8.html)\n\n4. [Base64加密](https://github.com/CharonChui/AndroidNote/blob/master/Java%E5%9F%BA%E7%A1%80/Base64%E5%8A%A0%E5%AF%86.md)\n","slug":"base64","published":1,"updated":"2016-12-18T05:10:36.122Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db6m003g90pyusawok93"},{"title":"atnode——在集群上批量执行命令","date":"2016-12-12T16:07:02.000Z","_content":"\n\n## atnodes\n\natnode是一个用perl写成的工具，它可以方便的在集群上执行命令\n\n[官网链接](http://search.cpan.org/~agent/SSH-Batch-0.029/bin/atnodes)\n\n\n```bash\natnodes \"echo alias grep=\\'grep -n --color\\' >> ~/.bashrc \"  xxx.xx[1-10].com  yyy.yy[1-10].com\n```\n\n上述的命令就会在后面两个列表的主机上都执行一遍了。\n\n\n## tonodes\n\n与atnodes类似，tonodes 可以将文件传输到集群上的没一个文件\n\n## 其他\n\nfornodes: Expand patterns to machine host list\n\nkey2nodes: Push SSH public keys to remote clusters \n\n## 作者博客\n\n[agentzh的微博](http://weibo.com/u/1834459124?topnav=1&wvr=6&topsug=1&is_all=1)","source":"_posts/atnode.md","raw":"title: atnode——在集群上批量执行命令\ntags: shell\ncategory: linux\ndate: 2016-12-13 00:07:02\n---\n\n\n## atnodes\n\natnode是一个用perl写成的工具，它可以方便的在集群上执行命令\n\n[官网链接](http://search.cpan.org/~agent/SSH-Batch-0.029/bin/atnodes)\n\n\n```bash\natnodes \"echo alias grep=\\'grep -n --color\\' >> ~/.bashrc \"  xxx.xx[1-10].com  yyy.yy[1-10].com\n```\n\n上述的命令就会在后面两个列表的主机上都执行一遍了。\n\n\n## tonodes\n\n与atnodes类似，tonodes 可以将文件传输到集群上的没一个文件\n\n## 其他\n\nfornodes: Expand patterns to machine host list\n\nkey2nodes: Push SSH public keys to remote clusters \n\n## 作者博客\n\n[agentzh的微博](http://weibo.com/u/1834459124?topnav=1&wvr=6&topsug=1&is_all=1)","slug":"atnode","published":1,"updated":"2016-12-18T05:10:03.774Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db6s003j90py1bax3vzj"},{"title":"HttpMessageConverter 原理和源码","date":"2016-11-28T18:48:45.000Z","_content":"\n## 架构\n![](arch.jpg)\n\n## HttpMessageConverter接口\n\n![](http-message-converter.jpg)\n\n>`HttpMessageConverter` used to\nmarshal objects into the HTTP request body and to unmarshal any response back into an object.\n\n提供将Java中的对象和http请求、响应相互转换的功能\n\n### spring 中的配置\n\nxml配置示例：\n\n```xml\n<mvc:annotation-driven conversion-service=\"conversionService\">\n    <mvc:message-converters>\n        <bean class=\"org.springframework.http.converter.StringHttpMessageConverter\"/>\n        <bean class=\"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter\">\n            <property name=\"objectMapper\" ref=\"jsonObjectMapper\"/>\n        </bean>\n    </mvc:message-converters>\n</mvc:annotation-driven>\n```\n\njava配置示例：\n\n```java\n@Configuration\npublic class WebConfig extends DelegatingWebMvcConfiguration {\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry){\n    // ...\n    }\n\n    @Override\n    @Bean\n    public RequestMappingHandlerAdapter requestMappingHandlerAdapter() {\n    // Create or let \"super\" create the adapter\n    // Then customize one of its properties\n    }\n}\n```\n\n### 接口描述\n```java\npackage org.springframework.http.converter;\n\nimport java.io.IOException;\nimport java.util.List;\n\nimport org.springframework.http.HttpInputMessage;\nimport org.springframework.http.HttpOutputMessage;\nimport org.springframework.http.MediaType;\n\n/**\n * Strategy interface that specifies a converter that can convert from and to HTTP requests and responses.\n *\n * @author Arjen Poutsma\n * @author Juergen Hoeller\n * @since 3.0\n */\npublic interface HttpMessageConverter<T> {\n\n\t/**\n\t * Indicates whether the given class can be read by this converter.\n\t * @param clazz the class to test for readability\n\t * @param mediaType the media type to read, can be {@code null} if not specified.\n\t * Typically the value of a {@code Content-Type} header.\n\t * @return {@code true} if readable; {@code false} otherwise\n\t */\n\tboolean canRead(Class<?> clazz, MediaType mediaType);\n\n\t/**\n\t * Indicates whether the given class can be written by this converter.\n\t * @param clazz the class to test for writability\n\t * @param mediaType the media type to write, can be {@code null} if not specified.\n\t * Typically the value of an {@code Accept} header.\n\t * @return {@code true} if writable; {@code false} otherwise\n\t */\n\tboolean canWrite(Class<?> clazz, MediaType mediaType);\n\n\t/**\n\t * Return the list of {@link MediaType} objects supported by this converter.\n\t * @return the list of supported media types\n\t */\n\tList<MediaType> getSupportedMediaTypes();\n\n\t/**\n\t * Read an object of the given type form the given input message, and returns it.\n\t * @param clazz the type of object to return. This type must have previously been passed to the\n\t * {@link #canRead canRead} method of this interface, which must have returned {@code true}.\n\t * @param inputMessage the HTTP input message to read from\n\t * @return the converted object\n\t * @throws IOException in case of I/O errors\n\t * @throws HttpMessageNotReadableException in case of conversion errors\n\t */\n\tT read(Class<? extends T> clazz, HttpInputMessage inputMessage)\n\t\t\tthrows IOException, HttpMessageNotReadableException;\n\n\t/**\n\t * Write an given object to the given output message.\n\t * @param t the object to write to the output message. The type of this object must have previously been\n\t * passed to the {@link #canWrite canWrite} method of this interface, which must have returned {@code true}.\n\t * @param contentType the content type to use when writing. May be {@code null} to indicate that the\n\t * default content type of the converter must be used. If not {@code null}, this media type must have\n\t * previously been passed to the {@link #canWrite canWrite} method of this interface, which must have\n\t * returned {@code true}.\n\t * @param outputMessage the message to write to\n\t * @throws IOException in case of I/O errors\n\t * @throws HttpMessageNotWritableException in case of conversion errors\n\t */\n\tvoid write(T t, MediaType contentType, HttpOutputMessage outputMessage)\n\t\t\tthrows IOException, HttpMessageNotWritableException;\n\n}\n\n```\n\n### spring 提供的实现类\n\n![](inherit.jpg)\n\n|名称|\n|---|\n|ByteArrayHttpMessageConverter|\n|FormHttpMessageConverter|\n|XmlAwareFormHttpMessageConverter|\n|ResourceHttpMessageConverter|\n|SourceHttpMessageConverter|\n|StringHttpMessageConverter|\n|SimpleXmlHttpMessageConverter|\n|MappingJackson2HttpMessageConverter|\n|GsonHttpMessageConverter|\n|SyndFeedHttpMessageConverter|\n|RssChannelHttpMessageConverter|\n|AtomFeedHttpMessageConverter|\n\n具体功能见 [RestTemplate Module](http://docs.spring.io/autorepo/docs/spring-android/1.0.x/reference/html/rest-template.html)\n\n想研究源码的可以从最简单的 `StringHttpMessageConverter`看起\n\n## Spring调用过程\n\n在DispatcherServlet初始化的过程会调用一个叫做`initHandlerAdapters`的方法，\n该方法内部会扫描容器中所有的类，以及他们的父类，找到所有实现了`HandlerAdapter`接口的类，\n并将他们注册到`DispatcherServlet`的`HandlerAdapters`中。\n\n\n如果没有扫描到的HandlerAdapter，这个方法会加载一些默认的HandlerAdapter。\n\n> The default implementation uses the \"DispatcherServlet.properties\" file (in the same\n  package as the DispatcherServlet class) to determine the class names. \n\n  ![](DispatcherServlet-properties.jpg)\n\nSpring 4.3.2 中有一个实现了`HandlerAdapter`接口的类会被扫描到，这个类叫做`RequestMappingHandlerAdapter`\n\n### RequestMappingHandlerAdapter\n这个类在构造的时候就加载了许多messageConverter\n\n```java\n    public RequestMappingHandlerAdapter() {\n        StringHttpMessageConverter stringHttpMessageConverter = new StringHttpMessageConverter();\n        stringHttpMessageConverter.setWriteAcceptCharset(false);  // see SPR-7316\n\n        this.messageConverters = new ArrayList<HttpMessageConverter<?>>(4);\n        this.messageConverters.add(new ByteArrayHttpMessageConverter());\n        this.messageConverters.add(stringHttpMessageConverter);\n        this.messageConverters.add(new SourceHttpMessageConverter<Source>());\n        this.messageConverters.add(new AllEncompassingFormHttpMessageConverter());\n    }\n```\n其中`AllEncompassingFormHttpMessageConverter`继承自`FormHttpMessageConverter`， 它有一个变量叫做\n`partConverters`，存储了一系列的`HttpMessageConverter`\n```java\n    private List<HttpMessageConverter<?>> partConverters = new ArrayList<HttpMessageConverter<?>>();\n    public FormHttpMessageConverter() {\n        this.supportedMediaTypes.add(MediaType.APPLICATION_FORM_URLENCODED);\n        this.supportedMediaTypes.add(MediaType.MULTIPART_FORM_DATA);\n        this.partConverters.add(new ByteArrayHttpMessageConverter());\n        StringHttpMessageConverter stringHttpMessageConverter = new StringHttpMessageConverter();\n        stringHttpMessageConverter.setWriteAcceptCharset(false);\n        this.partConverters.add(stringHttpMessageConverter);\n        this.partConverters.add(new ResourceHttpMessageConverter());\n    }\n```\n在`AllEncompassingFormHttpMessageConverter`中又根据classPath中是否包含jackson、Gson等jar包来动态的\n注册了一些`HttpMessageConverter`:\n\n```java\npublic class AllEncompassingFormHttpMessageConverter extends FormHttpMessageConverter {\n\n    private static final boolean jaxb2Present =\n            ClassUtils.isPresent(\"javax.xml.bind.Binder\", AllEncompassingFormHttpMessageConverter.class.getClassLoader());\n\n    private static final boolean jackson2Present =\n            ClassUtils.isPresent(\"com.fasterxml.jackson.databind.ObjectMapper\", AllEncompassingFormHttpMessageConverter.class.getClassLoader()) &&\n                    ClassUtils.isPresent(\"com.fasterxml.jackson.core.JsonGenerator\", AllEncompassingFormHttpMessageConverter.class.getClassLoader());\n\n    private static final boolean jackson2XmlPresent =\n            ClassUtils.isPresent(\"com.fasterxml.jackson.dataformat.xml.XmlMapper\", AllEncompassingFormHttpMessageConverter.class.getClassLoader());\n\n    private static final boolean gsonPresent =\n            ClassUtils.isPresent(\"com.google.gson.Gson\", AllEncompassingFormHttpMessageConverter.class.getClassLoader());\n\n\n    public AllEncompassingFormHttpMessageConverter() {\n        addPartConverter(new SourceHttpMessageConverter<Source>());\n\n        if (jaxb2Present && !jackson2Present) {\n            addPartConverter(new Jaxb2RootElementHttpMessageConverter());\n        }\n\n        if (jackson2Present) {\n            addPartConverter(new MappingJackson2HttpMessageConverter());\n        }\n        else if (gsonPresent) {\n            addPartConverter(new GsonHttpMessageConverter());\n        }\n\n        if (jackson2XmlPresent) {\n            addPartConverter(new MappingJackson2XmlHttpMessageConverter());\n        }\n    }\n\n}\n```\n\n至于这些转换器是怎么使用的，要看`RequestMappingHandlerAdapter`中的`getDefaultArgumentResolver`\n\n```java\n/**\n     * Return the list of argument resolvers to use including built-in resolvers\n     * and custom resolvers provided via {@link #setCustomArgumentResolvers}.\n     */\n    private List<HandlerMethodArgumentResolver> getDefaultArgumentResolvers() {\n        List<HandlerMethodArgumentResolver> resolvers = new ArrayList<HandlerMethodArgumentResolver>();\n\n        // Annotation-based argument resolution\n        resolvers.add(new RequestParamMethodArgumentResolver(getBeanFactory(), false));\n        resolvers.add(new RequestParamMapMethodArgumentResolver());\n        resolvers.add(new PathVariableMethodArgumentResolver());\n        resolvers.add(new PathVariableMapMethodArgumentResolver());\n        resolvers.add(new MatrixVariableMethodArgumentResolver());\n        resolvers.add(new MatrixVariableMapMethodArgumentResolver());\n        resolvers.add(new ServletModelAttributeMethodProcessor(false));\n        resolvers.add(new RequestResponseBodyMethodProcessor(getMessageConverters(), this.requestResponseBodyAdvice));\n        resolvers.add(new RequestPartMethodArgumentResolver(getMessageConverters(), this.requestResponseBodyAdvice));\n        resolvers.add(new RequestHeaderMethodArgumentResolver(getBeanFactory()));\n        resolvers.add(new RequestHeaderMapMethodArgumentResolver());\n        resolvers.add(new ServletCookieValueMethodArgumentResolver(getBeanFactory()));\n        resolvers.add(new ExpressionValueMethodArgumentResolver(getBeanFactory()));\n\n        // Type-based argument resolution\n        resolvers.add(new ServletRequestMethodArgumentResolver());\n        resolvers.add(new ServletResponseMethodArgumentResolver());\n        resolvers.add(new HttpEntityMethodProcessor(getMessageConverters(), this.requestResponseBodyAdvice));\n        resolvers.add(new RedirectAttributesMethodArgumentResolver());\n        resolvers.add(new ModelMethodProcessor());\n        resolvers.add(new MapMethodProcessor());\n        resolvers.add(new ErrorsMethodArgumentResolver());\n        resolvers.add(new SessionStatusMethodArgumentResolver());\n        resolvers.add(new UriComponentsBuilderMethodArgumentResolver());\n\n        // Custom arguments\n        if (getCustomArgumentResolvers() != null) {\n            resolvers.addAll(getCustomArgumentResolvers());\n        }\n\n        // Catch-all\n        resolvers.add(new RequestParamMethodArgumentResolver(getBeanFactory(), true));\n        resolvers.add(new ServletModelAttributeMethodProcessor(true));\n\n        return resolvers;\n    }\n```\n\n可以看到所有的Converter最终作为一个构造参数传入了`RequestResponseBodyMethodProcessor`和`RequestPartMethodArgumentResolver`。 前者其实是负责处理`@RequestBody`和`@ResponseBody`的, \n后者则是处理`@RequestPart`这个注解的。拿`RequestResponseBodyMethodProcessor`为例来看。\n\n这个类的父类实现了`HandlerMethodReturnValueHandler`接口，这个接口的作用对照上面的系统整体架构图\n可知，是处理Controller返回的结果值的，看其`handleReturnValue`方法 。\n\n```java\n    @Override\n    public void handleReturnValue(Object returnValue, MethodParameter returnType,\n            ModelAndViewContainer mavContainer, NativeWebRequest webRequest)\n            throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {\n        mavContainer.setRequestHandled(true);\n        // Try even with null return value. ResponseBodyAdvice could get involved.\n        writeWithMessageConverters(returnValue, returnType, webRequest);\n    }\n```\n首先标记这个请求已经处理过了，然后调用了一个内部方法，从名字就可以看出来，是使用MessageConverter进行\n转换。\n\n```java\n    /**\n     * Writes the given return value to the given web request. Delegates to\n     * {@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)}\n     */\n    protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest)\n            throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {\n\n        ServletServerHttpRequest inputMessage = createInputMessage(webRequest);\n        ServletServerHttpResponse outputMessage = createOutputMessage(webRequest);\n        writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage);\n    }\n\n```\n真正的逻辑还是内部的`writeWithMessageConveters()\n\n```java\n/**\n     * Writes the given return type to the given output message.\n     * @param returnValue the value to write to the output message\n     * @param returnType the type of the value\n     * @param inputMessage the input messages. Used to inspect the {@code Accept} header.\n     * @param outputMessage the output message to write to\n     * @throws IOException thrown in case of I/O errors\n     * @throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on\n     * the request cannot be met by the message converters\n     */\n    @SuppressWarnings(\"unchecked\")\n    protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType,\n            ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)\n            throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {\n\n        Class<?> returnValueClass = getReturnValueType(returnValue, returnType);\n        Type returnValueType = getGenericType(returnType);\n        HttpServletRequest servletRequest = inputMessage.getServletRequest();\n        //从请求头获取可能的返回类型（默认会加载两种策略，比如从路径名的后缀上推断）\n        List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest);\n        //根据请求和返回的值得类型，推断可能的返回值类型\n        List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass, returnValueType);\n\n        if (returnValue != null && producibleMediaTypes.isEmpty()) {\n            throw new IllegalArgumentException(\"No converter found for return value of type: \" + returnValueClass);\n        }\n        \n        //筛选\n        Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>();\n        for (MediaType requestedType : requestedMediaTypes) {\n            for (MediaType producibleType : producibleMediaTypes) {\n                if (requestedType.isCompatibleWith(producibleType)) {\n                    compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType));\n                }\n            }\n        }\n        if (compatibleMediaTypes.isEmpty()) {\n            if (returnValue != null) {\n                throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes);\n            }\n            return;\n        }\n\n        List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes);\n        MediaType.sortBySpecificityAndQuality(mediaTypes);\n\n        MediaType selectedMediaType = null;\n        for (MediaType mediaType : mediaTypes) {\n            if (mediaType.isConcrete()) {//具体的，没有通配符的\n                selectedMediaType = mediaType;\n                break;// 找到一个就跳出循环\n            }\n            else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {\n                selectedMediaType = MediaType.APPLICATION_OCTET_STREAM;\n                break;// 找到一个就跳出循环\n            }\n        }\n\n            //找到能处理这种类型的HttpMessageConverter\n        if (selectedMediaType != null) {\n            selectedMediaType = selectedMediaType.removeQualityValue();\n            for (HttpMessageConverter<?> messageConverter : this.messageConverters) {\n                if (messageConverter instanceof GenericHttpMessageConverter) {\n                    if (((GenericHttpMessageConverter<T>) messageConverter).canWrite(returnValueType,\n                            returnValueClass, selectedMediaType)) {\n                        returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,\n                                (Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),\n                                inputMessage, outputMessage);\n                        if (returnValue != null) {\n                            addContentDispositionHeader(inputMessage, outputMessage);\n                            ((GenericHttpMessageConverter<T>) messageConverter).write(returnValue,\n                                    returnValueType, selectedMediaType, outputMessage);\n                            if (logger.isDebugEnabled()) {\n                                logger.debug(\"Written [\" + returnValue + \"] as \\\"\" +\n                                        selectedMediaType + \"\\\" using [\" + messageConverter + \"]\");\n                            }\n                        }\n                        return;\n                    }\n                }\n                else if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {\n                    returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,\n                            (Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),\n                            inputMessage, outputMessage);\n                    if (returnValue != null) {\n                        addContentDispositionHeader(inputMessage, outputMessage);\n                        ((HttpMessageConverter<T>) messageConverter).write(returnValue,\n                                selectedMediaType, outputMessage);\n                        if (logger.isDebugEnabled()) {\n                            logger.debug(\"Written [\" + returnValue + \"] as \\\"\" +\n                                    selectedMediaType + \"\\\" using [\" + messageConverter + \"]\");\n                        }\n                    }\n                    return;\n                }\n            }\n        }\n\n        if (returnValue != null) {\n            throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes);\n        }\n    }\n```\n\n至此，HttpMessageConverter如何工作的就真相大白了。\n\n## 参考链接\n\n1. [SpringMVC关于json、xml自动转换的原理研究(附带源码分析)](http://www.cnblogs.com/fangjian0423/p/springMVC-xml-json-convert.html)\n","source":"_posts/HttpMessageConverter.md","raw":"title: HttpMessageConverter 原理和源码\ntags: spring\ncategory: web\ndate: 2016-11-29 02:48:45\n---\n\n## 架构\n![](arch.jpg)\n\n## HttpMessageConverter接口\n\n![](http-message-converter.jpg)\n\n>`HttpMessageConverter` used to\nmarshal objects into the HTTP request body and to unmarshal any response back into an object.\n\n提供将Java中的对象和http请求、响应相互转换的功能\n\n### spring 中的配置\n\nxml配置示例：\n\n```xml\n<mvc:annotation-driven conversion-service=\"conversionService\">\n    <mvc:message-converters>\n        <bean class=\"org.springframework.http.converter.StringHttpMessageConverter\"/>\n        <bean class=\"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter\">\n            <property name=\"objectMapper\" ref=\"jsonObjectMapper\"/>\n        </bean>\n    </mvc:message-converters>\n</mvc:annotation-driven>\n```\n\njava配置示例：\n\n```java\n@Configuration\npublic class WebConfig extends DelegatingWebMvcConfiguration {\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry){\n    // ...\n    }\n\n    @Override\n    @Bean\n    public RequestMappingHandlerAdapter requestMappingHandlerAdapter() {\n    // Create or let \"super\" create the adapter\n    // Then customize one of its properties\n    }\n}\n```\n\n### 接口描述\n```java\npackage org.springframework.http.converter;\n\nimport java.io.IOException;\nimport java.util.List;\n\nimport org.springframework.http.HttpInputMessage;\nimport org.springframework.http.HttpOutputMessage;\nimport org.springframework.http.MediaType;\n\n/**\n * Strategy interface that specifies a converter that can convert from and to HTTP requests and responses.\n *\n * @author Arjen Poutsma\n * @author Juergen Hoeller\n * @since 3.0\n */\npublic interface HttpMessageConverter<T> {\n\n\t/**\n\t * Indicates whether the given class can be read by this converter.\n\t * @param clazz the class to test for readability\n\t * @param mediaType the media type to read, can be {@code null} if not specified.\n\t * Typically the value of a {@code Content-Type} header.\n\t * @return {@code true} if readable; {@code false} otherwise\n\t */\n\tboolean canRead(Class<?> clazz, MediaType mediaType);\n\n\t/**\n\t * Indicates whether the given class can be written by this converter.\n\t * @param clazz the class to test for writability\n\t * @param mediaType the media type to write, can be {@code null} if not specified.\n\t * Typically the value of an {@code Accept} header.\n\t * @return {@code true} if writable; {@code false} otherwise\n\t */\n\tboolean canWrite(Class<?> clazz, MediaType mediaType);\n\n\t/**\n\t * Return the list of {@link MediaType} objects supported by this converter.\n\t * @return the list of supported media types\n\t */\n\tList<MediaType> getSupportedMediaTypes();\n\n\t/**\n\t * Read an object of the given type form the given input message, and returns it.\n\t * @param clazz the type of object to return. This type must have previously been passed to the\n\t * {@link #canRead canRead} method of this interface, which must have returned {@code true}.\n\t * @param inputMessage the HTTP input message to read from\n\t * @return the converted object\n\t * @throws IOException in case of I/O errors\n\t * @throws HttpMessageNotReadableException in case of conversion errors\n\t */\n\tT read(Class<? extends T> clazz, HttpInputMessage inputMessage)\n\t\t\tthrows IOException, HttpMessageNotReadableException;\n\n\t/**\n\t * Write an given object to the given output message.\n\t * @param t the object to write to the output message. The type of this object must have previously been\n\t * passed to the {@link #canWrite canWrite} method of this interface, which must have returned {@code true}.\n\t * @param contentType the content type to use when writing. May be {@code null} to indicate that the\n\t * default content type of the converter must be used. If not {@code null}, this media type must have\n\t * previously been passed to the {@link #canWrite canWrite} method of this interface, which must have\n\t * returned {@code true}.\n\t * @param outputMessage the message to write to\n\t * @throws IOException in case of I/O errors\n\t * @throws HttpMessageNotWritableException in case of conversion errors\n\t */\n\tvoid write(T t, MediaType contentType, HttpOutputMessage outputMessage)\n\t\t\tthrows IOException, HttpMessageNotWritableException;\n\n}\n\n```\n\n### spring 提供的实现类\n\n![](inherit.jpg)\n\n|名称|\n|---|\n|ByteArrayHttpMessageConverter|\n|FormHttpMessageConverter|\n|XmlAwareFormHttpMessageConverter|\n|ResourceHttpMessageConverter|\n|SourceHttpMessageConverter|\n|StringHttpMessageConverter|\n|SimpleXmlHttpMessageConverter|\n|MappingJackson2HttpMessageConverter|\n|GsonHttpMessageConverter|\n|SyndFeedHttpMessageConverter|\n|RssChannelHttpMessageConverter|\n|AtomFeedHttpMessageConverter|\n\n具体功能见 [RestTemplate Module](http://docs.spring.io/autorepo/docs/spring-android/1.0.x/reference/html/rest-template.html)\n\n想研究源码的可以从最简单的 `StringHttpMessageConverter`看起\n\n## Spring调用过程\n\n在DispatcherServlet初始化的过程会调用一个叫做`initHandlerAdapters`的方法，\n该方法内部会扫描容器中所有的类，以及他们的父类，找到所有实现了`HandlerAdapter`接口的类，\n并将他们注册到`DispatcherServlet`的`HandlerAdapters`中。\n\n\n如果没有扫描到的HandlerAdapter，这个方法会加载一些默认的HandlerAdapter。\n\n> The default implementation uses the \"DispatcherServlet.properties\" file (in the same\n  package as the DispatcherServlet class) to determine the class names. \n\n  ![](DispatcherServlet-properties.jpg)\n\nSpring 4.3.2 中有一个实现了`HandlerAdapter`接口的类会被扫描到，这个类叫做`RequestMappingHandlerAdapter`\n\n### RequestMappingHandlerAdapter\n这个类在构造的时候就加载了许多messageConverter\n\n```java\n    public RequestMappingHandlerAdapter() {\n        StringHttpMessageConverter stringHttpMessageConverter = new StringHttpMessageConverter();\n        stringHttpMessageConverter.setWriteAcceptCharset(false);  // see SPR-7316\n\n        this.messageConverters = new ArrayList<HttpMessageConverter<?>>(4);\n        this.messageConverters.add(new ByteArrayHttpMessageConverter());\n        this.messageConverters.add(stringHttpMessageConverter);\n        this.messageConverters.add(new SourceHttpMessageConverter<Source>());\n        this.messageConverters.add(new AllEncompassingFormHttpMessageConverter());\n    }\n```\n其中`AllEncompassingFormHttpMessageConverter`继承自`FormHttpMessageConverter`， 它有一个变量叫做\n`partConverters`，存储了一系列的`HttpMessageConverter`\n```java\n    private List<HttpMessageConverter<?>> partConverters = new ArrayList<HttpMessageConverter<?>>();\n    public FormHttpMessageConverter() {\n        this.supportedMediaTypes.add(MediaType.APPLICATION_FORM_URLENCODED);\n        this.supportedMediaTypes.add(MediaType.MULTIPART_FORM_DATA);\n        this.partConverters.add(new ByteArrayHttpMessageConverter());\n        StringHttpMessageConverter stringHttpMessageConverter = new StringHttpMessageConverter();\n        stringHttpMessageConverter.setWriteAcceptCharset(false);\n        this.partConverters.add(stringHttpMessageConverter);\n        this.partConverters.add(new ResourceHttpMessageConverter());\n    }\n```\n在`AllEncompassingFormHttpMessageConverter`中又根据classPath中是否包含jackson、Gson等jar包来动态的\n注册了一些`HttpMessageConverter`:\n\n```java\npublic class AllEncompassingFormHttpMessageConverter extends FormHttpMessageConverter {\n\n    private static final boolean jaxb2Present =\n            ClassUtils.isPresent(\"javax.xml.bind.Binder\", AllEncompassingFormHttpMessageConverter.class.getClassLoader());\n\n    private static final boolean jackson2Present =\n            ClassUtils.isPresent(\"com.fasterxml.jackson.databind.ObjectMapper\", AllEncompassingFormHttpMessageConverter.class.getClassLoader()) &&\n                    ClassUtils.isPresent(\"com.fasterxml.jackson.core.JsonGenerator\", AllEncompassingFormHttpMessageConverter.class.getClassLoader());\n\n    private static final boolean jackson2XmlPresent =\n            ClassUtils.isPresent(\"com.fasterxml.jackson.dataformat.xml.XmlMapper\", AllEncompassingFormHttpMessageConverter.class.getClassLoader());\n\n    private static final boolean gsonPresent =\n            ClassUtils.isPresent(\"com.google.gson.Gson\", AllEncompassingFormHttpMessageConverter.class.getClassLoader());\n\n\n    public AllEncompassingFormHttpMessageConverter() {\n        addPartConverter(new SourceHttpMessageConverter<Source>());\n\n        if (jaxb2Present && !jackson2Present) {\n            addPartConverter(new Jaxb2RootElementHttpMessageConverter());\n        }\n\n        if (jackson2Present) {\n            addPartConverter(new MappingJackson2HttpMessageConverter());\n        }\n        else if (gsonPresent) {\n            addPartConverter(new GsonHttpMessageConverter());\n        }\n\n        if (jackson2XmlPresent) {\n            addPartConverter(new MappingJackson2XmlHttpMessageConverter());\n        }\n    }\n\n}\n```\n\n至于这些转换器是怎么使用的，要看`RequestMappingHandlerAdapter`中的`getDefaultArgumentResolver`\n\n```java\n/**\n     * Return the list of argument resolvers to use including built-in resolvers\n     * and custom resolvers provided via {@link #setCustomArgumentResolvers}.\n     */\n    private List<HandlerMethodArgumentResolver> getDefaultArgumentResolvers() {\n        List<HandlerMethodArgumentResolver> resolvers = new ArrayList<HandlerMethodArgumentResolver>();\n\n        // Annotation-based argument resolution\n        resolvers.add(new RequestParamMethodArgumentResolver(getBeanFactory(), false));\n        resolvers.add(new RequestParamMapMethodArgumentResolver());\n        resolvers.add(new PathVariableMethodArgumentResolver());\n        resolvers.add(new PathVariableMapMethodArgumentResolver());\n        resolvers.add(new MatrixVariableMethodArgumentResolver());\n        resolvers.add(new MatrixVariableMapMethodArgumentResolver());\n        resolvers.add(new ServletModelAttributeMethodProcessor(false));\n        resolvers.add(new RequestResponseBodyMethodProcessor(getMessageConverters(), this.requestResponseBodyAdvice));\n        resolvers.add(new RequestPartMethodArgumentResolver(getMessageConverters(), this.requestResponseBodyAdvice));\n        resolvers.add(new RequestHeaderMethodArgumentResolver(getBeanFactory()));\n        resolvers.add(new RequestHeaderMapMethodArgumentResolver());\n        resolvers.add(new ServletCookieValueMethodArgumentResolver(getBeanFactory()));\n        resolvers.add(new ExpressionValueMethodArgumentResolver(getBeanFactory()));\n\n        // Type-based argument resolution\n        resolvers.add(new ServletRequestMethodArgumentResolver());\n        resolvers.add(new ServletResponseMethodArgumentResolver());\n        resolvers.add(new HttpEntityMethodProcessor(getMessageConverters(), this.requestResponseBodyAdvice));\n        resolvers.add(new RedirectAttributesMethodArgumentResolver());\n        resolvers.add(new ModelMethodProcessor());\n        resolvers.add(new MapMethodProcessor());\n        resolvers.add(new ErrorsMethodArgumentResolver());\n        resolvers.add(new SessionStatusMethodArgumentResolver());\n        resolvers.add(new UriComponentsBuilderMethodArgumentResolver());\n\n        // Custom arguments\n        if (getCustomArgumentResolvers() != null) {\n            resolvers.addAll(getCustomArgumentResolvers());\n        }\n\n        // Catch-all\n        resolvers.add(new RequestParamMethodArgumentResolver(getBeanFactory(), true));\n        resolvers.add(new ServletModelAttributeMethodProcessor(true));\n\n        return resolvers;\n    }\n```\n\n可以看到所有的Converter最终作为一个构造参数传入了`RequestResponseBodyMethodProcessor`和`RequestPartMethodArgumentResolver`。 前者其实是负责处理`@RequestBody`和`@ResponseBody`的, \n后者则是处理`@RequestPart`这个注解的。拿`RequestResponseBodyMethodProcessor`为例来看。\n\n这个类的父类实现了`HandlerMethodReturnValueHandler`接口，这个接口的作用对照上面的系统整体架构图\n可知，是处理Controller返回的结果值的，看其`handleReturnValue`方法 。\n\n```java\n    @Override\n    public void handleReturnValue(Object returnValue, MethodParameter returnType,\n            ModelAndViewContainer mavContainer, NativeWebRequest webRequest)\n            throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {\n        mavContainer.setRequestHandled(true);\n        // Try even with null return value. ResponseBodyAdvice could get involved.\n        writeWithMessageConverters(returnValue, returnType, webRequest);\n    }\n```\n首先标记这个请求已经处理过了，然后调用了一个内部方法，从名字就可以看出来，是使用MessageConverter进行\n转换。\n\n```java\n    /**\n     * Writes the given return value to the given web request. Delegates to\n     * {@link #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)}\n     */\n    protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType, NativeWebRequest webRequest)\n            throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {\n\n        ServletServerHttpRequest inputMessage = createInputMessage(webRequest);\n        ServletServerHttpResponse outputMessage = createOutputMessage(webRequest);\n        writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage);\n    }\n\n```\n真正的逻辑还是内部的`writeWithMessageConveters()\n\n```java\n/**\n     * Writes the given return type to the given output message.\n     * @param returnValue the value to write to the output message\n     * @param returnType the type of the value\n     * @param inputMessage the input messages. Used to inspect the {@code Accept} header.\n     * @param outputMessage the output message to write to\n     * @throws IOException thrown in case of I/O errors\n     * @throws HttpMediaTypeNotAcceptableException thrown when the conditions indicated by {@code Accept} header on\n     * the request cannot be met by the message converters\n     */\n    @SuppressWarnings(\"unchecked\")\n    protected <T> void writeWithMessageConverters(T returnValue, MethodParameter returnType,\n            ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)\n            throws IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {\n\n        Class<?> returnValueClass = getReturnValueType(returnValue, returnType);\n        Type returnValueType = getGenericType(returnType);\n        HttpServletRequest servletRequest = inputMessage.getServletRequest();\n        //从请求头获取可能的返回类型（默认会加载两种策略，比如从路径名的后缀上推断）\n        List<MediaType> requestedMediaTypes = getAcceptableMediaTypes(servletRequest);\n        //根据请求和返回的值得类型，推断可能的返回值类型\n        List<MediaType> producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass, returnValueType);\n\n        if (returnValue != null && producibleMediaTypes.isEmpty()) {\n            throw new IllegalArgumentException(\"No converter found for return value of type: \" + returnValueClass);\n        }\n        \n        //筛选\n        Set<MediaType> compatibleMediaTypes = new LinkedHashSet<MediaType>();\n        for (MediaType requestedType : requestedMediaTypes) {\n            for (MediaType producibleType : producibleMediaTypes) {\n                if (requestedType.isCompatibleWith(producibleType)) {\n                    compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType));\n                }\n            }\n        }\n        if (compatibleMediaTypes.isEmpty()) {\n            if (returnValue != null) {\n                throw new HttpMediaTypeNotAcceptableException(producibleMediaTypes);\n            }\n            return;\n        }\n\n        List<MediaType> mediaTypes = new ArrayList<MediaType>(compatibleMediaTypes);\n        MediaType.sortBySpecificityAndQuality(mediaTypes);\n\n        MediaType selectedMediaType = null;\n        for (MediaType mediaType : mediaTypes) {\n            if (mediaType.isConcrete()) {//具体的，没有通配符的\n                selectedMediaType = mediaType;\n                break;// 找到一个就跳出循环\n            }\n            else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) {\n                selectedMediaType = MediaType.APPLICATION_OCTET_STREAM;\n                break;// 找到一个就跳出循环\n            }\n        }\n\n            //找到能处理这种类型的HttpMessageConverter\n        if (selectedMediaType != null) {\n            selectedMediaType = selectedMediaType.removeQualityValue();\n            for (HttpMessageConverter<?> messageConverter : this.messageConverters) {\n                if (messageConverter instanceof GenericHttpMessageConverter) {\n                    if (((GenericHttpMessageConverter<T>) messageConverter).canWrite(returnValueType,\n                            returnValueClass, selectedMediaType)) {\n                        returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,\n                                (Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),\n                                inputMessage, outputMessage);\n                        if (returnValue != null) {\n                            addContentDispositionHeader(inputMessage, outputMessage);\n                            ((GenericHttpMessageConverter<T>) messageConverter).write(returnValue,\n                                    returnValueType, selectedMediaType, outputMessage);\n                            if (logger.isDebugEnabled()) {\n                                logger.debug(\"Written [\" + returnValue + \"] as \\\"\" +\n                                        selectedMediaType + \"\\\" using [\" + messageConverter + \"]\");\n                            }\n                        }\n                        return;\n                    }\n                }\n                else if (messageConverter.canWrite(returnValueClass, selectedMediaType)) {\n                    returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,\n                            (Class<? extends HttpMessageConverter<?>>) messageConverter.getClass(),\n                            inputMessage, outputMessage);\n                    if (returnValue != null) {\n                        addContentDispositionHeader(inputMessage, outputMessage);\n                        ((HttpMessageConverter<T>) messageConverter).write(returnValue,\n                                selectedMediaType, outputMessage);\n                        if (logger.isDebugEnabled()) {\n                            logger.debug(\"Written [\" + returnValue + \"] as \\\"\" +\n                                    selectedMediaType + \"\\\" using [\" + messageConverter + \"]\");\n                        }\n                    }\n                    return;\n                }\n            }\n        }\n\n        if (returnValue != null) {\n            throw new HttpMediaTypeNotAcceptableException(this.allSupportedMediaTypes);\n        }\n    }\n```\n\n至此，HttpMessageConverter如何工作的就真相大白了。\n\n## 参考链接\n\n1. [SpringMVC关于json、xml自动转换的原理研究(附带源码分析)](http://www.cnblogs.com/fangjian0423/p/springMVC-xml-json-convert.html)\n","slug":"HttpMessageConverter","published":1,"updated":"2016-12-18T05:09:13.824Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db6u003m90py5doijpff"},{"title":"vim","category":null,"_content":"","source":"_drafts/vim.md","raw":"title: vim\ntags:\ncategory:\n---\n","slug":"vim","published":0,"date":"2016-12-12T16:02:54.829Z","updated":"2016-12-12T16:02:54.829Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db79003r90pyh4t5yx21"},{"title":"ssh","_content":"","source":"_drafts/ssh.md","raw":"title: ssh\ntags: ssh\ncategory: linux\n---\n","slug":"ssh","published":0,"date":"2016-12-18T03:27:44.572Z","updated":"2016-12-18T03:27:44.572Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db7a003s90py5hly84d8"},{"title":"spring-exception-handle","category":null,"_content":"","source":"_drafts/spring-exception-handle.md","raw":"title: spring-exception-handle\ntags:\ncategory:\n---\n","slug":"spring-exception-handle","published":0,"date":"2016-12-22T17:19:14.407Z","updated":"2016-12-22T17:19:14.407Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db7d003v90pycxbro04c"},{"title":"python-json","category":null,"_content":"\nhttps://blog.nicky-zs.com/blog/17/\n\nFormat JSON with python\n\nhttps://pypi.python.org/pypi/jsondiff/0.1.0","source":"_drafts/python-json.md","raw":"title: python-json\ntags:\ncategory:\n---\n\nhttps://blog.nicky-zs.com/blog/17/\n\nFormat JSON with python\n\nhttps://pypi.python.org/pypi/jsondiff/0.1.0","slug":"python-json","published":0,"date":"2016-12-09T03:46:12.567Z","updated":"2016-12-09T03:46:12.567Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db7e003w90pykdm65rxu"},{"title":"protobuf","category":null,"_content":"","source":"_drafts/protobuf.md","raw":"title: protobuf\ntags:\ncategory:\n---\n","slug":"protobuf","published":0,"date":"2016-11-29T16:07:42.646Z","updated":"2016-11-29T16:07:42.646Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db7g003x90py005y8tmp"},{"title":"logback 使用","_content":"\n# Logback总结\n\n### Colored Log in Console\n\nhighlight 关键字\n\n```xml\n<appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n    <encoder>\n        <pattern>\n            %d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) [%-40.40logger{10}] - %msg%n\n        </pattern>\n    </encoder>\n</appender>\n```\n效果:\n\n![](colored.jpg)\n\n# 参考\n1. [COLORED LOGS IN A CONSOLE (ANSI STYLING)](http://blog.codeleak.pl/2014/02/colored-logs-in-console-ansi-styling.html)\n\n","source":"_drafts/logback.md","raw":"title: logback 使用\ntags: logback\ncategory: java\n---\n\n# Logback总结\n\n### Colored Log in Console\n\nhighlight 关键字\n\n```xml\n<appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n    <encoder>\n        <pattern>\n            %d{yyyy-MM-dd HH:mm:ss.SSS} %highlight(%-5level) [%-40.40logger{10}] - %msg%n\n        </pattern>\n    </encoder>\n</appender>\n```\n效果:\n\n![](colored.jpg)\n\n# 参考\n1. [COLORED LOGS IN A CONSOLE (ANSI STYLING)](http://blog.codeleak.pl/2014/02/colored-logs-in-console-ansi-styling.html)\n\n","slug":"logback","published":0,"date":"2016-11-29T16:43:46.480Z","updated":"2016-11-29T16:43:46.480Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db7l003y90pymyarigtu"},{"title":"kibana","category":null,"_content":"\n\n\n## 参考\n\n1. [ELK：kibana使用的lucene查询语法](https://segmentfault.com/a/1190000002972420)\n\n2. [Kibana3指南](http://www.code123.cc/docs/kibana-logstash/v3/index.html)\n\n3. []\n","source":"_drafts/kibana.md","raw":"title: kibana\ntags:\ncategory:\n---\n\n\n\n## 参考\n\n1. [ELK：kibana使用的lucene查询语法](https://segmentfault.com/a/1190000002972420)\n\n2. [Kibana3指南](http://www.code123.cc/docs/kibana-logstash/v3/index.html)\n\n3. []\n","slug":"kibana","published":0,"date":"2016-11-15T15:54:34.986Z","updated":"2016-11-15T15:54:34.986Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db7t004290pyksu6zu3d"},{"title":"java-introspector","category":null,"_content":"\nhttp://www.slideshare.net/kim.mens/basics-of-reflection-in-java\n\nhttp://jjhou.boolan.com/javatwo-2004-reflection.pdf\n\n/**\n * The Introspector class provides a standard way for tools to learn about\n * the properties, events, and methods supported by a target Java Bean.\n * <p>\n * For more information about introspection and design patterns, please\n * consult the\n *  <a href=\"http://www.oracle.com/technetwork/java/javase/documentation/spec-136004.html\">JavaBeans&trade; specification</a>.\n */\n\npublic class Introspector {\n\nBeanInfo  \n\n\ninstanceof  C++\n\npython 中的内省\n\nmethod\n\n","source":"_drafts/java-introspector.md","raw":"title: java-introspector\ntags:\ncategory:\n---\n\nhttp://www.slideshare.net/kim.mens/basics-of-reflection-in-java\n\nhttp://jjhou.boolan.com/javatwo-2004-reflection.pdf\n\n/**\n * The Introspector class provides a standard way for tools to learn about\n * the properties, events, and methods supported by a target Java Bean.\n * <p>\n * For more information about introspection and design patterns, please\n * consult the\n *  <a href=\"http://www.oracle.com/technetwork/java/javase/documentation/spec-136004.html\">JavaBeans&trade; specification</a>.\n */\n\npublic class Introspector {\n\nBeanInfo  \n\n\ninstanceof  C++\n\npython 中的内省\n\nmethod\n\n","slug":"java-introspector","published":0,"date":"2016-12-08T02:12:51.271Z","updated":"2016-12-08T02:12:51.271Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db7u004390pywdhc8efi"},{"title":"java-URL","category":null,"_content":"","source":"_drafts/java-URL.md","raw":"title: java-URL\ntags:\ncategory:\n---\n","slug":"java-URL","published":0,"date":"2016-11-20T08:15:01.541Z","updated":"2016-11-20T08:15:01.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db7x004490pylg9tw596"},{"title":"jackson_custom","category":null,"_content":"\n\n定义解析\n\n多态支持\n\n空字段\n\n各种配置\n\nMap的Key Deserializer 构造函数\n\n@JsonDeserialize(keyUsing = ShortDateKeyDeserializer.class)\n\ncom.fasterxml.jackson.databind.JsonMappingException: Can not find a (Map) Key deserializer for type [simple type, class com.qunar.hotel.price.root.beans.time.ShortDate]","source":"_drafts/jackson-custom.md","raw":"title: jackson_custom\ntags:\ncategory:\n---\n\n\n定义解析\n\n多态支持\n\n空字段\n\n各种配置\n\nMap的Key Deserializer 构造函数\n\n@JsonDeserialize(keyUsing = ShortDateKeyDeserializer.class)\n\ncom.fasterxml.jackson.databind.JsonMappingException: Can not find a (Map) Key deserializer for type [simple type, class com.qunar.hotel.price.root.beans.time.ShortDate]","slug":"jackson-custom","published":0,"date":"2016-12-11T17:58:35.317Z","updated":"2016-12-11T17:58:35.317Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db80004590pyob1juoab"},{"title":"inode","category":null,"_content":"","source":"_drafts/inode.md","raw":"title: inode\ntags:\ncategory:\n---\n","slug":"inode","published":0,"date":"2016-12-14T16:18:28.334Z","updated":"2016-12-14T16:18:28.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db83004690pyxpn8djtr"},{"title":"impress.js","category":null,"_content":"","source":"_drafts/impress-js.md","raw":"title: impress.js\ntags:\ncategory:\n---\n","slug":"impress-js","published":0,"date":"2016-12-14T16:16:06.119Z","updated":"2016-12-14T16:16:06.119Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db86004790pytgj50tb8"},{"title":"idea文件模板","_content":"\n# 版权信息\n\n代码前面一般都会有相应的版权信息，拿guava的代码为例\n\n```java\n/*\n * Copyright (C) 2007 The Guava Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.common.collect;\n\n```\n\n## idea自动生成版权信息\n\n`File` > `Settings` > `Copyright` > `Copyright Profiles`\n\n新建一个profile，填入如下的内容\n```\n/* * Copyright (c) $today.year xx.com. All Rights Reserved. */\n```\n\n`$today.year`代表当前的年\n\n![](profiles.jpg)\n\n新建java文件时就自动生成了版权信息：\n\n```java\n/*\n *  * Copyright (c) 2016 Qunar.com. All Rights Reserved. \n */\n\npackage com.xxx.handler;\n```\n\n\n# 作者、日期、邮箱等\n\n`File` > `Settings` > `File and Ocde Templates` > `Includes` > `File Header`\n\n```java\n#set( $email = \"xx@xx.com\")\n#set( $author = \"xxx\")\n\n/**\n * @author ${author}\n * @email ${email}\n * @date ${DATE} ${TIME}\n */\n\n```\n\n这个使用的`velocity`渲染的，可以参考`velocity`的语法\n\n","source":"_drafts/idea-template.md","raw":"title: idea文件模板\ntags: template\ncategory: idea\n---\n\n# 版权信息\n\n代码前面一般都会有相应的版权信息，拿guava的代码为例\n\n```java\n/*\n * Copyright (C) 2007 The Guava Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.google.common.collect;\n\n```\n\n## idea自动生成版权信息\n\n`File` > `Settings` > `Copyright` > `Copyright Profiles`\n\n新建一个profile，填入如下的内容\n```\n/* * Copyright (c) $today.year xx.com. All Rights Reserved. */\n```\n\n`$today.year`代表当前的年\n\n![](profiles.jpg)\n\n新建java文件时就自动生成了版权信息：\n\n```java\n/*\n *  * Copyright (c) 2016 Qunar.com. All Rights Reserved. \n */\n\npackage com.xxx.handler;\n```\n\n\n# 作者、日期、邮箱等\n\n`File` > `Settings` > `File and Ocde Templates` > `Includes` > `File Header`\n\n```java\n#set( $email = \"xx@xx.com\")\n#set( $author = \"xxx\")\n\n/**\n * @author ${author}\n * @email ${email}\n * @date ${DATE} ${TIME}\n */\n\n```\n\n这个使用的`velocity`渲染的，可以参考`velocity`的语法\n\n","slug":"idea-template","published":0,"date":"2016-12-22T17:14:06.099Z","updated":"2016-12-22T17:14:06.099Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db88004890pyy3b594cd"},{"title":"idea-plugins","category":null,"_content":"","source":"_drafts/idea-plugins.md","raw":"title: idea-plugins\ntags:\ncategory:\n---\n","slug":"idea-plugins","published":0,"date":"2016-12-22T17:00:02.552Z","updated":"2016-12-22T17:00:02.552Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db8a004b90py6rpqm065"},{"title":"Spring中factorybean的使用","_content":"\n```Java\n/**\n* <p>Bean factory implementations should support the standard bean lifecycle interfaces\n* as far as possible. The full set of initialization methods and their standard order is:<br>\n* 1. BeanNameAware's {@code setBeanName}<br>\n* 2. BeanClassLoaderAware's {@code setBeanClassLoader}<br>\n* 3. BeanFactoryAware's {@code setBeanFactory}<br>\n* 4. ResourceLoaderAware's {@code setResourceLoader}\n* (only applicable when running in an application context)<br>\n* 5. ApplicationEventPublisherAware's {@code setApplicationEventPublisher}\n* (only applicable when running in an application context)<br>\n* 6. MessageSourceAware's {@code setMessageSource}\n* (only applicable when running in an application context)<br>\n* 7. ApplicationContextAware's {@code setApplicationContext}\n* (only applicable when running in an application context)<br>\n* 8. ServletContextAware's {@code setServletContext}\n* (only applicable when running in a web application context)<br>\n* 9. {@code postProcessBeforeInitialization} methods of BeanPostProcessors<br>\n* 10. InitializingBean's {@code afterPropertiesSet}<br>\n* 11. a custom init-method definition<br>\n* 12. {@code postProcessAfterInitialization} methods of BeanPostProcessors\n*\n* <p>On shutdown of a bean factory, the following lifecycle methods apply:<br>\n* 1. DisposableBean's {@code destroy}<br>\n* 2. a custom destroy-method definition\n**/\n```\n\n\n## 参考\n\n1. []()","source":"_drafts/factorybean.md","raw":"title: Spring中factorybean的使用\ntags: beanfactory\ncategory: spring\n---\n\n```Java\n/**\n* <p>Bean factory implementations should support the standard bean lifecycle interfaces\n* as far as possible. The full set of initialization methods and their standard order is:<br>\n* 1. BeanNameAware's {@code setBeanName}<br>\n* 2. BeanClassLoaderAware's {@code setBeanClassLoader}<br>\n* 3. BeanFactoryAware's {@code setBeanFactory}<br>\n* 4. ResourceLoaderAware's {@code setResourceLoader}\n* (only applicable when running in an application context)<br>\n* 5. ApplicationEventPublisherAware's {@code setApplicationEventPublisher}\n* (only applicable when running in an application context)<br>\n* 6. MessageSourceAware's {@code setMessageSource}\n* (only applicable when running in an application context)<br>\n* 7. ApplicationContextAware's {@code setApplicationContext}\n* (only applicable when running in an application context)<br>\n* 8. ServletContextAware's {@code setServletContext}\n* (only applicable when running in a web application context)<br>\n* 9. {@code postProcessBeforeInitialization} methods of BeanPostProcessors<br>\n* 10. InitializingBean's {@code afterPropertiesSet}<br>\n* 11. a custom init-method definition<br>\n* 12. {@code postProcessAfterInitialization} methods of BeanPostProcessors\n*\n* <p>On shutdown of a bean factory, the following lifecycle methods apply:<br>\n* 1. DisposableBean's {@code destroy}<br>\n* 2. a custom destroy-method definition\n**/\n```\n\n\n## 参考\n\n1. []()","slug":"factorybean","published":0,"date":"2016-12-19T00:44:23.150Z","updated":"2016-12-19T00:44:23.150Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db8d004c90pynaopu3v1"},{"title":"Spring中的bean属性编辑器——BeanWrapper","_content":"\n## 源起\n\n最近在翻阅Spring MVC的源码的时候看到了这么一段\n\n```java\ntry {\n        PropertyValues pvs = new ServletConfigPropertyValues(getServletConfig(), this.requiredProperties);\n        BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(this);\n        ResourceLoader resourceLoader = new ServletContextResourceLoader(getServletContext());\n        bw.registerCustomEditor(Resource.class, new ResourceEditor(resourceLoader, getEnvironment()));\n        initBeanWrapper(bw);\n        bw.setPropertyValues(pvs, true);\n    }\n    catch (xx){\n        ...\n    }\n```\n这段代码是在`DispatcherServlet`的父类`HttpServletBean`初始化的时候使用的。\n`bw.setPropertyValues(pvs, true);` 这一句直接操作了`Bean`的属性，将Servlet启动文件中\n指定的初始化信息加载过来。\n\n## JavaBeans规范\n\n1. 所有的属性都是private的\n\n2. 有一个公有的无参构造函数\n\n3. 可序列化（实现`Serializable`接口）\n\n\n## 参考\n\n1. [What is a JavaBean exactly?](http://stackoverflow.com/questions/3295496/what-is-a-javabean-exactly)","source":"_drafts/custom-editor.md","raw":"title: Spring中的bean属性编辑器——BeanWrapper\ntags: PropertyEditor\ncategory: spring\n---\n\n## 源起\n\n最近在翻阅Spring MVC的源码的时候看到了这么一段\n\n```java\ntry {\n        PropertyValues pvs = new ServletConfigPropertyValues(getServletConfig(), this.requiredProperties);\n        BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(this);\n        ResourceLoader resourceLoader = new ServletContextResourceLoader(getServletContext());\n        bw.registerCustomEditor(Resource.class, new ResourceEditor(resourceLoader, getEnvironment()));\n        initBeanWrapper(bw);\n        bw.setPropertyValues(pvs, true);\n    }\n    catch (xx){\n        ...\n    }\n```\n这段代码是在`DispatcherServlet`的父类`HttpServletBean`初始化的时候使用的。\n`bw.setPropertyValues(pvs, true);` 这一句直接操作了`Bean`的属性，将Servlet启动文件中\n指定的初始化信息加载过来。\n\n## JavaBeans规范\n\n1. 所有的属性都是private的\n\n2. 有一个公有的无参构造函数\n\n3. 可序列化（实现`Serializable`接口）\n\n\n## 参考\n\n1. [What is a JavaBean exactly?](http://stackoverflow.com/questions/3295496/what-is-a-javabean-exactly)","slug":"custom-editor","published":0,"date":"2016-12-19T00:44:20.746Z","updated":"2016-12-19T00:44:20.746Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db8k004g90py0xvzgqkj"},{"title":"classloader","category":null,"_content":"","source":"_drafts/classloader.md","raw":"title: classloader\ntags:\ncategory:\n---\n","slug":"classloader","published":0,"date":"2016-11-20T13:22:44.615Z","updated":"2016-11-20T13:22:44.615Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db8u004k90pyo2fsw6yj"},{"title":"burpsuite-https","category":null,"_content":"","source":"_drafts/burpsuite-https.md","raw":"title: burpsuite-https\ntags:\ncategory:\n---\n","slug":"burpsuite-https","published":0,"date":"2016-11-09T16:48:03.356Z","updated":"2016-11-09T16:48:03.356Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db90004l90pymou6wsoz"},{"title":"ServletInvocableHandlerMethod","category":null,"_content":"","source":"_drafts/ServletInvocableHandlerMethod.md","raw":"title: ServletInvocableHandlerMethod\ntags:\ncategory:\n---\n","slug":"ServletInvocableHandlerMethod","published":0,"date":"2016-12-01T18:39:00.710Z","updated":"2016-12-01T18:39:00.710Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db92004m90pyyzycppn1"},{"title":"HandlerMethodArgumentResolver","category":null,"_content":"\n","source":"_drafts/HandlerMethodArgumentResolver.md","raw":"title: HandlerMethodArgumentResolver\ntags:\ncategory:\n---\n\n","slug":"HandlerMethodArgumentResolver","published":0,"date":"2016-12-06T16:29:09.225Z","updated":"2016-12-06T16:29:09.225Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db94004n90pymc7b28vi"},{"title":"HandlerMapping","category":null,"_content":"","source":"_drafts/HandlerMapping.md","raw":"title: HandlerMapping\ntags:\ncategory:\n---\n","slug":"HandlerMapping","published":0,"date":"2016-12-03T18:00:05.452Z","updated":"2016-12-03T18:00:05.452Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix16db96004o90py4beivmgt"}],"PostAsset":[{"_id":"source/_posts/spring-resource/resource.jpg","post":"cix16db0s000h90pyz145gpim","slug":"resource.jpg","modified":1},{"_id":"source/_posts/spring-mvc/Servlet_LifeCycle.jpg","post":"cix16db14000m90pyipi2vuj2","slug":"Servlet_LifeCycle.jpg","modified":1},{"_id":"source/_posts/spring-mvc/arch.jpg","post":"cix16db14000m90pyipi2vuj2","slug":"arch.jpg","modified":1},{"_id":"source/_posts/spring-mvc/hierachy.jpg","post":"cix16db14000m90pyipi2vuj2","slug":"hierachy.jpg","modified":1},{"_id":"source/_posts/spring-mvc/servlet-interface.jpg","post":"cix16db14000m90pyipi2vuj2","slug":"servlet-interface.jpg","modified":1},{"_id":"source/_posts/spi/usage.jpg","post":"cix16db1w000t90py6hfhng5n","slug":"usage.jpg","modified":1},{"_id":"source/_posts/property-placeholder/hierarchy.jpg","post":"cix16db2h001c90pym20tnypr","slug":"hierarchy.jpg","modified":1},{"_id":"source/_posts/property-placeholder/location.jpg","post":"cix16db2h001c90pym20tnypr","slug":"location.jpg","modified":1},{"_id":"source/_posts/property-placeholder/post-processors.jpg","post":"cix16db2h001c90pym20tnypr","slug":"post-processors.jpg","modified":1},{"_id":"source/_posts/postgre/arch.jpg","post":"cix16db33001g90pyx66onzlj","slug":"arch.jpg","modified":1},{"_id":"source/_posts/postgre/history.jpg","post":"cix16db33001g90pyx66onzlj","slug":"history.jpg","modified":1},{"_id":"source/_posts/pagination/PPC2009_mysql_pagination.pdf","post":"cix16db3m001p90pyj65e9uin","slug":"PPC2009_mysql_pagination.pdf","modified":1},{"_id":"source/_posts/jsonp/cors.png","post":"cix16db4d002590pyc716lzub","slug":"cors.png","modified":1},{"_id":"source/_posts/jsonp/sample.png","post":"cix16db4d002590pyc716lzub","slug":"sample.png","modified":1},{"_id":"source/_posts/jackson-guava/jar.png","post":"cix16db54002n90pylf3wsh7e","slug":"jar.png","modified":1},{"_id":"source/_posts/idea-template/profiles.jpg","post":"cix16db5b002r90pyfsoopdsy","slug":"profiles.jpg","modified":1},{"_id":"source/_posts/grep/color.jpg","post":"cix16db5r002z90pyjq4q9qm2","slug":"color.jpg","modified":1},{"_id":"source/_posts/grep/egrep.jpg","post":"cix16db5r002z90pyjq4q9qm2","slug":"egrep.jpg","modified":1},{"_id":"source/_posts/character-encoding/Unicode_logo.jpg","post":"cix16db6a003c90pyx6qr66ve","slug":"Unicode_logo.jpg","modified":1},{"_id":"source/_posts/character-encoding/emoji.jpg","post":"cix16db6a003c90pyx6qr66ve","slug":"emoji.jpg","modified":1},{"_id":"source/_posts/character-encoding/unicode-layout.jpg","post":"cix16db6a003c90pyx6qr66ve","slug":"unicode-layout.jpg","modified":1},{"_id":"source/_posts/base64/encoding.jpg","post":"cix16db6m003g90pyusawok93","slug":"encoding.jpg","modified":1},{"_id":"source/_posts/base64/encoding2.jpg","post":"cix16db6m003g90pyusawok93","slug":"encoding2.jpg","modified":1},{"_id":"source/_posts/HttpMessageConverter/DispatcherServlet-properties.jpg","post":"cix16db6u003m90py5doijpff","slug":"DispatcherServlet-properties.jpg","modified":1},{"_id":"source/_posts/HttpMessageConverter/arch.jpg","post":"cix16db6u003m90py5doijpff","slug":"arch.jpg","modified":1},{"_id":"source/_posts/HttpMessageConverter/http-message-converter.jpg","post":"cix16db6u003m90py5doijpff","slug":"http-message-converter.jpg","modified":1},{"_id":"source/_posts/HttpMessageConverter/inherit.jpg","post":"cix16db6u003m90py5doijpff","slug":"inherit.jpg","modified":1},{"_id":"source/_drafts/logback/colored.jpg","post":"cix16db7l003y90pymyarigtu","slug":"colored.jpg","modified":1}],"PostCategory":[{"post_id":"cix16db0a000290pykj91eh9q","category_id":"cix16db0b000390pyxsjnp0bw","_id":"cix16db0f000690pym578os1h"},{"post_id":"cix16db0g000790py3lxzp8u5","category_id":"cix16db0b000390pyxsjnp0bw","_id":"cix16db0i000890pyt241jvz6"},{"post_id":"cix16db0o000c90py54896oo8","category_id":"cix16db0p000d90py77rpp6b1","_id":"cix16db0q000g90py4wms5qg8"},{"post_id":"cix16db0s000h90pyz145gpim","category_id":"cix16db0t000i90pygx7sclt8","_id":"cix16db0w000l90pye0vuy1ob"},{"post_id":"cix16db14000m90pyipi2vuj2","category_id":"cix16db0t000i90pygx7sclt8","_id":"cix16db16000n90pyjhme2z9x"},{"post_id":"cix16db1s000q90py0e27u7ek","category_id":"cix16db0t000i90pygx7sclt8","_id":"cix16db1u000r90pysythx5r7"},{"post_id":"cix16db1w000t90py6hfhng5n","category_id":"cix16db1y000u90pyxakyoky0","_id":"cix16db1z000x90pyebhzmeax"},{"post_id":"cix16db23000y90pyeux7s6pc","category_id":"cix16db0p000d90py77rpp6b1","_id":"cix16db24000z90pyl78rbdq0"},{"post_id":"cix16db27001290pyfybr1grk","category_id":"cix16db28001390py4q6wnqck","_id":"cix16db2a001690pytw7r9pc7"},{"post_id":"cix16db2c001790py5h0es258","category_id":"cix16db2e001890pyyr5p91th","_id":"cix16db2f001b90pyqo86reau"},{"post_id":"cix16db2h001c90pym20tnypr","category_id":"cix16db0t000i90pygx7sclt8","_id":"cix16db2i001d90py3ozf29j2"},{"post_id":"cix16db33001g90pyx66onzlj","category_id":"cix16db28001390py4q6wnqck","_id":"cix16db35001h90pykftpz1fw"},{"post_id":"cix16db3h001k90pyyfvta5dp","category_id":"cix16db3i001l90pyb0boocy5","_id":"cix16db3j001o90pyz3g506pt"},{"post_id":"cix16db3m001p90pyj65e9uin","category_id":"cix16db28001390py4q6wnqck","_id":"cix16db3o001q90py5ez4fyvc"},{"post_id":"cix16db3v001t90pybyljjbbq","category_id":"cix16db0p000d90py77rpp6b1","_id":"cix16db3x001u90pyfzbatkeu"},{"post_id":"cix16db43001x90pye6jfh0do","category_id":"cix16db28001390py4q6wnqck","_id":"cix16db45001y90pycktgqh31"},{"post_id":"cix16db48002090py9eo2m8x3","category_id":"cix16db49002190py9o15xoy0","_id":"cix16db4a002490pydqeg4s19"},{"post_id":"cix16db4d002590pyc716lzub","category_id":"cix16db4e002690py0f2bj4mc","_id":"cix16db4f002990py5n581f6r"},{"post_id":"cix16db4r002a90py1k1notmd","category_id":"cix16db4t002b90pyya1v91s1","_id":"cix16db4u002e90py16nrivx8"},{"post_id":"cix16db4w002f90py1nwjgxw9","category_id":"cix16db1y000u90pyxakyoky0","_id":"cix16db4y002g90pyv429f7tq"},{"post_id":"cix16db50002j90pyd8uzvwiv","category_id":"cix16db1y000u90pyxakyoky0","_id":"cix16db51002k90pyab3rsm7z"},{"post_id":"cix16db54002n90pylf3wsh7e","category_id":"cix16db0t000i90pygx7sclt8","_id":"cix16db56002o90pyq4fjcv86"},{"post_id":"cix16db5b002r90pyfsoopdsy","category_id":"cix16db4t002b90pyya1v91s1","_id":"cix16db5c002s90pyycxpf7o8"},{"post_id":"cix16db5k002v90pyicenr5rp","category_id":"cix16db3i001l90pyb0boocy5","_id":"cix16db5l002w90pyp5tow75k"},{"post_id":"cix16db5r002z90pyjq4q9qm2","category_id":"cix16db0p000d90py77rpp6b1","_id":"cix16db5s003090pyojiafhwg"},{"post_id":"cix16db63003390pyx6kdpz3e","category_id":"cix16db64003490py418enem2","_id":"cix16db65003790py813atuad"},{"post_id":"cix16db67003890pyglnei9ym","category_id":"cix16db0t000i90pygx7sclt8","_id":"cix16db69003990pyid7nx0ll"},{"post_id":"cix16db6a003c90pyx6qr66ve","category_id":"cix16db28001390py4q6wnqck","_id":"cix16db6b003d90pyt6i0hdfh"},{"post_id":"cix16db6m003g90pyusawok93","category_id":"cix16db28001390py4q6wnqck","_id":"cix16db6n003h90pyrqp83e62"},{"post_id":"cix16db6s003j90py1bax3vzj","category_id":"cix16db0p000d90py77rpp6b1","_id":"cix16db6t003k90pya3zjtb7p"},{"post_id":"cix16db6u003m90py5doijpff","category_id":"cix16db6w003n90pyjuhl3996","_id":"cix16db6y003q90pyar5wdgxq"},{"post_id":"cix16db7a003s90py5hly84d8","category_id":"cix16db0p000d90py77rpp6b1","_id":"cix16db7b003t90pyctwmy1mw"},{"post_id":"cix16db7l003y90pymyarigtu","category_id":"cix16db1y000u90pyxakyoky0","_id":"cix16db7m003z90py0v2ocjf6"},{"post_id":"cix16db88004890pyy3b594cd","category_id":"cix16db4t002b90pyya1v91s1","_id":"cix16db89004990py0e5w1wch"},{"post_id":"cix16db8d004c90pynaopu3v1","category_id":"cix16db0t000i90pygx7sclt8","_id":"cix16db8i004d90pyqf6h16q7"},{"post_id":"cix16db8k004g90py0xvzgqkj","category_id":"cix16db0t000i90pygx7sclt8","_id":"cix16db8l004h90pysgqsd1en"}],"PostTag":[{"post_id":"cix16db0a000290pykj91eh9q","tag_id":"cix16db0c000490pygnvmk4ah","_id":"cix16db0e000590py8zicrxi8"},{"post_id":"cix16db0g000790py3lxzp8u5","tag_id":"cix16db0i000990pysn5kiuwa","_id":"cix16db0i000a90pyy78k50k2"},{"post_id":"cix16db0o000c90py54896oo8","tag_id":"cix16db0p000e90pymbdss0zp","_id":"cix16db0q000f90py4y2rcwfg"},{"post_id":"cix16db0s000h90pyz145gpim","tag_id":"cix16db0u000j90pyhnqi8z3y","_id":"cix16db0v000k90py9657urhg"},{"post_id":"cix16db14000m90pyipi2vuj2","tag_id":"cix16db16000o90pydltxdbq3","_id":"cix16db17000p90pyv7rauaxa"},{"post_id":"cix16db1s000q90py0e27u7ek","tag_id":"cix16db16000o90pydltxdbq3","_id":"cix16db1u000s90pylhc3nvm8"},{"post_id":"cix16db1w000t90py6hfhng5n","tag_id":"cix16db1y000v90pyf2t4kjwp","_id":"cix16db1z000w90pykujfmstv"},{"post_id":"cix16db23000y90pyeux7s6pc","tag_id":"cix16db25001090py0iyfnbwy","_id":"cix16db25001190pyq98xg2j0"},{"post_id":"cix16db27001290pyfybr1grk","tag_id":"cix16db28001490pylgkd4xbr","_id":"cix16db29001590py4n1co0k6"},{"post_id":"cix16db2c001790py5h0es258","tag_id":"cix16db2e001990py2quo3k0w","_id":"cix16db2f001a90pyuh8vu47q"},{"post_id":"cix16db2h001c90pym20tnypr","tag_id":"cix16db2i001e90py20wm3etk","_id":"cix16db2j001f90pyhhdxv7ep"},{"post_id":"cix16db33001g90pyx66onzlj","tag_id":"cix16db35001i90py94imhsiq","_id":"cix16db36001j90pysttg7zl7"},{"post_id":"cix16db3h001k90pyyfvta5dp","tag_id":"cix16db3i001m90py3nrva7v7","_id":"cix16db3j001n90pyqgtefuv4"},{"post_id":"cix16db3m001p90pyj65e9uin","tag_id":"cix16db3o001r90pynunpnnvk","_id":"cix16db3p001s90pycp77l4l8"},{"post_id":"cix16db3v001t90pybyljjbbq","tag_id":"cix16db3x001v90py8lsgx16h","_id":"cix16db3y001w90pyw0j2aas3"},{"post_id":"cix16db43001x90pye6jfh0do","tag_id":"cix16db3o001r90pynunpnnvk","_id":"cix16db45001z90pyb5ybxmxc"},{"post_id":"cix16db48002090py9eo2m8x3","tag_id":"cix16db49002290pyl4ije4bn","_id":"cix16db49002390pyqpyyukan"},{"post_id":"cix16db4d002590pyc716lzub","tag_id":"cix16db4e002790py3agatd64","_id":"cix16db4f002890py6a586bfs"},{"post_id":"cix16db4r002a90py1k1notmd","tag_id":"cix16db4t002c90py8wholjos","_id":"cix16db4u002d90py7sv0d0nv"},{"post_id":"cix16db4w002f90py1nwjgxw9","tag_id":"cix16db4y002h90pyi0d42gm8","_id":"cix16db4y002i90pyxk951y5y"},{"post_id":"cix16db50002j90pyd8uzvwiv","tag_id":"cix16db51002l90pyiq5sx6xc","_id":"cix16db52002m90pyr0cvpen8"},{"post_id":"cix16db54002n90pylf3wsh7e","tag_id":"cix16db56002p90pyiksw8tss","_id":"cix16db56002q90py977tpjr3"},{"post_id":"cix16db5b002r90pyfsoopdsy","tag_id":"cix16db5c002t90pybo41oh3j","_id":"cix16db5c002u90pyvpvfxlf4"},{"post_id":"cix16db5k002v90pyicenr5rp","tag_id":"cix16db5m002x90pye1633052","_id":"cix16db5n002y90pyfvzeh6f6"},{"post_id":"cix16db5r002z90pyjq4q9qm2","tag_id":"cix16db5s003190pyhfdw67j7","_id":"cix16db5t003290pyroku8oyl"},{"post_id":"cix16db63003390pyx6kdpz3e","tag_id":"cix16db64003590pyg3ebiyaw","_id":"cix16db65003690py69lso1gt"},{"post_id":"cix16db67003890pyglnei9ym","tag_id":"cix16db69003a90pyzh9ofxbq","_id":"cix16db69003b90py5oy95cfh"},{"post_id":"cix16db6a003c90pyx6qr66ve","tag_id":"cix16db6c003e90py1gkse2rc","_id":"cix16db6c003f90pyuvqcav8b"},{"post_id":"cix16db6m003g90pyusawok93","tag_id":"cix16db6c003e90py1gkse2rc","_id":"cix16db6n003i90pylpxq4075"},{"post_id":"cix16db6s003j90py1bax3vzj","tag_id":"cix16db5s003190pyhfdw67j7","_id":"cix16db6t003l90pyzn7p828v"},{"post_id":"cix16db6u003m90py5doijpff","tag_id":"cix16db6w003o90pybb9crgzz","_id":"cix16db6x003p90pywsqok4ez"},{"post_id":"cix16db7a003s90py5hly84d8","tag_id":"cix16db0p000e90pymbdss0zp","_id":"cix16db7c003u90pyykkpolv1"},{"post_id":"cix16db7l003y90pymyarigtu","tag_id":"cix16db7n004090py2u3h8st1","_id":"cix16db7n004190pydnsgnfu4"},{"post_id":"cix16db88004890pyy3b594cd","tag_id":"cix16db5c002t90pybo41oh3j","_id":"cix16db89004a90pysxpzaql2"},{"post_id":"cix16db8d004c90pynaopu3v1","tag_id":"cix16db8i004e90pygabtx7dy","_id":"cix16db8j004f90pyc1eep13k"},{"post_id":"cix16db8k004g90py0xvzgqkj","tag_id":"cix16db8l004i90pydboeb91u","_id":"cix16db8l004j90py0z2nv73s"}],"Tag":[{"name":"encoding","_id":"cix16db0c000490pygnvmk4ah"},{"name":"access-log","_id":"cix16db0i000990pysn5kiuwa"},{"name":"ssh","_id":"cix16db0p000e90pymbdss0zp"},{"name":"resource","_id":"cix16db0u000j90pyhnqi8z3y"},{"name":"spring mvc","_id":"cix16db16000o90pydltxdbq3"},{"name":"spi","_id":"cix16db1y000v90pyf2t4kjwp"},{"name":"shadowsocks","_id":"cix16db25001090py0iyfnbwy"},{"name":"re","_id":"cix16db28001490pylgkd4xbr"},{"name":"python-util","_id":"cix16db2e001990py2quo3k0w"},{"name":"placeholder","_id":"cix16db2i001e90py20wm3etk"},{"name":"postgresql","_id":"cix16db35001i90py94imhsiq"},{"name":"uml","_id":"cix16db3i001m90py3nrva7v7"},{"name":"mysql","_id":"cix16db3o001r90pynunpnnvk"},{"name":"netcat","_id":"cix16db3x001v90py8lsgx16h"},{"name":"机器学习","_id":"cix16db49002290pyl4ije4bn"},{"name":"ajax","_id":"cix16db4e002790py3agatd64"},{"name":"Javadoc","_id":"cix16db4t002c90py8wholjos"},{"name":"访问权限","_id":"cix16db4y002h90pyi0d42gm8"},{"name":"exception","_id":"cix16db51002l90pyiq5sx6xc"},{"name":"jackson","_id":"cix16db56002p90pyiksw8tss"},{"name":"template","_id":"cix16db5c002t90pybo41oh3j"},{"name":"hexo install","_id":"cix16db5m002x90pye1633052"},{"name":"shell","_id":"cix16db5s003190pyhfdw67j7"},{"name":"fabric  运维","_id":"cix16db64003590pyg3ebiyaw"},{"name":"自定义标签","_id":"cix16db69003a90pyzh9ofxbq"},{"name":"编码","_id":"cix16db6c003e90py1gkse2rc"},{"name":"spring","_id":"cix16db6w003o90pybb9crgzz"},{"name":"logback","_id":"cix16db7n004090py2u3h8st1"},{"name":"beanfactory","_id":"cix16db8i004e90pygabtx7dy"},{"name":"PropertyEditor","_id":"cix16db8l004i90pydboeb91u"}]}}