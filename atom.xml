<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KL&#39;s blog</title>
  <subtitle>越积极，越幸运</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://qsli.github.io/"/>
  <updated>2017-09-10T08:27:56.000Z</updated>
  <id>http://qsli.github.io/</id>
  
  <author>
    <name>Kevin Leo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用electron开发自己的工具</title>
    <link href="http://qsli.github.io/2017/09/10/electron/"/>
    <id>http://qsli.github.io/2017/09/10/electron/</id>
    <published>2017-09-10T08:14:12.000Z</published>
    <updated>2017-09-10T08:27:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="electron-简介"><a href="#electron-简介" class="headerlink" title="electron 简介"></a>electron 简介</h2><p>web是天生跨平台的。</p>
<p>前几年用ubuntu的时候，各种软件都没有相应的版本，十分的蛋疼。这几年随着web的发展，情况改善了许多。<br>比如说chrome的app， 安装好之后和原生的应用几乎没有区别，可以从ubuntu的dash里面搜索到，可以独立打开。</p>
<p><code>electron</code>则是直接整一个微型的chrome，加上html写的界面，直接做客户端。也有类似<code>atom</code>， <code>visual source code</code>等大型应用也是使用<code>electron</code>构建的。</p>
<img src="/2017/09/10/electron/electron.jpg" alt="electron.jpg" title="">
<h2 id="简单的想法"><a href="#简单的想法" class="headerlink" title="简单的想法"></a>简单的想法</h2><p>之前在windows平台，使用的非常顺手的一个剪贴板增强工具——<a href="http://www.appinn.com/clibor/" rel="external nofollow noopener noreferrer" target="_blank">Clibor – 来自日本的剪贴板辅助工具[Win] - 小众软件</a>， 这个软件非常好用的一个功能就是支持<code>定型文</code>。所谓的<code>定型文</code>就是你事先录制好的一些常用的<br>条目，然后当你需要使用的时候，按快捷键呼出界面，选中想要的<code>定型文</code>，直接就给你复制到了剪贴板，十分的方便。</p>
<img src="/2017/09/10/electron/item.png" alt="item.png" title="">
<p>windows不爽的就是shell不好用， 虽然有<code>cygwin</code>,<code>babun</code>，<code>cmder</code>等还算不错的终端，但是用起来卡卡的，所以最终我还是迁移到了ubuntu，各种命令，各种爽。</p>
<p>但是，作为一个后端的开发，每天要上服务器上查各种问题，各种长长的命令，各种记不住，所以还是要有一个类似小抄试的工具来增强下工作效率。恰巧，上次在youtube上看electorn的一个视频——<a href="https://www.youtube.com/watch?v=FNHBfN8c32U" rel="external nofollow noopener noreferrer" target="_blank">Electron: Desktop Apps with Web Languages - GitHub Universe 2016 - YouTube</a>。这个视频大概介绍了electron，介绍了一些使用electron开发的有意思的应用， 恰巧我看到了一个叫做<code>mojibar</code>的简单应用。</p>
<img src="/2017/09/10/electron/mojibar.gif" alt="mojibar.gif" title="">
<p>她的这个应用是，搜索moji表情对应的文字， 然后会筛选出来相应的结果，然后复制到剪贴板上，支持快捷键呼出。看到这个就瞬间来了灵感，这和我要的小抄应用简直十分吻合。好在<code>electron</code>并不复杂，就研究了下代码自己改造了一番，于是就有了这篇文章。</p>
<h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p>这个demo基本可以在日常的工作中使用了， github的repo在——<a href="https://github.com/qsLI/quake-select" rel="external nofollow noopener noreferrer" target="_blank">qsLI/quake-select</a></p>
<p>下面是界面的截图：</p>
<img src="/2017/09/10/electron/select.png" alt="select.png" title="">
<p>配置文件在json中，类似下面的形式：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"commands"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"desc"</span>: <span class="string">"查看jvm堆的使用情况"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"sudo -u tomcat jmap -heap  `pgrep -f 'tomcat'`"</span>,</div><div class="line">      <span class="attr">"tag"</span>: <span class="string">"opt"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"desc"</span>: <span class="string">"查看jvm最终加载的开关"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"java -XX:+PrintFlagsFinal -version"</span>,</div><div class="line">      <span class="attr">"tag"</span>: <span class="string">"opt"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"desc"</span>: <span class="string">""</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"sudo -u tomcat jcmd `pgrep -f tomcat` VM.flags"</span>,</div><div class="line">      <span class="attr">"tag"</span>: <span class="string">"opt"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"desc"</span>: <span class="string">"查看jvm加载的系统变量"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"sudo -u tomcat jcmd `pgrep -f tomcat` VM.system_properties"</span>,</div><div class="line">      <span class="attr">"tag"</span>: <span class="string">"opt"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"desc"</span>: <span class="string">"查看本机jcmd支持的命令"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"sudo -u tomcat jcmd `pgrep -f tomcat` help"</span>,</div><div class="line">      <span class="attr">"tag"</span>: <span class="string">"opt"</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>目前支持按照<code>command</code>和<code>tag</code>搜索， mojibar使用的这个库在ubuntu下菜单会显示不出来，以后有时间再fix。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="https://electron.atom.io/" rel="external nofollow noopener noreferrer" target="_blank">Electron | Build cross platform desktop apps with JavaScript, HTML, and CSS.</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/20225295" rel="external nofollow noopener noreferrer" target="_blank">使用 Electron 构建桌面应用 - 知乎专栏</a></p>
</li>
<li><p><a href="http://www.appinn.com/clibor/" rel="external nofollow noopener noreferrer" target="_blank">Clibor – 来自日本的剪贴板辅助工具[Win] - 小众软件</a></p>
</li>
<li><p><a href="https://www.youtube.com/watch?v=FNHBfN8c32U" rel="external nofollow noopener noreferrer" target="_blank">Electron: Desktop Apps with Web Languages - GitHub Universe 2016 - YouTube</a></p>
</li>
<li><p><a href="https://github.com/muan/mojibar" rel="external nofollow noopener noreferrer" target="_blank">muan/mojibar: Emoji searcher but as a menubar app.</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;electron-简介&quot;&gt;&lt;a href=&quot;#electron-简介&quot; class=&quot;headerlink&quot; title=&quot;electron 简介&quot;&gt;&lt;/a&gt;electron 简介&lt;/h2&gt;&lt;p&gt;web是天生跨平台的。&lt;/p&gt;
&lt;p&gt;前几年用ubuntu的时候，各
    
    </summary>
    
      <category term="fe" scheme="http://qsli.github.io/categories/fe/"/>
    
    
      <category term="electron" scheme="http://qsli.github.io/tags/electron/"/>
    
  </entry>
  
  <entry>
    <title>Linux下删除文件</title>
    <link href="http://qsli.github.io/2017/09/10/how-to-delete-file-correctly/"/>
    <id>http://qsli.github.io/2017/09/10/how-to-delete-file-correctly/</id>
    <published>2017-09-10T04:20:09.000Z</published>
    <updated>2017-09-10T04:20:09.253Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a>文件存储</h1><img src="/2017/09/10/how-to-delete-file-correctly/inode.png" alt="linux文件的存储" title="linux文件的存储">
<h2 id="软链接和硬链接"><a href="#软链接和硬链接" class="headerlink" title="软链接和硬链接"></a>软链接和硬链接</h2><p>软链接(Symbolic Link):</p>
<p>硬链接(Hard Link):</p>
<blockquote>
<p>硬链接就是在Directory中加入一条filename和Inode的对应关系，所以如果你删除了原来的文件，是不对硬链接文件有任何影响的，因为删除文件就是将link count 减少，当发现指向Inode为filename数量0的时候，系统会回收相应的Inode和Block空间。但是软链接就不同了，在Linux下所有的都是文件，所以软链接也有自己的Inode和block ，但是创建软链接不会在增加原文件Inode-Index，当删除原文件的时候，相应的Index不再能找到，所以导致软链接不能用。但是软链接有自身的优势，可以跨分区，这样就可以解决当前Inode数据区不足够写入，可以使用软链接指向空间充足的空间。</p>
</blockquote>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>软链接  硬链接 区别</p>
<img src="/2017/09/10/how-to-delete-file-correctly/links.png" alt="软链接和硬链接的区别" title="软链接和硬链接的区别">
<h2 id="文件是否被占用"><a href="#文件是否被占用" class="headerlink" title="文件是否被占用"></a>文件是否被占用</h2><p>一切皆文件，所以lsof（list open file）就很重要</p>
<p>lsof -i ：8080 查看端口占用</p>
<p>socket 也是文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo lsof  catalina.out</div><div class="line"></div><div class="line">COMMAND   PID   USER   FD   TYPE DEVICE SIZE/OFF     NODE NAME</div><div class="line">java    40916 tomcat    1w   REG    8,7   933679 27656540 catalina.out</div><div class="line">java    40916 tomcat    2w   REG    8,7   933679 27656540 catalina.out</div></pre></td></tr></table></figure>
<blockquote>
<p>‘‘REG’’ for a regular file<br>FD         is the File Descriptor number of the file or:</p>
</blockquote>
<pre><code>     cwd  current working directory;
     Lnn  library references (AIX);
     err  FD information error (see NAME column);
     jld  jail directory (FreeBSD);
     ltx  shared library text (code and data);
     Mxx  hex memory-mapped type number xx.
     m86  DOS Merge mapped file;
     mem  memory-mapped file;
     mmap memory-mapped device;
     pd   parent directory;
     rtd  root directory;
     tr   kernel trace file (OpenBSD);
     txt  program text (code and data);
     v86  VP/ix mapped file;

FD is followed by one of these characters, describing the mode under which the file is open:

     r for read access;
     w for write access;
     u for read and write access;
     space if mode unknown and no lock
          character follows;
     ‘-’ if mode unknown and lock
          character follows.
</code></pre><p>可以看出上面的文件的fd是1, w权限</p>
<p>系统，每个进程，文件描述符。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ls /proc/40916/fd</div></pre></td></tr></table></figure>
<p>下面的两个命令是等价的：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo cat /proc/40916/fd/2</div><div class="line"></div><div class="line">sudo cat catalina.out</div></pre></td></tr></table></figure>
<h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>删除文件之前应该先看下文件的占用情况，<code>lsof</code>可以查看到文件被哪个进程占用。</p>
<p>如果被占用，直接使用<code>rm</code>删除相当于只是删除了文件名和inode的关联, 但是文件占用的空间还在(block), 应该使用下面的命令进行删除：</p>
<blockquote>
<p>You misunderstand: deletion will be complete only after all processes using the file at the time of deletion have reached completion: only then the deleted inode will be returned to the pool of available inodes, and the content of the file may begin to be corrupted by over-writing. Until then, the inode is alive and well, and is pointing to the area of the disk containing the file in question. As soon as less completes, the soft link will disappear, and so will the file testing.txt.</p>
<pre><code>当我们使用rm命令的时候，系统并不会真正删除这个资料。除非有档案非要将资料存储在原来档案的这些block中。这样原来的block就会被新档案给覆盖掉。 
</code></pre></blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cat /dev/null &gt; filename</div><div class="line">或者</div><div class="line">truncate <span class="_">-s</span> 0 filename</div></pre></td></tr></table></figure>
<h3 id="stat-命令"><a href="#stat-命令" class="headerlink" title="stat 命令"></a>stat 命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">sudo <span class="built_in">stat</span> /proc/40916/fd/2</div><div class="line"></div><div class="line">File: `/proc/40916/fd/2<span class="string">' -&gt; `/home/q/www/qta.open.coupon.provider/logs/catalina.out'</span></div><div class="line">  Size: 64        	Blocks: 0          IO Block: 1024   symbolic link</div><div class="line">Device: 3h/3d	Inode: 3017464897  Links: 1</div><div class="line">Access: (0300/l-wx------)  Uid: (40001/  tomcat)   Gid: (40001/  tomcat)</div><div class="line">Access: 2017-07-05 05:05:06.318550652 +0800</div><div class="line">Modify: 2017-06-15 12:35:24.590599522 +0800</div><div class="line">Change: 2017-06-15 12:35:24.590599522 +0800</div><div class="line"></div><div class="line"></div><div class="line">sudo <span class="built_in">stat</span> catalina.out</div><div class="line"></div><div class="line">File: `catalina.out<span class="string">'</span></div><div class="line">  Size: 962851    	Blocks: 1896       IO Block: 4096   regular file</div><div class="line">Device: 807h/2055d	Inode: 27656540    Links: 1</div><div class="line">Access: (0644/-rw-r--r--)  Uid: (40001/  tomcat)   Gid: (40001/  tomcat)</div><div class="line">Access: 2017-07-06 00:51:44.243427414 +0800</div><div class="line">Modify: 2017-07-06 00:52:27.096557541 +0800</div><div class="line">Change: 2017-07-06 00:52:27.096557541 +0800</div><div class="line"></div><div class="line">sudo ls -i /proc/40916/fd/2</div><div class="line"></div><div class="line">3017464897 /proc/40916/fd/2</div></pre></td></tr></table></figure>
<p>可以看出, 文件描述符是一个软链接.</p>
<h3 id="目录下的文件占用空间很小-但是目录占用空间很大"><a href="#目录下的文件占用空间很小-但是目录占用空间很大" class="headerlink" title="目录下的文件占用空间很小, 但是目录占用空间很大"></a>目录下的文件占用空间很小, 但是目录占用空间很大</h3><p>这种情况, 最常见的就是文件被删除了, 但是还有进程占用它. 于是这个文件占用的block就没有释放掉.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo lsof | grep deleted</div></pre></td></tr></table></figure>
<p>使用上面的命令就可以看到,那些文件被删除了, 但是还在被占用.  kill掉相应的进程, 空间就自己回来了.</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/lsof.html" rel="external nofollow noopener noreferrer" target="_blank">3. lsof 一切皆文件 — Linux Tools Quick Tutorial</a></p>
</li>
<li><p><a href="https://unix.stackexchange.com/questions/92384/how-to-clean-log-file" rel="external nofollow noopener noreferrer" target="_blank">How to clean log file? - Unix &amp; Linux Stack Exchange</a></p>
</li>
<li><p><a href="https://unix.stackexchange.com/questions/88808/empty-the-contents-of-a-file" rel="external nofollow noopener noreferrer" target="_blank">shell script - Empty the contents of a file - Unix &amp; Linux Stack Exchange</a></p>
</li>
<li><p><a href="http://himichaelchu.iteye.com/blog/2116023" rel="external nofollow noopener noreferrer" target="_blank">通过Inode原理分析Linux中ln命令 - Michael Chu - ITeye技术网站</a></p>
</li>
<li><p><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-hardandsymb-links/index.html" rel="external nofollow noopener noreferrer" target="_blank">理解 Linux 的硬链接与软链接</a></p>
</li>
<li><p><a href="https://superuser.com/questions/1112781/why-do-symbolic-links-in-prox-pid-fd-act-as-hard-links" rel="external nofollow noopener noreferrer" target="_blank">linux - why do symbolic links in /prox/$PID/fd/ act as hard links? - Super User</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;文件存储&quot;&gt;&lt;a href=&quot;#文件存储&quot; class=&quot;headerlink&quot; title=&quot;文件存储&quot;&gt;&lt;/a&gt;文件存储&lt;/h1&gt;&lt;img src=&quot;/2017/09/10/how-to-delete-file-correctly/inode.png&quot; alt
    
    </summary>
    
      <category term="linux" scheme="http://qsli.github.io/categories/linux/"/>
    
    
      <category term="lsof" scheme="http://qsli.github.io/tags/lsof/"/>
    
  </entry>
  
  <entry>
    <title>top用法</title>
    <link href="http://qsli.github.io/2017/09/09/top/"/>
    <id>http://qsli.github.io/2017/09/09/top/</id>
    <published>2017-09-09T09:31:18.000Z</published>
    <updated>2017-09-10T04:22:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>top是了解系统状况最常用的命令，从top的输出我们可以很好的掌握系统的CPU, 内存，swap，进程的相关信息。</p>
<p>下面说下top的基本用法：</p>
<p><br><br></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[qisheng.li@xxx /home/www/xxx]$ sudo top</div><div class="line"></div><div class="line">top - 15:19:54 up 200 days,  4:06,  1 user,  load average: 5.91, 6.14, 5.57</div><div class="line">Tasks: 499 total,   1 running, 498 sleeping,   0 stopped,   0 zombie</div><div class="line">Cpu(s): 20.1%us,  1.2%sy,  0.0%ni, 78.4%id,  0.0%wa,  0.0%hi,  0.4%si,  0.0%st</div><div class="line">Mem:  65979844k total, 65004736k used,   975108k free,     8108k buffers</div><div class="line">Swap: 50331644k total,    29364k used, 50302280k free,  5530672k cached</div><div class="line"></div><div class="line">  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                                            </div><div class="line"> 8468 tomcat    20   0 71.2g  55g 6484 S 492.3 87.8  32033:12 java                                                                              </div><div class="line"> 1256 tomcat    20   0 6055m 251m 2504 S 24.9  0.4  41886:22 java                                                                               </div><div class="line"> 2446 root      20   0 15304 1568  928 R  0.7  0.0   0:00.11 top                                                                                </div><div class="line">30593 root      20   0  526m  31m 3208 S  0.3  0.0   0:15.41 salt-minion                                                                        </div><div class="line">    1 root      20   0 19232  632  384 S  0.0  0.0  11:49.23 init                                                                               </div><div class="line">    2 root      20   0     0    0    0 S  0.0  0.0   0:00.32 kthreadd                                                                           </div><div class="line">    3 root      RT   0     0    0    0 S  0.0  0.0   2:55.22 migration/0                                                                        </div><div class="line">    4 root      20   0     0    0    0 S  0.0  0.0   5:49.74 ksoftirqd/0                                                                        </div><div class="line">    5 root      RT   0     0    0    0 S  0.0  0.0   0:00.00 stopper/0</div></pre></td></tr></table></figure>
<h3 id="系统概况"><a href="#系统概况" class="headerlink" title="系统概况"></a>系统概况</h3><p> 从输出的第一行来看， 首先是系统的uptime信息(使用<code>uptime</code>也可以查看)， 可以看到系统已经运行了200天了，是在<code>15：19：54</code>这个时间点启动起来的， <code>4：06</code> 是当前的时间， 当前只有一个用户登录(使用<code>w</code>也可以查看当前的登录用户)。 还有就是系统的负载——load average，这个有三个值，分别是1分钟的平均负载， 5分钟的， 15分钟的（<code>uptime</code>的输出信息中也有这个）。</p>
<p> 第二行包含了系统进程的一些统计信息，Tasks是运行队列中的任务个数（Linux run-queue）， 还有一些其他状态的进程的个数信息</p>
<blockquote>
<ul>
<li><p><strong>running</strong>:  CPU 上运行的和将要被调度运行的；</p>
</li>
<li><p><strong>sleeping</strong>: 通常是等待事件(比如 IO 操作)完成的任务，细分可以包括 interruptible 和 uninterruptible 的类型；</p>
</li>
<li><p><strong>stopped</strong>: 是一些被暂停的任务，通常发送 SIGSTOP 或者对一个前台任务操作 Ctrl-Z 可以将其暂停；</p>
</li>
<li><p><strong>zombie</strong>: 僵尸任务，虽然进程终止资源会被自动回收，但是含有退出任务的 task descriptor 需要父进程访问后才能释放，这种进程显示为 <code>defunct</code> 状态，无论是因为父进程提前退出还是未 wait 调用，出现这种进程都应该格外注意程序是否设计有误。</p>
</li>
</ul>
</blockquote>
<h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><p> 第三行是CPU的一些信息，各个部分的占用都很明确。</p>
<blockquote>
<ul>
<li><p>(us) user：CPU 在低 nice 值(高优先级)用户态所占用的时间(nice&lt;=0)。正常情况下只要服务器不是很闲，那么大部分的 CPU 时间应该都在此执行这类程序</p>
</li>
<li><p>(sy) system：CPU 处于内核态所占用的时间，操作系统通过系统调用(system call)从用户态陷入内核态，以执行特定的服务；通常情况下该值会比较小，但是当服务器执行的 IO 比较密集的时候，该值会比较大</p>
</li>
<li><p>(ni) nice：CPU 在高 nice 值(低优先级)用户态以低优先级运行占用的时间(nice&gt;0)。默认新启动的进程 nice=0，是不会计入这里的，除非手动通过 renice 或者 setpriority() 的方式修改程序的nice值</p>
</li>
<li><p>(id) idle：CPU 在空闲状态(执行 kernel idle handler )所占用的时间</p>
</li>
<li><p>(wa) iowait：等待 IO 完成做占用的时间</p>
</li>
<li><p>(hi) irq：系统处理硬件中断所消耗的时间</p>
</li>
<li><p>(si) softirq：系统处理软中断所消耗的时间，记住软中断分为 softirqs、tasklets (其实是前者的特例)、work queues，不知道这里是统计的是哪些的时间，毕竟 work queues 的执行已经不是中断上下文了</p>
</li>
<li><p>(st) steal：在虚拟机情况下才有意义，因为虚拟机下 CPU 也是共享物理 CPU 的，所以这段时间表明虚拟机等待 hypervisor 调度 CPU 的时间，也意味着这段时间 hypervisor 将 CPU 调度给别的 CPU 执行，这个时段的 CPU 资源被“stolen”了。这个值在我 KVM 的 VPS 机器上是不为 0 的，但也只有 0.1 这个数量级，是不是可以用来判断 VPS 超售的情况？</p>
</li>
</ul>
</blockquote>
<p>iowait所包含的信息其实是非常少的，具体的解释可以看<strong>参考3</strong>中的文章，讲的非常好.</p>
<blockquote>
<p>%iowait 表示在一个采样周期内有百分之几的时间属于以下情况：CPU空闲、并且有仍未完成的I/O请求</p>
</blockquote>
<h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p>第四行主要是内存使用的相关信息， 系统的内存总共有<code>65979844k</code>， 已经使用<code>65004736k</code>, <code>975108k</code>可用， <code>8108k</code>缓存, </p>
<p>65979844k = 65004736k + 975108k</p>
<p>可见缓存的也包含在可用的内存中。</p>
<p>这些信息也可以通过<code>free -k</code> （还可以-m, -g 表示展示的单位），<code>free</code>的输出如下:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[qisheng.li@xxx /home/www/xxx]$ free -k</div><div class="line">             total       used       free     shared    buffers     cached</div><div class="line">Mem:      65979844   64863960    1115884        112       8824    5331160</div><div class="line">-/+ buffers/cache:   59523976    6455868 </div><div class="line">Swap:     50331644      29364   50302280</div></pre></td></tr></table></figure>
<p><code>vmstat</code> 也可以看到系统的内存状况：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[qisheng.li@xxx /home/www/xxx]$ vmstat 1 3 | column -t</div><div class="line">procs  -----------memory----------  ---swap--  -----io----  --system--  -----cpu-----</div><div class="line">r      b                            swpd       free         buff        cache          si  so  bi   bo   <span class="keyword">in</span>     cs     us  sy  id  wa  st</div><div class="line">5      1                            29364      2231704      8808        4214104        0   0   124  230  0      0      15  1   84  0   0</div><div class="line">6      0                            29364      2219016      8908        4225260        0   0   668  132  47040  68271  25  2   72  0   0</div><div class="line">5      0                            29364      2209552      8916        4234020        0   0   512  12   37178  52578  20  2   78  0   0</div></pre></td></tr></table></figure>
<p>第五行和第四行类似，输出的是swap的使用情况。</p>
<h3 id="进程的详细信息"><a href="#进程的详细信息" class="headerlink" title="进程的详细信息"></a>进程的详细信息</h3><blockquote>
<p>PID：进程的ID<br>USER：进程所有者<br>PR：进程的优先级别，越小越优先被执行<br>NI：nice值<br>VIRT：进程占用的虚拟内存<br>RES：进程占用的物理内存<br>SHR：进程使用的共享内存<br>S：进程的状态。S表示休眠，R表示正在运行，Z表示僵死状态，N表示该进程优先值为负数<br>%CPU：进程占用CPU的使用率<br>%MEM：进程使用的物理内存和总内存的百分比<br>TIME+：该进程启动后占用的总的CPU时间，即占用CPU使用时间的累加值。<br>COMMAND：进程启动命令名称</p>
</blockquote>
<h2 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h2><h3 id="交互命令"><a href="#交互命令" class="headerlink" title="交互命令"></a>交互命令</h3><ul>
<li><p>按照CPU占用排序： 交互模式下输入： <code>P</code></p>
</li>
<li><p>按照内存排序： 交互模式下输入： <code>M</code></p>
</li>
<li><p>杀死进程： 交互模式下输入: <code>k</code>, 然后根据提示输入相应的<code>pid</code></p>
</li>
<li><p>更改刷新时间： 交互模式下输入: <code>d</code>或者<code>s</code>, 然后输入相应的刷新值</p>
</li>
<li><p>显示CPU的每个核的使用情况： 交互模式下输入： 键盘上的<code>1</code></p>
</li>
</ul>
<p>top的显示界面会展开：</p>
<img src="/2017/09/09/top/cpu.png" alt="cpu.png" title="">
<ul>
<li>高亮模式： 交互模式下输入: ‘z’</li>
</ul>
<img src="/2017/09/09/top/highlight.png" alt="highlight.png" title="">
<ul>
<li>高亮当前的排序列(需要在z模式下)： 交互模式下输入: ‘x’</li>
</ul>
<img src="/2017/09/09/top/highlight-sort.png" alt="highlight-sort.png" title="">
<ul>
<li><p>改变排序列： 交互模式下按<code>shift</code> + <code>&lt;</code>或<code>&gt;</code></p>
</li>
<li><p>增加显示的Field： 交互模式下按<code>f</code>, 然后选择想要展示的列</p>
</li>
</ul>
<img src="/2017/09/09/top/fields.png" alt="fields.png" title="">
<ul>
<li><p>显示到线程级别： 交互模式下按<code>H</code></p>
</li>
<li><p>显示完整的命令名称: 交互模式下按<code>c</code></p>
</li>
<li><p>分类显示各种系统资源高的进程： 交互模式下按<code>A</code></p>
</li>
</ul>
<img src="/2017/09/09/top/top-a.png" alt="top-a.png" title="">
<h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><ul>
<li>显示某个进程的线程信息</li>
</ul>
<p><code>top -p &lt;PID&gt; -H</code></p>
<p>其中 <code>-H</code>是指显示线程的信息，可以看到每个线程的CPU占用情况</p>

<ul>
<li>显示完整的命令： <code>-c</code></li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><p><a href="http://kumu-linux.github.io/blog/2013/06/07/top-hacks/" rel="external nofollow noopener noreferrer" target="_blank">top实践小技巧 - OPS Notes By 枯木</a></p>
</li>
<li><p><a href="http://mp.weixin.qq.com/s?__biz=MzAxMzQ3NzQ3Nw==&amp;mid=2654249787&amp;idx=2&amp;sn=7aa8e765fda84d5fa26580c210585c53&amp;chksm=8061f031b716792776833370019a9fc4c79fa40ea7db5b4ccb165b90919056acaffd3d971d94&amp;mpshare=1&amp;scene=1&amp;srcid=0801QspCI2Xo04BsZlP6pCVb##" rel="external nofollow noopener noreferrer" target="_blank">Linux服务器的那些性能参数指标</a></p>
</li>
<li><p><a href="http://linuxperf.com/?p=33" rel="external nofollow noopener noreferrer" target="_blank">理解 %iowait (%wio) | Linux Performance</a></p>
</li>
<li><p><a href="http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/top.html" rel="external nofollow noopener noreferrer" target="_blank">8. top linux下的任务管理器 — Linux Tools Quick Tutorial</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h1&gt;&lt;h2 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h
    
    </summary>
    
      <category term="linux" scheme="http://qsli.github.io/categories/linux/"/>
    
    
      <category term="top" scheme="http://qsli.github.io/tags/top/"/>
    
  </entry>
  
  <entry>
    <title>jvm-flag</title>
    <link href="http://qsli.github.io/2017/06/03/jvm-flag/"/>
    <id>http://qsli.github.io/2017/06/03/jvm-flag/</id>
    <published>2017-06-02T17:29:51.000Z</published>
    <updated>2017-08-13T14:17:13.142Z</updated>
    
    <content type="html"><![CDATA[<p>jinfo</p>
<p>-Xss</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jinfo&lt;/p&gt;
&lt;p&gt;-Xss&lt;/p&gt;

    
    </summary>
    
      <category term="java" scheme="http://qsli.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>maven-scope</title>
    <link href="http://qsli.github.io/2017/06/01/maven-scope/"/>
    <id>http://qsli.github.io/2017/06/01/maven-scope/</id>
    <published>2017-05-31T16:42:54.000Z</published>
    <updated>2017-05-31T16:42:54.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="scope-作用"><a href="#scope-作用" class="headerlink" title="scope 作用"></a>scope 作用</h2><blockquote>
<p>Dependency scope is used to limit the transitivity of a dependency, and also to affect the classpath used for various build tasks.</p>
</blockquote>
<p>主要是限制依赖的传递性，比如有些jar包只会在测试的时候才会有效，部署的时候不会生效。</p>
<p>scope的分类：</p>
<table>
<thead>
<tr>
<th>scope</th>
<th>生效时机</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>compiled</td>
<td>编译/测试/运行</td>
<td>默认</td>
</tr>
<tr>
<td>provided</td>
<td>编译/测试</td>
<td>servlet-api 由tomcat等容器提供</td>
</tr>
<tr>
<td>runtime</td>
<td>运行</td>
<td>编译的时候只需要，JDBC API， 运行的时候必须要有JDBC驱动实现</td>
</tr>
<tr>
<td>test</td>
<td>测试的时候才引入</td>
<td>junit 只在测试的时候生效</td>
</tr>
<tr>
<td>system</td>
<td>编译/测试</td>
<td>必须显式的提供jar的本地文件系统路径</td>
</tr>
<tr>
<td>import</td>
<td>只支持<code>dependencyManagement</code>元素下的type是pom的节点</td>
<td>only available in Maven 2.0.9 or later</td>
</tr>
</tbody>
</table>
<h3 id="import-scope"><a href="#import-scope" class="headerlink" title="import scope"></a>import scope</h3><p>使用方</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.air<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>haha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;com.air.haha.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div></pre></td></tr></table></figure>
<p>com.air.haha的声明</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.air<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>haha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>haha<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>test<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>a<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>test<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>b<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<p>使用方在使用的时候就可以不用指定，haha中包含的依赖的版本，默认就会使用haha中声明的版本。这样在升级的时候，可以保证依赖一同的升级。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html" rel="external nofollow noopener noreferrer" target="_blank">Maven – Introduction to the Dependency Mechanism</a></p>
</li>
<li><p>《Maven权威指南》—— 9.4 （项目依赖）</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;scope-作用&quot;&gt;&lt;a href=&quot;#scope-作用&quot; class=&quot;headerlink&quot; title=&quot;scope 作用&quot;&gt;&lt;/a&gt;scope 作用&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Dependency scope is used to limit
    
    </summary>
    
      <category term="java" scheme="http://qsli.github.io/categories/java/"/>
    
    
      <category term="maven" scheme="http://qsli.github.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>hexo迁移到ubuntu</title>
    <link href="http://qsli.github.io/2017/04/19/hexo-ubuntu/"/>
    <id>http://qsli.github.io/2017/04/19/hexo-ubuntu/</id>
    <published>2017-04-18T16:08:15.397Z</published>
    <updated>2017-04-18T16:08:15.397Z</updated>
    
    <content type="html"><![CDATA[<p>系统切换到ubuntu之后，使用的apt安装的node，默认权限是sudo。安装hexo之后也必须以sudo身份执行。<br>需要修改下node的权限，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  qsli.github.com (hexo|✚1…)  npm config get prefix</div><div class="line">/usr/local</div></pre></td></tr></table></figure>
<p>修改owner</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chown -R $(whoami) $(npm config get prefix)/&#123;lib/node_modules,bin,share&#125;</div></pre></td></tr></table></figure>
<p>修改owner之后就可以正常执行hexo了。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://docs.npmjs.com/getting-started/fixing-npm-permissions" rel="external nofollow noopener noreferrer" target="_blank">03 - Fixing npm permissions | npm Documentation</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;系统切换到ubuntu之后，使用的apt安装的node，默认权限是sudo。安装hexo之后也必须以sudo身份执行。&lt;br&gt;需要修改下node的权限，命令如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
    
    </summary>
    
      <category term="hexo" scheme="http://qsli.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://qsli.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>web.xml</title>
    <link href="http://qsli.github.io/2017/04/16/web-xml/"/>
    <id>http://qsli.github.io/2017/04/16/web-xml/</id>
    <published>2017-04-16T12:04:59.114Z</published>
    <updated>2017-04-16T12:04:59.114Z</updated>
    
    <content type="html"><![CDATA[<h2 id="load-on-startup标签"><a href="#load-on-startup标签" class="headerlink" title="load-on-startup标签"></a>load-on-startup标签</h2><blockquote>
<p>Servlets are initialized either lazily at request processing time or eagerly during<br>deployment. In the latter case, they are initialized in the order indicated by<br>their load-on-startup elements.</p>
</blockquote>
<p>在web容器启动的时候，可以采用<code>lazily</code>加载的方式和<code>eagerly</code>的方式。</p>
<p><code>load-on-startup</code>中的值决定了进行哪种方式。</p>
<blockquote>
<p>If the value is a negative integer, or the element is not present, the<br>container is free to load the servlet whenever it chooses. If the value is a positive<br>integer or 0, the container must load and initialize the servlet as the application is<br>deployed.</p>
</blockquote>
<p>如果<load-on-startup>这个元素没有出现，或者出现了但是里面的值是负的，容器可以按照自己的需要选择加载Servlet的时机。</load-on-startup></p>
<p>如果里面的值是正数或者0，容器必须保证在容器启动的时候加载和初始化这个servlet</p>
<blockquote>
<p> The container must guarantee that servlets marked with lower integers<br>are loaded before servlets marked with higher integers.</p>
</blockquote>
<p>这个值越小，优先级越高，容器优先加载。</p>
<blockquote>
<p>The container may choose<br>the order of loading of servlets with the same load-on-startup value.</p>
</blockquote>
<p>如果里面的值是一样的，那么加载的顺序由容器来决定（不同实现可能不同）</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li>Java Servlet Specification 3.0</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;load-on-startup标签&quot;&gt;&lt;a href=&quot;#load-on-startup标签&quot; class=&quot;headerlink&quot; title=&quot;load-on-startup标签&quot;&gt;&lt;/a&gt;load-on-startup标签&lt;/h2&gt;&lt;blockquote&gt;

    
    </summary>
    
      <category term="tomcat" scheme="http://qsli.github.io/categories/tomcat/"/>
    
    
      <category term="servlet" scheme="http://qsli.github.io/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title>tomcat连接数相关的配置</title>
    <link href="http://qsli.github.io/2017/04/05/tomcat-connection/"/>
    <id>http://qsli.github.io/2017/04/05/tomcat-connection/</id>
    <published>2017-04-04T17:22:17.000Z</published>
    <updated>2017-04-16T12:03:23.409Z</updated>
    
    <content type="html"><![CDATA[<p><em>以下是tomcat7的一些配置说明</em></p>
<h1 id="tomcat交互图"><a href="#tomcat交互图" class="headerlink" title="tomcat交互图"></a>tomcat交互图</h1><img src="/2017/04/05/tomcat-connection/tomcat-interaction.jpg" alt="图片取自参考1" title="图片取自参考1">
<h2 id="maxConnections"><a href="#maxConnections" class="headerlink" title="maxConnections"></a>maxConnections</h2><p>tomcat接受的最大连接的个数，超过这个连接个数，acceptor就会阻塞。</p>
<blockquote>
<p>The maximum number of connections that the server will accept and process at any given time. When this number has been reached, the server will accept, but not process, one further connection. This additional connection be blocked until the number of connections being processed falls below maxConnections at which point the server will start accepting and processing new connections again. Note that once the limit has been reached, the operating system may still accept connections based on the acceptCount setting. The default value varies by connector type. For BIO the default is the value of maxThreads unless an Executor is used in which case the default will be the value of maxThreads from the executor. For NIO the default is 10000. For APR/native, the default is 8192.</p>
</blockquote>
<p>需要注意的是，在BIO模式下，<code>maxConnections</code>的值默认等于<code>maxThreads</code>的值!!!</p>
<p>达到maxConnections之后，acceptor线程就会阻塞，用jstack查看堆栈会发现Acceptor线程阻塞在下面的代码</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo -u tomcat jstack  `pgrep <span class="_">-f</span> <span class="string">'tomcat'</span>` | less</div></pre></td></tr></table></figure>
<p>tomcat  7的源码中相应的代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//if we have reached max connections, wait</span></div><div class="line">countUpOrAwaitConnection();</div></pre></td></tr></table></figure>
<p>函数的具体实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">countUpOrAwaitConnection</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">    <span class="keyword">if</span> (maxConnections==-<span class="number">1</span>) <span class="keyword">return</span>;</div><div class="line">    LimitLatch latch = connectionLimitLatch;</div><div class="line">    <span class="keyword">if</span> (latch!=<span class="keyword">null</span>) latch.countUpOrAwait();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中<code>LimitLatch</code>是tomcat自己实现的一个类似<code>CountDownLatch</code>的东西。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Shared latch that allows the latch to be acquired a limited number of times</div><div class="line"> * after which all subsequent requests to acquire the latch will be placed in a</div><div class="line"> * FIFO queue until one of the shares is returned.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LimitLatch</span> </span>&#123;...&#125;</div></pre></td></tr></table></figure>
<p>它的初始化过程：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> LimitLatch <span class="title">initializeConnectionLatch</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (maxConnections==-<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (connectionLimitLatch==<span class="keyword">null</span>) &#123;</div><div class="line">        connectionLimitLatch = <span class="keyword">new</span> LimitLatch(getMaxConnections());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> connectionLimitLatch;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="maxThreads"><a href="#maxThreads" class="headerlink" title="maxThreads"></a>maxThreads</h2><p>tomcat的连接线程最大个数。</p>
<blockquote>
<p>The maximum number of request processing threads to be created by this Connector, which therefore determines the maximum number of simultaneous requests that can be handled. If not specified, this attribute is set to 200. If an executor is associated with this connector, this attribute is ignored as the connector will execute tasks using the executor rather than an internal thread pool. Note that if an executor is configured any value set for this attribute will be recorded correctly but it will be reported (e.g. via JMX) as -1 to make clear that it is not used.</p>
<p>maxThreads、minSpareThreads是tomcat工作线程池的配置参数，maxThreads就相当于jdk线程池的maxPoolSize，而minSpareThreads就相当于jdk线程池的corePoolSize。</p>
</blockquote>
<p>相应的代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createExecutor</span><span class="params">()</span> </span>&#123;</div><div class="line">    internalExecutor = <span class="keyword">true</span>;</div><div class="line">    TaskQueue taskqueue = <span class="keyword">new</span> TaskQueue();</div><div class="line">    TaskThreadFactory tf = <span class="keyword">new</span> TaskThreadFactory(getName() + <span class="string">"-exec-"</span>, daemon, getThreadPriority());</div><div class="line">    executor = <span class="keyword">new</span> ThreadPoolExecutor(getMinSpareThreads(), getMaxThreads(), <span class="number">60</span>, TimeUnit.SECONDS,taskqueue, tf);</div><div class="line">    taskqueue.setParent( (ThreadPoolExecutor) executor);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="acceptCount"><a href="#acceptCount" class="headerlink" title="acceptCount"></a>acceptCount</h2><p>系统积压队列的大小。</p>
<blockquote>
<p>The maximum queue length for incoming connection requests when all possible request processing threads are in use. Any requests received when the queue is full will be refused. The default value is 100.</p>
</blockquote>
<p>tomcat7的源码中有这么一段，大概就是别名的替换。<code>acceptCount</code>被替换成了<code>backlog</code>，<code>backlog</code>的意思是积压的东西。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> &#123;</div><div class="line">    replacements.put(<span class="string">"acceptCount"</span>, <span class="string">"backlog"</span>);</div><div class="line">    replacements.put(<span class="string">"connectionLinger"</span>, <span class="string">"soLinger"</span>);</div><div class="line">    replacements.put(<span class="string">"connectionTimeout"</span>, <span class="string">"soTimeout"</span>);</div><div class="line">    replacements.put(<span class="string">"rootFile"</span>, <span class="string">"rootfile"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>acceptCount</code>是在初始<code>bind</code>的时候传给jdk的<code>bind</code>函数的，最终会传递到系统层。<br>以<code>NioEndpoint</code>为例，大概如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Initialize the endpoint.</div><div class="line">    */</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">       serverSock = ServerSocketChannel.open();</div><div class="line">       socketProperties.setProperties(serverSock.socket());</div><div class="line">       InetSocketAddress addr = (getAddress()!=<span class="keyword">null</span>?<span class="keyword">new</span> InetSocketAddress(getAddress(),getPort()):<span class="keyword">new</span> InetSocketAddress(getPort()));</div><div class="line">       serverSock.socket().bind(addr,getBacklog());</div><div class="line">       serverSock.configureBlocking(<span class="keyword">true</span>); <span class="comment">//mimic APR behavior</span></div><div class="line">       serverSock.socket().setSoTimeout(getSocketProperties().getSoTimeout());</div><div class="line"></div><div class="line">       <span class="comment">// Initialize thread count defaults for acceptor, poller</span></div><div class="line">       <span class="keyword">if</span> (acceptorThreadCount == <span class="number">0</span>) &#123;</div><div class="line">           <span class="comment">// <span class="doctag">FIXME:</span> Doesn't seem to work that well with multiple accept threads</span></div><div class="line">           acceptorThreadCount = <span class="number">1</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (pollerThreadCount &lt;= <span class="number">0</span>) &#123;</div><div class="line">           <span class="comment">//minimum one poller thread</span></div><div class="line">           pollerThreadCount = <span class="number">1</span>;</div><div class="line">       &#125;</div><div class="line">       stopLatch = <span class="keyword">new</span> CountDownLatch(pollerThreadCount);</div><div class="line"></div><div class="line">       <span class="comment">// Initialize SSL if needed</span></div><div class="line">       <span class="keyword">if</span> (isSSLEnabled()) &#123;</div><div class="line">          <span class="comment">//ssl stuff</span></div><div class="line">          <span class="comment">//...</span></div><div class="line">          <span class="comment">//...</span></div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (oomParachute&gt;<span class="number">0</span>) reclaimParachute(<span class="keyword">true</span>);</div><div class="line">       selectorPool.open();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>看下<code>getBackLog</code>的实现(<code>AbstractEndpoint</code>)：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Allows the server developer to specify the backlog that</div><div class="line"> * should be used for server sockets. By default, this value</div><div class="line"> * is 100.</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> backlog = <span class="number">100</span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBacklog</span><span class="params">(<span class="keyword">int</span> backlog)</span> </span>&#123; <span class="keyword">if</span> (backlog &gt; <span class="number">0</span>) <span class="keyword">this</span>.backlog = backlog; &#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBacklog</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> backlog; &#125;</div></pre></td></tr></table></figure>
<p>默认值大小是<code>100</code>。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>tomcat的<code>Acceptor</code>线程会不停的从系统的全连接队列里去拿对应的socket连接，直到达到了<code>maxConnections</code>的值。<br>之后<code>Acceptor</code>会阻塞在那里，直到处理的连接小于<code>maxConnections</code>的值。如果一直阻塞的话，就会在系统的tcp<br>连接队列中阻塞，这个队列的长度是<code>acceptCount</code>控制的，默认是<code>100</code>。如果仍然处理不过来，系统可能就会丢掉<br>一些建立的连接了。</p>
<p>所以，大致可以估计下最多能处理的连接数：</p>
<p><code>最大处理连接数 = acceptCount + maxConnection</code></p>
<p>#参考</p>
<ol>
<li><p><a href="https://segmentfault.com/a/1190000008064162" rel="external nofollow noopener noreferrer" target="_blank">tomcat的acceptCount与maxConnections - xixicat - SegmentFault</a></p>
</li>
<li><p><a href="https://tomcat.apache.org/tomcat-7.0-doc/config/http.html" rel="external nofollow noopener noreferrer" target="_blank">Apache Tomcat 7 Configuration Reference (7.0.77) - The HTTP Connector</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;以下是tomcat7的一些配置说明&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&quot;tomcat交互图&quot;&gt;&lt;a href=&quot;#tomcat交互图&quot; class=&quot;headerlink&quot; title=&quot;tomcat交互图&quot;&gt;&lt;/a&gt;tomcat交互图&lt;/h1&gt;&lt;img src=&quot;/
    
    </summary>
    
      <category term="tomcat" scheme="http://qsli.github.io/categories/tomcat/"/>
    
    
      <category term="connections" scheme="http://qsli.github.io/tags/connections/"/>
    
  </entry>
  
  <entry>
    <title>异步Servlet及Spring对其的支持</title>
    <link href="http://qsli.github.io/2017/02/28/servlet-async/"/>
    <id>http://qsli.github.io/2017/02/28/servlet-async/</id>
    <published>2017-02-27T17:47:22.000Z</published>
    <updated>2017-04-16T12:04:30.014Z</updated>
    
    <content type="html"><![CDATA[<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>限定 tomcat的连接池个数为50，并发为200（&gt;&gt; 线程池大小），时异步具有很大的优势。</p>
<p>如果并发量小于线程池大小，异步的反倒比同步的时间长了很久。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></div><div class="line">            <span class="attr">maxThreads</span>=<span class="string">"50"</span></div><div class="line">            <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></div><div class="line">            <span class="attr">redirectPort</span>=<span class="string">"8443"</span> <span class="attr">URIEncoding</span>=<span class="string">"UTF-8"</span>/&gt;</div></pre></td></tr></table></figure>
<p>完整的测试代码地址： <a href="https://github.com/qsLI/Java_Tutorial/blob/master/web/src/main/java/com/air/async/AsyncRequestProcessor.java" rel="external nofollow noopener noreferrer" target="_blank"></a></p>
<h3 id="async-ab测试"><a href="#async-ab测试" class="headerlink" title="async ab测试"></a>async ab测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">$ ab -n 10000 -c 200 http://localhost:8080/async</div><div class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;</div><div class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</div><div class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</div><div class="line"></div><div class="line">Benchmarking localhost (be patient)</div><div class="line">Completed 1000 requests</div><div class="line">Completed 2000 requests</div><div class="line">Completed 3000 requests</div><div class="line">Completed 4000 requests</div><div class="line">Completed 5000 requests</div><div class="line">Completed 6000 requests</div><div class="line">Completed 7000 requests</div><div class="line">Completed 8000 requests</div><div class="line">Completed 9000 requests</div><div class="line">Completed 10000 requests</div><div class="line">Finished 10000 requests</div><div class="line"></div><div class="line"></div><div class="line">Server Software:        Apache-Coyote/1.1</div><div class="line">Server Hostname:        localhost</div><div class="line">Server Port:            8080</div><div class="line"></div><div class="line">Document Path:          /async</div><div class="line">Document Length:        40 bytes</div><div class="line"></div><div class="line">Concurrency Level:      200</div><div class="line">Time taken for tests:   1000.284 seconds</div><div class="line">Complete requests:      10000</div><div class="line">Failed requests:        47</div><div class="line">   (Connect: 0, Receive: 0, Length: 47, Exceptions: 0)</div><div class="line">Write errors:           0</div><div class="line">Non-2xx responses:      47</div><div class="line">Total transferred:      1530740 bytes</div><div class="line">HTML transferred:       506980 bytes</div><div class="line">Requests per second:    10.00 [#/sec] (mean)</div><div class="line">Time per request:       20005.686 [ms] (mean)</div><div class="line">Time per request:       100.028 [ms] (mean, across all concurrent requests)</div><div class="line">Transfer rate:          1.49 [Kbytes/sec] received</div><div class="line"></div><div class="line">Connection Times (ms)</div><div class="line">              min  mean[+/-sd] median   max</div><div class="line">Connect:        0    0   5.0      0     501</div><div class="line">Processing:     2 19810 1683.3  20001   20560</div><div class="line">Waiting:        1 19810 1683.4  20000   20558</div><div class="line">Total:          2 19811 1683.0  20001   20560</div><div class="line"></div><div class="line">Percentage of the requests served within a certain time (ms)</div><div class="line">  50%  20001</div><div class="line">  66%  20001</div><div class="line">  75%  20002</div><div class="line">  80%  20002</div><div class="line">  90%  20004</div><div class="line">  95%  20009</div><div class="line">  98%  20020</div><div class="line">  99%  20035</div><div class="line"> 100%  20560 (longest request)</div></pre></td></tr></table></figure>
<p>测试过程中出的异常：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">一月 21, 2017 1:05:32 上午 org.apache.catalina.core.StandardWrapperValve invoke</div><div class="line">严重: Servlet.service() for servlet [com.air.async.AsyncServlet] in context with path [] threw exception</div><div class="line">java.util.concurrent.RejectedExecutionException: Task com.air.async.AsyncRequestProcessor@3caec762 rejected from java.util.concurrent.ThreadPoolExecutor@64db0f23[Running, pool size = 100, active threads = 100, queued tasks = 100, completed tasks = 9726]</div><div class="line">  at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2048)</div><div class="line">  at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:821)</div><div class="line">  at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1372)</div><div class="line">  at com.air.async.AsyncServlet.doGet(AsyncServlet.java:25)</div><div class="line">  at javax.servlet.http.HttpServlet.service(HttpServlet.java:621)</div><div class="line">  at javax.servlet.http.HttpServlet.service(HttpServlet.java:728)</div><div class="line">  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305)</div><div class="line">  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)</div><div class="line">  at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)</div><div class="line">  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)</div><div class="line">  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)</div><div class="line">  at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:222)</div><div class="line">  at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123)</div><div class="line">  at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)</div><div class="line">  at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171)</div><div class="line">  at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100)</div><div class="line">  at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:953)</div><div class="line">  at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)</div><div class="line">  at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408)</div><div class="line">  at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1041)</div><div class="line">  at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:603)</div><div class="line">  at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.doRun(AprEndpoint.java:2430)</div><div class="line">  at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run(AprEndpoint.java:2419)</div><div class="line">  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</div><div class="line">  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</div><div class="line">  at java.lang.Thread.run(Thread.java:745)</div></pre></td></tr></table></figure>
<p>有47个失败的case，是队列满了，然后丢掉了请求。</p>
<h3 id="sync-ab测试"><a href="#sync-ab测试" class="headerlink" title="sync ab测试"></a>sync ab测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">$ ab -n 10000 -c 200 http://localhost:8080/hello</div><div class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;</div><div class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</div><div class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</div><div class="line"></div><div class="line">Benchmarking localhost (be patient)</div><div class="line">Completed 1000 requests</div><div class="line">Completed 2000 requests</div><div class="line">Completed 3000 requests</div><div class="line">Completed 4000 requests</div><div class="line">Completed 5000 requests</div><div class="line">Completed 6000 requests</div><div class="line">Completed 7000 requests</div><div class="line">Completed 8000 requests</div><div class="line">Completed 9000 requests</div><div class="line">Completed 10000 requests</div><div class="line">Finished 10000 requests</div><div class="line"></div><div class="line"></div><div class="line">Server Software:        Apache-Coyote/1.1</div><div class="line">Server Hostname:        localhost</div><div class="line">Server Port:            8080</div><div class="line"></div><div class="line">Document Path:          /hello</div><div class="line">Document Length:        12 bytes</div><div class="line"></div><div class="line">Concurrency Level:      200</div><div class="line">Time taken for tests:   2002.151 seconds</div><div class="line">Complete requests:      10000</div><div class="line">Failed requests:        0</div><div class="line">Write errors:           0</div><div class="line">Total transferred:      1340000 bytes</div><div class="line">HTML transferred:       120000 bytes</div><div class="line">Requests per second:    4.99 [#/sec] (mean)</div><div class="line">Time per request:       40043.028 [ms] (mean)</div><div class="line">Time per request:       200.215 [ms] (mean, across all concurrent requests)</div><div class="line">Transfer rate:          0.65 [Kbytes/sec] received</div><div class="line"></div><div class="line">Connection Times (ms)</div><div class="line">              min  mean[+/-sd] median   max</div><div class="line">Connect:        0    0   0.4      0       8</div><div class="line">Processing: 10002 39740 2686.3  40005   50319</div><div class="line">Waiting:    10002 39740 2686.4  40004   50319</div><div class="line">Total:      10002 39741 2686.3  40005   50319</div><div class="line"></div><div class="line">Percentage of the requests served within a certain time (ms)</div><div class="line">  50%  40005</div><div class="line">  66%  40009</div><div class="line">  75%  40014</div><div class="line">  80%  40022</div><div class="line">  90%  40122</div><div class="line">  95%  40316</div><div class="line">  98%  40449</div><div class="line">  99%  40483</div><div class="line"> 100%  50319 (longest request)</div></pre></td></tr></table></figure>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>异步的servle在高并发的情况下可以使用较少的连接线程实现较大的吞吐。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Puts this request into asynchronous mode, and initializes its</div><div class="line">    * &#123;<span class="doctag">@link</span> AsyncContext&#125; with the original (unwrapped) ServletRequest</div><div class="line">    * and ServletResponse objects.</div><div class="line">    *</div><div class="line">    * &lt;p&gt;Calling this method will cause committal of the associated</div><div class="line">    * response to be delayed until &#123;<span class="doctag">@link</span> AsyncContext#complete&#125; is</div><div class="line">    * called on the returned &#123;<span class="doctag">@link</span> AsyncContext&#125;, or the asynchronous</div><div class="line">    * operation has timed out.</div><div class="line">    *</div><div class="line">    * &lt;p&gt;Calling &#123;<span class="doctag">@link</span> AsyncContext#hasOriginalRequestAndResponse()&#125; on</div><div class="line">    * the returned AsyncContext will return &lt;code&gt;true&lt;/code&gt;. Any filters</div><div class="line">    * invoked in the &lt;i&gt;outbound&lt;/i&gt; direction after this request was put</div><div class="line">    * into asynchronous mode may use this as an indication that any request</div><div class="line">    * and/or response wrappers that they added during their &lt;i&gt;inbound&lt;/i&gt;</div><div class="line">    * invocation need not stay around for the duration of the asynchronous</div><div class="line">    * operation, and therefore any of their associated resources may be</div><div class="line">    * released.</div><div class="line">    *</div><div class="line">    * &lt;p&gt;This method clears the list of &#123;<span class="doctag">@link</span> AsyncListener&#125; instances</div><div class="line">    * (if any) that were registered with the AsyncContext returned by the</div><div class="line">    * previous call to one of the startAsync methods, after calling each</div><div class="line">    * AsyncListener at its &#123;<span class="doctag">@link</span> AsyncListener#onStartAsync onStartAsync&#125;</div><div class="line">    * method.</div><div class="line">    *</div><div class="line">    * &lt;p&gt;Subsequent invocations of this method, or its overloaded </div><div class="line">    * variant, will return the same AsyncContext instance, reinitialized</div><div class="line">    * as appropriate.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@return</span> the (re)initialized AsyncContext</div><div class="line">    * </div><div class="line">    * <span class="doctag">@throws</span> IllegalStateException if this request is within the scope of</div><div class="line">    * a filter or servlet that does not support asynchronous operations</div><div class="line">    * (that is, &#123;<span class="doctag">@link</span> #isAsyncSupported&#125; returns false),</div><div class="line">    * or if this method is called again without any asynchronous dispatch</div><div class="line">    * (resulting from one of the &#123;<span class="doctag">@link</span> AsyncContext#dispatch&#125; methods),</div><div class="line">    * is called outside the scope of any such dispatch, or is called again</div><div class="line">    * within the scope of the same dispatch, or if the response has</div><div class="line">    * already been closed</div><div class="line">    *</div><div class="line">    * <span class="doctag">@see</span> AsyncContext#dispatch()</div><div class="line">    * <span class="doctag">@since</span> Servlet 3.0</div><div class="line">    */</div><div class="line">       <span class="function"><span class="keyword">public</span> AsyncContext <span class="title">startAsync</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException</span>;</div></pre></td></tr></table></figure>
<p>//挖坑，待填</p>
<h2 id="Spring-对异步Servlet的支持"><a href="#Spring-对异步Servlet的支持" class="headerlink" title="Spring 对异步Servlet的支持"></a>Spring 对异步Servlet的支持</h2><p>web.xml中需要的配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--spring encoding filter--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--servlet--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></div><div class="line">            classpath:spring/mvc/mvc-app.xml</div><div class="line">        <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果有filter的话也必须配置上异步的支持</p>
<h3 id="Callable-方式"><a href="#Callable-方式" class="headerlink" title="Callable 方式"></a>Callable 方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/async"</span>)</div><div class="line"><span class="meta">@PostMapping</span></div><div class="line"><span class="function"><span class="keyword">public</span> Callable&lt;String&gt; <span class="title">asyncProcess</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Callable&lt;String&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"index"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种方式返回一个<code>Callable</code>，Spring在线程池中执行<code>Callable</code>并获取到结果然后进行后续的处理。</p>
<p>TaskExecutor 自定义线程池：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- ================================== --&gt;</span>  </div><div class="line"><span class="comment">&lt;!-- 0. Set up task executor for async  --&gt;</span></div><div class="line"><span class="comment">&lt;!-- ================================== --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">mvc:async-support</span> <span class="attr">default-timeout</span>=<span class="string">"30000"</span> <span class="attr">task-executor</span>=<span class="string">"taskExecutor"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- modify the parameters of thread pool --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"taskExecutor"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"corePoolSize"</span> <span class="attr">value</span>=<span class="string">"5"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"50"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"queueCapacity"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keepAliveSeconds"</span> <span class="attr">value</span>=<span class="string">"120"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="DeferredResult-方式"><a href="#DeferredResult-方式" class="headerlink" title="DeferredResult 方式"></a>DeferredResult 方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/asyncV2"</span>)</div><div class="line">   <span class="function"><span class="keyword">public</span> DeferredResult&lt;String&gt; <span class="title">aysncProcess2</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">final</span> DeferredResult&lt;String&gt; stringDeferredResult = <span class="keyword">new</span> DeferredResult&lt;&gt;();</div><div class="line">       MoreExecutors.directExecutor().execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">               <span class="keyword">try</span> &#123;</div><div class="line">                   Thread.sleep(<span class="number">30000</span>);</div><div class="line">                   stringDeferredResult.setResult(<span class="string">"index"</span>);</div><div class="line">               &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                   stringDeferredResult.setErrorResult(<span class="string">"error"</span>);</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line">       <span class="keyword">return</span> stringDeferredResult;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>这种方式返回的是<code>DeferredResult</code>，计算的逻辑可以在业务线程池中计算，当计算完成后，</p>
<p>直接向<code>DeferredResult</code>中set数据即可，会触发后续的处理，并返回给客户端。</p>
<h3 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h3><p><code>RequestMappingHandlerAdapter</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   * Invoke the &#123;<span class="doctag">@link</span> RequestMapping&#125; handler method preparing a &#123;<span class="doctag">@link</span> ModelAndView&#125;</div><div class="line">   * if view resolution is required.</div><div class="line">   * <span class="doctag">@since</span> 4.2</div><div class="line">   * <span class="doctag">@see</span> #createInvocableHandlerMethod(HandlerMethod)</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">invokeHandlerMethod</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">      HttpServletResponse response, HandlerMethod handlerMethod) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">    ServletWebRequest webRequest = <span class="keyword">new</span> ServletWebRequest(request, response);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      WebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);</div><div class="line">      ModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);</div><div class="line"></div><div class="line">      ServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);</div><div class="line">      invocableMethod.setHandlerMethodArgumentResolvers(<span class="keyword">this</span>.argumentResolvers);</div><div class="line">      invocableMethod.setHandlerMethodReturnValueHandlers(<span class="keyword">this</span>.returnValueHandlers);</div><div class="line">      invocableMethod.setDataBinderFactory(binderFactory);</div><div class="line">      invocableMethod.setParameterNameDiscoverer(<span class="keyword">this</span>.parameterNameDiscoverer);</div><div class="line"></div><div class="line">      ModelAndViewContainer mavContainer = <span class="keyword">new</span> ModelAndViewContainer();</div><div class="line">      mavContainer.addAllAttributes(RequestContextUtils.getInputFlashMap(request));</div><div class="line">      modelFactory.initModel(webRequest, mavContainer, invocableMethod);</div><div class="line">      mavContainer.setIgnoreDefaultModelOnRedirect(<span class="keyword">this</span>.ignoreDefaultModelOnRedirect);</div><div class="line"></div><div class="line">      <span class="comment">//创建异步请求</span></div><div class="line">      AsyncWebRequest asyncWebRequest = WebAsyncUtils.createAsyncWebRequest(request, response);</div><div class="line">      asyncWebRequest.setTimeout(<span class="keyword">this</span>.asyncRequestTimeout);</div><div class="line"></div><div class="line">      <span class="comment">//下面的代码设置了Callable执行的线程池，以及拦截器还有DeferredResult的拦截器</span></div><div class="line">      WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</div><div class="line">      asyncManager.setTaskExecutor(<span class="keyword">this</span>.taskExecutor);</div><div class="line">      asyncManager.setAsyncWebRequest(asyncWebRequest);</div><div class="line">      asyncManager.registerCallableInterceptors(<span class="keyword">this</span>.callableInterceptors);</div><div class="line">      asyncManager.registerDeferredResultInterceptors(<span class="keyword">this</span>.deferredResultInterceptors);</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (asyncManager.hasConcurrentResult()) &#123;</div><div class="line">        Object result = asyncManager.getConcurrentResult();</div><div class="line">        mavContainer = (ModelAndViewContainer) asyncManager.getConcurrentResultContext()[<span class="number">0</span>];</div><div class="line">        asyncManager.clearConcurrentResult();</div><div class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">          logger.debug(<span class="string">"Found concurrent result value ["</span> + result + <span class="string">"]"</span>);</div><div class="line">        &#125;</div><div class="line">        invocableMethod = invocableMethod.wrapConcurrentResult(result);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      invocableMethod.invokeAndHandle(webRequest, mavContainer);</div><div class="line">      <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">finally</span> &#123;</div><div class="line">      webRequest.requestCompleted();</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h4 id="Callable-的处理"><a href="#Callable-的处理" class="headerlink" title="Callable 的处理"></a>Callable 的处理</h4><p><code>Callable</code>的处理是在<code>CallableMethodReturnValueHandler</code>中的，这个接口最终继承了<code>HandlerMethodReturnValueHandler</code>, 也就是对Controller方法返回值的后处理。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableMethodReturnValueHandler</span> <span class="keyword">implements</span> <span class="title">AsyncHandlerMethodReturnValueHandler</span> </span>&#123;</div><div class="line">  <span class="comment">//省略...</span></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleReturnValue</span><span class="params">(Object returnValue, MethodParameter returnType,</span></span></div><div class="line">      ModelAndViewContainer mavContainer, NativeWebRequest webRequest) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (returnValue == <span class="keyword">null</span>) &#123;</div><div class="line">      mavContainer.setRequestHandled(<span class="keyword">true</span>);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Callable&lt;?&gt; callable = (Callable&lt;?&gt;) returnValue;</div><div class="line">    WebAsyncUtils.getAsyncManager(webRequest).startCallableProcessing(callable, mavContainer);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终是调用了<code>WebAsyncManager</code>的<code>startCallableProcessing</code>进行处理</p>
<p><code>WebAsyncManager</code>中的关键代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startCallableProcessing</span><span class="params">(Callable&lt;?&gt; callable, Object... processingContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    Assert.notNull(callable, <span class="string">"Callable must not be null"</span>);</div><div class="line">    startCallableProcessing(<span class="keyword">new</span> WebAsyncTask(callable), processingContext);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startCallableProcessing</span><span class="params">(<span class="keyword">final</span> WebAsyncTask&lt;?&gt; webAsyncTask, Object... processingContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    Assert.notNull(webAsyncTask, <span class="string">"WebAsyncTask must not be null"</span>);</div><div class="line">    Assert.state(<span class="keyword">this</span>.asyncWebRequest != <span class="keyword">null</span>, <span class="string">"AsyncWebRequest must not be null"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//超时</span></div><div class="line">    Long timeout = webAsyncTask.getTimeout();</div><div class="line">    <span class="keyword">if</span> (timeout != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">this</span>.asyncWebRequest.setTimeout(timeout);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//线程池</span></div><div class="line">    AsyncTaskExecutor executor = webAsyncTask.getExecutor();</div><div class="line">    <span class="keyword">if</span> (executor != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">this</span>.taskExecutor = executor;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//拦截器</span></div><div class="line">    List&lt;CallableProcessingInterceptor&gt; interceptors = <span class="keyword">new</span> ArrayList&lt;CallableProcessingInterceptor&gt;();</div><div class="line">    interceptors.add(webAsyncTask.getInterceptor());</div><div class="line">    interceptors.addAll(<span class="keyword">this</span>.callableInterceptors.values());</div><div class="line">    interceptors.add(timeoutCallableInterceptor);</div><div class="line"></div><div class="line">    <span class="keyword">final</span> Callable&lt;?&gt; callable = webAsyncTask.getCallable();</div><div class="line">    <span class="keyword">final</span> CallableInterceptorChain interceptorChain = <span class="keyword">new</span> CallableInterceptorChain(interceptors);</div><div class="line"></div><div class="line">    <span class="comment">//超时处理</span></div><div class="line">    <span class="keyword">this</span>.asyncWebRequest.addTimeoutHandler(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        logger.debug(<span class="string">"Processing timeout"</span>);</div><div class="line">        Object result = interceptorChain.triggerAfterTimeout(asyncWebRequest, callable);</div><div class="line">        <span class="keyword">if</span> (result != CallableProcessingInterceptor.RESULT_NONE) &#123;</div><div class="line">          setConcurrentResultAndDispatch(result);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">//成功的回调，会触发拦截器的拦截</span></div><div class="line">    <span class="keyword">this</span>.asyncWebRequest.addCompletionHandler(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        interceptorChain.triggerAfterCompletion(asyncWebRequest, callable);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">//拦截</span></div><div class="line">    interceptorChain.applyBeforeConcurrentHandling(<span class="keyword">this</span>.asyncWebRequest, callable);</div><div class="line">    startAsyncProcessing(processingContext);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="keyword">this</span>.taskExecutor.submit(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">          Object result = <span class="keyword">null</span>;</div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//拦截</span></div><div class="line">            interceptorChain.applyPreProcess(asyncWebRequest, callable);</div><div class="line">            result = callable.call();</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">            result = ex;</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="comment">//拦截</span></div><div class="line">            result = interceptorChain.applyPostProcess(asyncWebRequest, callable, result);</div><div class="line">          &#125;</div><div class="line">          setConcurrentResultAndDispatch(result);</div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (RejectedExecutionException ex) &#123;</div><div class="line">      Object result = interceptorChain.applyPostProcess(<span class="keyword">this</span>.asyncWebRequest, callable, ex);</div><div class="line">      setConcurrentResultAndDispatch(result);</div><div class="line">      <span class="keyword">throw</span> ex;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h4 id="DeferredResult-的处理"><a href="#DeferredResult-的处理" class="headerlink" title="DeferredResult 的处理"></a>DeferredResult 的处理</h4><p>DeferredResult的返回时机就是有数据的时候，顺藤摸瓜:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setResult</span><span class="params">(T result)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> setResultInternal(result);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">setResultInternal</span><span class="params">(Object result)</span> </span>&#123;</div><div class="line">    <span class="comment">// Immediate expiration check outside of the result lock</span></div><div class="line">    <span class="keyword">if</span> (isSetOrExpired()) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    DeferredResultHandler resultHandlerToUse;</div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">      <span class="comment">// Got the lock in the meantime: double-check expiration status</span></div><div class="line">      <span class="keyword">if</span> (isSetOrExpired()) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// At this point, we got a new result to process</span></div><div class="line">      <span class="keyword">this</span>.result = result;</div><div class="line">      resultHandlerToUse = <span class="keyword">this</span>.resultHandler;</div><div class="line">      <span class="keyword">if</span> (resultHandlerToUse == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// No result handler set yet -&gt; let the setResultHandler implementation</span></div><div class="line">        <span class="comment">// pick up the result object and invoke the result handler for it.</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// Result handler available -&gt; let's clear the stored reference since</span></div><div class="line">      <span class="comment">// we don't need it anymore.</span></div><div class="line">      <span class="keyword">this</span>.resultHandler = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// If we get here, we need to process an existing result object immediately.</span></div><div class="line">    <span class="comment">// The decision is made within the result lock; just the handle call outside</span></div><div class="line">    <span class="comment">// of it, avoiding any deadlock potential with Servlet container locks.</span></div><div class="line">    resultHandlerToUse.handleResult(result);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p><code>DeferredResultHandler</code>是什么鬼？我们new的时候没有设置啊？？其实这个也是由<code>HandlerMethodReturnValueHandler</code>来实现的，有个对应的<code>DeferredResultMethodReturnValueHandler</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleReturnValue</span><span class="params">(Object returnValue, MethodParameter returnType,</span></span></div><div class="line">    ModelAndViewContainer mavContainer, NativeWebRequest webRequest) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (returnValue == <span class="keyword">null</span>) &#123;</div><div class="line">    mavContainer.setRequestHandled(<span class="keyword">true</span>);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  DeferredResultAdapter adapter = getAdapterFor(returnValue.getClass());</div><div class="line">  Assert.notNull(adapter);</div><div class="line">  DeferredResult&lt;?&gt; result = adapter.adaptToDeferredResult(returnValue);</div><div class="line">  WebAsyncUtils.getAsyncManager(webRequest).startDeferredResultProcessing(result, mavContainer);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终还是到了<code>WebAsyncManager</code>的处理方法中，和<code>Callable</code>的处理类似，不一一深入。</p>
<p>值得一提的是，正是在这个<code>startDeferredResultProcessing</code>中塞入了一个<code>DeferredResultHandler</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">      interceptorChain.applyPreProcess(<span class="keyword">this</span>.asyncWebRequest, deferredResult);</div><div class="line">      deferredResult.setResultHandler(<span class="keyword">new</span> DeferredResultHandler() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleResult</span><span class="params">(Object result)</span> </span>&#123;</div><div class="line">          result = interceptorChain.applyPostProcess(asyncWebRequest, deferredResult, result);</div><div class="line">          setConcurrentResultAndDispatch(result);</div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">      setConcurrentResultAndDispatch(ex);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>因为我们是异步执行的，所以虽然handler的注入在后面，其实影响也不大，而且<code>setResult</code>中也做了判断。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://www.journaldev.com/2008/async-servlet-feature-of-servlet-3" rel="external nofollow noopener noreferrer" target="_blank">Async Servlet Feature of Servlet 3 - JournalDev</a></p>
</li>
<li><p><a href="https://docs.oracle.com/javaee/7/tutorial/servlets012.htm" rel="external nofollow noopener noreferrer" target="_blank">17.12 Asynchronous Processing - Java Platform, Enterprise Edition: The Java EE Tutorial (Release 7)</a></p>
</li>
<li><p><a href="https://httpd.apache.org/docs/2.4/programs/ab.html" rel="external nofollow noopener noreferrer" target="_blank">ab - Apache HTTP server benchmarking tool - Apache HTTP Server Version 2.4</a></p>
</li>
<li><p><a href="http://www.ha97.com/5095.html" rel="external nofollow noopener noreferrer" target="_blank">系统吞吐量（TPS）、用户并发量、性能测试概念和公式</a></p>
</li>
<li><p><a href="https://lanjingling.github.io/2016/01/20/servlet3-new-furture/" rel="external nofollow noopener noreferrer" target="_blank">servlet3新特性——异步请求处理 | 晓的技术博客</a></p>
</li>
<li><p><a href="http://blog.csdn.net/wzy_1988/article/details/38922449" rel="external nofollow noopener noreferrer" target="_blank">解决java.util.concurrent.RejectedExecutionException - 小一的专栏 - 博客频道 - CSDN.NET</a></p>
</li>
<li><p><a href="http://www.lai18.com/content/2483896.html" rel="external nofollow noopener noreferrer" target="_blank">Springmvc异步支持报错- - Lai18.com IT技术文章收藏夹</a></p>
</li>
<li><p><a href="http://shengwangi.blogspot.hk/2015/09/asynchronous-spring-mvc-hello-world.html" rel="external nofollow noopener noreferrer" target="_blank">Asynchronous Spring MVC – Hello World Example | Code Breeze !</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h2&gt;&lt;p&gt;限定 tomcat的连接池个数为50，并发为200（&amp;gt;&amp;gt; 线程池大小），时异步具有很大的优势。&lt;/p&gt;
&lt;p&gt;如果并发量小于线程
    
    </summary>
    
      <category term="spring" scheme="http://qsli.github.io/categories/spring/"/>
    
    
      <category term="servlet" scheme="http://qsli.github.io/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title>cygwin执行命令非常慢</title>
    <link href="http://qsli.github.io/2017/02/20/cygwin-360/"/>
    <id>http://qsli.github.io/2017/02/20/cygwin-360/</id>
    <published>2017-02-19T16:30:03.000Z</published>
    <updated>2017-04-16T12:03:23.389Z</updated>
    
    <content type="html"><![CDATA[<p>cygwin在windows上提供了一套类似linux的开发环境，用起来还是挺爽的。</p>
<p>但是一直困扰我的一个问题是，太慢！具体现象就是使用<code>ls</code>都得等半天才出结果。</p>
<p>看网上的资料说cygwin确实慢，再加上我用了<code>oh-my-zsh</code>，更是慢上加慢。</p>
<h2 id="可能的原因"><a href="#可能的原因" class="headerlink" title="可能的原因"></a>可能的原因</h2><p>貌似360对这些工具程序的调用都会做一个拦截，判断下是否有风险。</p>
<p>于是干脆把360给卸载了，终于<code>ls</code>的速度变得可以接受。。。。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://www.it1352.com/321952.html" rel="external nofollow noopener noreferrer" target="_blank">为什么Cygwin的执行shell命令很慢？ - IT屋-程序员软件开发技术分享社区</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;cygwin在windows上提供了一套类似linux的开发环境，用起来还是挺爽的。&lt;/p&gt;
&lt;p&gt;但是一直困扰我的一个问题是，太慢！具体现象就是使用&lt;code&gt;ls&lt;/code&gt;都得等半天才出结果。&lt;/p&gt;
&lt;p&gt;看网上的资料说cygwin确实慢，再加上我用了&lt;code&gt;
    
    </summary>
    
      <category term="linux" scheme="http://qsli.github.io/categories/linux/"/>
    
    
      <category term="cygwin" scheme="http://qsli.github.io/tags/cygwin/"/>
    
  </entry>
  
  <entry>
    <title>Intellij Idea中临时文件功能</title>
    <link href="http://qsli.github.io/2017/02/15/idea-scratches/"/>
    <id>http://qsli.github.io/2017/02/15/idea-scratches/</id>
    <published>2017-02-14T17:10:09.000Z</published>
    <updated>2017-04-16T12:03:23.393Z</updated>
    
    <content type="html"><![CDATA[<h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>Intellij中默认新建文件必须指定存储的位置，但是有的时候我们可能只是想创建一个临时的文件顺手记录一些东西。这个功能类似<code>NotePad++</code>或者<code>sublime text</code>中的新建tab，这个tab默认是不落地到文件的，但是其中的内容会以临时文件存储起来。</p>
<p>在Google上搜索了大半天，也没有找到类似的功能（主要是关键词提炼的不行）。后来阴差阳错地搜到了scratches file, 翻译了一下，正是我要找的功能！ (英语差真是害死人啊！)</p>
<blockquote>
<p>scratch file 过期文件；临时文件</p>
</blockquote>
<h3 id="scratches优势"><a href="#scratches优势" class="headerlink" title="scratches优势"></a>scratches优势</h3><blockquote>
<ol>
<li><p>The scratch code in scripting languages is <em>executable</em>.</p>
</li>
<li><p>you can run and <em>debug</em> it.</p>
</li>
<li><p><em>Local history</em> for scratches is supported.</p>
</li>
<li><p>It is possible to perform <em>clipboard operations</em> with scratches.</p>
</li>
<li><p>The scratches are <em>stored</em>, depending on your operating system,<br>Under IntelliJ IDEA home, in the directory config/scratches (on Windows/*NIX)<br>~ Library-&gt;Preferences-&gt;<intellij idea="">XX-&gt;scratches(on OS X)<br>You can undo or redo changes in scratches.</intellij></p>
</li>
</ol>
</blockquote>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>以下功能基于Intellij Idea 2016.3.4</p>
<p><code>Ctrl + Shift + A</code>在搜索框中输入 <code>scratch</code>，可以看到如下的两个功能：</p>
<img src="/2017/02/15/idea-scratches/search.jpg" alt="search.jpg" title="">
<p>这里会出现两个scratch 相关的选项， 一个是scratch buffer， 一个是scratch file。<br>scratch buffer不用选择语法，scratch file则会让你选择对应的语法</p>
<img src="/2017/02/15/idea-scratches/new.jpg" alt="new.jpg" title="">
<p>创建之后，可以在下面的位置查看:</p>
<img src="/2017/02/15/idea-scratches/menu.jpg" alt="menu.jpg" title="">
<img src="/2017/02/15/idea-scratches/scratches.jpg" alt="scratches.jpg" title="">
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>快捷键需要按的键比较多，可以自己定制下，比如使用先后按键的那种。</p>
<img src="/2017/02/15/idea-scratches/keymap.jpg" alt="keymap.jpg" title="">
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="https://www.jetbrains.com/help/idea/2016.3/scratches.html" rel="external nofollow noopener noreferrer" target="_blank">IntelliJ IDEA 2016.3 Help :: Scratches</a></p>
</li>
<li><p><a href="http://docs.notepad-plus-plus.org/index.php/Sessions_And_Projects" rel="external nofollow noopener noreferrer" target="_blank">Sessions And Projects - Notepad++ Wiki</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h2&gt;&lt;p&gt;Intellij中默认新建文件必须指定存储的位置，但是有的时候我们可能只是想创建一个临时的文件顺手记录一些东西。这个功能类似&lt;code&gt;No
    
    </summary>
    
      <category term="idea" scheme="http://qsli.github.io/categories/idea/"/>
    
    
  </entry>
  
  <entry>
    <title>Spring中的factory-bean和FactoryBean</title>
    <link href="http://qsli.github.io/2017/02/14/factorybean/"/>
    <id>http://qsli.github.io/2017/02/14/factorybean/</id>
    <published>2017-02-13T16:50:40.000Z</published>
    <updated>2017-04-16T12:03:23.389Z</updated>
    
    <content type="html"><![CDATA[<h3 id="factory-bean"><a href="#factory-bean" class="headerlink" title="factory-bean"></a>factory-bean</h3><p>spring的bean标签的一个属性，用来指定创建实例的方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientService</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ClientService clientService = <span class="keyword">new</span> ClientService();</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ClientService</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ClientService <span class="title">createInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> clientService;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultServiceLocator</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ClientService clientService = <span class="keyword">new</span> ClientServiceImpl();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AccountService accountService = <span class="keyword">new</span> AccountServiceImpl();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DefaultServiceLocator</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ClientService <span class="title">createClientServiceInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> clientService;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> AccountService <span class="title">createAccountServiceInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accountService;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="第一种写法"><a href="#第一种写法" class="headerlink" title="第一种写法"></a>第一种写法</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"clientService"</span></span></div><div class="line">    <span class="attr">class</span>=<span class="string">"examples.ClientService"</span></div><div class="line">    <span class="attr">factory-method</span>=<span class="string">"createInstance"</span>/&gt;</div></pre></td></tr></table></figure>
<p>这种写法要求<code>factory-method</code>必须是<code>static</code>的</p>
<h4 id="第二种写法"><a href="#第二种写法" class="headerlink" title="第二种写法"></a>第二种写法</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"serviceLocator"</span> <span class="attr">class</span>=<span class="string">"examples.DefaultServiceLocator"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- inject any dependencies required by this locator bean --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"clientService"</span></span></div><div class="line">    <span class="attr">factory-bean</span>=<span class="string">"serviceLocator"</span></div><div class="line">    <span class="attr">factory-method</span>=<span class="string">"createClientServiceInstance"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span></span></div><div class="line">    <span class="attr">factory-bean</span>=<span class="string">"serviceLocator"</span></div><div class="line">    <span class="attr">factory-method</span>=<span class="string">"createAccountServiceInstance"</span>/&gt;</div></pre></td></tr></table></figure>
<p>这种写法多了一个<code>factory-bean</code>，指定了使用哪个类的哪个方法去创建，不要求这个方法是<code>static</code>，但是<code>factory-bean</code>对应的类必须交由spring管理。</p>
<p>一个类中可以包含多个创建的方法。</p>
<h3 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h3><p>是Spring提供的一个接口，用来定制Bean的初始化逻辑。</p>
<blockquote>
<p>If you have complex initialization code that is better expressed in Java as opposed to a (potentially) verbose amount of XML, you can create your own FactoryBean</p>
<p>  Interface to be implemented by objects used within a {@link BeanFactory} which<br>    are themselves factories for individual objects. If a bean implements this<br>    interface, it is used as a factory for an object to expose, not directly as a<br>    bean instance that will be exposed itself.</p>
</blockquote>
<p>这个接口有三个方法：</p>
<ul>
<li>Object getObject()</li>
</ul>
<p>获取创建的对象</p>
<ul>
<li>boolean isSingleton()</li>
</ul>
<p>返回的对象是否是单例的</p>
<ul>
<li>Class getObjectType()</li>
</ul>
<p>获取返回的对象的类型</p>
<p><code>GsonFactoryBean</code>就实现了<code>FactoryBean</code>接口，是一个不错的例子，大概代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GsonFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Gson</span>&gt;, <span class="title">InitializingBean</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> base64EncodeByteArrays = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> serializeNulls = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> prettyPrinting = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> disableHtmlEscaping = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String dateFormatPattern;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Gson gson;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBase64EncodeByteArrays</span><span class="params">(<span class="keyword">boolean</span> base64EncodeByteArrays)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.base64EncodeByteArrays = base64EncodeByteArrays;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSerializeNulls</span><span class="params">(<span class="keyword">boolean</span> serializeNulls)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.serializeNulls = serializeNulls;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrettyPrinting</span><span class="params">(<span class="keyword">boolean</span> prettyPrinting)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.prettyPrinting = prettyPrinting;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDisableHtmlEscaping</span><span class="params">(<span class="keyword">boolean</span> disableHtmlEscaping)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.disableHtmlEscaping = disableHtmlEscaping;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDateFormatPattern</span><span class="params">(String dateFormatPattern)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.dateFormatPattern = dateFormatPattern;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</div><div class="line">        GsonBuilder builder = (<span class="keyword">this</span>.base64EncodeByteArrays ?</div><div class="line">                GsonBuilderUtils.gsonBuilderWithBase64EncodedByteArrays() : <span class="keyword">new</span> GsonBuilder());</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.serializeNulls) &#123;</div><div class="line">            builder.serializeNulls();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.prettyPrinting) &#123;</div><div class="line">            builder.setPrettyPrinting();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.disableHtmlEscaping) &#123;</div><div class="line">            builder.disableHtmlEscaping();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.dateFormatPattern != <span class="keyword">null</span>) &#123;</div><div class="line">            builder.setDateFormat(<span class="keyword">this</span>.dateFormatPattern);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.gson = builder.create();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Gson <span class="title">getObject</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.gson;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</div><div class="line">        <span class="keyword">return</span> Gson.class;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>GsonFactoryBean</code>除了实现了<code>FactoryBean</code>接口，还实现了<code>InitializingBean</code>接口，这个接口只有一个方法</p>
<p><code>afterPropertiesSet</code>。这个方法会在bean的所有提供的属性被设置之后，被BeanFactory调用，是spring保留的一个扩展点。</p>
<p><code>GsonFactoryBean</code>在这个方法中将收集到的配置信息传给builder，构建出一个<code>Gson</code>对象（这种一般是大对象，一个容器中有一个就够了）。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"gsonFactoryBean"</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.GsonFactoryBean"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dateFormatPattern"</span> <span class="attr">value</span>=<span class="string">"yyyy-MM-dd"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"disableHtmlEscaping"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prettyPrinting"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol>
<li><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html" rel="external nofollow noopener noreferrer" target="_blank">7. The IoC container</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;factory-bean&quot;&gt;&lt;a href=&quot;#factory-bean&quot; class=&quot;headerlink&quot; title=&quot;factory-bean&quot;&gt;&lt;/a&gt;factory-bean&lt;/h3&gt;&lt;p&gt;spring的bean标签的一个属性，用来指定创建实例的方法
    
    </summary>
    
      <category term="spring" scheme="http://qsli.github.io/categories/spring/"/>
    
    
      <category term="beanfactory" scheme="http://qsli.github.io/tags/beanfactory/"/>
    
  </entry>
  
  <entry>
    <title>shell命令长度限制</title>
    <link href="http://qsli.github.io/2017/02/06/shell-input-limit/"/>
    <id>http://qsli.github.io/2017/02/06/shell-input-limit/</id>
    <published>2017-02-05T17:08:23.000Z</published>
    <updated>2017-04-16T12:04:30.014Z</updated>
    
    <content type="html"><![CDATA[<h2 id="两个命令"><a href="#两个命令" class="headerlink" title="两个命令"></a>两个命令</h2><h3 id="ARG-MAX"><a href="#ARG-MAX" class="headerlink" title="ARG_MAX"></a>ARG_MAX</h3><blockquote>
<p>The limit for the length of a command line is not imposed by the shell, but by the operating system. This limit is usually in the range of hundred kilobytes. POSIX denotes this limit ARG_MAX and on POSIX conformant systems you can query it with</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ getconf ARG_MAX    <span class="comment"># Get argument limit in bytes</span></div></pre></td></tr></table></figure>
<p>在我的cygwin上的结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  getconf ARG_MAX</div><div class="line">32000</div></pre></td></tr></table></figure>
<h3 id="xargs-–show-limits"><a href="#xargs-–show-limits" class="headerlink" title="xargs –show-limits"></a>xargs –show-limits</h3><p>我的Cygwin上的结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">➜   xargs --show-limits</div><div class="line">您的环境变量占有 7787 个字节</div><div class="line">此系统的参数长度 POSIX 上限: 22165</div><div class="line">所有系统中所允许的最小参数长度 POSIX 上限: 4096</div><div class="line">我们实际能用的最大命令长度: 14378</div><div class="line">我们实际能用的命令缓冲区的大小: 22165</div><div class="line">Maximum parallelism (--max-procs must be no greater): 2147483647</div><div class="line"></div><div class="line">xargs 中的命令现在将继续执行，并且它会尝试读取输入并运行命令；如果您不想它发生，请按下“文件结束”按键(ctrl-D)。</div><div class="line">警告: echo 将至少运行一次。如果您不想它发生，请按下中断按键。(ctrl-C)</div></pre></td></tr></table></figure>
<h2 id="绕过限制"><a href="#绕过限制" class="headerlink" title="绕过限制"></a>绕过限制</h2><p>使用脚本编写。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://stackoverflow.com/questions/19354870/bash-command-line-and-input-limit" rel="external nofollow noopener noreferrer" target="_blank">shell - Bash command line and input limit - Stack Overflow</a></p>
</li>
<li><p><a href="http://stackoverflow.com/questions/6846263/maximum-length-of-command-line-argument-that-can-be-passed-to-sqlplus-from-lin" rel="external nofollow noopener noreferrer" target="_blank">Maximum length of command line argument that can be passed to SQL*Plus (from Linux C Shell)? - Stack Overflow</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;两个命令&quot;&gt;&lt;a href=&quot;#两个命令&quot; class=&quot;headerlink&quot; title=&quot;两个命令&quot;&gt;&lt;/a&gt;两个命令&lt;/h2&gt;&lt;h3 id=&quot;ARG-MAX&quot;&gt;&lt;a href=&quot;#ARG-MAX&quot; class=&quot;headerlink&quot; title=&quot;ARG
    
    </summary>
    
      <category term="shell" scheme="http://qsli.github.io/categories/shell/"/>
    
    
      <category term="limit" scheme="http://qsli.github.io/tags/limit/"/>
    
  </entry>
  
  <entry>
    <title>tomcat中的StringManager</title>
    <link href="http://qsli.github.io/2017/02/06/tomcat-stringmanager/"/>
    <id>http://qsli.github.io/2017/02/06/tomcat-stringmanager/</id>
    <published>2017-02-05T16:45:02.000Z</published>
    <updated>2017-04-16T12:04:30.014Z</updated>
    
    <content type="html"><![CDATA[<p>tomcat中使用StringManager来管理错误提示信息，错误信息存储在<code>LocalStrings.properties</code>文件中，支持包级别的文件配置。</p>
<h2 id="StringManager"><a href="#StringManager" class="headerlink" title="StringManager"></a>StringManager</h2><p>构造函数私有，通过静态方法<code>getManager</code>获取对应package的实例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Hashtable&lt;String, StringManager&gt; managers =</div><div class="line">        <span class="keyword">new</span> Hashtable&lt;&gt;();</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Get the StringManager for a particular package. If a manager for</div><div class="line"> * a package already exists, it will be reused, else a new</div><div class="line"> * StringManager will be created and returned.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> packageName The package name</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> StringManager <span class="title">getManager</span><span class="params">(String packageName)</span> </span>&#123;</div><div class="line">    StringManager mgr = managers.get(packageName);</div><div class="line">    <span class="keyword">if</span> (mgr == <span class="keyword">null</span>) &#123;</div><div class="line">        mgr = <span class="keyword">new</span> StringManager(packageName);</div><div class="line">        managers.put(packageName, mgr);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> mgr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="LocalStrings"><a href="#LocalStrings" class="headerlink" title="LocalStrings"></a>LocalStrings</h2><p>本身支持国际化(i18n), LocalStrings.properties（英文）、LocalStrings_es.properties（西班牙语）、LocalStrings_ja.properties（日语）</p>
<p>文件示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">contextBindings.unknownContext=Unknown context name : &#123;0&#125;</div><div class="line">contextBindings.noContextBoundToThread=No naming context bound to this thread</div><div class="line">contextBindings.noContextBoundToCL=No naming context bound to this class loader</div><div class="line">selectorContext.noJavaUrl=This context must be accessed through a java: URL</div><div class="line">selectorContext.methodUsingName=Call to method &apos;&apos;&#123;0&#125;&apos;&apos; with a Name of &apos;&apos;&#123;1&#125;&apos;&apos;</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li>《How tomcat works》</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;tomcat中使用StringManager来管理错误提示信息，错误信息存储在&lt;code&gt;LocalStrings.properties&lt;/code&gt;文件中，支持包级别的文件配置。&lt;/p&gt;
&lt;h2 id=&quot;StringManager&quot;&gt;&lt;a href=&quot;#StringMan
    
    </summary>
    
      <category term="tomcat" scheme="http://qsli.github.io/categories/tomcat/"/>
    
    
      <category term="string-manager" scheme="http://qsli.github.io/tags/string-manager/"/>
    
  </entry>
  
  <entry>
    <title>tomcat访问时发生AbstractMethodError</title>
    <link href="http://qsli.github.io/2017/01/27/tomcat-AbstractMethodError/"/>
    <id>http://qsli.github.io/2017/01/27/tomcat-AbstractMethodError/</id>
    <published>2017-01-27T09:16:10.000Z</published>
    <updated>2017-04-16T12:04:30.014Z</updated>
    
    <content type="html"><![CDATA[<h2 id="异常堆栈"><a href="#异常堆栈" class="headerlink" title="异常堆栈"></a>异常堆栈</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">javax.servlet.ServletException: Servlet execution threw an exception</div><div class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:313) [catalina.jar:6.0.29]</div><div class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [catalina.jar:6.0.29]</div><div class="line">        at qunar.ServletWatcher.doFilter(ServletWatcher.java:160) ~[common-core-8.3.5.jar:na]</div><div class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) [catalina.jar:6.0.29]</div><div class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [catalina.jar:6.0.29]</div><div class="line">        at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121) [spring-web-4.2.5.RELEASE.jar:4.2.5.RELEASE]</div><div class="line">        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.5.RELEASE.jar:4.2.5.RELEASE]</div><div class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) [catalina.jar:6.0.29]</div><div class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [catalina.jar:6.0.29]</div><div class="line">        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) [catalina.jar:6.0.29]</div><div class="line">        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) [catalina.jar:6.0.29]</div><div class="line">        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127) [catalina.jar:6.0.29]</div><div class="line">        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) [catalina.jar:6.0.29]</div><div class="line">        at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:555) [catalina.jar:6.0.29]</div><div class="line">        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) [catalina.jar:6.0.29]</div><div class="line">        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:298) [catalina.jar:6.0.29]</div><div class="line">        at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:857) [tomcat-coyote.jar:6.0.29]</div><div class="line">        at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:588) [tomcat-coyote.jar:6.0.29]</div><div class="line">        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489) [tomcat-coyote.jar:6.0.29]</div><div class="line">        at java.lang.Thread.run(Thread.java:745) [na:1.8.0_60]</div><div class="line">Caused by: java.lang.AbstractMethodError: null</div><div class="line">        at javax.servlet.http.HttpServletResponseWrapper.getStatus(HttpServletResponseWrapper.java:228) ~[lib/:na]</div><div class="line">        at javax.servlet.http.HttpServletResponseWrapper.getStatus(HttpServletResponseWrapper.java:228) ~[lib/:na]</div><div class="line">        at org.springframework.web.servlet.FrameworkServlet.publishRequestHandledEvent(FrameworkServlet.java:1070) ~[spring-webmvc-4.2.5.RELEASE.jar:4.2.5.RELEASE]</div><div class="line">        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1003) ~[spring-webmvc-4.2.5.RELEASE.jar:4.2.5.RELEASE]</div><div class="line">        at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:859) ~[spring-webmvc-4.2.5.RELEASE.jar:4.2.5.RELEASE]</div><div class="line">        at javax.servlet.http.HttpServlet.doHead(HttpServlet.java:244) ~[lib/:na]</div><div class="line">        at javax.servlet.http.HttpServlet.service(HttpServlet.java:644) ~[lib/:na]</div><div class="line">        at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:844) ~[spring-webmvc-4.2.5.RELEASE.jar:4.2.5.RELEASE]</div><div class="line">        at javax.servlet.http.HttpServlet.service(HttpServlet.java:728) ~[lib/:na]</div><div class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) [catalina.jar:6.0.29]</div><div class="line">        ... 19 common frames omitted</div></pre></td></tr></table></figure>
<h3 id="AbstractMethodError异常"><a href="#AbstractMethodError异常" class="headerlink" title="AbstractMethodError异常"></a>AbstractMethodError异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Thrown when an application tries to call an abstract method.</div><div class="line"> * Normally, this error is caught by the compiler; this error can</div><div class="line"> * only occur at run time if the definition of some class has</div><div class="line"> * incompatibly changed since the currently executing method was last</div><div class="line"> * compiled.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span>  unascribed</div><div class="line"> * <span class="doctag">@since</span>   JDK1.0</div><div class="line"> */</div><div class="line"><span class="keyword">public</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractMethodError</span> <span class="keyword">extends</span> <span class="title">IncompatibleClassChangeError</span> </span>&#123;...&#125;</div></pre></td></tr></table></figure>
<p>就是调用了一个没有实现的抽象方法时会抛出这个异常。</p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><h3 id="环境被搞乱"><a href="#环境被搞乱" class="headerlink" title="环境被搞乱"></a>环境被搞乱</h3><p>有人把<code>servlet-api 3.0</code>的jar包拷贝到了<code>tomcat6</code>的lib目录下，替换了原来的jar包，造成spring以为他支持Servlet3.0 但是tomcat却没有实现这个方法。</p>
<h2 id="Spring-版本"><a href="#Spring-版本" class="headerlink" title="Spring 版本"></a>Spring 版本</h2><p>Spring的版本是4.2.5，增加了一些<code>Servlet 3.0</code> 的特性支持, 但是使用之前Spring会根据使用的</p>
<p><code>Servlet-api</code>来检测是否支持<code>Servlet 3.0</code></p>
<p>使用的3.0的api</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Gets the current status code of this response.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span> the current status code of this response</div><div class="line"> *</div><div class="line"> * <span class="doctag">@since</span> Servlet 3.0</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStatus</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<p>在<code>FrameworkServlet</code>中会进行相应的检测和使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">/** Checking for Servlet 3.0+ HttpServletResponse.getStatus() */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> responseGetStatusAvailable =</div><div class="line">            ClassUtils.hasMethod(HttpServletResponse.class, <span class="string">"getStatus"</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">publishRequestHandledEvent</span><span class="params">(</span></span></div><div class="line">HttpServletRequest request, HttpServletResponse response, <span class="keyword">long</span> startTime, Throwable failureCause) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.publishEvents) &#123;</div><div class="line">        <span class="comment">// Whether or not we succeeded, publish an event.</span></div><div class="line">        <span class="keyword">long</span> processingTime = System.currentTimeMillis() - startTime;</div><div class="line">        <span class="keyword">int</span> statusCode = (responseGetStatusAvailable ? response.getStatus() : -<span class="number">1</span>);</div><div class="line">        <span class="keyword">this</span>.webApplicationContext.publishEvent(</div><div class="line">            <span class="keyword">new</span> ServletRequestHandledEvent(<span class="keyword">this</span>,</div><div class="line">                    request.getRequestURI(), request.getRemoteAddr(),</div><div class="line">                    request.getMethod(), getServletConfig().getServletName(),</div><div class="line">                    WebUtils.getSessionId(request), getUsernameForRequest(request),</div><div class="line">                    processingTime, failureCause, statusCode));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="为什么编译时没有报错"><a href="#为什么编译时没有报错" class="headerlink" title="为什么编译时没有报错"></a>为什么编译时没有报错</h3><blockquote>
<p>当前的JVM规范中，与方法调用相关的指令有4个：invokevirtual、invokeinterface、invokestatic与invokespecial。其中调用接口方法时使用的JVM指令是invokeinterface。这个指令与另外3个方法调用指令有一个显著的差异：它不要求JVM的校验器（verifier）检查被调用对象（receiver）的类型；另外3个方法调用指令都要求校验被调用对象。也就是说，使用invokeinterface时如果被调用对象没有实现指定的接口，则应该在运行时而不是链接时抛出异常；而另外3个方法调用指令都要求在链接时抛出异常。 </p>
</blockquote>
<p>这也是为啥类的载入是成功的，但是tomcat里面没有实现那个方法。</p>
<h2 id="servlet和tomcat的对应关系"><a href="#servlet和tomcat的对应关系" class="headerlink" title="servlet和tomcat的对应关系"></a>servlet和tomcat的对应关系</h2>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://rednaxelafx.iteye.com/blog/400362" rel="external nofollow noopener noreferrer" target="_blank">JVM在校验阶段不检查接口的实现状况 - Script Ahead, Code Behind - ITeye技术网站</a></p>
</li>
<li><p><a href="http://tomcat.apache.org/whichversion.html" rel="external nofollow noopener noreferrer" target="_blank">Apache Tomcat® - Which Version Do I Want?</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;异常堆栈&quot;&gt;&lt;a href=&quot;#异常堆栈&quot; class=&quot;headerlink&quot; title=&quot;异常堆栈&quot;&gt;&lt;/a&gt;异常堆栈&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
    
    </summary>
    
      <category term="tomcat" scheme="http://qsli.github.io/categories/tomcat/"/>
    
    
  </entry>
  
  <entry>
    <title>jar文件查看</title>
    <link href="http://qsli.github.io/2017/01/27/jar/"/>
    <id>http://qsli.github.io/2017/01/27/jar/</id>
    <published>2017-01-27T09:03:36.000Z</published>
    <updated>2017-04-16T12:04:30.010Z</updated>
    
    <content type="html"><![CDATA[<p>查看jar包内容</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unzip -q -c myarchive.jar META-INF/MANIFEST.MF</div></pre></td></tr></table></figure>
<blockquote>
<p><code>-q</code> will suppress verbose output from the unzip program</p>
<p><code>-c</code> will extract to stdout</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">unzip -q -c servlet-api.jar META-INF/MANIFEST.MF</div><div class="line">Manifest-Version: 1.0</div><div class="line">Ant-Version: Apache Ant 1.8.1</div><div class="line">Created-By: 1.6.0_45-b06 (Sun Microsystems Inc.)</div><div class="line">X-Compile-Source-JDK: 1.6</div><div class="line">X-Compile-Target-JDK: 1.6</div><div class="line"></div><div class="line">Name: javax/servlet/</div><div class="line">Specification-Title: Java API for Servlets</div><div class="line">Specification-Version: 3.0</div><div class="line">Specification-Vendor: Sun Microsystems, Inc.</div><div class="line">Implementation-Title: javax.servlet</div><div class="line">Implementation-Version: 3.0.FR</div><div class="line">Implementation-Vendor: Apache Software Foundation</div></pre></td></tr></table></figure>
<h2 id="jar命令"><a href="#jar命令" class="headerlink" title="jar命令"></a>jar命令</h2><p>在linux下如何查看一个jar文件中有哪些类呢？</p>
<p><code>jar tf test.jar</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">META-INF/</div><div class="line">META-INF/MANIFEST.MF</div><div class="line">javax/</div><div class="line">javax/servlet/</div><div class="line">javax/servlet/annotation/</div><div class="line">javax/servlet/descriptor/</div><div class="line">javax/servlet/http/</div><div class="line">...</div><div class="line">javax/servlet/resources/xml.xsd</div><div class="line">META-INF/NOTICE</div><div class="line">META-INF/LICENSE</div></pre></td></tr></table></figure>
<h2 id="grepjar"><a href="#grepjar" class="headerlink" title="grepjar"></a>grepjar</h2><p>有些时候，我们需要查看一个jar文件中是否包含了某个方法，这个在linux下可以通过下面的命令来查询</p>
<p><code>grepjar methodName class.jar</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ grepjar <span class="string">'getStatus'</span> servlet-api.jar</div><div class="line">javax/servlet/http/HttpServletResponse.class:getStatus</div><div class="line">javax/servlet/http/HttpServletResponseWrapper.class:getStatus</div></pre></td></tr></table></figure>
<p>参数：</p>
<p>||option || meaning ||<br>|-b |  Print byte offset of match.|<br>|–|—————|<br>|-c |  Print number of matches.|<br>|-i |  Compare case-insensitively.|<br>|-n |  Print line number of each match.|<br>|-s |  Suppress error messages.|<br>|-w |  Force PATTERN to match only whole words.|<br>|-e | PATTERN  Use PATTERN as regular expression.|<br>|–help |  Print help, then exit.|<br>|-V |  |<br>|–version |   Print version number, then exit.|</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://stackoverflow.com/questions/7066063/how-to-read-manifest-mf-file-from-jar-using-bash" rel="external nofollow noopener noreferrer" target="_blank">How to read MANIFEST.MF file from JAR using Bash - Stack Overflow</a></p>
<p><a href="http://xiaofengwu.tumblr.com/post/63518704051/linux%E6%9F%A5%E7%9C%8Bjar%E4%B8%AD%E7%9A%84%E7%B1%BB%E4%BB%A5%E5%8F%8A%E7%B1%BB%E4%B8%AD%E6%96%B9%E6%B3%95%E5%91%BD%E4%BB%A4" rel="external nofollow noopener noreferrer" target="_blank">吴峰子 — linux查看jar中的类以及类中方法命令</a></p>
<p><a href="http://www.tutorialspoint.com/unix_commands/grepjar.htm" rel="external nofollow noopener noreferrer" target="_blank">grepdiff - Unix, Linux Command</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;查看jar包内容&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;
    
    </summary>
    
      <category term="java" scheme="http://qsli.github.io/categories/java/"/>
    
    
      <category term="jar" scheme="http://qsli.github.io/tags/jar/"/>
    
  </entry>
  
  <entry>
    <title>guava-eventbus</title>
    <link href="http://qsli.github.io/2017/01/17/guava-eventbus/"/>
    <id>http://qsli.github.io/2017/01/17/guava-eventbus/</id>
    <published>2017-01-16T17:30:26.000Z</published>
    <updated>2017-04-16T12:04:30.006Z</updated>
    
    <content type="html"><![CDATA[<h2 id="从观察者模式说起"><a href="#从观察者模式说起" class="headerlink" title="从观察者模式说起"></a>从观察者模式说起</h2><h3 id="观察者模式类图"><a href="#观察者模式类图" class="headerlink" title="观察者模式类图"></a>观察者模式类图</h3><p>观察者模式是软件设计中经常使用到的一种模式，又叫发布-订阅模式（Publish/Subscribe）、模型-视图(Model/View)模式、源-监听器（Source/Listener）模式或从属者（Dependents）模式。</p>
<img src="http://www.plantuml.com/plantuml/svg/ZL1B3e8m4Dtt51FSWCe5Z36X7825I-C2w4XGqffIJOnwTm5f1IdYRlBcVMOUESVfASuGoajon5JT2O1e9jY-4QYX1N2XyiCjIagKLvIbwpLep9Y6MeHXWGfxu9DyJ4F1KraHMlDWtFo7YawezENhX-yF4YVsb5GMkXJHUdTQYJgGFc6OB2fZP-uODgp0DNCeYg8YvO9xbXyrBR0dZB2fdMqoUw-QY4a69NKTtnM2lvjb4f4lcL0AsNvZiHw8_b1HyW80">
<h3 id="Java中的支持"><a href="#Java中的支持" class="headerlink" title="Java中的支持"></a>Java中的支持</h3><p>Java中有一个<code>Observable</code>类和一个<code>Observer</code>接口, <code>Observable</code>类已经实现了添加、删除观察者的方法。</p>
<ul>
<li>主题继承自<code>Observable</code>，继承一些便利方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> <span class="keyword">extends</span> <span class="title">Observable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String subject = <span class="string">"play with some fun"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        notifyObservers(message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSubject</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> subject;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Subject subject = <span class="keyword">new</span> Subject();</div><div class="line">        subject.addObserver(<span class="keyword">new</span> Watcher(<span class="string">"001"</span>));</div><div class="line">        subject.addObserver(<span class="keyword">new</span> Watcher(<span class="string">"007"</span>));</div><div class="line">        subject.setChanged();</div><div class="line">        <span class="comment">//will do nothing until setChanged() is called</span></div><div class="line">        subject.push(<span class="string">"My watch is ended!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>观察者继承<code>Observer</code>接口，只有一个<code>update</code>方法用来更新数据</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String id;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Watcher</span><span class="params">(String id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">        System.out.println(<span class="string">"My watch begins! "</span> + id);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"-----------------------------------------------------------"</span>);</div><div class="line">        System.out.println(id);</div><div class="line">        Subject subject = (Subject) o;</div><div class="line">        System.out.println(<span class="string">"subject is : "</span> + subject.getSubject());</div><div class="line">        System.out.println(<span class="string">"update data is : "</span> + (String)arg );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">My watch begins! 001</div><div class="line">My watch begins! 007</div><div class="line">-----------------------------------------------------------</div><div class="line">007</div><div class="line">subject is : play with some fun</div><div class="line">update data is : My watch is ended!</div><div class="line">-----------------------------------------------------------</div><div class="line">001</div><div class="line">subject is : play with some fun</div><div class="line">update data is : My watch is ended!</div></pre></td></tr></table></figure>
<h3 id="EventBus"><a href="#EventBus" class="headerlink" title="EventBus"></a>EventBus</h3><blockquote>
<p>EventBus allows publish-subscribe-style communication between components without requiring the components to explicitly register with one another (and thus be aware of each other). It is designed exclusively to replace traditional Java in-process event distribution using explicit registration. It is not a general-purpose publish-subscribe system, nor is it intended for interprocess communication.</p>
</blockquote>
<p>EventBus的优点：</p>
<ul>
<li>无需定义接口，使用注解的形式。</li>
<li>可以在一个类中实现多个事件的捕获。</li>
</ul>
<blockquote>
<p>Due to erasure, no single class can implement a generic interface more than once with different type parameters. </p>
</blockquote>
<ul>
<li>支持子类的捕获。</li>
<li>支持捕获无人处理的event（让我想起了死漂）。</li>
<li>传递的事件类型可以是任意的。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</div><div class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", age="</span> + age +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">extends</span> <span class="title">Person</span>  <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbies;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(name, age);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getHobbies</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> hobbies;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobbies</span><span class="params">(List&lt;String&gt; hobbies)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.hobbies = hobbies;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>定义一个<code>Person</code>类和一个<code>Customer</code>类，用于测试继承关系的捕捉</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventBusTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        EventBus eventBus = <span class="keyword">new</span> EventBus();</div><div class="line">        eventBus.register(<span class="keyword">new</span> EventBusChangeRecorder());</div><div class="line">        Customer customer = <span class="keyword">new</span> Customer(<span class="string">"customer"</span>, <span class="number">66</span>);</div><div class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">"person"</span>, <span class="number">11</span>);</div><div class="line">        eventBus.post(customer);</div><div class="line">        eventBus.post(p);</div><div class="line">        eventBus.post(<span class="keyword">new</span> Integer(<span class="number">123</span>));</div><div class="line">        eventBus.post(<span class="string">"Hello World"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EventBusChangeRecorder</span> </span>&#123;</div><div class="line">        <span class="meta">@Subscribe</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recordCustomerChange</span><span class="params">(Customer customer)</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"-----------------------------------"</span>);</div><div class="line">            System.out.println(<span class="string">"recieved change:"</span>);</div><div class="line">            System.out.println(<span class="string">"customer name: "</span> + customer.getName());</div><div class="line">            System.out.println(<span class="string">"cutomer age: "</span> + customer.getAge());</div><div class="line">            System.out.println(<span class="string">"\n\n"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Subscribe</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">valueChange</span><span class="params">(Integer val)</span> </span>&#123;<span class="comment">//注意方法的类型</span></div><div class="line">            System.out.println(<span class="string">"-----------------------------------"</span>);</div><div class="line">            System.out.println(<span class="string">"val = "</span> + val);</div><div class="line">            System.out.println(<span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Subscribe</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deadEvent</span><span class="params">(DeadEvent deadEvent)</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"-----------------------------------"</span>);</div><div class="line">            System.out.println(<span class="string">"deadEvent = "</span> + deadEvent);</div><div class="line">            System.out.println(<span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Subscribe</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hierarchy</span><span class="params">(Person person)</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"-----------------------------------"</span>);</div><div class="line">            <span class="comment">//will recieve all person and it's subtype</span></div><div class="line">            System.out.println(person);</div><div class="line">            System.out.println(<span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在我的电脑上的执行结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">-----------------------------------</div><div class="line">recieved change:</div><div class="line">customer name: customer</div><div class="line">cutomer age: 66</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">-----------------------------------</div><div class="line">Person&#123;name=&apos;customer&apos;, age=66&#125;</div><div class="line"></div><div class="line"></div><div class="line">-----------------------------------</div><div class="line">Person&#123;name=&apos;person&apos;, age=11&#125;</div><div class="line"></div><div class="line"></div><div class="line">-----------------------------------</div><div class="line">val = 123</div><div class="line"></div><div class="line"></div><div class="line">-----------------------------------</div><div class="line">deadEvent = DeadEvent&#123;source=EventBus&#123;default&#125;, event=Hello World&#125;</div></pre></td></tr></table></figure>
<h3 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h3><h4 id="listener注册过程"><a href="#listener注册过程" class="headerlink" title="listener注册过程"></a>listener注册过程</h4><p><code>EventBus</code>中有一个成员变量叫做<code>subscribers</code>, 负责管理所有注册进来的listener</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> SubscriberRegistry subscribers = <span class="keyword">new</span> SubscriberRegistry(<span class="keyword">this</span>);</div></pre></td></tr></table></figure>
<p><code>register(Object object)</code>方法就是调用<code>subscribers</code>的注册方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Registers all subscriber methods on &#123;<span class="doctag">@code</span> object&#125; to receive events.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> object object whose subscriber methods should be registered.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Object object)</span> </span>&#123;</div><div class="line">  subscribers.register(object);</div><div class="line">&#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line"> * Registers all subscriber methods on the given listener object.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">register</span><span class="params">(Object listener)</span> </span>&#123;</div><div class="line">  <span class="comment">//解析注解，生成&lt;EventType, ListenMethod&gt;的multimap</span></div><div class="line">  Multimap&lt;Class&lt;?&gt;, Subscriber&gt; listenerMethods = findAllSubscribers(listener);</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (Map.Entry&lt;Class&lt;?&gt;, Collection&lt;Subscriber&gt;&gt; entry : listenerMethods.asMap().entrySet()) &#123;</div><div class="line">    Class&lt;?&gt; eventType = entry.getKey();</div><div class="line">    Collection&lt;Subscriber&gt; eventMethodsInListener = entry.getValue();</div><div class="line"></div><div class="line">    CopyOnWriteArraySet&lt;Subscriber&gt; eventSubscribers = subscribers.get(eventType);</div><div class="line"></div><div class="line">    <span class="comment">//新建或者添加到已有的事件对应的Listener中</span></div><div class="line">    <span class="keyword">if</span> (eventSubscribers == <span class="keyword">null</span>) &#123;</div><div class="line">      CopyOnWriteArraySet&lt;Subscriber&gt; newSet = <span class="keyword">new</span> CopyOnWriteArraySet&lt;Subscriber&gt;();</div><div class="line">      eventSubscribers =</div><div class="line">          MoreObjects.firstNonNull(subscribers.putIfAbsent(eventType, newSet), newSet);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    eventSubscribers.addAll(eventMethodsInListener);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line"> * Returns all subscribers for the given listener grouped by the type of event they subscribe to.</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> Multimap&lt;Class&lt;?&gt;, Subscriber&gt; findAllSubscribers(Object listener) &#123;</div><div class="line">  Multimap&lt;Class&lt;?&gt;, Subscriber&gt; methodsInListener = HashMultimap.create();</div><div class="line">  Class&lt;?&gt; clazz = listener.getClass();</div><div class="line">  <span class="keyword">for</span> (Method method : getAnnotatedMethods(clazz)) &#123;<span class="comment">//有缓存哦</span></div><div class="line">    Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</div><div class="line">    Class&lt;?&gt; eventType = parameterTypes[<span class="number">0</span>];</div><div class="line">    methodsInListener.put(eventType, Subscriber.create(bus, listener, method));</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> methodsInListener;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>subscribers</code>的注册方法中完成了对注解<code>@Subscribe</code>的解析。</p>
<h4 id="事件分发过程"><a href="#事件分发过程" class="headerlink" title="事件分发过程"></a>事件分发过程</h4><p><code>EventBus</code>的post方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Posts an event to all registered subscribers. This method will return successfully after the</div><div class="line"> * event has been posted to all subscribers, and regardless of any exceptions thrown by</div><div class="line"> * subscribers.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;If no subscribers have been subscribed for &#123;<span class="doctag">@code</span> event&#125;'s class, and &#123;<span class="doctag">@code</span> event&#125; is not</div><div class="line"> * already a &#123;<span class="doctag">@link</span> DeadEvent&#125;, it will be wrapped in a DeadEvent and reposted.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> event event to post.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(Object event)</span> </span>&#123;</div><div class="line">  Iterator&lt;Subscriber&gt; eventSubscribers = subscribers.getSubscribers(event);</div><div class="line">  <span class="keyword">if</span> (eventSubscribers.hasNext()) &#123;</div><div class="line">    dispatcher.dispatch(event, eventSubscribers);</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(event <span class="keyword">instanceof</span> DeadEvent)) &#123;</div><div class="line">    <span class="comment">// the event had no subscribers and was not itself a DeadEvent</span></div><div class="line">    post(<span class="keyword">new</span> DeadEvent(<span class="keyword">this</span>, event));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的<code>dispatcher</code>默认是<code>Dispatcher.perThreadDispatchQueue()</code></p>
<p>它的<code>dispatch</code>方法实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Per-thread queue of events to dispatch.</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal&lt;Queue&lt;Event&gt;&gt; queue =</div><div class="line">    <span class="keyword">new</span> ThreadLocal&lt;Queue&lt;Event&gt;&gt;() &#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">protected</span> Queue&lt;Event&gt; <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Queues.newArrayDeque();</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Per-thread dispatch state, used to avoid reentrant event dispatching.</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal&lt;Boolean&gt; dispatching =</div><div class="line">    <span class="keyword">new</span> ThreadLocal&lt;Boolean&gt;() &#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">protected</span> Boolean <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatch</span><span class="params">(Object event, Iterator&lt;Subscriber&gt; subscribers)</span> </span>&#123;</div><div class="line">  <span class="comment">//入参校验</span></div><div class="line">  checkNotNull(event);</div><div class="line">  checkNotNull(subscribers);</div><div class="line">  <span class="comment">//从ThreadLocal中拿到队列</span></div><div class="line">  Queue&lt;Event&gt; queueForThread = queue.get();</div><div class="line">  <span class="comment">//先把事件入队列</span></div><div class="line">  queueForThread.offer(<span class="keyword">new</span> Event(event, subscribers));</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (!dispatching.get()) &#123;</div><div class="line">    dispatching.set(<span class="keyword">true</span>);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      Event nextEvent;</div><div class="line">      <span class="comment">//遍历队列中的事件，并分发给相应的订阅者</span></div><div class="line">      <span class="keyword">while</span> ((nextEvent = queueForThread.poll()) != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">while</span> (nextEvent.subscribers.hasNext()) &#123;</div><div class="line">          nextEvent.subscribers.next().dispatchEvent(nextEvent.event);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">      dispatching.remove();</div><div class="line">      queue.remove();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>EventBus的注解提取（简单的缓存），构建相应的Map，以及事件的分发设计地非常好，有了一个大型系统完整的雏形。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://www.cnblogs.com/peida/p/EventBus.html" rel="external nofollow noopener noreferrer" target="_blank">Guava学习笔记：EventBus - peida - 博客园</a></p>
</li>
<li><p><a href="https://github.com/google/guava/wiki/EventBusExplained" rel="external nofollow noopener noreferrer" target="_blank">EventBusExplained · google/guava Wiki</a></p>
</li>
<li><p><a href="https://zh.wikipedia.org/wiki/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F" rel="external nofollow noopener noreferrer" target="_blank">观察者模式 - 维基百科，自由的百科全书</a></p>
</li>
<li><p><a href="http://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/observer.html" rel="external nofollow noopener noreferrer" target="_blank">观察者模式 — Graphic Design Patterns</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;从观察者模式说起&quot;&gt;&lt;a href=&quot;#从观察者模式说起&quot; class=&quot;headerlink&quot; title=&quot;从观察者模式说起&quot;&gt;&lt;/a&gt;从观察者模式说起&lt;/h2&gt;&lt;h3 id=&quot;观察者模式类图&quot;&gt;&lt;a href=&quot;#观察者模式类图&quot; class=&quot;header
    
    </summary>
    
      <category term="guava" scheme="http://qsli.github.io/categories/guava/"/>
    
    
      <category term="event-bus" scheme="http://qsli.github.io/tags/event-bus/"/>
    
  </entry>
  
  <entry>
    <title>Spring MVC 中的异常处理</title>
    <link href="http://qsli.github.io/2017/01/09/Spring-mvc-exception/"/>
    <id>http://qsli.github.io/2017/01/09/Spring-mvc-exception/</id>
    <published>2017-01-08T17:57:08.000Z</published>
    <updated>2017-04-16T12:03:23.385Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-MVC的异常处理"><a href="#Spring-MVC的异常处理" class="headerlink" title="Spring MVC的异常处理"></a>Spring MVC的异常处理</h2><p>Spring中的异常处理主要有两种方式，<em>一种</em>是实现<code>HandlerExceptionResolver</code>接口，</p>
<p>这个接口中只有一个方法<code>resolveException</code>，返回值是一个<code>ModelAndView</code>的对象; </p>
<p><em>另外一种</em>是使用<code>@ExceptionHandler</code>注解作用在方法上，注解的值来指定这个方法能处理的异常的类，</p>
<p>如果注解的值是空的，能处理的类以方法的参数为准。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Try to resolve the given exception that got thrown during handler execution,</div><div class="line">     * returning a &#123;<span class="doctag">@link</span> ModelAndView&#125; that represents a specific error page if appropriate.</div><div class="line">     * &lt;p&gt;The returned &#123;<span class="doctag">@code</span> ModelAndView&#125; may be &#123;<span class="doctag">@linkplain</span> ModelAndView#isEmpty() empty&#125;</div><div class="line">     * to indicate that the exception has been resolved successfully but that no view</div><div class="line">     * should be rendered, for instance by setting a status code.</div><div class="line">     * <span class="doctag">@param</span> request current HTTP request</div><div class="line">     * <span class="doctag">@param</span> response current HTTP response</div><div class="line">     * <span class="doctag">@param</span> handler the executed handler, or &#123;<span class="doctag">@code</span> null&#125; if none chosen at the</div><div class="line">     * time of the exception (for example, if multipart resolution failed)</div><div class="line">     * <span class="doctag">@param</span> ex the exception that got thrown during handler execution</div><div class="line">     * <span class="doctag">@return</span> a corresponding &#123;<span class="doctag">@code</span> ModelAndView&#125; to forward to, or &#123;<span class="doctag">@code</span> null&#125;</div><div class="line">     * for default processing</div><div class="line">     */</div><div class="line">    <span class="function">ModelAndView <span class="title">resolveException</span><span class="params">(</span></span></div><div class="line">            HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//@ExceptionHandler</span></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// @RequestMapping methods omitted ...</span></div><div class="line"></div><div class="line">    <span class="meta">@ExceptionHandler</span>(IOException.class)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">handleIOException</span><span class="params">(IOException ex)</span> </span>&#123;</div><div class="line">        <span class="comment">// prepare responseEntity</span></div><div class="line">        <span class="keyword">return</span> responseEntity;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="异常相关的类"><a href="#异常相关的类" class="headerlink" title="异常相关的类"></a>异常相关的类</h3><blockquote class="pullquote mindmap"><p>#Spring MVC Exception</p>
<p>##HandlerExceptionResolver</p>
<p>###SimpleMappingExceptionResolver</p>
<p>###DefaultHandlerExceptionResolver</p>
<p>##@ExceptionHandler</p>
<p>###@ControllerAdvice</p>
<p>###ResponseEntityExceptionHandler</p>
<p>##Default Servlet Container Error Page</p>
<p>##@ResponseStatus</p>
<p>###ResponseStatusExceptionResolver</p>
</blockquote>
<h3 id="SimpleMappingExceptionResolver"><a href="#SimpleMappingExceptionResolver" class="headerlink" title="SimpleMappingExceptionResolver"></a><code>SimpleMappingExceptionResolver</code></h3><blockquote>
<p>The SimpleMappingExceptionResolver enables you to take the<br>class name of any exception that might be thrown and map it to a view name. </p>
</blockquote>
<p>这个Resolver可以将异常对应的类名映射到一个对应的view name上。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exceptionMappings"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"com.howtodoinjava.demo.exception.AuthException"</span>&gt;</span></div><div class="line">                error/authExceptionView</div><div class="line">            <span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultErrorView"</span> <span class="attr">value</span>=<span class="string">"error/genericView"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="DefaultHandlerExceptionResolver"><a href="#DefaultHandlerExceptionResolver" class="headerlink" title="DefaultHandlerExceptionResolver"></a><code>DefaultHandlerExceptionResolver</code></h3><blockquote>
<p>The DefaultHandlerExceptionResolver translates Spring MVC exceptions to specific error<br>status codes.</p>
</blockquote>
<p>这个Resolver的作用就是将Spring MVC产生的一些异常翻译成对应的http status code。Spring MVC中</p>
<p>默认注册了这个Resolver。</p>
<p>转换列表：</p>
<table>
<thead>
<tr>
<th>Exception</th>
<th>HTTP Status Code</th>
</tr>
</thead>
<tbody>
<tr>
<td>BindException</td>
<td>400 (Bad Request)</td>
</tr>
<tr>
<td>ConversionNotSupportedException</td>
<td>500 (Internal Server Error)</td>
</tr>
<tr>
<td>HttpMediaTypeNotAcceptableException</td>
<td>406 (Not Acceptable)</td>
</tr>
<tr>
<td>HttpMediaTypeNotSupportedException</td>
<td>415 (Unsupported Media Type)</td>
</tr>
<tr>
<td>HttpMessageNotReadableException</td>
<td>400 (Bad Request)</td>
</tr>
<tr>
<td>HttpMessageNotWritableException</td>
<td>500 (Internal Server Error)</td>
</tr>
<tr>
<td>HttpRequestMethodNotSupportedException</td>
<td>405 (Method Not Allowed)</td>
</tr>
<tr>
<td>MethodArgumentNotValidException</td>
<td>400 (Bad Request)</td>
</tr>
<tr>
<td>MissingPathVariableException</td>
<td>500 (Internal Server Error)</td>
</tr>
<tr>
<td>MissingServletRequestParameterException</td>
<td>400 (Bad Request)</td>
</tr>
<tr>
<td>MissingServletRequestPartException</td>
<td>400 (Bad Request)</td>
</tr>
<tr>
<td>NoHandlerFoundException</td>
<td>404 (Not Found)</td>
</tr>
<tr>
<td>NoSuchRequestHandlingMethodException</td>
<td>404 (Not Found)</td>
</tr>
</tbody>
</table>
<h3 id="ExceptionHandler和-ControllerAdvice"><a href="#ExceptionHandler和-ControllerAdvice" class="headerlink" title="@ExceptionHandler和@ControllerAdvice"></a>@ExceptionHandler和@ControllerAdvice</h3><p><code>@ExceptionHandler</code> 可以指定异常的处理类，<code>@ControllerAdvice</code>则可以实现全局的异常统一处理。</p>
<p>两者可配合使用，达到统一处理异常的效果。</p>
<blockquote>
<p>The @ControllerAdvice annotation is a component annotation allowing implementation classes<br>to be auto-detected through classpath scanning. It is automatically enabled when using the MVC<br>namespace or the MVC Java config.</p>
</blockquote>
<p><code>@ControllerAdvice</code>默认在Spring MVC的命名空间中启用。</p>
<blockquote>
<p>Classes annotated with @ControllerAdvice can contain @ExceptionHandler, @InitBinder,<br>and @ModelAttribute annotated methods, and these methods will apply to @RequestMapping<br>methods across all controller hierarchies as opposed to the controller hierarchy within which they are<br>declared.</p>
</blockquote>
<p><code>@ControllerAdvice</code>声明的异常处理方法默认对全局都是有效的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Target all Controllers annotated with @RestController</span></div><div class="line"><span class="meta">@ControllerAdvice</span>(annotations = RestController.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationAdvice</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// Target all Controllers within specific packages</span></div><div class="line"><span class="meta">@ControllerAdvice</span>(<span class="string">"org.example.controllers"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasePackageAdvice</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// Target all Controllers assignable to specific classes</span></div><div class="line"><span class="meta">@ControllerAdvice</span>(assignableTypes = &#123;ControllerInterface.class, AbstractController.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AssignableTypesAdvice</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>还有一个<code>@RestControllerAdvice</code>和<code>@ControllerAdvice</code>相似，只是假定<code>@ResponseBody</code>出现在<code>@ExceptionHandler</code>上</p>
<blockquote>
<p>@RestControllerAdvice is an alternative where @ExceptionHandler methods assume<br>@ResponseBody semantics by default.</p>
</blockquote>
<h3 id="ResponseEntityExceptionHandler"><a href="#ResponseEntityExceptionHandler" class="headerlink" title="ResponseEntityExceptionHandler"></a><code>ResponseEntityExceptionHandler</code></h3><p>如果你想使用<code>@ExceptionHandler</code>来处理异常的话， 你可以继承这个类。</p>
<p>这个类中定义好了一个异常处理的方法，来处理Spring MVC 的标准异常。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Provides handling for standard Spring MVC exceptions.</div><div class="line">     * <span class="doctag">@param</span> ex the target exception</div><div class="line">     * <span class="doctag">@param</span> request the current request</div><div class="line">     */</div><div class="line">    <span class="meta">@ExceptionHandler</span>(&#123;</div><div class="line">            NoSuchRequestHandlingMethodException.class,</div><div class="line">            HttpRequestMethodNotSupportedException.class,</div><div class="line">            HttpMediaTypeNotSupportedException.class,</div><div class="line">            HttpMediaTypeNotAcceptableException.class,</div><div class="line">            MissingPathVariableException.class,</div><div class="line">            MissingServletRequestParameterException.class,</div><div class="line">            ServletRequestBindingException.class,</div><div class="line">            ConversionNotSupportedException.class,</div><div class="line">            TypeMismatchException.class,</div><div class="line">            HttpMessageNotReadableException.class,</div><div class="line">            HttpMessageNotWritableException.class,</div><div class="line">            MethodArgumentNotValidException.class,</div><div class="line">            MissingServletRequestPartException.class,</div><div class="line">            BindException.class,</div><div class="line">            NoHandlerFoundException.class</div><div class="line">        &#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ResponseEntity&lt;Object&gt; <span class="title">handleException</span><span class="params">(Exception ex, WebRequest request)</span> </span>&#123;</div><div class="line"></div><div class="line">            HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> NoSuchRequestHandlingMethodException) &#123;</div><div class="line">                HttpStatus status = HttpStatus.NOT_FOUND;</div><div class="line">                <span class="keyword">return</span> handleNoSuchRequestHandlingMethod((NoSuchRequestHandlingMethodException) ex, headers, status, request);</div><div class="line">            &#125;</div><div class="line">            ...</div><div class="line">            ...</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="ResponseStatus"><a href="#ResponseStatus" class="headerlink" title="@ResponseStatus"></a>@ResponseStatus</h3><p>用于在自定义异常，设置http的状态码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ResponseStatus</span>(value=HttpStatus.NOT_FOUND, reason=<span class="string">"No such Order"</span>)  <span class="comment">// 404</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderNotFoundException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Spring MVC 中默认开启了<code>ResponseStatusExceptionResolver</code>，这个Resolver会处理上面</p>
<p>设置的Http status code。</p>
<blockquote>
<p>A business exception can be annotated with @ResponseStatus. When the exception is raised, the<br>ResponseStatusExceptionResolver handles it by setting the status of the response accordingly.<br>By default the DispatcherServlet registers the ResponseStatusExceptionResolver and it is<br>available for use.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">doResolveException</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></div><div class="line">            Object handler, Exception ex) &#123;</div><div class="line"></div><div class="line">        ResponseStatus responseStatus = AnnotatedElementUtils.findMergedAnnotation(ex.getClass(), ResponseStatus.class);</div><div class="line">        <span class="keyword">if</span> (responseStatus != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">return</span> resolveResponseStatus(responseStatus, request, response, handler, ex);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">catch</span> (Exception resolveEx) &#123;</div><div class="line">                logger.warn(<span class="string">"Handling of @ResponseStatus resulted in Exception"</span>, resolveEx);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ex.getCause() <span class="keyword">instanceof</span> Exception) &#123;</div><div class="line">            ex = (Exception) ex.getCause();</div><div class="line">            <span class="keyword">return</span> doResolveException(request, response, handler, ex);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>通过工具类拿到注解上的值，然后调用内部的<code>resolveResponseStatus</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">resolveResponseStatus</span><span class="params">(ResponseStatus responseStatus, HttpServletRequest request,</span></span></div><div class="line">            HttpServletResponse response, Object handler, Exception ex) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> statusCode = responseStatus.code().value();</div><div class="line">        String reason = responseStatus.reason();</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.messageSource != <span class="keyword">null</span>) &#123;</div><div class="line">            reason = <span class="keyword">this</span>.messageSource.getMessage(reason, <span class="keyword">null</span>, reason, LocaleContextHolder.getLocale());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!StringUtils.hasLength(reason)) &#123;</div><div class="line">            response.sendError(statusCode);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            response.sendError(statusCode, reason);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>最终将http status code 设置到reponse中。</p>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>Spring MVC 的异常处理在<code>DispatcherServlet</code>的<code>doDispatch</code>方法中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        HttpServletRequest processedRequest = request;</div><div class="line">        HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ModelAndView mv = <span class="keyword">null</span>;</div><div class="line">            Exception dispatchException = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">//do Handle</span></div><div class="line">                ...</div><div class="line">                &#125;</div><div class="line">            <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">                dispatchException = ex;</div><div class="line">            &#125;</div><div class="line">            processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">            triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (Error err) &#123;</div><div class="line">            triggerAfterCompletionWithError(processedRequest, response, mappedHandler, err);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="comment">//post process</span></div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在内层的<code>try-catch</code>中有一个方法<code>processDispatchResult</code>, 在这个方法之前的catch块已经将处理过程可能出现的异常catch住了，并赋值给 <code>dispatchException</code>.</p>
<p>然后调用<code>processDispatchResult</code>分发给能处理这个异常的<code>ExceptionResolver</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">/**</span></div><div class="line">     * Handle the result of handler selection and handler invocation, which is</div><div class="line">     * either a ModelAndView or an Exception to be resolved to a ModelAndView.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></div><div class="line">            HandlerExecutionChain mappedHandler, ModelAndView mv, Exception exception) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">        <span class="keyword">boolean</span> errorView = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</div><div class="line">                logger.debug(<span class="string">"ModelAndViewDefiningException encountered"</span>, exception);</div><div class="line">                mv = ((ModelAndViewDefiningException) exception).getModelAndView();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                Object handler = (mappedHandler != <span class="keyword">null</span> ? mappedHandler.getHandler() : <span class="keyword">null</span>);</div><div class="line">                mv = processHandlerException(request, response, handler, exception);</div><div class="line">                errorView = (mv != <span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Did the handler return a view to render?</span></div><div class="line">        <span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.wasCleared()) &#123;</div><div class="line">            render(mv, request, response);</div><div class="line">            <span class="keyword">if</span> (errorView) &#123;</div><div class="line">                WebUtils.clearErrorRequestAttributes(request);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">                logger.debug(<span class="string">"Null ModelAndView returned to DispatcherServlet with name '"</span> + getServletName() +</div><div class="line">                        <span class="string">"': assuming HandlerAdapter completed request handling"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</div><div class="line">            <span class="comment">// Concurrent handling started during a forward</span></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</div><div class="line">            mappedHandler.triggerAfterCompletion(request, response, <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">processHandlerException</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></div><div class="line">            Object handler, Exception ex) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">        <span class="comment">// Check registered HandlerExceptionResolvers...</span></div><div class="line">        ModelAndView exMv = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">for</span> (HandlerExceptionResolver handlerExceptionResolver : <span class="keyword">this</span>.handlerExceptionResolvers) &#123;</div><div class="line">            exMv = handlerExceptionResolver.resolveException(request, response, handler, ex);</div><div class="line">            <span class="keyword">if</span> (exMv != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (exMv != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (exMv.isEmpty()) &#123;</div><div class="line">                request.setAttribute(EXCEPTION_ATTRIBUTE, ex);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// We might still need view name translation for a plain error model...</span></div><div class="line">            <span class="keyword">if</span> (!exMv.hasView()) &#123;</div><div class="line">                exMv.setViewName(getDefaultViewName(request));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">                logger.debug(<span class="string">"Handler execution resulted in exception - forwarding to resolved error view: "</span> + exMv, ex);</div><div class="line">            &#125;</div><div class="line">            WebUtils.exposeErrorRequestAttributes(request, ex, getServletName());</div><div class="line">            <span class="keyword">return</span> exMv;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">throw</span> ex;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这个异常的处理和之前，查找handler的过程是一样的。</p>
<p>遍历所有已经注册的<code>HandlerExceptionResolver</code>, 找到第一个能处理的。</p>
<h4 id="ExceptionHandler的处理"><a href="#ExceptionHandler的处理" class="headerlink" title="@ExceptionHandler的处理"></a>@ExceptionHandler的处理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Implementation of the &#123;<span class="doctag">@link</span> org.springframework.web.portlet.HandlerExceptionResolver&#125; interface that handles</div><div class="line"> * exceptions through the &#123;<span class="doctag">@link</span> ExceptionHandler&#125; annotation.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;This exception resolver is enabled by default in the &#123;<span class="doctag">@link</span> org.springframework.web.portlet.DispatcherPortlet&#125;.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Arjen Poutsma</div><div class="line"> * <span class="doctag">@author</span> Juergen Hoeller</div><div class="line"> * <span class="doctag">@since</span> 3.0</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationMethodHandlerExceptionResolver</span> <span class="keyword">extends</span> <span class="title">AbstractHandlerExceptionResolver</span> </span>&#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">doResolveException</span><span class="params">(</span></span></div><div class="line">            PortletRequest request, MimeResponse response, Object handler, Exception ex) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123;</div><div class="line">            Method handlerMethod = findBestExceptionHandlerMethod(handler, ex);</div><div class="line">            <span class="keyword">if</span> (handlerMethod != <span class="keyword">null</span>) &#123;</div><div class="line">                NativeWebRequest webRequest = <span class="keyword">new</span> PortletWebRequest(request, response);</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Object[] args = resolveHandlerArguments(handlerMethod, handler, webRequest, ex);</div><div class="line">                    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">                        logger.debug(<span class="string">"Invoking request handler method: "</span> + handlerMethod);</div><div class="line">                    &#125;</div><div class="line">                    Object retVal = doInvokeMethod(handlerMethod, handler, args);</div><div class="line">                    <span class="keyword">return</span> getModelAndView(retVal);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">catch</span> (Exception invocationEx) &#123;</div><div class="line">                    logger.error(<span class="string">"Invoking request method resulted in exception : "</span> + handlerMethod, invocationEx);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>和普通的处理类似，从所有标注了<code>@ExceptionHandler</code>的方法中找到最佳匹配，然后解析参数，调用。</p>
<h2 id="web容器的错误处理"><a href="#web容器的错误处理" class="headerlink" title="web容器的错误处理"></a>web容器的错误处理</h2><p><code>WEB-INF/web.xml</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>500<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/Error.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">exception-type</span>&gt;</span>java.lang.Exception<span class="tag">&lt;/<span class="name">exception-type</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/Error.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></div></pre></td></tr></table></figure>
<p>location中的值可以是一个jsp，也可以是一个URL（包括<code>@Controller</code>注解的）</p>
<p>处理error的Controller示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(path = <span class="string">"/error"</span>, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">handle</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line"></div><div class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</div><div class="line">        map.put(<span class="string">"status"</span>, request.getAttribute(<span class="string">"javax.servlet.error.status_code"</span>));</div><div class="line">        map.put(<span class="string">"reason"</span>, request.getAttribute(<span class="string">"javax.servlet.error.message"</span>));</div><div class="line"></div><div class="line">        <span class="keyword">return</span> map;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>JSP示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page contentType=&quot;application/json&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</div><div class="line">&#123;</div><div class="line">status:&lt;%=request.getAttribute(&quot;javax.servlet.error.status_code&quot;) %&gt;,</div><div class="line">reason:&lt;%=request.getAttribute(&quot;javax.servlet.error.message&quot;) %&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://www.cnblogs.com/hupengcool/p/4586910.html" rel="external nofollow noopener noreferrer" target="_blank">SpringMVC 异常处理 - 纵酒挥刀斩人头 - 博客园</a></p>
</li>
<li><p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-exceptionhandlers" rel="external nofollow noopener noreferrer" target="_blank">22. Web MVC framework</a></p>
</li>
<li><p><a href="http://howtodoinjava.com/spring/spring-mvc/spring-mvc-simplemappingexceptionresolver-example/" rel="external nofollow noopener noreferrer" target="_blank">Spring MVC Mapping Exceptions to Views Example | Spring MVC SimpleMappingExceptionResolver Example</a></p>
</li>
<li><p><a href="http://stackoverflow.com/questions/15987212/custom-error-page-in-tomcat-7-for-error-code-500" rel="external nofollow noopener noreferrer" target="_blank">java - Custom Error Page in Tomcat 7 for Error Code 500 - Stack Overflow</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Spring-MVC的异常处理&quot;&gt;&lt;a href=&quot;#Spring-MVC的异常处理&quot; class=&quot;headerlink&quot; title=&quot;Spring MVC的异常处理&quot;&gt;&lt;/a&gt;Spring MVC的异常处理&lt;/h2&gt;&lt;p&gt;Spring中的异常处理主要有两种方
    
    </summary>
    
      <category term="spring" scheme="http://qsli.github.io/categories/spring/"/>
    
    
      <category term="exception" scheme="http://qsli.github.io/tags/exception/"/>
    
  </entry>
  
  <entry>
    <title>pip使用</title>
    <link href="http://qsli.github.io/2017/01/08/pip/"/>
    <id>http://qsli.github.io/2017/01/08/pip/</id>
    <published>2017-01-08T10:30:03.000Z</published>
    <updated>2017-04-16T12:03:23.397Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下载安装文件, <a href="https://bootstrap.pypa.io/get-pip.py" rel="external nofollow noopener noreferrer" target="_blank"></a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python get-pip.py</div></pre></td></tr></table></figure>
<h3 id="从列表文件安装"><a href="#从列表文件安装" class="headerlink" title="从列表文件安装"></a>从列表文件安装</h3><p>导出文件列表(一般配合virtualenv适应)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ pip freeze                               </div><div class="line">backports-abc==0.4                         </div><div class="line">backports.shutil-get-terminal-size==1.0.0  </div><div class="line">backports.ssl-match-hostname==3.5.0.1      </div><div class="line">beautifulsoup4==4.5.1                      </div><div class="line">bs4==0.0.1                                 </div><div class="line">...</div></pre></td></tr></table></figure>
<p>可以重定向到一个文件中，一般叫做requirements.txt</p>
<p>然后安装的时候，可以使用下面的命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install -r requirements.txt</div></pre></td></tr></table></figure>
<h3 id="安装VCS上的软件"><a href="#安装VCS上的软件" class="headerlink" title="安装VCS上的软件"></a>安装VCS上的软件</h3><blockquote>
<p>pip currently supports cloning over git, git+http, git+https, git+ssh, git+git and git+file:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[-e] git://git.myproject.org/MyProject#egg=MyProject</div><div class="line">[-e] git+http://git.myproject.org/MyProject#egg=MyProject</div><div class="line">[-e] git+https://git.myproject.org/MyProject#egg=MyProject</div><div class="line">[-e] git+ssh://git.myproject.org/MyProject#egg=MyProject</div><div class="line">[-e] git+git://git.myproject.org/MyProject#egg=MyProject</div><div class="line">[-e] git+file://git.myproject.org/MyProject#egg=MyProject</div><div class="line">-e git+git@git.myproject.org:MyProject#egg=MyProject</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="https://pip.pypa.io/en/stable/reference/pip_install/#vcs-support" rel="external nofollow noopener noreferrer" target="_blank">pip install — pip 9.0.1 documentation</a></p>
</li>
<li><p><a href="https://segmentfault.com/a/1190000003050954" rel="external nofollow noopener noreferrer" target="_blank">Django | requirement.txt 生成 - 黑月亮 - SegmentFault</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h2&gt;&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;p&gt;下载安
    
    </summary>
    
      <category term="python" scheme="http://qsli.github.io/categories/python/"/>
    
    
      <category term="pip" scheme="http://qsli.github.io/tags/pip/"/>
    
  </entry>
  
  <entry>
    <title>windows命令操作剪贴板——CLIP</title>
    <link href="http://qsli.github.io/2017/01/07/CLIP/"/>
    <id>http://qsli.github.io/2017/01/07/CLIP/</id>
    <published>2017-01-07T12:00:09.000Z</published>
    <updated>2017-04-16T12:03:23.381Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><blockquote>
<p>CLIP</p>
<p>Description:<br>    Redirects output of command line tools to the Windows clipboard.<br>    This text output can then be pasted into other programs.</p>
<p>Parameter List:<br>    /?                  Displays this help message.</p>
<p>Examples:<br>    DIR | CLIP          Places a copy of the current directory<br>                        listing into the Windows clipboard.</p>
<p>   CLIP &lt; README.TXT   Places a copy of the text from readme.txt<br>                        on to the Windows clipboard.</p>
</blockquote>
<h2 id="简单应用"><a href="#简单应用" class="headerlink" title="简单应用"></a>简单应用</h2><h3 id="将ip地址拷贝到剪贴板"><a href="#将ip地址拷贝到剪贴板" class="headerlink" title="将ip地址拷贝到剪贴板"></a>将ip地址拷贝到剪贴板</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ipconfig | find <span class="string">"IPv4"</span> | find /V <span class="string">"自动"</span>  | find /V <span class="string">"Auto"</span> | awk <span class="string">"&#123; print <span class="variable">$(NF)</span>;&#125;"</span> | CLIP</div></pre></td></tr></table></figure>
<p>也可以添加一个alias，这样就不用每次敲<code>ipconfig</code>, 然后复制ip了</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://superuser.com/questions/382265/fastest-method-to-determine-my-pcs-ip-address-windows" rel="external nofollow noopener noreferrer" target="_blank">Fastest method to determine my PC’s IP address (Windows) - Super User</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用说明&quot;&gt;&lt;a href=&quot;#使用说明&quot; class=&quot;headerlink&quot; title=&quot;使用说明&quot;&gt;&lt;/a&gt;使用说明&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;CLIP&lt;/p&gt;
&lt;p&gt;Description:&lt;br&gt;    Redirects output 
    
    </summary>
    
      <category term="shell" scheme="http://qsli.github.io/categories/shell/"/>
    
    
      <category term="剪贴板" scheme="http://qsli.github.io/tags/%E5%89%AA%E8%B4%B4%E6%9D%BF/"/>
    
  </entry>
  
</feed>
