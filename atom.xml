<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KL&#39;s blog</title>
  <subtitle>越积极，越幸运</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://qsli.github.io/"/>
  <updated>2017-12-02T14:16:31.044Z</updated>
  <id>http://qsli.github.io/</id>
  
  <author>
    <name>Kevin Leo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>缓存System.currentTimeMillis的调用</title>
    <link href="http://qsli.github.io/2017/12/02/cache-system-time/"/>
    <id>http://qsli.github.io/2017/12/02/cache-system-time/</id>
    <published>2017-12-02T14:16:31.000Z</published>
    <updated>2017-12-02T14:16:31.044Z</updated>
    
    <content type="html"><![CDATA[<h2 id="系统时间缓存的必要"><a href="#系统时间缓存的必要" class="headerlink" title="系统时间缓存的必要"></a>系统时间缓存的必要</h2><img src="/2017/12/02/cache-system-time/time-cache.jpg" alt="time-cache.jpg" title="">
<p>除了网络服务器，监控系统和日志系统也会频繁的调用<code>System.currentTimeMillis</code>。看公<br>司内部实现的异步日志中就对系统时间进行了缓存。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><script src="//gist.github.com/a42cea0411b2cff131f34d82d030115b.js"></script>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>使用<code>JMH</code>做一个<code>benchmark</code>压力测试， <code>JMH</code>在做测试之前会有预热的过程，以排<br>除<code>jit</code>等因素的影响，在系统达到稳定运行的时候再去对比两个方法的调用。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException </span>&#123;</div><div class="line">Options opt = <span class="keyword">new</span> OptionsBuilder()</div><div class="line">               .include(CurrentTimeMillions.class.getSimpleName())</div><div class="line">               .mode(Mode.AverageTime)</div><div class="line">               .measurementIterations(<span class="number">2000</span>)</div><div class="line">               .forks(<span class="number">1</span>)</div><div class="line">               .build();</div><div class="line"></div><div class="line">       <span class="keyword">new</span> Runner(opt).run();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"># Run complete. Total time: 01:07:53</div><div class="line"></div><div class="line">Benchmark                            Mode   Cnt   Score     Error  Units</div><div class="line">CurrentTimeMillions.test             avgt  2000  ≈ 10⁻⁸             s/op</div><div class="line">CurrentTimeMillions.testSystemTimer  avgt  2000  ≈ 10⁻⁹             s/op</div></pre></td></tr></table></figure>
<p>可以看到还是差了一个数量级，如果对时间的精度要求没有那么高，还是可以缓存下的。</p>
<h2 id="查看调用的系统方法"><a href="#查看调用的系统方法" class="headerlink" title="查看调用的系统方法"></a>查看调用的系统方法</h2><p>使用<code>strace</code>attach 到当前的进程，查看进程相应的调用</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo strace -p  [pid]</div></pre></td></tr></table></figure>
<p>输出结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜ sudo strace -p 15588</div><div class="line">strace: Process 15588 attached</div><div class="line">futex(0x7f8c175f99d0, FUTEX_WAIT, 15589, NULL</div></pre></td></tr></table></figure>
<p>并没有看到具体的系统调用，查找原因发现：</p>
<blockquote>
<p>这里使用 ltrace 是因为 linux 支持 VDSO 之后，gettimeofday 属于快速系统调用，使<br>用 strace 是看不到执行结果的。</p>
<p>What is actually happening here is that we are linking to the vDSO (virtual<br>dynamic shared object), which is a small fully relocatable shared library<br>pre-mapped into the user address space. The linking happens during the first<br>call of gettimeofday, after which the call is resolved, and the first indirect<br>jump goes straight into the function.</p>
</blockquote>
<p>重新使用<code>ltrace</code>查看：</p>
<p>命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">➜  ~  sudo ltrace  -c -S  -p 16365</div><div class="line">^C% time     seconds  usecs/call     calls      <span class="keyword">function</span></div><div class="line">------ ----------- ----------- --------- --------------------</div><div class="line"> 76.73   14.190163        1880      7544 SYS_getegid32</div><div class="line"> 23.27    4.303741      614820         7 SYS_madvise1</div><div class="line">  0.00    0.000197          24         8 SYS_exit</div><div class="line">------ ----------- ----------- --------- --------------------</div><div class="line">100.00   18.494101                  7559 total</div></pre></td></tr></table></figure>
<p>然而还是没有看到<code>gettimeofday</code>的调用，具体原因不得而知。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><blockquote>
<p>premature optimization is the root of all evil 过早优化是万恶之源</p>
</blockquote>
<p>如果系统的性能能满足我们的要求，就不要过早的做这些优化 ; 系统优化之前需要先做<br>profiling，找到真正的瓶颈，在次之前需要保持系统的简单，可靠。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://blog.csdn.net/will_awoke/article/details/27084907" rel="external nofollow noopener noreferrer" target="_blank">SystemTimer CurrentTimeMillis 时间缓存 - CSDN 博客</a></p>
</li>
<li><p>《NIO trick and trap 》</p>
</li>
<li><p><a href="http://feiyang21687.github.io/SystemNano/" rel="external nofollow noopener noreferrer" target="_blank">System.nanoTime() 的实现分析 – 陈飞 – 码农</a></p>
</li>
<li><p><a href="http://blog.caoxudong.info/blog/2017/09/08/currentTimeMillis_in_java" rel="external nofollow noopener noreferrer" target="_blank">jdk8 中的时间获取</a></p>
</li>
<li><p><a href="http://pzemtsov.github.io/2017/07/23/the-slow-currenttimemillis.html" rel="external nofollow noopener noreferrer" target="_blank">The slow currentTimeMillis()</a></p>
</li>
<li><p><a href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=JDK-8185891" rel="external nofollow noopener noreferrer" target="_blank">Bug ID: JDK-8185891 System.currentTimeMillis() is slow on Linux, especially with the HPET time source</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;系统时间缓存的必要&quot;&gt;&lt;a href=&quot;#系统时间缓存的必要&quot; class=&quot;headerlink&quot; title=&quot;系统时间缓存的必要&quot;&gt;&lt;/a&gt;系统时间缓存的必要&lt;/h2&gt;&lt;img src=&quot;/2017/12/02/cache-system-time/time-
    
    </summary>
    
      <category term="java" scheme="http://qsli.github.io/categories/java/"/>
    
    
      <category term="cache" scheme="http://qsli.github.io/tags/cache/"/>
    
  </entry>
  
  <entry>
    <title>使用google perf工具来排查堆外内存占用</title>
    <link href="http://qsli.github.io/2017/12/02/google-perf-tools/"/>
    <id>http://qsli.github.io/2017/12/02/google-perf-tools/</id>
    <published>2017-12-02T11:24:38.000Z</published>
    <updated>2017-12-02T11:24:38.257Z</updated>
    
    <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>线上机器内存不足，经常被系统<code>oom killer</code>干掉。</p>
<p>如果<code>tomcat</code>运行的好好的，突然被干掉了，没有任何线索，那么就可以使用下面的命令看看是不是<code>oom killer</code>搞的鬼</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo dmesg | grep -i <span class="built_in">kill</span> | less</div><div class="line"></div><div class="line">Out of memory: Kill process 23195 (java) score 558 or sacrifice child</div><div class="line">Killed process 23195, UID 40001, (java) total-vm:81176732kB, anon-rss:64507900kB, file-rss:2604kB</div></pre></td></tr></table></figure>
<p>其中<code>anon-rss</code>是程序占用的物理内存，  64507900kB = 61.519527435302734 GB<br>系统总的内存也才<code>62GB</code>，linux发现没有可分配的内存，就会启用<code>oom killer</code>的机制，根据<code>oom_score_adj</code>的值去干掉相应的进程了。</p>
<p>系统上<code>oom_score_adj</code>的值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">43722 total pagecache pages</div><div class="line">4335 pages in swap cache</div><div class="line">Swap cache stats: add 1009840, delete 1005505, find 76432470/76485037</div><div class="line">Free swap  = 49990420kB</div><div class="line">Total swap = 50331644kB</div><div class="line">16777215 pages RAM</div><div class="line">282254 pages reserved</div><div class="line">36481 pages shared</div><div class="line">16386140 pages non-shared</div><div class="line">[ pid ]   uid  tgid total_vm      rss cpu oom_adj oom_score_adj name</div><div class="line">[ 1419]     0  1419     2883       94  18     -17         -1000 udevd</div><div class="line">[ 2894]     0  2894     2660      105   6     -17         -1000 udevd</div><div class="line">[ 2895]     0  2895     2882       43   2     -17         -1000 udevd</div><div class="line">[  388]     0   388    16557       63  12     -17         -1000 sshd</div><div class="line">[ 1340]     0  1340   152806     9114   6       0             0 salt-minion</div><div class="line">[ 1341]     0  1341   110173     5224  22       0             0 salt-minion</div><div class="line">[14168]     0 14168     6899      149   6     -17         -1000 auditd</div></pre></td></tr></table></figure>
<p><code>tomcat</code>的进程占用内存最多，得分也最高 —— 558</p>
<h3 id="tomcat的配置"><a href="#tomcat的配置" class="headerlink" title="tomcat的配置"></a>tomcat的配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> -Xms44g -Xmx44g -server \</div><div class="line">-XX:+UseG1GC -XX:MaxGCPauseMillis=200 \</div><div class="line">-XX:InitiatingHeapOccupancyPercent=65 -XX:SurvivorRatio=8 \</div><div class="line">-XX:MaxTenuringThreshold=15 \</div><div class="line">-verbosegc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps \</div><div class="line">-XX:+PrintTenuringDistribution -XX:+PrintAdaptiveSizePolicy \</div><div class="line">-XX:-TraceClassUnloading \</div><div class="line">-XX:+DisableExplicitGC</div></pre></td></tr></table></figure>
<p>jvm最大的堆只有44GB， 但是从上面的日志中看到实际占用的内存达到了62GB，几乎把整个系统的内存都吃掉了。<br>既然堆内没有问题，问题自然应该出在堆外内存的占用上。</p>
<h2 id="java-堆外内存"><a href="#java-堆外内存" class="headerlink" title="java 堆外内存"></a>java 堆外内存</h2><p><a href="http://lovestblog.cn/blog/2015/05/12/direct-buffer/" rel="external nofollow noopener noreferrer" target="_blank">JVM源码分析之堆外内存完全解读 - 你假笨</a> 中说道：</p>
<blockquote>
<p>对于System.gc的实现，之前写了一篇文章来重点介绍，JVM源码分析之SystemGC完全解读，它会对新生代的老生代都会进行内存回收，这样会比较彻底地回收DirectByteBuffer对象以及他们关联的堆外内存，我们dump内存发现DirectByteBuffer对象本身其实是很小的，但是它后面可能关联了一个非常大的堆外内存，因此我们通常称之为『冰山对象』，我们做ygc的时候会将新生代里的不可达的DirectByteBuffer对象及其堆外内存回收了，但是无法对old里的DirectByteBuffer对象及其堆外内存进行回收，这也是我们通常碰到的最大的问题，如果有大量的DirectByteBuffer对象移到了old，但是又一直没有做cms gc或者full gc，而只进行ygc，那么我们的物理内存可能被慢慢耗光，但是我们还不知道发生了什么，因为heap明明剩余的内存还很多(前提是我们禁用了System.gc)。</p>
</blockquote>
<p>白衣大侠也建议：</p>
<blockquote>
<p>这时，就只能靠前面提到的申请额度超限时触发的system.gc()来救场了。但这道最后的保险其实也不很好，首先它会中断整个进程，然后它让当前线程睡了整整一百毫秒，而且如果gc没在一百毫秒内完成，它仍然会无情的抛出OOM异常。还有，万一，万一大家迷信某个调优指南设置了-DisableExplicitGC禁止了system.gc()，那就不好玩了。<br>所以，堆外内存还是自己主动点回收更好，比如Netty就是这么做的。</p>
</blockquote>
<h3 id="限制堆外内存的大小"><a href="#限制堆外内存的大小" class="headerlink" title="限制堆外内存的大小"></a>限制堆外内存的大小</h3><p>加上<code>-XX:MaxDirectMemorySize=4g</code>， 去除<code>-XX:+DisableExplicitG</code>观察了几天，发现并不能解决问题，于是继续使用<code>google perf tools</code>去观察下堆外内存的使用</p>
<h2 id="google-perf-tools"><a href="#google-perf-tools" class="headerlink" title="google perf tools"></a>google perf tools</h2><p><a href="https://github.com/gperftools/gperftools/tree/master" rel="external nofollow noopener noreferrer" target="_blank">下载地址</a></p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><blockquote>
<p>该工具主要利用了unix的一个环境变量LD_PRELOAD，它允许你要加载的动态库优先加载起来，相当于一个Hook了，<br>于是可以针对同一个函数可以选择不同的动态库里的实现了，比如googleperftools就是将malloc方法替换成了tcmalloc的实现，这样就可以跟踪内存分配路径了</p>
</blockquote>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><code>tomcat</code>的启动变量中加入下面的配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> LD_PRELOAD=/usr/<span class="built_in">local</span>/lib/libtcmalloc.so</div><div class="line"><span class="built_in">export</span> HEAPPROFILE=/home/q/perf-result/</div><div class="line"><span class="built_in">export</span> HEAP_PROFILE_ALLOCATION_INTERVAL=2000000000</div></pre></td></tr></table></figure></p>
<p>HEAPPROFILE是存放结果的地址</p>
<blockquote>
<p>HEAP_PROFILE_ALLOCATION_INTERVAL    default: 1073741824 (1 Gb)    Dump heap profiling information once every specified number of bytes has been allocated by the program.</p>
</blockquote>
<p>查看运行中的日志:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Dumping heap profile to /home/q/perf-result/_23207.0927.heap (1755151 MB allocated cumulatively, 1267 MB currently in use)</div></pre></td></tr></table></figure></p>
<p>日志中会显示累计的对外内存的分配和当前使用的堆外内存的大小。</p>
<h3 id="分析结果"><a href="#分析结果" class="headerlink" title="分析结果"></a>分析结果</h3><h4 id="文本形式的"><a href="#文本形式的" class="headerlink" title="文本形式的"></a>文本形式的</h4><p>命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="built_in">local</span>/bin/pprof --text /home/q/java/default/bin/java _23207.0035.heap</div></pre></td></tr></table></figure></p>
<p>输出结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">Using local file /home/q/java/default/bin/java.</div><div class="line">Using local file _23207.1012.heap.</div><div class="line">Total: 1283.1 MB</div><div class="line"></div><div class="line">     0.0   0.0% 100.0%     39.5   3.1% PtrQueue::enqueue_known_active</div><div class="line">     0.0   0.0% 100.0%     39.5   3.1% PtrQueueSet::allocate_buffer</div><div class="line">     0.0   0.0% 100.0%     42.2   3.3% G1ParTask::work</div><div class="line">     0.0   0.0% 100.0%     42.2   3.3% GangWorker::loop</div><div class="line">     0.0   0.0% 100.0%     75.6   5.9% ObjArrayKlass::oop_oop_iterate_nv_m@8fbe80</div><div class="line">     0.0   0.0% 100.0%    146.2  11.4% 0x00007f63bf0e5825</div><div class="line">     0.0   0.0% 100.0%    146.2  11.4% JVM_InternString</div><div class="line">     0.0   0.0% 100.0%    146.2  11.4% StringTable::intern@a24ca0</div><div class="line">     0.0   0.0% 100.0%    147.2  11.5% StringTable::basic_add</div><div class="line">     0.0   0.0% 100.0%    147.3  11.5% StringTable::intern@a24780</div><div class="line">     0.0   0.0% 100.0%    152.4  11.9% Hashtable::new_entry</div><div class="line">     0.0   0.0% 100.0%    170.5  13.3% AllocateHeap</div><div class="line">     0.0   0.0% 100.0%    256.0  20.0% ConcurrentMark::ConcurrentMark</div><div class="line">     0.0   0.0% 100.0%    265.5  20.7% InstanceKlass::oop_oop_iterate_nv</div><div class="line">     0.0   0.0% 100.0%    287.2  22.4% G1CollectedHeap::initialize</div><div class="line">     0.0   0.0% 100.0%    305.4  23.8% Universe::initialize_heap</div><div class="line">     0.0   0.0% 100.0%    306.3  23.9% universe_init</div><div class="line">     0.0   0.0% 100.0%    307.0  23.9% init_globals</div><div class="line">     0.0   0.0% 100.0%    307.1  23.9% JNI_CreateJavaVM</div><div class="line">     0.0   0.0% 100.0%    307.1  23.9% Threads::create_vm</div><div class="line">     0.0   0.0% 100.0%    307.2  23.9% JavaMain</div><div class="line">     0.0   0.0% 100.0%    326.5  25.4% ConcurrentG1RefineThread::run</div><div class="line">     0.0   0.0% 100.0%    326.5  25.4% RefineCardTableEntryClosure::do_card_ptr</div><div class="line">     0.0   0.0% 100.0%    329.8  25.7% 0x00007f63bfae74a7</div><div class="line">     0.0   0.0% 100.0%    348.5  27.2% DirtyCardQueueSet::apply_closure_to_completed_buffer</div><div class="line">     0.0   0.0% 100.0%    349.7  27.3% G1RemSet::refine_card</div><div class="line">     0.0   0.0% 100.0%    349.7  27.3% HeapRegion::oops_on_card_seq_iterate_careful</div><div class="line">     0.0   0.0% 100.0%    349.7  27.3% OtherRegionsTable::add_reference</div><div class="line">     0.0   0.0% 100.0%    351.0  27.4% os::malloc@913e80</div><div class="line">     0.0   0.0% 100.0%    351.0  27.4% Unsafe_AllocateMemory</div><div class="line">     0.0   0.0% 100.0%    408.4  31.8% java_start</div><div class="line">     0.0   0.0% 100.0%    562.6  43.8% BitMap::resize</div><div class="line">     0.0   0.0% 100.0%    598.5  46.6% ArrayAllocator::allocate</div><div class="line">     0.0   0.0% 100.0%    715.5  55.8% __clone</div><div class="line">     0.0   0.0% 100.0%    715.5  55.8% start_thread</div><div class="line">  1277.3  99.5%  99.5%   1277.3  99.5% os::malloc@9137e0</div></pre></td></tr></table></figure>
<p>结果代表的含义:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Analyzing Text Output</div><div class="line"></div><div class="line">Text mode has lines of output that look like this:</div><div class="line"></div><div class="line">       14   2.1%  17.2%       58   8.7% std::_Rb_tree::find</div><div class="line">Here is how to interpret the columns:</div><div class="line"></div><div class="line">1. Number of profiling samples in this function</div><div class="line">2. Percentage of profiling samples in this function</div><div class="line">3. Percentage of profiling samples in the functions printed so far</div><div class="line">4. Number of profiling samples in this function and its callees</div><div class="line">5. Percentage of profiling samples in this function and its callees</div><div class="line">6. Function name</div></pre></td></tr></table></figure>
<p><a href="https://gperftools.github.io/gperftools/cpuprofile.html" rel="external nofollow noopener noreferrer" target="_blank">Gperftools CPU Profiler</a>中有更加详细的说明</p>
<h4 id="pdf形式的结果"><a href="#pdf形式的结果" class="headerlink" title="pdf形式的结果"></a>pdf形式的结果</h4><p>相比文字的结果，图片形式的调用关系，更加清楚和直观。</p>
<p>命令如下:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo yum install ghostscript</div><div class="line">sudo yum install dot</div><div class="line">sudo yum install graphviz -y</div><div class="line">sudo pprof --pdf  /home/q/java/default/bin/java _19877.19793.heap &gt; result.pdf</div></pre></td></tr></table></figure>
<p>结果：</p>


	<div class="row">
    <embed src="result.pdf" width="100%" height="550" type="application/pdf">
	</div>



<h2 id="可能的原因"><a href="#可能的原因" class="headerlink" title="可能的原因"></a>可能的原因</h2><p>从google perf tools的结果来看主要的堆外内存来自</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">0x00007f52e05126a5</div><div class="line">0.0 (0.0%)</div><div class="line">of 7089.3 (82.5%)</div></pre></td></tr></table></figure>
<p>这个再往上就没有地址了。</p>
<h3 id="heap-占用"><a href="#heap-占用" class="headerlink" title="heap 占用"></a>heap 占用</h3><p>查看出问题机器的<code>heap</code>占用情况如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">jmap -histo:live `pgrep -f &apos;tomcat&apos;`</div><div class="line"></div><div class="line"> num     #instances         #bytes  class name</div><div class="line"></div><div class="line">----------------------------------------------</div><div class="line"></div><div class="line">   1:      15272979      940261992  [C</div><div class="line"></div><div class="line">   2:      19182959      767318360  java.util.ArrayList</div><div class="line"></div><div class="line">   3:      15397474      739078752  qunar.tc.plato.zeno.util.collections.offheap.map.OffHeapHashMap</div><div class="line"></div><div class="line">   4:      13281544      637514112  java.util.concurrent.ConcurrentHashMap$Node</div><div class="line"></div><div class="line">   5:      10136730      612997544  [Ljava.lang.Object;</div><div class="line"></div><div class="line">   6:      15265576      488498432  java.lang.String</div><div class="line"></div><div class="line">   7:       4694324      413100512  _plato.com.qunar.hotel.price.data.center.plato.beans.shotel.IMetaSHotelBizInfo</div><div class="line"></div><div class="line">   8:           854      379525944  [Ljava.util.concurrent.ConcurrentHashMap$Node;</div><div class="line"></div><div class="line">   9:      15397474      369539376  qunar.tc.plato.zeno.util.collections.offheap.set.OffHeapHashSet</div><div class="line"></div><div class="line">  10:       4694324      337991328  _plato.com.qunar.hotel.price.data.center.plato.beans.shotel.IMetaContactConfig</div></pre></td></tr></table></figure>
<p>前面的都是去哪儿自己开发的堆外缓存占用的对象，缓存的内容也多是酒店相关的元数据。结合工具的结果，推测问题出在堆外缓存。<br>堆外缓存采用的是内存映射的方式，大量使用了<code>DirectByteBuffer</code>这种冰山对象。</p>
<h3 id="疑点"><a href="#疑点" class="headerlink" title="疑点"></a>疑点</h3><p>这个系统目前处于重构阶段，之前也是使用的堆外缓存，并没有出现问题。不过，目前在逐渐下掉堆外缓存的使用，到时候可以再看看是否出问题。</p>
<h2 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h2><h3 id="使用pmap查看进程的内存映射"><a href="#使用pmap查看进程的内存映射" class="headerlink" title="使用pmap查看进程的内存映射"></a>使用pmap查看进程的内存映射</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">sudo -u tomcat pmap -x  25147 | less</div><div class="line"></div><div class="line">Address           Kbytes     RSS   Dirty Mode   Mapping</div><div class="line">0000000000400000       4       0       0 r-x--  java</div><div class="line">0000000000600000       4       4       4 rw---  java</div><div class="line">0000000001d3f000    1484    1224    1224 rw---    [ anon ]</div><div class="line">0000003e0a400000     128     112       0 r-x--  ld-2.12.so</div><div class="line">0000003e0a61f000       4       4       4 r----  ld-2.12.so</div><div class="line">0000003e0a620000       4       4       4 rw---  ld-2.12.so</div><div class="line">0000003e0a621000       4       4       4 rw---    [ anon ]</div><div class="line">0000003e0a800000       8       8       0 r-x--  libdl-2.12.so</div><div class="line">0000003e0a802000    2048       0       0 -----  libdl-2.12.so</div><div class="line">0000003e0aa02000       4       4       4 r----  libdl-2.12.so</div><div class="line">0000003e0aa03000       4       4       4 rw---  libdl-2.12.so</div><div class="line">0000003e0ac00000    1576     680       0 r-x--  libc-2.12.so</div><div class="line">0000003e0ad8a000    2048       0       0 -----  libc-2.12.so</div><div class="line">0000003e0af8a000      16      16       8 r----  libc-2.12.so</div><div class="line">0000003e0af8e000       4       4       4 rw---  libc-2.12.so</div><div class="line">0000003e0af8f000      20      20      20 rw---    [ anon ]</div><div class="line">0000003e0b000000      92      72       0 r-x--  libpthread-2.12.so</div><div class="line">0000003e0b017000    2048       0       0 -----  libpthread-2.12.so</div><div class="line">0000003e0b217000       4       4       4 r----  libpthread-2.12.so</div><div class="line">0000003e0b218000       4       4       4 rw---  libpthread-2.12.so</div><div class="line">0000003e0b219000      16       4       4 rw---    [ anon ]</div></pre></td></tr></table></figure>
<p>将内存块的内容dump成文件（慎重，会影响服务）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo  gdb --batch --pid 25147 -ex &quot; dump memory /home/qisheng.li/c.dump 0x00007eefcc000000 0x00007eefcf000000&quot;</div></pre></td></tr></table></figure></p>
<p>查看文件的内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[qisheng.li@xxx.h.cn2 ~]$ view c.dump</div></pre></td></tr></table></figure>
<img src="/2017/12/02/google-perf-tools/2017年%2009月%2005日%20星期二%2001:34:24%20CST.png" alt="2017年 09月 05日 星期二 01:34:24 CST.png" title="">
<p>这个dump是我在<code>2017年 09月 05日 星期二 01:34:24 CST</code>做的，但是内容看起来是tomcat respone的内容，奇怪的是内容的时间是<code>2017 17:38:18 GMT</code>，不知道是什么原因导致的，如果你知道，烦请告知。</p>
<p>直接查看堆外的内存块，无疑是最快排查堆外占用的方法，但是内存块的选择非常依赖经验， 我尝试了下，并没有找到问题。</p>
<p><code>参考5</code>中的大神，通过dump内存块，发现是netty使用的<code>directBuffer</code>分配的大量64M的内存块。</p>
<h4 id="JDK8中的-Native-Memory-Tracker"><a href="#JDK8中的-Native-Memory-Tracker" class="headerlink" title="JDK8中的 Native Memory Tracker"></a>JDK8中的 Native Memory Tracker</h4><p>在启动参数中开启：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-XX:NativeMemoryTracking=[off | summary | detail]</div></pre></td></tr></table></figure></p>
<p>也可以在jvm退出的时候，打印相关的统计信息</p>
<blockquote>
<p>NMT at VM Exit<br>Use the following VM diagnostic command line option to obtain last memory usage data at VM exit when Native Memory Tracking is enabled. The level of detail is based on tracking level.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-XX:+UnlockDiagnosticVMOptions -XX:+PrintNMTStatistics</div></pre></td></tr></table></figure></p>
</blockquote>
<p>在程序运行时可以使用<code>jcmd</code>查看内存的分配情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jcmd &lt;pid&gt; VM.native_memory [summary | detail | baseline | summary.diff | detail.diff | shutdown] [scale= KB | MB | GB]</div></pre></td></tr></table></figure></p>
<p>输出的结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">sudo -u tomcat jcmd `pgrep -f tomcat` VM.native_memory detail</div><div class="line">31549:</div><div class="line"></div><div class="line">Native Memory Tracking:</div><div class="line"></div><div class="line">Total: reserved=50215227KB, committed=49947839KB</div><div class="line">-                 Java Heap (reserved=46137344KB, committed=46137344KB)</div><div class="line">                            (mmap: reserved=46137344KB, committed=46137344KB) </div><div class="line"> </div><div class="line">-                     Class (reserved=92639KB, committed=91707KB)</div><div class="line">                            (classes #14958)</div><div class="line">                            (malloc=2527KB #50184) </div><div class="line">                            (mmap: reserved=90112KB, committed=89180KB) </div><div class="line"> </div><div class="line">-                    Thread (reserved=914804KB, committed=914804KB)</div><div class="line">                            (thread #883)</div><div class="line">                            (stack: reserved=906696KB, committed=906696KB)</div><div class="line">                            (malloc=2904KB #4435) </div><div class="line">                            (arena=5203KB #1764)</div><div class="line"> </div><div class="line">-                      Code (reserved=263567KB, committed=87223KB)</div><div class="line">                            (malloc=13967KB #19565) </div><div class="line">                            (mmap: reserved=249600KB, committed=73256KB) </div><div class="line"> </div><div class="line">-                        GC (reserved=1849937KB, committed=1849937KB)</div><div class="line">                            (malloc=105041KB #121050) </div><div class="line">                            (mmap: reserved=1744896KB, committed=1744896KB) </div><div class="line"> </div><div class="line">-                  Compiler (reserved=13354KB, committed=13354KB)</div><div class="line">                            (malloc=3061KB #3484) </div><div class="line">                            (arena=10292KB #13)</div><div class="line"> </div><div class="line">-                  Internal (reserved=813935KB, committed=813935KB)</div><div class="line">                            (malloc=813903KB #102254) </div><div class="line">                            (mmap: reserved=32KB, committed=32KB) </div><div class="line"> </div><div class="line">-                    Symbol (reserved=18071KB, committed=18071KB)</div><div class="line">                            (malloc=14355KB #138545) </div><div class="line">                            (arena=3716KB #1)</div><div class="line"> </div><div class="line">-    Native Memory Tracking (reserved=7274KB, committed=7274KB)</div><div class="line">                            (malloc=298KB #4295) </div><div class="line">                            (tracking overhead=6976KB)</div><div class="line"> </div><div class="line">-               Arena Chunk (reserved=14191KB, committed=14191KB)</div><div class="line">                            (malloc=14191KB) </div><div class="line"> </div><div class="line">-                   Unknown (reserved=90112KB, committed=0KB)</div><div class="line">                            (mmap: reserved=90112KB, committed=0KB) </div><div class="line"> </div><div class="line">Virtual memory map:</div><div class="line"> </div><div class="line">[0x00007ef481693000 - 0x00007ef481794000] reserved and committed 1028KB for Thread Stack from</div><div class="line">    [0x00007f0486546f74] JavaThread::run()+0x24</div><div class="line">    [0x00007f04863fab88] java_start(Thread*)+0x108</div><div class="line"> </div><div class="line">[0x00007ef481794000 - 0x00007ef481895000] reserved and committed 1028KB for Thread Stack from</div><div class="line">    [0x00007f0486546f74] JavaThread::run()+0x24</div><div class="line">    [0x00007f04863fab88] java_start(Thread*)+0x108</div><div class="line"> </div><div class="line">[0x00007ef48224d000 - 0x00007ef48244d000] reserved 2048KB for Class from</div><div class="line">    [0x00007f0486593c66] ReservedSpace::initialize(unsigned long, unsigned long, bool, char*, unsigned long, bool)+0x256</div><div class="line">    [0x00007f0486593d0b] ReservedSpace::ReservedSpace(unsigned long, unsigned long, bool, char*, unsigned long)+0x1b</div><div class="line">    [0x00007f0486379cda] VirtualSpaceNode::VirtualSpaceNode(unsigned long)+0x17a</div><div class="line">    [0x00007f048637a59a] VirtualSpaceList::create_new_virtual_space(unsigned long)+0x5a</div><div class="line"></div><div class="line">	[0x00007ef48228d000 - 0x00007ef4823cd000] committed 1280KB from</div><div class="line">            [0x00007f0486593549] VirtualSpace::expand_by(unsigned long, bool)+0x199</div><div class="line">            [0x00007f0486377936] VirtualSpaceList::expand_node_by(VirtualSpaceNode*, unsigned long, unsigned long)+0x76</div><div class="line">            [0x00007f048637a750] VirtualSpaceList::expand_by(unsigned long, unsigned long)+0xf0</div><div class="line">            [0x00007f048637a8e3] VirtualSpaceList::get_new_chunk(unsigned long, unsigned long, unsigned long)+0xb3</div><div class="line"></div><div class="line">	[0x00007ef48224d000 - 0x00007ef48228d000] committed 256KB from</div><div class="line">            [0x00007f0486593549] VirtualSpace::expand_by(unsigned long, bool)+0x199</div><div class="line">            [0x00007f0486377936] VirtualSpaceList::expand_node_by(VirtualSpaceNode*, unsigned long, unsigned long)+0x76</div><div class="line">            [0x00007f048637a8e3] VirtualSpaceList::get_new_chunk(unsigned long, unsigned long, unsigned long)+0xb3</div><div class="line">            [0x00007f048637c432] SpaceManager::grow_and_allocate(unsigned long)+0x2d2</div></pre></td></tr></table></figure>
<img src="/2017/12/02/google-perf-tools/memory-mapping.jpg" alt="memory-mapping.jpg" title="">
<p>如果通过上述的映射关系能直接找到系统的<code>StringTable</code>等对应的分区，dump内存下来应该能很快的发现问题，不知道行不行得通。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://lovestblog.cn/blog/2015/08/21/rssxmx/" rel="external nofollow noopener noreferrer" target="_blank">进程物理内存远大于Xmx的问题分析 - 你假笨</a></p>
</li>
<li><p><a href="http://lovestblog.cn/blog/2015/05/12/direct-buffer/" rel="external nofollow noopener noreferrer" target="_blank">JVM源码分析之堆外内存完全解读 - 你假笨</a></p>
</li>
<li><p><a href="http://calvin1978.blogcn.com/articles/directbytebuffer.html" rel="external nofollow noopener noreferrer" target="_blank">Netty之Java堆外内存扫盲贴 | 江南白衣</a></p>
</li>
<li><p><a href="http://blog.csdn.net/jicahoo/article/details/50933469" rel="external nofollow noopener noreferrer" target="_blank">Java内存之本地内存分析神器： NMT 和 pmap - CSDN博客</a></p>
</li>
<li><p><a href="http://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;mid=2650518452&amp;idx=1&amp;sn=c196bba265f888ed086b7059ca5d3fd2&amp;chksm=8780b470b0f73d66c79b7df96435d48caa8c49a9a6b696e543c0df24e3356202ccde69f2f671&amp;mpshare=1&amp;scene=1&amp;srcid=0831YG589PwShEgNLJ8CKQOp#rd" rel="external nofollow noopener noreferrer" target="_blank">Java堆外内存排查小结</a></p>
</li>
<li><p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/vm/nmt-8.html" rel="external nofollow noopener noreferrer" target="_blank">Native Memory Tracking</a></p>
</li>
<li><p><a href="https://gperftools.github.io/gperftools/cpuprofile.html" rel="external nofollow noopener noreferrer" target="_blank">Gperftools CPU Profiler</a></p>
</li>
<li><p><a href="http://whosemario.github.io/2016/09/27/google-preftool-1/index.html" rel="external nofollow noopener noreferrer" target="_blank">Google Perftools Mac OS 安装与使用 | Whosemario的家</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h2&gt;&lt;p&gt;线上机器内存不足，经常被系统&lt;code&gt;oom killer&lt;/code&gt;干掉。&lt;/p&gt;
&lt;p&gt;如果&lt;code&gt;tomcat&lt;/code&gt;运
    
    </summary>
    
      <category term="perf" scheme="http://qsli.github.io/categories/perf/"/>
    
    
      <category term="google-perf" scheme="http://qsli.github.io/tags/google-perf/"/>
    
  </entry>
  
  <entry>
    <title>jinfo使用</title>
    <link href="http://qsli.github.io/2017/11/26/jinfo/"/>
    <id>http://qsli.github.io/2017/11/26/jinfo/</id>
    <published>2017-11-26T15:02:14.000Z</published>
    <updated>2017-11-26T15:21:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查看最终生效的flag"><a href="#查看最终生效的flag" class="headerlink" title="查看最终生效的flag"></a>查看最终生效的flag</h2><p><code>sudo -u tomcat jinfo pid</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Attaching to process ID 30350, please wait...</div><div class="line">Debugger attached successfully.</div><div class="line">Server compiler detected.</div><div class="line">JVM version is 24.45-b08</div><div class="line">...</div><div class="line">...</div><div class="line">sun.cpu.endian = little</div><div class="line">package.access = sun.,org.apache.catalina.,org.apache.coyote.,org.apache.tomcat.,org.apache.jasper.,sun.beans.</div><div class="line">sun.cpu.isalist = </div><div class="line"></div><div class="line">VM Flags:</div><div class="line"></div><div class="line">-Djava.util.logging.config.file=/tomcat/www/application/conf/logging.properties -Xms6g -Xmx6g -Xmn4g -XX:PermSize=256m -XX:MaxPermSize=256M ... -Djava.io.tmpdir=/tomcat/www/application/temp</div></pre></td></tr></table></figure>
<h3 id="java-XX-PrintFlagsFinal"><a href="#java-XX-PrintFlagsFinal" class="headerlink" title="java -XX:+PrintFlagsFinal"></a>java -XX:+PrintFlagsFinal</h3><p>使用<code>-version</code>可以查看java支持的开关</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -XX:+PrintFlagsFinal -version</div></pre></td></tr></table></figure>
<p>输出如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">➜  qsli.github.com (hexo|✚6…) java -XX:+PrintFlagsFinal -version</div><div class="line">[Global flags]</div><div class="line">    uintx AdaptiveSizeDecrementScaleFactor          = 4                                   &#123;product&#125;</div><div class="line">    uintx AdaptiveSizeMajorGCDecayTimeScale         = 10                                  &#123;product&#125;</div><div class="line">    uintx AdaptiveSizePausePolicy                   = 0                                   &#123;product&#125;</div><div class="line">    uintx AdaptiveSizePolicyCollectionCostMargin    = 50                                  &#123;product&#125;</div><div class="line">    uintx AdaptiveSizePolicyInitializingSteps       = 20                                  &#123;product&#125;</div><div class="line">    ...</div><div class="line">    ...</div><div class="line">    ...</div><div class="line">    uintx YoungGenerationSizeSupplementDecay        = 8                                   &#123;product&#125;</div><div class="line">    uintx YoungPLABSize                             = 4096                                &#123;product&#125;</div><div class="line">     bool ZeroTLAB                                  = false                               &#123;product&#125;</div><div class="line">     intx hashCode                                  = 5                                   &#123;product&#125;</div><div class="line">java version &quot;1.8.0_112&quot;</div><div class="line">Java(TM) SE Runtime Environment (build 1.8.0_112-b15)</div><div class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.112-b15, mixed mode)</div></pre></td></tr></table></figure>
<p>但是<code>白衣大侠</code>说，<code>-version</code>的结果可能不准确，最好实际跑一下。</p>
<blockquote>
<p>经常以类似下面的语句去查看参数，偷懒不起应用，用-version代替。有些参数设置后会影响其他参数，所以查看时也把它带上。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -server -Xmx1024m -Xms1024m -XX:+UseConcMarkSweepGC -XX:+PrintFlagsFinal -version| grep ParallelGCThreads</div></pre></td></tr></table></figure>
<h2 id="动态打开jvm的开关"><a href="#动态打开jvm的开关" class="headerlink" title="动态打开jvm的开关"></a>动态打开jvm的开关</h2><p>jinfo可以动态的改变jvm的flag， 而不必重启服务器。虽然只对一些特定的flag有效，但是有的时候也很有用。</p>
<p>支持动态开启和关闭的的flag，可以通过下面的命令查看。</p>
<p><code>java -XX:+PrintFlagsFinal -version | grep managed</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">qsli.github.com (hexo|✚6…) java -XX:+PrintFlagsInitial | grep manageable</div><div class="line">     intx CMSAbortablePrecleanWaitMillis            = 100                                 &#123;manageable&#125;</div><div class="line">     intx CMSTriggerInterval                        = -1                                  &#123;manageable&#125;</div><div class="line">     intx CMSWaitDuration                           = 2000                                &#123;manageable&#125;</div><div class="line">     bool HeapDumpAfterFullGC                       = false                               &#123;manageable&#125;</div><div class="line">     bool HeapDumpBeforeFullGC                      = false                               &#123;manageable&#125;</div><div class="line">     bool HeapDumpOnOutOfMemoryError                = false                               &#123;manageable&#125;</div><div class="line">    ccstr HeapDumpPath                              =                                     &#123;manageable&#125;</div><div class="line">    uintx MaxHeapFreeRatio                          = 70                                  &#123;manageable&#125;</div><div class="line">    uintx MinHeapFreeRatio                          = 40                                  &#123;manageable&#125;</div><div class="line">     bool PrintClassHistogram                       = false                               &#123;manageable&#125;</div><div class="line">     bool PrintClassHistogramAfterFullGC            = false                               &#123;manageable&#125;</div><div class="line">     bool PrintClassHistogramBeforeFullGC           = false                               &#123;manageable&#125;</div><div class="line">     bool PrintConcurrentLocks                      = false                               &#123;manageable&#125;</div><div class="line">     bool PrintGC                                   = false                               &#123;manageable&#125;</div><div class="line">     bool PrintGCDateStamps                         = false                               &#123;manageable&#125;</div><div class="line">     bool PrintGCDetails                            = false                               &#123;manageable&#125;</div><div class="line">     bool PrintGCID                                 = false                               &#123;manageable&#125;</div><div class="line">     bool PrintGCTimeStamps                         = false                               &#123;manageable&#125;</div></pre></td></tr></table></figure>
<p>用<code>JConsole</code>打开，可以看到相应的<code>MXBean</code>节点:</p>
<img src="/2017/11/26/jinfo/jinfo.png" alt="jinfo.png" title="">
<p>使用代码也可以获取对应的值：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> afei</div><div class="line"> * <span class="doctag">@version</span> 1.0.0</div><div class="line"> * <span class="doctag">@since</span> 2017年07月25日</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiagnosticOptionsTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        HotSpotDiagnostic mxBean = <span class="keyword">new</span> HotSpotDiagnostic();</div><div class="line">        List&lt;VMOption&gt; diagnosticVMOptions = mxBean.getDiagnosticOptions();</div><div class="line">        <span class="keyword">for</span> (VMOption vmOption:diagnosticVMOptions)&#123;</div><div class="line">            System.out.println(vmOption.getName() + <span class="string">" = "</span> + vmOption.getValue());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>代码拷贝自参考1</p>
</blockquote>
<p>然后就可以使用下面的命令，打开或者关闭相应的开关</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-flag [+|-]name</div><div class="line">            enables or disables the given boolean command line flag.</div></pre></td></tr></table></figure>
<p>比如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo -u tomcat jinfo -flag  -PrintGC `pgrep <span class="_">-f</span> tomcat`</div><div class="line">sudo -u tomcat jinfo -flag  +PrintGC `pgrep <span class="_">-f</span> tomcat`</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://www.jianshu.com/p/c321d0808a1b" rel="external nofollow noopener noreferrer" target="_blank">jinfo命令详解 - 简书</a></p>
</li>
<li><p><a href="http://mp.weixin.qq.com/s?__biz=MzU3NDAxMzU1Nw==&amp;mid=2247484957&amp;idx=3&amp;sn=ee1e459b6e579555b7006cb69a6bb7f1&amp;chksm=fd39af07ca4e2611707621a71dedfa7329668d741fa2b4bdc9835ef14583cf79adb378d8d6c6&amp;mpshare=1&amp;scene=1&amp;srcid=1123RfpGGNhu1XF30IA20OFH#rd" rel="external nofollow noopener noreferrer" target="_blank">Java调优经验谈</a></p>
</li>
<li><p><a href="http://rednaxelafx.iteye.com/blog/1049240" rel="external nofollow noopener noreferrer" target="_blank">通过jinfo工具在full GC前后做heap dump - Script Ahead, Code Behind - ITeye博客</a></p>
</li>
<li><p><a href="http://mp.weixin.qq.com/s?__biz=MzIzODYyNjkzNw==&amp;mid=2247483687&amp;idx=1&amp;sn=41f24dac62c0ca65e4dfe32eae62f3f2&amp;chksm=e9373031de40b927497e5b9aa5dacae6e0a5bac8c760e05ae1d983baf700f45fe8f6c1cfca41&amp;mpshare=1&amp;scene=1&amp;srcid=0904E8auyJdEzKjyytGtjpVO#rd" rel="external nofollow noopener noreferrer" target="_blank">关键业务系统的JVM参数推荐(2016热冬版）</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;查看最终生效的flag&quot;&gt;&lt;a href=&quot;#查看最终生效的flag&quot; class=&quot;headerlink&quot; title=&quot;查看最终生效的flag&quot;&gt;&lt;/a&gt;查看最终生效的flag&lt;/h2&gt;&lt;p&gt;&lt;code&gt;sudo -u tomcat jinfo pid&lt;/co
    
    </summary>
    
      <category term="java" scheme="http://qsli.github.io/categories/java/"/>
    
    
      <category term="jinfo" scheme="http://qsli.github.io/tags/jinfo/"/>
    
  </entry>
  
  <entry>
    <title>executor总结</title>
    <link href="http://qsli.github.io/2017/11/19/executor/"/>
    <id>http://qsli.github.io/2017/11/19/executor/</id>
    <published>2017-11-18T20:01:22.000Z</published>
    <updated>2017-11-18T20:01:22.412Z</updated>
    
    <content type="html"><![CDATA[<h2 id="shutdown-和shutdownNow"><a href="#shutdown-和shutdownNow" class="headerlink" title="shutdown()和shutdownNow()"></a>shutdown()和shutdownNow()</h2><h3 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown()"></a>shutdown()</h3><p><code>shutdown()</code>会尝试中断空闲的线程，并把<code>ThreadPool</code>的状态置成<code>SHUTDOWN</code>,<br>这个状态下，不能通过<code>submit()</code>或者<code>execute()</code>提交任务，但是正在执行的和任务队列中的任务还可以继续执行。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</div><div class="line">    mainLock.lock();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        checkShutdownAccess();</div><div class="line">        advanceRunState(SHUTDOWN);</div><div class="line">        interruptIdleWorkers();</div><div class="line">        onShutdown(); <span class="comment">// hook for ScheduledThreadPoolExecutor</span></div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        mainLock.unlock();</div><div class="line">    &#125;</div><div class="line">    tryTerminate();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>任务队列中的任务拉取, 通过<code>getTask()</code>方法进行。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">runWorker</span><span class="params">(Worker w)</span> </span>&#123;</div><div class="line">      Thread wt = Thread.currentThread();</div><div class="line">      Runnable task = w.firstTask;</div><div class="line">      w.firstTask = <span class="keyword">null</span>;</div><div class="line">      w.unlock(); <span class="comment">// allow interrupts</span></div><div class="line">      <span class="keyword">boolean</span> completedAbruptly = <span class="keyword">true</span>;</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">          <span class="keyword">while</span> (task != <span class="keyword">null</span> || (task = getTask()) != <span class="keyword">null</span>) &#123;</div><div class="line">              w.lock();</div><div class="line">              <span class="comment">// If pool is stopping, ensure thread is interrupted;</span></div><div class="line">              <span class="comment">// if not, ensure thread is not interrupted.  This</span></div><div class="line">              <span class="comment">// requires a recheck in second case to deal with</span></div><div class="line">              <span class="comment">// shutdownNow race while clearing interrupt</span></div><div class="line">              <span class="keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</div><div class="line">                   (Thread.interrupted() &amp;&amp;</div><div class="line">                    runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</div><div class="line">                  !wt.isInterrupted())</div><div class="line">                  wt.interrupt();</div><div class="line">              <span class="keyword">try</span> &#123;</div><div class="line">                  beforeExecute(wt, task);</div><div class="line">                  Throwable thrown = <span class="keyword">null</span>;</div><div class="line">                  <span class="keyword">try</span> &#123;</div><div class="line">                      task.run();</div><div class="line">                  &#125; <span class="keyword">catch</span> (RuntimeException x) &#123;</div><div class="line">                      thrown = x; <span class="keyword">throw</span> x;</div><div class="line">                  &#125; <span class="keyword">catch</span> (Error x) &#123;</div><div class="line">                      thrown = x; <span class="keyword">throw</span> x;</div><div class="line">                  &#125; <span class="keyword">catch</span> (Throwable x) &#123;</div><div class="line">                      thrown = x; <span class="keyword">throw</span> <span class="keyword">new</span> Error(x);</div><div class="line">                  &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                      afterExecute(task, thrown);</div><div class="line">                  &#125;</div><div class="line">              &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                  task = <span class="keyword">null</span>;</div><div class="line">                  w.completedTasks++;</div><div class="line">                  w.unlock();</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">          completedAbruptly = <span class="keyword">false</span>;</div><div class="line">      &#125; <span class="keyword">finally</span> &#123;</div><div class="line">          processWorkerExit(w, completedAbruptly);</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="shutdownNow"><a href="#shutdownNow" class="headerlink" title="shutdownNow()"></a>shutdownNow()</h3><p><code>shutdownNow()</code>会中断所有的<code>worker</code>线程， 然后将队列里没有执行的任务全部停止并返回。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> List&lt;Runnable&gt; <span class="title">shutdownNow</span><span class="params">()</span> </span>&#123;</div><div class="line">       List&lt;Runnable&gt; tasks;</div><div class="line">       <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</div><div class="line">       mainLock.lock();</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           checkShutdownAccess();</div><div class="line">           advanceRunState(STOP);</div><div class="line">           interruptWorkers();</div><div class="line">           tasks = drainQueue();</div><div class="line">       &#125; <span class="keyword">finally</span> &#123;</div><div class="line">           mainLock.unlock();</div><div class="line">       &#125;</div><div class="line">       tryTerminate();</div><div class="line">       <span class="keyword">return</span> tasks;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>中断线程池中的线程</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Interrupts all threads, even if active. Ignores SecurityExceptions</div><div class="line">    * (in which case some threads may remain uninterrupted).</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">interruptWorkers</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</div><div class="line">       mainLock.lock();</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           <span class="keyword">for</span> (Worker w : workers)</div><div class="line">               w.interruptIfStarted();</div><div class="line">       &#125; <span class="keyword">finally</span> &#123;</div><div class="line">           mainLock.unlock();</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">interruptIfStarted</span><span class="params">()</span> </span>&#123;</div><div class="line">           Thread t;</div><div class="line">           <span class="keyword">if</span> (getState() &gt;= <span class="number">0</span> &amp;&amp; (t = thread) != <span class="keyword">null</span> &amp;&amp; !t.isInterrupted()) &#123;</div><div class="line">               <span class="keyword">try</span> &#123;</div><div class="line">                   t.interrupt();</div><div class="line">               &#125; <span class="keyword">catch</span> (SecurityException ignore) &#123;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<p>停止任务队列中没有执行的任务</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Drains the task queue into a new list, normally using</div><div class="line">    * drainTo. But if the queue is a DelayQueue or any other kind of</div><div class="line">    * queue for which poll or drainTo may fail to remove some</div><div class="line">    * elements, it deletes them one by one.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">private</span> List&lt;Runnable&gt; <span class="title">drainQueue</span><span class="params">()</span> </span>&#123;</div><div class="line">       BlockingQueue&lt;Runnable&gt; q = workQueue;</div><div class="line">       ArrayList&lt;Runnable&gt; taskList = <span class="keyword">new</span> ArrayList&lt;Runnable&gt;();</div><div class="line">       q.drainTo(taskList);</div><div class="line">       <span class="keyword">if</span> (!q.isEmpty()) &#123;</div><div class="line">           <span class="keyword">for</span> (Runnable r : q.toArray(<span class="keyword">new</span> Runnable[<span class="number">0</span>])) &#123;</div><div class="line">               <span class="keyword">if</span> (q.remove(r))</div><div class="line">                   taskList.add(r);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> taskList;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>java中线程的停止是协作式的，线程要主动检查<code>interrupted</code>状态，并做出响应才能正确退出。</p>
<h3 id="JVM退出"><a href="#JVM退出" class="headerlink" title="JVM退出"></a>JVM退出</h3><ul>
<li>非守护线程</li>
</ul>
<p>如果线程池里的线程是非守护线程， JVM会等待线程的退出，然后才会真正的推出。</p>
<ul>
<li>守护线程（不推荐）</li>
</ul>
<p>JVM退出的时候不会等待守护线程，因此如果要等待所有的任务执行完后再退出，需要自己代码处理, 可以使用<code>awaitTermination</code>方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">awaitTermination</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></div><div class="line">        <span class="keyword">throws</span> InterruptedException &#123;</div><div class="line">        <span class="keyword">long</span> nanos = unit.toNanos(timeout);</div><div class="line">        <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</div><div class="line">        mainLock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">for</span> (;;) &#123;</div><div class="line">                <span class="keyword">if</span> (runStateAtLeast(ctl.get(), TERMINATED))</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                <span class="keyword">if</span> (nanos &lt;= <span class="number">0</span>)</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                nanos = termination.awaitNanos(nanos);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            mainLock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>其中<code>termination</code>是结束的条件队列</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Lock held on access to workers set and related bookkeeping.</div><div class="line"> * While we could use a concurrent set of some sort, it turns out</div><div class="line"> * to be generally preferable to use a lock. Among the reasons is</div><div class="line"> * that this serializes interruptIdleWorkers, which avoids</div><div class="line"> * unnecessary interrupt storms, especially during shutdown.</div><div class="line"> * Otherwise exiting threads would concurrently interrupt those</div><div class="line"> * that have not yet interrupted. It also simplifies some of the</div><div class="line"> * associated statistics bookkeeping of largestPoolSize etc. We</div><div class="line"> * also hold mainLock on shutdown and shutdownNow, for the sake of</div><div class="line"> * ensuring workers set is stable while separately checking</div><div class="line"> * permission to interrupt and actually interrupting.</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">new</span> ReentrantLock();</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Wait condition to support awaitTermination</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> Condition termination = mainLock.newCondition();</div></pre></td></tr></table></figure>
<p>线程池在退出的时候会唤醒等待在这个队列上的线程。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">tryTerminate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line">            <span class="keyword">int</span> c = ctl.get();</div><div class="line">            <span class="keyword">if</span> (isRunning(c) ||</div><div class="line">                runStateAtLeast(c, TIDYING) ||</div><div class="line">                (runStateOf(c) == SHUTDOWN &amp;&amp; ! workQueue.isEmpty()))</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            <span class="keyword">if</span> (workerCountOf(c) != <span class="number">0</span>) &#123; <span class="comment">// Eligible to terminate</span></div><div class="line">                interruptIdleWorkers(ONLY_ONE);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</div><div class="line">            mainLock.lock();</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">if</span> (ctl.compareAndSet(c, ctlOf(TIDYING, <span class="number">0</span>))) &#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        terminated();</div><div class="line">                    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                        ctl.set(ctlOf(TERMINATED, <span class="number">0</span>));</div><div class="line">                        termination.signalAll(); <span class="comment">// 唤醒等待在这个条件上的线程</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                mainLock.unlock();</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// else retry on failed CAS</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://cdn2.jianshu.io/p/c079d59ba7c8" rel="external nofollow noopener noreferrer" target="_blank">拆轮子：全面剖析 ThreadPoolExecutor（2）-众人拾柴 - 简书</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;shutdown-和shutdownNow&quot;&gt;&lt;a href=&quot;#shutdown-和shutdownNow&quot; class=&quot;headerlink&quot; title=&quot;shutdown()和shutdownNow()&quot;&gt;&lt;/a&gt;shutdown()和shutdownN
    
    </summary>
    
      <category term="java" scheme="http://qsli.github.io/categories/java/"/>
    
    
      <category term="executor" scheme="http://qsli.github.io/tags/executor/"/>
    
  </entry>
  
  <entry>
    <title>Guava中的ThreadFactoryBuilder</title>
    <link href="http://qsli.github.io/2017/11/18/ThreadFactoryBuilder/"/>
    <id>http://qsli.github.io/2017/11/18/ThreadFactoryBuilder/</id>
    <published>2017-11-18T09:15:34.000Z</published>
    <updated>2017-11-18T09:15:34.205Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>java中自定义线程池时可以传入一个<code>ThreadFactory</code>，用来创建线程。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Creates a new &#123;<span class="doctag">@code</span> ThreadPoolExecutor&#125; with the given initial</div><div class="line">    * parameters and default rejected execution handler.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> corePoolSize the number of threads to keep in the pool, even</div><div class="line">    *        if they are idle, unless &#123;<span class="doctag">@code</span> allowCoreThreadTimeOut&#125; is set</div><div class="line">    * <span class="doctag">@param</span> maximumPoolSize the maximum number of threads to allow in the</div><div class="line">    *        pool</div><div class="line">    * <span class="doctag">@param</span> keepAliveTime when the number of threads is greater than</div><div class="line">    *        the core, this is the maximum time that excess idle threads</div><div class="line">    *        will wait for new tasks before terminating.</div><div class="line">    * <span class="doctag">@param</span> unit the time unit for the &#123;<span class="doctag">@code</span> keepAliveTime&#125; argument</div><div class="line">    * <span class="doctag">@param</span> workQueue the queue to use for holding tasks before they are</div><div class="line">    *        executed.  This queue will hold only the &#123;<span class="doctag">@code</span> Runnable&#125;</div><div class="line">    *        tasks submitted by the &#123;<span class="doctag">@code</span> execute&#125; method.</div><div class="line">    * <span class="doctag">@param</span> threadFactory the factory to use when the executor</div><div class="line">    *        creates a new thread</div><div class="line">    * <span class="doctag">@throws</span> IllegalArgumentException if one of the following holds:&lt;br&gt;</div><div class="line">    *         &#123;<span class="doctag">@code</span> corePoolSize &lt; 0&#125;&lt;br&gt;</div><div class="line">    *         &#123;<span class="doctag">@code</span> keepAliveTime &lt; 0&#125;&lt;br&gt;</div><div class="line">    *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt;= 0&#125;&lt;br&gt;</div><div class="line">    *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt; corePoolSize&#125;</div><div class="line">    * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> workQueue&#125;</div><div class="line">    *         or &#123;<span class="doctag">@code</span> threadFactory&#125; is null</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></div><div class="line">                             <span class="keyword">int</span> maximumPoolSize,</div><div class="line">                             <span class="keyword">long</span> keepAliveTime,</div><div class="line">                             TimeUnit unit,</div><div class="line">                             BlockingQueue&lt;Runnable&gt; workQueue,</div><div class="line">                             ThreadFactory threadFactory) &#123;</div><div class="line">       <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</div><div class="line">            threadFactory, defaultHandler);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><code>ThreadFactory</code>接口只有一个方法，就是创建线程</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ThreadFactory</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Constructs a new &#123;<span class="doctag">@code</span> Thread&#125;.  Implementations may also initialize</div><div class="line">     * priority, name, daemon status, &#123;<span class="doctag">@code</span> ThreadGroup&#125;, etc.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> r a runnable to be executed by new thread instance</div><div class="line">     * <span class="doctag">@return</span> constructed thread, or &#123;<span class="doctag">@code</span> null&#125; if the request to</div><div class="line">     *         create a thread is rejected</div><div class="line">     */</div><div class="line">    <span class="function">Thread <span class="title">newThread</span><span class="params">(Runnable r)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建<code>Thread</code>时可以设置一些列的属性， 属性比较多，于是<code>guava</code>里有一个便利类 ———— <code>ThreadFactoryBuilder</code>。</p>
<p>直接看<code>build</code>方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ThreadFactory <span class="title">build</span><span class="params">(ThreadFactoryBuilder builder)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> String nameFormat = builder.nameFormat;</div><div class="line">    <span class="keyword">final</span> Boolean daemon = builder.daemon;</div><div class="line">    <span class="keyword">final</span> Integer priority = builder.priority;</div><div class="line">    <span class="keyword">final</span> UncaughtExceptionHandler uncaughtExceptionHandler =</div><div class="line">        builder.uncaughtExceptionHandler;</div><div class="line">    <span class="keyword">final</span> ThreadFactory backingThreadFactory =</div><div class="line">        (builder.backingThreadFactory != <span class="keyword">null</span>)</div><div class="line">        ? builder.backingThreadFactory</div><div class="line">        : Executors.defaultThreadFactory();</div><div class="line">    <span class="keyword">final</span> AtomicLong count = (nameFormat != <span class="keyword">null</span>) ? <span class="keyword">new</span> AtomicLong(<span class="number">0</span>) : <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadFactory() &#123;</div><div class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable runnable)</span> </span>&#123;</div><div class="line">        Thread thread = backingThreadFactory.newThread(runnable);</div><div class="line">        <span class="keyword">if</span> (nameFormat != <span class="keyword">null</span>) &#123;</div><div class="line">          thread.setName(format(nameFormat, count.getAndIncrement()));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (daemon != <span class="keyword">null</span>) &#123;</div><div class="line">          thread.setDaemon(daemon);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (priority != <span class="keyword">null</span>) &#123;</div><div class="line">          thread.setPriority(priority);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (uncaughtExceptionHandler != <span class="keyword">null</span>) &#123;</div><div class="line">          thread.setUncaughtExceptionHandler(uncaughtExceptionHandler);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> thread;</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>使用起来挺顺手的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(</div><div class="line">          <span class="number">10</span>,</div><div class="line">          <span class="number">15</span>,</div><div class="line">          <span class="number">10</span>,</div><div class="line">          TimeUnit.SECONDS,</div><div class="line">          blockingQueue,</div><div class="line">          <span class="keyword">new</span> ThreadFactoryBuilder().setNameFormat(<span class="string">"guava-%d"</span>).build(),</div><div class="line">          <span class="keyword">new</span> ThreadPoolExecutor.DiscardPolicy()</div><div class="line">  );</div></pre></td></tr></table></figure>
<p>主要就是给线程整一个名字，用<code>jstack</code>等工具排查问题时方便知道是哪个线程池里的。</p>
<p><code>jstack</code>的结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&quot;guava-9&quot; #19 prio=5 os_prio=0 tid=0x00007f5024468000 nid=0x5e3b waiting on condition [0x00007f50104f7000]</div><div class="line">   java.lang.Thread.State: WAITING (parking)</div><div class="line">        at sun.misc.Unsafe.park(Native Method)</div><div class="line">        - parking to wait for  &lt;0x00000000d709af38&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)</div><div class="line">        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)</div><div class="line">        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039)</div><div class="line">        at java.util.concurrent.ArrayBlockingQueue.take(ArrayBlockingQueue.java:403)</div><div class="line">        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)</div><div class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)</div><div class="line">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</div><div class="line">        at java.lang.Thread.run(Thread.java:745)</div></pre></td></tr></table></figure>
<h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><ol>
<li><a href="http://www.importnew.com/20263.html" rel="external nofollow noopener noreferrer" target="_blank">ExecutorService-10个要诀和技巧 - ImportNew</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;用法&quot;&gt;&lt;a href=&quot;#用法&quot; class=&quot;headerlink&quot; title=&quot;用法&quot;&gt;&lt;/a&gt;用法&lt;/h2&gt;&lt;p&gt;java中自定义线程池时可以传入一个&lt;code&gt;ThreadFactory&lt;/code&gt;，用来创建线程。&lt;/p&gt;
&lt;figure class
    
    </summary>
    
      <category term="guava" scheme="http://qsli.github.io/categories/guava/"/>
    
    
      <category term="concurrent" scheme="http://qsli.github.io/tags/concurrent/"/>
    
  </entry>
  
  <entry>
    <title>MAT-Ubuntu无法打开Report</title>
    <link href="http://qsli.github.io/2017/11/12/MAT-Ubuntu/"/>
    <id>http://qsli.github.io/2017/11/12/MAT-Ubuntu/</id>
    <published>2017-11-12T10:57:04.000Z</published>
    <updated>2017-11-12T10:57:04.411Z</updated>
    
    <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>可以运行<code>Leak Suspects</code>，可以看到报告文件确实生成了，但是无法打开，看error log如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">Unhandled event loop exception</div><div class="line"></div><div class="line">org.eclipse.swt.SWTException: Failed to execute runnable (org.eclipse.swt.SWTError: No more handles [Browser style SWT.MOZILLA and Java system property org.eclipse.swt.browser.DefaultType=mozilla are not supported with GTK 3 as XULRunner is not ported for GTK 3 yet])</div><div class="line">	at org.eclipse.swt.SWT.error(SWT.java:4491)</div><div class="line">	at org.eclipse.swt.SWT.error(SWT.java:4406)</div><div class="line">	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:138)</div><div class="line">	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3794)</div><div class="line">	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3433)</div><div class="line">	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:1127)</div><div class="line">	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:337)</div><div class="line">	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1018)</div><div class="line">	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:156)</div><div class="line">	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:694)</div><div class="line">	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:337)</div><div class="line">	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:606)</div><div class="line">	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)</div><div class="line">	at org.eclipse.mat.ui.rcp.Application.start(Application.java:26)</div><div class="line">	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)</div><div class="line">	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)</div><div class="line">	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)</div><div class="line">	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:380)</div><div class="line">	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:235)</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</div><div class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</div><div class="line">	at java.lang.reflect.Method.invoke(Method.java:498)</div><div class="line">	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:669)</div><div class="line">	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:608)</div><div class="line">	at org.eclipse.equinox.launcher.Main.run(Main.java:1515)</div><div class="line">	at org.eclipse.equinox.launcher.Main.main(Main.java:1488)</div><div class="line">Caused by: org.eclipse.swt.SWTError: No more handles [Browser style SWT.MOZILLA and Java system property org.eclipse.swt.browser.DefaultType=mozilla are not supported with GTK 3 as XULRunner is not ported for GTK 3 yet]</div><div class="line">	at org.eclipse.swt.SWT.error(SWT.java:4517)</div><div class="line">	at org.eclipse.swt.browser.MozillaDelegate.&lt;init&gt;(MozillaDelegate.java:57)</div><div class="line">	at org.eclipse.swt.browser.Mozilla.create(Mozilla.java:663)</div><div class="line">	at org.eclipse.swt.browser.Browser.&lt;init&gt;(Browser.java:99)</div><div class="line">	at org.eclipse.mat.ui.internal.panes.QueryTextResultPane.createPartControl(QueryTextResultPane.java:72)</div><div class="line">	at org.eclipse.mat.ui.editor.MultiPaneEditor.addPage(MultiPaneEditor.java:585)</div><div class="line">	at org.eclipse.mat.ui.editor.MultiPaneEditor.addPage(MultiPaneEditor.java:574)</div><div class="line">	at org.eclipse.mat.ui.editor.MultiPaneEditor.addNewPage(MultiPaneEditor.java:496)</div><div class="line">	at org.eclipse.mat.ui.QueryExecution.doDisplayResult(QueryExecution.java:300)</div><div class="line">	at org.eclipse.mat.ui.QueryExecution.access$0(QueryExecution.java:240)</div><div class="line">	at org.eclipse.mat.ui.QueryExecution$1.run(QueryExecution.java:144)</div><div class="line">	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)</div><div class="line">	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)</div><div class="line">	... 24 more</div></pre></td></tr></table></figure>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>这个是<code>gtk</code>的问题。</p>
<p>添加<code>--launcher.GTK_version</code>和<code>2</code>到<code>MemoryAnalyzer.ini</code>文件中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">-startup</div><div class="line">plugins/org.eclipse.equinox.launcher_1.3.100.v20150511-1540.jar</div><div class="line">--launcher.library</div><div class="line">plugins/org.eclipse.equinox.launcher.gtk.linux.x86_64_1.1.300.v20150602-1417</div><div class="line">--launcher.GTK_version</div><div class="line">2</div><div class="line">-vmargs</div><div class="line">-Xmx1024m</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://askubuntu.com/questions/761604/eclipse-not-working-in-16-04" rel="external nofollow noopener noreferrer" target="_blank">Eclipse not working in 16.04 - Ask Ubuntu</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h2&gt;&lt;p&gt;可以运行&lt;code&gt;Leak Suspects&lt;/code&gt;，可以看到报告文件确实生成了，但是无法打开，看error log如下:&lt;/p&gt;

    
    </summary>
    
      <category term="java" scheme="http://qsli.github.io/categories/java/"/>
    
    
      <category term="mat" scheme="http://qsli.github.io/tags/mat/"/>
    
  </entry>
  
  <entry>
    <title>使用greys来排查线上问题</title>
    <link href="http://qsli.github.io/2017/11/12/greys/"/>
    <id>http://qsli.github.io/2017/11/12/greys/</id>
    <published>2017-11-12T10:10:12.000Z</published>
    <updated>2017-11-12T10:10:12.576Z</updated>
    
    <content type="html"><![CDATA[<h2 id="greys"><a href="#greys" class="headerlink" title="greys"></a>greys</h2><p>greys的理念是将btrace常用的功能命令化，这样可以大大的节省排查问题的时间。</p>
<h3 id="greys-安装"><a href="#greys-安装" class="headerlink" title="greys 安装"></a>greys 安装</h3><p>推荐使用网络安装:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -sLk http://ompc.oss.aliyuncs.com/greys/install.sh|bash</div></pre></td></tr></table></figure>
<p>安装后家目录下有如下的文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/home/qishengli/.greys</div><div class="line">└── lib</div><div class="line">    └── 1.7.6.4</div><div class="line">        ├── greys</div><div class="line">        │   ├── ga.sh</div><div class="line">        │   ├── greys-agent.jar</div><div class="line">        │   ├── greys-core.jar</div><div class="line">        │   ├── greys.sh</div><div class="line">        │   ├── gs.sh</div><div class="line">        │   └── install-local.sh</div><div class="line">        └── greys-1.7.6.4-bin.zip</div></pre></td></tr></table></figure>
<blockquote>
<p>其中greys-core.jar为greys的程序主体，启动类、加载类都在这个jar包当中；<br>greys-agent.jar则为目标JVM的加载引导程序；<br>greys.sh为一个可执行脚本，为Greys的启动脚本。</p>
</blockquote>
<h3 id="greys常用功能"><a href="#greys常用功能" class="headerlink" title="greys常用功能"></a>greys常用功能</h3><p>启动脚本，</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo -u tomcat -H ./greys.sh  3292</div></pre></td></tr></table></figure>
<p>为了安全考虑，一般会限制tomcat启动用户的权限，这里<code>-u</code>指定了<code>tomcat</code>启动的用户， <code>3292</code>是tomcat的进程id。<br>交互式shell，输入help即可看到所有支持的命令。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">ga?&gt;help</div><div class="line">+----------+----------------------------------------------------------------------------------+</div><div class="line">|       sc | Search all the classes loaded by JVM                                             |</div><div class="line">+----------+----------------------------------------------------------------------------------+</div><div class="line">|       sm | Search the method of classes loaded by JVM                                       |</div><div class="line">+----------+----------------------------------------------------------------------------------+</div><div class="line">|  monitor | Monitor the execution of specified Class and its method                          |</div><div class="line">+----------+----------------------------------------------------------------------------------+</div><div class="line">|    watch | Display the details of specified class and method                                |</div><div class="line">+----------+----------------------------------------------------------------------------------+</div><div class="line">|       tt | Time Tunnel                                                                      |</div><div class="line">+----------+----------------------------------------------------------------------------------+</div><div class="line">|    trace | Display the detailed thread stack of specified class and method                  |</div><div class="line">+----------+----------------------------------------------------------------------------------+</div><div class="line">|       js | Enhanced JavaScript                                                              |</div><div class="line">+----------+----------------------------------------------------------------------------------+</div><div class="line">|   ptrace | Display the detailed thread path stack of specified class and method             |</div><div class="line">+----------+----------------------------------------------------------------------------------+</div><div class="line">|    stack | Display the stack trace of specified class and method                            |</div><div class="line">+----------+----------------------------------------------------------------------------------+</div><div class="line">|     quit | Quit Greys console                                                               |</div><div class="line">+----------+----------------------------------------------------------------------------------+</div><div class="line">|  session | Display current session information                                              |</div><div class="line">+----------+----------------------------------------------------------------------------------+</div><div class="line">|  version | Display Greys version                                                            |</div><div class="line">+----------+----------------------------------------------------------------------------------+</div><div class="line">|      jvm | Display the target JVM information                                               |</div><div class="line">+----------+----------------------------------------------------------------------------------+</div><div class="line">|    reset | Reset all the enhanced classes                                                   |</div><div class="line">+----------+----------------------------------------------------------------------------------+</div><div class="line">|      asm | Display class bytecode by asm format                                             |</div><div class="line">+----------+----------------------------------------------------------------------------------+</div><div class="line">| shutdown | Shut down Greys server and exit the console                                      |</div><div class="line">+----------+----------------------------------------------------------------------------------+</div><div class="line">|     help | Display Greys Help                                                               |</div><div class="line">+----------+----------------------------------------------------------------------------------+</div><div class="line">|      top | Display The Threads Of Top CPU TIME                                              |</div><div class="line">+----------+----------------------------------------------------------------------------------+</div></pre></td></tr></table></figure>
<p>help后面可以跟具体的命令， 会显示命令的具体用法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line">ga?&gt;help tt</div><div class="line">+---------+----------------------------------------------------------------------------------+</div><div class="line">|   USAGE | -[tlDi:x:w:s:pdEn:] class-pattern method-pattern condition-express               |</div><div class="line">|         | Time Tunnel                                                                      |</div><div class="line">+---------+----------------------------------------------------------------------------------+</div><div class="line">| OPTIONS |              [t] | Record the method invocation within time fragments            |</div><div class="line">|         | -----------------+-------------------------------------------------------------- |</div><div class="line">|         |              [l] | List all the time fragments                                   |</div><div class="line">|         | -----------------+-------------------------------------------------------------- |</div><div class="line">|         |              [D] | Delete all the time fragments                                 |</div><div class="line">|         | -----------------+-------------------------------------------------------------- |</div><div class="line">|         |             [i:] | Display the detailed information from specified time fragmen  |</div><div class="line">|         |                  | t                                                             |</div><div class="line">|         | -----------------+-------------------------------------------------------------- |</div><div class="line">|         |             [x:] | Expand level of object (0 by default)                         |</div><div class="line">|         | -----------------+-------------------------------------------------------------- |</div><div class="line">|         |             [w:] | watch-express, watch the time fragment by OGNL express, like  |</div><div class="line">|         |                  |  params[0], returnObj, throwExp and so on.                    |</div><div class="line">|         |                  |                                                               |</div><div class="line">|         |                  | FOR EXAMPLE                                                   |</div><div class="line">|         |                  |     params[0]                                                 |</div><div class="line">|         |                  |     params[0]+params[1]                                       |</div><div class="line">|         |                  |     returnObj                                                 |</div><div class="line">|         |                  |     throwExp                                                  |</div><div class="line">|         |                  |     target                                                    |</div><div class="line">|         |                  |     clazz                                                     |</div><div class="line">|         |                  |     method                                                    |</div><div class="line">|         |                  |                                                               |</div><div class="line">|         |                  | THE STRUCTURE                                                 |</div><div class="line">|         |                  |           target : the object                                 |</div><div class="line">|         |                  |            clazz : the object&apos;s class                         |</div><div class="line">|         |                  |           method : the constructor or method                  |</div><div class="line">|         |                  |     params[0..n] : the parameters of method                   |</div><div class="line">|         |                  |        returnObj : the returned object of method              |</div><div class="line">|         |                  |         throwExp : the throw exception of method              |</div><div class="line">|         |                  |         isReturn : the method ended by return                 |</div><div class="line">|         |                  |          isThrow : the method ended by throwing exception     |</div><div class="line">|         | -----------------+-------------------------------------------------------------- |</div><div class="line">|         |             [s:] | Search-expression, to search the time fragments by OGNL expr  |</div><div class="line">|         |                  | ess                                                           |</div><div class="line">|         |                  |                                                               |</div><div class="line">|         |                  | FOR EXAMPLE                                                   |</div><div class="line">|         |                  |      TRUE : 1==1                                              |</div><div class="line">|         |                  |      TRUE : true                                              |</div><div class="line">|         |                  |     FALSE : false                                             |</div><div class="line">|         |                  |      TRUE : params.length&gt;=0                                  |</div><div class="line">|         |                  |     FALSE : 1==2                                              |</div><div class="line">|         |                  |                                                               |</div><div class="line">|         |                  | THE STRUCTURE                                                 |</div><div class="line">|         |                  |           target : the object                                 |</div><div class="line">|         |                  |            clazz : the object&apos;s class                         |</div><div class="line">|         |                  |           method : the constructor or method                  |</div><div class="line">|         |                  |     params[0..n] : the parameters of method                   |</div><div class="line">|         |                  |        returnObj : the returned object of method              |</div><div class="line">|         |                  |         throwExp : the throw exception of method              |</div><div class="line">|         |                  |         isReturn : the method ended by return                 |</div><div class="line">|         |                  |          isThrow : the method ended by throwing exception     |</div><div class="line">|         |                  |           #index : the index of time-fragment record          |</div><div class="line">|         |                  |       #processId : the process ID of time-fragment record     |</div><div class="line">|         |                  |            #cost : the cost time of time-fragment record      |</div><div class="line">|         | -----------------+-------------------------------------------------------------- |</div><div class="line">|         |              [p] | Replay the time fragment specified by index                   |</div><div class="line">|         | -----------------+-------------------------------------------------------------- |</div><div class="line">|         |              [d] | Delete time fragment specified by index                       |</div><div class="line">|         | -----------------+-------------------------------------------------------------- |</div><div class="line">|         |              [E] | Enable regular expression to match (wildcard matching by def  |</div><div class="line">|         |                  | ault)                                                         |</div><div class="line">|         | -----------------+-------------------------------------------------------------- |</div><div class="line">|         |             [n:] | Threshold of execution times                                  |</div><div class="line">|         | -----------------+-------------------------------------------------------------- |</div><div class="line">|         |    class-pattern | Path and classname of Pattern Matching                        |</div><div class="line">|         | -----------------+-------------------------------------------------------------- |</div><div class="line">|         |   method-pattern | Method of Pattern Matching                                    |</div><div class="line">|         | -----------------+-------------------------------------------------------------- |</div><div class="line">|         |  condition-expre | Conditional expression by OGNL                                |</div><div class="line">|         |               ss |                                                               |</div><div class="line">|         |                  | FOR EXAMPLE                                                   |</div><div class="line">|         |                  |      TRUE : 1==1                                              |</div><div class="line">|         |                  |      TRUE : true                                              |</div><div class="line">|         |                  |     FALSE : false                                             |</div><div class="line">|         |                  |      TRUE : params.length&gt;=0                                  |</div><div class="line">|         |                  |     FALSE : 1==2                                              |</div><div class="line">|         |                  |                                                               |</div><div class="line">|         |                  | THE STRUCTURE                                                 |</div><div class="line">|         |                  |           target : the object                                 |</div><div class="line">|         |                  |            clazz : the object&apos;s class                         |</div><div class="line">|         |                  |           method : the constructor or method                  |</div><div class="line">|         |                  |     params[0..n] : the parameters of method                   |</div><div class="line">|         |                  |        returnObj : the returned object of method              |</div><div class="line">|         |                  |         throwExp : the throw exception of method              |</div><div class="line">|         |                  |         isReturn : the method ended by return                 |</div><div class="line">|         |                  |          isThrow : the method ended by throwing exception     |</div><div class="line">|         |                  |            #cost : the cost(ms) of method                     |</div><div class="line">+---------+----------------------------------------------------------------------------------+</div><div class="line">| EXAMPLE | tt -t *StringUtils isTop                                                         |</div><div class="line">|         | tt -t *StringUtils isTop params[0].length==1                                     |</div><div class="line">|         | tt -l                                                                            |</div><div class="line">|         | tt -D                                                                            |</div><div class="line">|         | tt -i 1000 -w params[0]                                                          |</div><div class="line">|         | tt -i 1000 -d                                                                    |</div><div class="line">|         | tt -i 1000                                                                       |</div><div class="line">+---------+----------------------------------------------------------------------------------+</div></pre></td></tr></table></figure>
<h4 id="top"><a href="#top" class="headerlink" title="top"></a>top</h4><p>greys的shell里集成的top功能，可以显示jstack中每个线程的cpu占比。</p>
<p>没有greys的时候的做法可能是，先查看native的线程的cpu占用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">top -p 3292 -H</div></pre></td></tr></table></figure>
<p><code>-H</code>是显示到线程级别</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Tasks: 699 total,   0 running, 699 sleeping,   0 stopped,   0 zombie</div><div class="line">Cpu(s):  8.0%us,  1.6%sy,  0.0%ni, 90.2%id,  0.0%wa,  0.0%hi,  0.2%si,  0.1%st</div><div class="line">Mem:   8059648k total,  7801008k used,   258640k free,    33328k buffers</div><div class="line">Swap:  4194296k total,        0k used,  4194296k free,  2453588k cached</div><div class="line"></div><div class="line">  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                                            </div><div class="line"> 5620 tomcat    20   0 9446m 4.2g 6696 S  6.6 54.2  33:46.86 java                                                                               </div><div class="line"> 5764 tomcat    20   0 9446m 4.2g 6696 S  5.0 54.2   1:05.94 java                                                                               </div><div class="line"> 5787 tomcat    20   0 9446m 4.2g 6696 S  4.0 54.2  57:48.76 java                                                                               </div><div class="line"> 5790 tomcat    20   0 9446m 4.2g 6696 S  2.3 54.2  40:31.71 java                                                                               </div><div class="line"> 3523 tomcat    20   0 9446m 4.2g 6696 S  1.3 54.2  68:48.18 java                                                                               </div><div class="line"> 3982 tomcat    20   0 9446m 4.2g 6696 S  1.3 54.2  21:15.22 java                                                                               </div><div class="line"> 3385 tomcat    20   0 9446m 4.2g 6696 S  1.0 54.2  54:10.76 java                                                                               </div><div class="line"> 3413 tomcat    20   0 9446m 4.2g 6696 S  1.0 54.2  29:12.64 java</div></pre></td></tr></table></figure>
<p>由于jstack的输出是16进制的线程号，我们需要根据<code>PID</code>进行转换</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">printf &quot;%x\n&quot; 5620</div><div class="line">15f4</div></pre></td></tr></table></figure>
<p>然后<code>jstack</code>去查找相应的java线程栈</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&quot;http-8080-38&quot; daemon prio=10 tid=0x00007fbcf006e000 nid=0x15f4 in Object.wait() [0x00007fbcd28a1000]</div><div class="line">   java.lang.Thread.State: WAITING (on object monitor)</div><div class="line">        at java.lang.Object.wait(Native Method)</div><div class="line">        - waiting on &lt;0x000000077b69e488&gt; (a org.apache.tomcat.util.net.JIoEndpoint$Worker)</div><div class="line">        at java.lang.Object.wait(Object.java:503)</div><div class="line">        at org.apache.tomcat.util.net.JIoEndpoint$Worker.await(JIoEndpoint.java:458)</div><div class="line">        - locked &lt;0x000000077b69e488&gt; (a org.apache.tomcat.util.net.JIoEndpoint$Worker)</div><div class="line">        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:484)</div><div class="line">        at java.lang.Thread.run(Thread.java:744)</div></pre></td></tr></table></figure>
<p>费了一番功夫，黄花菜都凉了。</p>
<p>也有将上面的步骤写成一个脚本的，快了许多。（驼厂内部散落着各种不同版本的slow_stack.sh）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">The stack of busy(13.6%) thread(3613/0xe1d) of java pid(3292) all times():</div><div class="line">&quot;http-8080-13&quot; daemon prio=10 tid=0x00007fbcf001b000 nid=0xe1d in Object.wait() [0x00007fbce7f7e000]</div><div class="line">   java.lang.Thread.State: WAITING (on object monitor)</div><div class="line">        at java.lang.Object.wait(Native Method)</div><div class="line">        - waiting on &lt;0x0000000771e29738&gt; (a org.apache.tomcat.util.net.JIoEndpoint$Worker)</div><div class="line">        at java.lang.Object.wait(Object.java:503)</div><div class="line">        at org.apache.tomcat.util.net.JIoEndpoint$Worker.await(JIoEndpoint.java:458)</div><div class="line">        - locked &lt;0x0000000771e29738&gt; (a org.apache.tomcat.util.net.JIoEndpoint$Worker)</div><div class="line">        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:484)</div><div class="line">        at java.lang.Thread.run(Thread.java:744)</div></pre></td></tr></table></figure>
<p>开源的版本也有， <a href="https://github.com/superhj1987/awesome-scripts/blob/master/docs/java.md#beer-show-busy-java-threads" rel="external nofollow noopener noreferrer" target="_blank">awesome-scripts/java.md at master · superhj1987/awesome-scripts</a></p>
<p>greys中就可以直接使用top命令来查看，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">ga?&gt;top -t 3 -d</div><div class="line">+-------+--------+---------------+----------------------+---------------------------------------------------------------------------------------+</div><div class="line">| ID    |  CPU%  | USR%          | STATE                | THREAD_NAME                                                                           |</div><div class="line">+-------+--------+---------------+----------------------+---------------------------------------------------------------------------------------+</div><div class="line">| #131  | 04.14% | TIMED_WAITING | CachedClock Updater  | at : sun.misc.Unsafe.park(Native Method)                                              |</div><div class="line">|       |        |               | Thread               | at : java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:349)           |</div><div class="line">|       |        |               |                      | at : qunar.tc.common.clock.CachedClock$1.run(CachedClock.java:22)                     |</div><div class="line">|       |        |               |                      | at : java.lang.Thread.run(Thread.java:744)                                            |</div><div class="line">+-------+--------+---------------+----------------------+---------------------------------------------------------------------------------------+</div><div class="line">| #1282 | 03.51% | WAITING       | http-8080-176        | at : java.lang.Object.wait(Native Method)                                             |</div><div class="line">|       |        |               |                      | at : java.lang.Object.wait(Object.java:503)                                           |</div><div class="line">|       |        |               |                      | at : org.apache.tomcat.util.net.JIoEndpoint$Worker.await(JIoEndpoint.java:458)        |</div><div class="line">|       |        |               |                      | at : org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:484)          |</div><div class="line">|       |        |               |                      | at : java.lang.Thread.run(Thread.java:744)                                            |</div><div class="line">+-------+--------+---------------+----------------------+---------------------------------------------------------------------------------------+</div><div class="line">| #38   | 03.26% | TIMED_WAITING | thread-monitor-task  | at : sun.misc.Unsafe.park(Native Method)                                              |</div><div class="line">|       |        |               |                      | at : java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)           |</div><div class="line">|       |        |               |                      | at : java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos |</div><div class="line">|       |        |               |                      |      (AbstractQueuedSynchronizer.java:2082)                                           |</div><div class="line">|       |        |               |                      | at : java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(Scheduled |</div><div class="line">|       |        |               |                      |      ThreadPoolExecutor.java:1090)                                                    |</div><div class="line">|       |        |               |                      | at : java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(Scheduled |</div><div class="line">|       |        |               |                      |      ThreadPoolExecutor.java:807)                                                     |</div><div class="line">|       |        |               |                      | at : java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1068)    |</div><div class="line">|       |        |               |                      | at : java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)  |</div><div class="line">|       |        |               |                      | at : java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)  |</div><div class="line">|       |        |               |                      | at : java.lang.Thread.run(Thread.java:744)                                            |</div><div class="line">+-------+--------+---------------+----------------------+---------------------------------------------------------------------------------------+</div></pre></td></tr></table></figure>
<p>上面显示的就是top3占用cpu的线程</p>
<h4 id="monitor-——-监控方法的执行时间"><a href="#monitor-——-监控方法的执行时间" class="headerlink" title="monitor —— 监控方法的执行时间"></a>monitor —— 监控方法的执行时间</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ga?&gt;monitor -c2 com.domain.Bean   someMethod   </div><div class="line">Press Ctrl+D to abort.</div><div class="line">Affect(class-cnt:1 , method-cnt:1) cost in 103 ms.</div><div class="line">+---------------------+--------------------+----------------------------+-------+---------+------+-----------+------------+------------+------------+</div><div class="line">| TIMESTAMP           | CLASS              | METHOD                     | TOTAL | SUCCESS | FAIL | FAIL-RATE | AVG-RT(ms) | MIN-RT(ms) | MAX-RT(ms) |</div><div class="line">+---------------------+--------------------+----------------------------+-------+---------+------+-----------+------------+------------+------------+</div><div class="line">| 2017-11-12 17:09:18 | com.domain.Bean    | someMethod                 | 4     | 4       | 0    | 00.00%    | 13.25      | 11         | 17         |</div><div class="line">+---------------------+--------------------+----------------------------+-------+---------+------+-----------+------------+------------+------------+</div></pre></td></tr></table></figure>
<h4 id="watch-——-全方位监控"><a href="#watch-——-全方位监控" class="headerlink" title="watch —— 全方位监控"></a>watch —— 全方位监控</h4><p>watch可以监控方法的返回值，入参，还可以根据条件筛选（是否抛出异常，响应时间等）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ga?&gt;watch com.domain.Bean onMessage params[0]</div><div class="line">Press Ctrl+D to abort.</div><div class="line">Affect(class-cnt:1 , method-cnt:1) cost in 92 ms.</div><div class="line">&#123;&quot;messageId&quot;:&quot;171112.171542.192.168.50.191.31779.22733&quot;&#125;</div></pre></td></tr></table></figure>
<h4 id="tt（time-tunel）和ptrace"><a href="#tt（time-tunel）和ptrace" class="headerlink" title="tt（time tunel）和ptrace"></a>tt（time tunel）和ptrace</h4><p>先说ptrace， 这个和trace差不多， 只是可以加上<code>-t</code>将调用存储起来，可以配合<code>tt</code>使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ga?&gt;ptrace -t  -n 1 com.domain.Bean doSend</div><div class="line">Press Ctrl+D to abort.</div><div class="line">Affect(class-cnt:1 , method-cnt:22) cost in 163 ms.</div><div class="line">`---+pTracing for : thread_name=&quot;http-8080-179&quot; thread_id=0x505;is_daemon=true;priority=5;process=1002;</div><div class="line">    `---[21,21ms]com.domain.Bean:doSend(); index=1001;</div><div class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</div><div class="line">|    INDEX | PROCESS-ID |            TIMESTAMP |   COST(ms) |   IS-RET |   IS-EXP |          OBJECT |                          CLASS |                         METHOD |</div><div class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</div><div class="line">|     1001 |       1002 |  2017-11-12 17:30:40 |         20 |     true |    false |      0x55e9f734 |                           Bean |                         doSend |</div><div class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</div></pre></td></tr></table></figure></p>
<p><code>tt</code>:</p>
<blockquote>
<p>时间隧道命令是我在使用watch命令进行问题排查的时候衍生出来的想法。<br>watch虽然很方便和灵活，但需要提前想清楚观察表达式的拼写，这对排查问题而言要求太高，因为很多时候我们并不清楚问题出自于何方，只能靠蛛丝马迹进行猜测.<br>这个时候如果能记录下当时方法调用的所有入参和返回值、抛出的异常会对整个问题的思考与判断非常有帮助。<br>于是乎，TimeTunnel命令就诞生了。</p>
</blockquote>
<p>列出所有时间片段或显示一个时间片段的内容:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tt -l</div><div class="line">tt -i 1001</div></pre></td></tr></table></figure>
<p>内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line">ga?&gt;tt -l</div><div class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</div><div class="line">|    INDEX | PROCESS-ID |            TIMESTAMP |   COST(ms) |   IS-RET |   IS-EXP |          OBJECT |                          CLASS |                         METHOD |</div><div class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</div><div class="line">|     1001 |       1002 |  2017-11-12 17:30:40 |         20 |     true |    false |      0x55e9f734 |                           Bean |                         doSend |</div><div class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</div><div class="line">|     1002 |       1003 |  2017-11-12 17:30:41 |         10 |     true |    false |      0x55e9f734 |                           Bean |                         doSend |</div><div class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</div><div class="line">ga?&gt;tt -i 1001</div><div class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">|           INDEX | 1001                                                                                                                                                   |</div><div class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">|      PROCESS-ID | 1002                                                                                                                                                   |</div><div class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">|      GMT-CREATE | 2017-11-12 17:30:40                                                                                                                                    |</div><div class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">|        COST(ms) | 20                                                                                                                                                     |</div><div class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">|          OBJECT | 0x55e9f734                                                                                                                                             |</div><div class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">|           CLASS | com.domain.Bean                                                                                 |</div><div class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">|          METHOD | doSend                                                                                                                                                 |</div><div class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">|       IS-RETURN | true                                                                                                                                                   |</div><div class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">|    IS-EXCEPTION | false                                                                                                                                                  |</div><div class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">|   PARAMETERS[0] | 242996952                                                                                                                                              |</div><div class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">|   PARAMETERS[1] | [CouponBase[id=1,amount=5]                                                                                |</div><div class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">|   PARAMETERS[2] | VoucherSendTask[appName=catalysis,batchSeriesNum=catalysis-train_give_zhoubian-HOURROOM_NEWUSER-HOURROOM,transactionId=catalysis24299695225174650HOURR] |</div><div class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">|      RETURN-OBJ | InventoryRecord[activityId=31,transactionId=catalysis24299695225174650HOURROOM242996952]                                                                |</div><div class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">|           STACK | thread_name=&quot;http-8080-179&quot; thread_id=0x505;is_daemon=true;priority=5;                                                                                 |</div><div class="line">|                 |     @com.qunar.hotel.qta.open.promotion.service.impl.Bean.doSend(Bean.java:179)                                    |</div><div class="line">|                 |         at com.qunar.hotel.qta.open.promotion.service.impl.Bean.sendVoucherThenGetCouponId(Bean.java:191)          |</div><div class="line">|                 |         at com.qunar.hotel.qta.open.promotion.provider.controller.benefit.UserBenefitController.voucherSendThenGetCouponId(UserBenefitController.java: |</div><div class="line">|                 | 841)                                                                                                                                                   |</div><div class="line">|                 |         at sun.reflect.GeneratedMethodAccessor1923.invoke(null:-1)                                                                                     |</div><div class="line">|                 |         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)                                                       |</div><div class="line">|                 |         at java.lang.reflect.Method.invoke(Method.java:606)                                                                                            |</div><div class="line">|                 |         at org.springframework.web.method.support.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:214)                                       |</div><div class="line">|                 |         at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:132)                             |</div><div class="line">|                 |         at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104) |</div><div class="line">|                 |         at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:748 |</div><div class="line">|                 | )                                                                                                                                                      |</div><div class="line">|                 |         at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:689)    |</div><div class="line">|                 |         at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:83)                        |</div><div class="line">|                 |         at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:945)                                                    |</div><div class="line">|                 |         at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:876)                                                     |</div><div class="line">|                 |         at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:931)                                                  |</div><div class="line">|                 |         at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:833)                                                          |</div><div class="line">|                 |         at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)                                                                                |</div><div class="line">|                 |         at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:807)                                                         |</div><div class="line">|                 |         at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)                                                                                |</div><div class="line">|                 |         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)                                           |</div><div class="line">|                 |         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)                                                   |</div><div class="line">|                 |         at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:140)                                                               |</div><div class="line">|                 |         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)                                           |</div><div class="line">|                 |         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)                                                   |</div><div class="line">|                 |         at com.qunar.hotel.qta.base.trace.HttpTraceFilter.doFilter(HttpTraceFilter.java:44)                                                            |</div><div class="line">|                 |         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)                                           |</div><div class="line">|                 |         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)                                                   |</div><div class="line">|                 |         at qunar.ServletWatcher.doFilter(ServletWatcher.java:118)                                                                                      |</div><div class="line">|                 |         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)                                           |</div><div class="line">|                 |         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)                                                   |</div><div class="line">|                 |         at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88)                                    |</div><div class="line">|                 |         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:108)                                                 |</div><div class="line">|                 |         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)                                           |</div><div class="line">|                 |         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)                                                   |</div><div class="line">|                 |         at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)                                                         |</div><div class="line">|                 |         at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)                                                         |</div><div class="line">|                 |         at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)                                                               |</div><div class="line">|                 |         at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)                                                               |</div><div class="line">|                 |         at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:555)                                                                   |</div><div class="line">|                 |         at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)                                                           |</div><div class="line">|                 |         at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:298)                                                                 |</div><div class="line">|                 |         at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:857)                                                                  |</div><div class="line">|                 |         at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:588)                                            |</div><div class="line">|                 |         at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489)                                                                     |</div><div class="line">|                 |         at java.lang.Thread.run(Thread.java:744)                                                                                                       |</div><div class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</div></pre></td></tr></table></figure>
<p>除了使用<code>ptrace</code>保存时间片段，也可以使用<code>tt</code>，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ga?&gt;tt -t  -n 1 com.qunar.hotel.qta.open.promotion.service.impl.Bean doSend</div><div class="line">Press Ctrl+D to abort.</div><div class="line">Affect(class-cnt:1 , method-cnt:1) cost in 110 ms.</div><div class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</div><div class="line">|    INDEX | PROCESS-ID |            TIMESTAMP |   COST(ms) |   IS-RET |   IS-EXP |          OBJECT |                          CLASS |                         METHOD |</div><div class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</div><div class="line">|     1003 |       1004 |  2017-11-12 17:37:27 |         10 |     true |    false |      0x55e9f734 |         Bean |                         doSend |</div><div class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</div></pre></td></tr></table></figure>
<p><em>同样的最好指定-n，避免高并发下造成太大影响</em></p>
<p>解决方法重载</p>
<p>tt -t *Test print params[0].length==1</p>
<p>通过制定参数个数的形式解决不同的方法签名，如果参数个数一样，你还可以这样写</p>
<p>tt -t *Test print ‘params[1].class == Integer.class’</p>
<p>解决指定参数</p>
<p>tt -t *Test print params[0].mobile==”13989838402”</p>
<p>具体的可以参见参考文档里的说明。</p>
<ul>
<li><code>tt</code>的另外一个便利之处是可以对保存的时间片主动发起一次调用</li>
</ul>
<p>和dubbo的泛化调用一样，<code>tt</code>的这个方法也可以大大降低沟通的成本。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">ga?&gt;ptrace -t  -n 1  *com.qunar.hotel.qta.open.promotion.flow.listener.BookingPromotionRollBackListener onMessage </div><div class="line">Press Ctrl+D to abort.</div><div class="line">Affect(class-cnt:1 , method-cnt:2) cost in 126 ms.</div><div class="line">`---+pTracing for : thread_name=&quot;anon-com.qunar.hotel.qta.open.promotion.flow.listener.BookingPromotionRollBackListener.&lt;clinit&gt;:33-thread-2&quot; thread_id=0x205;is_daemon=true;priority=5;process=1005;</div><div class="line">    `---[1,1ms]com.qunar.hotel.qta.open.promotion.flow.listener.BookingPromotionRollBackListener:onMessage(); index=1004;</div><div class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</div><div class="line">|    INDEX | PROCESS-ID |            TIMESTAMP |   COST(ms) |   IS-RET |   IS-EXP |          OBJECT |                          CLASS |                         METHOD |</div><div class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</div><div class="line">|     1004 |       1005 |  2017-11-12 17:43:15 |          2 |     true |    false |      0x14b7937c | BookingPromotionRollBackListen |                      onMessage |</div><div class="line">|          |            |                      |            |          |          |                 |                             er |                                |</div><div class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</div><div class="line"></div><div class="line">ga?&gt;tt -i 1004 -p</div><div class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">|           INDEX | 1004                                                                                                                                                   |</div><div class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">|      PROCESS-ID | 1005                                                                                                                                                   |</div><div class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">|      GMT-CREATE | 2017-11-12 17:43:15                                                                                                                                    |</div><div class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">|        COST(ms) | 1                                                                                                                                                      |</div><div class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">|          OBJECT | 0x14b7937c                                                                                                                                             |</div><div class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">|           CLASS | com.qunar.hotel.qta.open.promotion.flow.listener.BookingPromotionRollBackListener                                                                      |</div><div class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">|          METHOD | onMessage                                                                                                                                              |</div><div class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">|       IS-RETURN | true                                                                                                                                                   |</div><div class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">|    IS-EXCEPTION | false                                                                                                                                                  |</div><div class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">|   PARAMETERS[0] | &#123;&quot;messageId&quot;:&quot;171112.174315.192.168.50.191.31779.22906&quot;&#125;                                                                                               |</div><div class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">|      RETURN-OBJ |                                                                                                                                                        |</div><div class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">|           STACK | thread_name=&quot;anon-com.qunar.hotel.qta.open.promotion.flow.listener.BookingPromotionRollBackListener.&lt;clinit&gt;:33-thread-2&quot; thread_id=0x205;is_daemon=tr |</div><div class="line">|                 | ue;priority=5;                                                                                                                                         |</div><div class="line">|                 |     @com.qunar.hotel.qta.open.promotion.flow.listener.BookingPromotionRollBackListener.onMessage(BookingPromotionRollBackListener.java:45)             |</div><div class="line">|                 |         at qunar.tc.qmq.consumer.handler.ConsumerMessage.process(ConsumerMessage.java:105)                                                             |</div><div class="line">|                 |         at qunar.tc.qmq.consumer.handler.MessageHandler$1.run(MessageHandler.java:57)                                                                  |</div><div class="line">|                 |         at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)                                                                     |</div><div class="line">|                 |         at java.util.concurrent.FutureTask.run(FutureTask.java:262)                                                                                    |</div><div class="line">|                 |         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)                                                             |</div><div class="line">|                 |         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)                                                             |</div><div class="line">|                 |         at java.lang.Thread.run(Thread.java:744)                                                                                                       |</div><div class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</div><div class="line">Time fragment[1004] successfully replayed.</div></pre></td></tr></table></figure>
<h4 id="trace"><a href="#trace" class="headerlink" title="trace"></a>trace</h4><p>显示指定方法调用的栈，带时间消耗。简单的可以看下调用链上的耗时，进一步的话就需要更加专业的<code>JProfiler</code>等工具了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">ga?&gt;trace -n 1 com.qunar.hotel.qta.open.promotion.service.impl.Bean doSend</div><div class="line">Press Ctrl+D to abort.</div><div class="line">Affect(class-cnt:1 , method-cnt:1) cost in 102 ms.</div><div class="line">`---+Tracing for : thread_name=&quot;http-8080-181&quot; thread_id=0x507;is_daemon=true;priority=5;</div><div class="line">    `---+[13,13ms]com.qunar.hotel.qta.open.promotion.service.impl.Bean:doSend()</div><div class="line">        +---[0,0ms]com.qunar.hotel.qta.coupon.api.bean.CouponUser:&lt;init&gt;(@175)</div><div class="line">        +---[0,0ms]com.qunar.hotel.qta.open.promotion.bean.voucher.VoucherSendTask:getVoucherTypeId(@176)</div><div class="line">        +---[0,0ms]java.lang.StringBuilder:&lt;init&gt;(@176)</div><div class="line">        +---[0,0ms]com.qunar.hotel.qta.open.promotion.bean.voucher.VoucherSendTask:getTransactionId(@176)</div><div class="line">        +---[0,0ms]java.lang.StringBuilder:append(@176)</div><div class="line">        +---[0,0ms]java.lang.StringBuilder:append(@176)</div><div class="line">        +---[0,0ms]java.lang.StringBuilder:toString(@176)</div><div class="line">        +---[12,12ms]com.qunar.hotel.qta.coupon.api.remote.ActivityWriteRemote:consume(@176)</div><div class="line">        +---[12,0ms]com.qunar.hotel.qta.open.promotion.bean.voucher.VoucherSendTask:getAppName(@177)</div><div class="line">        +---[12,0ms]com.qunar.hotel.qta.open.promotion.bean.voucher.VoucherSendTask:getBatchSeriesNum(@177)</div><div class="line">        +---[12,0ms]java.lang.Long:valueOf(@177)</div><div class="line">        +---[12,0ms]java.util.List:size(@177)</div><div class="line">        +---[13,0ms]java.lang.Integer:valueOf(@177)</div><div class="line">        `---[13,0ms]org.slf4j.Logger:info(@177)</div></pre></td></tr></table></figure>
<p>最好也指定下<code>-n</code></p>
<h4 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h4><p>stack可以产品指定方法调用的stack， 支持正则， 也支持各种条件表达式，具体可以<code>help stack</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">ga?&gt;stack -n 1  *com.qunar.hotel.qta.open.promotion.flow.listener.BookingPromotionRollBackListener onMessage </div><div class="line">Press Ctrl+D to abort.</div><div class="line">Affect(class-cnt:1 , method-cnt:1) cost in 111 ms.</div><div class="line">thread_name=&quot;anon-com.qunar.hotel.qta.open.promotion.flow.listener.BookingPromotionRollBackListener.&lt;clinit&gt;:33-thread-6&quot; thread_id=0x20e;is_daemon=true;priority=5;</div><div class="line">    @com.qunar.hotel.qta.open.promotion.flow.listener.BookingPromotionRollBackListener.onMessage(BookingPromotionRollBackListener.java:-1)</div><div class="line">        at qunar.tc.qmq.consumer.handler.ConsumerMessage.process(ConsumerMessage.java:105)</div><div class="line">        at qunar.tc.qmq.consumer.handler.MessageHandler$1.run(MessageHandler.java:57)</div><div class="line">        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)</div><div class="line">        at java.util.concurrent.FutureTask.run(FutureTask.java:262)</div><div class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</div><div class="line">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</div><div class="line">        at java.lang.Thread.run(Thread.java:744)</div></pre></td></tr></table></figure>
<p><em>注意最好指定下-n参数，以免对线上系统造成较大的压力</em></p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>还有一些其他的用法，比如支持使用js编写自定义的脚本， 查看jvm的信息， 查看加载的类等等。</p>
<h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><blockquote>
<p>（1） 哪些命令会导致性能问题</p>
</blockquote>
<p>Greys的大部分命令性能开销都非常低廉，当然前提是一次性操作的类不要太多。</p>
<blockquote>
<p>（2） 是否能增强由BootstrapClassLoader所加载的类</p>
</blockquote>
<p>当然是可以的，但默认我封印了这个能力。主要是Greys自己也使用了大量BootstrapClassLoader所加载的类，如果处理不好极其容易造成故障。</p>
<p>你可以通过隐藏命令options激活这个功能</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ga?&gt;options unsafe true</div><div class="line">+--------+--------------+-------------+</div><div class="line">| NAME   | BEFORE-VALUE | AFTER-VALUE |</div><div class="line">+--------+--------------+-------------+</div><div class="line">| unsafe | false        | true        |</div><div class="line">+--------+--------------+-------------+</div><div class="line">Affect(row-cnt:1) cost in 2 ms.</div></pre></td></tr></table></figure>
<p>接下来你可以尝试增强系统类了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ga?&gt;monitor -c 5 java.lang.String substring</div><div class="line">Press Ctrl+D or Ctrl+X to abort.</div><div class="line">Affect(class-cnt:1 , method-cnt:2) cost in 35 ms.</div><div class="line">+---------------------+------------------+-----------+-------+---------+------+------+-----------+</div><div class="line">| timestamp           | class            | method    | total | success | fail | rt   | fail-rate |</div><div class="line">+---------------------+------------------+-----------+-------+---------+------+------+-----------+</div><div class="line">| 2015-06-16 23:44:54 | java.lang.String | substring | 30    | 30      | 0    | 0.23 | 0.00%     |</div><div class="line">+---------------------+------------------+-----------+-------+---------+------+------+-----------+</div></pre></td></tr></table></figure>
<p>但我话就放在这里，随意增强系统类。后果自负！</p>
<h3 id="greys-退出"><a href="#greys-退出" class="headerlink" title="greys 退出"></a>greys 退出</h3><p>greys的数据是保存在内存中的， 有些记录的栈桢需要清理，因此推荐使用<code>shutdown</code>方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">ga?&gt;tt -l</div><div class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</div><div class="line">|    INDEX | PROCESS-ID |            TIMESTAMP |   COST(ms) |   IS-RET |   IS-EXP |          OBJECT |                          CLASS |                         METHOD |</div><div class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</div><div class="line">|     1001 |       1002 |  2017-11-12 17:30:40 |         20 |     true |    false |      0x55e9f734 |                           Bean |                         doSend |</div><div class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</div><div class="line">|     1002 |       1003 |  2017-11-12 17:30:41 |         10 |     true |    false |      0x55e9f734 |                           Bean |                         doSend |</div><div class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</div><div class="line">|     1003 |       1004 |  2017-11-12 17:37:27 |         10 |     true |    false |      0x55e9f734 |                           Bean |                         doSend |</div><div class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</div><div class="line">|     1004 |       1005 |  2017-11-12 17:43:15 |          2 |     true |    false |      0x14b7937c | BookingPromotionRollBackListen |                      onMessage |</div><div class="line">|          |            |                      |            |          |          |                 |                             er |                                |</div><div class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</div></pre></td></tr></table></figure>
<p>这些时间片默认是保存的，所以退出的时候需要清理下，不然对应用的gc都会有影响。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ga?&gt;shutdown</div><div class="line">Greys Server is shut down.</div></pre></td></tr></table></figure>
<p>greys 还提供了一个<code>reset</code>的命令，可以还原所有被增强过的类。</p>
<blockquote>
<p>  reset : Reset all the enhanced classes</p>
</blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/greys-pdf" rel="external nofollow noopener noreferrer" target="_blank">greys pdf · oldmanpushcart/greys-anatomy Wiki</a></p>
</li>
<li><p><a href="http://www.bijishequ.com/detail/435931?p=29-55" rel="external nofollow noopener noreferrer" target="_blank">Grays Anatomy源码浅析–ClassLoader,Java,Method,DES,null,方法,INVOKING</a></p>
</li>
<li><p><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/FAQ" rel="external nofollow noopener noreferrer" target="_blank">FAQ · oldmanpushcart/greys-anatomy Wiki</a></p>
</li>
<li><p><a href="http://hongkaiwen.github.io/2017/07/22/java-%E7%BA%BF%E4%B8%8A%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7-greys-anatomy-%E5%AE%9E%E8%B7%B5%E5%88%9D%E6%8E%A2/index.html" rel="external nofollow noopener noreferrer" target="_blank">java 线上调试工具 greys-anatomy 实践初探 | Kuzan</a></p>
</li>
<li><p><a href="http://calvin1978.blogcn.com/articles/btrace1.html" rel="external nofollow noopener noreferrer" target="_blank">Btrace入门到熟练小工完全指南 | 江南白衣</a></p>
</li>
<li><p><a href="http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;mid=2651478959&amp;idx=2&amp;sn=25bac2f47851c436f27c679e77e892ae&amp;chksm=bd2537d08a52bec6d5987b98e885d5b466569a7ba621a5e93297a5490ebd2ea75a04c7b51d47&amp;mpshare=1&amp;scene=1&amp;srcid=09056wNl5ibsbHVZNqBGAT8w#rd" rel="external nofollow noopener noreferrer" target="_blank">线上服务 CPU 100%？一键定位 so easy！</a></p>
</li>
<li><p><a href="https://github.com/CSUG/HouseMD/wiki/UserGuideCN" rel="external nofollow noopener noreferrer" target="_blank">UserGuideCN · CSUG/HouseMD Wiki</a></p>
</li>
<li><p><a href="https://github.com/superhj1987/awesome-scripts" rel="external nofollow noopener noreferrer" target="_blank">superhj1987/awesome-scripts: useful scripts for Linux op</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;greys&quot;&gt;&lt;a href=&quot;#greys&quot; class=&quot;headerlink&quot; title=&quot;greys&quot;&gt;&lt;/a&gt;greys&lt;/h2&gt;&lt;p&gt;greys的理念是将btrace常用的功能命令化，这样可以大大的节省排查问题的时间。&lt;/p&gt;
&lt;h3 id=&quot;gre
    
    </summary>
    
      <category term="shell" scheme="http://qsli.github.io/categories/shell/"/>
    
    
      <category term="greys" scheme="http://qsli.github.io/tags/greys/"/>
    
  </entry>
  
  <entry>
    <title>java8 Stream使用不当，导致文件没有关闭</title>
    <link href="http://qsli.github.io/2017/11/04/java8-file-stream/"/>
    <id>http://qsli.github.io/2017/11/04/java8-file-stream/</id>
    <published>2017-11-04T12:24:31.000Z</published>
    <updated>2017-11-18T10:03:15.451Z</updated>
    
    <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>线上巡查的时候，检查了线上机器的<code>tomcat</code>打开的文件列表，发现了一些问题。<br>一般来说，tomcat打开的文件就是一些<code>jar</code>包，日志文件, 动态库，socket等。因此用下面的命令查看下tomcat打开的文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lsof -p <span class="variable">$pid</span> | grep / | grep -v <span class="string">".jar"</span> | grep -v <span class="string">".so"</span></div></pre></td></tr></table></figure>
<p>结果如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">COMMAND   PID   USER   FD   TYPE             DEVICE  SIZE/OFF      NODE NAME</div><div class="line"></div><div class="line">java    25516 tomcat  cwd    DIR              252,2      4096    136416 /tmp/hsperfdata_tomcat</div><div class="line"></div><div class="line">java    25516 tomcat  rtd    DIR              252,2      4096         2 /</div><div class="line"></div><div class="line">java    25516 tomcat  mem    REG              252,2  99158576     19559 /usr/lib/locale/locale-archive</div><div class="line"></div><div class="line">java    25516 tomcat  mem    REG              252,2     32768    131740 /tmp/hsperfdata_tomcat/25516</div><div class="line"></div><div class="line">java    25516 tomcat    0r   CHR                1,3       0t0      3674 /dev/null</div><div class="line"></div><div class="line">java    25516 tomcat    1w   REG              252,7  16965016   1836324 /logs/catalina.out</div><div class="line"></div><div class="line">java    25516 tomcat    2w   REG              252,7  16965016   1836324 /logs/catalina.out</div><div class="line"></div><div class="line">java    25516 tomcat    3w   REG              252,7   7839644   1836499 /logs/gc-201710181632.log</div><div class="line"></div><div class="line">java    25516 tomcat   10w   REG              252,7   2741011   1835201 /logs/catalina.2017-10-18.log (deleted)</div><div class="line"></div><div class="line">java    25516 tomcat   11w   REG              252,7      1494   1835054 /logs/localhost.2017-10-18.log (deleted)</div><div class="line"></div><div class="line">java    25516 tomcat   40r   CHR                1,8       0t0      3678 /dev/random</div><div class="line"></div><div class="line">java    25516 tomcat   41r   CHR                1,9       0t0      3679 /dev/urandom</div><div class="line"></div><div class="line">java    25516 tomcat   42r   CHR                1,8       0t0      3678 /dev/random</div><div class="line"></div><div class="line">java    25516 tomcat   43r   CHR                1,8       0t0      3678 /dev/random</div><div class="line"></div><div class="line">java    25516 tomcat   44r   CHR                1,9       0t0      3679 /dev/urandom</div><div class="line"></div><div class="line">java    25516 tomcat   45r   CHR                1,9       0t0      3679 /dev/urandom</div><div class="line"></div><div class="line">java    25516 tomcat   52w   REG              252,7   7409504   1836890 /logs/access.2017-10-19.log</div><div class="line"></div><div class="line">java    25516 tomcat   65r   REG              252,7   5665798   1836099 /cache/file_cache/fileA</div><div class="line"></div><div class="line">java    25516 tomcat   68r   REG              252,7  67531699   1835818 /cache/file_cache/fileB</div><div class="line"></div><div class="line">java    25516 tomcat   72r   REG              252,7   5665798   1836099 /cache/file_cache/fileA</div><div class="line"></div><div class="line">java    25516 tomcat   82r   REG              252,7  67531699   1835818 /cache/file_cache/fileB</div><div class="line"></div><div class="line">java    25516 tomcat  180r   REG              252,7  67531699   1835818 /cache/file_cache/fileB</div><div class="line"></div><div class="line">java    25516 tomcat  193r   REG              252,7   5665798   1836099 /cache/file_cache/fileA</div><div class="line"></div><div class="line">java    25516 tomcat  197r   REG              252,7   5665798   1836099 /cache/file_cache/fileA</div><div class="line"></div><div class="line">java    25516 tomcat  200r   REG              252,7  44315261   1836448 /logs/dubbo-access-provider.2017-10-19-13.log</div><div class="line"></div><div class="line">java    25516 tomcat  204r   REG              252,7 181402005   1836417 /logs/dubbo-access-consumer.2017-10-19-13.log</div><div class="line"></div><div class="line">java    25516 tomcat  224r   REG              252,7  67531699   1835818 /cache/file_cache/fileB</div><div class="line"></div><div class="line">java    25516 tomcat  363r   REG              252,7  67531699   1835818 /cache/file_cache/fileB</div><div class="line"></div><div class="line">java    25516 tomcat  365r   REG              252,7   5665798   1836099 /cache/file_cache/fileA</div><div class="line"></div><div class="line">java    25516 tomcat  573r   CHR                1,8       0t0      3678 /dev/random</div></pre></td></tr></table></figure>
<p>从文件列表中可以看出日志文件是一直打开的，这个是正常的，因为需要写入日志。<br>但是还有一些其他的文件，不需要写入，也一直打开，而且有的打开了好几次，这个就看起来有问题了。</p>
<p>翻代码， 发现这个文件是定时拉取的逻辑，每次从数据源拉一份文件到本地， 然后用java8的<code>Files.lines</code>和lambda进行处理。<br>下面大概复现了相关的逻辑。</p>
<h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.air.collection.java8.stream.file;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.google.common.collect.Lists;</div><div class="line"><span class="keyword">import</span> com.google.common.io.Resources;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.net.URISyntaxException;</div><div class="line"><span class="keyword">import</span> java.nio.file.Files;</div><div class="line"><span class="keyword">import</span> java.nio.file.Paths;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.toList;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@author</span> qisheng.li</div><div class="line"> * <span class="doctag">@email</span> qisheng.li@qunar.com</div><div class="line"> * <span class="doctag">@date</span> 17-11-4 下午5:07</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilesTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ScheduledExecutorService executor = Executors.newScheduledThreadPool(<span class="number">1</span>);</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, URISyntaxException, InterruptedException </span>&#123;</div><div class="line">        executor.scheduleAtFixedRate(FilesTest::reloadFile, <span class="number">100</span>, <span class="number">1000</span>, TimeUnit.MILLISECONDS);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reloadFile</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"reload file"</span>);</div><div class="line">        List&lt;Integer&gt; collect = Lists.newArrayList();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            collect = Files.lines(Paths.get(Resources.getResource(<span class="string">"test.json"</span>).toURI()))</div><div class="line">                    .map(String::length)</div><div class="line">                    .collect(toList());</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">            System.out.println(collect.get(<span class="number">0</span>));</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>查看进程打开的文件，可以发现有一堆的<code>test.json</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">java    23757 qishengli 8822r   REG                8,6   257120 2229528 /Java_Tutorial/java-tutorial/src/main/target/classes/test.json</div><div class="line">java    23757 qishengli 8823r   REG                8,6   257120 2229528 /Java_Tutorial/java-tutorial/src/main/target/classes/test.json</div><div class="line">java    23757 qishengli 8824r   REG                8,6   257120 2229528 /Java_Tutorial/java-tutorial/src/main/target/classes/test.json</div><div class="line">java    23757 qishengli 8825r   REG                8,6   257120 2229528 /Java_Tutorial/java-tutorial/src/main/target/classes/test.json</div><div class="line">java    23757 qishengli 8826r   REG                8,6   257120 2229528 /Java_Tutorial/java-tutorial/src/main/target/classes/test.json</div><div class="line">java    23757 qishengli 8827r   REG                8,6   257120 2229528 /Java_Tutorial/java-tutorial/src/main/target/classes/test.json</div><div class="line">java    23757 qishengli 8828r   REG                8,6   257120 2229528 /Java_Tutorial/java-tutorial/src/main/target/classes/test.json</div><div class="line">java    23757 qishengli 8829r   REG                8,6   257120 2229528 /Java_Tutorial/java-tutorial/src/main/target/classes/test.json</div><div class="line">java    23757 qishengli 8830r   REG                8,6   257120 2229528 /Java_Tutorial/java-tutorial/src/main/target/classes/test.json</div><div class="line">java    23757 qishengli 8831r   REG                8,6   257120 2229528 /Java_Tutorial/java-tutorial/src/main/target/classes/test.json</div><div class="line">java    23757 qishengli 8832r   REG                8,6   257120 2229528 /Java_Tutorial/java-tutorial/src/main/target/classes/test.json</div><div class="line">java    23757 qishengli 8833r   REG                8,6   257120 2229528 /Java_Tutorial/java-tutorial/src/main/target/classes/test.json</div><div class="line">java    23757 qishengli 8834r   REG                8,6   257120 2229528 /Java_Tutorial/java-tutorial/src/main/target/classes/test.json</div><div class="line">java    23757 qishengli 8835r   REG                8,6   257120 2229528 /Java_Tutorial/java-tutorial/src/main/target/classes/test.json</div></pre></td></tr></table></figure>
<p>完美复现！</p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><blockquote>
<p>Streams have a BaseStream.close() method and implement AutoCloseable, but nearly all stream instances do not actually need to be closed after use. </p>
</blockquote>
<p>一般来说，并不需要手动调用<code>Stream</code>的<code>close</code>方法， 只有背后是I/O相关的流才需要手动关闭。</p>
<blockquote>
<p>Generally, only streams whose source is an IO channel (such as those returned by Files.lines(Path, Charset)) will require closing. Most streams are backed by collections, arrays, or generating functions, which require no special resource management. (If a stream does require closing, it can be declared as a resource in a try-with-resources statement.)</p>
</blockquote>
<p>查找到打开相应文件的代码，发现使用的正是java8的<code>Files.lines</code>方法，这个方法并不会自动的将文件关闭，所以就会看到，tomcat进程多次打开了同一个文件。</p>
<p><code>Files.lines</code>方法的函数说明如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Read all lines from a file as a &#123;<span class="doctag">@code</span> Stream&#125;. Unlike &#123;<span class="doctag">@link</span></div><div class="line">     * #readAllLines(Path, Charset) readAllLines&#125;, this method does not read</div><div class="line">     * all lines into a &#123;<span class="doctag">@code</span> List&#125;, but instead populates lazily as the stream</div><div class="line">     * is consumed.</div><div class="line">     *</div><div class="line">     * &lt;p&gt; Bytes from the file are decoded into characters using the specified</div><div class="line">     * charset and the same line terminators as specified by &#123;<span class="doctag">@code</span></div><div class="line">     * readAllLines&#125; are supported.</div><div class="line">     *</div><div class="line">     * &lt;p&gt; After this method returns, then any subsequent I/O exception that</div><div class="line">     * occurs while reading from the file or when a malformed or unmappable byte</div><div class="line">     * sequence is read, is wrapped in an &#123;<span class="doctag">@link</span> UncheckedIOException&#125; that will</div><div class="line">     * be thrown from the</div><div class="line">     * &#123;<span class="doctag">@link</span> java.util.stream.Stream&#125; method that caused the read to take</div><div class="line">     * place. In case an &#123;<span class="doctag">@code</span> IOException&#125; is thrown when closing the file,</div><div class="line">     * it is also wrapped as an &#123;<span class="doctag">@code</span> UncheckedIOException&#125;.</div><div class="line">     *</div><div class="line">     * &lt;p&gt; The returned stream encapsulates a &#123;<span class="doctag">@link</span> Reader&#125;.  If timely</div><div class="line">     * disposal of file system resources is required, the try-with-resources</div><div class="line">     * construct should be used to ensure that the stream's</div><div class="line">     * &#123;<span class="doctag">@link</span> Stream#close close&#125; method is invoked after the stream operations</div><div class="line">     * are completed.</div><div class="line">     *</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span>   path</div><div class="line">     *          the path to the file</div><div class="line">     * <span class="doctag">@param</span>   cs</div><div class="line">     *          the charset to use for decoding</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span>  the lines from the file as a &#123;<span class="doctag">@code</span> Stream&#125;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@throws</span>  IOException</div><div class="line">     *          if an I/O error occurs opening the file</div><div class="line">     * <span class="doctag">@throws</span>  SecurityException</div><div class="line">     *          In the case of the default provider, and a security manager is</div><div class="line">     *          installed, the &#123;<span class="doctag">@link</span> SecurityManager#checkRead(String) checkRead&#125;</div><div class="line">     *          method is invoked to check read access to the file.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@see</span>     #readAllLines(Path, Charset)</div><div class="line">     * <span class="doctag">@see</span>     #newBufferedReader(Path, Charset)</div><div class="line">     * <span class="doctag">@see</span>     java.io.BufferedReader#lines()</div><div class="line">     * <span class="doctag">@since</span>   1.8</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Stream&lt;String&gt; <span class="title">lines</span><span class="params">(Path path, Charset cs)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        BufferedReader br = Files.newBufferedReader(path, cs);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> br.lines().onClose(asUncheckedRunnable(br));</div><div class="line">        &#125; <span class="keyword">catch</span> (Error|RuntimeException e) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                br.close();</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    e.addSuppressed(ex);</div><div class="line">                &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;&#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">throw</span> e;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>重点看这几句， </p>
<blockquote>
<p>The returned stream encapsulates a Reader.  If timely disposal of file system resources is required, the try-with-resources construct should be used to ensure that the stream’s <code>Stream#close</code> method is invoked  after the stream operations are completed.</p>
</blockquote>
<p>如果需要及时地清理系统的资源， 可以使用java7中引入的<code>try-with-resources</code>, 来确保<code>Stream</code>的<code>close</code>方法在使用完后被调用。</p>
<p><code>Files.lines</code>是惰性的， 当你使用的时候才去读取， 所以需要手动的关闭流， <code>Files.readAllLines</code>这个方法则是一次把文件<br>中的所有行读取到内存中去，并且会自动的关闭文件。</p>
<p><code>Files.readAllLines</code>的函数说明中就保证了底层的文件一定会被关闭。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Read all lines from a file. This method ensures that the file is</div><div class="line">    * closed when all bytes have been read or an I/O error, or other runtime</div><div class="line">    * exception, is thrown. Bytes from the file are decoded into characters</div><div class="line">    * using the specified charset.</div><div class="line">    **/</div></pre></td></tr></table></figure>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>使用java7中引入的<code>try-with-resoucres</code>, 实现了<code>AutoCloseable</code>接口的都会被自动的关闭</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> ( Stream&lt;String&gt; stream = Files.lines(path, charset) ) &#123;</div><div class="line">    <span class="comment">// do something</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="https://stackoverflow.com/questions/38698182/close-java-8-stream" rel="external nofollow noopener noreferrer" target="_blank">Close Java 8 Stream - Stack Overflow</a></p>
</li>
<li><p><a href="https://stackoverflow.com/questions/37659872/do-i-have-to-close-terminated-streamed-query-results-in-a-try-with-resources-bl" rel="external nofollow noopener noreferrer" target="_blank">java - Do I have to close terminated, streamed query results in a try-with-resources-block? - Stack Overflow</a></p>
</li>
<li><p><a href="http://calvin1978.blogcn.com/articles/latency2.html" rel="external nofollow noopener noreferrer" target="_blank">在你的代码之外，服务时延过长的三个追查方向(下) | 江南白衣</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h2&gt;&lt;p&gt;线上巡查的时候，检查了线上机器的&lt;code&gt;tomcat&lt;/code&gt;打开的文件列表，发现了一些问题。&lt;br&gt;一般来说，tomcat打开的文
    
    </summary>
    
      <category term="java" scheme="http://qsli.github.io/categories/java/"/>
    
    
      <category term="java" scheme="http://qsli.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>git-checkout 常用命令</title>
    <link href="http://qsli.github.io/2017/09/12/git-checkout/"/>
    <id>http://qsli.github.io/2017/09/12/git-checkout/</id>
    <published>2017-09-11T16:38:12.000Z</published>
    <updated>2017-09-11T16:38:12.136Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ul>
<li>从另外一个分支检出文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout source_branch &lt;paths&gt;...</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://jasonrudolph.com/blog/2009/02/25/git-tip-how-to-merge-specific-files-from-another-branch/" rel="external nofollow noopener noreferrer" target="_blank">Git tip: How to “merge” specific files from another branch - jasonrudolph.com</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;tips&quot;&gt;&lt;a href=&quot;#tips&quot; class=&quot;headerlink&quot; title=&quot;tips&quot;&gt;&lt;/a&gt;tips&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;从另外一个分支检出文件&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;t
    
    </summary>
    
      <category term="git" scheme="http://qsli.github.io/categories/git/"/>
    
    
      <category term="git" scheme="http://qsli.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>git查看已合并分支的fork点</title>
    <link href="http://qsli.github.io/2017/09/12/git-branch-log/"/>
    <id>http://qsli.github.io/2017/09/12/git-branch-log/</id>
    <published>2017-09-11T16:25:40.000Z</published>
    <updated>2017-09-11T16:25:40.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一个问题"><a href="#一个问题" class="headerlink" title="一个问题"></a>一个问题</h2><p>有些需求有好几期，做后面几期的可能完全不了解前几期做了什么，拿到分支号后，就需要找到最初的commit点。由于这个分支已经merge到了master上，所以找最近的ancestor就不对了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git merge-base branch1 branch2 //只能找到最近的祖先</div></pre></td></tr></table></figure>
<p>那么如何找到这个分支最初的fork点呢，下面给出两种方案，亲测有效。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="git-别名"><a href="#git-别名" class="headerlink" title="git 别名"></a>git 别名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git config --global alias.oldest-ancestor <span class="string">'!zsh -c '</span>\<span class="string">''</span>diff -u &lt;(git rev-list --first-parent <span class="string">"<span class="variable">$&#123;1:-master&#125;</span>"</span>) &lt;(git rev-list --first-parent <span class="string">"<span class="variable">$&#123;2:-HEAD&#125;</span>"</span>) | sed <span class="_">-ne</span> <span class="string">"s/^ //p"</span> | head -1<span class="string">'\'</span><span class="string">' -'</span></div><div class="line">git config --global alias.branchdiff <span class="string">'!sh -c "git diff `git oldest-ancestor`.."'</span></div><div class="line">git config --global alias.branchlog <span class="string">'!sh -c "git log `git oldest-ancestor`.."'</span></div></pre></td></tr></table></figure>
<p>上述三个命令就可以找到最初的commit点，以及这个分支做了什么。参见<code>stackoverflow</code>上的回答:  <a href="https://stackoverflow.com/questions/1527234/finding-a-branch-point-with-git" rel="external nofollow noopener noreferrer" target="_blank">Finding a branch point with Git? - Stack Overflow</a></p>
<h3 id="git分支图"><a href="#git分支图" class="headerlink" title="git分支图"></a>git分支图</h3><p>如果你使用<code>zsh</code>, 内置的有两个相关的命令<code>glgg</code>,<code>glgga</code>.</p>
<ul>
<li><code>glgg</code>： 显示当前分支的分支图</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  ~  <span class="built_in">alias</span> glgg</div><div class="line">glgg=<span class="string">'git log --graph'</span></div></pre></td></tr></table></figure>
<img src="/2017/09/12/git-branch-log/glgg.png" alt="glgg.png" title="">
<ul>
<li><code>glgga</code>: 显示所有分支的分支图 </li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  ~  <span class="built_in">alias</span> glgga</div><div class="line">glgga=<span class="string">'git log --graph --decorate --all'</span></div></pre></td></tr></table></figure>
<img src="/2017/09/12/git-branch-log/glgga.png" alt="glgga.png" title="">
<p>从分支图中可以快速的看出当前分支是在哪里fork出来的</p>
<h4 id="分支图的显示方式"><a href="#分支图的显示方式" class="headerlink" title="分支图的显示方式"></a>分支图的显示方式</h4><ul>
<li><p>reverse chronological： 默认显示方式，会按照commit的时间，逆序显示</p>
</li>
<li><p>topo order： 按照commit的拓扑顺序显示，子提交在父提交之前显示</p>
</li>
</ul>
<p>查看fork点的时候，最好是按照拓扑排序显示，这样分支图不会很乱，便于找到。</p>
<h3 id="可视化工具"><a href="#可视化工具" class="headerlink" title="可视化工具"></a>可视化工具</h3><p>可视化工具和git log的用法是一样的，顺着查找即可。这里我用<code>idea</code>为例：</p>
<img src="/2017/09/12/git-branch-log/idea.png" alt="idea.png" title="">
<p>开启InteliSort后，注意红框勾上。</p>
<img src="/2017/09/12/git-branch-log/idea-sorted.png" alt="idea-sorted.png" title="">
<p>开启后是按照提交排序的，并没有按照插入的时间，这样可以清楚的顺着提交找到最初的fork点。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="https://stackoverflow.com/questions/1527234/finding-a-branch-point-with-git" rel="external nofollow noopener noreferrer" target="_blank">Finding a branch point with Git? - Stack Overflow</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/chucklu/p/4748394.html" rel="external nofollow noopener noreferrer" target="_blank">git图示所有分支的历史 - ChuckLu - 博客园</a></p>
</li>
<li><p><a href="http://gitbook.liuhui998.com/3_4.html" rel="external nofollow noopener noreferrer" target="_blank">Git Book 中文版 - 查看历史 －Git日志</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一个问题&quot;&gt;&lt;a href=&quot;#一个问题&quot; class=&quot;headerlink&quot; title=&quot;一个问题&quot;&gt;&lt;/a&gt;一个问题&lt;/h2&gt;&lt;p&gt;有些需求有好几期，做后面几期的可能完全不了解前几期做了什么，拿到分支号后，就需要找到最初的commit点。由于这个分支已经m
    
    </summary>
    
      <category term="git" scheme="http://qsli.github.io/categories/git/"/>
    
    
      <category term="git" scheme="http://qsli.github.io/tags/git/"/>
    
      <category term="idea" scheme="http://qsli.github.io/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>用electron开发自己的工具</title>
    <link href="http://qsli.github.io/2017/09/10/electron/"/>
    <id>http://qsli.github.io/2017/09/10/electron/</id>
    <published>2017-09-10T08:14:12.000Z</published>
    <updated>2017-09-10T08:27:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="electron-简介"><a href="#electron-简介" class="headerlink" title="electron 简介"></a>electron 简介</h2><p>web是天生跨平台的。</p>
<p>前几年用ubuntu的时候，各种软件都没有相应的版本，十分的蛋疼。这几年随着web的发展，情况改善了许多。<br>比如说chrome的app， 安装好之后和原生的应用几乎没有区别，可以从ubuntu的dash里面搜索到，可以独立打开。</p>
<p><code>electron</code>则是直接整一个微型的chrome，加上html写的界面，直接做客户端。也有类似<code>atom</code>， <code>visual source code</code>等大型应用也是使用<code>electron</code>构建的。</p>
<img src="/2017/09/10/electron/electron.jpg" alt="electron.jpg" title="">
<h2 id="简单的想法"><a href="#简单的想法" class="headerlink" title="简单的想法"></a>简单的想法</h2><p>之前在windows平台，使用的非常顺手的一个剪贴板增强工具——<a href="http://www.appinn.com/clibor/" rel="external nofollow noopener noreferrer" target="_blank">Clibor – 来自日本的剪贴板辅助工具[Win] - 小众软件</a>， 这个软件非常好用的一个功能就是支持<code>定型文</code>。所谓的<code>定型文</code>就是你事先录制好的一些常用的<br>条目，然后当你需要使用的时候，按快捷键呼出界面，选中想要的<code>定型文</code>，直接就给你复制到了剪贴板，十分的方便。</p>
<img src="/2017/09/10/electron/item.png" alt="item.png" title="">
<p>windows不爽的就是shell不好用， 虽然有<code>cygwin</code>,<code>babun</code>，<code>cmder</code>等还算不错的终端，但是用起来卡卡的，所以最终我还是迁移到了ubuntu，各种命令，各种爽。</p>
<p>但是，作为一个后端的开发，每天要上服务器上查各种问题，各种长长的命令，各种记不住，所以还是要有一个类似小抄试的工具来增强下工作效率。恰巧，上次在youtube上看electorn的一个视频——<a href="https://www.youtube.com/watch?v=FNHBfN8c32U" rel="external nofollow noopener noreferrer" target="_blank">Electron: Desktop Apps with Web Languages - GitHub Universe 2016 - YouTube</a>。这个视频大概介绍了electron，介绍了一些使用electron开发的有意思的应用， 恰巧我看到了一个叫做<code>mojibar</code>的简单应用。</p>
<img src="/2017/09/10/electron/mojibar.gif" alt="mojibar.gif" title="">
<p>她的这个应用是，搜索moji表情对应的文字， 然后会筛选出来相应的结果，然后复制到剪贴板上，支持快捷键呼出。看到这个就瞬间来了灵感，这和我要的小抄应用简直十分吻合。好在<code>electron</code>并不复杂，就研究了下代码自己改造了一番，于是就有了这篇文章。</p>
<h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p>这个demo基本可以在日常的工作中使用了， github的repo在——<a href="https://github.com/qsLI/quake-select" rel="external nofollow noopener noreferrer" target="_blank">qsLI/quake-select</a></p>
<p>下面是界面的截图：</p>
<img src="/2017/09/10/electron/select.png" alt="select.png" title="">
<p>配置文件在json中，类似下面的形式：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"commands"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"desc"</span>: <span class="string">"查看jvm堆的使用情况"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"sudo -u tomcat jmap -heap  `pgrep -f 'tomcat'`"</span>,</div><div class="line">      <span class="attr">"tag"</span>: <span class="string">"opt"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"desc"</span>: <span class="string">"查看jvm最终加载的开关"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"java -XX:+PrintFlagsFinal -version"</span>,</div><div class="line">      <span class="attr">"tag"</span>: <span class="string">"opt"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"desc"</span>: <span class="string">""</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"sudo -u tomcat jcmd `pgrep -f tomcat` VM.flags"</span>,</div><div class="line">      <span class="attr">"tag"</span>: <span class="string">"opt"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"desc"</span>: <span class="string">"查看jvm加载的系统变量"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"sudo -u tomcat jcmd `pgrep -f tomcat` VM.system_properties"</span>,</div><div class="line">      <span class="attr">"tag"</span>: <span class="string">"opt"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"desc"</span>: <span class="string">"查看本机jcmd支持的命令"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"sudo -u tomcat jcmd `pgrep -f tomcat` help"</span>,</div><div class="line">      <span class="attr">"tag"</span>: <span class="string">"opt"</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>目前支持按照<code>command</code>和<code>tag</code>搜索， mojibar使用的这个库在ubuntu下菜单会显示不出来，以后有时间再fix。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="https://electron.atom.io/" rel="external nofollow noopener noreferrer" target="_blank">Electron | Build cross platform desktop apps with JavaScript, HTML, and CSS.</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/20225295" rel="external nofollow noopener noreferrer" target="_blank">使用 Electron 构建桌面应用 - 知乎专栏</a></p>
</li>
<li><p><a href="http://www.appinn.com/clibor/" rel="external nofollow noopener noreferrer" target="_blank">Clibor – 来自日本的剪贴板辅助工具[Win] - 小众软件</a></p>
</li>
<li><p><a href="https://www.youtube.com/watch?v=FNHBfN8c32U" rel="external nofollow noopener noreferrer" target="_blank">Electron: Desktop Apps with Web Languages - GitHub Universe 2016 - YouTube</a></p>
</li>
<li><p><a href="https://github.com/muan/mojibar" rel="external nofollow noopener noreferrer" target="_blank">muan/mojibar: Emoji searcher but as a menubar app.</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;electron-简介&quot;&gt;&lt;a href=&quot;#electron-简介&quot; class=&quot;headerlink&quot; title=&quot;electron 简介&quot;&gt;&lt;/a&gt;electron 简介&lt;/h2&gt;&lt;p&gt;web是天生跨平台的。&lt;/p&gt;
&lt;p&gt;前几年用ubuntu的时候，各
    
    </summary>
    
      <category term="fe" scheme="http://qsli.github.io/categories/fe/"/>
    
    
      <category term="electron" scheme="http://qsli.github.io/tags/electron/"/>
    
  </entry>
  
  <entry>
    <title>Linux下删除文件</title>
    <link href="http://qsli.github.io/2017/09/10/how-to-delete-file-correctly/"/>
    <id>http://qsli.github.io/2017/09/10/how-to-delete-file-correctly/</id>
    <published>2017-09-10T04:20:09.000Z</published>
    <updated>2017-09-10T04:20:09.253Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a>文件存储</h1><img src="/2017/09/10/how-to-delete-file-correctly/inode.png" alt="linux文件的存储" title="linux文件的存储">
<h2 id="软链接和硬链接"><a href="#软链接和硬链接" class="headerlink" title="软链接和硬链接"></a>软链接和硬链接</h2><p>软链接(Symbolic Link):</p>
<p>硬链接(Hard Link):</p>
<blockquote>
<p>硬链接就是在Directory中加入一条filename和Inode的对应关系，所以如果你删除了原来的文件，是不对硬链接文件有任何影响的，因为删除文件就是将link count 减少，当发现指向Inode为filename数量0的时候，系统会回收相应的Inode和Block空间。但是软链接就不同了，在Linux下所有的都是文件，所以软链接也有自己的Inode和block ，但是创建软链接不会在增加原文件Inode-Index，当删除原文件的时候，相应的Index不再能找到，所以导致软链接不能用。但是软链接有自身的优势，可以跨分区，这样就可以解决当前Inode数据区不足够写入，可以使用软链接指向空间充足的空间。</p>
</blockquote>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>软链接  硬链接 区别</p>
<img src="/2017/09/10/how-to-delete-file-correctly/links.png" alt="软链接和硬链接的区别" title="软链接和硬链接的区别">
<h2 id="文件是否被占用"><a href="#文件是否被占用" class="headerlink" title="文件是否被占用"></a>文件是否被占用</h2><p>一切皆文件，所以lsof（list open file）就很重要</p>
<p>lsof -i ：8080 查看端口占用</p>
<p>socket 也是文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo lsof  catalina.out</div><div class="line"></div><div class="line">COMMAND   PID   USER   FD   TYPE DEVICE SIZE/OFF     NODE NAME</div><div class="line">java    40916 tomcat    1w   REG    8,7   933679 27656540 catalina.out</div><div class="line">java    40916 tomcat    2w   REG    8,7   933679 27656540 catalina.out</div></pre></td></tr></table></figure>
<blockquote>
<p>‘‘REG’’ for a regular file<br>FD         is the File Descriptor number of the file or:</p>
</blockquote>
<pre><code>     cwd  current working directory;
     Lnn  library references (AIX);
     err  FD information error (see NAME column);
     jld  jail directory (FreeBSD);
     ltx  shared library text (code and data);
     Mxx  hex memory-mapped type number xx.
     m86  DOS Merge mapped file;
     mem  memory-mapped file;
     mmap memory-mapped device;
     pd   parent directory;
     rtd  root directory;
     tr   kernel trace file (OpenBSD);
     txt  program text (code and data);
     v86  VP/ix mapped file;

FD is followed by one of these characters, describing the mode under which the file is open:

     r for read access;
     w for write access;
     u for read and write access;
     space if mode unknown and no lock
          character follows;
     ‘-’ if mode unknown and lock
          character follows.
</code></pre><p>可以看出上面的文件的fd是1, w权限</p>
<p>系统，每个进程，文件描述符。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ls /proc/40916/fd</div></pre></td></tr></table></figure>
<p>下面的两个命令是等价的：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo cat /proc/40916/fd/2</div><div class="line"></div><div class="line">sudo cat catalina.out</div></pre></td></tr></table></figure>
<h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>删除文件之前应该先看下文件的占用情况，<code>lsof</code>可以查看到文件被哪个进程占用。</p>
<p>如果被占用，直接使用<code>rm</code>删除相当于只是删除了文件名和inode的关联, 但是文件占用的空间还在(block), 应该使用下面的命令进行删除：</p>
<blockquote>
<p>You misunderstand: deletion will be complete only after all processes using the file at the time of deletion have reached completion: only then the deleted inode will be returned to the pool of available inodes, and the content of the file may begin to be corrupted by over-writing. Until then, the inode is alive and well, and is pointing to the area of the disk containing the file in question. As soon as less completes, the soft link will disappear, and so will the file testing.txt.</p>
<pre><code>当我们使用rm命令的时候，系统并不会真正删除这个资料。除非有档案非要将资料存储在原来档案的这些block中。这样原来的block就会被新档案给覆盖掉。 
</code></pre></blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cat /dev/null &gt; filename</div><div class="line">或者</div><div class="line">truncate <span class="_">-s</span> 0 filename</div></pre></td></tr></table></figure>
<h3 id="stat-命令"><a href="#stat-命令" class="headerlink" title="stat 命令"></a>stat 命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">sudo <span class="built_in">stat</span> /proc/40916/fd/2</div><div class="line"></div><div class="line">File: `/proc/40916/fd/2<span class="string">' -&gt; `/home/q/www/qta.open.coupon.provider/logs/catalina.out'</span></div><div class="line">  Size: 64        	Blocks: 0          IO Block: 1024   symbolic link</div><div class="line">Device: 3h/3d	Inode: 3017464897  Links: 1</div><div class="line">Access: (0300/l-wx------)  Uid: (40001/  tomcat)   Gid: (40001/  tomcat)</div><div class="line">Access: 2017-07-05 05:05:06.318550652 +0800</div><div class="line">Modify: 2017-06-15 12:35:24.590599522 +0800</div><div class="line">Change: 2017-06-15 12:35:24.590599522 +0800</div><div class="line"></div><div class="line"></div><div class="line">sudo <span class="built_in">stat</span> catalina.out</div><div class="line"></div><div class="line">File: `catalina.out<span class="string">'</span></div><div class="line">  Size: 962851    	Blocks: 1896       IO Block: 4096   regular file</div><div class="line">Device: 807h/2055d	Inode: 27656540    Links: 1</div><div class="line">Access: (0644/-rw-r--r--)  Uid: (40001/  tomcat)   Gid: (40001/  tomcat)</div><div class="line">Access: 2017-07-06 00:51:44.243427414 +0800</div><div class="line">Modify: 2017-07-06 00:52:27.096557541 +0800</div><div class="line">Change: 2017-07-06 00:52:27.096557541 +0800</div><div class="line"></div><div class="line">sudo ls -i /proc/40916/fd/2</div><div class="line"></div><div class="line">3017464897 /proc/40916/fd/2</div></pre></td></tr></table></figure>
<p>可以看出, 文件描述符是一个软链接.</p>
<h3 id="目录下的文件占用空间很小-但是目录占用空间很大"><a href="#目录下的文件占用空间很小-但是目录占用空间很大" class="headerlink" title="目录下的文件占用空间很小, 但是目录占用空间很大"></a>目录下的文件占用空间很小, 但是目录占用空间很大</h3><p>这种情况, 最常见的就是文件被删除了, 但是还有进程占用它. 于是这个文件占用的block就没有释放掉.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo lsof | grep deleted</div></pre></td></tr></table></figure>
<p>使用上面的命令就可以看到,那些文件被删除了, 但是还在被占用.  kill掉相应的进程, 空间就自己回来了.</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/lsof.html" rel="external nofollow noopener noreferrer" target="_blank">3. lsof 一切皆文件 — Linux Tools Quick Tutorial</a></p>
</li>
<li><p><a href="https://unix.stackexchange.com/questions/92384/how-to-clean-log-file" rel="external nofollow noopener noreferrer" target="_blank">How to clean log file? - Unix &amp; Linux Stack Exchange</a></p>
</li>
<li><p><a href="https://unix.stackexchange.com/questions/88808/empty-the-contents-of-a-file" rel="external nofollow noopener noreferrer" target="_blank">shell script - Empty the contents of a file - Unix &amp; Linux Stack Exchange</a></p>
</li>
<li><p><a href="http://himichaelchu.iteye.com/blog/2116023" rel="external nofollow noopener noreferrer" target="_blank">通过Inode原理分析Linux中ln命令 - Michael Chu - ITeye技术网站</a></p>
</li>
<li><p><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-hardandsymb-links/index.html" rel="external nofollow noopener noreferrer" target="_blank">理解 Linux 的硬链接与软链接</a></p>
</li>
<li><p><a href="https://superuser.com/questions/1112781/why-do-symbolic-links-in-prox-pid-fd-act-as-hard-links" rel="external nofollow noopener noreferrer" target="_blank">linux - why do symbolic links in /prox/$PID/fd/ act as hard links? - Super User</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;文件存储&quot;&gt;&lt;a href=&quot;#文件存储&quot; class=&quot;headerlink&quot; title=&quot;文件存储&quot;&gt;&lt;/a&gt;文件存储&lt;/h1&gt;&lt;img src=&quot;/2017/09/10/how-to-delete-file-correctly/inode.png&quot; alt
    
    </summary>
    
      <category term="linux" scheme="http://qsli.github.io/categories/linux/"/>
    
    
      <category term="lsof" scheme="http://qsli.github.io/tags/lsof/"/>
    
  </entry>
  
  <entry>
    <title>top用法</title>
    <link href="http://qsli.github.io/2017/09/09/top/"/>
    <id>http://qsli.github.io/2017/09/09/top/</id>
    <published>2017-09-09T09:31:18.000Z</published>
    <updated>2017-09-10T04:22:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>top是了解系统状况最常用的命令，从top的输出我们可以很好的掌握系统的CPU, 内存，swap，进程的相关信息。</p>
<p>下面说下top的基本用法：</p>
<p><br><br></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[qisheng.li@xxx /home/www/xxx]$ sudo top</div><div class="line"></div><div class="line">top - 15:19:54 up 200 days,  4:06,  1 user,  load average: 5.91, 6.14, 5.57</div><div class="line">Tasks: 499 total,   1 running, 498 sleeping,   0 stopped,   0 zombie</div><div class="line">Cpu(s): 20.1%us,  1.2%sy,  0.0%ni, 78.4%id,  0.0%wa,  0.0%hi,  0.4%si,  0.0%st</div><div class="line">Mem:  65979844k total, 65004736k used,   975108k free,     8108k buffers</div><div class="line">Swap: 50331644k total,    29364k used, 50302280k free,  5530672k cached</div><div class="line"></div><div class="line">  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                                            </div><div class="line"> 8468 tomcat    20   0 71.2g  55g 6484 S 492.3 87.8  32033:12 java                                                                              </div><div class="line"> 1256 tomcat    20   0 6055m 251m 2504 S 24.9  0.4  41886:22 java                                                                               </div><div class="line"> 2446 root      20   0 15304 1568  928 R  0.7  0.0   0:00.11 top                                                                                </div><div class="line">30593 root      20   0  526m  31m 3208 S  0.3  0.0   0:15.41 salt-minion                                                                        </div><div class="line">    1 root      20   0 19232  632  384 S  0.0  0.0  11:49.23 init                                                                               </div><div class="line">    2 root      20   0     0    0    0 S  0.0  0.0   0:00.32 kthreadd                                                                           </div><div class="line">    3 root      RT   0     0    0    0 S  0.0  0.0   2:55.22 migration/0                                                                        </div><div class="line">    4 root      20   0     0    0    0 S  0.0  0.0   5:49.74 ksoftirqd/0                                                                        </div><div class="line">    5 root      RT   0     0    0    0 S  0.0  0.0   0:00.00 stopper/0</div></pre></td></tr></table></figure>
<h3 id="系统概况"><a href="#系统概况" class="headerlink" title="系统概况"></a>系统概况</h3><p> 从输出的第一行来看， 首先是系统的uptime信息(使用<code>uptime</code>也可以查看)， 可以看到系统已经运行了200天了，是在<code>15：19：54</code>这个时间点启动起来的， <code>4：06</code> 是当前的时间， 当前只有一个用户登录(使用<code>w</code>也可以查看当前的登录用户)。 还有就是系统的负载——load average，这个有三个值，分别是1分钟的平均负载， 5分钟的， 15分钟的（<code>uptime</code>的输出信息中也有这个）。</p>
<p> 第二行包含了系统进程的一些统计信息，Tasks是运行队列中的任务个数（Linux run-queue）， 还有一些其他状态的进程的个数信息</p>
<blockquote>
<ul>
<li><p><strong>running</strong>:  CPU 上运行的和将要被调度运行的；</p>
</li>
<li><p><strong>sleeping</strong>: 通常是等待事件(比如 IO 操作)完成的任务，细分可以包括 interruptible 和 uninterruptible 的类型；</p>
</li>
<li><p><strong>stopped</strong>: 是一些被暂停的任务，通常发送 SIGSTOP 或者对一个前台任务操作 Ctrl-Z 可以将其暂停；</p>
</li>
<li><p><strong>zombie</strong>: 僵尸任务，虽然进程终止资源会被自动回收，但是含有退出任务的 task descriptor 需要父进程访问后才能释放，这种进程显示为 <code>defunct</code> 状态，无论是因为父进程提前退出还是未 wait 调用，出现这种进程都应该格外注意程序是否设计有误。</p>
</li>
</ul>
</blockquote>
<h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><p> 第三行是CPU的一些信息，各个部分的占用都很明确。</p>
<blockquote>
<ul>
<li><p>(us) user：CPU 在低 nice 值(高优先级)用户态所占用的时间(nice&lt;=0)。正常情况下只要服务器不是很闲，那么大部分的 CPU 时间应该都在此执行这类程序</p>
</li>
<li><p>(sy) system：CPU 处于内核态所占用的时间，操作系统通过系统调用(system call)从用户态陷入内核态，以执行特定的服务；通常情况下该值会比较小，但是当服务器执行的 IO 比较密集的时候，该值会比较大</p>
</li>
<li><p>(ni) nice：CPU 在高 nice 值(低优先级)用户态以低优先级运行占用的时间(nice&gt;0)。默认新启动的进程 nice=0，是不会计入这里的，除非手动通过 renice 或者 setpriority() 的方式修改程序的nice值</p>
</li>
<li><p>(id) idle：CPU 在空闲状态(执行 kernel idle handler )所占用的时间</p>
</li>
<li><p>(wa) iowait：等待 IO 完成做占用的时间</p>
</li>
<li><p>(hi) irq：系统处理硬件中断所消耗的时间</p>
</li>
<li><p>(si) softirq：系统处理软中断所消耗的时间，记住软中断分为 softirqs、tasklets (其实是前者的特例)、work queues，不知道这里是统计的是哪些的时间，毕竟 work queues 的执行已经不是中断上下文了</p>
</li>
<li><p>(st) steal：在虚拟机情况下才有意义，因为虚拟机下 CPU 也是共享物理 CPU 的，所以这段时间表明虚拟机等待 hypervisor 调度 CPU 的时间，也意味着这段时间 hypervisor 将 CPU 调度给别的 CPU 执行，这个时段的 CPU 资源被“stolen”了。这个值在我 KVM 的 VPS 机器上是不为 0 的，但也只有 0.1 这个数量级，是不是可以用来判断 VPS 超售的情况？</p>
</li>
</ul>
</blockquote>
<p>iowait所包含的信息其实是非常少的，具体的解释可以看<strong>参考3</strong>中的文章，讲的非常好.</p>
<blockquote>
<p>%iowait 表示在一个采样周期内有百分之几的时间属于以下情况：CPU空闲、并且有仍未完成的I/O请求</p>
</blockquote>
<h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p>第四行主要是内存使用的相关信息， 系统的内存总共有<code>65979844k</code>， 已经使用<code>65004736k</code>, <code>975108k</code>可用， <code>8108k</code>缓存, </p>
<p>65979844k = 65004736k + 975108k</p>
<p>可见缓存的也包含在可用的内存中。</p>
<p>这些信息也可以通过<code>free -k</code> （还可以-m, -g 表示展示的单位），<code>free</code>的输出如下:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[qisheng.li@xxx /home/www/xxx]$ free -k</div><div class="line">             total       used       free     shared    buffers     cached</div><div class="line">Mem:      65979844   64863960    1115884        112       8824    5331160</div><div class="line">-/+ buffers/cache:   59523976    6455868 </div><div class="line">Swap:     50331644      29364   50302280</div></pre></td></tr></table></figure>
<p><code>vmstat</code> 也可以看到系统的内存状况：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[qisheng.li@xxx /home/www/xxx]$ vmstat 1 3 | column -t</div><div class="line">procs  -----------memory----------  ---swap--  -----io----  --system--  -----cpu-----</div><div class="line">r      b                            swpd       free         buff        cache          si  so  bi   bo   <span class="keyword">in</span>     cs     us  sy  id  wa  st</div><div class="line">5      1                            29364      2231704      8808        4214104        0   0   124  230  0      0      15  1   84  0   0</div><div class="line">6      0                            29364      2219016      8908        4225260        0   0   668  132  47040  68271  25  2   72  0   0</div><div class="line">5      0                            29364      2209552      8916        4234020        0   0   512  12   37178  52578  20  2   78  0   0</div></pre></td></tr></table></figure>
<p>第五行和第四行类似，输出的是swap的使用情况。</p>
<h3 id="进程的详细信息"><a href="#进程的详细信息" class="headerlink" title="进程的详细信息"></a>进程的详细信息</h3><blockquote>
<p>PID：进程的ID<br>USER：进程所有者<br>PR：进程的优先级别，越小越优先被执行<br>NI：nice值<br>VIRT：进程占用的虚拟内存<br>RES：进程占用的物理内存<br>SHR：进程使用的共享内存<br>S：进程的状态。S表示休眠，R表示正在运行，Z表示僵死状态，N表示该进程优先值为负数<br>%CPU：进程占用CPU的使用率<br>%MEM：进程使用的物理内存和总内存的百分比<br>TIME+：该进程启动后占用的总的CPU时间，即占用CPU使用时间的累加值。<br>COMMAND：进程启动命令名称</p>
</blockquote>
<h2 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h2><h3 id="交互命令"><a href="#交互命令" class="headerlink" title="交互命令"></a>交互命令</h3><ul>
<li><p>按照CPU占用排序： 交互模式下输入： <code>P</code></p>
</li>
<li><p>按照内存排序： 交互模式下输入： <code>M</code></p>
</li>
<li><p>杀死进程： 交互模式下输入: <code>k</code>, 然后根据提示输入相应的<code>pid</code></p>
</li>
<li><p>更改刷新时间： 交互模式下输入: <code>d</code>或者<code>s</code>, 然后输入相应的刷新值</p>
</li>
<li><p>显示CPU的每个核的使用情况： 交互模式下输入： 键盘上的<code>1</code></p>
</li>
</ul>
<p>top的显示界面会展开：</p>
<img src="/2017/09/09/top/cpu.png" alt="cpu.png" title="">
<ul>
<li>高亮模式： 交互模式下输入: ‘z’</li>
</ul>
<img src="/2017/09/09/top/highlight.png" alt="highlight.png" title="">
<ul>
<li>高亮当前的排序列(需要在z模式下)： 交互模式下输入: ‘x’</li>
</ul>
<img src="/2017/09/09/top/highlight-sort.png" alt="highlight-sort.png" title="">
<ul>
<li><p>改变排序列： 交互模式下按<code>shift</code> + <code>&lt;</code>或<code>&gt;</code></p>
</li>
<li><p>增加显示的Field： 交互模式下按<code>f</code>, 然后选择想要展示的列</p>
</li>
</ul>
<img src="/2017/09/09/top/fields.png" alt="fields.png" title="">
<ul>
<li><p>显示到线程级别： 交互模式下按<code>H</code></p>
</li>
<li><p>显示完整的命令名称: 交互模式下按<code>c</code></p>
</li>
<li><p>分类显示各种系统资源高的进程： 交互模式下按<code>A</code></p>
</li>
</ul>
<img src="/2017/09/09/top/top-a.png" alt="top-a.png" title="">
<h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><ul>
<li>显示某个进程的线程信息</li>
</ul>
<p><code>top -p &lt;PID&gt; -H</code></p>
<p>其中 <code>-H</code>是指显示线程的信息，可以看到每个线程的CPU占用情况</p>

<ul>
<li>显示完整的命令： <code>-c</code></li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><p><a href="http://kumu-linux.github.io/blog/2013/06/07/top-hacks/" rel="external nofollow noopener noreferrer" target="_blank">top实践小技巧 - OPS Notes By 枯木</a></p>
</li>
<li><p><a href="http://mp.weixin.qq.com/s?__biz=MzAxMzQ3NzQ3Nw==&amp;mid=2654249787&amp;idx=2&amp;sn=7aa8e765fda84d5fa26580c210585c53&amp;chksm=8061f031b716792776833370019a9fc4c79fa40ea7db5b4ccb165b90919056acaffd3d971d94&amp;mpshare=1&amp;scene=1&amp;srcid=0801QspCI2Xo04BsZlP6pCVb##" rel="external nofollow noopener noreferrer" target="_blank">Linux服务器的那些性能参数指标</a></p>
</li>
<li><p><a href="http://linuxperf.com/?p=33" rel="external nofollow noopener noreferrer" target="_blank">理解 %iowait (%wio) | Linux Performance</a></p>
</li>
<li><p><a href="http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/top.html" rel="external nofollow noopener noreferrer" target="_blank">8. top linux下的任务管理器 — Linux Tools Quick Tutorial</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h1&gt;&lt;h2 id=&quot;基本用法&quot;&gt;&lt;a href=&quot;#基本用法&quot; class=&quot;headerlink&quot; title=&quot;基本用法&quot;&gt;&lt;/a&gt;基本用法&lt;/h
    
    </summary>
    
      <category term="linux" scheme="http://qsli.github.io/categories/linux/"/>
    
    
      <category term="top" scheme="http://qsli.github.io/tags/top/"/>
    
  </entry>
  
  <entry>
    <title>jvm-flag</title>
    <link href="http://qsli.github.io/2017/06/03/jvm-flag/"/>
    <id>http://qsli.github.io/2017/06/03/jvm-flag/</id>
    <published>2017-06-02T17:29:51.000Z</published>
    <updated>2017-08-13T14:17:13.142Z</updated>
    
    <content type="html"><![CDATA[<p>jinfo</p>
<p>-Xss</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;jinfo&lt;/p&gt;
&lt;p&gt;-Xss&lt;/p&gt;

    
    </summary>
    
      <category term="java" scheme="http://qsli.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>maven-scope</title>
    <link href="http://qsli.github.io/2017/06/01/maven-scope/"/>
    <id>http://qsli.github.io/2017/06/01/maven-scope/</id>
    <published>2017-05-31T16:42:54.000Z</published>
    <updated>2017-05-31T16:42:54.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="scope-作用"><a href="#scope-作用" class="headerlink" title="scope 作用"></a>scope 作用</h2><blockquote>
<p>Dependency scope is used to limit the transitivity of a dependency, and also to affect the classpath used for various build tasks.</p>
</blockquote>
<p>主要是限制依赖的传递性，比如有些jar包只会在测试的时候才会有效，部署的时候不会生效。</p>
<p>scope的分类：</p>
<table>
<thead>
<tr>
<th>scope</th>
<th>生效时机</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>compiled</td>
<td>编译/测试/运行</td>
<td>默认</td>
</tr>
<tr>
<td>provided</td>
<td>编译/测试</td>
<td>servlet-api 由tomcat等容器提供</td>
</tr>
<tr>
<td>runtime</td>
<td>运行</td>
<td>编译的时候只需要，JDBC API， 运行的时候必须要有JDBC驱动实现</td>
</tr>
<tr>
<td>test</td>
<td>测试的时候才引入</td>
<td>junit 只在测试的时候生效</td>
</tr>
<tr>
<td>system</td>
<td>编译/测试</td>
<td>必须显式的提供jar的本地文件系统路径</td>
</tr>
<tr>
<td>import</td>
<td>只支持<code>dependencyManagement</code>元素下的type是pom的节点</td>
<td>only available in Maven 2.0.9 or later</td>
</tr>
</tbody>
</table>
<h3 id="import-scope"><a href="#import-scope" class="headerlink" title="import scope"></a>import scope</h3><p>使用方</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.air<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>haha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;com.air.haha.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div></pre></td></tr></table></figure>
<p>com.air.haha的声明</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.air<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>haha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>haha<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>test<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>a<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>test<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>b<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<p>使用方在使用的时候就可以不用指定，haha中包含的依赖的版本，默认就会使用haha中声明的版本。这样在升级的时候，可以保证依赖一同的升级。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html" rel="external nofollow noopener noreferrer" target="_blank">Maven – Introduction to the Dependency Mechanism</a></p>
</li>
<li><p>《Maven权威指南》—— 9.4 （项目依赖）</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;scope-作用&quot;&gt;&lt;a href=&quot;#scope-作用&quot; class=&quot;headerlink&quot; title=&quot;scope 作用&quot;&gt;&lt;/a&gt;scope 作用&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Dependency scope is used to limit
    
    </summary>
    
      <category term="java" scheme="http://qsli.github.io/categories/java/"/>
    
    
      <category term="maven" scheme="http://qsli.github.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>hexo迁移到ubuntu</title>
    <link href="http://qsli.github.io/2017/04/19/hexo-ubuntu/"/>
    <id>http://qsli.github.io/2017/04/19/hexo-ubuntu/</id>
    <published>2017-04-18T16:08:15.397Z</published>
    <updated>2017-04-18T16:08:15.397Z</updated>
    
    <content type="html"><![CDATA[<p>系统切换到ubuntu之后，使用的apt安装的node，默认权限是sudo。安装hexo之后也必须以sudo身份执行。<br>需要修改下node的权限，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  qsli.github.com (hexo|✚1…)  npm config get prefix</div><div class="line">/usr/local</div></pre></td></tr></table></figure>
<p>修改owner</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chown -R $(whoami) $(npm config get prefix)/&#123;lib/node_modules,bin,share&#125;</div></pre></td></tr></table></figure>
<p>修改owner之后就可以正常执行hexo了。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://docs.npmjs.com/getting-started/fixing-npm-permissions" rel="external nofollow noopener noreferrer" target="_blank">03 - Fixing npm permissions | npm Documentation</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;系统切换到ubuntu之后，使用的apt安装的node，默认权限是sudo。安装hexo之后也必须以sudo身份执行。&lt;br&gt;需要修改下node的权限，命令如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
    
    </summary>
    
      <category term="hexo" scheme="http://qsli.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://qsli.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>web.xml</title>
    <link href="http://qsli.github.io/2017/04/16/web-xml/"/>
    <id>http://qsli.github.io/2017/04/16/web-xml/</id>
    <published>2017-04-16T12:04:59.114Z</published>
    <updated>2017-04-16T12:04:59.114Z</updated>
    
    <content type="html"><![CDATA[<h2 id="load-on-startup标签"><a href="#load-on-startup标签" class="headerlink" title="load-on-startup标签"></a>load-on-startup标签</h2><blockquote>
<p>Servlets are initialized either lazily at request processing time or eagerly during<br>deployment. In the latter case, they are initialized in the order indicated by<br>their load-on-startup elements.</p>
</blockquote>
<p>在web容器启动的时候，可以采用<code>lazily</code>加载的方式和<code>eagerly</code>的方式。</p>
<p><code>load-on-startup</code>中的值决定了进行哪种方式。</p>
<blockquote>
<p>If the value is a negative integer, or the element is not present, the<br>container is free to load the servlet whenever it chooses. If the value is a positive<br>integer or 0, the container must load and initialize the servlet as the application is<br>deployed.</p>
</blockquote>
<p>如果<load-on-startup>这个元素没有出现，或者出现了但是里面的值是负的，容器可以按照自己的需要选择加载Servlet的时机。</load-on-startup></p>
<p>如果里面的值是正数或者0，容器必须保证在容器启动的时候加载和初始化这个servlet</p>
<blockquote>
<p> The container must guarantee that servlets marked with lower integers<br>are loaded before servlets marked with higher integers.</p>
</blockquote>
<p>这个值越小，优先级越高，容器优先加载。</p>
<blockquote>
<p>The container may choose<br>the order of loading of servlets with the same load-on-startup value.</p>
</blockquote>
<p>如果里面的值是一样的，那么加载的顺序由容器来决定（不同实现可能不同）</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li>Java Servlet Specification 3.0</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;load-on-startup标签&quot;&gt;&lt;a href=&quot;#load-on-startup标签&quot; class=&quot;headerlink&quot; title=&quot;load-on-startup标签&quot;&gt;&lt;/a&gt;load-on-startup标签&lt;/h2&gt;&lt;blockquote&gt;

    
    </summary>
    
      <category term="tomcat" scheme="http://qsli.github.io/categories/tomcat/"/>
    
    
      <category term="servlet" scheme="http://qsli.github.io/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title>tomcat连接数相关的配置</title>
    <link href="http://qsli.github.io/2017/04/05/tomcat-connection/"/>
    <id>http://qsli.github.io/2017/04/05/tomcat-connection/</id>
    <published>2017-04-04T17:22:17.000Z</published>
    <updated>2017-04-16T12:03:23.409Z</updated>
    
    <content type="html"><![CDATA[<p><em>以下是tomcat7的一些配置说明</em></p>
<h1 id="tomcat交互图"><a href="#tomcat交互图" class="headerlink" title="tomcat交互图"></a>tomcat交互图</h1><img src="/2017/04/05/tomcat-connection/tomcat-interaction.jpg" alt="图片取自参考1" title="图片取自参考1">
<h2 id="maxConnections"><a href="#maxConnections" class="headerlink" title="maxConnections"></a>maxConnections</h2><p>tomcat接受的最大连接的个数，超过这个连接个数，acceptor就会阻塞。</p>
<blockquote>
<p>The maximum number of connections that the server will accept and process at any given time. When this number has been reached, the server will accept, but not process, one further connection. This additional connection be blocked until the number of connections being processed falls below maxConnections at which point the server will start accepting and processing new connections again. Note that once the limit has been reached, the operating system may still accept connections based on the acceptCount setting. The default value varies by connector type. For BIO the default is the value of maxThreads unless an Executor is used in which case the default will be the value of maxThreads from the executor. For NIO the default is 10000. For APR/native, the default is 8192.</p>
</blockquote>
<p>需要注意的是，在BIO模式下，<code>maxConnections</code>的值默认等于<code>maxThreads</code>的值!!!</p>
<p>达到maxConnections之后，acceptor线程就会阻塞，用jstack查看堆栈会发现Acceptor线程阻塞在下面的代码</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo -u tomcat jstack  `pgrep <span class="_">-f</span> <span class="string">'tomcat'</span>` | less</div></pre></td></tr></table></figure>
<p>tomcat  7的源码中相应的代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//if we have reached max connections, wait</span></div><div class="line">countUpOrAwaitConnection();</div></pre></td></tr></table></figure>
<p>函数的具体实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">countUpOrAwaitConnection</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">    <span class="keyword">if</span> (maxConnections==-<span class="number">1</span>) <span class="keyword">return</span>;</div><div class="line">    LimitLatch latch = connectionLimitLatch;</div><div class="line">    <span class="keyword">if</span> (latch!=<span class="keyword">null</span>) latch.countUpOrAwait();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中<code>LimitLatch</code>是tomcat自己实现的一个类似<code>CountDownLatch</code>的东西。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Shared latch that allows the latch to be acquired a limited number of times</div><div class="line"> * after which all subsequent requests to acquire the latch will be placed in a</div><div class="line"> * FIFO queue until one of the shares is returned.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LimitLatch</span> </span>&#123;...&#125;</div></pre></td></tr></table></figure>
<p>它的初始化过程：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> LimitLatch <span class="title">initializeConnectionLatch</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (maxConnections==-<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (connectionLimitLatch==<span class="keyword">null</span>) &#123;</div><div class="line">        connectionLimitLatch = <span class="keyword">new</span> LimitLatch(getMaxConnections());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> connectionLimitLatch;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="maxThreads"><a href="#maxThreads" class="headerlink" title="maxThreads"></a>maxThreads</h2><p>tomcat的连接线程最大个数。</p>
<blockquote>
<p>The maximum number of request processing threads to be created by this Connector, which therefore determines the maximum number of simultaneous requests that can be handled. If not specified, this attribute is set to 200. If an executor is associated with this connector, this attribute is ignored as the connector will execute tasks using the executor rather than an internal thread pool. Note that if an executor is configured any value set for this attribute will be recorded correctly but it will be reported (e.g. via JMX) as -1 to make clear that it is not used.</p>
<p>maxThreads、minSpareThreads是tomcat工作线程池的配置参数，maxThreads就相当于jdk线程池的maxPoolSize，而minSpareThreads就相当于jdk线程池的corePoolSize。</p>
</blockquote>
<p>相应的代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createExecutor</span><span class="params">()</span> </span>&#123;</div><div class="line">    internalExecutor = <span class="keyword">true</span>;</div><div class="line">    TaskQueue taskqueue = <span class="keyword">new</span> TaskQueue();</div><div class="line">    TaskThreadFactory tf = <span class="keyword">new</span> TaskThreadFactory(getName() + <span class="string">"-exec-"</span>, daemon, getThreadPriority());</div><div class="line">    executor = <span class="keyword">new</span> ThreadPoolExecutor(getMinSpareThreads(), getMaxThreads(), <span class="number">60</span>, TimeUnit.SECONDS,taskqueue, tf);</div><div class="line">    taskqueue.setParent( (ThreadPoolExecutor) executor);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="acceptCount"><a href="#acceptCount" class="headerlink" title="acceptCount"></a>acceptCount</h2><p>系统积压队列的大小。</p>
<blockquote>
<p>The maximum queue length for incoming connection requests when all possible request processing threads are in use. Any requests received when the queue is full will be refused. The default value is 100.</p>
</blockquote>
<p>tomcat7的源码中有这么一段，大概就是别名的替换。<code>acceptCount</code>被替换成了<code>backlog</code>，<code>backlog</code>的意思是积压的东西。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> &#123;</div><div class="line">    replacements.put(<span class="string">"acceptCount"</span>, <span class="string">"backlog"</span>);</div><div class="line">    replacements.put(<span class="string">"connectionLinger"</span>, <span class="string">"soLinger"</span>);</div><div class="line">    replacements.put(<span class="string">"connectionTimeout"</span>, <span class="string">"soTimeout"</span>);</div><div class="line">    replacements.put(<span class="string">"rootFile"</span>, <span class="string">"rootfile"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>acceptCount</code>是在初始<code>bind</code>的时候传给jdk的<code>bind</code>函数的，最终会传递到系统层。<br>以<code>NioEndpoint</code>为例，大概如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Initialize the endpoint.</div><div class="line">    */</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">       serverSock = ServerSocketChannel.open();</div><div class="line">       socketProperties.setProperties(serverSock.socket());</div><div class="line">       InetSocketAddress addr = (getAddress()!=<span class="keyword">null</span>?<span class="keyword">new</span> InetSocketAddress(getAddress(),getPort()):<span class="keyword">new</span> InetSocketAddress(getPort()));</div><div class="line">       serverSock.socket().bind(addr,getBacklog());</div><div class="line">       serverSock.configureBlocking(<span class="keyword">true</span>); <span class="comment">//mimic APR behavior</span></div><div class="line">       serverSock.socket().setSoTimeout(getSocketProperties().getSoTimeout());</div><div class="line"></div><div class="line">       <span class="comment">// Initialize thread count defaults for acceptor, poller</span></div><div class="line">       <span class="keyword">if</span> (acceptorThreadCount == <span class="number">0</span>) &#123;</div><div class="line">           <span class="comment">// <span class="doctag">FIXME:</span> Doesn't seem to work that well with multiple accept threads</span></div><div class="line">           acceptorThreadCount = <span class="number">1</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (pollerThreadCount &lt;= <span class="number">0</span>) &#123;</div><div class="line">           <span class="comment">//minimum one poller thread</span></div><div class="line">           pollerThreadCount = <span class="number">1</span>;</div><div class="line">       &#125;</div><div class="line">       stopLatch = <span class="keyword">new</span> CountDownLatch(pollerThreadCount);</div><div class="line"></div><div class="line">       <span class="comment">// Initialize SSL if needed</span></div><div class="line">       <span class="keyword">if</span> (isSSLEnabled()) &#123;</div><div class="line">          <span class="comment">//ssl stuff</span></div><div class="line">          <span class="comment">//...</span></div><div class="line">          <span class="comment">//...</span></div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (oomParachute&gt;<span class="number">0</span>) reclaimParachute(<span class="keyword">true</span>);</div><div class="line">       selectorPool.open();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>看下<code>getBackLog</code>的实现(<code>AbstractEndpoint</code>)：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Allows the server developer to specify the backlog that</div><div class="line"> * should be used for server sockets. By default, this value</div><div class="line"> * is 100.</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> backlog = <span class="number">100</span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBacklog</span><span class="params">(<span class="keyword">int</span> backlog)</span> </span>&#123; <span class="keyword">if</span> (backlog &gt; <span class="number">0</span>) <span class="keyword">this</span>.backlog = backlog; &#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBacklog</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> backlog; &#125;</div></pre></td></tr></table></figure>
<p>默认值大小是<code>100</code>。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>tomcat的<code>Acceptor</code>线程会不停的从系统的全连接队列里去拿对应的socket连接，直到达到了<code>maxConnections</code>的值。<br>之后<code>Acceptor</code>会阻塞在那里，直到处理的连接小于<code>maxConnections</code>的值。如果一直阻塞的话，就会在系统的tcp<br>连接队列中阻塞，这个队列的长度是<code>acceptCount</code>控制的，默认是<code>100</code>。如果仍然处理不过来，系统可能就会丢掉<br>一些建立的连接了。</p>
<p>所以，大致可以估计下最多能处理的连接数：</p>
<p><code>最大处理连接数 = acceptCount + maxConnection</code></p>
<p>#参考</p>
<ol>
<li><p><a href="https://segmentfault.com/a/1190000008064162" rel="external nofollow noopener noreferrer" target="_blank">tomcat的acceptCount与maxConnections - xixicat - SegmentFault</a></p>
</li>
<li><p><a href="https://tomcat.apache.org/tomcat-7.0-doc/config/http.html" rel="external nofollow noopener noreferrer" target="_blank">Apache Tomcat 7 Configuration Reference (7.0.77) - The HTTP Connector</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;以下是tomcat7的一些配置说明&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&quot;tomcat交互图&quot;&gt;&lt;a href=&quot;#tomcat交互图&quot; class=&quot;headerlink&quot; title=&quot;tomcat交互图&quot;&gt;&lt;/a&gt;tomcat交互图&lt;/h1&gt;&lt;img src=&quot;/
    
    </summary>
    
      <category term="tomcat" scheme="http://qsli.github.io/categories/tomcat/"/>
    
    
      <category term="connections" scheme="http://qsli.github.io/tags/connections/"/>
    
  </entry>
  
  <entry>
    <title>异步Servlet及Spring对其的支持</title>
    <link href="http://qsli.github.io/2017/02/28/servlet-async/"/>
    <id>http://qsli.github.io/2017/02/28/servlet-async/</id>
    <published>2017-02-27T17:47:22.000Z</published>
    <updated>2017-04-16T12:04:30.014Z</updated>
    
    <content type="html"><![CDATA[<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>限定 tomcat的连接池个数为50，并发为200（&gt;&gt; 线程池大小），时异步具有很大的优势。</p>
<p>如果并发量小于线程池大小，异步的反倒比同步的时间长了很久。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></div><div class="line">            <span class="attr">maxThreads</span>=<span class="string">"50"</span></div><div class="line">            <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></div><div class="line">            <span class="attr">redirectPort</span>=<span class="string">"8443"</span> <span class="attr">URIEncoding</span>=<span class="string">"UTF-8"</span>/&gt;</div></pre></td></tr></table></figure>
<p>完整的测试代码地址： <a href="https://github.com/qsLI/Java_Tutorial/blob/master/web/src/main/java/com/air/async/AsyncRequestProcessor.java" rel="external nofollow noopener noreferrer" target="_blank"></a></p>
<h3 id="async-ab测试"><a href="#async-ab测试" class="headerlink" title="async ab测试"></a>async ab测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">$ ab -n 10000 -c 200 http://localhost:8080/async</div><div class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;</div><div class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</div><div class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</div><div class="line"></div><div class="line">Benchmarking localhost (be patient)</div><div class="line">Completed 1000 requests</div><div class="line">Completed 2000 requests</div><div class="line">Completed 3000 requests</div><div class="line">Completed 4000 requests</div><div class="line">Completed 5000 requests</div><div class="line">Completed 6000 requests</div><div class="line">Completed 7000 requests</div><div class="line">Completed 8000 requests</div><div class="line">Completed 9000 requests</div><div class="line">Completed 10000 requests</div><div class="line">Finished 10000 requests</div><div class="line"></div><div class="line"></div><div class="line">Server Software:        Apache-Coyote/1.1</div><div class="line">Server Hostname:        localhost</div><div class="line">Server Port:            8080</div><div class="line"></div><div class="line">Document Path:          /async</div><div class="line">Document Length:        40 bytes</div><div class="line"></div><div class="line">Concurrency Level:      200</div><div class="line">Time taken for tests:   1000.284 seconds</div><div class="line">Complete requests:      10000</div><div class="line">Failed requests:        47</div><div class="line">   (Connect: 0, Receive: 0, Length: 47, Exceptions: 0)</div><div class="line">Write errors:           0</div><div class="line">Non-2xx responses:      47</div><div class="line">Total transferred:      1530740 bytes</div><div class="line">HTML transferred:       506980 bytes</div><div class="line">Requests per second:    10.00 [#/sec] (mean)</div><div class="line">Time per request:       20005.686 [ms] (mean)</div><div class="line">Time per request:       100.028 [ms] (mean, across all concurrent requests)</div><div class="line">Transfer rate:          1.49 [Kbytes/sec] received</div><div class="line"></div><div class="line">Connection Times (ms)</div><div class="line">              min  mean[+/-sd] median   max</div><div class="line">Connect:        0    0   5.0      0     501</div><div class="line">Processing:     2 19810 1683.3  20001   20560</div><div class="line">Waiting:        1 19810 1683.4  20000   20558</div><div class="line">Total:          2 19811 1683.0  20001   20560</div><div class="line"></div><div class="line">Percentage of the requests served within a certain time (ms)</div><div class="line">  50%  20001</div><div class="line">  66%  20001</div><div class="line">  75%  20002</div><div class="line">  80%  20002</div><div class="line">  90%  20004</div><div class="line">  95%  20009</div><div class="line">  98%  20020</div><div class="line">  99%  20035</div><div class="line"> 100%  20560 (longest request)</div></pre></td></tr></table></figure>
<p>测试过程中出的异常：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">一月 21, 2017 1:05:32 上午 org.apache.catalina.core.StandardWrapperValve invoke</div><div class="line">严重: Servlet.service() for servlet [com.air.async.AsyncServlet] in context with path [] threw exception</div><div class="line">java.util.concurrent.RejectedExecutionException: Task com.air.async.AsyncRequestProcessor@3caec762 rejected from java.util.concurrent.ThreadPoolExecutor@64db0f23[Running, pool size = 100, active threads = 100, queued tasks = 100, completed tasks = 9726]</div><div class="line">  at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2048)</div><div class="line">  at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:821)</div><div class="line">  at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1372)</div><div class="line">  at com.air.async.AsyncServlet.doGet(AsyncServlet.java:25)</div><div class="line">  at javax.servlet.http.HttpServlet.service(HttpServlet.java:621)</div><div class="line">  at javax.servlet.http.HttpServlet.service(HttpServlet.java:728)</div><div class="line">  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305)</div><div class="line">  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)</div><div class="line">  at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)</div><div class="line">  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)</div><div class="line">  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)</div><div class="line">  at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:222)</div><div class="line">  at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123)</div><div class="line">  at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)</div><div class="line">  at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171)</div><div class="line">  at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100)</div><div class="line">  at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:953)</div><div class="line">  at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)</div><div class="line">  at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408)</div><div class="line">  at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1041)</div><div class="line">  at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:603)</div><div class="line">  at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.doRun(AprEndpoint.java:2430)</div><div class="line">  at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run(AprEndpoint.java:2419)</div><div class="line">  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</div><div class="line">  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</div><div class="line">  at java.lang.Thread.run(Thread.java:745)</div></pre></td></tr></table></figure>
<p>有47个失败的case，是队列满了，然后丢掉了请求。</p>
<h3 id="sync-ab测试"><a href="#sync-ab测试" class="headerlink" title="sync ab测试"></a>sync ab测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">$ ab -n 10000 -c 200 http://localhost:8080/hello</div><div class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;</div><div class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</div><div class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</div><div class="line"></div><div class="line">Benchmarking localhost (be patient)</div><div class="line">Completed 1000 requests</div><div class="line">Completed 2000 requests</div><div class="line">Completed 3000 requests</div><div class="line">Completed 4000 requests</div><div class="line">Completed 5000 requests</div><div class="line">Completed 6000 requests</div><div class="line">Completed 7000 requests</div><div class="line">Completed 8000 requests</div><div class="line">Completed 9000 requests</div><div class="line">Completed 10000 requests</div><div class="line">Finished 10000 requests</div><div class="line"></div><div class="line"></div><div class="line">Server Software:        Apache-Coyote/1.1</div><div class="line">Server Hostname:        localhost</div><div class="line">Server Port:            8080</div><div class="line"></div><div class="line">Document Path:          /hello</div><div class="line">Document Length:        12 bytes</div><div class="line"></div><div class="line">Concurrency Level:      200</div><div class="line">Time taken for tests:   2002.151 seconds</div><div class="line">Complete requests:      10000</div><div class="line">Failed requests:        0</div><div class="line">Write errors:           0</div><div class="line">Total transferred:      1340000 bytes</div><div class="line">HTML transferred:       120000 bytes</div><div class="line">Requests per second:    4.99 [#/sec] (mean)</div><div class="line">Time per request:       40043.028 [ms] (mean)</div><div class="line">Time per request:       200.215 [ms] (mean, across all concurrent requests)</div><div class="line">Transfer rate:          0.65 [Kbytes/sec] received</div><div class="line"></div><div class="line">Connection Times (ms)</div><div class="line">              min  mean[+/-sd] median   max</div><div class="line">Connect:        0    0   0.4      0       8</div><div class="line">Processing: 10002 39740 2686.3  40005   50319</div><div class="line">Waiting:    10002 39740 2686.4  40004   50319</div><div class="line">Total:      10002 39741 2686.3  40005   50319</div><div class="line"></div><div class="line">Percentage of the requests served within a certain time (ms)</div><div class="line">  50%  40005</div><div class="line">  66%  40009</div><div class="line">  75%  40014</div><div class="line">  80%  40022</div><div class="line">  90%  40122</div><div class="line">  95%  40316</div><div class="line">  98%  40449</div><div class="line">  99%  40483</div><div class="line"> 100%  50319 (longest request)</div></pre></td></tr></table></figure>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>异步的servle在高并发的情况下可以使用较少的连接线程实现较大的吞吐。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Puts this request into asynchronous mode, and initializes its</div><div class="line">    * &#123;<span class="doctag">@link</span> AsyncContext&#125; with the original (unwrapped) ServletRequest</div><div class="line">    * and ServletResponse objects.</div><div class="line">    *</div><div class="line">    * &lt;p&gt;Calling this method will cause committal of the associated</div><div class="line">    * response to be delayed until &#123;<span class="doctag">@link</span> AsyncContext#complete&#125; is</div><div class="line">    * called on the returned &#123;<span class="doctag">@link</span> AsyncContext&#125;, or the asynchronous</div><div class="line">    * operation has timed out.</div><div class="line">    *</div><div class="line">    * &lt;p&gt;Calling &#123;<span class="doctag">@link</span> AsyncContext#hasOriginalRequestAndResponse()&#125; on</div><div class="line">    * the returned AsyncContext will return &lt;code&gt;true&lt;/code&gt;. Any filters</div><div class="line">    * invoked in the &lt;i&gt;outbound&lt;/i&gt; direction after this request was put</div><div class="line">    * into asynchronous mode may use this as an indication that any request</div><div class="line">    * and/or response wrappers that they added during their &lt;i&gt;inbound&lt;/i&gt;</div><div class="line">    * invocation need not stay around for the duration of the asynchronous</div><div class="line">    * operation, and therefore any of their associated resources may be</div><div class="line">    * released.</div><div class="line">    *</div><div class="line">    * &lt;p&gt;This method clears the list of &#123;<span class="doctag">@link</span> AsyncListener&#125; instances</div><div class="line">    * (if any) that were registered with the AsyncContext returned by the</div><div class="line">    * previous call to one of the startAsync methods, after calling each</div><div class="line">    * AsyncListener at its &#123;<span class="doctag">@link</span> AsyncListener#onStartAsync onStartAsync&#125;</div><div class="line">    * method.</div><div class="line">    *</div><div class="line">    * &lt;p&gt;Subsequent invocations of this method, or its overloaded </div><div class="line">    * variant, will return the same AsyncContext instance, reinitialized</div><div class="line">    * as appropriate.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@return</span> the (re)initialized AsyncContext</div><div class="line">    * </div><div class="line">    * <span class="doctag">@throws</span> IllegalStateException if this request is within the scope of</div><div class="line">    * a filter or servlet that does not support asynchronous operations</div><div class="line">    * (that is, &#123;<span class="doctag">@link</span> #isAsyncSupported&#125; returns false),</div><div class="line">    * or if this method is called again without any asynchronous dispatch</div><div class="line">    * (resulting from one of the &#123;<span class="doctag">@link</span> AsyncContext#dispatch&#125; methods),</div><div class="line">    * is called outside the scope of any such dispatch, or is called again</div><div class="line">    * within the scope of the same dispatch, or if the response has</div><div class="line">    * already been closed</div><div class="line">    *</div><div class="line">    * <span class="doctag">@see</span> AsyncContext#dispatch()</div><div class="line">    * <span class="doctag">@since</span> Servlet 3.0</div><div class="line">    */</div><div class="line">       <span class="function"><span class="keyword">public</span> AsyncContext <span class="title">startAsync</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException</span>;</div></pre></td></tr></table></figure>
<p>//挖坑，待填</p>
<h2 id="Spring-对异步Servlet的支持"><a href="#Spring-对异步Servlet的支持" class="headerlink" title="Spring 对异步Servlet的支持"></a>Spring 对异步Servlet的支持</h2><p>web.xml中需要的配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--spring encoding filter--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--servlet--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></div><div class="line">            classpath:spring/mvc/mvc-app.xml</div><div class="line">        <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果有filter的话也必须配置上异步的支持</p>
<h3 id="Callable-方式"><a href="#Callable-方式" class="headerlink" title="Callable 方式"></a>Callable 方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/async"</span>)</div><div class="line"><span class="meta">@PostMapping</span></div><div class="line"><span class="function"><span class="keyword">public</span> Callable&lt;String&gt; <span class="title">asyncProcess</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Callable&lt;String&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"index"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种方式返回一个<code>Callable</code>，Spring在线程池中执行<code>Callable</code>并获取到结果然后进行后续的处理。</p>
<p>TaskExecutor 自定义线程池：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- ================================== --&gt;</span>  </div><div class="line"><span class="comment">&lt;!-- 0. Set up task executor for async  --&gt;</span></div><div class="line"><span class="comment">&lt;!-- ================================== --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">mvc:async-support</span> <span class="attr">default-timeout</span>=<span class="string">"30000"</span> <span class="attr">task-executor</span>=<span class="string">"taskExecutor"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- modify the parameters of thread pool --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"taskExecutor"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"corePoolSize"</span> <span class="attr">value</span>=<span class="string">"5"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"50"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"queueCapacity"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keepAliveSeconds"</span> <span class="attr">value</span>=<span class="string">"120"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="DeferredResult-方式"><a href="#DeferredResult-方式" class="headerlink" title="DeferredResult 方式"></a>DeferredResult 方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/asyncV2"</span>)</div><div class="line">   <span class="function"><span class="keyword">public</span> DeferredResult&lt;String&gt; <span class="title">aysncProcess2</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">final</span> DeferredResult&lt;String&gt; stringDeferredResult = <span class="keyword">new</span> DeferredResult&lt;&gt;();</div><div class="line">       MoreExecutors.directExecutor().execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">               <span class="keyword">try</span> &#123;</div><div class="line">                   Thread.sleep(<span class="number">30000</span>);</div><div class="line">                   stringDeferredResult.setResult(<span class="string">"index"</span>);</div><div class="line">               &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                   stringDeferredResult.setErrorResult(<span class="string">"error"</span>);</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line">       <span class="keyword">return</span> stringDeferredResult;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>这种方式返回的是<code>DeferredResult</code>，计算的逻辑可以在业务线程池中计算，当计算完成后，</p>
<p>直接向<code>DeferredResult</code>中set数据即可，会触发后续的处理，并返回给客户端。</p>
<h3 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h3><p><code>RequestMappingHandlerAdapter</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   * Invoke the &#123;<span class="doctag">@link</span> RequestMapping&#125; handler method preparing a &#123;<span class="doctag">@link</span> ModelAndView&#125;</div><div class="line">   * if view resolution is required.</div><div class="line">   * <span class="doctag">@since</span> 4.2</div><div class="line">   * <span class="doctag">@see</span> #createInvocableHandlerMethod(HandlerMethod)</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">invokeHandlerMethod</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">      HttpServletResponse response, HandlerMethod handlerMethod) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">    ServletWebRequest webRequest = <span class="keyword">new</span> ServletWebRequest(request, response);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      WebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);</div><div class="line">      ModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);</div><div class="line"></div><div class="line">      ServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);</div><div class="line">      invocableMethod.setHandlerMethodArgumentResolvers(<span class="keyword">this</span>.argumentResolvers);</div><div class="line">      invocableMethod.setHandlerMethodReturnValueHandlers(<span class="keyword">this</span>.returnValueHandlers);</div><div class="line">      invocableMethod.setDataBinderFactory(binderFactory);</div><div class="line">      invocableMethod.setParameterNameDiscoverer(<span class="keyword">this</span>.parameterNameDiscoverer);</div><div class="line"></div><div class="line">      ModelAndViewContainer mavContainer = <span class="keyword">new</span> ModelAndViewContainer();</div><div class="line">      mavContainer.addAllAttributes(RequestContextUtils.getInputFlashMap(request));</div><div class="line">      modelFactory.initModel(webRequest, mavContainer, invocableMethod);</div><div class="line">      mavContainer.setIgnoreDefaultModelOnRedirect(<span class="keyword">this</span>.ignoreDefaultModelOnRedirect);</div><div class="line"></div><div class="line">      <span class="comment">//创建异步请求</span></div><div class="line">      AsyncWebRequest asyncWebRequest = WebAsyncUtils.createAsyncWebRequest(request, response);</div><div class="line">      asyncWebRequest.setTimeout(<span class="keyword">this</span>.asyncRequestTimeout);</div><div class="line"></div><div class="line">      <span class="comment">//下面的代码设置了Callable执行的线程池，以及拦截器还有DeferredResult的拦截器</span></div><div class="line">      WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</div><div class="line">      asyncManager.setTaskExecutor(<span class="keyword">this</span>.taskExecutor);</div><div class="line">      asyncManager.setAsyncWebRequest(asyncWebRequest);</div><div class="line">      asyncManager.registerCallableInterceptors(<span class="keyword">this</span>.callableInterceptors);</div><div class="line">      asyncManager.registerDeferredResultInterceptors(<span class="keyword">this</span>.deferredResultInterceptors);</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (asyncManager.hasConcurrentResult()) &#123;</div><div class="line">        Object result = asyncManager.getConcurrentResult();</div><div class="line">        mavContainer = (ModelAndViewContainer) asyncManager.getConcurrentResultContext()[<span class="number">0</span>];</div><div class="line">        asyncManager.clearConcurrentResult();</div><div class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">          logger.debug(<span class="string">"Found concurrent result value ["</span> + result + <span class="string">"]"</span>);</div><div class="line">        &#125;</div><div class="line">        invocableMethod = invocableMethod.wrapConcurrentResult(result);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      invocableMethod.invokeAndHandle(webRequest, mavContainer);</div><div class="line">      <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">finally</span> &#123;</div><div class="line">      webRequest.requestCompleted();</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h4 id="Callable-的处理"><a href="#Callable-的处理" class="headerlink" title="Callable 的处理"></a>Callable 的处理</h4><p><code>Callable</code>的处理是在<code>CallableMethodReturnValueHandler</code>中的，这个接口最终继承了<code>HandlerMethodReturnValueHandler</code>, 也就是对Controller方法返回值的后处理。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableMethodReturnValueHandler</span> <span class="keyword">implements</span> <span class="title">AsyncHandlerMethodReturnValueHandler</span> </span>&#123;</div><div class="line">  <span class="comment">//省略...</span></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleReturnValue</span><span class="params">(Object returnValue, MethodParameter returnType,</span></span></div><div class="line">      ModelAndViewContainer mavContainer, NativeWebRequest webRequest) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (returnValue == <span class="keyword">null</span>) &#123;</div><div class="line">      mavContainer.setRequestHandled(<span class="keyword">true</span>);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Callable&lt;?&gt; callable = (Callable&lt;?&gt;) returnValue;</div><div class="line">    WebAsyncUtils.getAsyncManager(webRequest).startCallableProcessing(callable, mavContainer);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终是调用了<code>WebAsyncManager</code>的<code>startCallableProcessing</code>进行处理</p>
<p><code>WebAsyncManager</code>中的关键代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startCallableProcessing</span><span class="params">(Callable&lt;?&gt; callable, Object... processingContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    Assert.notNull(callable, <span class="string">"Callable must not be null"</span>);</div><div class="line">    startCallableProcessing(<span class="keyword">new</span> WebAsyncTask(callable), processingContext);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startCallableProcessing</span><span class="params">(<span class="keyword">final</span> WebAsyncTask&lt;?&gt; webAsyncTask, Object... processingContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    Assert.notNull(webAsyncTask, <span class="string">"WebAsyncTask must not be null"</span>);</div><div class="line">    Assert.state(<span class="keyword">this</span>.asyncWebRequest != <span class="keyword">null</span>, <span class="string">"AsyncWebRequest must not be null"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//超时</span></div><div class="line">    Long timeout = webAsyncTask.getTimeout();</div><div class="line">    <span class="keyword">if</span> (timeout != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">this</span>.asyncWebRequest.setTimeout(timeout);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//线程池</span></div><div class="line">    AsyncTaskExecutor executor = webAsyncTask.getExecutor();</div><div class="line">    <span class="keyword">if</span> (executor != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">this</span>.taskExecutor = executor;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//拦截器</span></div><div class="line">    List&lt;CallableProcessingInterceptor&gt; interceptors = <span class="keyword">new</span> ArrayList&lt;CallableProcessingInterceptor&gt;();</div><div class="line">    interceptors.add(webAsyncTask.getInterceptor());</div><div class="line">    interceptors.addAll(<span class="keyword">this</span>.callableInterceptors.values());</div><div class="line">    interceptors.add(timeoutCallableInterceptor);</div><div class="line"></div><div class="line">    <span class="keyword">final</span> Callable&lt;?&gt; callable = webAsyncTask.getCallable();</div><div class="line">    <span class="keyword">final</span> CallableInterceptorChain interceptorChain = <span class="keyword">new</span> CallableInterceptorChain(interceptors);</div><div class="line"></div><div class="line">    <span class="comment">//超时处理</span></div><div class="line">    <span class="keyword">this</span>.asyncWebRequest.addTimeoutHandler(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        logger.debug(<span class="string">"Processing timeout"</span>);</div><div class="line">        Object result = interceptorChain.triggerAfterTimeout(asyncWebRequest, callable);</div><div class="line">        <span class="keyword">if</span> (result != CallableProcessingInterceptor.RESULT_NONE) &#123;</div><div class="line">          setConcurrentResultAndDispatch(result);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">//成功的回调，会触发拦截器的拦截</span></div><div class="line">    <span class="keyword">this</span>.asyncWebRequest.addCompletionHandler(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        interceptorChain.triggerAfterCompletion(asyncWebRequest, callable);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">//拦截</span></div><div class="line">    interceptorChain.applyBeforeConcurrentHandling(<span class="keyword">this</span>.asyncWebRequest, callable);</div><div class="line">    startAsyncProcessing(processingContext);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="keyword">this</span>.taskExecutor.submit(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">          Object result = <span class="keyword">null</span>;</div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//拦截</span></div><div class="line">            interceptorChain.applyPreProcess(asyncWebRequest, callable);</div><div class="line">            result = callable.call();</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">            result = ex;</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="comment">//拦截</span></div><div class="line">            result = interceptorChain.applyPostProcess(asyncWebRequest, callable, result);</div><div class="line">          &#125;</div><div class="line">          setConcurrentResultAndDispatch(result);</div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (RejectedExecutionException ex) &#123;</div><div class="line">      Object result = interceptorChain.applyPostProcess(<span class="keyword">this</span>.asyncWebRequest, callable, ex);</div><div class="line">      setConcurrentResultAndDispatch(result);</div><div class="line">      <span class="keyword">throw</span> ex;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h4 id="DeferredResult-的处理"><a href="#DeferredResult-的处理" class="headerlink" title="DeferredResult 的处理"></a>DeferredResult 的处理</h4><p>DeferredResult的返回时机就是有数据的时候，顺藤摸瓜:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setResult</span><span class="params">(T result)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> setResultInternal(result);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">setResultInternal</span><span class="params">(Object result)</span> </span>&#123;</div><div class="line">    <span class="comment">// Immediate expiration check outside of the result lock</span></div><div class="line">    <span class="keyword">if</span> (isSetOrExpired()) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    DeferredResultHandler resultHandlerToUse;</div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">      <span class="comment">// Got the lock in the meantime: double-check expiration status</span></div><div class="line">      <span class="keyword">if</span> (isSetOrExpired()) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// At this point, we got a new result to process</span></div><div class="line">      <span class="keyword">this</span>.result = result;</div><div class="line">      resultHandlerToUse = <span class="keyword">this</span>.resultHandler;</div><div class="line">      <span class="keyword">if</span> (resultHandlerToUse == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// No result handler set yet -&gt; let the setResultHandler implementation</span></div><div class="line">        <span class="comment">// pick up the result object and invoke the result handler for it.</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// Result handler available -&gt; let's clear the stored reference since</span></div><div class="line">      <span class="comment">// we don't need it anymore.</span></div><div class="line">      <span class="keyword">this</span>.resultHandler = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// If we get here, we need to process an existing result object immediately.</span></div><div class="line">    <span class="comment">// The decision is made within the result lock; just the handle call outside</span></div><div class="line">    <span class="comment">// of it, avoiding any deadlock potential with Servlet container locks.</span></div><div class="line">    resultHandlerToUse.handleResult(result);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p><code>DeferredResultHandler</code>是什么鬼？我们new的时候没有设置啊？？其实这个也是由<code>HandlerMethodReturnValueHandler</code>来实现的，有个对应的<code>DeferredResultMethodReturnValueHandler</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleReturnValue</span><span class="params">(Object returnValue, MethodParameter returnType,</span></span></div><div class="line">    ModelAndViewContainer mavContainer, NativeWebRequest webRequest) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (returnValue == <span class="keyword">null</span>) &#123;</div><div class="line">    mavContainer.setRequestHandled(<span class="keyword">true</span>);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  DeferredResultAdapter adapter = getAdapterFor(returnValue.getClass());</div><div class="line">  Assert.notNull(adapter);</div><div class="line">  DeferredResult&lt;?&gt; result = adapter.adaptToDeferredResult(returnValue);</div><div class="line">  WebAsyncUtils.getAsyncManager(webRequest).startDeferredResultProcessing(result, mavContainer);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终还是到了<code>WebAsyncManager</code>的处理方法中，和<code>Callable</code>的处理类似，不一一深入。</p>
<p>值得一提的是，正是在这个<code>startDeferredResultProcessing</code>中塞入了一个<code>DeferredResultHandler</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">      interceptorChain.applyPreProcess(<span class="keyword">this</span>.asyncWebRequest, deferredResult);</div><div class="line">      deferredResult.setResultHandler(<span class="keyword">new</span> DeferredResultHandler() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleResult</span><span class="params">(Object result)</span> </span>&#123;</div><div class="line">          result = interceptorChain.applyPostProcess(asyncWebRequest, deferredResult, result);</div><div class="line">          setConcurrentResultAndDispatch(result);</div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">      setConcurrentResultAndDispatch(ex);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>因为我们是异步执行的，所以虽然handler的注入在后面，其实影响也不大，而且<code>setResult</code>中也做了判断。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://www.journaldev.com/2008/async-servlet-feature-of-servlet-3" rel="external nofollow noopener noreferrer" target="_blank">Async Servlet Feature of Servlet 3 - JournalDev</a></p>
</li>
<li><p><a href="https://docs.oracle.com/javaee/7/tutorial/servlets012.htm" rel="external nofollow noopener noreferrer" target="_blank">17.12 Asynchronous Processing - Java Platform, Enterprise Edition: The Java EE Tutorial (Release 7)</a></p>
</li>
<li><p><a href="https://httpd.apache.org/docs/2.4/programs/ab.html" rel="external nofollow noopener noreferrer" target="_blank">ab - Apache HTTP server benchmarking tool - Apache HTTP Server Version 2.4</a></p>
</li>
<li><p><a href="http://www.ha97.com/5095.html" rel="external nofollow noopener noreferrer" target="_blank">系统吞吐量（TPS）、用户并发量、性能测试概念和公式</a></p>
</li>
<li><p><a href="https://lanjingling.github.io/2016/01/20/servlet3-new-furture/" rel="external nofollow noopener noreferrer" target="_blank">servlet3新特性——异步请求处理 | 晓的技术博客</a></p>
</li>
<li><p><a href="http://blog.csdn.net/wzy_1988/article/details/38922449" rel="external nofollow noopener noreferrer" target="_blank">解决java.util.concurrent.RejectedExecutionException - 小一的专栏 - 博客频道 - CSDN.NET</a></p>
</li>
<li><p><a href="http://www.lai18.com/content/2483896.html" rel="external nofollow noopener noreferrer" target="_blank">Springmvc异步支持报错- - Lai18.com IT技术文章收藏夹</a></p>
</li>
<li><p><a href="http://shengwangi.blogspot.hk/2015/09/asynchronous-spring-mvc-hello-world.html" rel="external nofollow noopener noreferrer" target="_blank">Asynchronous Spring MVC – Hello World Example | Code Breeze !</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h2&gt;&lt;p&gt;限定 tomcat的连接池个数为50，并发为200（&amp;gt;&amp;gt; 线程池大小），时异步具有很大的优势。&lt;/p&gt;
&lt;p&gt;如果并发量小于线程
    
    </summary>
    
      <category term="spring" scheme="http://qsli.github.io/categories/spring/"/>
    
    
      <category term="servlet" scheme="http://qsli.github.io/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title>cygwin执行命令非常慢</title>
    <link href="http://qsli.github.io/2017/02/20/cygwin-360/"/>
    <id>http://qsli.github.io/2017/02/20/cygwin-360/</id>
    <published>2017-02-19T16:30:03.000Z</published>
    <updated>2017-04-16T12:03:23.389Z</updated>
    
    <content type="html"><![CDATA[<p>cygwin在windows上提供了一套类似linux的开发环境，用起来还是挺爽的。</p>
<p>但是一直困扰我的一个问题是，太慢！具体现象就是使用<code>ls</code>都得等半天才出结果。</p>
<p>看网上的资料说cygwin确实慢，再加上我用了<code>oh-my-zsh</code>，更是慢上加慢。</p>
<h2 id="可能的原因"><a href="#可能的原因" class="headerlink" title="可能的原因"></a>可能的原因</h2><p>貌似360对这些工具程序的调用都会做一个拦截，判断下是否有风险。</p>
<p>于是干脆把360给卸载了，终于<code>ls</code>的速度变得可以接受。。。。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://www.it1352.com/321952.html" rel="external nofollow noopener noreferrer" target="_blank">为什么Cygwin的执行shell命令很慢？ - IT屋-程序员软件开发技术分享社区</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;cygwin在windows上提供了一套类似linux的开发环境，用起来还是挺爽的。&lt;/p&gt;
&lt;p&gt;但是一直困扰我的一个问题是，太慢！具体现象就是使用&lt;code&gt;ls&lt;/code&gt;都得等半天才出结果。&lt;/p&gt;
&lt;p&gt;看网上的资料说cygwin确实慢，再加上我用了&lt;code&gt;
    
    </summary>
    
      <category term="linux" scheme="http://qsli.github.io/categories/linux/"/>
    
    
      <category term="cygwin" scheme="http://qsli.github.io/tags/cygwin/"/>
    
  </entry>
  
</feed>
