<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KL&#39;s blog</title>
  
  <subtitle>世事洞明皆学问，人情练达即文章</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://qsli.github.io/"/>
  <updated>2021-03-18T12:31:01.290Z</updated>
  <id>http://qsli.github.io/</id>
  
  <author>
    <name>Kevin Leo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mybatis源码解析（一）</title>
    <link href="http://qsli.github.io/2021/03/18/mybatis-detail-01/"/>
    <id>http://qsli.github.io/2021/03/18/mybatis-detail-01/</id>
    <published>2021-03-18T12:31:01.000Z</published>
    <updated>2021-03-18T12:31:01.290Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础组件"><a href="#基础组件" class="headerlink" title="基础组件"></a>基础组件</h1><img src="/2021/03/18/mybatis-detail-01/image-20210318200117139.png"><h2 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h2><p>SqlSession是mybatis面向用户的一个类，使用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> (Reader reader = Resources.getResourceAsReader(<span class="string">"mybatis-config.xml"</span>)) &#123;</span><br><span class="line">    <span class="comment">//创建SqlSessionFactory</span></span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">    <span class="comment">//获取SqlSession</span></span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">//执行Sql</span></span><br><span class="line">    <span class="keyword">final</span> List&lt;Object&gt; selectAll = sqlSession.selectList(<span class="string">"selectAll"</span>, <span class="keyword">null</span>, <span class="keyword">new</span> RowBounds(<span class="number">10</span>,<span class="number">20</span>));</span><br><span class="line">    System.out.println(<span class="string">"selectAll = "</span> + selectAll);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SqlSession</code>创建过程:</p><img src="/2021/03/18/mybatis-detail-01/spring-tx-SqlSession.jpg"><p>执行过程：</p><img src="/2021/03/18/mybatis-detail-01/spring-tx-selectList-6069717.jpg"><h2 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h2><p>这一层提供的接口主要是针对<code>MappedStatement</code>的:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Clinton Begin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  ResultHandler NO_RESULT_HANDLER = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(MappedStatement ms, Object parameter)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey cacheKey, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  &lt;E&gt; <span class="function">Cursor&lt;E&gt; <span class="title">queryCursor</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">List&lt;BatchResult&gt; <span class="title">flushStatements</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">(<span class="keyword">boolean</span> required)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">(<span class="keyword">boolean</span> required)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">CacheKey <span class="title">createCacheKey</span><span class="params">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, BoundSql boundSql)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isCached</span><span class="params">(MappedStatement ms, CacheKey key)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">clearLocalCache</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">deferLoad</span><span class="params">(MappedStatement ms, MetaObject resultObject, String property, CacheKey key, Class&lt;?&gt; targetType)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Transaction <span class="title">getTransaction</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">(<span class="keyword">boolean</span> forceRollback)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isClosed</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setExecutorWrapper</span><span class="params">(Executor executor)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/03/18/mybatis-detail-01/image-20210318154049840.png"><h3 id="结果缓存"><a href="#结果缓存" class="headerlink" title="结果缓存"></a>结果缓存</h3><img src="/2021/03/18/mybatis-detail-01/20141123125616381.png"><p>在创建Session的时候，可以指定使用哪种executor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.ibatis.session.Configuration#newExecutor(org.apache.ibatis.transaction.Transaction, org.apache.ibatis.session.ExecutorType)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Executor <span class="title">newExecutor</span><span class="params">(Transaction transaction, ExecutorType executorType)</span> </span>&#123;</span><br><span class="line">  executorType = executorType == <span class="keyword">null</span> ? defaultExecutorType : executorType;</span><br><span class="line">  executorType = executorType == <span class="keyword">null</span> ? ExecutorType.SIMPLE : executorType;</span><br><span class="line">  Executor executor;</span><br><span class="line">  <span class="keyword">if</span> (ExecutorType.BATCH == executorType) &#123;</span><br><span class="line">    executor = <span class="keyword">new</span> BatchExecutor(<span class="keyword">this</span>, transaction);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ExecutorType.REUSE == executorType) &#123;</span><br><span class="line">    <span class="comment">// 缓存PreparedStatement</span></span><br><span class="line">    executor = <span class="keyword">new</span> ReuseExecutor(<span class="keyword">this</span>, transaction);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    executor = <span class="keyword">new</span> SimpleExecutor(<span class="keyword">this</span>, transaction);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果开启了二级缓存，就用CachingExecutor装饰下</span></span><br><span class="line">  <span class="keyword">if</span> (cacheEnabled) &#123;</span><br><span class="line">    executor = <span class="keyword">new</span> CachingExecutor(executor);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 插件机制，后面会详细讲</span></span><br><span class="line">  executor = (Executor) interceptorChain.pluginAll(executor);</span><br><span class="line">  <span class="keyword">return</span> executor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Session级别的缓存（一级缓存）"><a href="#Session级别的缓存（一级缓存）" class="headerlink" title="Session级别的缓存（一级缓存）"></a>Session级别的缓存（一级缓存）</h4><p><strong>一级缓存默认打开</strong></p><blockquote><p>MyBatis的一级缓存最大范围是SqlSession内部，有多个SqlSession或者分布式的环境下，<strong>数据库写操作会引起脏数据</strong>，建议设定缓存级别为Statement。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configuration.setLocalCacheScope(LocalCacheScope.valueOf(props.getProperty(<span class="string">"localCacheScope"</span>, <span class="string">"SESSION"</span>)));</span><br></pre></td></tr></table></figure><p>没有配置默认就是session级别的，配置示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"localCacheScope"</span> <span class="attr">value</span>=<span class="string">"SESSION"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>Executor是跟session绑定的，所以这个缓存是session级别的，也就是连接级别的。连接关闭之后，这个缓存也就消失了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.ibatis.executor.BaseExecutor#query(org.apache.ibatis.mapping.MappedStatement, java.lang.Object, org.apache.ibatis.session.RowBounds, org.apache.ibatis.session.ResultHandler)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  BoundSql boundSql = ms.getBoundSql(parameter);</span><br><span class="line">  CacheKey key = createCacheKey(ms, parameter, rowBounds, boundSql);</span><br><span class="line">  <span class="keyword">return</span> query(ms, parameter, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// org.apache.ibatis.executor.BaseExecutor#query(org.apache.ibatis.mapping.MappedStatement, java.lang.Object, org.apache.ibatis.session.RowBounds, org.apache.ibatis.session.ResultHandler, org.apache.ibatis.cache.CacheKey, org.apache.ibatis.mapping.BoundSql)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  ErrorContext.instance().resource(ms.getResource()).activity(<span class="string">"executing a query"</span>).object(ms.getId());</span><br><span class="line">  <span class="keyword">if</span> (closed) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ExecutorException(<span class="string">"Executor was closed."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (queryStack == <span class="number">0</span> &amp;&amp; ms.isFlushCacheRequired()) &#123;</span><br><span class="line">    clearLocalCache();</span><br><span class="line">  &#125;</span><br><span class="line">  List&lt;E&gt; list;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    queryStack++;</span><br><span class="line">    <span class="comment">// 从缓存中取</span></span><br><span class="line">    list = resultHandler == <span class="keyword">null</span> ? (List&lt;E&gt;) localCache.getObject(key) : <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (list != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 处理缓存的结果</span></span><br><span class="line">      handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    queryStack--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (queryStack == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (DeferredLoad deferredLoad : deferredLoads) &#123;</span><br><span class="line">      deferredLoad.load();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// issue #601</span></span><br><span class="line">    deferredLoads.clear();</span><br><span class="line">    <span class="keyword">if</span> (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) &#123;</span><br><span class="line">      <span class="comment">// issue #482</span></span><br><span class="line">      clearLocalCache();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.apache.ibatis.executor.BaseExecutor#queryFromDatabase</span></span><br><span class="line"><span class="keyword">private</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">queryFromDatabase</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  List&lt;E&gt; list;</span><br><span class="line">  <span class="comment">// 占位</span></span><br><span class="line">  localCache.putObject(key, EXECUTION_PLACEHOLDER);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 清空缓存</span></span><br><span class="line">    localCache.removeObject(key);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 更新缓存</span></span><br><span class="line">  localCache.putObject(key, list);</span><br><span class="line">  <span class="keyword">if</span> (ms.getStatementType() == StatementType.CALLABLE) &#123;</span><br><span class="line">    localOutputParameterCache.putObject(key, parameter);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Statement级别的缓存（二级缓存）"><a href="#Statement级别的缓存（二级缓存）" class="headerlink" title="Statement级别的缓存（二级缓存）"></a>Statement级别的缓存（二级缓存）</h4><p><code>CachingExecutor</code>加了一层<code>Statement</code>级别的缓存，其他的逻辑都是委托给其他的Executor来实现的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.ibatis.executor.CachingExecutor#query(org.apache.ibatis.mapping.MappedStatement, java.lang.Object, org.apache.ibatis.session.RowBounds, org.apache.ibatis.session.ResultHandler, org.apache.ibatis.cache.CacheKey, org.apache.ibatis.mapping.BoundSql)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  <span class="comment">// statement 级别的cache，可以在配置文件中开启</span></span><br><span class="line">  Cache cache = ms.getCache();</span><br><span class="line">  <span class="keyword">if</span> (cache != <span class="keyword">null</span>) &#123;</span><br><span class="line">    flushCacheIfRequired(ms);</span><br><span class="line">    <span class="keyword">if</span> (ms.isUseCache() &amp;&amp; resultHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">      ensureNoOutParams(ms, boundSql);</span><br><span class="line">      <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">      List&lt;E&gt; list = (List&lt;E&gt;) tcm.getObject(cache, key);</span><br><span class="line">      <span class="comment">// 缓存未命中</span></span><br><span class="line">      <span class="keyword">if</span> (list == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 委托给底层进行查询</span></span><br><span class="line">        list = delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">        <span class="comment">// 加入缓存</span></span><br><span class="line">        tcm.putObject(cache, key, list); <span class="comment">// issue #578 and #116</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 未开启缓存，直接委托给底层的实现</span></span><br><span class="line">  <span class="keyword">return</span> delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际处理类的逻辑:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.ibatis.executor.SimpleExecutor#doQuery</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">doQuery</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Configuration configuration = ms.getConfiguration();</span><br><span class="line">    <span class="comment">// 创建StatementHandler</span></span><br><span class="line">    StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">    <span class="comment">// 把配置的一些属性，传递个对应的Statement, 比如fetchSize， timeout等</span></span><br><span class="line">    stmt = prepareStatement(handler, ms.getStatementLog());</span><br><span class="line">    <span class="comment">// 委托StatementHandler查询</span></span><br><span class="line">    <span class="keyword">return</span> handler.query(stmt, resultHandler);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    closeStatement(stmt);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cache的实现使用了装饰者模式：</p><blockquote><p>SynchronizedCache -&gt; LoggingCache -&gt; SerializedCache -&gt; LruCache -&gt; PerpetualCache</p><p>以下是具体这些Cache实现类的介绍，他们的组合为Cache赋予了不同的能力。</p><ul><li><code>SynchronizedCache</code>：同步Cache，实现比较简单，直接使用synchronized修饰方法。</li><li><code>LoggingCache</code>：日志功能，装饰类，用于记录缓存的命中率，如果开启了DEBUG模式，则会输出命中率日志。</li><li><code>SerializedCache</code>：序列化功能，将值序列化后存到缓存中。该功能用于缓存返回一份实例的Copy，用于保存线程安全。</li><li><code>LruCache</code>：采用了Lru算法的Cache实现，移除最近最少使用的Key/Value。</li><li><code>PerpetualCache</code>： 作为为最基础的缓存类，底层实现比较简单，直接使用了HashMap。</li></ul></blockquote><p>二级缓存跨session存在，有很大的风险会读到错误的数据。而且大部分的互联网应用都是分布式的，一般不共享状态，可以水平扩展；但是本地缓存打破了无状态下，很有可能会读到错误的数据，应该慎重使用。</p><h3 id="PreparedStatement缓存（PSCache）"><a href="#PreparedStatement缓存（PSCache）" class="headerlink" title="PreparedStatement缓存（PSCache）"></a>PreparedStatement缓存（PSCache）</h3><p>又叫<code>PSCache</code>，这里对应的是<code>ReuseExecutor</code>，这个缓存也是Session级别的。除了在Mybatis这一层做缓存，还可以在MySQL驱动和MysqlServer做缓存，参见<a href="https://qsli.github.io/2020/05/05/cache-prep-stmts/#cachePrepStmts%E5%92%8CuseServerPrepStmts%E5%90%8C%E6%97%B6%E6%89%93%E5%BC%80">jdbc预编译缓存加速sql执行 | KL’s blog</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.ibatis.executor.ReuseExecutor#prepareStatement</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Statement <span class="title">prepareStatement</span><span class="params">(StatementHandler handler, Log statementLog)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  Statement stmt;</span><br><span class="line">  BoundSql boundSql = handler.getBoundSql();</span><br><span class="line">  String sql = boundSql.getSql();</span><br><span class="line">  <span class="keyword">if</span> (hasStatementFor(sql)) &#123;</span><br><span class="line">    <span class="comment">// 从缓存中取</span></span><br><span class="line">    stmt = getStatement(sql);</span><br><span class="line">    applyTransactionTimeout(stmt);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Connection connection = getConnection(statementLog);</span><br><span class="line">    stmt = handler.prepare(connection, transaction.getTimeout());</span><br><span class="line">    putStatement(sql, stmt);</span><br><span class="line">  &#125;</span><br><span class="line">  handler.parameterize(stmt);</span><br><span class="line">  <span class="keyword">return</span> stmt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// private final Map&lt;String, Statement&gt; statementMap = new HashMap&lt;String, Statement&gt;();</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">hasStatementFor</span><span class="params">(String sql)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> statementMap.keySet().contains(sql) &amp;&amp; !statementMap.get(sql).getConnection().isClosed();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Statement <span class="title">getStatement</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> statementMap.get(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">putStatement</span><span class="params">(String sql, Statement stmt)</span> </span>&#123;</span><br><span class="line">  statementMap.put(sql, stmt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="StatementHandler"><a href="#StatementHandler" class="headerlink" title="StatementHandler"></a>StatementHandler</h2><p><code>StatementHandler</code>主要是跟<code>javax</code>里<code>的Statement</code>打交道的，相当于对<code>Statement</code>的操作进行了一层封装，也是<code>mybatis</code>和<code>jdbc</code>的一个隔离层。</p><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Clinton Begin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StatementHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">Statement <span class="title">prepare</span><span class="params">(Connection connection, Integer transactionTimeout)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">parameterize</span><span class="params">(Statement statement)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">batch</span><span class="params">(Statement statement)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(Statement statement)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(Statement statement, ResultHandler resultHandler)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  &lt;E&gt; <span class="function">Cursor&lt;E&gt; <span class="title">queryCursor</span><span class="params">(Statement statement)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">BoundSql <span class="title">getBoundSql</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">ParameterHandler <span class="title">getParameterHandler</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，接口中的参数，都是<code>Statement</code>而不是<code>mybatis</code>自己的<code>MappedStatement</code></p><p>继承关系：</p><img src="/2021/03/18/mybatis-detail-01/image-20210318153611468.png"><p>其中<code>RoutingStatementHandler</code>就是用来路由的，根据查询的类型路由到<code>SimpleStatementHandler</code>、<code>CallableStatementHandler</code>、<code>PreparedStatementHandler</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RoutingStatementHandler</span><span class="params">(Executor executor, MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (ms.getStatementType()) &#123;</span><br><span class="line">    <span class="keyword">case</span> STATEMENT:</span><br><span class="line">      delegate = <span class="keyword">new</span> SimpleStatementHandler(executor, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> PREPARED:</span><br><span class="line">      delegate = <span class="keyword">new</span> PreparedStatementHandler(executor, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> CALLABLE:</span><br><span class="line">      delegate = <span class="keyword">new</span> CallableStatementHandler(executor, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ExecutorException(<span class="string">"Unknown statement type: "</span> + ms.getStatementType());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TypeHandler"><a href="#TypeHandler" class="headerlink" title="TypeHandler"></a>TypeHandler</h2><p><code>TypeHandler</code>主要负责类型转换，类似spring的<code>ConversionService</code>, 主要用于两个地方，一个是设置<code>PrepareStatement</code>，占位符对应的参数；一个是将ResultSet返回的结果集转换成对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Clinton Begin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TypeHandler</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setParameter</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i, T parameter, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">getResult</span><span class="params">(ResultSet rs, String columnName)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">getResult</span><span class="params">(ResultSet rs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">getResult</span><span class="params">(CallableStatement cs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ParameterHandler"><a href="#ParameterHandler" class="headerlink" title="ParameterHandler"></a>ParameterHandler</h4><p>比如数据库里面存的是<code>VARCHAR</code>，传给mybatis的是一个<code>Bean</code>对象，就可以在这一层做一个转换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i, T parameter, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// Bean -&gt; json string</span></span><br><span class="line">    ps.setString(i, ObjectUtil.toJson(parameter));</span><br><span class="line">  &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认实现<code>org.apache.ibatis.scripting.defaults.DefaultParameterHandler</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.ibatis.scripting.defaults.DefaultParameterHandler#setParameters</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParameters</span><span class="params">(PreparedStatement ps)</span> </span>&#123;</span><br><span class="line">  ErrorContext.instance().activity(<span class="string">"setting parameters"</span>).object(mappedStatement.getParameterMap().getId());</span><br><span class="line">  List&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings();</span><br><span class="line">  <span class="keyword">if</span> (parameterMappings != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameterMappings.size(); i++) &#123;</span><br><span class="line">      ParameterMapping parameterMapping = parameterMappings.get(i);</span><br><span class="line">      <span class="keyword">if</span> (parameterMapping.getMode() != ParameterMode.OUT) &#123;</span><br><span class="line">        Object value;</span><br><span class="line">        String propertyName = parameterMapping.getProperty();</span><br><span class="line">        <span class="keyword">if</span> (boundSql.hasAdditionalParameter(propertyName)) &#123; <span class="comment">// issue #448 ask first for additional params</span></span><br><span class="line">          value = boundSql.getAdditionalParameter(propertyName);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (parameterObject == <span class="keyword">null</span>) &#123;</span><br><span class="line">          value = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) &#123;</span><br><span class="line">          value = parameterObject;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          MetaObject metaObject = configuration.newMetaObject(parameterObject);</span><br><span class="line">          value = metaObject.getValue(propertyName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 拿到参数对应的TypeHandler，通过&lt;JavaType, JDBC Type&gt; --&gt; TypeHandler， 解析的时候就确定了</span></span><br><span class="line">        TypeHandler typeHandler = parameterMapping.getTypeHandler();</span><br><span class="line">        JdbcType jdbcType = parameterMapping.getJdbcType();</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span> &amp;&amp; jdbcType == <span class="keyword">null</span>) &#123;</span><br><span class="line">          jdbcType = configuration.getJdbcTypeForNull();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 使用typeHandler做类型转换</span></span><br><span class="line">          typeHandler.setParameter(ps, i + <span class="number">1</span>, value, jdbcType);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TypeException e) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> TypeException(<span class="string">"Could not set parameters for mapping: "</span> + parameterMapping + <span class="string">". Cause: "</span> + e, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> TypeException(<span class="string">"Could not set parameters for mapping: "</span> + parameterMapping + <span class="string">". Cause: "</span> + e, e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ResultSetHandler"><a href="#ResultSetHandler" class="headerlink" title="ResultSetHandler"></a>ResultSetHandler</h4><p>用于转换<code>JDBC</code>返回的<code>ResultSet</code>对象为<code>Statement</code>中定义的返回值类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Clinton Begin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 处理批量</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResultSetHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">handleResultSets</span><span class="params">(Statement stmt)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  &lt;E&gt; <span class="function">Cursor&lt;E&gt; <span class="title">handleCursorResultSets</span><span class="params">(Statement stmt)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">handleOutputParameters</span><span class="params">(CallableStatement cs)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Clinton Begin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 处理单个</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResultHandler</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">handleResult</span><span class="params">(ResultContext&lt;? extends T&gt; resultContext)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.ibatis.executor.resultset.DefaultResultSetHandler#handleResultSet</span></span><br><span class="line"><span class="comment">// for循环中调用</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleResultSet</span><span class="params">(ResultSetWrapper rsw, ResultMap resultMap, List&lt;Object&gt; multipleResults, ResultMapping parentMapping)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (parentMapping != <span class="keyword">null</span>) &#123;</span><br><span class="line">      handleRowValues(rsw, resultMap, <span class="keyword">null</span>, RowBounds.DEFAULT, parentMapping);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (resultHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 默认的ResultHandler</span></span><br><span class="line">        DefaultResultHandler defaultResultHandler = <span class="keyword">new</span> DefaultResultHandler(objectFactory);</span><br><span class="line">        handleRowValues(rsw, resultMap, defaultResultHandler, rowBounds, <span class="keyword">null</span>);</span><br><span class="line">        multipleResults.add(defaultResultHandler.getResultList());</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        handleRowValues(rsw, resultMap, resultHandler, rowBounds, <span class="keyword">null</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// issue #228 (close resultsets)</span></span><br><span class="line">    closeResultSet(rsw.getResultSet());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.apache.ibatis.executor.resultset.DefaultResultSetHandler#createUsingConstructor</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">createUsingConstructor</span><span class="params">(ResultSetWrapper rsw, Class&lt;?&gt; resultType, List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs, Constructor&lt;?&gt; constructor)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  <span class="keyword">boolean</span> foundValues = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; constructor.getParameterTypes().length; i++) &#123;</span><br><span class="line">    Class&lt;?&gt; parameterType = constructor.getParameterTypes()[i];</span><br><span class="line">    String columnName = rsw.getColumnNames().get(i);</span><br><span class="line">    <span class="comment">// 获取对应的TypeHandler</span></span><br><span class="line">    TypeHandler&lt;?&gt; typeHandler = rsw.getTypeHandler(parameterType, columnName);</span><br><span class="line">    <span class="comment">// 转换类型</span></span><br><span class="line">    Object value = typeHandler.getResult(rsw.getResultSet(), columnName);</span><br><span class="line">    constructorArgTypes.add(parameterType);</span><br><span class="line">    constructorArgs.add(value);</span><br><span class="line">    foundValues = value != <span class="keyword">null</span> || foundValues;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> foundValues ? objectFactory.create(resultType, constructorArgTypes, constructorArgs) : <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/luanlouis/article/details/41408341" rel="external nofollow noopener noreferrer" target="_blank">《深入理解mybatis原理》 MyBatis的二级缓存的设计原理_我的程序人生(亦山札记)-CSDN博客_mybatis二级缓存原理</a></li><li><a href="https://yq.aliyun.com/articles/608941" rel="external nofollow noopener noreferrer" target="_blank">你真的懂Mybatis缓存机制吗-云栖社区-阿里云</a></li><li><a href="https://tech.meituan.com/2018/01/19/mybatis-cache.html" rel="external nofollow noopener noreferrer" target="_blank">聊聊MyBatis缓存机制 - 美团技术团队</a></li><li><a href="https://mp.weixin.qq.com/s/Rac7SPZnujq73lb0tcQULA" rel="external nofollow noopener noreferrer" target="_blank">面试官问: MyBatis SQL是如何执行的？把这篇文章甩给他</a></li><li><a href="http://dengchengchao.com/?p=1190" rel="external nofollow noopener noreferrer" target="_blank">MyBatis 的秘密（二）Executor – 邓承超的个人日志</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基础组件&quot;&gt;&lt;a href=&quot;#基础组件&quot; class=&quot;headerlink&quot; title=&quot;基础组件&quot;&gt;&lt;/a&gt;基础组件&lt;/h1&gt;&lt;img src=&quot;/2021/03/18/mybatis-detail-01/image-20210318200117139.p
      
    
    </summary>
    
      <category term="mybatis" scheme="http://qsli.github.io/categories/mybatis/"/>
    
    
      <category term="mybatis" scheme="http://qsli.github.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>spring-aop</title>
    <link href="http://qsli.github.io/2021/03/10/spring-aop/"/>
    <id>http://qsli.github.io/2021/03/10/spring-aop/</id>
    <published>2021-03-09T17:19:43.000Z</published>
    <updated>2021-03-09T17:25:25.978Z</updated>
    
    <content type="html"><![CDATA[<p>Spring-Aop是spring提供的面向切面编程的工具，spring的好多功能也是基于切面来实现。切面编程可以将分散的逻辑集中在切面中，便于代码的维护。</p><h2 id="AOP使用"><a href="#AOP使用" class="headerlink" title="AOP使用"></a>AOP使用</h2><h3 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h3><p>配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 代故</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/7 1:18 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Foo <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Foo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PerformanceTraceAspect <span class="title">performanceTraceAspect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PerformanceTraceAspect();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><p>切面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 代故</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/5 5:24 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PerformanceTraceAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Pointcut</span>(<span class="string">"execution(public void *.hello1()) || execution(public void *.hello2())"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointCut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Around</span>(<span class="string">"pointCut()"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">tracePerformance</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">    Stopwatch stopwatch = Stopwatch.createStarted();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> proceedingJoinPoint.proceed();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      log.info(<span class="string">"&#123;&#125; total cost &#123;&#125; ms"</span>, proceedingJoinPoint.getSignature()</span><br><span class="line">               .getName(), stopwatch.elapsed(TimeUnit.MILLISECONDS));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 代故</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/5 5:28 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"hello1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"hello2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 代故</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/5 5:29 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(JUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Slf4j</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">AopTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 2021-03-05 17:36:05.406[main][INFO ]c.a.s.a.AopTest.testWeave:31 foo class is Foo$$EnhancerBySpringCGLIB$$a5169b75</span></span><br><span class="line"><span class="comment">    * 2021-03-05 17:36:05.854[main][INFO ]c.a.s.a.Foo.hello1:13 hello1</span></span><br><span class="line"><span class="comment">     * 2021-03-05 17:36:05.862[main][INFO ]c.a.s.a.PerformanceTraceAspect.tracePerformance:31 hello1 total cost 25 ms</span></span><br><span class="line"><span class="comment">     * 2021-03-05 17:36:05.863[main][INFO ]c.a.s.a.Foo.hello2:17 hello2</span></span><br><span class="line"><span class="comment">     * 2021-03-05 17:36:05.863[main][INFO ]c.a.s.a.PerformanceTraceAspect.tracePerformance:31 hello2 total cost 0 ms</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWeave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> AspectJProxyFactory aspectJProxyFactory = <span class="keyword">new</span> AspectJProxyFactory();</span><br><span class="line">        aspectJProxyFactory.setProxyTargetClass(<span class="keyword">true</span>);</span><br><span class="line">        aspectJProxyFactory.setTarget(<span class="keyword">new</span> Foo());</span><br><span class="line">        aspectJProxyFactory.addAspect(PerformanceTraceAspect<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Foo proxy = (Foo)aspectJProxyFactory.getProxy();</span><br><span class="line">        log.info(<span class="string">"foo class is &#123;&#125;"</span>, proxy.getClass().getSimpleName());</span><br><span class="line">        proxy.hello1();</span><br><span class="line">        proxy.hello2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2021-03-07 01:20:33.714[main][INFO ]o.s.c.a.AnnotationConfigApplicationContext.prepareRefresh:582 Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@e45f292: startup date [Sun Mar 07 01:20:33 CST 2021]; root of context hierarchy</span></span><br><span class="line"><span class="comment">     * 2021-03-07 01:20:35.859[main][INFO ]c.a.s.a.AopTest.testWithSpringContext:47 foo class is Foo$$EnhancerBySpringCGLIB$$2546ecd</span></span><br><span class="line"><span class="comment">     * 2021-03-07 01:20:35.094[main][INFO ]c.a.s.a.Foo.hello1:13 hello1</span></span><br><span class="line"><span class="comment">     * 2021-03-07 01:20:35.096[main][INFO ]c.a.s.a.PerformanceTraceAspect.tracePerformance:31 hello1 total cost 31 ms</span></span><br><span class="line"><span class="comment">     * 2021-03-07 01:20:35.100[main][INFO ]c.a.s.a.Foo.hello2:17 hello2</span></span><br><span class="line"><span class="comment">     * 2021-03-07 01:20:35.103[main][INFO ]c.a.s.a.PerformanceTraceAspect.tracePerformance:31 hello2 total cost 0 ms</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWithSpringContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(AopConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">final</span> Foo foo = context.getBean(Foo<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        log.info(<span class="string">"foo class is &#123;&#125;"</span>, foo.getClass().getSimpleName());</span><br><span class="line">        foo.hello1();</span><br><span class="line">        foo.hello2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置类上使用注解<code>@EnableAspectJAutoProxy</code>即可，从输出的日志中可以看到，拿到的类其实是CGLIB代理过的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2021-03-07 01:20:35.859[main][INFO ]c.a.s.a.AopTest.testWithSpringContext:47 foo class is Foo$<span class="variable">$EnhancerBySpringCGLIB</span>$<span class="variable">$2546ecd</span></span><br></pre></td></tr></table></figure><p>注解有两个属性：</p><ul><li><p>proxyTargetClass</p><p>默认是false， 如果是true会强制使用cglib代理（默认的对于接口的，是使用的JDK代理）</p><blockquote><p>Indicate whether subclass-based (CGLIB) proxies are to be created as opposed<br>to standard Java interface-based proxies. The default is {@code false}.</p></blockquote></li><li><p>ExposeProxy</p><p>默认是false，是否暴露代理类， 可以通过<code>org.springframework.aop.framework.AopContext</code>获取（ThreadLocal）</p><blockquote><p>Indicate that the proxy should be exposed by the AOP framework as a {@code ThreadLocal}<br>for retrieval via the {@link org.springframework.aop.framework.AopContext} class.<br>Off by default, i.e. no guarantees that {@code AopContext} access will work.</p></blockquote></li></ul><h3 id="xml方式"><a href="#xml方式" class="headerlink" title="xml方式"></a>xml方式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>除了配置方式不同，使用和注解的方式类似。xml方式也提供了类似的属性，和上面介绍的一致。</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="BeanPostProcess注册过程"><a href="#BeanPostProcess注册过程" class="headerlink" title="BeanPostProcess注册过程"></a>BeanPostProcess注册过程</h3><h4 id="注解方式-1"><a href="#注解方式-1" class="headerlink" title="注解方式"></a>注解方式</h4><p>注册过程：</p><img src="http://www.plantuml.com/plantuml/svg/TP51JiD034NtSufPmW8E42aeeR20HLKXSG0JdCfIQeyyhWeNW0L8x3X3zwoGa3XD2ySW4meY9TsDzErdFuyhee7QVDPuvqBxeee2iFbJXgi6onYmilDoRZ9HkRdjrsod5pYbQ0gwnIebZ8HhcbuQDR6V7IFm2TR4P2Iy8RHpyjntsKIYjV0AOnHTlonNTu-Vx_SVomU_Lmplk7v-NRqzxViyTswumXySxTuzypGBekRSRhtKttFAl7OXwayJinWafT_saIAOw5azncG3oR9FITpXUsJ-M_qFTW7wJsmpuh1g8BPtBf2lkv_z0W00"><h4 id="xml方式-1"><a href="#xml方式-1" class="headerlink" title="xml方式"></a>xml方式</h4><p>注册过程：</p><img src="http://www.plantuml.com/plantuml/svg/dPAnIWD148RxVOejjOWFS72I60kr28VW0moRkR2ojxlCJZ3f9HOAMWds5jTR2O9FSucFuTsPI7AvG4Yto-nyy___hEW61k9nPgGGlZnffJrObZtd1v1XyA3m0kpG83LV18-AhtfZTWcvoVGCmPvZggrcxMm2591sCszOcx1LxZkRwb5BRHD-ZICTcAP2nB6iQuaBNAfG68AZ-KTUp9v-lXyM-QCy0kSZgBNUTg0KwoknSfAP-UjdyVLyBEDOY3QxdTEzF4RoRrxnVhzucHLlUKdRewt6DmE99DNMa5O8Qnr3rVKFwnC2ExfC1rZPXIg6BT2IlfRdOUZcJZRlrPJspQn2MHjo1uJDO9O3JvI1KDAxQ8VrL_m5"><h4 id="AopConfigUtils"><a href="#AopConfigUtils" class="headerlink" title="AopConfigUtils"></a>AopConfigUtils</h4><p>核心代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The bean name of the internally managed auto-proxy creator.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTO_PROXY_CREATOR_BEAN_NAME =</span><br><span class="line">  <span class="string">"org.springframework.aop.config.internalAutoProxyCreator"</span>;</span><br><span class="line"><span class="comment">// org.springframework.aop.config.AopConfigUtils#registerOrEscalateApcAsRequired</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> BeanDefinition <span class="title">registerOrEscalateApcAsRequired</span><span class="params">(Class&lt;?&gt; cls, BeanDefinitionRegistry registry, Object source)</span> </span>&#123;</span><br><span class="line">  Assert.notNull(registry, <span class="string">"BeanDefinitionRegistry must not be null"</span>);</span><br><span class="line">  <span class="comment">// 如果已经有同名的注册过了</span></span><br><span class="line">  <span class="keyword">if</span> (registry.containsBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME)) &#123;</span><br><span class="line">    BeanDefinition apcDefinition = registry.getBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME);</span><br><span class="line">    <span class="comment">// 如果不是AnnotationAwareAspectJAutoProxyCreator.class</span></span><br><span class="line">    <span class="keyword">if</span> (!cls.getName().equals(apcDefinition.getBeanClassName())) &#123;</span><br><span class="line">      <span class="keyword">int</span> currentPriority = findPriorityForClass(apcDefinition.getBeanClassName());</span><br><span class="line">      <span class="keyword">int</span> requiredPriority = findPriorityForClass(cls);</span><br><span class="line">      <span class="comment">// 取优先级大的注册</span></span><br><span class="line">      <span class="keyword">if</span> (currentPriority &lt; requiredPriority) &#123;</span><br><span class="line">        apcDefinition.setBeanClassName(cls.getName());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 没有注册过，直接注册AnnotationAwareAspectJAutoProxyCreator.class</span></span><br><span class="line">  RootBeanDefinition beanDefinition = <span class="keyword">new</span> RootBeanDefinition(cls);</span><br><span class="line">  beanDefinition.setSource(source);</span><br><span class="line">  beanDefinition.getPropertyValues().add(<span class="string">"order"</span>, Ordered.HIGHEST_PRECEDENCE);</span><br><span class="line">  beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">  registry.registerBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME, beanDefinition);</span><br><span class="line">  <span class="keyword">return</span> beanDefinition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BeanPostProcessor处理逻辑"><a href="#BeanPostProcessor处理逻辑" class="headerlink" title="BeanPostProcessor处理逻辑"></a>BeanPostProcessor处理逻辑</h3><p>Spring-Aop是通过<code>BeanPostProcessor</code>来生成代理类，<code>BeanPostProcessor</code>可以在bean初始化之前和之后做一些修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Apply this BeanPostProcessor to the given new bean instance &lt;i&gt;before&lt;/i&gt; any bean</span></span><br><span class="line"><span class="comment"> * initialization callbacks (like InitializingBean's &lt;code&gt;afterPropertiesSet&lt;/code&gt;</span></span><br><span class="line"><span class="comment"> * or a custom init-method). The bean will already be populated with property values.</span></span><br><span class="line"><span class="comment"> * The returned bean instance may be a wrapper around the original.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bean the new bean instance</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beanName the name of the bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the bean instance to use, either the original or a wrapped one</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> org.springframework.beans.BeansException in case of errors</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.beans.factory.InitializingBean#afterPropertiesSet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Apply this BeanPostProcessor to the given new bean instance &lt;i&gt;after&lt;/i&gt; any bean</span></span><br><span class="line"><span class="comment"> * initialization callbacks (like InitializingBean's &#123;<span class="doctag">@code</span> afterPropertiesSet&#125;</span></span><br><span class="line"><span class="comment"> * or a custom init-method). The bean will already be populated with property values.</span></span><br><span class="line"><span class="comment"> * The returned bean instance may be a wrapper around the original.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;In case of a FactoryBean, this callback will be invoked for both the FactoryBean</span></span><br><span class="line"><span class="comment"> * instance and the objects created by the FactoryBean (as of Spring 2.0). The</span></span><br><span class="line"><span class="comment"> * post-processor can decide whether to apply to either the FactoryBean or created</span></span><br><span class="line"><span class="comment"> * objects or both through corresponding &#123;<span class="doctag">@code</span> bean instanceof FactoryBean&#125; checks.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This callback will also be invoked after a short-circuiting triggered by a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation&#125; method,</span></span><br><span class="line"><span class="comment"> * in contrast to all other BeanPostProcessor callbacks.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bean the new bean instance</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beanName the name of the bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the bean instance to use, either the original or a wrapped one;</span></span><br><span class="line"><span class="comment"> * if &#123;<span class="doctag">@code</span> null&#125;, no subsequent BeanPostProcessors will be invoked</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> org.springframework.beans.BeansException in case of errors</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.beans.factory.InitializingBean#afterPropertiesSet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.beans.factory.FactoryBean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面注册的<code>AnnotationAwareAspectJAutoProxyCreator</code>就间接实现了这个接口，生成对应bean的代理类，继承结构如下：</p><img src="/2021/03/10/spring-aop/image-20210307163021098.png"><p>处理代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator#postProcessBeforeInstantiation</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 用于缓存, 对于之前的Foo.class, 这里就是foo; 如果是FactoryBean，前面会加&amp;用于区分</span></span><br><span class="line">  Object cacheKey = getCacheKey(beanClass, beanName);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!StringUtils.hasLength(beanName) || !<span class="keyword">this</span>.targetSourcedBeans.contains(beanName)) &#123;</span><br><span class="line">    <span class="comment">// 增强过的直接就返回null，</span></span><br><span class="line">    <span class="comment">// @return the bean instance to use, either the original or a wrapped one;</span></span><br><span class="line">  <span class="comment">// if &#123;@code null&#125;, no subsequent BeanPostProcessors will be invoked</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.advisedBeans.containsKey(cacheKey)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Advice, Pointcut, Advisor, AopInfrastructureBean这些类直接跳过</span></span><br><span class="line">    <span class="keyword">if</span> (isInfrastructureClass(beanClass) || shouldSkip(beanClass, beanName)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create proxy here if we have a custom TargetSource.</span></span><br><span class="line">  <span class="comment">// Suppresses unnecessary default instantiation of the target bean:</span></span><br><span class="line">  <span class="comment">// The TargetSource will handle target instances in a custom fashion.</span></span><br><span class="line">  TargetSource targetSource = getCustomTargetSource(beanClass, beanName);</span><br><span class="line">  <span class="keyword">if</span> (targetSource != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasLength(beanName)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.targetSourcedBeans.add(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(beanClass, beanName, targetSource);</span><br><span class="line">    Object proxy = createProxy(beanClass, beanName, specificInterceptors, targetSource);</span><br><span class="line">    <span class="keyword">this</span>.proxyTypes.put(cacheKey, proxy.getClass());</span><br><span class="line">    <span class="keyword">return</span> proxy;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator#postProcessAfterInitialization</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a proxy with the configured interceptors if the bean is</span></span><br><span class="line"><span class="comment"> * identified as one to proxy by the subclass.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #getAdvicesAndAdvisorsForBean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (bean != <span class="keyword">null</span>) &#123;</span><br><span class="line">    Object cacheKey = getCacheKey(bean.getClass(), beanName);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.earlyProxyReferences.contains(cacheKey)) &#123;</span><br><span class="line">      <span class="keyword">return</span> wrapIfNecessary(bean, beanName, cacheKey);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator#wrapIfNecessary</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Wrap the given bean if necessary, i.e. if it is eligible for being proxied.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bean the raw bean instance</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beanName the name of the bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cacheKey the cache key for metadata access</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a proxy wrapping the bean, or the raw bean instance as-is</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">wrapIfNecessary</span><span class="params">(Object bean, String beanName, Object cacheKey)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (beanName != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.targetSourcedBeans.contains(beanName)) &#123;</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (Boolean.FALSE.equals(<span class="keyword">this</span>.advisedBeans.get(cacheKey))) &#123;</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) &#123;</span><br><span class="line">    <span class="keyword">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create proxy if we have advice.</span></span><br><span class="line">  <span class="comment">// 这里就会找到performanceTraceAspect</span></span><br><span class="line">  Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, <span class="keyword">null</span>);</span><br><span class="line">  <span class="keyword">if</span> (specificInterceptors != DO_NOT_PROXY) &#123;</span><br><span class="line">    <span class="comment">// 记录增强过的类</span></span><br><span class="line">    <span class="keyword">this</span>.advisedBeans.put(cacheKey, Boolean.TRUE);</span><br><span class="line">    <span class="comment">// 创建代理</span></span><br><span class="line">    Object proxy = createProxy(</span><br><span class="line">      bean.getClass(), beanName, specificInterceptors, <span class="keyword">new</span> SingletonTargetSource(bean));</span><br><span class="line">   <span class="comment">// 记录代理类</span></span><br><span class="line">    <span class="keyword">this</span>.proxyTypes.put(cacheKey, proxy.getClass());</span><br><span class="line">    <span class="comment">// 用代理类替代原始的类</span></span><br><span class="line">    <span class="keyword">return</span> proxy;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 记录无需增强的类</span></span><br><span class="line">  <span class="keyword">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">  <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建代理类主要的步骤有两步，第一步是找到满足条件的Advice和Advisor，第二步是创建代理类。</p><h4 id="获取Advisor"><a href="#获取Advisor" class="headerlink" title="获取Advisor"></a>获取Advisor</h4><p>这里的<code>getAdvicesAndAdvisorsForBean</code>是一个抽象方法，子类可以覆盖整个方法，实现自己的查找策略：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator#getAdvicesAndAdvisorsForBean</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Object[] getAdvicesAndAdvisorsForBean(Class&lt;?&gt; beanClass, String beanName, TargetSource targetSource) &#123;</span><br><span class="line">  List&lt;Advisor&gt; advisors = findEligibleAdvisors(beanClass, beanName);</span><br><span class="line">  <span class="keyword">if</span> (advisors.isEmpty()) &#123;</span><br><span class="line">    <span class="keyword">return</span> DO_NOT_PROXY;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> advisors.toArray();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Find all eligible Advisors for auto-proxying this class.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beanClass the clazz to find advisors for</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beanName the name of the currently proxied bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the empty List, not &#123;<span class="doctag">@code</span> null&#125;,</span></span><br><span class="line"><span class="comment"> * if there are no pointcuts or interceptors</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #findCandidateAdvisors</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #sortAdvisors</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #extendAdvisors</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;Advisor&gt; <span class="title">findEligibleAdvisors</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> </span>&#123;</span><br><span class="line"> <span class="comment">// 找出当前beanFactory中的所有的Advisor</span></span><br><span class="line">  List&lt;Advisor&gt; candidateAdvisors = findCandidateAdvisors();</span><br><span class="line">  <span class="comment">// 筛选出能用于当前beanClass的Advisor</span></span><br><span class="line">  List&lt;Advisor&gt; eligibleAdvisors = findAdvisorsThatCanApply(candidateAdvisors, beanClass, beanName);</span><br><span class="line">  <span class="comment">// 扩展点</span></span><br><span class="line">  extendAdvisors(eligibleAdvisors);</span><br><span class="line">  <span class="keyword">if</span> (!eligibleAdvisors.isEmpty()) &#123;</span><br><span class="line">    <span class="comment">// 按照@Order定义的优先级排序</span></span><br><span class="line">    eligibleAdvisors = sortAdvisors(eligibleAdvisors);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> eligibleAdvisors;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Find all candidate Advisors to use in auto-proxying.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the List of candidate Advisors</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;Advisor&gt; <span class="title">findCandidateAdvisors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.advisorRetrievalHelper.findAdvisorBeans();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.aop.framework.autoproxy.BeanFactoryAdvisorRetrievalHelper#findAdvisorBeans</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Find all eligible Advisor beans in the current bean factory,</span></span><br><span class="line"><span class="comment"> * ignoring FactoryBeans and excluding beans that are currently in creation.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the list of &#123;<span class="doctag">@link</span> org.springframework.aop.Advisor&#125; beans</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #isEligibleBean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Advisor&gt; <span class="title">findAdvisorBeans</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Determine list of advisor bean names, if not cached already.</span></span><br><span class="line">  String[] advisorNames = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">    <span class="comment">// 有缓存</span></span><br><span class="line">    advisorNames = <span class="keyword">this</span>.cachedAdvisorBeanNames;</span><br><span class="line">    <span class="keyword">if</span> (advisorNames == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span></span><br><span class="line">      <span class="comment">// uninitialized to let the auto-proxy creator apply to them!</span></span><br><span class="line">      advisorNames = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(</span><br><span class="line">        <span class="keyword">this</span>.beanFactory, Advisor<span class="class">.<span class="keyword">class</span>, <span class="title">true</span>, <span class="title">false</span>)</span>;</span><br><span class="line">      <span class="keyword">this</span>.cachedAdvisorBeanNames = advisorNames;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (advisorNames.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LinkedList&lt;Advisor&gt;();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  List&lt;Advisor&gt; advisors = <span class="keyword">new</span> LinkedList&lt;Advisor&gt;();</span><br><span class="line">  <span class="comment">// 遍历所有的advisor</span></span><br><span class="line">  <span class="keyword">for</span> (String name : advisorNames) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isEligibleBean(name)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory.isCurrentlyInCreation(name)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">          logger.debug(<span class="string">"Skipping currently created advisor '"</span> + name + <span class="string">"'"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          advisors.add(<span class="keyword">this</span>.beanFactory.getBean(name, Advisor<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (BeanCreationException ex) &#123;</span><br><span class="line">          Throwable rootCause = ex.getMostSpecificCause();</span><br><span class="line">          <span class="keyword">if</span> (rootCause <span class="keyword">instanceof</span> BeanCurrentlyInCreationException) &#123;</span><br><span class="line">            BeanCreationException bce = (BeanCreationException) rootCause;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory.isCurrentlyInCreation(bce.getBeanName())) &#123;</span><br><span class="line">              <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="string">"Skipping advisor '"</span> + name +</span><br><span class="line">                             <span class="string">"' with dependency on currently created bean: "</span> + ex.getMessage());</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">// Ignore: indicates a reference back to the bean we're trying to advise.</span></span><br><span class="line">              <span class="comment">// We want to find advisors other than the currently created bean itself.</span></span><br><span class="line">              <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> advisors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AnnotationAwareAspectJAutoProxyCreator</code>中重写了<code>findCandidateAdvisors</code>方法，调用了父类的<code>findCandidateAdvisors</code>,也加上了自己的特化逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator#findCandidateAdvisors</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;Advisor&gt; <span class="title">findCandidateAdvisors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 上述的逻辑，从beanFactory中查找advisor</span></span><br><span class="line"><span class="comment">// Add all the Spring advisors found according to superclass rules.</span></span><br><span class="line">List&lt;Advisor&gt; advisors = <span class="keyword">super</span>.findCandidateAdvisors();</span><br><span class="line">    <span class="comment">// AnnotationAwareAspectJAutoProxyCreator自己的逻辑</span></span><br><span class="line"><span class="comment">// Build Advisors for all AspectJ aspects in the bean factory.</span></span><br><span class="line">advisors.addAll(<span class="keyword">this</span>.aspectJAdvisorsBuilder.buildAspectJAdvisors());</span><br><span class="line"><span class="keyword">return</span> advisors;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.aop.aspectj.annotation.BeanFactoryAspectJAdvisorsBuilder#buildAspectJAdvisors</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Look for AspectJ-annotated aspect beans in the current bean factory,</span></span><br><span class="line"><span class="comment"> * and return to a list of Spring AOP Advisors representing them.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Creates a Spring Advisor for each AspectJ advice method.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the list of &#123;<span class="doctag">@link</span> org.springframework.aop.Advisor&#125; beans</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #isEligibleBean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Advisor&gt; <span class="title">buildAspectJAdvisors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  List&lt;String&gt; aspectNames = <span class="keyword">this</span>.aspectBeanNames;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (aspectNames == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">      aspectNames = <span class="keyword">this</span>.aspectBeanNames;</span><br><span class="line">      <span class="keyword">if</span> (aspectNames == <span class="keyword">null</span>) &#123;</span><br><span class="line">        List&lt;Advisor&gt; advisors = <span class="keyword">new</span> LinkedList&lt;Advisor&gt;();</span><br><span class="line">        aspectNames = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        <span class="comment">// 这里传入的是Object类，和上面传入的Advisor类不同</span></span><br><span class="line">        String[] beanNames = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(</span><br><span class="line">          <span class="keyword">this</span>.beanFactory, Object<span class="class">.<span class="keyword">class</span>, <span class="title">true</span>, <span class="title">false</span>)</span>;</span><br><span class="line">        <span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!isEligibleBean(beanName)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// We must be careful not to instantiate beans eagerly as in this case they</span></span><br><span class="line">          <span class="comment">// would be cached by the Spring container but would not have been weaved.</span></span><br><span class="line">          Class&lt;?&gt; beanType = <span class="keyword">this</span>.beanFactory.getType(beanName);</span><br><span class="line">          <span class="keyword">if</span> (beanType == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 是否是切面类，一般需要有@Aspect标记</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">this</span>.advisorFactory.isAspect(beanType)) &#123;</span><br><span class="line">            aspectNames.add(beanName);</span><br><span class="line">            AspectMetadata amd = <span class="keyword">new</span> AspectMetadata(beanType, beanName);</span><br><span class="line">            <span class="keyword">if</span> (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) &#123;</span><br><span class="line">              <span class="comment">// 根据标记的类生成Advisor</span></span><br><span class="line">              MetadataAwareAspectInstanceFactory factory =</span><br><span class="line">                <span class="keyword">new</span> BeanFactoryAspectInstanceFactory(<span class="keyword">this</span>.beanFactory, beanName);</span><br><span class="line">              List&lt;Advisor&gt; classAdvisors = <span class="keyword">this</span>.advisorFactory.getAdvisors(factory);</span><br><span class="line">              <span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory.isSingleton(beanName)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.advisorsCache.put(beanName, classAdvisors);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.aspectFactoryCache.put(beanName, factory);</span><br><span class="line">              &#125;</span><br><span class="line">              advisors.addAll(classAdvisors);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">// Per target or per this.</span></span><br><span class="line">              <span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory.isSingleton(beanName)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Bean with name '"</span> + beanName +</span><br><span class="line">                                                   <span class="string">"' is a singleton, but aspect instantiation model is not singleton"</span>);</span><br><span class="line">              &#125;</span><br><span class="line">              MetadataAwareAspectInstanceFactory factory =</span><br><span class="line">                <span class="keyword">new</span> PrototypeAspectInstanceFactory(<span class="keyword">this</span>.beanFactory, beanName);</span><br><span class="line">              <span class="keyword">this</span>.aspectFactoryCache.put(beanName, factory);</span><br><span class="line">              advisors.addAll(<span class="keyword">this</span>.advisorFactory.getAdvisors(factory));</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.aspectBeanNames = aspectNames;</span><br><span class="line">        <span class="keyword">return</span> advisors;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="comment">// 初始化缓存的逻辑</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (aspectNames.isEmpty()) &#123;</span><br><span class="line">    <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">  &#125;</span><br><span class="line">  List&lt;Advisor&gt; advisors = <span class="keyword">new</span> LinkedList&lt;Advisor&gt;();</span><br><span class="line">  <span class="keyword">for</span> (String aspectName : aspectNames) &#123;</span><br><span class="line">    List&lt;Advisor&gt; cachedAdvisors = <span class="keyword">this</span>.advisorsCache.get(aspectName);</span><br><span class="line">    <span class="keyword">if</span> (cachedAdvisors != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 从缓存里直接取的逻辑</span></span><br><span class="line">      advisors.addAll(cachedAdvisors);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 新生成Advisor</span></span><br><span class="line">      MetadataAwareAspectInstanceFactory factory = <span class="keyword">this</span>.aspectFactoryCache.get(aspectName);</span><br><span class="line">      advisors.addAll(<span class="keyword">this</span>.advisorFactory.getAdvisors(factory));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> advisors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="生成代理类"><a href="#生成代理类" class="headerlink" title="生成代理类"></a>生成代理类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator#createProxy</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">createProxy</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  Class&lt;?&gt; beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory <span class="keyword">instanceof</span> ConfigurableListableBeanFactory) &#123;</span><br><span class="line">    <span class="comment">// 可以通过determineTargetClass获取被代理的类</span></span><br><span class="line">    AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) <span class="keyword">this</span>.beanFactory, beanName, beanClass);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ProxyFactory proxyFactory = <span class="keyword">new</span> ProxyFactory();</span><br><span class="line">  proxyFactory.copyFrom(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!proxyFactory.isProxyTargetClass()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (shouldProxyTargetClass(beanClass, beanName)) &#123;</span><br><span class="line">      proxyFactory.setProxyTargetClass(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      evaluateProxyInterfaces(beanClass, proxyFactory);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Advisor[] advisors = buildAdvisors(beanName, specificInterceptors);</span><br><span class="line">  <span class="keyword">for</span> (Advisor advisor : advisors) &#123;</span><br><span class="line">    proxyFactory.addAdvisor(advisor);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  proxyFactory.setTargetSource(targetSource);</span><br><span class="line">  customizeProxyFactory(proxyFactory);</span><br><span class="line"></span><br><span class="line">  proxyFactory.setFrozen(<span class="keyword">this</span>.freezeProxy);</span><br><span class="line">  <span class="keyword">if</span> (advisorsPreFiltered()) &#123;</span><br><span class="line">    proxyFactory.setPreFiltered(<span class="keyword">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> proxyFactory.getProxy(getProxyClassLoader());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取代理的过程和测试代码中的步骤一致：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">final</span> AspectJProxyFactory aspectJProxyFactory = <span class="keyword">new</span> AspectJProxyFactory();</span><br><span class="line">aspectJProxyFactory.setProxyTargetClass(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 设置target</span></span><br><span class="line">aspectJProxyFactory.setTarget(<span class="keyword">new</span> Foo());</span><br><span class="line"><span class="comment">// 设置aspect</span></span><br><span class="line">aspectJProxyFactory.addAspect(PerformanceTraceAspect<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">Foo proxy = (Foo)aspectJProxyFactory.getProxy();</span><br><span class="line">log.info(<span class="string">"foo class is &#123;&#125;"</span>, proxy.getClass().getSimpleName());</span><br><span class="line">proxy.hello1();</span><br><span class="line">proxy.hello2();</span><br></pre></td></tr></table></figure><p>具体是JDK代理，还是CGLIB字节码增强，要看ProxyFactory</p><img src="/2021/03/10/spring-aop/image-20210307210031053.png"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.aop.framework.ProxyFactory#getProxy(java.lang.ClassLoader)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">(ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> createAopProxy().getProxy(classLoader);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> AopProxy <span class="title">createAopProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.active) &#123;</span><br><span class="line">    activate();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> getAopProxyFactory().createAopProxy(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.aop.framework.AopProxyFactory</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AopProxyFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create an &#123;<span class="doctag">@link</span> AopProxy&#125; for the given AOP configuration.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> config the AOP configuration in the form of an</span></span><br><span class="line"><span class="comment"> * AdvisedSupport object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the corresponding AOP proxy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> AopConfigException if the configuration is invalid</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">AopProxy <span class="title">createAopProxy</span><span class="params">(AdvisedSupport config)</span> <span class="keyword">throws</span> AopConfigException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//唯一的实现 org.springframework.aop.framework.DefaultAopProxyFactory</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AopProxy <span class="title">createAopProxy</span><span class="params">(AdvisedSupport config)</span> <span class="keyword">throws</span> AopConfigException </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) &#123;</span><br><span class="line">    Class&lt;?&gt; targetClass = config.getTargetClass();</span><br><span class="line">    <span class="keyword">if</span> (targetClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">"TargetSource cannot determine target class: "</span> +</span><br><span class="line">                                   <span class="string">"Either an interface or a target is required for proxy creation."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 实现了接口的，或者已经是JDK代理类</span></span><br><span class="line">    <span class="keyword">if</span> (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> JdkDynamicAopProxy(config);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// CglibAopProxy 代理的子类</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ObjenesisCglibAopProxy(config);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JdkDynamicAopProxy(config);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AopProxy</code>的继承关系，ProxyFactory也实现了这个接口。</p><img src="/2021/03/10/spring-aop/image-20210307205728646.png"><h3 id="TargetSource"><a href="#TargetSource" class="headerlink" title="TargetSource"></a>TargetSource</h3><p>spring的代理其实是三层的：</p><p>cglib/jdk proxy  -&gt; targetSource -&gt; target</p><p>targetSource封装了获取target的逻辑，比如实现对象池化的<code>CommonsPool2TargetSource</code>、热修改的<code>HotSwappableTargetSource</code>;也可以扩展这个类，实现自己的获取逻辑。</p><h4 id="HotSwappableTargetSource"><a href="#HotSwappableTargetSource" class="headerlink" title="HotSwappableTargetSource"></a>HotSwappableTargetSource</h4><p>多了个swap的逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Swap the target, returning the old target object.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> newTarget the new target object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the old target object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if the new target is invalid</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Object <span class="title">swap</span><span class="params">(Object newTarget)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">  Assert.notNull(newTarget, <span class="string">"Target object must not be null"</span>);</span><br><span class="line">  Object old = <span class="keyword">this</span>.target;</span><br><span class="line">  <span class="keyword">this</span>.target = newTarget;</span><br><span class="line">  <span class="keyword">return</span> old;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有点类似jdk的<code>AtomicReference</code>，使用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ProxyFactoryBean <span class="title">barFactory</span><span class="params">(HotSwappableTargetSource hotSwappableTargetSource)</span> </span>&#123;</span><br><span class="line">  ProxyFactoryBean pfb = <span class="keyword">new</span> ProxyFactoryBean();</span><br><span class="line">  pfb.setTargetSource(hotSwappableTargetSource);</span><br><span class="line">  pfb.setSingleton(<span class="keyword">false</span>);</span><br><span class="line">  <span class="keyword">return</span> pfb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"barTarget"</span>)</span><br><span class="line"><span class="meta">@Scope</span>(value = SCOPE_PROTOTYPE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Bar <span class="title">barTarget</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Bar(System.nanoTime());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> HotSwappableTargetSource <span class="title">hotSwappableTargetSource</span><span class="params">(Bar bar)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> HotSwappableTargetSource hotSwappableTargetSource = <span class="keyword">new</span> HotSwappableTargetSource(bar);</span><br><span class="line">  <span class="keyword">return</span> hotSwappableTargetSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHotSwap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(AopConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="keyword">final</span> HotSwappableTargetSource swapper = context.getBean(HotSwappableTargetSource<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="keyword">final</span> Hello bar = context.getBean(<span class="string">"barFactory"</span>, Hello<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 2021-03-08 17:13:39.308[main][INFO ]c.a.s.a.Bar.sayHello:22 hello...327431205655481</span></span><br><span class="line">  bar.sayHello();</span><br><span class="line">  <span class="comment">// 替换类</span></span><br><span class="line">  swapper.swap(<span class="keyword">new</span> Bar(System.nanoTime()));</span><br><span class="line">  <span class="comment">// 2021-03-08 17:13:39.308[main][INFO ]c.a.s.a.Bar.sayHello:22 hello...327431263396408</span></span><br><span class="line">  bar.sayHello();</span><br><span class="line">  <span class="comment">// 2021-03-08 17:13:39.309[main][INFO ]c.a.s.a.Bar.sayHello:22 hello...327431263396408</span></span><br><span class="line">  bar.sayHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CommonsPool2TargetSource"><a href="#CommonsPool2TargetSource" class="headerlink" title="CommonsPool2TargetSource"></a>CommonsPool2TargetSource</h4><p>底层是apache的对象池，<code>getTarget</code>时是从对象池中取，在<code>releaseTarget</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.aop.target.CommonsPool2TargetSource#releaseTarget</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the specified object to the underlying &#123;<span class="doctag">@code</span> ObjectPool&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">releaseTarget</span><span class="params">(Object target)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.pool.returnObject(target);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.aop.target.CommonsPool2TargetSource#getTarget</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Borrows an object from the &#123;<span class="doctag">@code</span> ObjectPool&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getTarget</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.pool.borrowObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意对象池的一些超时设置，比如<code>maxWait</code>等，防止业务hang住。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 代故</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/7 1:18 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span>(proxyTargetClass = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProxyFactoryBean <span class="title">barFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ProxyFactoryBean pfb = <span class="keyword">new</span> ProxyFactoryBean();</span><br><span class="line">        pfb.setTargetSource(poolTargetSource());</span><br><span class="line">        pfb.setSingleton(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> pfb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"barTarget"</span>)</span><br><span class="line">    <span class="meta">@Scope</span>(value = SCOPE_PROTOTYPE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bar <span class="title">barTarget</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Bar(System.nanoTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonsPool2TargetSource <span class="title">poolTargetSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> CommonsPool2TargetSource targetSource = <span class="keyword">new</span> CommonsPool2TargetSource();</span><br><span class="line">        targetSource.setMaxSize(<span class="number">2</span>);</span><br><span class="line">        targetSource.setMaxWait(<span class="number">500</span>);</span><br><span class="line">        targetSource.setTargetBeanName(<span class="string">"barTarget"</span>);</span><br><span class="line">        targetSource.setTargetClass(Bar<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> targetSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试获取对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCustomTargetSource</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(AopConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="keyword">final</span> ThreadFactory threadFactory = <span class="keyword">new</span> ThreadFactoryBuilder().setUncaughtExceptionHandler(</span><br><span class="line">    (Thread t, Throwable e) -&gt; &#123;</span><br><span class="line">      <span class="comment">// submit返回的是future，抛异常了，也是在Future get的时候抛的</span></span><br><span class="line">      <span class="comment">// execute没有返回值，如果异常了，就进到这里了</span></span><br><span class="line">      log.error(<span class="string">"thread &#123;&#125; throws exception &#123;&#125;"</span>, t.getName(), e);</span><br><span class="line">    &#125;)</span><br><span class="line">    .build();</span><br><span class="line">  ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">5</span>, <span class="number">5</span>, <span class="number">60</span>,</span><br><span class="line">                                                       TimeUnit.SECONDS, <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">30</span>), threadFactory);</span><br><span class="line">  executor.execute(() -&gt; actionCGLIB(context));</span><br><span class="line">  executor.execute(() -&gt; actionCGLIB(context));</span><br><span class="line">  executor.execute(() -&gt; actionCGLIB(context));</span><br><span class="line">  executor.execute(() -&gt; actionCGLIB(context));</span><br><span class="line">  executor.shutdown();</span><br><span class="line">  <span class="comment">//        actionCGLIB(context);</span></span><br><span class="line">  executor.awaitTermination(<span class="number">6000000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">  TimeUnit.SECONDS.sleep(<span class="number">30</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">actionCGLIB</span><span class="params">(AnnotationConfigApplicationContext context)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Bar bar1 = ((Bar)context.getBean(<span class="string">"barFactory"</span>));</span><br><span class="line">  log.info(<span class="string">"bar1 = "</span> + bar1.hashCode() + <span class="string">", className="</span> + bar1.getClass());</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    bar1.sayHello();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">    log.error(<span class="string">"say hello exception"</span>, t);</span><br><span class="line">    <span class="keyword">throw</span> t;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2021-03-08 17:41:13.137[pool-2-thread-3][INFO ]c.a.s.a.AopTest.action:91 bar1 = -1196711332, className=class com.sun.proxy.<span class="variable">$Proxy23</span></span><br><span class="line">2021-03-08 17:41:13.137[pool-2-thread-1][INFO ]c.a.s.a.AopTest.action:91 bar1 = -1196711332, className=class com.sun.proxy.<span class="variable">$Proxy23</span></span><br><span class="line">2021-03-08 17:41:13.137[pool-2-thread-2][INFO ]c.a.s.a.AopTest.action:91 bar1 = -1196711332, className=class com.sun.proxy.<span class="variable">$Proxy23</span></span><br><span class="line">2021-03-08 17:41:13.137[pool-2-thread-4][INFO ]c.a.s.a.AopTest.action:91 bar1 = -1196711332, className=class com.sun.proxy.<span class="variable">$Proxy23</span></span><br><span class="line">2021-03-08 17:41:23.143[pool-2-thread-2][INFO ]c.a.s.a.Bar.sayHello:22 hello...329095160261362</span><br><span class="line">2021-03-08 17:41:23.143[pool-2-thread-3][INFO ]c.a.s.a.Bar.sayHello:22 hello...329095160261350</span><br><span class="line">2021-03-08 17:41:23.146[pool-2-thread-1][INFO ]c.a.s.a.Bar.sayHello:22 hello...329095160261350</span><br><span class="line">2021-03-08 17:41:23.147[pool-2-thread-4][INFO ]c.a.s.a.Bar.sayHello:22 hello...329095160261362</span><br></pre></td></tr></table></figure><p>每次获取到的都是<code>ProxyFactoryBean</code>, 在每次调用具体的方法时，<code>ProxyFactoryBean</code>会调用底层的<code>TargetSource</code>来获取<code>Target</code>（这里就是<code>CommonsPool2TargetSource</code>）。<code>CommonsPool2TargetSource</code>会从持有的对象池中复用对象。典型的应用场景就是spring的状态机，使用完之后可以放入对象池中，避免频繁创建对象的开销。</p><p>spring提供了Advisor来获取对象池的状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MethodInvokingFactoryBean <span class="title">poolConfigAdvisor</span><span class="params">(CommonsPool2TargetSource pool2TargetSource)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> MethodInvokingFactoryBean factoryBean = <span class="keyword">new</span> MethodInvokingFactoryBean();</span><br><span class="line">  factoryBean.setTargetObject(pool2TargetSource);</span><br><span class="line">  factoryBean.setTargetMethod(<span class="string">"getPoolingConfigMixin"</span>);</span><br><span class="line">  <span class="keyword">return</span> factoryBean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ProxyFactoryBean <span class="title">barFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ProxyFactoryBean pfb = <span class="keyword">new</span> ProxyFactoryBean();</span><br><span class="line">  pfb.setTargetSource(poolTargetSource());</span><br><span class="line">  pfb.setSingleton(<span class="keyword">false</span>);</span><br><span class="line">  <span class="comment">// 配置interceptor的bean名称</span></span><br><span class="line">  pfb.setInterceptorNames(<span class="string">"poolConfigAdvisor"</span>);</span><br><span class="line">  <span class="keyword">return</span> pfb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"barTarget"</span>)</span><br><span class="line"><span class="meta">@Scope</span>(value = SCOPE_PROTOTYPE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Bar <span class="title">barTarget</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Bar(System.nanoTime());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonsPool2TargetSource <span class="title">poolTargetSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> CommonsPool2TargetSource targetSource = <span class="keyword">new</span> CommonsPool2TargetSource();</span><br><span class="line">  targetSource.setMaxSize(<span class="number">2</span>);</span><br><span class="line">  targetSource.setMaxWait(<span class="number">500</span>);</span><br><span class="line">  targetSource.setTargetBeanName(<span class="string">"barTarget"</span>);</span><br><span class="line">  targetSource.setTargetClass(Bar<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="keyword">return</span> targetSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPooling</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(AopConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  PoolingConfig poolingConfig = (PoolingConfig)context.getBean(<span class="string">"barFactory"</span>);</span><br><span class="line">  log.info(<span class="string">"pooling config is active=&#123;&#125;, max=&#123;&#125;"</span>, poolingConfig.getActiveCount(), poolingConfig.getMaxSize());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MethodInvokingFactoryBean</code>会把目标对象（targetObject）方法（targetMethod）的返回值，作为bean实例；就是<code>CommonsPool2TargetSource#getPoolingConfigMixin</code>的返回值<code>DefaultIntroductionAdvisor</code>, 会被交给spring管理（相当于是<strong>factory-method</strong>的特化）。另外<code>DelegatingIntroductionInterceptor</code>实现了<code>IntroductionInterceptor</code>是per 实例的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return an IntroductionAdvisor that providing a mixin</span></span><br><span class="line"><span class="comment"> * exposing statistics about the pool maintained by this object.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DefaultIntroductionAdvisor <span class="title">getPoolingConfigMixin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  DelegatingIntroductionInterceptor dii = <span class="keyword">new</span> DelegatingIntroductionInterceptor(<span class="keyword">this</span>);</span><br><span class="line">  <span class="comment">// 这个advisor的作用就是给生成的Target加了个接口PoolingConfig.class，这样后面拿到target之后就可以强转了</span></span><br><span class="line">  <span class="comment">// 调用PoolingConfig接口中的方法就会给代理到当前的TargetSource</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> DefaultIntroductionAdvisor(dii, PoolingConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拿到的代理对象实现了<code>PoolingConfig</code>接口，对应的调用就转到了<code>TargetSource</code>上</p><img src="/2021/03/10/spring-aop/image-20210309154235213.png"><h3 id="Jdk代理"><a href="#Jdk代理" class="headerlink" title="Jdk代理"></a>Jdk代理</h3><h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><p>静态代理需要自己写代理类，实现接口，然后代理方法委托给底层的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by KL on 2015/12/8.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Greeting</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by KL on 2015/12/8.</span></span><br><span class="line"><span class="comment"> * 具体的实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreetingImpl</span> <span class="keyword">implements</span> <span class="title">Greeting</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手动创建代理类</span></span><br><span class="line"><span class="comment"> * Created by KL on 2015/12/8.</span></span><br><span class="line"><span class="comment"> * static proxy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreetingProxy</span> <span class="keyword">implements</span> <span class="title">Greeting</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Greeting greetingImpl;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GreetingProxy</span><span class="params">(Greeting greetingImpl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.greetingImpl = greetingImpl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        before();</span><br><span class="line">      <span class="comment">// 具体的调用委托给底层的实现</span></span><br><span class="line">        greetingImpl.sayHello(name);</span><br><span class="line">        after();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"after"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><p>动态代理需要用到JDK提供的<code>InvocationHandler</code>接口, </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java.lang.reflect.InvocationHandler</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> Throwable</span>;</span><br></pre></td></tr></table></figure><p>实现代理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by KL on 2015/12/8.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreetingDynamicProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GreetingDynamicProxy</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取代理类</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T) Proxy.newProxyInstance(</span><br><span class="line">                target.getClass().getClassLoader(),</span><br><span class="line">                target.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">this</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用对应的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        before();</span><br><span class="line">        Object result = method.invoke(target,args);</span><br><span class="line">        after();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Before"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"After"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test dynamic proxy</span></span><br><span class="line">Greeting greeting = <span class="keyword">new</span> GreetingDynamicProxy(<span class="keyword">new</span> GreetingImpl()).getProxy();</span><br><span class="line">greeting.sayHello(<span class="string">"haha!"</span>);</span><br></pre></td></tr></table></figure><p>使用arthas查看生成的代理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">[arthas@<span class="number">61770</span>]$ jad com.sun.proxy.\\$Proxy0</span><br><span class="line"></span><br><span class="line">ClassLoader:</span><br><span class="line">+-sun.misc.Launcher$AppClassLoader@<span class="number">18</span>b4aac2</span><br><span class="line">  +-sun.misc.Launcher$ExtClassLoader@<span class="number">3429535</span>c</span><br><span class="line"></span><br><span class="line">Location:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Decompiled with CFR.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Could not load the following classes:</span></span><br><span class="line"><span class="comment"> *  com.air.proxy.Greeting</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.sun.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.air.proxy.Greeting;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> $<span class="title">Proxy0</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Greeting</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler invocationHandler) &#123;</span><br><span class="line">        <span class="keyword">super</span>(invocationHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Boolean)<span class="keyword">this</span>.h.invoke(<span class="keyword">this</span>, m1, <span class="keyword">new</span> Object[]&#123;object&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现的接口方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String string)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// h就是invocationHandler</span></span><br><span class="line">            <span class="comment">// m3就是sayHello方法</span></span><br><span class="line">            <span class="keyword">this</span>.h.invoke(<span class="keyword">this</span>, m3, <span class="keyword">new</span> Object[]&#123;string&#125;);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="keyword">this</span>.h.invoke(<span class="keyword">this</span>, m2, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="keyword">this</span>.h.invoke(<span class="keyword">this</span>, m0, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"equals"</span>, Class.forName(<span class="string">"java.lang.Object"</span>));</span><br><span class="line">            m3 = Class.forName(<span class="string">"com.air.proxy.Greeting"</span>).getMethod(<span class="string">"sayHello"</span>, Class.forName(<span class="string">"java.lang.String"</span>));</span><br><span class="line">            m2 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"toString"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">            m0 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"hashCode"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchMethodException noSuchMethodException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError(noSuchMethodException.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ClassNotFoundException classNotFoundException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoClassDefFoundError(classNotFoundException.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Affect(row-cnt:<span class="number">1</span>) cost in <span class="number">907</span> ms.</span><br></pre></td></tr></table></figure><h4 id="JdkDynamicAopProxy"><a href="#JdkDynamicAopProxy" class="headerlink" title="JdkDynamicAopProxy"></a>JdkDynamicAopProxy</h4><p>创建代理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.aop.framework.JdkDynamicAopProxy#getProxy(java.lang.ClassLoader)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">(ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">    logger.debug(<span class="string">"Creating JDK dynamic proxy: target source is "</span> + <span class="keyword">this</span>.advised.getTargetSource());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 查找实现的接口</span></span><br><span class="line">  Class&lt;?&gt;[] proxiedInterfaces = AopProxyUtils.completeProxiedInterfaces(<span class="keyword">this</span>.advised, <span class="keyword">true</span>);</span><br><span class="line">  findDefinedEqualsAndHashCodeMethods(proxiedInterfaces);</span><br><span class="line">  <span class="comment">// 生成代理类</span></span><br><span class="line">  <span class="keyword">return</span> Proxy.newProxyInstance(classLoader, proxiedInterfaces, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.aop.framework.JdkDynamicAopProxy#invoke</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implementation of &#123;<span class="doctag">@code</span> InvocationHandler.invoke&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Callers will see exactly the exception thrown by the target,</span></span><br><span class="line"><span class="comment"> * unless a hook method throws an exception.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">  MethodInvocation invocation;</span><br><span class="line">  Object oldProxy = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">boolean</span> setProxyContext = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  TargetSource targetSource = <span class="keyword">this</span>.advised.targetSource;</span><br><span class="line">  Class&lt;?&gt; targetClass = <span class="keyword">null</span>;</span><br><span class="line">  Object target = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.equalsDefined &amp;&amp; AopUtils.isEqualsMethod(method)) &#123;</span><br><span class="line">      <span class="comment">// The target does not implement the equals(Object) method itself.</span></span><br><span class="line">      <span class="keyword">return</span> equals(args[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>.hashCodeDefined &amp;&amp; AopUtils.isHashCodeMethod(method)) &#123;</span><br><span class="line">      <span class="comment">// The target does not implement the hashCode() method itself.</span></span><br><span class="line">      <span class="keyword">return</span> hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (method.getDeclaringClass() == DecoratingProxy<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// There is only getDecoratedClass() declared -&gt; dispatch to proxy config.</span></span><br><span class="line">      <span class="keyword">return</span> AopProxyUtils.ultimateTargetClass(<span class="keyword">this</span>.advised);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>.advised.opaque &amp;&amp; method.getDeclaringClass().isInterface() &amp;&amp;</span><br><span class="line">             method.getDeclaringClass().isAssignableFrom(Advised<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">      <span class="comment">// Service invocations on ProxyConfig with the proxy config...</span></span><br><span class="line">      <span class="keyword">return</span> AopUtils.invokeJoinpointUsingReflection(<span class="keyword">this</span>.advised, method, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object retVal;</span><br><span class="line"><span class="comment">// 暴露代理类</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.advised.exposeProxy) &#123;</span><br><span class="line">      <span class="comment">// Make invocation available if necessary.</span></span><br><span class="line">      oldProxy = AopContext.setCurrentProxy(proxy);</span><br><span class="line">      setProxyContext = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// May be null. Get as late as possible to minimize the time we "own" the target,</span></span><br><span class="line">    <span class="comment">// in case it comes from a pool.</span></span><br><span class="line">    <span class="comment">// 从targetSource获取对应的信息</span></span><br><span class="line">    target = targetSource.getTarget();</span><br><span class="line">    <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">      targetClass = target.getClass();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get the interception chain for this method.</span></span><br><span class="line">    <span class="comment">// 获取针对targetClass的MethodInterceptor, @Aspect等声明的会在这个chain中</span></span><br><span class="line">    List&lt;Object&gt; chain = <span class="keyword">this</span>.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check whether we have any advice. If we don't, we can fallback on direct</span></span><br><span class="line">    <span class="comment">// reflective invocation of the target, and avoid creating a MethodInvocation.</span></span><br><span class="line">    <span class="keyword">if</span> (chain.isEmpty()) &#123;</span><br><span class="line">      <span class="comment">// 没有advised的，就直接用普通的jdk代理</span></span><br><span class="line">      <span class="comment">// We can skip creating a MethodInvocation: just invoke the target directly</span></span><br><span class="line">      <span class="comment">// Note that the final invoker must be an InvokerInterceptor so we know it does</span></span><br><span class="line">      <span class="comment">// nothing but a reflective operation on the target, and no hot swapping or fancy proxying.</span></span><br><span class="line">      Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args);</span><br><span class="line">      retVal = AopUtils.invokeJoinpointUsingReflection(target, method, argsToUse);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 包装成ReflectiveMethodInvocation，</span></span><br><span class="line">      <span class="comment">// ReflectiveMethodInvocation类似filterChain，内部有状态记录处理到第几个，递归调用，使每个Interceptor都能执行</span></span><br><span class="line">      <span class="comment">// We need to create a method invocation...</span></span><br><span class="line">      invocation = <span class="keyword">new</span> ReflectiveMethodInvocation(proxy, target, method, args, targetClass, chain);</span><br><span class="line">      <span class="comment">// Proceed to the joinpoint through the interceptor chain.</span></span><br><span class="line">      retVal = invocation.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Massage return value if necessary.</span></span><br><span class="line">    Class&lt;?&gt; returnType = method.getReturnType();</span><br><span class="line">    <span class="keyword">if</span> (retVal != <span class="keyword">null</span> &amp;&amp; retVal == target &amp;&amp;</span><br><span class="line">        returnType != Object<span class="class">.<span class="keyword">class</span> &amp;&amp; <span class="title">returnType</span>.<span class="title">isInstance</span>(<span class="title">proxy</span>) &amp;&amp;</span></span><br><span class="line"><span class="class">        !<span class="title">RawTargetAccess</span>.<span class="title">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">method</span>.<span class="title">getDeclaringClass</span>())) </span>&#123;</span><br><span class="line">      <span class="comment">// Special case: it returned "this" and the return type of the method</span></span><br><span class="line">      <span class="comment">// is type-compatible. Note that we can't help if the target sets</span></span><br><span class="line">      <span class="comment">// a reference to itself in another returned object.</span></span><br><span class="line">      retVal = proxy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (retVal == <span class="keyword">null</span> &amp;&amp; returnType != Void.TYPE &amp;&amp; returnType.isPrimitive()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> AopInvocationException(</span><br><span class="line">        <span class="string">"Null return value from advice does not match primitive return type for: "</span> + method);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> retVal;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (target != <span class="keyword">null</span> &amp;&amp; !targetSource.isStatic()) &#123;</span><br><span class="line">      <span class="comment">// Must have come from TargetSource.</span></span><br><span class="line">      <span class="comment">// 底层的targetSource可能是池化的，这里把对象归还给池子</span></span><br><span class="line">      targetSource.releaseTarget(target);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (setProxyContext) &#123;</span><br><span class="line">      <span class="comment">// Restore old proxy.</span></span><br><span class="line">      AopContext.setCurrentProxy(oldProxy);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟前面介绍的动态代理差不多，只是框架生成的，而且加上了一些interceptor的逻辑（AOP Alliance）</p><h3 id="CglibAopProxy"><a href="#CglibAopProxy" class="headerlink" title="CglibAopProxy"></a>CglibAopProxy</h3><img src="/2021/03/10/spring-aop/image-20210310001148937.png"><p>获取Proxy的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">(ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">    logger.debug(<span class="string">"Creating CGLIB proxy: target source is "</span> + <span class="keyword">this</span>.advised.getTargetSource());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Class&lt;?&gt; rootClass = <span class="keyword">this</span>.advised.getTargetClass();</span><br><span class="line">    Assert.state(rootClass != <span class="keyword">null</span>, <span class="string">"Target class must be available for creating a CGLIB proxy"</span>);</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; proxySuperClass = rootClass;</span><br><span class="line">    <span class="keyword">if</span> (ClassUtils.isCglibProxyClass(rootClass)) &#123;</span><br><span class="line">      proxySuperClass = rootClass.getSuperclass();</span><br><span class="line">      Class&lt;?&gt;[] additionalInterfaces = rootClass.getInterfaces();</span><br><span class="line">      <span class="keyword">for</span> (Class&lt;?&gt; additionalInterface : additionalInterfaces) &#123;</span><br><span class="line">        <span class="keyword">this</span>.advised.addInterface(additionalInterface);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Validate the class, writing log messages as necessary.</span></span><br><span class="line">    validateClassIfNecessary(proxySuperClass, classLoader);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Configure CGLIB Enhancer...</span></span><br><span class="line">    Enhancer enhancer = createEnhancer();</span><br><span class="line">    <span class="keyword">if</span> (classLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">      enhancer.setClassLoader(classLoader);</span><br><span class="line">      <span class="keyword">if</span> (classLoader <span class="keyword">instanceof</span> SmartClassLoader &amp;&amp;</span><br><span class="line">          ((SmartClassLoader) classLoader).isClassReloadable(proxySuperClass)) &#123;</span><br><span class="line">        enhancer.setUseCache(<span class="keyword">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 父类</span></span><br><span class="line">    enhancer.setSuperclass(proxySuperClass);</span><br><span class="line">    <span class="comment">// 实现的接口</span></span><br><span class="line">    enhancer.setInterfaces(AopProxyUtils.completeProxiedInterfaces(<span class="keyword">this</span>.advised));</span><br><span class="line">    <span class="comment">// 代理类的命名规则</span></span><br><span class="line">    enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE);</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    enhancer.setStrategy(<span class="keyword">new</span> ClassLoaderAwareUndeclaredThrowableStrategy(classLoader));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// callback数组，这个顺序要和CallBackFilter对应起来</span></span><br><span class="line">    Callback[] callbacks = getCallbacks(rootClass);</span><br><span class="line">    <span class="comment">// callback的类型</span></span><br><span class="line">    Class&lt;?&gt;[] types = <span class="keyword">new</span> Class&lt;?&gt;[callbacks.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; types.length; x++) &#123;</span><br><span class="line">      types[x] = callbacks[x].getClass();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// fixedInterceptorMap only populated at this point, after getCallbacks call above</span></span><br><span class="line">    <span class="comment">// callback对应的filter，filter的返回值决定了使用哪个下表的Callback</span></span><br><span class="line">    enhancer.setCallbackFilter(<span class="keyword">new</span> ProxyCallbackFilter(</span><br><span class="line">      <span class="keyword">this</span>.advised.getConfigurationOnlyCopy(), <span class="keyword">this</span>.fixedInterceptorMap, <span class="keyword">this</span>.fixedInterceptorOffset));</span><br><span class="line">    <span class="comment">// callback的类型</span></span><br><span class="line">    enhancer.setCallbackTypes(types);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate the proxy class and create a proxy instance.</span></span><br><span class="line">    <span class="comment">// 生成代理类和实例</span></span><br><span class="line">    <span class="keyword">return</span> createProxyClassAndInstance(enhancer, callbacks);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (CodeGenerationException ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">"Could not generate CGLIB subclass of class ["</span> +</span><br><span class="line">                                 <span class="keyword">this</span>.advised.getTargetClass() + <span class="string">"]: "</span> +</span><br><span class="line">                                 <span class="string">"Common causes of this problem include using a final class or a non-visible class"</span>,</span><br><span class="line">                                 ex);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">"Could not generate CGLIB subclass of class ["</span> +</span><br><span class="line">                                 <span class="keyword">this</span>.advised.getTargetClass() + <span class="string">"]: "</span> +</span><br><span class="line">                                 <span class="string">"Common causes of this problem include using a final class or a non-visible class"</span>,</span><br><span class="line">                                 ex);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">    <span class="comment">// TargetSource.getTarget() failed</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">"Unexpected AOP exception"</span>, ex);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里主要关注下Callback和CallbackFilter:</p><h4 id="Callback"><a href="#Callback" class="headerlink" title="Callback"></a>Callback</h4><p>callback里就是拦截的逻辑，spring支持多种，最常用的就是<code>MethodInterceptor</code>：</p><img src="/2021/03/10/spring-aop/image-20210310001935402.png"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.aop.framework.CglibAopProxy#getCallbacks</span></span><br><span class="line"><span class="keyword">private</span> Callback[] getCallbacks(Class&lt;?&gt; rootClass) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  <span class="comment">// Parameters used for optimisation choices...</span></span><br><span class="line">  <span class="comment">// 是否暴露代理类</span></span><br><span class="line">  <span class="keyword">boolean</span> exposeProxy = <span class="keyword">this</span>.advised.isExposeProxy();</span><br><span class="line">  <span class="comment">// 配置是否已经不可改</span></span><br><span class="line">  <span class="keyword">boolean</span> isFrozen = <span class="keyword">this</span>.advised.isFrozen();</span><br><span class="line">  <span class="comment">// 是否静态，静态就是每次调用getTarget返回的都是同一个对象，动态就是每次返回的可能不一样</span></span><br><span class="line">  <span class="keyword">boolean</span> isStatic = <span class="keyword">this</span>.advised.getTargetSource().isStatic();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Choose an "aop" interceptor (used for AOP calls).</span></span><br><span class="line">  <span class="comment">// 1、最常用的Interceptor</span></span><br><span class="line">  Callback aopInterceptor = <span class="keyword">new</span> DynamicAdvisedInterceptor(<span class="keyword">this</span>.advised);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Choose a "straight to target" interceptor. (used for calls that are</span></span><br><span class="line">  <span class="comment">// unadvised but can return this). May be required to expose the proxy.</span></span><br><span class="line">  <span class="comment">// 2、这里区分动态的TargetSource和静态的，动态的比如底层是对象池，每次getTarget()都是不同的对象</span></span><br><span class="line">  <span class="comment">// Dynamic的每次用完还需要releaseTarget</span></span><br><span class="line">  Callback targetInterceptor;</span><br><span class="line">  <span class="keyword">if</span> (exposeProxy) &#123;</span><br><span class="line">    targetInterceptor = isStatic ?</span><br><span class="line">      <span class="keyword">new</span> StaticUnadvisedExposedInterceptor(<span class="keyword">this</span>.advised.getTargetSource().getTarget()) :</span><br><span class="line">    <span class="keyword">new</span> DynamicUnadvisedExposedInterceptor(<span class="keyword">this</span>.advised.getTargetSource());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    targetInterceptor = isStatic ?</span><br><span class="line">      <span class="keyword">new</span> StaticUnadvisedInterceptor(<span class="keyword">this</span>.advised.getTargetSource().getTarget()) :</span><br><span class="line">    <span class="keyword">new</span> DynamicUnadvisedInterceptor(<span class="keyword">this</span>.advised.getTargetSource());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Choose a "direct to target" dispatcher (used for</span></span><br><span class="line">  <span class="comment">// unadvised calls to static targets that cannot return this).</span></span><br><span class="line">  <span class="comment">// 3. </span></span><br><span class="line">  Callback targetDispatcher = isStatic ?</span><br><span class="line">    <span class="keyword">new</span> StaticDispatcher(<span class="keyword">this</span>.advised.getTargetSource().getTarget()) : <span class="keyword">new</span> SerializableNoOp();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 主要的几个callback</span></span><br><span class="line">  Callback[] mainCallbacks = <span class="keyword">new</span> Callback[] &#123;</span><br><span class="line">    aopInterceptor,  <span class="comment">// for normal advice</span></span><br><span class="line">    targetInterceptor,  <span class="comment">// invoke target without considering advice, if optimized</span></span><br><span class="line">    <span class="keyword">new</span> SerializableNoOp(),  <span class="comment">// no override for methods mapped to this</span></span><br><span class="line">    targetDispatcher, <span class="keyword">this</span>.advisedDispatcher,</span><br><span class="line">    <span class="keyword">new</span> EqualsInterceptor(<span class="keyword">this</span>.advised),</span><br><span class="line">    <span class="keyword">new</span> HashCodeInterceptor(<span class="keyword">this</span>.advised)</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  Callback[] callbacks;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If the target is a static one and the advice chain is frozen,</span></span><br><span class="line">  <span class="comment">// then we can make some optimisations by sending the AOP calls</span></span><br><span class="line">  <span class="comment">// direct to the target using the fixed chain for that method.</span></span><br><span class="line">  <span class="comment">// 优化逻辑，tldr</span></span><br><span class="line">  <span class="keyword">if</span> (isStatic &amp;&amp; isFrozen) &#123;</span><br><span class="line">    Method[] methods = rootClass.getMethods();</span><br><span class="line">    Callback[] fixedCallbacks = <span class="keyword">new</span> Callback[methods.length];</span><br><span class="line">    <span class="keyword">this</span>.fixedInterceptorMap = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;(methods.length);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> small memory optimisation here (can skip creation for methods with no advice)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; methods.length; x++) &#123;</span><br><span class="line">      List&lt;Object&gt; chain = <span class="keyword">this</span>.advised.getInterceptorsAndDynamicInterceptionAdvice(methods[x], rootClass);</span><br><span class="line">      fixedCallbacks[x] = <span class="keyword">new</span> FixedChainStaticTargetInterceptor(</span><br><span class="line">        chain, <span class="keyword">this</span>.advised.getTargetSource().getTarget(), <span class="keyword">this</span>.advised.getTargetClass());</span><br><span class="line">      <span class="keyword">this</span>.fixedInterceptorMap.put(methods[x].toString(), x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Now copy both the callbacks from mainCallbacks</span></span><br><span class="line">    <span class="comment">// and fixedCallbacks into the callbacks array.</span></span><br><span class="line">    callbacks = <span class="keyword">new</span> Callback[mainCallbacks.length + fixedCallbacks.length];</span><br><span class="line">    System.arraycopy(mainCallbacks, <span class="number">0</span>, callbacks, <span class="number">0</span>, mainCallbacks.length);</span><br><span class="line">    System.arraycopy(fixedCallbacks, <span class="number">0</span>, callbacks, mainCallbacks.length, fixedCallbacks.length);</span><br><span class="line">    <span class="keyword">this</span>.fixedInterceptorOffset = mainCallbacks.length;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    callbacks = mainCallbacks;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> callbacks;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CallbackFilter"><a href="#CallbackFilter" class="headerlink" title="CallbackFilter"></a>CallbackFilter</h4><p>再看<code>CallbackFilter</code>:</p><blockquote><p>Implementation of CallbackFilter.accept() to return the index of the callback we need.</p></blockquote><p><code>CallbackFilter</code>就是根据调用的方法名称，来dispatch到不同的callback上，从而实现不同方法不同的拦截</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.aop.framework.CglibAopProxy.ProxyCallbackFilter#accept</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implementation of CallbackFilter.accept() to return the index of the</span></span><br><span class="line"><span class="comment"> * callback we need.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The callbacks for each proxy are built up of a set of fixed callbacks</span></span><br><span class="line"><span class="comment"> * for general use and then a set of callbacks that are specific to a method</span></span><br><span class="line"><span class="comment"> * for use on static targets with a fixed advice chain.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The callback used is determined thus:</span></span><br><span class="line"><span class="comment"> * &lt;dl&gt;</span></span><br><span class="line"><span class="comment"> * &lt;dt&gt;For exposed proxies&lt;/dt&gt;</span></span><br><span class="line"><span class="comment"> * &lt;dd&gt;Exposing the proxy requires code to execute before and after the</span></span><br><span class="line"><span class="comment"> * method/chain invocation. This means we must use</span></span><br><span class="line"><span class="comment"> * DynamicAdvisedInterceptor, since all other interceptors can avoid the</span></span><br><span class="line"><span class="comment"> * need for a try/catch block&lt;/dd&gt;</span></span><br><span class="line"><span class="comment"> * &lt;dt&gt;For Object.finalize():&lt;/dt&gt;</span></span><br><span class="line"><span class="comment"> * &lt;dd&gt;No override for this method is used.&lt;/dd&gt;</span></span><br><span class="line"><span class="comment"> * &lt;dt&gt;For equals():&lt;/dt&gt;</span></span><br><span class="line"><span class="comment"> * &lt;dd&gt;The EqualsInterceptor is used to redirect equals() calls to a</span></span><br><span class="line"><span class="comment"> * special handler to this proxy.&lt;/dd&gt;</span></span><br><span class="line"><span class="comment"> * &lt;dt&gt;For methods on the Advised class:&lt;/dt&gt;</span></span><br><span class="line"><span class="comment"> * &lt;dd&gt;the AdvisedDispatcher is used to dispatch the call directly to</span></span><br><span class="line"><span class="comment"> * the target&lt;/dd&gt;</span></span><br><span class="line"><span class="comment"> * &lt;dt&gt;For advised methods:&lt;/dt&gt;</span></span><br><span class="line"><span class="comment"> * &lt;dd&gt;If the target is static and the advice chain is frozen then a</span></span><br><span class="line"><span class="comment"> * FixedChainStaticTargetInterceptor specific to the method is used to</span></span><br><span class="line"><span class="comment"> * invoke the advice chain. Otherwise a DynamicAdvisedInterceptor is</span></span><br><span class="line"><span class="comment"> * used.&lt;/dd&gt;</span></span><br><span class="line"><span class="comment"> * &lt;dt&gt;For non-advised methods:&lt;/dt&gt;</span></span><br><span class="line"><span class="comment"> * &lt;dd&gt;Where it can be determined that the method will not return &#123;<span class="doctag">@code</span> this&#125;</span></span><br><span class="line"><span class="comment"> * or when &#123;<span class="doctag">@code</span> ProxyFactory.getExposeProxy()&#125; returns &#123;<span class="doctag">@code</span> false&#125;,</span></span><br><span class="line"><span class="comment"> * then a Dispatcher is used. For static targets, the StaticDispatcher is used;</span></span><br><span class="line"><span class="comment"> * and for dynamic targets, a DynamicUnadvisedInterceptor is used.</span></span><br><span class="line"><span class="comment"> * If it possible for the method to return &#123;<span class="doctag">@code</span> this&#125; then a</span></span><br><span class="line"><span class="comment"> * StaticUnadvisedInterceptor is used for static targets - the</span></span><br><span class="line"><span class="comment"> * DynamicUnadvisedInterceptor already considers this.&lt;/dd&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/dl&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">accept</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// final方法不代理</span></span><br><span class="line">  <span class="keyword">if</span> (AopUtils.isFinalizeMethod(method)) &#123;</span><br><span class="line">    logger.trace(<span class="string">"Found finalize() method - using NO_OVERRIDE"</span>);</span><br><span class="line">    <span class="keyword">return</span> NO_OVERRIDE;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 允许代理类被转为Advised, 且方法是Advised接口声明的</span></span><br><span class="line">  <span class="comment">// 直接走dispatcher，返回对应的Advised</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.advised.isOpaque() &amp;&amp; method.getDeclaringClass().isInterface() &amp;&amp;</span><br><span class="line">      method.getDeclaringClass().isAssignableFrom(Advised<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">      logger.trace(<span class="string">"Method is declared on Advised interface: "</span> + method);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> DISPATCH_ADVISED;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// We must always proxy equals, to direct calls to this.</span></span><br><span class="line">  <span class="comment">// Equals方法的代理</span></span><br><span class="line">  <span class="keyword">if</span> (AopUtils.isEqualsMethod(method)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">      logger.trace(<span class="string">"Found 'equals' method: "</span> + method);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> INVOKE_EQUALS;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// We must always calculate hashCode based on the proxy.</span></span><br><span class="line">  <span class="comment">// HashCode方法的代理</span></span><br><span class="line">  <span class="keyword">if</span> (AopUtils.isHashCodeMethod(method)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">      logger.trace(<span class="string">"Found 'hashCode' method: "</span> + method);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> INVOKE_HASHCODE;</span><br><span class="line">  &#125;</span><br><span class="line">  Class&lt;?&gt; targetClass = <span class="keyword">this</span>.advised.getTargetClass();</span><br><span class="line">  <span class="comment">// Proxy is not yet available, but that shouldn't matter.</span></span><br><span class="line">  List&lt;?&gt; chain = <span class="keyword">this</span>.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);</span><br><span class="line">  <span class="keyword">boolean</span> haveAdvice = !chain.isEmpty();</span><br><span class="line">  <span class="keyword">boolean</span> exposeProxy = <span class="keyword">this</span>.advised.isExposeProxy();</span><br><span class="line">  <span class="keyword">boolean</span> isStatic = <span class="keyword">this</span>.advised.getTargetSource().isStatic();</span><br><span class="line">  <span class="keyword">boolean</span> isFrozen = <span class="keyword">this</span>.advised.isFrozen();</span><br><span class="line">  <span class="comment">// 有advice，或者配置还能改</span></span><br><span class="line">  <span class="keyword">if</span> (haveAdvice || !isFrozen) &#123;</span><br><span class="line">    <span class="comment">// If exposing the proxy, then AOP_PROXY must be used.</span></span><br><span class="line">    <span class="keyword">if</span> (exposeProxy) &#123;</span><br><span class="line">      <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(<span class="string">"Must expose proxy on advised method: "</span> + method);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> AOP_PROXY;</span><br><span class="line">    &#125;</span><br><span class="line">    String key = method.toString();</span><br><span class="line">    <span class="comment">// Check to see if we have fixed interceptor to serve this method.</span></span><br><span class="line">    <span class="comment">// Else use the AOP_PROXY.</span></span><br><span class="line">    <span class="comment">// 优化逻辑，暂时不看</span></span><br><span class="line">    <span class="keyword">if</span> (isStatic &amp;&amp; isFrozen &amp;&amp; <span class="keyword">this</span>.fixedInterceptorMap.containsKey(key)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(<span class="string">"Method has advice and optimizations are enabled: "</span> + method);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// We know that we are optimizing so we can use the FixedStaticChainInterceptors.</span></span><br><span class="line">      <span class="keyword">int</span> index = <span class="keyword">this</span>.fixedInterceptorMap.get(key);</span><br><span class="line">      <span class="keyword">return</span> (index + <span class="keyword">this</span>.fixedInterceptorOffset);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(<span class="string">"Unable to apply any optimizations to advised method: "</span> + method);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> AOP_PROXY;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// See if the return type of the method is outside the class hierarchy of the target type.</span></span><br><span class="line">    <span class="comment">// If so we know it never needs to have return type massage and can use a dispatcher.</span></span><br><span class="line">    <span class="comment">// If the proxy is being exposed, then must use the interceptor the correct one is already</span></span><br><span class="line">    <span class="comment">// configured. If the target is not static, then we cannot use a dispatcher because the</span></span><br><span class="line">    <span class="comment">// target needs to be explicitly released after the invocation.</span></span><br><span class="line">    <span class="keyword">if</span> (exposeProxy || !isStatic) &#123;</span><br><span class="line">      <span class="keyword">return</span> INVOKE_TARGET;</span><br><span class="line">    &#125;</span><br><span class="line">    Class&lt;?&gt; returnType = method.getReturnType();</span><br><span class="line">    <span class="keyword">if</span> (targetClass != <span class="keyword">null</span> &amp;&amp; returnType.isAssignableFrom(targetClass)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(<span class="string">"Method return type is assignable from target type and "</span> +</span><br><span class="line">                     <span class="string">"may therefore return 'this' - using INVOKE_TARGET: "</span> + method);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> INVOKE_TARGET;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(<span class="string">"Method return type ensures 'this' cannot be returned - "</span> +</span><br><span class="line">                     <span class="string">"using DISPATCH_TARGET: "</span> + method);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> DISPATCH_TARGET;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/03/10/spring-aop/image-20210309202927411.png"><h4 id="再看AdvisedDispatcher"><a href="#再看AdvisedDispatcher" class="headerlink" title="再看AdvisedDispatcher"></a>再看AdvisedDispatcher</h4><p><code>AdvisedDispatcher</code>每次返回的都是<code>AdvisedSupport</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.aop.framework.CglibAopProxy.AdvisedDispatcher</span></span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * Dispatcher for any methods declared on the Advised class.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AdvisedDispatcher</span> <span class="keyword">implements</span> <span class="title">Dispatcher</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> AdvisedSupport advised;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">AdvisedDispatcher</span><span class="params">(AdvisedSupport advised)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.advised = advised;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 每次方法调用都会走这里</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">loadObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.advised;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.aop.framework.CglibAopProxy.StaticDispatcher</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Dispatcher for a static target. Dispatcher is much faster than</span></span><br><span class="line"><span class="comment"> * interceptor. This will be used whenever it can be determined that a</span></span><br><span class="line"><span class="comment"> * method definitely does not return "this"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticDispatcher</span> <span class="keyword">implements</span> <span class="title">Dispatcher</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">StaticDispatcher</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.target = target;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">loadObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.target;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以将代理对象转成Advised，测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCastToAdvised</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(AopConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="keyword">final</span> Foo foo = context.getBean(Foo<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  log.info(<span class="string">"foo class is &#123;&#125;"</span>, foo.getClass()</span><br><span class="line">           .getSimpleName());</span><br><span class="line">  foo.hello1();</span><br><span class="line">  foo.hello2();</span><br><span class="line">  <span class="keyword">final</span> Advised advised = (Advised)foo;</span><br><span class="line">  log.info(<span class="string">"advised &#123;&#125;"</span>, Arrays.toString(advised.getAdvisors()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">2021-03-10 01:04:34.103[main][INFO ]o.s.c.a.AnnotationConfigApplicationContext.prepareRefresh:582 Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@5f2108b5: startup date [Wed Mar 10 01:04:34 CST 2021]; root of context hierarchy</span><br><span class="line">2021-03-10 01:04:34.576[main][INFO ]c.a.s.a.Foo.init:22 init foo</span><br><span class="line">2021-03-10 01:04:34.730[main][INFO ]c.a.s.a.AopTest.testCastToAdvised:55 foo class is Foo$<span class="variable">$EnhancerBySpringCGLIB</span>$<span class="variable">$ce661b8a</span></span><br><span class="line">2021-03-10 01:04:34.744[main][INFO ]c.a.s.a.Foo.hello1:26 hello1</span><br><span class="line">2021-03-10 01:04:34.745[main][INFO ]c.a.s.a.PerformanceTraceAspect.tracePerformance:31 hello1 total cost 9 ms</span><br><span class="line">2021-03-10 01:04:34.745[main][INFO ]c.a.s.a.Foo.hello2:30 hello2</span><br><span class="line">2021-03-10 01:04:34.756[main][INFO ]c.a.s.a.HelloImpl.sayHello:15 haha</span><br><span class="line">2021-03-10 01:04:34.756[main][INFO ]c.a.s.a.PerformanceTraceAspect.tracePerformance:31 hello2 total cost 11 ms</span><br><span class="line">2021-03-10 01:04:34.757[main][INFO ]c.a.s.a.AopTest.testCastToAdvised:60 advised [org.springframework.aop.interceptor.ExposeInvocationInterceptor.ADVISOR, InstantiationModelAwarePointcutAdvisor: expression [pointCut()]; advice method [public java.lang.Object com.air.spring.aop.PerformanceTraceAspect.tracePerformance(org.aspectj.lang.ProceedingJoinPoint) throws java.lang.Throwable]; perClauseKind=SINGLETON]</span><br></pre></td></tr></table></figure><img src="/2021/03/10/spring-aop/image-20210310011207987.png"><h2 id="AOP的用途"><a href="#AOP的用途" class="headerlink" title="AOP的用途"></a>AOP的用途</h2><p>aop在spring中的用途非常广泛，比如注解事务的实现、Lazy初始化的实现等等。这里看几个简单的例子。</p><h3 id="Lazy实现"><a href="#Lazy实现" class="headerlink" title="@Lazy实现"></a>@Lazy实现</h3><p>lazy初始化的，也是生成了代理类，在实际调用方法时才会去做初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.context.annotation.CommonAnnotationBeanPostProcessor#buildLazyResourceProxy</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Obtain a lazily resolving resource proxy for the given name and type,</span></span><br><span class="line"><span class="comment"> * delegating to &#123;<span class="doctag">@link</span> #getResource&#125; on demand once a method call comes in.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element the descriptor for the annotated field/method</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> requestingBeanName the name of the requesting bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the resource object (never &#123;<span class="doctag">@code</span> null&#125;)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 4.2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #getResource</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Lazy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">buildLazyResourceProxy</span><span class="params">(<span class="keyword">final</span> LookupElement element, <span class="keyword">final</span> String requestingBeanName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 匿名的TargetSource</span></span><br><span class="line">    TargetSource ts = <span class="keyword">new</span> TargetSource() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> Class&lt;?&gt; getTargetClass() &#123;</span><br><span class="line">        <span class="keyword">return</span> element.lookupType;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isStatic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Object <span class="title">getTarget</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里实际去加载对应的类</span></span><br><span class="line">        <span class="keyword">return</span> getResource(element, requestingBeanName);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">releaseTarget</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 生成代理类</span></span><br><span class="line">    ProxyFactory pf = <span class="keyword">new</span> ProxyFactory();</span><br><span class="line">    pf.setTargetSource(ts);</span><br><span class="line">    <span class="keyword">if</span> (element.lookupType.isInterface()) &#123;</span><br><span class="line">      pf.addInterface(element.lookupType);</span><br><span class="line">    &#125;</span><br><span class="line">    ClassLoader classLoader = (<span class="keyword">this</span>.beanFactory <span class="keyword">instanceof</span> ConfigurableBeanFactory ?</span><br><span class="line">                               ((ConfigurableBeanFactory) <span class="keyword">this</span>.beanFactory).getBeanClassLoader() : <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">return</span> pf.getProxy(classLoader);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="Config配置类代理"><a href="#Config配置类代理" class="headerlink" title="Config配置类代理"></a>Config配置类代理</h3><p>有的系统有些祖传代码，写成这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> HuiPingDataSourceIdsBean <span class="title">getHuiPingDataSourceIdsBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HuiPingDataSourceIdsBean();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明看起来是没有问题的，使用的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String dataSourceId = appConfig.getHuiPingDataSourceIdsBean().getDataSourceId();</span><br></pre></td></tr></table></figure><p>那么这个<code>HuiPingDataSourceIdsBean</code> 会创建多次吗？答案是并不会，原因就是这个方法被代理了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.context.annotation.ConfigurationClassPostProcessor#enhanceConfigurationClasses</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Post-processes a BeanFactory in search of Configuration class BeanDefinitions;</span></span><br><span class="line"><span class="comment"> * any candidates are then enhanced by a &#123;<span class="doctag">@link</span> ConfigurationClassEnhancer&#125;.</span></span><br><span class="line"><span class="comment"> * Candidate status is determined by BeanDefinition attribute metadata.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> ConfigurationClassEnhancer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enhanceConfigurationClasses</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">  Map&lt;String, AbstractBeanDefinition&gt; configBeanDefs = <span class="keyword">new</span> LinkedHashMap&lt;String, AbstractBeanDefinition&gt;();</span><br><span class="line">  <span class="comment">// 遍历当前的bean</span></span><br><span class="line">  <span class="keyword">for</span> (String beanName : beanFactory.getBeanDefinitionNames()) &#123;</span><br><span class="line">    BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName);</span><br><span class="line">    <span class="comment">// 如果是full Configuration的标记了@Configuration</span></span><br><span class="line">    <span class="keyword">if</span> (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!(beanDef <span class="keyword">instanceof</span> AbstractBeanDefinition)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(<span class="string">"Cannot enhance @Configuration bean definition '"</span> +</span><br><span class="line">                                               beanName + <span class="string">"' since it is not stored in an AbstractBeanDefinition subclass"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (logger.isWarnEnabled() &amp;&amp; beanFactory.containsSingleton(beanName)) &#123;</span><br><span class="line">        logger.warn(<span class="string">"Cannot enhance @Configuration bean definition '"</span> + beanName +</span><br><span class="line">                    <span class="string">"' since its singleton instance has been created too early. The typical cause "</span> +</span><br><span class="line">                    <span class="string">"is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor "</span> +</span><br><span class="line">                    <span class="string">"return type: Consider declaring such methods as 'static'."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 加入到待处理集合</span></span><br><span class="line">      configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (configBeanDefs.isEmpty()) &#123;</span><br><span class="line">    <span class="comment">// nothing to enhance -&gt; return immediately</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 这里出现了enhancer，内部是cglib的enhancer</span></span><br><span class="line">  ConfigurationClassEnhancer enhancer = <span class="keyword">new</span> ConfigurationClassEnhancer();</span><br><span class="line">  <span class="keyword">for</span> (Map.Entry&lt;String, AbstractBeanDefinition&gt; entry : configBeanDefs.entrySet()) &#123;</span><br><span class="line">    AbstractBeanDefinition beanDef = entry.getValue();</span><br><span class="line">    <span class="comment">// If a @Configuration class gets proxied, always proxy the target class</span></span><br><span class="line">    beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// Set enhanced subclass of the user-specified bean class</span></span><br><span class="line">      Class&lt;?&gt; configClass = beanDef.resolveBeanClass(<span class="keyword">this</span>.beanClassLoader);</span><br><span class="line">      <span class="comment">// 生成增强类</span></span><br><span class="line">      Class&lt;?&gt; enhancedClass = enhancer.enhance(configClass, <span class="keyword">this</span>.beanClassLoader);</span><br><span class="line">      <span class="keyword">if</span> (configClass != enhancedClass) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">          logger.debug(String.format(<span class="string">"Replacing bean definition '%s' existing class '%s' with "</span> +</span><br><span class="line">                                     <span class="string">"enhanced class '%s'"</span>, entry.getKey(), configClass.getName(), enhancedClass.getName()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 替换为增强类</span></span><br><span class="line">        beanDef.setBeanClass(enhancedClass);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot load configuration class: "</span> + beanDef.getBeanClassName(), ex);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConfigurationProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(AopConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="keyword">final</span> AopConfig aopConfig = context.getBean(AopConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  log.info(<span class="string">"aopConfig class = &#123;&#125;"</span>, aopConfig.getClass());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2021-03-09 16:04:16.978[main][INFO ]c.a.s.a.AopTest.testConfigurationProxy:132 aopConfig class = class com.air.spring.aop.AopConfig$<span class="variable">$EnhancerBySpringCGLIB</span>$<span class="variable">$b88034a1</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://my.oschina.net/mn1127/blog/649006?p=1" rel="external nofollow noopener noreferrer" target="_blank">实战CGLib系列之proxy篇(二)：回调过滤CallbackFilter - mn_1127的个人空间 - OSCHINA - 中文开源技术交流社区</a></li><li><a href="https://blog.csdn.net/zhang6622056/article/details/87286498" rel="external nofollow noopener noreferrer" target="_blank">死磕cglib系列之一 cglib简介与callback解析_zhang6622056的专栏-CSDN博客</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Spring-Aop是spring提供的面向切面编程的工具，spring的好多功能也是基于切面来实现。切面编程可以将分散的逻辑集中在切面中，便于代码的维护。&lt;/p&gt;
&lt;h2 id=&quot;AOP使用&quot;&gt;&lt;a href=&quot;#AOP使用&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="spring" scheme="http://qsli.github.io/categories/spring/"/>
    
    
      <category term="spring-aop" scheme="http://qsli.github.io/tags/spring-aop/"/>
    
  </entry>
  
  <entry>
    <title>spring-validator源码分析</title>
    <link href="http://qsli.github.io/2021/03/05/spring-validator/"/>
    <id>http://qsli.github.io/2021/03/05/spring-validator/</id>
    <published>2021-03-05T06:56:11.000Z</published>
    <updated>2021-03-06T16:59:25.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSR-303和JSR-349"><a href="#JSR-303和JSR-349" class="headerlink" title="JSR-303和JSR-349"></a>JSR-303和JSR-349</h1><h2 id="jsr-303：——Bean-Validation-1-0"><a href="#jsr-303：——Bean-Validation-1-0" class="headerlink" title="jsr-303：——Bean Validation 1.0"></a><code>jsr-303</code>：——Bean Validation 1.0</h2><blockquote><p>This document is the specification of the Java API for JavaBean validation in Java EE and Java SE. The technical objective of this work is to <strong>provide a class level constraint declaration and validation facility</strong> for the Java application developer, as well as a <strong>constraint metadata</strong> repository and query API.</p></blockquote><p>目标：</p><blockquote><p>Validating data is a common task that occurs throughout an application, <strong>from the presentation layer to the persistence layer.</strong> Often the same validation logic is implemented in each layer, proving to be time consuming and error-prone. To avoid duplication of these validations in each layer, developers often bundle validation logic directly into the <strong>domain model</strong>, cluttering domain classes with validation code that is, <strong>in fact, metadata about the class itself.</strong></p><p>This JSR <strong>defines a metadata model and API for JavaBean validation</strong>. The default metadata source is annotations, with the ability to override and extend the meta-data through the use of XML validation descriptors.</p><p>The validation API developed by this JSR is not intended for use in any one tier or programming model. It is specifically not tied to either the web tier or the persistence tier, and is <strong>available for both server-side application programming, as well as rich client Swing application developers.</strong> This API is seen as a <strong>general extension to the JavaBeans object model,</strong> and as such is expected to be used as a core component in other specifications. Ease of use and flexibility have influenced the design of this specification.</p></blockquote><p>如果同样的校验逻辑会在每个层都存在，就会很容易出bug，而且写起来也很耗时；一般的做法是将校验逻辑带入领域层，但是这些校验逻辑只是对应类的一种元数据；JSR-303就是一种描述这种元数据的方式。用他们的口号来说，就是：</p><blockquote><p> Constrain once, validate everywhere</p></blockquote><h2 id="jsr-349——Bean-Validation-1-1："><a href="#jsr-349——Bean-Validation-1-1：" class="headerlink" title="jsr-349——Bean Validation 1.1："></a><code>jsr-349</code>——Bean Validation 1.1：</h2><blockquote><p>Bean Validation 1.1 focused on the following topics:</p></blockquote><ul><li>openness of the specification and its process</li><li>method-level validation (validation of parameters or return values)</li><li>dependency injection for Bean Validation components</li><li>integration with Context and Dependency Injection (CDI)</li><li>group conversion</li><li>error message interpolation using EL expressions</li></ul><p>1.1支持了方法级别的校验。</p><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><img src="/2021/03/05/spring-validator/image-20210303162356732.png"><h3 id="第一种启动方式（Xml-Config-or-Default）："><a href="#第一种启动方式（Xml-Config-or-Default）：" class="headerlink" title="第一种启动方式（Xml Config or Default）："></a>第一种启动方式（Xml Config or Default）：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ValidatorFactory factory = Validation.buildDefaultValidatorFactory();</span><br></pre></td></tr></table></figure><p>这种情况下， validator的提供是通过：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* The chosen provider is defined as followed:</span><br><span class="line">*     &lt;ul&gt;</span><br><span class="line">*         &lt;li&gt;if the XML configuration defines a provider, this provider is used&lt;/li&gt;</span><br><span class="line">*         &lt;li&gt;if the XML configuration does not define a provider or if no XML</span><br><span class="line">*         configuration is present the first provider returned by the</span><br><span class="line">*         &#123;@link ValidationProviderResolver&#125; instance is used.&lt;/li&gt;</span><br><span class="line">*     &lt;/ul&gt;</span><br><span class="line">**/</span><br></pre></td></tr></table></figure><ul><li>优先使用xml的配置：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//javax.validation.Configuration</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p/&gt;</span></span><br><span class="line"><span class="comment"> * By default, the configuration information is retrieved from</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> META-INF/validation.xml&#125;.</span></span><br><span class="line"><span class="comment"> * It is possible to override the configuration retrieved from the XML file</span></span><br><span class="line"><span class="comment"> * by using one or more of the &#123;<span class="doctag">@code</span> Configuration&#125; methods.</span></span><br><span class="line"><span class="comment"> * &lt;p/&gt;</span></span><br><span class="line"><span class="comment"> **/</span></span><br></pre></td></tr></table></figure><p><code>validation.xml</code>配置示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">validation-config</span> <span class="attr">xmlns</span>=<span class="string">"http://jboss.org/xml/ns/javax/validation/configuration"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://jboss.org/xml/ns/javax/validation/configuration"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">default-provider</span>&gt;</span>org.hibernate.validator.HibernateValidator<span class="tag">&lt;/<span class="name">default-provider</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">message-interpolator</span>&gt;</span>org.hibernate.validator.engine.ResourceBundleMessageInterpolator<span class="tag">&lt;/<span class="name">message-interpolator</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">traversable-resolver</span>&gt;</span>org.hibernate.validator.engine.resolver.DefaultTraversableResolver<span class="tag">&lt;/<span class="name">traversable-resolver</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constraint-validator-factory</span>&gt;</span>org.hibernate.validator.engine.ConstraintValidatorFactoryImpl<span class="tag">&lt;/<span class="name">constraint-validator-factory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constraint-mapping</span>&gt;</span>/constraints-car.xml<span class="tag">&lt;/<span class="name">constraint-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prop1"</span>&gt;</span>value1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prop2"</span>&gt;</span>value2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">validation-config</span>&gt;</span></span><br></pre></td></tr></table></figure>  <img src="/2021/03/05/spring-validator/image-20210303181653486.png"><ul><li>如果没有，就取SPI加载的第一个provider的配置：</li></ul><blockquote><p>Bean Validation providers are identified by the presence of<br>{@code META-INF/services/javax.validation.spi.ValidationProvider}</p></blockquote><img src="/2021/03/05/spring-validator/image-20210303181422423.png"><p>一般都是用的这种方式</p><h3 id="第二种启动方式（Java-Config）："><a href="#第二种启动方式（Java-Config）：" class="headerlink" title="第二种启动方式（Java Config）："></a>第二种启动方式（Java Config）：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Configuration&lt;?&gt; configuration = Validation</span><br><span class="line">                                .byDefaultProvider()</span><br><span class="line">                                .providerResolver( <span class="keyword">new</span> MyResolverStrategy() )</span><br><span class="line">                                .configure();</span><br><span class="line">ValidatorFactory factory = configuration.buildValidatorFactory();</span><br></pre></td></tr></table></figure><p>可以配置一个自定义的<code>provider resolver</code>，来决定使用哪个validator。</p><p>xml的配置，可以通过编程的方式调用<code>javax.validation.Configuration</code>来实现. 另外, 你可以通过<br>API的方式来重写xml中的配置信息, 也可以通过调用 <code>Configuration.ignoreXmlConfiguration()</code>来完全的忽略掉xml的配置信息. </p><h3 id="第三种启动方式"><a href="#第三种启动方式" class="headerlink" title="第三种启动方式"></a>第三种启动方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ACMEConfiguration configuration = Validation</span><br><span class="line">   .byProvider(ACMEProvider<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">   .<span class="title">providerResolver</span>( <span class="title">new</span> <span class="title">MyResolverStrategy</span>() )  // <span class="title">optionally</span> <span class="title">set</span> <span class="title">the</span> <span class="title">provider</span> <span class="title">resolver</span></span></span><br><span class="line"><span class="class">   .<span class="title">configure</span>()</span>;</span><br><span class="line">ValidatorFactory factory = configuration.buildValidatorFactory();</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>定义好Constraint：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.air.validation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.air.validation.custom.CaseMode;</span><br><span class="line"><span class="keyword">import</span> com.air.validation.custom.CheckCase;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Max;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Min;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Size;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 代故</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/3 11:31 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String manufacturer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Size</span>(min = <span class="number">2</span>, max = <span class="number">14</span>)</span><br><span class="line">    <span class="meta">@CheckCase</span>(CaseMode.UPPER)</span><br><span class="line">    <span class="keyword">private</span> String licensePlate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> seatCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 嵌套校验</span></span><br><span class="line"><span class="comment">     * 如果标注了<span class="doctag">@Valid</span>, 那么当主对象被校验的时候,这些集合对象中的元素都会被校验.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="keyword">private</span> Person driver;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(String manufacturer, String licensePlate, <span class="keyword">int</span> seatCount, Person driver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.manufacturer = manufacturer;</span><br><span class="line">        <span class="keyword">this</span>.licensePlate = licensePlate;</span><br><span class="line">        <span class="keyword">this</span>.seatCount = seatCount;</span><br><span class="line">        <span class="keyword">this</span>.driver = driver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(String manufacturer, String licensePlate, <span class="keyword">int</span> seatCount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.manufacturer = manufacturer;</span><br><span class="line">        <span class="keyword">this</span>.licensePlate = licensePlate;</span><br><span class="line">        <span class="keyword">this</span>.seatCount = seatCount;</span><br><span class="line">        <span class="keyword">this</span>.driver = <span class="keyword">new</span> Person(<span class="string">"default-driver"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">(@Max(<span class="number">75</span>)</span> <span class="keyword">int</span> speedInMph) </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"driving car at speed "</span> + speedInMph);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.air.validation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.HibernateValidator;</span><br><span class="line"><span class="keyword">import</span> org.junit.BeforeClass;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.internal.runners.JUnit4ClassRunner;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintViolation;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Validation;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Validator;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ValidatorFactory;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Max;</span><br><span class="line"><span class="keyword">import</span> javax.validation.executable.ExecutableValidator;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertEquals;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertNotNull;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 代故</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/3 11:33 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(JUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">CarTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Validator validator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ExecutableValidator executableValidator;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();</span></span><br><span class="line">        <span class="keyword">final</span> ValidatorFactory factory = Validation.byProvider(HibernateValidator<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">            .<span class="title">configure</span>()</span></span><br><span class="line"><span class="class">            .<span class="title">failFast</span>(<span class="title">false</span>)</span></span><br><span class="line"><span class="class">            .<span class="title">buildValidatorFactory</span>()</span>;</span><br><span class="line">        validator = factory.getValidator();</span><br><span class="line">        executableValidator = validator.forExecutables();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">manufacturerIsNull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Car car = <span class="keyword">new</span> Car(<span class="keyword">null</span>, <span class="string">"DD-AB-123"</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations = validator.validate(car);</span><br><span class="line"></span><br><span class="line">        assertEquals(<span class="number">1</span>, constraintViolations.size());</span><br><span class="line">        assertEquals(<span class="string">"may not be null"</span>, constraintViolations.iterator()</span><br><span class="line">            .next()</span><br><span class="line">            .getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">licensePlateTooShort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Car car = <span class="keyword">new</span> Car(<span class="string">"Morris"</span>, <span class="string">"D"</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations = validator.validate(car);</span><br><span class="line"></span><br><span class="line">        assertEquals(<span class="number">1</span>, constraintViolations.size());</span><br><span class="line">        assertEquals(<span class="string">"size must be between 2 and 14"</span>, constraintViolations.iterator()</span><br><span class="line">            .next()</span><br><span class="line">            .getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seatCountTooLow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Car car = <span class="keyword">new</span> Car(<span class="string">"Morris"</span>, <span class="string">"DD-AB-123"</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations = validator.validate(car);</span><br><span class="line"></span><br><span class="line">        assertEquals(<span class="number">1</span>, constraintViolations.size());</span><br><span class="line">        assertEquals(<span class="string">"must be greater than or equal to 2"</span>, constraintViolations.iterator()</span><br><span class="line">            .next()</span><br><span class="line">            .getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">carIsValid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Car car = <span class="keyword">new</span> Car(<span class="string">"Morris"</span>, <span class="string">"DD-AB-123"</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations = validator.validate(car);</span><br><span class="line"></span><br><span class="line">        assertEquals(<span class="number">0</span>, constraintViolations.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testValidatePerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Car car = <span class="keyword">new</span> Car(<span class="string">"Morris"</span>, <span class="string">"豫D-AAAAA"</span>, <span class="number">2</span>, <span class="keyword">new</span> Person(<span class="keyword">null</span>));</span><br><span class="line">        <span class="keyword">final</span> Set&lt;ConstraintViolation&lt;Car&gt;&gt; violations = validator.validate(car);</span><br><span class="line">        <span class="keyword">for</span> (ConstraintViolation&lt;Car&gt; violation: violations) &#123;</span><br><span class="line">            System.out.println(violation.getPropertyPath() + <span class="string">" -&gt; "</span> + violation.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        assertNotNull(violations);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * validateProperty() 和 validateValue() 会忽略被验证属性上定义的<span class="doctag">@Valid</span>.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testValidateValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        final Set&lt;ConstraintViolation&lt;Car&gt;&gt; violations = validator.validateValue(Car.class, "driver", new Person(null));</span><br><span class="line">        <span class="keyword">for</span> (ConstraintViolation&lt;Car&gt; violation: violations) &#123;</span><br><span class="line">            System.out.println(violation.getLeafBean().getClass().getSimpleName() + <span class="string">" -&gt; "</span> + violation.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        assertEquals(<span class="number">0</span>, violations.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLicensePlateNotUpperCase</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Car car = <span class="keyword">new</span> Car(<span class="string">"Morris"</span>, <span class="string">"dd-ab-123"</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations =</span><br><span class="line">            validator.validate(car);</span><br><span class="line">        assertEquals(<span class="number">1</span>, constraintViolations.size());</span><br><span class="line">        assertEquals(</span><br><span class="line">            <span class="string">"Case mode must be UPPER."</span>,</span><br><span class="line">            constraintViolations.iterator().next().getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDrivingCar</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException </span>&#123;</span><br><span class="line">        Car object = <span class="keyword">new</span> Car( <span class="string">"Morris"</span> ,<span class="string">"dd-ab-123"</span>, <span class="number">4</span>);</span><br><span class="line">        Method method = Car.class.getMethod( "drive", int.class );</span><br><span class="line">        Object[] parameterValues = &#123; <span class="number">80</span> &#125;;</span><br><span class="line">      <span class="comment">// 并没有触发实际的调用</span></span><br><span class="line">        Set&lt;ConstraintViolation&lt;Car&gt;&gt; violations = executableValidator.validateParameters(</span><br><span class="line">            object,</span><br><span class="line">            method,</span><br><span class="line">            parameterValues</span><br><span class="line">        );</span><br><span class="line">        assertEquals( <span class="number">1</span>, violations.size() );</span><br><span class="line">        Class&lt;? extends Annotation&gt; constraintType = violations.iterator() .next() .getConstraintDescriptor() .getAnnotation() .annotationType();</span><br><span class="line">        assertEquals( Max<span class="class">.<span class="keyword">class</span>, <span class="title">constraintType</span> )</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>获取Validator过程：</p><img src="/2021/03/05/spring-validator/image-20210304162919206.png"><h3 id="ValidationProviderResolver"><a href="#ValidationProviderResolver" class="headerlink" title="ValidationProviderResolver"></a>ValidationProviderResolver</h3><h4 id="DefaultValidationProviderResolver"><a href="#DefaultValidationProviderResolver" class="headerlink" title="DefaultValidationProviderResolver"></a>DefaultValidationProviderResolver</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Finds &#123;<span class="doctag">@link</span> ValidationProvider&#125; according to the default &#123;<span class="doctag">@link</span> ValidationProviderResolver&#125; defined in the</span></span><br><span class="line"><span class="comment"> * Bean Validation specification. This implementation first uses thread's context classloader to locate providers.</span></span><br><span class="line"><span class="comment"> * If no suitable provider is found using the aforementioned class loader, it uses current class loader.</span></span><br><span class="line"><span class="comment"> * If it still does not find any suitable provider, it tries to locate the built-in provider using the current</span></span><br><span class="line"><span class="comment"> * class loader.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Emmanuel Bernard</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hardy Ferentschik</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultValidationProviderResolver</span> <span class="keyword">implements</span> <span class="title">ValidationProviderResolver</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> List&lt;ValidationProvider&lt;?&gt;&gt; getValidationProviders() &#123;</span><br><span class="line"><span class="comment">// class loading and ServiceLoader methods should happen in a PrivilegedAction</span></span><br><span class="line"><span class="keyword">return</span> GetValidationProviderListAction.getValidationProviderList();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认的策略是：</p><ul><li><p>先从thread’s context class loader 中加载<code>SPI</code>接口<code>ValidationProvider</code>对应的实现，</p></li><li><p>如果没有加载到，就从<code>DefaultValidationProviderResolver</code>对应的classloader中加载。</p></li></ul><blockquote><p>if we cannot find any service files with the context class loader use the current class loader</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javax.validation.Validation.GetValidationProviderListAction</span></span><br><span class="line"><span class="keyword">public</span> List&lt;ValidationProvider&lt;?&gt;&gt; run() &#123;</span><br><span class="line">   <span class="comment">// Option #1: try first context class loader</span></span><br><span class="line">   <span class="comment">//从contextClassLoader中加载</span></span><br><span class="line">   ClassLoader classloader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">   List&lt;ValidationProvider&lt;?&gt;&gt; cachedContextClassLoaderProviderList = getCachedValidationProviders( classloader );</span><br><span class="line">   <span class="keyword">if</span> ( cachedContextClassLoaderProviderList != <span class="keyword">null</span> ) &#123;</span><br><span class="line">      <span class="comment">// if already processed return the cached provider list</span></span><br><span class="line">      <span class="keyword">return</span> cachedContextClassLoaderProviderList;</span><br><span class="line">   &#125;</span><br><span class="line">   List&lt;ValidationProvider&lt;?&gt;&gt; validationProviderList = loadProviders( classloader );</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">   <span class="comment">// Option #2: if we cannot find any service files with the context class loader use the current class loader</span></span><br><span class="line">   <span class="comment">//</span></span><br><span class="line">   <span class="comment">//</span></span><br><span class="line">   <span class="comment">//</span></span><br><span class="line">   <span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> ( validationProviderList.isEmpty() ) &#123;</span><br><span class="line">      <span class="comment">// 从当前class的加载器加载</span></span><br><span class="line">      classloader = DefaultValidationProviderResolver<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">      List&lt;ValidationProvider&lt;?&gt;&gt; cachedCurrentClassLoaderProviderList = getCachedValidationProviders(</span><br><span class="line">            classloader</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">if</span> ( cachedCurrentClassLoaderProviderList != <span class="keyword">null</span> ) &#123;</span><br><span class="line">         <span class="comment">// if already processed return the cached provider list</span></span><br><span class="line">         <span class="keyword">return</span> cachedCurrentClassLoaderProviderList;</span><br><span class="line">      &#125;</span><br><span class="line">      validationProviderList = loadProviders( classloader );</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// cache the detected providers against the classloader in which they were found</span></span><br><span class="line">   cacheValidationProviders( classloader, validationProviderList );</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> validationProviderList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于<code>loadProviders</code>就是加载<code>SPI</code>的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;ValidationProvider&lt;?&gt;&gt; loadProviders(ClassLoader classloader) &#123;</span><br><span class="line">    ServiceLoader&lt;ValidationProvider&gt; loader = ServiceLoader.load( ValidationProvider<span class="class">.<span class="keyword">class</span>, <span class="title">classloader</span> )</span>;</span><br><span class="line">    Iterator&lt;ValidationProvider&gt; providerIterator = loader.iterator();</span><br><span class="line">    List&lt;ValidationProvider&lt;?&gt;&gt; validationProviderList = <span class="keyword">new</span> ArrayList&lt;ValidationProvider&lt;?&gt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> ( providerIterator.hasNext() ) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            validationProviderList.add( providerIterator.next() );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( ServiceConfigurationError e ) &#123;</span><br><span class="line">            <span class="comment">// ignore, because it can happen when multiple</span></span><br><span class="line">            <span class="comment">// providers are present and some of them are not class loader</span></span><br><span class="line">            <span class="comment">// compatible with our API.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> validationProviderList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hibernate-Validator"><a href="#Hibernate-Validator" class="headerlink" title="Hibernate-Validator"></a>Hibernate-Validator</h1><p><code>javax.validation</code>只是定义好了api，具体的实现一般用hibernate提供的validator。</p><p>获取元数据过程：</p><img src="/2021/03/05/spring-validator/image-20210304162952525.png"><p>具体实现类的选取，走的是<code>SPI</code>加载机制，所以先从<code>SPI</code>入手，找到 jar包下的<code>META-INF/services/javax.validation.spi.ValidationProvider</code>声明具体的实现类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.hibernate.validator.HibernateValidator</span><br></pre></td></tr></table></figure><h2 id="Validate过程："><a href="#Validate过程：" class="headerlink" title="Validate过程："></a>Validate过程：</h2><h3 id="validate"><a href="#validate" class="headerlink" title="validate"></a>validate</h3><img src="/2021/03/05/spring-validator/image-20210304163057740.png"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.hibernate.validator.internal.engine.ValidatorImpl#validate</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> &lt;T&gt; Set&lt;ConstraintViolation&lt;T&gt;&gt; validate(T object, Class&lt;?&gt;... groups) &#123;</span><br><span class="line">Contracts.assertNotNull( object, MESSAGES.validatedObjectMustNotBeNull() );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 没有注解信息或者xml中没有配置校验，直接返回空集合</span></span><br><span class="line"><span class="keyword">if</span> ( !beanMetaDataManager.isConstrained( object.getClass() ) ) &#123;</span><br><span class="line"><span class="keyword">return</span> Collections.emptySet();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">ValidationOrder validationOrder = determineGroupValidationOrder( groups );</span><br><span class="line">ValidationContext&lt;T&gt; validationContext = getValidationContext().forValidate( object );</span><br><span class="line"><span class="comment">// valueContext会不停的切换，路径也会更新，跟具体validate的属性有关</span></span><br><span class="line">ValueContext&lt;?, Object&gt; valueContext = ValueContext.getLocalExecutionContext(</span><br><span class="line">object,</span><br><span class="line">beanMetaDataManager.getBeanMetaData( object.getClass() ),</span><br><span class="line">PathImpl.createRootPath()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> validateInContext( valueContext, validationContext, validationOrder );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.hibernate.validator.internal.engine.ValidatorImpl#validateInContext</span></span><br><span class="line"><span class="keyword">private</span> &lt;T, U&gt; Set&lt;ConstraintViolation&lt;T&gt;&gt; validateInContext(ValueContext&lt;U, Object&gt; valueContext, ValidationContext&lt;T&gt; context, ValidationOrder validationOrder) &#123;</span><br><span class="line">  <span class="keyword">if</span> ( valueContext.getCurrentBean() == <span class="keyword">null</span> ) &#123;</span><br><span class="line">    <span class="keyword">return</span> Collections.emptySet();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对应类的元数据</span></span><br><span class="line">  BeanMetaData&lt;U&gt; beanMetaData = beanMetaDataManager.getBeanMetaData( valueContext.getCurrentBeanType() );</span><br><span class="line">  <span class="keyword">if</span> ( beanMetaData.defaultGroupSequenceIsRedefined() ) &#123;</span><br><span class="line">    validationOrder.assertDefaultGroupSequenceIsExpandable( beanMetaData.getDefaultGroupSequence( valueContext.getCurrentBean() ) );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// process first single groups. For these we can optimise object traversal by first running all validations on the current bean</span></span><br><span class="line">  <span class="comment">// before traversing the object.</span></span><br><span class="line">  <span class="comment">// 单个组的</span></span><br><span class="line">  Iterator&lt;Group&gt; groupIterator = validationOrder.getGroupIterator();</span><br><span class="line">  <span class="keyword">while</span> ( groupIterator.hasNext() ) &#123;</span><br><span class="line">    Group group = groupIterator.next();</span><br><span class="line">    valueContext.setCurrentGroup( group.getDefiningClass() );</span><br><span class="line">    validateConstraintsForCurrentGroup( context, valueContext );</span><br><span class="line">    <span class="keyword">if</span> ( shouldFailFast( context ) ) &#123;</span><br><span class="line">      <span class="keyword">return</span> context.getFailingConstraints();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  groupIterator = validationOrder.getGroupIterator();</span><br><span class="line">  <span class="keyword">while</span> ( groupIterator.hasNext() ) &#123;</span><br><span class="line">    Group group = groupIterator.next();</span><br><span class="line">    valueContext.setCurrentGroup( group.getDefiningClass() );</span><br><span class="line">   <span class="comment">// 校验级联的</span></span><br><span class="line">    validateCascadedConstraints( context, valueContext );</span><br><span class="line">    <span class="keyword">if</span> ( shouldFailFast( context ) ) &#123;</span><br><span class="line">      <span class="keyword">return</span> context.getFailingConstraints();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// now we process sequences. For sequences I have to traverse the object graph since I have to stop processing when an error occurs.</span></span><br><span class="line">  <span class="comment">// 多个组的 @GroupSequence(&#123;RentalCar.class, CarChecks.class, DriverChecks.class&#125;)</span></span><br><span class="line">  Iterator&lt;Sequence&gt; sequenceIterator = validationOrder.getSequenceIterator();</span><br><span class="line">  <span class="keyword">while</span> ( sequenceIterator.hasNext() ) &#123;</span><br><span class="line">    Sequence sequence = sequenceIterator.next();</span><br><span class="line">    <span class="keyword">for</span> ( Group group : sequence.getComposingGroups() ) &#123;</span><br><span class="line">      <span class="keyword">int</span> numberOfViolations = context.getFailingConstraints().size();</span><br><span class="line">      valueContext.setCurrentGroup( group.getDefiningClass() );</span><br><span class="line"></span><br><span class="line">      validateConstraintsForCurrentGroup( context, valueContext );</span><br><span class="line">      <span class="keyword">if</span> ( shouldFailFast( context ) ) &#123;</span><br><span class="line">        <span class="keyword">return</span> context.getFailingConstraints();</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">// 级联的</span></span><br><span class="line">      validateCascadedConstraints( context, valueContext );</span><br><span class="line">      <span class="keyword">if</span> ( shouldFailFast( context ) ) &#123;</span><br><span class="line">        <span class="keyword">return</span> context.getFailingConstraints();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ( context.getFailingConstraints().size() &gt; numberOfViolations ) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> context.getFailingConstraints();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="嵌套类型"><a href="#嵌套类型" class="headerlink" title="嵌套类型"></a>嵌套类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider#findPropertyMetaData</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ConstrainedField <span class="title">findPropertyMetaData</span><span class="params">(Field field)</span> </span>&#123;</span><br><span class="line">Set&lt;MetaConstraint&lt;?&gt;&gt; constraints = convertToMetaConstraints(</span><br><span class="line">findConstraints( field, ElementType.FIELD ),</span><br><span class="line">field</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">Map&lt;Class&lt;?&gt;, Class&lt;?&gt;&gt; groupConversions = getGroupConversions(</span><br><span class="line">field.getAnnotation( ConvertGroup<span class="class">.<span class="keyword">class</span> ),</span></span><br><span class="line"><span class="class"><span class="title">field</span>.<span class="title">getAnnotation</span>( <span class="title">ConvertGroup</span>.<span class="title">List</span>.<span class="title">class</span> )</span></span><br><span class="line"><span class="class">)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 被@Valid修饰的就认为是嵌套的</span></span><br><span class="line"><span class="keyword">boolean</span> isCascading = field.isAnnotationPresent( Valid<span class="class">.<span class="keyword">class</span> )</span>;</span><br><span class="line"><span class="keyword">boolean</span> requiresUnwrapping = field.isAnnotationPresent( UnwrapValidatedValue<span class="class">.<span class="keyword">class</span> )</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ConstrainedField(</span><br><span class="line">ConfigurationSource.ANNOTATION,</span><br><span class="line">ConstraintLocation.forProperty( field ),</span><br><span class="line">constraints,</span><br><span class="line">groupConversions,</span><br><span class="line">isCascading,</span><br><span class="line">requiresUnwrapping</span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法级别的验证"><a href="#方法级别的验证" class="headerlink" title="方法级别的验证"></a>方法级别的验证</h2><p>方法级别的验证是通过<code>ExecutableValidator</code>中的相关接口来实现的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;T&gt; Set&lt;ConstraintViolation&lt;T&gt;&gt; validateParameters(T object,</span><br><span class="line">   Method method,</span><br><span class="line">   Object[] parameterValues,</span><br><span class="line">   Class&lt;?&gt;... groups);</span><br><span class="line"></span><br><span class="line">&lt;T&gt; Set&lt;ConstraintViolation&lt;T&gt;&gt; validateReturnValue(T object,</span><br><span class="line">Method method,</span><br><span class="line">Object returnValue,</span><br><span class="line">Class&lt;?&gt;... groups);</span><br><span class="line"></span><br><span class="line">&lt;T&gt; Set&lt;ConstraintViolation&lt;T&gt;&gt; validateConstructorParameters(Constructor&lt;? extends T&gt; constructor,</span><br><span class="line">  Object[] parameterValues,</span><br><span class="line">  Class&lt;?&gt;... groups);</span><br><span class="line"></span><br><span class="line">&lt;T&gt; Set&lt;ConstraintViolation&lt;T&gt;&gt; validateConstructorReturnValue(Constructor&lt;? extends T&gt; constructor,</span><br><span class="line">   T createdObject,</span><br><span class="line">   Class&lt;?&gt;... groups);</span><br></pre></td></tr></table></figure><p>hibernate中对应的实现还在<code>ValidatorImpl</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.hibernate.validator.internal.engine.ValidatorImpl#validateParameters(T, java.lang.reflect.Executable, java.lang.Object[], java.lang.Class&lt;?&gt;...)</span></span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; Set&lt;ConstraintViolation&lt;T&gt;&gt; validateParameters(T object, Executable executable, Object[] parameterValues, Class&lt;?&gt;... groups) &#123;</span><br><span class="line">sanityCheckGroups( groups );</span><br><span class="line"></span><br><span class="line">ValidationContext&lt;T&gt; validationContext = getValidationContextBuilder().forValidateParameters(</span><br><span class="line">validatorScopedContext.getParameterNameProvider(),</span><br><span class="line">object,</span><br><span class="line">executable,</span><br><span class="line">parameterValues</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 没有注解约束的直接返回</span></span><br><span class="line"><span class="keyword">if</span> (!validationContext.getRootBeanMetaData().hasConstraints() ) &#123;</span><br><span class="line"><span class="keyword">return</span> Collections.emptySet();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 决定校验组</span></span><br><span class="line">ValidationOrder validationOrder = determineGroupValidationOrder( groups );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 校验逻辑</span></span><br><span class="line">validateParametersInContext( validationContext, parameterValues, validationOrder );</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> validationContext.getFailingConstraints();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>元数据的获取方式扩展了下，后续的校验流程和bean属性的validate类似：</p><img src="/2021/03/05/spring-validator/image-20210305112537440.png"><h2 id="ConstraintValidator"><a href="#ConstraintValidator" class="headerlink" title="ConstraintValidator"></a>ConstraintValidator</h2><p>约束逻辑应该实现的接口</p><ul><li><p>对应的工厂类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javax.validation.ConstraintValidatorFactory</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConstraintValidatorFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&lt;T extends ConstraintValidator&lt;?, ?&gt;&gt; <span class="function">T <span class="title">getInstance</span><span class="params">(Class&lt;T&gt; key)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">releaseInstance</span><span class="params">(ConstraintValidator&lt;?, ?&gt; instance)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口定义：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">A</span> <span class="keyword">extends</span> <span class="title">Annotation</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(A constraintAnnotation)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(T value, ConstraintValidatorContext context)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个接口定义了具体的校验逻辑的实现，可以实现这个接口，添加自己的校验逻辑。</p><p><code>NotBlankValidator</code>的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotBlankValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">NotBlank</span>, <span class="title">CharSequence</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Checks that the character sequence is not &#123;<span class="doctag">@code</span> null&#125; nor empty after removing any leading or trailing</span></span><br><span class="line"><span class="comment"> * whitespace.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> charSequence the character sequence to validate</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> constraintValidatorContext context in which the constraint is evaluated</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> returns &#123;<span class="doctag">@code</span> true&#125; if the string is not &#123;<span class="doctag">@code</span> null&#125; and the length of the trimmed</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> charSequence&#125; is strictly superior to 0, &#123;<span class="doctag">@code</span> false&#125; otherwise</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(CharSequence charSequence, ConstraintValidatorContext constraintValidatorContext)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ( charSequence == <span class="keyword">null</span> ) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> charSequence.toString().trim().length() &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注解和实现的映射关系</li></ul><p>注解和具体的实现类的映射维护在<code>org.hibernate.validator.internal.metadata.core.ConstraintHelper</code>:</p><img src="/2021/03/05/spring-validator/image-20210304114621014.png"><p>这个映射关系，在<code>MetaDataProvider</code>处理的时候，就已经映射好，放在了<code>ConstraintDescriptor</code>中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl#ConstraintDescriptorImpl(org.hibernate.validator.internal.metadata.core.ConstraintHelper, java.lang.reflect.Member, org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor&lt;T&gt;, java.lang.annotation.ElementType, java.lang.Class&lt;?&gt;, org.hibernate.validator.internal.metadata.core.ConstraintOrigin, org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl.ConstraintType)</span></span><br><span class="line"><span class="keyword">this</span>.constraintValidatorClasses = constraintHelper.getAllValidatorDescriptors( annotationDescriptor.getType() )</span><br><span class="line">.stream()</span><br><span class="line">.map( ConstraintValidatorDescriptor::getValidatorClass )</span><br><span class="line">.collect( Collectors.collectingAndThen( Collectors.toList(), CollectionHelper::toImmutableList ) );</span><br></pre></td></tr></table></figure><p>后面再根据，具体的值的类型来筛选，具体的<code>ConstraintValidator</code></p><p>annotation –&gt; ConstraintValidator  + 值的实际类型 –&gt; ConstraintValidator的具体实现;</p><p>也可以直接在注解中指定：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;METHOD, FIELD, ANNOTATION_TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RUNTIME)</span><br><span class="line"><span class="comment">// 指定具体的ConstraintValidator</span></span><br><span class="line"><span class="meta">@Constraint</span>(validatedBy = CheckCaseValidator<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Documented</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">CheckCase</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> "</span>&#123;com.mycompany.constraints.checkcase&#125;<span class="string">";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Class&lt;?&gt;[] groups() default &#123;&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Class&lt;? extends Payload&gt;[] payload() default &#123;&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    CaseMode value();</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="版本升级的坑"><a href="#版本升级的坑" class="headerlink" title="版本升级的坑"></a>版本升级的坑</h2><ul><li><p>maven坐标变了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">version=6.0.10.Final</span><br><span class="line">groupId=org.hibernate.validator</span><br><span class="line">artifactId=hibernate-validator</span><br><span class="line"></span><br><span class="line">version=5.1.3.Final</span><br><span class="line">groupId=org.hibernate</span><br><span class="line">artifactId=hibernate-validator</span><br></pre></td></tr></table></figure><p>俩groupId不一样，有的时候会造成一些冲突。</p></li></ul><h1 id="Spring集成"><a href="#Spring集成" class="headerlink" title="Spring集成"></a>Spring集成</h1><h2 id="Spring-mvc"><a href="#Spring-mvc" class="headerlink" title="Spring mvc"></a>Spring mvc</h2><blockquote><p> By default use of <code>@EnableWebMvc</code> or <code>&lt;mvc:annotation-driven&gt;</code> automatically registers Bean Validation support in Spring MVC through the <code>LocalValidatorFactoryBean</code> when a Bean Validation provider such as Hibernate Validator is detected on the classpath.</p></blockquote><h3 id="xml配置"><a href="#xml配置" class="headerlink" title="xml配置"></a>xml配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">validator</span>=<span class="string">"globalValidator"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>初始化路径：</p><img src="/2021/03/05/spring-validator/image-20210304225708264.png"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcNamespaceHandler</span> <span class="keyword">extends</span> <span class="title">NamespaceHandlerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">registerBeanDefinitionParser(<span class="string">"annotation-driven"</span>, <span class="keyword">new</span> AnnotationDrivenBeanDefinitionParser());</span><br><span class="line">    <span class="comment">// 省略。。。</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>AnnotationDrivenBeanDefinitionParser</code>这个类中会注册许多默认的配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser#parse</span></span><br><span class="line"><span class="comment">// 这里引入了validator</span></span><br><span class="line">RuntimeBeanReference validator = getValidator(element, source, parserContext);</span><br><span class="line"><span class="comment">// WebBindingInitializer，用来初始化webDataBinder</span></span><br><span class="line">RootBeanDefinition bindingDef = <span class="keyword">new</span> RootBeanDefinition(ConfigurableWebBindingInitializer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">bindingDef.setSource(source);</span><br><span class="line">bindingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">bindingDef.getPropertyValues().add(<span class="string">"conversionService"</span>, conversionService);</span><br><span class="line">bindingDef.getPropertyValues().add(<span class="string">"validator"</span>, validator);</span><br><span class="line">bindingDef.getPropertyValues().add(<span class="string">"messageCodesResolver"</span>, messageCodesResolver);</span><br><span class="line"></span><br><span class="line"><span class="comment">// RequestMappingHandlerAdapter负责请求的处理，可以看前面的mvc源码解析</span></span><br><span class="line">RootBeanDefinition handlerAdapterDef = <span class="keyword">new</span> RootBeanDefinition(RequestMappingHandlerAdapter<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">// initializer 传递给了 RequestMappingHandlerAdapter</span></span><br><span class="line">handlerAdapterDef.getPropertyValues().add(<span class="string">"webBindingInitializer"</span>, bindingDef);</span><br></pre></td></tr></table></figure><p><code>getValidator</code>生成了validator的配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser#getValidator</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> javaxValidationPresent =</span><br><span class="line">ClassUtils.isPresent(<span class="string">"javax.validation.Validator"</span>, AnnotationDrivenBeanDefinitionParser<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>())</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> RuntimeBeanReference <span class="title">getValidator</span><span class="params">(Element element, Object source, ParserContext parserContext)</span> </span>&#123;</span><br><span class="line"><span class="comment">// xml配置里可以指定一个validator作为全局的，如果指定了，这里就返回指定的</span></span><br><span class="line">  <span class="keyword">if</span> (element.hasAttribute(<span class="string">"validator"</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> RuntimeBeanReference(element.getAttribute(<span class="string">"validator"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (javaxValidationPresent) &#123;</span><br><span class="line">    RootBeanDefinition validatorDef = <span class="keyword">new</span> RootBeanDefinition(</span><br><span class="line">      <span class="string">"org.springframework.validation.beanvalidation.OptionalValidatorFactoryBean"</span>);</span><br><span class="line">    validatorDef.setSource(source);</span><br><span class="line">    validatorDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">    String validatorName = parserContext.getReaderContext().registerWithGeneratedName(validatorDef);</span><br><span class="line">    parserContext.registerComponent(<span class="keyword">new</span> BeanComponentDefinition(validatorDef, validatorName));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RuntimeBeanReference(validatorName);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到默认注入的是<code>OptionalValidatorFactoryBean</code>它是<code>LocalValidatorFactoryBean</code>的子类，跟jsr-303的validator对接的代码都在<code>LocalValidatorFactoryBean</code>中:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.validation.beanvalidation.LocalValidatorFactoryBean#afterPropertiesSet</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Validator <span class="title">getValidator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Assert.notNull(<span class="keyword">this</span>.validatorFactory, <span class="string">"No target ValidatorFactory set"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.validatorFactory.getValidator();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化完成之后，就可以拿到validator了，底层可能就是hibernate实现的validator。</p><h3 id="Java配置"><a href="#Java配置" class="headerlink" title="Java配置"></a>Java配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Validator <span class="title">getValidator</span><span class="params">()</span></span>; &#123;</span><br><span class="line">        <span class="comment">// return "global" validator</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java的配置和xml的作用差不多，只是java的配置是用java的代码写的，先看注解的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(DelegatingWebMvcConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableWebMvc</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>import了一个配置类<code>DelegatingWebMvcConfiguration</code>, 它继承自<code>WebMvcConfigurationSupport</code>, 这个配置类注册了许多默认的bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport</span></span><br><span class="line"><span class="comment">// org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport#requestMappingHandlerAdapter</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestMappingHandlerAdapter <span class="title">requestMappingHandlerAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">RequestMappingHandlerAdapter adapter = createRequestMappingHandlerAdapter();</span><br><span class="line"><span class="comment">// WebBindingInitializer</span></span><br><span class="line">adapter.setWebBindingInitializer(getConfigurableWebBindingInitializer());</span><br><span class="line"><span class="comment">// 省略</span></span><br><span class="line"><span class="keyword">return</span> adapter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport#getConfigurableWebBindingInitializer</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the &#123;<span class="doctag">@link</span> ConfigurableWebBindingInitializer&#125; to use for</span></span><br><span class="line"><span class="comment"> * initializing all &#123;<span class="doctag">@link</span> WebDataBinder&#125; instances.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ConfigurableWebBindingInitializer <span class="title">getConfigurableWebBindingInitializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ConfigurableWebBindingInitializer initializer = <span class="keyword">new</span> ConfigurableWebBindingInitializer();</span><br><span class="line">initializer.setConversionService(mvcConversionService());</span><br><span class="line">    <span class="comment">// 这里关联了validator</span></span><br><span class="line">initializer.setValidator(mvcValidator());</span><br><span class="line">initializer.setMessageCodesResolver(getMessageCodesResolver());</span><br><span class="line"><span class="keyword">return</span> initializer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport#mvcValidator</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Validator <span class="title">mvcValidator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 子类可以覆写，</span></span><br><span class="line">Validator validator = getValidator();</span><br><span class="line"><span class="keyword">if</span> (validator == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (ClassUtils.isPresent(<span class="string">"javax.validation.Validator"</span>, getClass().getClassLoader())) &#123;</span><br><span class="line">Class&lt;?&gt; clazz;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 默认的Validator实现类</span></span><br><span class="line">String className = <span class="string">"org.springframework.validation.beanvalidation.OptionalValidatorFactoryBean"</span>;</span><br><span class="line">clazz = ClassUtils.forName(className, WebMvcConfigurationSupport<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>())</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanInitializationException(<span class="string">"Could not find default validator class"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (LinkageError ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanInitializationException(<span class="string">"Could not load default validator class"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">validator = (Validator) BeanUtils.instantiateClass(clazz);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">validator = <span class="keyword">new</span> NoOpValidator();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> validator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="请求处理"><a href="#请求处理" class="headerlink" title="请求处理"></a>请求处理</h3><p>初始化完成之后，就是请求来时的处理了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#invokeHandlerMethod</span></span><br><span class="line"><span class="comment">// 前面配置的WebBindingInitializer，会在这一步传递给WebDataBinderFactory</span></span><br><span class="line">WebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);</span><br><span class="line">ServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);</span><br><span class="line">invocableMethod.setDataBinderFactory(binderFactory);</span><br><span class="line"><span class="comment">// 省略</span></span><br><span class="line">invocableMethod.invokeAndHandle(webRequest, mavContainer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod#invokeAndHandle</span></span><br><span class="line">Object returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);</span><br><span class="line"><span class="comment">// org.springframework.web.method.support.InvocableHandlerMethod#invokeForRequest</span></span><br><span class="line">Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);</span><br><span class="line"><span class="comment">// org.springframework.web.method.support.InvocableHandlerMethod#getMethodArgumentValues</span></span><br><span class="line"><span class="comment">// 这里就转交给了argumentResolvers （HandlerMethodArgumentResolver），来处理</span></span><br><span class="line">args[i] = <span class="keyword">this</span>.argumentResolvers.resolveArgument(</span><br><span class="line">  parameter, mavContainer, request, <span class="keyword">this</span>.dataBinderFactory);</span><br></pre></td></tr></table></figure><p>类型转换和校验是在<code>org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver#validateIfApplicable</code>:</p><img src="/2021/03/05/spring-validator/image-20210304231222896.png"><p>以处理json/xml的<code>RequestResponseBodyMethodProcessor</code>为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Throws MethodArgumentNotValidException if validation fails.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> HttpMessageNotReadableException if &#123;<span class="doctag">@link</span> RequestBody#required()&#125;</span></span><br><span class="line"><span class="comment"> * is &#123;<span class="doctag">@code</span> true&#125; and there is no body content or if there is no suitable</span></span><br><span class="line"><span class="comment"> * converter to read the content with.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="function"><span class="params">NativeWebRequest webRequest, WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">parameter = parameter.nestedIfOptional();</span><br><span class="line">Object arg = readWithMessageConverters(webRequest, parameter, parameter.getNestedGenericParameterType());</span><br><span class="line">String name = Conventions.getVariableNameForParameter(parameter);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据之前绑定的WebDataBinderFactory，初始化WebDataBinder；Validator就传递给了WebDataBinder</span></span><br><span class="line">    <span class="comment">// 注意binder是每次都创建的，他是有状态的</span></span><br><span class="line">WebDataBinder binder = binderFactory.createBinder(webRequest, arg, name);</span><br><span class="line"><span class="keyword">if</span> (arg != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 校验参数</span></span><br><span class="line">validateIfApplicable(binder, parameter);</span><br><span class="line">      <span class="comment">// 处理校验的结果</span></span><br><span class="line"><span class="keyword">if</span> (binder.getBindingResult().hasErrors() &amp;&amp; isBindExceptionRequired(binder, parameter)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> MethodArgumentNotValidException(parameter, binder.getBindingResult());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">mavContainer.addAttribute(BindingResult.MODEL_KEY_PREFIX + name, binder.getBindingResult());</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> adaptArgumentIfNecessary(arg, parameter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法级别的校验"><a href="#方法级别的校验" class="headerlink" title="方法级别的校验"></a>方法级别的校验</h2><blockquote><p>The method validation feature supported by Bean Validation 1.1, and as a custom extension</p><p>also by Hibernate Validator 4.3, can be integrated into a Spring context through a</p><p>MethodValidationPostProcessor bean definition:</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"localValidatorFactoryBeanTest"</span> <span class="attr">class</span>=<span class="string">"org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.validation.beanvalidation.MethodValidationPostProcessor"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validator"</span> <span class="attr">ref</span>=<span class="string">"localValidatorFactoryBeanTest"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>In order to be eligible for Spring-driven method validation, all target classes need to be annotated</p><p>with Spring’s @Validated annotation, optionally declaring the validation groups to use. </p></blockquote><p>条件：</p><ul><li>类需要标注<code>@Validated</code></li><li>引入<code>MethodValidationPostProcessor</code>, validator也可以不指定，spring会创建默认的</li><li>方法得是protected或者public的（不然拦截不到）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/mvc"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleController</span> </span>&#123; </span><br><span class="line">  </span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">echo</span><span class="params">(@Min(<span class="number">100</span>)</span> @<span class="title">RequestParam</span><span class="params">(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">        log.info(<span class="string">"id=&#123;&#125;"</span>, id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>从<code>MethodValidationPostProcessor</code>入手，它间接地实现了<code>BeanPostProcessor</code>， 在bean初始化完成之后，做了拦截：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Class&lt;? extends Annotation&gt; validatedAnnotationType = Validated<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"><span class="comment">// org.springframework.validation.beanvalidation.MethodValidationPostProcessor#afterPropertiesSet</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 创建了一个切面，切入的条件是被@Validated标识的类</span></span><br><span class="line">  Pointcut pointcut = <span class="keyword">new</span> AnnotationMatchingPointcut(<span class="keyword">this</span>.validatedAnnotationType, <span class="keyword">true</span>);</span><br><span class="line">  <span class="comment">// 创建切面对应的advisor</span></span><br><span class="line">  <span class="keyword">this</span>.advisor = <span class="keyword">new</span> DefaultPointcutAdvisor(pointcut, createMethodValidationAdvice(<span class="keyword">this</span>.validator));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Advice <span class="title">createMethodValidationAdvice</span><span class="params">(Validator validator)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 用传入的JSR-303的创建一个Method的拦截器，或者基于默认的</span></span><br><span class="line">  <span class="keyword">return</span> (validator != <span class="keyword">null</span> ? <span class="keyword">new</span> MethodValidationInterceptor(validator) : <span class="keyword">new</span> MethodValidationInterceptor());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MethodValidationInterceptor</code>就是对调用方法做了一层拦截，在这里实现了具体校验逻辑的接入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.validation.beanvalidation.MethodValidationInterceptor#invoke</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">  Class&lt;?&gt;[] groups = determineValidationGroups(invocation);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 反射拿到的方法，主要是看底层的validator是否支持JSR-349</span></span><br><span class="line">  <span class="keyword">if</span> (forExecutablesMethod != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// Standard Bean Validation 1.1 API</span></span><br><span class="line">    Object execVal = ReflectionUtils.invokeMethod(forExecutablesMethod, <span class="keyword">this</span>.validator);</span><br><span class="line">    Method methodToValidate = invocation.getMethod();</span><br><span class="line">    Set&lt;ConstraintViolation&lt;?&gt;&gt; result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 反射调用validator的参数校验的方法</span></span><br><span class="line">      result = (Set&lt;ConstraintViolation&lt;?&gt;&gt;) ReflectionUtils.invokeMethod(validateParametersMethod,</span><br><span class="line">                                                                          execVal, invocation.getThis(), methodToValidate, invocation.getArguments(), groups);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class="line">      <span class="comment">// Probably a generic type mismatch between interface and impl as reported in SPR-12237 / HV-1011</span></span><br><span class="line">      <span class="comment">// Let's try to find the bridged method on the implementation class...</span></span><br><span class="line">      methodToValidate = BridgeMethodResolver.findBridgedMethod(</span><br><span class="line">        ClassUtils.getMostSpecificMethod(invocation.getMethod(), invocation.getThis().getClass()));</span><br><span class="line">      result = (Set&lt;ConstraintViolation&lt;?&gt;&gt;) ReflectionUtils.invokeMethod(validateParametersMethod,</span><br><span class="line">                                                                          execVal, invocation.getThis(), methodToValidate, invocation.getArguments(), groups);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!result.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ConstraintViolationException(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 调用方法的实际处理逻辑</span></span><br><span class="line">    Object returnValue = invocation.proceed();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反射调用validator的返回值校验的方法</span></span><br><span class="line">    result = (Set&lt;ConstraintViolation&lt;?&gt;&gt;) ReflectionUtils.invokeMethod(validateReturnValueMethod,</span><br><span class="line">                                                                        execVal, invocation.getThis(), methodToValidate, returnValue, groups);</span><br><span class="line">    <span class="keyword">if</span> (!result.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ConstraintViolationException(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> returnValue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Hibernate Validator 4.3's native API</span></span><br><span class="line">    <span class="keyword">return</span> HibernateValidatorDelegate.invokeWithinValidation(invocation, <span class="keyword">this</span>.validator, groups);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring管理的bean的校验"><a href="#Spring管理的bean的校验" class="headerlink" title="Spring管理的bean的校验"></a>Spring管理的bean的校验</h2><p>spring提供了<code>**BeanValidationPostProcessor**</code>, 可以校验bean的属性是否正确注入了。这个process默认没有包含，如需用到，需要手动添加。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.validation.beanvalidation.BeanValidationPostProcessor</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Simple &#123;<span class="doctag">@link</span> BeanPostProcessor&#125; that checks JSR-303 constraint annotations</span></span><br><span class="line"><span class="comment"> * in Spring-managed beans, throwing an initialization exception in case of</span></span><br><span class="line"><span class="comment"> * constraint violations right before calling the bean's init method (if any).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 3.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanValidationPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span>, <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.afterInitialization) &#123;</span><br><span class="line">        doValidate(bean);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.afterInitialization) &#123;</span><br><span class="line">        doValidate(bean);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> bean;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Perform validation of the given bean.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bean the bean instance to validate</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> javax.validation.Validator#validate</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doValidate</span><span class="params">(Object bean)</span> </span>&#123;</span><br><span class="line">  Set&lt;ConstraintViolation&lt;Object&gt;&gt; result = <span class="keyword">this</span>.validator.validate(bean);</span><br><span class="line">  <span class="keyword">if</span> (!result.isEmpty()) &#123;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"Bean state is invalid: "</span>);</span><br><span class="line">    <span class="keyword">for</span> (Iterator&lt;ConstraintViolation&lt;Object&gt;&gt; it = result.iterator(); it.hasNext();) &#123;</span><br><span class="line">      ConstraintViolation&lt;Object&gt; violation = it.next();</span><br><span class="line">      sb.append(violation.getPropertyPath()).append(<span class="string">" - "</span>).append(violation.getMessage());</span><br><span class="line">      <span class="keyword">if</span> (it.hasNext()) &#123;</span><br><span class="line">        sb.append(<span class="string">"; "</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BeanInitializationException(sb.toString());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; Caused by: org.springframework.beans.factory.BeanInitializationException: Bean state is invalid: age - 最小不能小于10; id - 不能为null</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>​        bean validation的标准有两个，一个JSR-303，主要针对bean属性的校验；JSR-349引入了方法入参和返回值的校验。hibernate-validator实现了bean validation的标准；spring则包装和扩展了一层，让我们用起来更加舒服。</p><p>​        <code>@Valid</code>注解是javax中的注解，也是标准的一部分，用来做嵌套的校验；<code>@Validated</code>是spring的注解，主要是为了做方法参数和返回值的校验，用来生成方法的拦截器。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://my.oschina.net/u/3211616/blog/821343" rel="external nofollow noopener noreferrer" target="_blank">详解Bean Validation - 阅读的伟哥的个人空间 - 开源中国</a></li><li><a href="https://my.oschina.net/zzuqiang/blog/761862" rel="external nofollow noopener noreferrer" target="_blank">JSR303、349 -Bean Validation 数据校验规范使用说明和验证流程源码分析 - zzuqiang的个人空间 - 开源中国</a></li><li><a href="http://docs.jboss.org/hibernate/validator/4.2/reference/zh-CN/html_single/" rel="external nofollow noopener noreferrer" target="_blank">Hibernate Validator</a></li><li><a href="https://stackoverflow.com/questions/7337046/tomcat-classloading-doesnt-seem-to-behave-as-documented" rel="external nofollow noopener noreferrer" target="_blank">java - Tomcat classloading doesn’t seem to behave as documented - Stack Overflow</a></li><li><a href="https://beanvalidation.org/1.0/spec/" rel="external nofollow noopener noreferrer" target="_blank">JSR 303: Bean Validation</a></li><li><a href="https://beanvalidation.org/1.1/" rel="external nofollow noopener noreferrer" target="_blank">Jakarta Bean Validation - Bean Validation 1.1 (JSR 349)</a></li><li><a href="https://docs.spring.io/spring-framework/docs/4.2.x/spring-framework-reference/html/mvc.html#mvc-config-validation" rel="external nofollow noopener noreferrer" target="_blank">21. Web MVC framework</a></li><li><a href="https://blog.csdn.net/f641385712/article/details/97402946" rel="external nofollow noopener noreferrer" target="_blank">Spring方法级别数据校验：@Validated + MethodValidationPostProcessor优雅的完成数据校验动作【享学Spring】_YourBatman-CSDN博客</a></li><li><a href="https://docs.jboss.org/hibernate/validator/5.1/reference/zh-CN/html/" rel="external nofollow noopener noreferrer" target="_blank">Hibernate Validator</a></li><li><a href="https://fangjian0423.github.io/2017/06/24/spring-embedded-bean-post-processor/" rel="external nofollow noopener noreferrer" target="_blank">Spring内置的BeanPostProcessor总结 | Format’s Notes</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JSR-303和JSR-349&quot;&gt;&lt;a href=&quot;#JSR-303和JSR-349&quot; class=&quot;headerlink&quot; title=&quot;JSR-303和JSR-349&quot;&gt;&lt;/a&gt;JSR-303和JSR-349&lt;/h1&gt;&lt;h2 id=&quot;jsr-303：——Bea
      
    
    </summary>
    
      <category term="spring" scheme="http://qsli.github.io/categories/spring/"/>
    
    
      <category term="spring-validator" scheme="http://qsli.github.io/tags/spring-validator/"/>
    
  </entry>
  
  <entry>
    <title>druid踩坑记录</title>
    <link href="http://qsli.github.io/2020/08/04/druid-pitfall/"/>
    <id>http://qsli.github.io/2020/08/04/druid-pitfall/</id>
    <published>2020-08-04T08:16:21.000Z</published>
    <updated>2020-08-04T08:17:43.312Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Druid配置踩坑记录"><a href="#Druid配置踩坑记录" class="headerlink" title="Druid配置踩坑记录"></a>Druid配置踩坑记录</h3><p>我用的druid版本 <code>1.1.10</code></p><h4 id="maxWait和公平锁"><a href="#maxWait和公平锁" class="headerlink" title="maxWait和公平锁"></a>maxWait和公平锁</h4><p>设置maxWait之后，druid默认开启了公平锁，公平锁对性能影响比较大。</p><p>可以看下有赞的压测结论：</p><img src="/2020/08/04/druid-pitfall/640.png"><img src="/2020/08/04/druid-pitfall/image-20200804160210813.png"><p>使用非公平锁性能可以提升70%，但是会导致有些连接的饥饿问题，这个需要自己权衡下。</p><h4 id="testOnBorrow、testWhileIdle、testOnReturn和mysql-connector-java-8-x"><a href="#testOnBorrow、testWhileIdle、testOnReturn和mysql-connector-java-8-x" class="headerlink" title="testOnBorrow、testWhileIdle、testOnReturn和mysql-connector-java 8.x+"></a>testOnBorrow、testWhileIdle、testOnReturn和mysql-connector-java 8.x+</h4><p>这个都是在不同的节点validate连接是否有效的，都会走到同一处逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// com.alibaba.druid.pool.DruidAbstractDataSource#testConnectionInternal(com.alibaba.druid.pool.DruidConnectionHolder, java.sql.Connection)</span></span><br><span class="line"><span class="keyword">if</span> (valid &amp;&amp; isMySql) &#123; <span class="comment">// unexcepted branch</span></span><br><span class="line">  <span class="comment">// 问题出在这里</span></span><br><span class="line">  <span class="keyword">long</span> lastPacketReceivedTimeMs = MySqlUtils.getLastPacketReceivedTimeMs(conn);</span><br><span class="line">  <span class="keyword">if</span> (lastPacketReceivedTimeMs &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">long</span> mysqlIdleMillis = currentTimeMillis - lastPacketReceivedTimeMs;</span><br><span class="line">    <span class="keyword">if</span> (lastPacketReceivedTimeMs &gt; <span class="number">0</span> <span class="comment">//</span></span><br><span class="line">        &amp;&amp; mysqlIdleMillis &gt;= timeBetweenEvictionRunsMillis) &#123;</span><br><span class="line">      discardConnection(conn);</span><br><span class="line">      String errorMsg = <span class="string">"discard long time none received connection. "</span></span><br><span class="line">        + <span class="string">", jdbcUrl : "</span> + jdbcUrl</span><br><span class="line">        + <span class="string">", jdbcUrl : "</span> + jdbcUrl</span><br><span class="line">        + <span class="string">", lastPacketReceivedIdleMillis : "</span> + mysqlIdleMillis;</span><br><span class="line">      LOG.error(errorMsg);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// com.alibaba.druid.util.MySqlUtils#getLastPacketReceivedTimeMs</span></span><br><span class="line"><span class="keyword">if</span> (class_connectionImpl == <span class="keyword">null</span> &amp;&amp; !class_connectionImpl_Error) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 这个类在8.x里面没有，但是loadClass内部catch住了ClassNotFoundException, 而且ignore了</span></span><br><span class="line">    <span class="comment">// 所以上面的if，会一直成立，每次都会触发这个类的加载</span></span><br><span class="line">    class_connectionImpl = Utils.loadClass(<span class="string">"com.mysql.jdbc.MySQLConnection"</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Throwable error)&#123;</span><br><span class="line">    class_connectionImpl_Error = <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// com.alibaba.druid.util.Utils#loadClass</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; loadClass(String className) &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (className == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Class.forName(className);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">          <span class="comment">// 这里忽略了。。。</span></span><br><span class="line">            <span class="comment">// skip</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ClassLoader ctxClassLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">        <span class="keyword">if</span> (ctxClassLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                clazz = ctxClassLoader.loadClass(className);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="comment">// skip</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们的应用设置了testWhileIdle, 所以时不时的会有tomcat的thread busy:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"query-order-async-task-15"</span> Id=663 BLOCKED</span><br><span class="line">at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1152)</span><br><span class="line">at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1119)</span><br><span class="line">at java.lang.Class.forName0(Native Method)</span><br><span class="line">at java.lang.Class.forName(Class.java:264)</span><br><span class="line">at com.alibaba.druid.util.Utils.loadClass(Utils.java:203)</span><br><span class="line">at com.alibaba.druid.util.MySqlUtils.getLastPacketReceivedTimeMs(MySqlUtils.java:351)</span><br><span class="line">--</span><br><span class="line"><span class="string">"http-nio-9301-exec-103"</span> Id=567 BLOCKED</span><br><span class="line">at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1152)</span><br><span class="line">at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1119)</span><br><span class="line">at java.lang.Class.forName0(Native Method)</span><br><span class="line">at java.lang.Class.forName(Class.java:264)</span><br><span class="line">at com.alibaba.druid.util.Utils.loadClass(Utils.java:203)</span><br><span class="line">at com.alibaba.druid.util.MySqlUtils.getLastPacketReceivedTimeMs(MySqlUtils.java:351)</span><br><span class="line">--</span><br><span class="line"><span class="string">"http-nio-9301-exec-124"</span> Id=863 BLOCKED</span><br><span class="line">at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1152)</span><br><span class="line">at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1119)</span><br><span class="line">at java.lang.Class.forName0(Native Method)</span><br><span class="line">at java.lang.Class.forName(Class.java:264)</span><br><span class="line">at com.alibaba.druid.util.Utils.loadClass(Utils.java:203)</span><br><span class="line">at com.alibaba.druid.util.MySqlUtils.getLastPacketReceivedTimeMs(MySqlUtils.java:351)</span><br><span class="line">--</span><br><span class="line"><span class="string">"query-order-async-task-0"</span> Id=641 BLOCKED</span><br><span class="line">at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1152)</span><br><span class="line">at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1119)</span><br><span class="line">at java.lang.Class.forName0(Native Method)</span><br><span class="line">at java.lang.Class.forName(Class.java:264)</span><br><span class="line">at com.alibaba.druid.util.Utils.loadClass(Utils.java:203)</span><br><span class="line">at com.alibaba.druid.util.MySqlUtils.getLastPacketReceivedTimeMs(MySqlUtils.java:351)</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li><a href="https://mp.weixin.qq.com/s/RaiU9_ioWHvomZLLKuSuGw" rel="external nofollow noopener noreferrer" target="_blank">有赞DB连接池性能优化</a></li><li><a href="https://github.com/alibaba/druid/wiki/Druid%E9%94%81%E7%9A%84%E5%85%AC%E5%B9%B3%E6%A8%A1%E5%BC%8F%E9%97%AE%E9%A2%98" rel="external nofollow noopener noreferrer" target="_blank">Druid锁的公平模式问题 · alibaba/druid Wiki</a></li><li><a href="https://github.com/brettwooldridge/HikariCP/issues/232" rel="external nofollow noopener noreferrer" target="_blank">alibaba/druid pool analysis · Issue #232 · brettwooldridge/HikariCP</a></li><li><a href="https://github.com/alibaba/druid/issues/3808" rel="external nofollow noopener noreferrer" target="_blank">com.alibaba:druid:1.1.20 MysqlUtils写死了mysql-connector-java 5.1版本的MySQLConnection类加载，导致线程阻塞，性能受限 · Issue #3808 · alibaba/druid</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Druid配置踩坑记录&quot;&gt;&lt;a href=&quot;#Druid配置踩坑记录&quot; class=&quot;headerlink&quot; title=&quot;Druid配置踩坑记录&quot;&gt;&lt;/a&gt;Druid配置踩坑记录&lt;/h3&gt;&lt;p&gt;我用的druid版本 &lt;code&gt;1.1.10&lt;/code&gt;&lt;/p&gt;
      
    
    </summary>
    
      <category term="druid" scheme="http://qsli.github.io/categories/druid/"/>
    
    
      <category term="pitfall mysql-connector-java 8.x" scheme="http://qsli.github.io/tags/pitfall-mysql-connector-java-8-x/"/>
    
  </entry>
  
  <entry>
    <title>网络连接的各种timeout</title>
    <link href="http://qsli.github.io/2020/07/26/timeout/"/>
    <id>http://qsli.github.io/2020/07/26/timeout/</id>
    <published>2020-07-25T17:16:52.000Z</published>
    <updated>2020-12-01T15:52:21.184Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><h3 id="SERVER端DROP-SYNC报文导致的重试"><a href="#SERVER端DROP-SYNC报文导致的重试" class="headerlink" title="SERVER端DROP SYNC报文导致的重试"></a>SERVER端DROP SYNC报文导致的重试</h3><p>tcp sync 报文默认重试6次，每次等待的时间逐渐变长，最长等待 2^0 + 2^1 + 2^2 + 2^3 + 2^4 + 2^5 + 2^6 = 127 s</p><h4 id="测试步骤"><a href="#测试步骤" class="headerlink" title="测试步骤"></a>测试步骤</h4><p>iptables 添加规则，drop掉TCP的sync包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 server]$ sudo iptables -A INPUT --protocol tcp --dport 7777 --syn -j DROP</span><br></pre></td></tr></table></figure><p>简单启动一个server，监听7777端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 server]$ nc -l 7777 &amp;</span><br></pre></td></tr></table></figure><p>tcpdump抓包，指定port 7777：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 server]$ sudo tcpdump -i lo -Ss0 -n src 127.0.0.1 and dst 127.0.0.1 and port 7777</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on lo, link-type EN10MB (Ethernet), capture size 65535 bytes</span><br><span class="line"></span><br><span class="line">19:36:44.372996 IP 127.0.0.1.51754 &gt; 127.0.0.1.cbt: Flags [S], seq 1069437352, win 43690, options [mss 65495,sackOK,TS val 517451113 ecr 0,nop,wscale 7], length 0</span><br><span class="line">19:36:45.375615 IP 127.0.0.1.51754 &gt; 127.0.0.1.cbt: Flags [S], seq 1069437352, win 43690, options [mss 65495,sackOK,TS val 517452116 ecr 0,nop,wscale 7], length 0</span><br><span class="line">19:36:47.379606 IP 127.0.0.1.51754 &gt; 127.0.0.1.cbt: Flags [S], seq 1069437352, win 43690, options [mss 65495,sackOK,TS val 517454120 ecr 0,nop,wscale 7], length 0</span><br><span class="line">19:36:51.387627 IP 127.0.0.1.51754 &gt; 127.0.0.1.cbt: Flags [S], seq 1069437352, win 43690, options [mss 65495,sackOK,TS val 517458128 ecr 0,nop,wscale 7], length 0</span><br><span class="line">19:36:59.403615 IP 127.0.0.1.51754 &gt; 127.0.0.1.cbt: Flags [S], seq 1069437352, win 43690, options [mss 65495,sackOK,TS val 517466144 ecr 0,nop,wscale 7], length 0</span><br><span class="line">19:37:15.435623 IP 127.0.0.1.51754 &gt; 127.0.0.1.cbt: Flags [S], seq 1069437352, win 43690, options [mss 65495,sackOK,TS val 517482176 ecr 0,nop,wscale 7], length 0</span><br><span class="line">19:37:47.499624 IP 127.0.0.1.51754 &gt; 127.0.0.1.cbt: Flags [S], seq 1069437352, win 43690, options [mss 65495,sackOK,TS val 517514240 ecr 0,nop,wscale 7], length 0</span><br></pre></td></tr></table></figure><p>客户端超时时间：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 server]$ time telnet  localhost 7777</span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">telnet: connect to address 127.0.0.1: Connection timed out</span><br><span class="line">Trying ::1...</span><br><span class="line">telnet: connect to address ::1: Network is unreachable</span><br><span class="line"></span><br><span class="line">real2m7.257s</span><br><span class="line">user0m0.000s</span><br><span class="line">sys0m0.002s</span><br></pre></td></tr></table></figure><p>做差得到重试的间隔， telnet总共请求了<code>2m7.257s</code>，从而可以倒推出最后一次等待的时间</p><table><thead><tr><th>时间</th><th>时间差</th></tr></thead><tbody><tr><td>19:36:44.372996</td><td></td></tr><tr><td>19:36:45.375615</td><td>0:00:01.01 （1s）</td></tr><tr><td>19:36:47.379606</td><td>0:00:02.02 （2s）</td></tr><tr><td>19:36:51.387627</td><td>0:00:04.04 （4s）</td></tr><tr><td>19:36:59.403615</td><td>0:00:08.08 （8s）</td></tr><tr><td>19:37:15.435623</td><td>0:00:16.16 （16s)</td></tr><tr><td>19:37:47.499624</td><td>0:00:32.32 （32s）</td></tr><tr><td></td><td>0:01:04.254 （64s）</td></tr></tbody></table><img src="/2020/07/26/timeout/tcp_timeout.png"><p>然后就超时了。</p><p>查看系统配置的超时重试次数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 server]$ sudo sysctl -a | grep tcp_syn_retries</span><br><span class="line">net.ipv4.tcp_syn_retries = 6</span><br></pre></td></tr></table></figure><p>带上第一次请求，正好七次跟我们的观测一致。</p><h4 id="恢复iptables"><a href="#恢复iptables" class="headerlink" title="恢复iptables"></a>恢复iptables</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 server]$ sudo iptables --list --line-numbers</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">num  target     prot opt <span class="built_in">source</span>               destination</span><br><span class="line">1    DROP       tcp  --  anywhere             anywhere             tcp dpt:cbt flags:FIN,SYN,RST,ACK/SYN</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">num  target     prot opt <span class="built_in">source</span>               destination</span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">num  target     prot opt <span class="built_in">source</span>               destination</span><br></pre></td></tr></table></figure><p>删除对应的规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 server]$ sudo iptables -D INPUT 1</span><br><span class="line">[qisheng.li@YD-Test-01 server]$ sudo iptables --list --line-numbers</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">num  target     prot opt <span class="built_in">source</span>               destination</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">num  target     prot opt <span class="built_in">source</span>               destination</span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">num  target     prot opt <span class="built_in">source</span>               destination</span><br></pre></td></tr></table></figure><p>再试下telnet就好了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 server]$ time telnet  localhost 7777</span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line">^]</span><br><span class="line"></span><br><span class="line">telnet&gt; quit</span><br><span class="line">Connection closed.</span><br><span class="line"></span><br><span class="line">real0m3.745s</span><br><span class="line">user0m0.002s</span><br><span class="line">sys  0m0.001s</span><br></pre></td></tr></table></figure><p>已经ok了。</p><h3 id="Client端drop掉Server的ack导致的重试"><a href="#Client端drop掉Server的ack导致的重试" class="headerlink" title="Client端drop掉Server的ack导致的重试"></a>Client端drop掉Server的ack导致的重试</h3><ul><li>Client（yd-test-01）： <ul><li>ip: 192.168.16.211</li><li>Iptables： <code>sudo iptables -A INPUT --protocol tcp --sport 7777  -j DROP</code></li></ul></li><li>Server（yd-test-02）:<ul><li>Ip: 192.168.16.213</li><li>Nc: <code>nc -l 7777</code></li><li>Tcpdump: <code>sudo tcpdump -i eth0  -s0 -n   src port 7777 or dst port 7777</code></li></ul></li></ul><p>client 端输出:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 server]$ time telnet  192.168.16.213 7777</span><br><span class="line">Trying 192.168.16.213...</span><br><span class="line">telnet: connect to address 192.168.16.213: Connection timed out</span><br><span class="line"></span><br><span class="line">real2m7.335s</span><br><span class="line">user0m0.000s</span><br><span class="line">sys0m0.002s</span><br></pre></td></tr></table></figure><p>server端抓包输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@yd-test-02 server]$ sudo tcpdump -i eth0  -s0 -n   src port 7777 or dst port 7777</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">13:41:44.455035 IP 192.168.16.211.49306 &gt; 192.168.16.213.cbt: Flags [S], seq 3915399839, win 14600, options [mss 1460,sackOK,TS val 582551195 ecr 0,nop,wscale 7], length 0</span><br><span class="line">13:41:44.455067 IP 192.168.16.213.cbt &gt; 192.168.16.211.49306: Flags [S.], seq 369364050, ack 3915399840, win 28960, options [mss 1460,sackOK,TS val 582313766 ecr 582551195,nop,wscale 7], length 0</span><br><span class="line">13:41:45.455290 IP 192.168.16.211.49306 &gt; 192.168.16.213.cbt: Flags [S], seq 3915399839, win 14600, options [mss 1460,sackOK,TS val 582552196 ecr 0,nop,wscale 7], length 0</span><br><span class="line">13:41:45.455324 IP 192.168.16.213.cbt &gt; 192.168.16.211.49306: Flags [S.], seq 369364050, ack 3915399840, win 28960, options [mss 1460,sackOK,TS val 582314766 ecr 582551195,nop,wscale 7], length 0</span><br><span class="line">13:41:46.657636 IP 192.168.16.213.cbt &gt; 192.168.16.211.49306: Flags [S.], seq 369364050, ack 3915399840, win 28960, options [mss 1460,sackOK,TS val 582315969 ecr 582551195,nop,wscale 7], length 0</span><br><span class="line">13:41:47.459272 IP 192.168.16.211.49306 &gt; 192.168.16.213.cbt: Flags [S], seq 3915399839, win 14600, options [mss 1460,sackOK,TS val 582554200 ecr 0,nop,wscale 7], length 0</span><br><span class="line">13:41:47.459297 IP 192.168.16.213.cbt &gt; 192.168.16.211.49306: Flags [S.], seq 369364050, ack 3915399840, win 28960, options [mss 1460,sackOK,TS val 582316770 ecr 582551195,nop,wscale 7], length 0</span><br><span class="line">13:41:49.857639 IP 192.168.16.213.cbt &gt; 192.168.16.211.49306: Flags [S.], seq 369364050, ack 3915399840, win 28960, options [mss 1460,sackOK,TS val 582319169 ecr 582551195,nop,wscale 7], length 0</span><br><span class="line">13:41:51.467283 IP 192.168.16.211.49306 &gt; 192.168.16.213.cbt: Flags [S], seq 3915399839, win 14600, options [mss 1460,sackOK,TS val 582558208 ecr 0,nop,wscale 7], length 0</span><br><span class="line">13:41:51.467331 IP 192.168.16.213.cbt &gt; 192.168.16.211.49306: Flags [S.], seq 369364050, ack 3915399840, win 28960, options [mss 1460,sackOK,TS val 582320778 ecr 582551195,nop,wscale 7], length 0</span><br><span class="line">13:41:59.483259 IP 192.168.16.211.49306 &gt; 192.168.16.213.cbt: Flags [S], seq 3915399839, win 14600, options [mss 1460,sackOK,TS val 582566224 ecr 0,nop,wscale 7], length 0</span><br><span class="line">13:41:59.483274 IP 192.168.16.213.cbt &gt; 192.168.16.211.49306: Flags [S.], seq 604179795, ack 3915399840, win 28960, options [mss 1460,sackOK,TS val 582328794 ecr 582566224,nop,wscale 7], length 0</span><br><span class="line">13:42:00.884639 IP 192.168.16.213.cbt &gt; 192.168.16.211.49306: Flags [S.], seq 604179795, ack 3915399840, win 28960, options [mss 1460,sackOK,TS val 582330196 ecr 582566224,nop,wscale 7], length 0</span><br><span class="line">13:42:03.084649 IP 192.168.16.213.cbt &gt; 192.168.16.211.49306: Flags [S.], seq 604179795, ack 3915399840, win 28960, options [mss 1460,sackOK,TS val 582332396 ecr 582566224,nop,wscale 7], length 0</span><br><span class="line">13:42:15.531272 IP 192.168.16.211.49306 &gt; 192.168.16.213.cbt: Flags [S], seq 3915399839, win 14600, options [mss 1460,sackOK,TS val 582582272 ecr 0,nop,wscale 7], length 0</span><br><span class="line">13:42:15.531300 IP 192.168.16.213.cbt &gt; 192.168.16.211.49306: Flags [S.], seq 854930196, ack 3915399840, win 28960, options [mss 1460,sackOK,TS val 582344842 ecr 582582272,nop,wscale 7], length 0</span><br><span class="line">13:42:16.932662 IP 192.168.16.213.cbt &gt; 192.168.16.211.49306: Flags [S.], seq 854930196, ack 3915399840, win 28960, options [mss 1460,sackOK,TS val 582346244 ecr 582582272,nop,wscale 7], length 0</span><br><span class="line">13:42:18.932641 IP 192.168.16.213.cbt &gt; 192.168.16.211.49306: Flags [S.], seq 854930196, ack 3915399840, win 28960, options [mss 1460,sackOK,TS val 582348244 ecr 582582272,nop,wscale 7], length 0</span><br><span class="line">13:42:47.595311 IP 192.168.16.211.49306 &gt; 192.168.16.213.cbt: Flags [S], seq 3915399839, win 14600, options [mss 1460,sackOK,TS val 582614336 ecr 0,nop,wscale 7], length 0</span><br><span class="line">13:42:47.595361 IP 192.168.16.213.cbt &gt; 192.168.16.211.49306: Flags [S.], seq 1355930963, ack 3915399840, win 28960, options [mss 1460,sackOK,TS val 582376906 ecr 582614336,nop,wscale 7], length 0</span><br><span class="line">13:42:48.796643 IP 192.168.16.213.cbt &gt; 192.168.16.211.49306: Flags [S.], seq 1355930963, ack 3915399840, win 28960, options [mss 1460,sackOK,TS val 582378108 ecr 582614336,nop,wscale 7], length 0</span><br><span class="line">13:42:50.996649 IP 192.168.16.213.cbt &gt; 192.168.16.211.49306: Flags [S.], seq 1355930963, ack 3915399840, win 28960, options [mss 1460,sackOK,TS val 582380308 ecr 582614336,nop,wscale 7], length 0</span><br></pre></td></tr></table></figure><h4 id="恢复iptables-1"><a href="#恢复iptables-1" class="headerlink" title="恢复iptables"></a>恢复iptables</h4><p>别忘了把iptables里的规则删除！</p><h3 id="不存在的ip和端口导致的重试"><a href="#不存在的ip和端口导致的重试" class="headerlink" title="不存在的ip和端口导致的重试"></a>不存在的ip和端口导致的重试</h3><h4 id="macos"><a href="#macos" class="headerlink" title="macos"></a>macos</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  ping  192.168.16.211</span><br><span class="line">PING 192.168.16.211 (192.168.16.211): 56 data bytes</span><br><span class="line">Request timeout <span class="keyword">for</span> icmp_seq 0</span><br><span class="line">Request timeout <span class="keyword">for</span> icmp_seq 1</span><br><span class="line">Request timeout <span class="keyword">for</span> icmp_seq 2</span><br><span class="line">Request timeout <span class="keyword">for</span> icmp_seq 3</span><br><span class="line">Request timeout <span class="keyword">for</span> icmp_seq 4</span><br><span class="line">^C</span><br><span class="line">--- 192.168.16.211 ping statistics ---</span><br><span class="line">6 packets transmitted, 0 packets received, 100.0% packet loss</span><br><span class="line">➜  ~  time telnet 192.168.16.211 5555</span><br><span class="line">Trying 192.168.16.211...</span><br><span class="line">telnet: connect to address 192.168.16.211: Operation timed out</span><br><span class="line">telnet: Unable to connect to remote host</span><br><span class="line">telnet 192.168.16.211 5555  </span><br><span class="line">0.02s user </span><br><span class="line">0.01s system 0% cpu 1:15.32 total</span><br><span class="line">➜  ~  sudo sysctl -a | grep <span class="string">"keepinit"</span></span><br><span class="line">net.inet.tcp.keepinit: 75000</span><br></pre></td></tr></table></figure><p>等待了75s左右，和macOS系统的<code>net.inet.tcp.keepinit</code> 一致。抓包结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  sudo tcpdump -i en0  -Ss0 -n   dst 192.168.16.211 and dst port 5555</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on en0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">10:41:16.923029 IP 192.168.50.201.55232 &gt; 192.168.16.211.5555: Flags [S], seq 752380292, win 65535, options [mss 1460,nop,wscale 6,nop,nop,TS val 222295538 ecr 0,sackOK,eol], length 0</span><br><span class="line">10:41:17.971996 IP 192.168.50.201.55232 &gt; 192.168.16.211.5555: Flags [S], seq 752380292, win 65535, options [mss 1460,nop,wscale 6,nop,nop,TS val 222296538 ecr 0,sackOK,eol], length 0</span><br><span class="line">10:41:18.791837 IP 192.168.50.201.55232 &gt; 192.168.16.211.5555: Flags [S], seq 752380292, win 65535, options [mss 1460,nop,wscale 6,nop,nop,TS val 222297538 ecr 0,sackOK,eol], length 0</span><br><span class="line">10:41:19.763549 IP 192.168.50.201.55232 &gt; 192.168.16.211.5555: Flags [S], seq 752380292, win 65535, options [mss 1460,nop,wscale 6,nop,nop,TS val 222298538 ecr 0,sackOK,eol], length 0</span><br><span class="line">10:41:20.768079 IP 192.168.50.201.55232 &gt; 192.168.16.211.5555: Flags [S], seq 752380292, win 65535, options [mss 1460,nop,wscale 6,nop,nop,TS val 222299538 ecr 0,sackOK,eol], length 0</span><br><span class="line">10:41:21.771750 IP 192.168.50.201.55232 &gt; 192.168.16.211.5555: Flags [S], seq 752380292, win 65535, options [mss 1460,nop,wscale 6,nop,nop,TS val 222300538 ecr 0,sackOK,eol], length 0</span><br><span class="line">10:41:23.778444 IP 192.168.50.201.55232 &gt; 192.168.16.211.5555: Flags [S], seq 752380292, win 65535, options [mss 1460,nop,wscale 6,nop,nop,TS val 222302538 ecr 0,sackOK,eol], length 0</span><br><span class="line">10:41:27.805634 IP 192.168.50.201.55232 &gt; 192.168.16.211.5555: Flags [S], seq 752380292, win 65535, options [mss 1460,nop,wscale 6,nop,nop,TS val 222306539 ecr 0,sackOK,eol], length 0</span><br><span class="line">10:41:35.813752 IP 192.168.50.201.55232 &gt; 192.168.16.211.5555: Flags [S], seq 752380292, win 65535, options [mss 1460,nop,wscale 6,nop,nop,TS val 222314539 ecr 0,sackOK,eol], length 0</span><br><span class="line">10:41:51.834655 IP 192.168.50.201.55232 &gt; 192.168.16.211.5555: Flags [S], seq 752380292, win 65535, options [mss 1460,nop,wscale 6,nop,nop,TS val 222330539 ecr 0,sackOK,eol], length 0</span><br><span class="line">10:42:24.010187 IP 192.168.50.201.55232 &gt; 192.168.16.211.5555: Flags [S], seq 752380292, win 65535, options [mss 1460,sackOK,eol], length 0</span><br></pre></td></tr></table></figure><p><strong>等待的时间和重试的间隔和上面的结论完全不同，吓得我赶紧在centos上测试了下。</strong></p><h4 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h4><p>但是在<code>centos</code>上，测试的结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 server]$ ping 192.168.50.201</span><br><span class="line">PING 192.168.50.201 (192.168.50.201) 56(84) bytes of data.</span><br><span class="line">^C</span><br><span class="line">--- 192.168.50.201 ping statistics ---</span><br><span class="line">9 packets transmitted, 0 received, 100% packet loss, time 7999ms</span><br><span class="line">[qisheng.li@YD-Test-01 server]$ time telnet 192.168.50.201 5555</span><br><span class="line">Trying 192.168.50.201...</span><br><span class="line">telnet: connect to address 192.168.50.201: Connection timed out</span><br><span class="line"></span><br><span class="line">real2m7.233s</span><br><span class="line">user0m0.002s</span><br><span class="line">sys0m0.000s</span><br></pre></td></tr></table></figure><p>等待了大约<code>127</code>s，跟系统配置的重试次数产生的时间吻合。tcpdump的结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 server]$  sudo tcpdump -i en0  -Ss0 -n   dst 192.168.50.201 and dst port 5555</span><br><span class="line">tcpdump: en0: No such device exists</span><br><span class="line">(SIOCGIFHWADDR: No such device)</span><br><span class="line">[qisheng.li@YD-Test-01 server]$  sudo tcpdump -i eth0  -Ss0 -n   dst 192.168.50.201 and dst port 5555</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">11:54:22.718506 IP 192.168.16.211.41402 &gt; 192.168.50.201.personal-agent: Flags [S], seq 3156762544, win 14600, options [mss 1460,sackOK,TS val 576109458 ecr 0,nop,wscale 7], length 0</span><br><span class="line">11:54:23.719607 IP 192.168.16.211.41402 &gt; 192.168.50.201.personal-agent: Flags [S], seq 3156762544, win 14600, options [mss 1460,sackOK,TS val 576110460 ecr 0,nop,wscale 7], length 0</span><br><span class="line">11:54:25.723609 IP 192.168.16.211.41402 &gt; 192.168.50.201.personal-agent: Flags [S], seq 3156762544, win 14600, options [mss 1460,sackOK,TS val 576112464 ecr 0,nop,wscale 7], length 0</span><br><span class="line">11:54:29.731610 IP 192.168.16.211.41402 &gt; 192.168.50.201.personal-agent: Flags [S], seq 3156762544, win 14600, options [mss 1460,sackOK,TS val 576116472 ecr 0,nop,wscale 7], length 0</span><br><span class="line">11:54:37.739615 IP 192.168.16.211.41402 &gt; 192.168.50.201.personal-agent: Flags [S], seq 3156762544, win 14600, options [mss 1460,sackOK,TS val 576124480 ecr 0,nop,wscale 7], length 0</span><br><span class="line">11:54:53.771611 IP 192.168.16.211.41402 &gt; 192.168.50.201.personal-agent: Flags [S], seq 3156762544, win 14600, options [mss 1460,sackOK,TS val 576140512 ecr 0,nop,wscale 7], length 0</span><br><span class="line">11:55:25.803619 IP 192.168.16.211.41402 &gt; 192.168.50.201.personal-agent: Flags [S], seq 3156762544, win 14600, options [mss 1460,sackOK,TS val 576172544 ecr 0,nop,wscale 7], length 0</span><br></pre></td></tr></table></figure><p>可以发现两个系统的实现上还是有略微的差异的。</p><h2 id="java的connection-timeout"><a href="#java的connection-timeout" class="headerlink" title="java的connection timeout"></a>java的connection timeout</h2><h3 id="不设置超时"><a href="#不设置超时" class="headerlink" title="不设置超时"></a>不设置超时</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReadTimeout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">  <span class="keyword">try</span> (Socket socket = <span class="keyword">new</span> Socket()) &#123;</span><br><span class="line">    PrintWriter printWriter = <span class="keyword">null</span>;</span><br><span class="line">    socket.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"192.168.16.211"</span>, <span class="number">5555</span>));</span><br><span class="line">    <span class="keyword">final</span> OutputStream outputStream = socket.getOutputStream();</span><br><span class="line">    <span class="keyword">final</span> BufferedOutputStream bufferedOutputStream = <span class="keyword">new</span> BufferedOutputStream(outputStream);</span><br><span class="line">    printWriter = <span class="keyword">new</span> PrintWriter(bufferedOutputStream);</span><br><span class="line">    printWriter.print(<span class="string">"Hello world"</span>);</span><br><span class="line">    System.out.println(<span class="string">"socket = "</span> + socket);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"System.currentTimeMillis() - start = "</span> + (System.currentTimeMillis() - start));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问一个没有被监听的端口<code>5555</code>，经过一段时间之后，抛出异常：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">System.currentTimeMillis() - start = 75226</span><br><span class="line"></span><br><span class="line">java.net.ConnectException: Operation timed out (Connection timed out)</span><br><span class="line"></span><br><span class="line">at java.net.PlainSocketImpl.socketConnect(Native Method)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)</span><br><span class="line">at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)</span><br><span class="line">at java.net.Socket.connect(Socket.java:589)</span><br><span class="line">at java.net.Socket.connect(Socket.java:538)</span><br><span class="line">at com.air.lang.net.socket.SocketTest.testReadTimeout(SocketTest.java:27)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498)</span><br></pre></td></tr></table></figure><p>大约75s之后，操作超时了，这与macos系统默认的socket超时是一致的：</p><blockquote><p>net.inet.tcp.keepinit = timeout for establishing syn</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  sudo sysctl -a  | grep <span class="string">"net.inet.tcp.keepinit"</span></span><br><span class="line">net.inet.tcp.keepinit: 75000</span><br></pre></td></tr></table></figure><p>修改这个值为<code>33000</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  sudo sysctl -w net.inet.tcp.keepinit=33000</span><br><span class="line">Password:</span><br><span class="line">net.inet.tcp.keepinit: 75000 -&gt; 33000</span><br></pre></td></tr></table></figure><p>重新跑上面的代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">System.currentTimeMillis() - start = 33117</span><br><span class="line"></span><br><span class="line">java.net.ConnectException: Operation timed out (Connection timed out)</span><br><span class="line"></span><br><span class="line">at java.net.PlainSocketImpl.socketConnect(Native Method)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)</span><br><span class="line">at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)</span><br><span class="line">at java.net.Socket.connect(Socket.java:589)</span><br><span class="line">at java.net.Socket.connect(Socket.java:538)</span><br><span class="line">at com.air.lang.net.socket.SocketTest.testReadTimeout(SocketTest.java:66)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498)</span><br></pre></td></tr></table></figure><p><strong>结论：超时时间也变了，所以没有设置超时的时候用的就是os level的超时时间。</strong></p><h3 id="设置超时时间"><a href="#设置超时时间" class="headerlink" title="设置超时时间"></a>设置超时时间</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReadTimeout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">  <span class="keyword">try</span> (Socket socket = <span class="keyword">new</span> Socket()) &#123;</span><br><span class="line">    PrintWriter printWriter = <span class="keyword">null</span>;</span><br><span class="line">    socket.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"192.168.16.211"</span>, <span class="number">5555</span>), <span class="number">35000</span>);</span><br><span class="line">    <span class="keyword">final</span> OutputStream outputStream = socket.getOutputStream();</span><br><span class="line">    <span class="keyword">final</span> BufferedOutputStream bufferedOutputStream = <span class="keyword">new</span> BufferedOutputStream(outputStream);</span><br><span class="line">    printWriter = <span class="keyword">new</span> PrintWriter(bufferedOutputStream);</span><br><span class="line">    printWriter.print(<span class="string">"Hello world"</span>);</span><br><span class="line">    System.out.println(<span class="string">"socket = "</span> + socket);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"System.currentTimeMillis() - start = "</span> + (System.currentTimeMillis() - start));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码的超时设置为<code>35000</code>毫秒，系统超时<code>33000</code>毫秒得到的结果，大概33秒之后就超时了：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">System.currentTimeMillis() - start = 33271</span><br><span class="line"></span><br><span class="line">java.net.ConnectException: Operation timed out (Connection timed out)</span><br><span class="line"></span><br><span class="line">at java.net.PlainSocketImpl.socketConnect(Native Method)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)</span><br><span class="line">at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)</span><br><span class="line">at java.net.Socket.connect(Socket.java:589)</span><br><span class="line">at com.air.lang.net.socket.SocketTest.testReadTimeout(SocketTest.java:84)</span><br></pre></td></tr></table></figure><p>修改代码超时为<code>30000</code>毫秒，小于系统默认的<code>33000</code>毫秒，得到的输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">System.currentTimeMillis() - start = 30005</span><br><span class="line"></span><br><span class="line">java.net.SocketTimeoutException: connect timed out</span><br><span class="line"></span><br><span class="line">at java.net.PlainSocketImpl.socketConnect(Native Method)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)</span><br><span class="line">at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)</span><br><span class="line">at java.net.Socket.connect(Socket.java:589)</span><br><span class="line">at com.air.lang.net.socket.SocketTest.testReadTimeout(SocketTest.java:84)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498)</span><br></pre></td></tr></table></figure><p>30秒左右就超时了，说明设置生效。</p><p><strong>结论：代码里设置的连接超时，大于系统的默认超时是没有用的，系统会先抛出异常；</strong></p><p>​        <strong>小于系统的超时是可以生效的。</strong></p><h3 id="实现一瞥"><a href="#实现一瞥" class="headerlink" title="实现一瞥"></a>实现一瞥</h3><img src="/2020/07/26/timeout/bO_12e9048Rl-nJJHUfGU9OI8lPWH0Xhvq6s4RR6NS4rwktJagWyb9TX6FxvFdwHScwiSlfCFYahNcY0UGo3QmJR_9BZgHkMF7u5i7wi6sSjQI-6q9R9nZPNrEngwdXxcM6VdtfJaciyB5SGpiH7iFjKjzfJYUiqYK2FLAIE-SMF8OGW05FO8nLmK1ALtCbD1Z-aLGlvswY8tplrpibewPCZxW00.png"><h3 id="socket-read超时"><a href="#socket-read超时" class="headerlink" title="socket read超时"></a>socket read超时</h3><p><strong>对端宕机时，我们有数据需要发送：</strong></p><p>运行起来一个echo服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 ~]$ ncat -l 2000 -k -c <span class="string">'xargs -n1 echo "--&gt;"'</span></span><br></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 ~]$ nc localhost 2000</span><br><span class="line">hello</span><br><span class="line">--&gt; hello</span><br></pre></td></tr></table></figure><p>建立连接之后，输入<code>hello</code>， 自动返回了<code>--&gt; hello</code></p><p>然后利用iptables模拟网络故障，并抓包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -A INPUT --protocol tcp --dport 2000 -j DROP</span><br><span class="line">sudo tcpdump -i lo -Ss0 -n src 127.0.0.1 and dst 127.0.0.1 and port 2000</span><br></pre></td></tr></table></figure><p>客户端再次输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 ~]$ nc localhost 2000</span><br><span class="line">hello</span><br><span class="line">--&gt; hello</span><br><span class="line">world</span><br></pre></td></tr></table></figure><p>此时hang住了， 直到超时，大约持续了 13 min（22:33:21.427677 ~ 22:46:53.578945）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 ~]$ nc localhost 2000</span><br><span class="line">hello</span><br><span class="line">--&gt; hello</span><br><span class="line">world</span><br><span class="line">Ncat: Connection timed out.</span><br></pre></td></tr></table></figure><p>抓包结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 ~]$ sudo tcpdump -i lo -Ss0 -n src 127.0.0.1 and dst 127.0.0.1 and port 2000</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on lo, link-type EN10MB (Ethernet), capture size 65535 bytes</span><br><span class="line">22:33:21.427677 IP 127.0.0.1.36058 &gt; 127.0.0.1.sieve-filter: Flags [P.], seq 1659839133:1659839139, ack 912063479, win 342, options [nop,nop,TS val 3938221448 ecr 3938186493], length 6</span><br><span class="line">22:33:21.631935 IP 127.0.0.1.36058 &gt; 127.0.0.1.sieve-filter: Flags [P.], seq 1659839133:1659839139, ack 912063479, win 342, options [nop,nop,TS val 3938221653 ecr 3938186493], length 6</span><br><span class="line">22:33:21.836938 IP 127.0.0.1.36058 &gt; 127.0.0.1.sieve-filter: Flags [P.], seq 1659839133:1659839139, ack 912063479, win 342, options [nop,nop,TS val 3938221858 ecr 3938186493], length 6</span><br><span class="line">22:33:22.247936 IP 127.0.0.1.36058 &gt; 127.0.0.1.sieve-filter: Flags [P.], seq 1659839133:1659839139, ack 912063479, win 342, options [nop,nop,TS val 3938222269 ecr 3938186493], length 6</span><br><span class="line">22:33:23.070948 IP 127.0.0.1.36058 &gt; 127.0.0.1.sieve-filter: Flags [P.], seq 1659839133:1659839139, ack 912063479, win 342, options [nop,nop,TS val 3938223092 ecr 3938186493], length 6</span><br><span class="line">22:33:24.714925 IP 127.0.0.1.36058 &gt; 127.0.0.1.sieve-filter: Flags [P.], seq 1659839133:1659839139, ack 912063479, win 342, options [nop,nop,TS val 3938224736 ecr 3938186493], length 6</span><br><span class="line">22:33:28.002937 IP 127.0.0.1.36058 &gt; 127.0.0.1.sieve-filter: Flags [P.], seq 1659839133:1659839139, ack 912063479, win 342, options [nop,nop,TS val 3938228024 ecr 3938186493], length 6</span><br><span class="line">22:33:34.570945 IP 127.0.0.1.36058 &gt; 127.0.0.1.sieve-filter: Flags [P.], seq 1659839133:1659839139, ack 912063479, win 342, options [nop,nop,TS val 3938234592 ecr 3938186493], length 6</span><br><span class="line">22:33:47.722941 IP 127.0.0.1.36058 &gt; 127.0.0.1.sieve-filter: Flags [P.], seq 1659839133:1659839139, ack 912063479, win 342, options [nop,nop,TS val 3938247744 ecr 3938186493], length 6</span><br><span class="line">22:34:14.026941 IP 127.0.0.1.36058 &gt; 127.0.0.1.sieve-filter: Flags [P.], seq 1659839133:1659839139, ack 912063479, win 342, options [nop,nop,TS val 3938274048 ecr 3938186493], length 6</span><br><span class="line">22:35:06.634947 IP 127.0.0.1.36058 &gt; 127.0.0.1.sieve-filter: Flags [P.], seq 1659839133:1659839139, ack 912063479, win 342, options [nop,nop,TS val 3938326656 ecr 3938186493], length 6</span><br><span class="line">22:36:51.978934 IP 127.0.0.1.36058 &gt; 127.0.0.1.sieve-filter: Flags [P.], seq 1659839133:1659839139, ack 912063479, win 342, options [nop,nop,TS val 3938432000 ecr 3938186493], length 6</span><br><span class="line">22:38:52.298943 IP 127.0.0.1.36058 &gt; 127.0.0.1.sieve-filter: Flags [P.], seq 1659839133:1659839139, ack 912063479, win 342, options [nop,nop,TS val 3938552320 ecr 3938186493], length 6</span><br><span class="line">22:40:52.618953 IP 127.0.0.1.36058 &gt; 127.0.0.1.sieve-filter: Flags [P.], seq 1659839133:1659839139, ack 912063479, win 342, options [nop,nop,TS val 3938672640 ecr 3938186493], length 6</span><br><span class="line">22:42:52.938942 IP 127.0.0.1.36058 &gt; 127.0.0.1.sieve-filter: Flags [P.], seq 1659839133:1659839139, ack 912063479, win 342, options [nop,nop,TS val 3938792960 ecr 3938186493], length 6</span><br><span class="line">22:44:53.258934 IP 127.0.0.1.36058 &gt; 127.0.0.1.sieve-filter: Flags [P.], seq 1659839133:1659839139, ack 912063479, win 342, options [nop,nop,TS val 3938913280 ecr 3938186493], length 6</span><br><span class="line">22:46:53.578945 IP 127.0.0.1.36058 &gt; 127.0.0.1.sieve-filter: Flags [P.], seq 1659839133:1659839139, ack 912063479, win 342, options [nop,nop,TS val 3939033600 ecr 3938186493], length 6</span><br></pre></td></tr></table></figure><p>内核相关参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 ~]$ cat /proc/sys/net/ipv4/tcp_retries1</span><br><span class="line">3</span><br><span class="line">[qisheng.li@YD-Test-01 ~]$ cat /proc/sys/net/ipv4/tcp_retries2</span><br><span class="line">15</span><br></pre></td></tr></table></figure><p>别忘了删除iptables的规则。</p><p><strong>对端宕机时，我们没有数据需要发送：</strong></p><p>内核相关参数:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 ~]$ sudo sysctl -a | grep <span class="string">"tcp_keepalive"</span></span><br><span class="line">net.ipv4.tcp_keepalive_intvl = 75</span><br><span class="line">net.ipv4.tcp_keepalive_probes = 9</span><br><span class="line">net.ipv4.tcp_keepalive_time = 7200</span><br></pre></td></tr></table></figure><img src="/2020/07/26/timeout/qylrl8rr1u.jpeg"><p>setup好上面的client和server， </p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.chengweiyang.cn/2017/02/18/linux-connect-timeout/" rel="external nofollow noopener noreferrer" target="_blank">Linux 建立 TCP 连接的超时时间分析</a></li><li><a href="https://hoswey.github.io/2019/07/23/%E6%B5%85%E8%B0%88Java%E4%B8%AD%E7%9A%84TCP%E8%B6%85%E6%97%B6/" rel="external nofollow noopener noreferrer" target="_blank">浅谈Java中的TCP超时 | 程序员，川流不息</a></li><li><a href="https://cloud.tencent.com/developer/article/1574588" rel="external nofollow noopener noreferrer" target="_blank">从linux源码看socket(tcp)的timeout - 云+社区 - 腾讯云</a></li><li><a href="https://perthcharles.github.io/2015/09/07/wiki-tcp-retries/" rel="external nofollow noopener noreferrer" target="_blank">聊一聊重传次数 | 天赋 无与伦比的坚持</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;TCP&quot;&gt;&lt;a href=&quot;#TCP&quot; class=&quot;headerlink&quot; title=&quot;TCP&quot;&gt;&lt;/a&gt;TCP&lt;/h2&gt;&lt;h3 id=&quot;SERVER端DROP-SYNC报文导致的重试&quot;&gt;&lt;a href=&quot;#SERVER端DROP-SYNC报文导致的重试&quot; c
      
    
    </summary>
    
      <category term="base" scheme="http://qsli.github.io/categories/base/"/>
    
    
      <category term="tcp" scheme="http://qsli.github.io/tags/tcp/"/>
    
  </entry>
  
  <entry>
    <title>升级feign版本遇到的坑</title>
    <link href="http://qsli.github.io/2020/07/26/upgrade-feign-pitfall/"/>
    <id>http://qsli.github.io/2020/07/26/upgrade-feign-pitfall/</id>
    <published>2020-07-25T17:13:41.000Z</published>
    <updated>2020-07-25T17:13:41.682Z</updated>
    
    <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inner/user/checkLogin?ticket=af9fec70d1044ff8953bba62c5452fe6&amp;system=CRM</span><br><span class="line">&#123;<span class="string">"code"</span>:10001,<span class="string">"message"</span>:<span class="string">"参数错误"</span>,<span class="string">"result"</span>:null&#125;</span><br></pre></td></tr></table></figure><p>回滚</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/inner/user/checkLogin?ticket=7377d3e51c8548ec9e1ec0ab6ecddc21&amp;serviceTicket=&amp;system=CRM</span><br><span class="line">&#123;<span class="string">"code"</span>:0,<span class="string">"message"</span>:null,<span class="string">"result"</span>:&#123;<span class="string">"userInfo"</span>:null,<span class="string">"token"</span>:null,<span class="string">"userLogin"</span>:<span class="literal">false</span>,<span class="string">"serviceLogin"</span>:<span class="literal">false</span>,<span class="string">"noPermission"</span>:<span class="literal">false</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>差别是正常的请求多了一个<code>&amp;serviceTicket=</code>， 代码升级了feign的版本和httpclient的版本，肯定是这俩中的一个出问题了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//feign.template.QueryTemplate#create(java.lang.String, java.lang.Iterable&lt;java.lang.String&gt;, java.nio.charset.Charset, feign.CollectionFormat)</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> QueryTemplate <span class="title">create</span><span class="params">(String name,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     Iterable&lt;String&gt; values,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     Charset charset,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     CollectionFormat collectionFormat)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="keyword">null</span> || name.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"name is required."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (values == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"values are required"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* remove all empty values from the array */</span></span><br><span class="line">    <span class="comment">// 问题在这里，直接给干掉了</span></span><br><span class="line">    Collection&lt;String&gt; remaining = StreamSupport.stream(values.spliterator(), <span class="keyword">false</span>)</span><br><span class="line">        .filter(Util::isNotBlank)</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    StringBuilder template = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    Iterator&lt;String&gt; iterator = remaining.iterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">      template.append(iterator.next());</span><br><span class="line">      <span class="keyword">if</span> (iterator.hasNext()) &#123;</span><br><span class="line">        template.append(<span class="string">","</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> QueryTemplate(template.toString(), name, remaining, charset, collectionFormat);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>虽然上面的写法也不太合常理，但是feign直接给干掉了也不太兼容。幸亏代码库里上面的写法少，直接改掉之后就ok了。</p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul><li><a href="https://github.com/OpenFeign/feign/issues/872" rel="external nofollow noopener noreferrer" target="_blank">Empty query params shouldn’t be filtered out in RequestTemplate · Issue #872 · OpenFeign/feign</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
      <category term="feign" scheme="http://qsli.github.io/categories/feign/"/>
    
    
      <category term="feign" scheme="http://qsli.github.io/tags/feign/"/>
    
  </entry>
  
  <entry>
    <title>http-transfer-encoding探秘</title>
    <link href="http://qsli.github.io/2020/07/26/http-transfer-encoding/"/>
    <id>http://qsli.github.io/2020/07/26/http-transfer-encoding/</id>
    <published>2020-07-25T17:09:13.000Z</published>
    <updated>2020-07-25T17:09:13.264Z</updated>
    
    <content type="html"><![CDATA[<h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p>公司有一些后台系统支持导出Excel，导出量大的时候机器直接oom了。调用流程大概如下：</p><blockquote><p>db ——&gt; tomcat ——&gt; http协议 ——&gt; client</p></blockquote><p>最初的开发人员，似乎并没有考虑这个问题，从db到tomcat都是一个sql直接select的。</p><p>有同事改进了一版，采用分页查询，然后用支持流式写入的excel工具。但是这样真的就不会oom了吗？</p><p>其实得<strong>整条链路上都是流式</strong>的才可以，读到一部分数据，立马发出去，这部分内存释放了，也就不会oom了。</p><p>所以还差tomcat到client的流式传输，那就不得不说到<code>Content-Lenght</code>和<code>Transfer-Encoding</code>这俩参数了。</p><h3 id="小实验"><a href="#小实验" class="headerlink" title="小实验"></a>小实验</h3><p>写一个普通的servlet，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 代故</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/7/24 9:57 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/foo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransferEncodingServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> PrintWriter writer = resp.getWriter();</span><br><span class="line">        writer.print(<span class="string">"hello"</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">            writer.print(<span class="string">"world"</span>);</span><br><span class="line">            writer.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> PrintWriter writer = resp.getWriter();</span><br><span class="line">        resp.addHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/octet-stream;charset=UTF-8"</span>);</span><br><span class="line">        writer.print(<span class="string">"hello world"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后curl一下，看下结果：</p><h4 id="post接口"><a href="#post接口" class="headerlink" title="post接口"></a>post接口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">➜  qsli.github.com curl -XPOST  <span class="string">"http://localhost:8080/servlet/foo"</span> -v</span><br><span class="line">*   Trying ::1...</span><br><span class="line">* TCP_NODELAY <span class="built_in">set</span></span><br><span class="line">* Connected to localhost (::1) port 8080 (<span class="comment">#0)</span></span><br><span class="line">&gt; POST /servlet/foo HTTP/1.1</span><br><span class="line">&gt; Host: localhost:8080</span><br><span class="line">&gt; User-Agent: curl/7.54.0</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt;</span><br><span class="line">&lt; HTTP/1.1 200</span><br><span class="line">&lt; Content-Type: application/octet-stream;charset=ISO-8859-1</span><br><span class="line">&lt; Content-Length: 11</span><br><span class="line">&lt; Date: Sat, 25 Jul 2020 16:03:25 GMT</span><br><span class="line">&lt;</span><br><span class="line">* Connection <span class="comment">#0 to host localhost left intact</span></span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><p>这个post接口，返回的header中直接告诉了我们<code>Content-Length</code>是11，抓包看下传输过程是否分块：</p><img src="/2020/07/26/http-transfer-encoding/image-20200726000650709.png"><p>response在frame-7中：</p><img src="/2020/07/26/http-transfer-encoding/image-20200726000832630.png"><p>一个tcp就把结果返回了。</p><h4 id="get接口"><a href="#get接口" class="headerlink" title="get接口"></a>get接口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">➜  qsli.github.com curl -XGET  <span class="string">"http://localhost:8080/servlet/foo"</span> -v</span><br><span class="line">Note: Unnecessary use of -X or --request, GET is already inferred.</span><br><span class="line">*   Trying ::1...</span><br><span class="line">* TCP_NODELAY <span class="built_in">set</span></span><br><span class="line">* Connected to localhost (::1) port 8080 (<span class="comment">#0)</span></span><br><span class="line">&gt; GET /servlet/foo HTTP/1.1</span><br><span class="line">&gt; Host: localhost:8080</span><br><span class="line">&gt; User-Agent: curl/7.54.0</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt;</span><br><span class="line">&lt; HTTP/1.1 200</span><br><span class="line">&lt; Transfer-Encoding: chunked</span><br><span class="line">&lt; Date: Sat, 25 Jul 2020 16:09:48 GMT</span><br><span class="line">&lt;</span><br><span class="line">* Connection <span class="comment">#0 to host localhost left intact</span></span><br><span class="line">helloworld%</span><br></pre></td></tr></table></figure><p>这次并没有<code>Content-Length</code>，但是多了个<code>Transfer-Encoding</code>,抓包结果如下：</p><img src="/2020/07/26/http-transfer-encoding/image-20200726001126073.png"><p>结果在frame-19</p><img src="/2020/07/26/http-transfer-encoding/image-20200726001503151.png"><p>可以看到有三个<code>Data chunk</code>，每个<code>chunk</code>的组成是三部分：</p><blockquote><ol><li>Chunk size</li><li>Data</li><li>Chunk boundary</li></ol></blockquote><p>wireshark自动帮我们聚合展示了，看具体的tcp包：</p><img src="/2020/07/26/http-transfer-encoding/image-20200726002220628.png"><p>分别在Frame-9和Frame-19中，Frame-9传了header信息和hello，Frame-19的包传了world和结束信息。</p><h3 id="why"><a href="#why" class="headerlink" title="why?"></a>why?</h3><p>先看下两个的定义：</p><h4 id="Content-Lenght"><a href="#Content-Lenght" class="headerlink" title="Content-Lenght"></a><code>Content-Lenght</code></h4><blockquote><p>The <strong><code>Content-Length</code></strong> entity header indicates the size of the entity-body, in bytes, sent to the recipient.</p><p>Content-Length: <length></length></p><p>The length in decimal number of octets.</p></blockquote><h4 id="Transfer-Encoding"><a href="#Transfer-Encoding" class="headerlink" title="Transfer-Encoding"></a><code>Transfer-Encoding</code></h4><blockquote><p>The <strong><code>Transfer-Encoding</code></strong> header specifies the form of encoding used to safely transfer the payload body to the user.</p><p><a href="https://wikipedia.org/wiki/HTTP/2" rel="external nofollow noopener noreferrer" target="_blank">HTTP/2</a> doesn’t support HTTP 1.1’s chunked transfer encoding mechanism, as it provides its own, more efficient, mechanisms for data streaming.</p><p>Chunked encoding is useful when <strong>larger amounts of data</strong> are sent to the client and the total size of the response may not be known until the request has been fully processed. For example, when generating a large HTML table resulting from a database query or when transmitting large images.</p></blockquote><p>Tranfer-encoding需要配合<strong>长连接</strong>来使用：</p><blockquote><p>暂时把 Transfer-Encoding 放一边，我们来看 HTTP 协议中另外一个重要概念：<strong>Persistent Connection（持久连接，通俗说法长连接）</strong>。我们知道 HTTP 运行在 TCP 连接之上，自然也有着跟 TCP 一样的三次握手、慢启动等特性，为了尽可能的提高 HTTP 性能，使用持久连接就显得尤为重要了。为此，HTTP 协议引入了相应的机制。</p><p>HTTP/1.0 的持久连接机制是后来才引入的，通过 <code>Connection: keep-alive</code> 这个头部来实现，服务端和客户端都可以使用它告诉对方在发送完数据之后不需要断开 TCP 连接，以备后用。<strong>HTTP/1.1 则规定所有连接都必须是持久的，除非显式地在头部加上 <code>Connection: close</code>。</strong>所以实际上，HTTP/1.1 中 Connection 这个头部字段已经没有 keep-alive 这个取值了，但由于历史原因，很多 Web Server 和浏览器，还是保留着给 HTTP/1.1 长连接发送 <code>Connection: keep-alive</code> 的习惯。</p></blockquote><h4 id="Tomcat中的实现"><a href="#Tomcat中的实现" class="headerlink" title="Tomcat中的实现"></a>Tomcat中的实现</h4><p>为什么flush之后就变成了chunked传输？这里tomcat的源码版本是<code>7.0.47</code>，对应的Response是<code></code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.catalina.connector.OutputBuffer#doFlush</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Flush bytes or chars contained in the buffer.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> realFlush &lt;code&gt;true&lt;/code&gt; if this should also cause a real network flush</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException An underlying IOException occurred</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFlush</span><span class="params">(<span class="keyword">boolean</span> realFlush)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (suspended) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    doFlush = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (initial) &#123;</span><br><span class="line">      coyoteResponse.sendHeaders();</span><br><span class="line">      initial = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cb.remaining() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      flushCharBuffer();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (bb.remaining() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      flushByteBuffer();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    doFlush = <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (realFlush) &#123;</span><br><span class="line">    coyoteResponse.action(ActionCode.CLIENT_FLUSH, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">// If some exception occurred earlier, or if some IOE occurred</span></span><br><span class="line">    <span class="comment">// here, notify the servlet with an IOE</span></span><br><span class="line">    <span class="keyword">if</span> (coyoteResponse.isExceptionPresent()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ClientAbortException(coyoteResponse.getErrorException());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// org.apache.catalina.connector.OutputBuffer#flushCharBuffer</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">flushCharBuffer</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  realWriteChars(cb.slice());</span><br><span class="line">  <span class="comment">// 这里清空了</span></span><br><span class="line">  clear(cb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// nio</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">(Buffer buffer)</span> </span>&#123;</span><br><span class="line">  buffer.rewind().limit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.apache.coyote.AbstractProcessor#action</span></span><br><span class="line"> <span class="keyword">case</span> CLIENT_FLUSH: &#123;</span><br><span class="line">   action(ActionCode.COMMIT, <span class="keyword">null</span>);</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">     flush();</span><br><span class="line">   &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">     setErrorState(ErrorState.CLOSE_CONNECTION_NOW, e);</span><br><span class="line">     response.setErrorException(e);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><img src="/2020/07/26/http-transfer-encoding/image-20200726005435610.png"><p>最后直接调用socket的flush：</p><img src="/2020/07/26/http-transfer-encoding/image-20200726005800544.png"><p>之后就是系统的TCP/IP协议栈处理了。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Length" rel="external nofollow noopener noreferrer" target="_blank">Content-Length - HTTP | MDN</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Transfer-Encoding" rel="external nofollow noopener noreferrer" target="_blank">Transfer-Encoding - HTTP | MDN</a></li><li><a href="https://imququ.com/post/transfer-encoding-header-in-http.html" rel="external nofollow noopener noreferrer" target="_blank">HTTP 协议中的 Transfer-Encoding | JerryQu 的小站</a></li><li><a href="https://www.iflym.com/index.php/code/20140601001.html" rel="external nofollow noopener noreferrer" target="_blank">transfer-encoding和content-length的不同实现 – i flym</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h3&gt;&lt;p&gt;公司有一些后台系统支持导出Excel，导出量大的时候机器直接oom了。调用流程大概如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;db ——
      
    
    </summary>
    
      <category term="http" scheme="http://qsli.github.io/categories/http/"/>
    
    
      <category term="tranfer-encoding" scheme="http://qsli.github.io/tags/tranfer-encoding/"/>
    
  </entry>
  
  <entry>
    <title>升级到grafana7.0</title>
    <link href="http://qsli.github.io/2020/05/28/upgrade-grafana-7-0/"/>
    <id>http://qsli.github.io/2020/05/28/upgrade-grafana-7-0/</id>
    <published>2020-05-28T05:55:04.000Z</published>
    <updated>2020-08-04T07:54:09.179Z</updated>
    
    <content type="html"><![CDATA[<p>最近grafana上有些报警没有报出来，而且旧的版本bug也比较多，今天看了下最新版本是7.0。升级之后发现图片渲染出了问题：</p><img src="/2020/05/28/upgrade-grafana-7-0/image-20200528134401349.png"><p>翻了下官网的文档：</p><blockquote><p>Starting from Grafana v7.0.0, all PhantomJS support has been removed. Please use the Grafana Image Renderer plugin or remote rendering service.</p></blockquote><blockquote><h2 id="Breaking-changes"><a href="#Breaking-changes" class="headerlink" title="Breaking changes"></a>Breaking changes</h2><ul><li><strong>Removed PhantomJS</strong>: PhantomJS was deprecated in <a href="https://grafana.com/docs/grafana/latest/guides/whats-new-in-v6-4/#phantomjs-deprecation" rel="external nofollow noopener noreferrer" target="_blank">Grafana v6.4</a> and starting from Grafana v7.0.0, all PhantomJS support has been removed. This means that Grafana no longer ships with a built-in image renderer, and we advise you to install the <a href="https://grafana.com/grafana/plugins/grafana-image-renderer" rel="external nofollow noopener noreferrer" target="_blank">Grafana Image Renderer plugin</a>.</li></ul></blockquote><p>grafana已经废弃了phantomJS的支持，推荐使用<code>Grafana Image Renderer plugin</code>， 安装之后图片仍然没有渲染出来。打开渲染的debug日志：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[log]</span></span><br><span class="line"><span class="comment"># Either "console", "file", "syslog". Default is console and  file</span></span><br><span class="line"><span class="comment"># Use space to separate multiple modes, e.g. "console file"</span></span><br><span class="line"><span class="comment">;mode = console file</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Either "debug", "info", "warn", "error", "critical", default is "info"</span></span><br><span class="line"><span class="comment">;level = info</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># optional settings to set different levels for specific loggers. Ex filters = sqlstore:debug</span></span><br><span class="line"><span class="attr">filters</span> = rendering:debug</span><br></pre></td></tr></table></figure><p>查看日志输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@yd-devops-web grafana]$ tail -200f grafana.log | grep &quot;render&quot;</span><br><span class="line">t=2020-05-28T13:25:12+0800 lvl=info msg=&quot;Request Completed&quot; logger=context userId=0 orgId=0 uname= method=GET path=/public/img/attachments/rendering_plugin_not_installed.png status=302 remote_addr=127.0.0.1 time_ms=0 size=29 referer=</span><br><span class="line">t=2020-05-28T13:25:13+0800 lvl=info msg=&quot;Request Completed&quot; logger=context userId=0 orgId=0 uname= method=GET path=/public/img/attachments/rendering_plugin_not_installed.png status=302 remote_addr=127.0.0.1 time_ms=0 size=29 referer=</span><br><span class="line">t=2020-05-28T13:25:14+0800 lvl=info msg=&quot;Request Completed&quot; logger=context userId=0 orgId=0 uname= method=GET path=/public/img/attachments/rendering_plugin_not_installed.png status=302 remote_addr=127.0.0.1 time_ms=0 size=29 referer=</span><br><span class="line">t=2020-05-28T13:25:16+0800 lvl=info msg=&quot;Request Completed&quot; logger=context userId=0 orgId=0 uname= method=GET path=/public/img/attachments/rendering_plugin_not_installed.png status=302 remote_addr=127.0.0.1 time_ms=0 size=29 referer=</span><br><span class="line">t=2020-05-28T13:25:17+0800 lvl=info msg=&quot;Request Completed&quot; logger=context userId=0 orgId=0 uname= method=GET path=/public/img/attachments/rendering_plugin_not_installed.png status=302 remote_addr=127.0.0.1 time_ms=0 size=29 referer=</span><br><span class="line">t=2020-05-28T13:25:19+0800 lvl=info msg=&quot;Request Completed&quot; logger=context userId=0 orgId=0 uname= method=GET path=/public/img/attachments/rendering_plugin_not_installed.png status=302 remote_addr=127.0.0.1 time_ms=0 size=29 referer=</span><br><span class="line">t=2020-05-28T13:25:20+0800 lvl=info msg=&quot;Request Completed&quot; logger=context userId=0 orgId=0 uname= method=GET path=/public/img/attachments/rendering_plugin_not_installed.png status=302 remote_addr=127.0.0.1 time_ms=0 size=29 referer=</span><br><span class="line">t=2020-05-28T13:25:22+0800 lvl=info msg=&quot;Request Completed&quot; logger=context userId=0 orgId=0 uname= method=GET path=/public/img/attachments/rendering_plugin_not_installed.png status=302 remote_addr=127.0.0.1 time_ms=0 size=29 referer=</span><br><span class="line">t=2020-05-28T13:25:31+0800 lvl=info msg=Rendering logger=rendering renderer=plugin path=&quot;d-solo/000000007/appapi-cduan-hou-duan?orgId=1&amp;panelId=169&quot;</span><br><span class="line">t=2020-05-28T13:25:31+0800 lvl=dbug msg=&quot;Calling renderer plugin&quot; logger=rendering renderer=plugin req=&quot;url:\&quot;http://localhost:3000/d-solo/000000007/appapi-cduan-hou-duan?orgId=1&amp;panelId=169&amp;render=1\&quot; width:1000 height:500 deviceScaleFactor:1 filePath:\&quot;/var/lib/grafana/png/8vQ97TwPoIheP7612fWI.png\&quot; renderKey:\&quot;Lf95eHcZsqM109rj6Jt2Z7BrpPd5Pgz7\&quot; domain:\&quot;localhost\&quot; timeout:15 &quot;</span><br><span class="line">t=2020-05-28T13:25:31+0800 lvl=eror msg=&quot;Render request failed&quot; logger=plugins.backend pluginId=grafana-image-renderer url=&quot;http://localhost:3000/d-solo/000000007/appapi-cduan-hou-duan?orgId=1&amp;panelId=169&amp;render=1&quot; error=&quot;Error: Failed to launch chrome!\n/var/lib/grafana/plugins/grafana-image-renderer/chrome-linux/chrome: error while loading shared libraries: libXcomposite.so.1: cannot open shared object file: No such file or directory\n\n\nTROUBLESHOOTING: https://github.com/GoogleChrome/puppeteer/blob/master/docs/troubleshooting.md\n&quot;</span><br><span class="line">t=2020-05-28T13:25:31+0800 lvl=eror msg=&quot;Failed to render and upload alert panel image.&quot; logger=alerting.notifier ruleId=359 error=&quot;Rendering failed: Error: Failed to launch chrome!\n/var/lib/grafana/plugins/grafana-image-renderer/chrome-linux/chrome: error while loading shared libraries: libXcomposite.so.1: cannot open shared object file: No such file or directory\n\n\nTROUBLESHOOTING: https://github.com/GoogleChrome/puppeteer/blob/master/docs/troubleshooting.md\n&quot;</span><br><span class="line">t=2020-05-28T13:25:52+0800 lvl=info msg=&quot;Request Completed&quot; logger=context userId=0 orgId=0 uname= method=GET path=/public/img/attachments/rendering_plugin_not_installed.png status=302 remote_addr=127.0.0.1 time_ms=0 size=29 referer=</span><br><span class="line">t=2020-05-28T13:25:52+0800 lvl=info msg=&quot;Request Completed&quot; logger=context userId=0 orgId=0 uname= method=GET path=/public/img/attachments/rendering_plugin_not_installed.png status=302 remote_addr=127.0.0.1 time_ms=0 size=29 referer=</span><br><span class="line">t=2020-05-28T13:26:08+0800 lvl=info msg=Rendering logger=rendering renderer=plugin path=&quot;d-solo/000000060/paycenter-zhi-fu-zhong-xin?orgId=1&amp;panelId=19&quot;</span><br><span class="line">t=2020-05-28T13:26:08+0800 lvl=dbug msg=&quot;Calling renderer plugin&quot; logger=rendering renderer=plugin req=&quot;url:\&quot;http://localhost:3000/d-solo/000000060/paycenter-zhi-fu-zhong-xin?orgId=1&amp;panelId=19&amp;render=1\&quot; width:1000 height:500 deviceScaleFactor:1 filePath:\&quot;/var/lib/grafana/png/GpCvZ4Nnxx2WCJuFA8xb.png\&quot; renderKey:\&quot;ES6mxhCatZmmW3c7Hxo4l6DteEkTugoW\&quot; domain:\&quot;localhost\&quot; timeout:15 &quot;</span><br><span class="line">t=2020-05-28T13:26:08+0800 lvl=eror msg=&quot;Render request failed&quot; logger=plugins.backend pluginId=grafana-image-renderer url=&quot;http://localhost:3000/d-solo/000000060/paycenter-zhi-fu-zhong-xin?orgId=1&amp;panelId=19&amp;render=1&quot; error=&quot;Error: Failed to launch chrome!\n/var/lib/grafana/plugins/grafana-image-renderer/chrome-linux/chrome: error while loading shared libraries: libXcomposite.so.1: cannot open shared object file: No such file or directory\n\n\nTROUBLESHOOTING: https://github.com/GoogleChrome/puppeteer/blob/master/docs/troubleshooting.md\n&quot;</span><br><span class="line">t=2020-05-28T13:26:08+0800 lvl=eror msg=&quot;Failed to render and upload alert panel image.&quot; logger=alerting.notifier ruleId=379 error=&quot;Rendering failed: Error: Failed to launch chrome!\n/var/lib/grafana/plugins/grafana-image-renderer/chrome-linux/chrome: error while loading shared libraries: libXcomposite.so.1: cannot open shared object file: No such file or directory\n\n\nTROUBLESHOOTING: https://github.com/GoogleChrome/puppeteer/blob/master/docs/troubleshooting.md\n&quot;</span><br><span class="line">t=2020-05-28T13:26:09+0800 lvl=info msg=&quot;Request Completed&quot; logger=context userId=0 orgId=0 uname= method=GET path=/public/img/attachments/rendering_plugin_not_installed.png status=302 remote_addr=127.0.0.1 time_ms=0 size=29 referer=</span><br><span class="line">t=2020-05-28T13:26:10+0800 lvl=info msg=&quot;Request Completed&quot; logger=context userId=0 orgId=0 uname= method=GET path=/public/img/attachments/rendering_plugin_not_installed.png status=302 remote_addr=127.0.0.1 time_ms=0 size=29 referer=</span><br><span class="line">t=2020-05-28T13:27:40+0800 lvl=info msg=Rendering logger=rendering renderer=plugin path=&quot;d-solo/000000060/paycenter-zhi-fu-zhong-xin?orgId=1&amp;panelId=19&quot;</span><br><span class="line">t=2020-05-28T13:27:40+0800 lvl=dbug msg=&quot;Calling renderer plugin&quot; logger=rendering renderer=plugin req=&quot;url:\&quot;http://localhost:3000/d-solo/000000060/paycenter-zhi-fu-zhong-xin?orgId=1&amp;panelId=19&amp;render=1\&quot; width:1000 height:500 deviceScaleFactor:1 filePath:\&quot;/var/lib/grafana/png/LX8fSgQxPjq3dYJCqNCb.png\&quot; renderKey:\&quot;Dria3M9GEhOgGyc1e2qz6mOhEroc1VHv\&quot; domain:\&quot;localhost\&quot; timeout:15 &quot;</span><br><span class="line">t=2020-05-28T13:27:40+0800 lvl=eror msg=&quot;Render request failed&quot; logger=plugins.backend pluginId=grafana-image-renderer url=&quot;http://localhost:3000/d-solo/000000060/paycenter-zhi-fu-zhong-xin?orgId=1&amp;panelId=19&amp;render=1&quot; error=&quot;Error: Failed to launch chrome!\n/var/lib/grafana/plugins/grafana-image-renderer/chrome-linux/chrome: error while loading shared libraries: libXcomposite.so.1: cannot open shared object file: No such file or directory\n\n\nTROUBLESHOOTING: https://github.com/GoogleChrome/puppeteer/blob/master/docs/troubleshooting.md\n&quot;</span><br><span class="line">t=2020-05-28T13:27:40+0800 lvl=eror msg=&quot;Failed to render and upload alert panel image.&quot; logger=alerting.notifier ruleId=379 error=&quot;Rendering failed: Error: Failed to launch chrome!\n/var/lib/grafana/plugins/grafana-image-renderer/chrome-linux/chrome: error while loading shared libraries: libXcomposite.so.1: cannot open shared object file: No such file or directory\n\n\nTROUBLESHOOTING: https://github.com/GoogleChrome/puppeteer/blob/master/docs/troubleshooting.md\n&quot;</span><br></pre></td></tr></table></figure><blockquote><p>Error: Failed to launch chrome!\n/var/lib/grafana/plugins/grafana-image-renderer/chrome-linux/chrome: error while loading shared libraries: libXcomposite.so.1: cannot open shared object file: No such file or directory\n\n\nTROUBLESHOOTING: <a href="https://github.com/GoogleChrome/puppeteer/blob/master/docs/troubleshooting.md\n&quot;" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/GoogleChrome/puppeteer/blob/master/docs/troubleshooting.md\n&quot;</a></p></blockquote><p>ldd查看依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@yd-devops-web grafana]$ ldd /var/lib/grafana/plugins/grafana-image-renderer/chrome-linux/chrome | grep <span class="string">"not found"</span></span><br><span class="line">libXcomposite.so.1 =&gt; not found</span><br><span class="line">libXcursor.so.1 =&gt; not found</span><br><span class="line">libXi.so.6 =&gt; not found</span><br><span class="line">libXtst.so.6 =&gt; not found</span><br><span class="line">libXss.so.1 =&gt; not found</span><br><span class="line">libXrandr.so.2 =&gt; not found</span><br><span class="line">libatk-1.0.so.0 =&gt; not found</span><br><span class="line">libatk-bridge-2.0.so.0 =&gt; not found</span><br><span class="line">libpangocairo-1.0.so.0 =&gt; not found</span><br><span class="line">libpango-1.0.so.0 =&gt; not found</span><br><span class="line">libatspi.so.0 =&gt; not found</span><br><span class="line">libgtk-3.so.0 =&gt; not found</span><br><span class="line">libgdk-3.so.0 =&gt; not found</span><br><span class="line">libgdk_pixbuf-2.0.so.0 =&gt; not found</span><br></pre></td></tr></table></figure><p>缺了好多图形相关的包，装上就行了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install libatk-bridge* libXss* libgtk*</span><br></pre></td></tr></table></figure><img src="/2020/05/28/upgrade-grafana-7-0/image-20200528135213082.png"><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://grafana.com/grafana/plugins/grafana-image-renderer/installation" rel="external nofollow noopener noreferrer" target="_blank">Grafana Image Renderer plugin for Grafana | Grafana Labs</a></li><li><a href="https://grafana.com/docs/grafana/latest/administration/image_rendering/" rel="external nofollow noopener noreferrer" target="_blank">Image rendering | Grafana Labs</a></li><li><a href="https://blog.csdn.net/weixin_42320932/article/details/102937351" rel="external nofollow noopener noreferrer" target="_blank">grafana安装grafana-image-renderer插件后使用IMAGE获取图片功能不成功_运维_火云邪神的博客-CSDN博客</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近grafana上有些报警没有报出来，而且旧的版本bug也比较多，今天看了下最新版本是7.0。升级之后发现图片渲染出了问题：&lt;/p&gt;
&lt;img src=&quot;/2020/05/28/upgrade-grafana-7-0/image-20200528134401349.png
      
    
    </summary>
    
      <category term="linux" scheme="http://qsli.github.io/categories/linux/"/>
    
    
      <category term="grafana" scheme="http://qsli.github.io/tags/grafana/"/>
    
  </entry>
  
  <entry>
    <title>JDK的HttpURLConnection强制把GET请求转成了POST</title>
    <link href="http://qsli.github.io/2020/05/13/jdk-httpurlconnection-pit/"/>
    <id>http://qsli.github.io/2020/05/13/jdk-httpurlconnection-pit/</id>
    <published>2020-05-12T17:22:39.000Z</published>
    <updated>2020-05-12T17:22:39.869Z</updated>
    
    <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>升级了下feign底层的client，换成了httpclient，然后qa同学在测试的时候，发现有一个接口挂了。</p><img src="/2020/05/13/jdk-httpurlconnection-pit/image-20200513005934085.png"><p>接口如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询房间信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roomQueryParam</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Headers</span>(HttpConstants.HEADER_CONTENT_TYPE_JSON)</span><br><span class="line"><span class="meta">@RequestLine</span>(<span class="string">"GET /room/queryRooms"</span>)</span><br><span class="line"><span class="function">List&lt;RoomDTO&gt; <span class="title">queryRooms</span><span class="params">(@Valid RoomQueryParam roomQueryParam)</span></span>;</span><br></pre></td></tr></table></figure><p>接口上声明的是GET方法，再看controller的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询房间信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> roomQueryParam</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/queryRooms"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"条件查询房间信息"</span>, httpMethod = <span class="string">"POST"</span>, produces = <span class="string">"application/json;charset=UTF-8"</span>, consumes = <span class="string">"application/json;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;RoomDTO&gt; <span class="title">queryRooms</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  @Valid @NotNull @RequestBody @ApiParam(value = <span class="string">"房间查询参数"</span>, required = <span class="keyword">true</span>)</span> RoomQueryParam roomQueryParam) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> roomService.queryRooms(roomQueryParam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>controller上只允许POST请求</strong>，但是线上一直是ok的。</p><p>看feign的日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">2020-05-12 22:20:59.051 INFO [pms-api,de87cf7f069503a3,de87cf7f069503a3,<span class="literal">true</span>] --- [o-10026-exec-14] http.consumer.log                        : [GalaxyRoomRemote<span class="comment">#queryRooms]</span></span><br><span class="line">GET http://192.168.16.212:10024/room/queryRooms HTTP/1.1</span><br><span class="line">Content-Type: application/json;charset=UTF-8</span><br><span class="line">Content-Length: 86</span><br><span class="line">appCode: pms</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"chainId"</span> : 114,</span><br><span class="line">  <span class="string">"roomNo"</span> : <span class="string">"8235"</span>,</span><br><span class="line">  <span class="string">"roomTypeId"</span> : [ ],</span><br><span class="line">  <span class="string">"cleanState"</span> : [ ]</span><br><span class="line">&#125;</span><br><span class="line"> &lt;--- HTTP/1.1 200  elapsed : 13 ms</span><br><span class="line">connection: keep-alive</span><br><span class="line">content-type: application/json;charset=UTF-8</span><br><span class="line">date: Tue, 12 May 2020 14:20:59 GMT</span><br><span class="line">keep-alive: timeout=20</span><br><span class="line">transfer-encoding: chunked</span><br><span class="line">zipkin-trace-id: de2d912a29ae1a91</span><br><span class="line"> &lt;--- END HTTP (468-byte body)</span><br></pre></td></tr></table></figure><p><strong>确实是GET请求！</strong> 再看server端的tomcat的access日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2020-05-12 22:20:59.050 INFO [galaxy,de2d912a29ae1a91,de2d912a29ae1a91,<span class="literal">false</span>] --- [io-10024-exec-7] http.request.response.log                :</span><br><span class="line">POST http://192.168.16.212:10024/room/queryRooms?</span><br><span class="line">content-type: application/json;charset=UTF-8</span><br><span class="line">appcode: pms</span><br><span class="line">accept: */*</span><br><span class="line">cache-control: no-cache</span><br><span class="line">pragma: no-cache</span><br><span class="line">user-agent: Java/1.8.0_171</span><br><span class="line">host: 192.168.16.212:10024</span><br><span class="line">connection: keep-alive</span><br><span class="line"></span><br><span class="line">&#123;  <span class="string">"chainId"</span> : 114,  <span class="string">"roomNo"</span> : <span class="string">"8235"</span>,  <span class="string">"roomTypeId"</span> : [ ],  <span class="string">"cleanState"</span> : [ ]&#125;</span><br><span class="line"></span><br><span class="line">ret code 200, start time 1589293259041 --&gt; end time 1589293259050, cost: 9</span><br></pre></td></tr></table></figure><p><strong>神奇的是变成了POST请求</strong>！</p><h3 id="到底是什么请求？"><a href="#到底是什么请求？" class="headerlink" title="到底是什么请求？"></a>到底是什么请求？</h3><p>这俩日志肯定有一个撒了谎，这时候只有请出地藏菩萨了。用tcpdump抓包后发现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ sudo tcpdump -n -S -s 0 -A    dst port 8182   | grep <span class="string">"queryRooms"</span>  -C40 --color</span><br><span class="line"></span><br><span class="line">01:02:45.933534 IP 192.168.6.212.38430 &gt; 192.168.1.3.vmware-fdm: Flags [P.], seq 1572827156:1572827402, ack 904633996, win 981, options [nop,nop,TS val 1568347176 ecr 3383828365], length 246</span><br><span class="line">E..*..@.@.*.............].p.5.......r......</span><br><span class="line">]&#123;.(....POST /room/queryRooms HTTP/1.1</span><br><span class="line">Content-Type: application/json;charset=UTF-8</span><br><span class="line">appCode: pms</span><br><span class="line">Accept: */*</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Pragma: no-cache</span><br><span class="line">User-Agent: Java/1.8.0_171</span><br><span class="line">Host: 192.168.1.3:8182</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: 89</span><br></pre></td></tr></table></figure><p>tcp包，告诉我们这是一个post！</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><h3 id="初步定位"><a href="#初步定位" class="headerlink" title="初步定位"></a>初步定位</h3><p>简单写了个单测，debug了下新旧代码，发现了经过下面的代码之后，请求方式就变了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sun.net.www.protocol.http.HttpURLConnection#getOutputStream0</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> OutputStream <span class="title">getOutputStream0</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!doOutput) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ProtocolException(<span class="string">"cannot write to a URLConnection"</span></span><br><span class="line">                               + <span class="string">" if doOutput=false - call setDoOutput(true)"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (method.equals(<span class="string">"GET"</span>)) &#123;</span><br><span class="line">                method = <span class="string">"POST"</span>; <span class="comment">// Backward compatibility</span></span><br><span class="line">            &#125;</span><br><span class="line">          <span class="comment">// 省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>搜了下， 发现了stackoverflow上有人问过了：</p><blockquote><p>The <code>httpCon.setDoOutput(true);</code> implicitly set the request method to POST because that’s the default method whenever you want to send a request body.</p><p>If you want to use GET, remove that line and remove the <code>OutputStreamWriter out = new OutputStreamWriter(httpCon.getOutputStream());</code> line. You don’t need to send a request body for GET requests.</p></blockquote><p>升级为httpclient， 就没有这个兼容，直接就报错了。至于为啥要升级成httpclient，因为feign默认的是没有连接池的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// feign.Client.Default#convertAndSend</span></span><br><span class="line"> <span class="function">HttpURLConnection <span class="title">convertAndSend</span><span class="params">(Request request, Options options)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">   <span class="comment">// 每次打开一个连接   </span></span><br><span class="line">   <span class="keyword">final</span> HttpURLConnection</span><br><span class="line">          connection =</span><br><span class="line">          (HttpURLConnection) <span class="keyword">new</span> URL(request.url()).openConnection();</span><br><span class="line">      <span class="keyword">if</span> (connection <span class="keyword">instanceof</span> HttpsURLConnection) &#123;</span><br><span class="line">        HttpsURLConnection sslCon = (HttpsURLConnection) connection;</span><br><span class="line">        <span class="keyword">if</span> (sslContextFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">          sslCon.setSSLSocketFactory(sslContextFactory);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (hostnameVerifier != <span class="keyword">null</span>) &#123;</span><br><span class="line">          sslCon.setHostnameVerifier(hostnameVerifier);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      connection.setConnectTimeout(options.connectTimeoutMillis());</span><br><span class="line">      connection.setReadTimeout(options.readTimeoutMillis());</span><br><span class="line">      connection.setAllowUserInteraction(<span class="keyword">false</span>);</span><br><span class="line">      connection.setInstanceFollowRedirects(<span class="keyword">true</span>);</span><br><span class="line">      connection.setRequestMethod(request.method());</span><br><span class="line"></span><br><span class="line">      Collection&lt;String&gt; contentEncodingValues = request.headers().get(CONTENT_ENCODING);</span><br><span class="line">      <span class="keyword">boolean</span></span><br><span class="line">          gzipEncodedRequest =</span><br><span class="line">          contentEncodingValues != <span class="keyword">null</span> &amp;&amp; contentEncodingValues.contains(ENCODING_GZIP);</span><br><span class="line">      <span class="keyword">boolean</span></span><br><span class="line">          deflateEncodedRequest =</span><br><span class="line">          contentEncodingValues != <span class="keyword">null</span> &amp;&amp; contentEncodingValues.contains(ENCODING_DEFLATE);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">boolean</span> hasAcceptHeader = <span class="keyword">false</span>;</span><br><span class="line">      Integer contentLength = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">for</span> (String field : request.headers().keySet()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (field.equalsIgnoreCase(<span class="string">"Accept"</span>)) &#123;</span><br><span class="line">          hasAcceptHeader = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (String value : request.headers().get(field)) &#123;</span><br><span class="line">          <span class="keyword">if</span> (field.equals(CONTENT_LENGTH)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!gzipEncodedRequest &amp;&amp; !deflateEncodedRequest) &#123;</span><br><span class="line">              contentLength = Integer.valueOf(value);</span><br><span class="line">              connection.addRequestProperty(field, value);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            connection.addRequestProperty(field, value);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Some servers choke on the default accept string.</span></span><br><span class="line">      <span class="keyword">if</span> (!hasAcceptHeader) &#123;</span><br><span class="line">        connection.addRequestProperty(<span class="string">"Accept"</span>, <span class="string">"*/*"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (request.body() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (contentLength != <span class="keyword">null</span>) &#123;</span><br><span class="line">          connection.setFixedLengthStreamingMode(contentLength);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          connection.setChunkedStreamingMode(<span class="number">8196</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        connection.setDoOutput(<span class="keyword">true</span>);</span><br><span class="line">        OutputStream out = connection.getOutputStream();</span><br><span class="line">        <span class="keyword">if</span> (gzipEncodedRequest) &#123;</span><br><span class="line">          out = <span class="keyword">new</span> GZIPOutputStream(out);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (deflateEncodedRequest) &#123;</span><br><span class="line">          out = <span class="keyword">new</span> DeflaterOutputStream(out);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          out.write(request.body());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            out.close();</span><br><span class="line">          &#125; <span class="keyword">catch</span> (IOException suppressed) &#123; <span class="comment">// NOPMD</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> connection;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="GET可以有BODY吗？"><a href="#GET可以有BODY吗？" class="headerlink" title="GET可以有BODY吗？"></a>GET可以有BODY吗？</h3><p>mdn:</p><blockquote><p>The final part of the request is its body. Not all requests have one: requests fetching resources, like <code>GET</code>, <code>HEAD</code>, <code>DELETE</code>, or <code>OPTIONS</code>, usually don’t need one. Some requests send data to the server in order to update it: as often the case with <code>POST</code> requests (containing HTML form data).</p></blockquote><p>Stackoverflow:</p><blockquote><p>The RFC2616 referenced as “HTTP/1.1 spec” is now obsolete. In 2014 it was replaced by RFCs 7230-7237. Quote “the message-body SHOULD be ignored when handling the request” has been deleted. It’s now just “Request message framing is independent of method semantics, even if the method doesn’t define any use for a message body” The 2nd quote “The GET method means retrieve whatever information … is identified by the Request-URI” was deleted. - From a comment</p></blockquote><p>早期是不让有body的，JDK这么做也是有历史原因的。</p><p>后来RFC更新了，GET可以有body，一般不建议这么做。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://stackoverflow.com/questions/8760052/httpurlconnection-sends-a-post-request-even-though-httpcon-setrequestmethodget" rel="external nofollow noopener noreferrer" target="_blank">java - HttpURLConnection sends a POST request even though httpCon.setRequestMethod(“GET”); is set - Stack Overflow</a></li><li><a href="https://stackoverflow.com/questions/978061/http-get-with-request-body" rel="external nofollow noopener noreferrer" target="_blank">rest - HTTP GET with request body - Stack Overflow</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages" rel="external nofollow noopener noreferrer" target="_blank">HTTP Messages - HTTP | MDN</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h2&gt;&lt;p&gt;升级了下feign底层的client，换成了httpclient，然后qa同学在测试的时候，发现有一个接口挂了。&lt;/p&gt;
&lt;img src=
      
    
    </summary>
    
      <category term="java" scheme="http://qsli.github.io/categories/java/"/>
    
    
      <category term="HttpURLConnection" scheme="http://qsli.github.io/tags/HttpURLConnection/"/>
    
  </entry>
  
  <entry>
    <title>jdbc预编译缓存加速sql执行</title>
    <link href="http://qsli.github.io/2020/05/05/cache-prep-stmts/"/>
    <id>http://qsli.github.io/2020/05/05/cache-prep-stmts/</id>
    <published>2020-05-04T16:21:27.000Z</published>
    <updated>2020-05-04T16:21:27.855Z</updated>
    
    <content type="html"><![CDATA[<p><code>PreparedStatement</code>可以防止sql注入，这个大家都知道；今天来聊聊他对性能的提升。</p><h2 id="SQL-syntax"><a href="#SQL-syntax" class="headerlink" title="SQL syntax"></a>SQL syntax</h2><p>SQL syntax for prepared statements is based on three SQL statements:</p><ul><li><a href="https://dev.mysql.com/doc/refman/5.7/en/prepare.html" rel="external nofollow noopener noreferrer" target="_blank"><code>PREPARE</code></a> prepares a statement for execution (see <a href="https://dev.mysql.com/doc/refman/5.7/en/prepare.html" rel="external nofollow noopener noreferrer" target="_blank">Section 13.5.1, “PREPARE Statement”</a>).</li><li><a href="https://dev.mysql.com/doc/refman/5.7/en/execute.html" rel="external nofollow noopener noreferrer" target="_blank"><code>EXECUTE</code></a> executes a prepared statement (see <a href="https://dev.mysql.com/doc/refman/5.7/en/execute.html" rel="external nofollow noopener noreferrer" target="_blank">Section 13.5.2, “EXECUTE Statement”</a>).</li><li><a href="https://dev.mysql.com/doc/refman/5.7/en/deallocate-prepare.html" rel="external nofollow noopener noreferrer" target="_blank"><code>DEALLOCATE PREPARE</code></a> releases a prepared statement (see <a href="https://dev.mysql.com/doc/refman/5.7/en/deallocate-prepare.html" rel="external nofollow noopener noreferrer" target="_blank">Section 13.5.3, “DEALLOCATE PREPARE Statement”</a>).</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; PREPARE stmt1 FROM 'SELECT * FROM words where id = ?';</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">Statement prepared</span><br><span class="line"></span><br><span class="line">mysql&gt; SET @i=1;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">mysql&gt; EXECUTE stmt1 USING @i;</span><br><span class="line">Empty <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">SET</span> @i=<span class="number">2</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">mysql&gt; EXECUTE stmt1 USING @i;</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">| id | word |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">|  2 | 123  |</span><br><span class="line">+<span class="comment">----+------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">deallocate</span> <span class="keyword">prepare</span> stmt1;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; EXECUTE stmt1 USING @i;</span><br><span class="line">ERROR 1243 (HY000): Unknown prepared statement <span class="keyword">handler</span> (stmt1) given <span class="keyword">to</span> <span class="keyword">EXECUTE</span></span><br></pre></td></tr></table></figure><h2 id="MySQL-Connector-J"><a href="#MySQL-Connector-J" class="headerlink" title="MySQL Connector/J"></a>MySQL Connector/J</h2><h3 id="普通的sql执行"><a href="#普通的sql执行" class="headerlink" title="普通的sql执行"></a>普通的sql执行</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPreCompile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  String connectString = <span class="string">"jdbc:mysql://localhost/test?user=root&amp;password=toor&amp;useLocalSessionState=true&amp;useSSL=false"</span>;</span><br><span class="line">  Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>)</span><br><span class="line">    .newInstance();</span><br><span class="line">  <span class="keyword">try</span> (Connection conn = DriverManager.getConnection(connectString)) &#123;</span><br><span class="line">    Stopwatch stopwatch = Stopwatch.createStarted();</span><br><span class="line">    <span class="keyword">try</span> (PreparedStatement psts = conn.prepareStatement(<span class="string">"delete from words where id = ?"</span>)) &#123;</span><br><span class="line">      psts.setInt(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">      psts.execute();</span><br><span class="line">      stopwatch.stop();</span><br><span class="line">      System.out.println(<span class="string">"stopwatch = "</span> + stopwatch.elapsed(TimeUnit.MILLISECONDS));</span><br><span class="line">      psts.setInt(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">      psts.execute();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>wireshark抓包：</p><img src="/2020/05/05/cache-prep-stmts/image-20200504210731650.png"><p>mysql general log:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2020-05-04T13:06:07.883131Z   15 Connectroot@localhost on <span class="built_in">test</span> using TCP/IP</span><br><span class="line">2020-05-04T13:06:07.885668Z   15 Query/* mysql-connector-java-8.0.16 (Revision: 34cbc6bc61f72836e26327537a432d6db7c77de6) */SELECT  @@session.auto_increment_increment AS auto_increment_increment, @@character_set_client AS character_set_client, @@character_set_connection AS character_set_connection, @@character_set_results AS character_set_results, @@character_set_server AS character_set_server, @@collation_server AS collation_server, @@collation_connection AS collation_connection, @@init_connect AS init_connect, @@interactive_timeout AS interactive_timeout, @@license AS license, @@lower_case_table_names AS lower_case_table_names, @@max_allowed_packet AS max_allowed_packet, @@net_write_timeout AS net_write_timeout, @@performance_schema AS performance_schema, @@sql_mode AS sql_mode, @@system_time_zone AS system_time_zone, @@time_zone AS time_zone, @@transaction_isolation AS transaction_isolation, @@wait_timeout AS wait_timeout</span><br><span class="line">2020-05-04T13:06:07.905021Z   15 QuerySET character_set_results = NULL</span><br><span class="line">2020-05-04T13:06:07.929557Z   15 Querydelete from words <span class="built_in">where</span> id = 1</span><br><span class="line">2020-05-04T13:06:07.934906Z   15 Querydelete from words <span class="built_in">where</span> id = 10</span><br><span class="line">2020-05-04T13:06:07.940645Z   15 Quit</span><br></pre></td></tr></table></figure><h3 id="with-useServerPrepStmts-true"><a href="#with-useServerPrepStmts-true" class="headerlink" title="with useServerPrepStmts=true"></a>with useServerPrepStmts=true</h3><blockquote><p><strong>useServerPrepStmts</strong></p><p>Use server-side prepared statements if the server supports them?</p><p>Default: false</p><p>Since version: 3.1.0</p></blockquote><p>jdbc的连接参数加上<code>useServerPrepStmts=true</code>：</p><img src="/2020/05/05/cache-prep-stmts/image-20200504211949686.png"><p>首选需要编译statement，请求如下：</p><img src="/2020/05/05/cache-prep-stmts/image-20200504212134794.png"><p>后面执行的时候，只传了对应的statement id 1和占位符对应的值 1，大大减少了网络的传输：</p><img src="/2020/05/05/cache-prep-stmts/image-20200504212218401.png"><p>mysql的general log如下，也是先prepare， 然后excute了两次， 最后关闭stmt：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2020-05-04T13:15:55.611149Z   16 Connectroot@localhost on <span class="built_in">test</span> using TCP/IP</span><br><span class="line">2020-05-04T13:15:55.615655Z   16 Query/* mysql-connector-java-8.0.16 (Revision: 34cbc6bc61f72836e26327537a432d6db7c77de6) */SELECT  @@session.auto_increment_increment AS auto_increment_increment, @@character_set_client AS character_set_client, @@character_set_connection AS character_set_connection, @@character_set_results AS character_set_results, @@character_set_server AS character_set_server, @@collation_server AS collation_server, @@collation_connection AS collation_connection, @@init_connect AS init_connect, @@interactive_timeout AS interactive_timeout, @@license AS license, @@lower_case_table_names AS lower_case_table_names, @@max_allowed_packet AS max_allowed_packet, @@net_write_timeout AS net_write_timeout, @@performance_schema AS performance_schema, @@sql_mode AS sql_mode, @@system_time_zone AS system_time_zone, @@time_zone AS time_zone, @@transaction_isolation AS transaction_isolation, @@wait_timeout AS wait_timeout</span><br><span class="line">2020-05-04T13:15:55.640086Z   16 QuerySET character_set_results = NULL</span><br><span class="line">2020-05-04T13:15:55.672345Z   16 Preparedelete from words <span class="built_in">where</span> id = ?</span><br><span class="line">2020-05-04T13:15:55.676355Z   16 Executedelete from words <span class="built_in">where</span> id = 1</span><br><span class="line">2020-05-04T13:15:55.681600Z   16 Executedelete from words <span class="built_in">where</span> id = 10</span><br><span class="line">2020-05-04T13:15:55.681949Z   16 Close stmt</span><br><span class="line">2020-05-04T13:15:55.687659Z   16 Quit</span><br></pre></td></tr></table></figure><h3 id="cachePrepStmts和useServerPrepStmts同时打开"><a href="#cachePrepStmts和useServerPrepStmts同时打开" class="headerlink" title="cachePrepStmts和useServerPrepStmts同时打开"></a>cachePrepStmts和useServerPrepStmts同时打开</h3><blockquote><p><strong>cachePrepStmts</strong></p><p>Should the driver cache the parsing stage of PreparedStatements of client-side prepared statements, the “check” for suitability of server-side prepared and server-side prepared statements themselves?</p><p>Default: false</p><p>Since version: 3.0.10</p></blockquote><p>这里就是加上缓存，stmt close的时候，并不会把之前预编译的stmt给关闭，这个缓存是connection级别的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPreCompile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  String connectString = <span class="string">"jdbc:mysql://localhost/test?user=root&amp;password=toor&amp;useLocalSessionState=true&amp;useSSL=false&amp;useServerPrepStmts=true&amp;cachePrepStmts=true"</span>;</span><br><span class="line">  Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>)</span><br><span class="line">    .newInstance();</span><br><span class="line">  <span class="keyword">try</span> (Connection conn = DriverManager.getConnection(connectString)) &#123;</span><br><span class="line">    Stopwatch stopwatch = Stopwatch.createStarted();</span><br><span class="line">    <span class="keyword">try</span> (PreparedStatement psts = conn.prepareStatement(<span class="string">"delete from words where id = ?"</span>)) &#123;</span><br><span class="line">      psts.setInt(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">      psts.execute();</span><br><span class="line">      stopwatch.stop();</span><br><span class="line">      System.out.println(<span class="string">"stopwatch = "</span> + stopwatch.elapsed(TimeUnit.MILLISECONDS));</span><br><span class="line">      psts.setInt(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">      psts.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上面的stmt关闭之后，再次执行</span></span><br><span class="line">    <span class="keyword">try</span> (PreparedStatement psts = conn.prepareStatement(<span class="string">"delete from words where id = ?"</span>)) &#123;</span><br><span class="line">      psts.setInt(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">      psts.execute();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 上面的connection关闭之后，再次执行</span></span><br><span class="line">  <span class="keyword">try</span> (Connection conn = DriverManager.getConnection(connectString)) &#123;</span><br><span class="line">    <span class="keyword">try</span> (PreparedStatement psts = conn.prepareStatement(<span class="string">"delete from words where id = ?"</span>)) &#123;</span><br><span class="line">      psts.setInt(<span class="number">1</span>, <span class="number">66</span>);</span><br><span class="line">      psts.execute();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>wireshark抓包：</p><img src="/2020/05/05/cache-prep-stmts/image-20200504231854521.png"><p>mysql的general log：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">2020-05-04T15:17:32.921041Z   19 Connectroot@localhost on <span class="built_in">test</span> using TCP/IP</span><br><span class="line">2020-05-04T15:17:32.929561Z   19 Query/* mysql-connector-java-8.0.16 (Revision: 34cbc6bc61f72836e26327537a432d6db7c77de6) */SELECT  @@session.auto_increment_increment AS auto_increment_increment, @@character_set_client AS character_set_client, @@character_set_connection AS character_set_connection, @@character_set_results AS character_set_results, @@character_set_server AS character_set_server, @@collation_server AS collation_server, @@collation_connection AS collation_connection, @@init_connect AS init_connect, @@interactive_timeout AS interactive_timeout, @@license AS license, @@lower_case_table_names AS lower_case_table_names, @@max_allowed_packet AS max_allowed_packet, @@net_write_timeout AS net_write_timeout, @@performance_schema AS performance_schema, @@sql_mode AS sql_mode, @@system_time_zone AS system_time_zone, @@time_zone AS time_zone, @@transaction_isolation AS transaction_isolation, @@wait_timeout AS wait_timeout</span><br><span class="line">2020-05-04T15:17:32.949986Z   19 QuerySET character_set_results = NULL</span><br><span class="line">2020-05-04T15:17:32.983173Z   19 Preparedelete from words <span class="built_in">where</span> id = ?</span><br><span class="line">2020-05-04T15:17:32.990498Z   19 Executedelete from words <span class="built_in">where</span> id = 1</span><br><span class="line">2020-05-04T15:17:32.997115Z   19 Executedelete from words <span class="built_in">where</span> id = 10</span><br><span class="line">2020-05-04T15:17:32.997566Z   19 Reset stmt</span><br><span class="line">2020-05-04T15:17:32.997725Z   19 Executedelete from words <span class="built_in">where</span> id = 100</span><br><span class="line">2020-05-04T15:17:33.003682Z   19 Quit</span><br><span class="line">2020-05-04T15:17:33.009206Z   20 Connectroot@localhost on <span class="built_in">test</span> using TCP/IP</span><br><span class="line">2020-05-04T15:17:33.009643Z   20 Query/* mysql-connector-java-8.0.16 (Revision: 34cbc6bc61f72836e26327537a432d6db7c77de6) */SELECT  @@session.auto_increment_increment AS auto_increment_increment, @@character_set_client AS character_set_client, @@character_set_connection AS character_set_connection, @@character_set_results AS character_set_results, @@character_set_server AS character_set_server, @@collation_server AS collation_server, @@collation_connection AS collation_connection, @@init_connect AS init_connect, @@interactive_timeout AS interactive_timeout, @@license AS license, @@lower_case_table_names AS lower_case_table_names, @@max_allowed_packet AS max_allowed_packet, @@net_write_timeout AS net_write_timeout, @@performance_schema AS performance_schema, @@sql_mode AS sql_mode, @@system_time_zone AS system_time_zone, @@time_zone AS time_zone, @@transaction_isolation AS transaction_isolation, @@wait_timeout AS wait_timeout</span><br><span class="line">2020-05-04T15:17:33.010569Z   20 QuerySET character_set_results = NULL</span><br><span class="line">2020-05-04T15:17:33.011244Z   20 Preparedelete from words <span class="built_in">where</span> id = ?</span><br><span class="line">2020-05-04T15:17:33.011475Z   20 Executedelete from words <span class="built_in">where</span> id = 66</span><br><span class="line">2020-05-04T15:17:33.114892Z   20 Quit</span><br></pre></td></tr></table></figure><p>连接关闭之后，重新执行同样的sql，发现又触发了编译。</p><h3 id="缓存大小的限制"><a href="#缓存大小的限制" class="headerlink" title="缓存大小的限制"></a>缓存大小的限制</h3><p>下面两个参数，分别限制了能够缓存多少个和最大sql的长度</p><h4 id="prepStmtCacheSize"><a href="#prepStmtCacheSize" class="headerlink" title="prepStmtCacheSize"></a>prepStmtCacheSize</h4><blockquote><p><strong>prepStmtCacheSize</strong></p><p>If prepared statement caching is enabled, <strong>how many</strong> prepared statements should be cached?</p><p>Default: 25</p><p>Since version: 3.0.10</p></blockquote><h4 id="prepStmtCacheSqlLimit"><a href="#prepStmtCacheSqlLimit" class="headerlink" title="prepStmtCacheSqlLimit"></a>prepStmtCacheSqlLimit</h4><blockquote><p>If prepared statement caching is enabled, what’s the <strong>largest SQL</strong> the driver will cache the parsing for?</p><p>Default: 256</p><p>Since version: 3.0.10</p></blockquote><h2 id="druid-连接池下使用"><a href="#druid-连接池下使用" class="headerlink" title="druid 连接池下使用"></a>druid 连接池下使用</h2><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPreCompile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String connectString = <span class="string">"jdbc:mysql://localhost/test?user=root&amp;password=toor&amp;useLocalSessionState=true&amp;useSSL=false&amp;useServerPrepStmts=true&amp;cachePrepStmts=true"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> DruidDataSource druidDataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        druidDataSource.setUrl(connectString);</span><br><span class="line">        druidDataSource.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        druidDataSource.setPassword(<span class="string">"toor"</span>);</span><br><span class="line">        druidDataSource.setFilters(<span class="string">"slf4j"</span>);</span><br><span class="line">        <span class="comment">//        druidDataSource.setTestOnBorrow(true);</span></span><br><span class="line">        <span class="comment">//        druidDataSource.setTestOnReturn(true);</span></span><br><span class="line">        <span class="comment">//        druidDataSource.setTestWhileIdle(true);</span></span><br><span class="line">        druidDataSource.setMaxActive(<span class="number">1</span>);</span><br><span class="line">        druidDataSource.setInitialSize(<span class="number">1</span>);</span><br><span class="line">        druidDataSource.setTimeBetweenLogStatsMillis(<span class="number">900</span>);</span><br><span class="line">        <span class="keyword">try</span> (Connection conn = druidDataSource.getConnection()) &#123;</span><br><span class="line">            Stopwatch stopwatch = Stopwatch.createStarted();</span><br><span class="line">            <span class="keyword">try</span> (PreparedStatement psts = conn.prepareStatement(<span class="string">"delete from words where id = ?"</span>)) &#123;</span><br><span class="line">                psts.setInt(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">                psts.execute();</span><br><span class="line">                stopwatch.stop();</span><br><span class="line">                System.out.println(<span class="string">"stopwatch = "</span> + stopwatch.elapsed(TimeUnit.MILLISECONDS));</span><br><span class="line">                psts.setInt(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">                psts.execute();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 上面的stmt关闭之后，再次执行</span></span><br><span class="line">            <span class="keyword">try</span> (PreparedStatement psts = conn.prepareStatement(<span class="string">"delete from words where id = ?"</span>)) &#123;</span><br><span class="line">                psts.setInt(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">                psts.execute();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 上面的connection关闭之后，再次执行</span></span><br><span class="line">        <span class="keyword">try</span> (Connection conn = druidDataSource.getConnection()) &#123;</span><br><span class="line">            <span class="keyword">try</span> (PreparedStatement psts = conn.prepareStatement(<span class="string">"delete from words where id = ?"</span>)) &#123;</span><br><span class="line">                psts.setInt(<span class="number">1</span>, <span class="number">66</span>);</span><br><span class="line">                psts.execute();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>只有一个连接的druid连接池，连接关闭连接时其实是归还到池子中，所以第二次拿连接，<strong>拿到的还是同一个</strong>；所以没有触发第二次编译。</p><p>wireshark抓包：</p><img src="/2020/05/05/cache-prep-stmts/image-20200504232259775.png"><p>mysql general log：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2020-05-04T15:21:34.187732Z   21 Connectroot@localhost on <span class="built_in">test</span> using TCP/IP</span><br><span class="line">2020-05-04T15:21:34.202166Z   21 Query/* mysql-connector-java-8.0.16 (Revision: 34cbc6bc61f72836e26327537a432d6db7c77de6) */SELECT  @@session.auto_increment_increment AS auto_increment_increment, @@character_set_client AS character_set_client, @@character_set_connection AS character_set_connection, @@character_set_results AS character_set_results, @@character_set_server AS character_set_server, @@collation_server AS collation_server, @@collation_connection AS collation_connection, @@init_connect AS init_connect, @@interactive_timeout AS interactive_timeout, @@license AS license, @@lower_case_table_names AS lower_case_table_names, @@max_allowed_packet AS max_allowed_packet, @@net_write_timeout AS net_write_timeout, @@performance_schema AS performance_schema, @@sql_mode AS sql_mode, @@system_time_zone AS system_time_zone, @@time_zone AS time_zone, @@transaction_isolation AS transaction_isolation, @@wait_timeout AS wait_timeout</span><br><span class="line">2020-05-04T15:21:34.240492Z   21 QuerySET character_set_results = NULL</span><br><span class="line">2020-05-04T15:21:34.316483Z   21 Preparedelete from words <span class="built_in">where</span> id = ?</span><br><span class="line">2020-05-04T15:21:34.333444Z   21 Executedelete from words <span class="built_in">where</span> id = 1</span><br><span class="line">2020-05-04T15:21:34.344075Z   21 Executedelete from words <span class="built_in">where</span> id = 10</span><br><span class="line">2020-05-04T15:21:34.351728Z   21 Reset stmt</span><br><span class="line">2020-05-04T15:21:34.352101Z   21 Executedelete from words <span class="built_in">where</span> id = 100</span><br><span class="line">2020-05-04T15:21:34.356117Z   21 Reset stmt</span><br><span class="line">2020-05-04T15:21:34.356407Z   21 Executedelete from words <span class="built_in">where</span> id = 66</span><br></pre></td></tr></table></figure><h2 id="翻翻源码"><a href="#翻翻源码" class="headerlink" title="翻翻源码"></a>翻翻源码</h2><h3 id="jdbc-conenctor"><a href="#jdbc-conenctor" class="headerlink" title="jdbc conenctor"></a>jdbc conenctor</h3><img src="/2020/05/05/cache-prep-stmts/image-20200505000534357.png"><p>prepare的时候，会先从缓存中取：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// com.mysql.cj.jdbc.ConnectionImpl#prepareStatement(java.lang.String, int, int)</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> java.sql.<span class="function">PreparedStatement <span class="title">prepareStatement</span><span class="params">(String sql, <span class="keyword">int</span> resultSetType, <span class="keyword">int</span> resultSetConcurrency)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (getConnectionMutex()) &#123;</span><br><span class="line">            checkClosed();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="comment">// <span class="doctag">FIXME:</span> Create warnings if can't create results of the given type or concurrency</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            ClientPreparedStatement pStmt = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">boolean</span> canServerPrepare = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            String nativeSql = <span class="keyword">this</span>.processEscapeCodesForPrepStmts.getValue() ? nativeSQL(sql) : sql;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.useServerPrepStmts.getValue() &amp;&amp; <span class="keyword">this</span>.emulateUnsupportedPstmts.getValue()) &#123;</span><br><span class="line">                canServerPrepare = canHandleAsServerPreparedStatement(nativeSql);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.useServerPrepStmts.getValue() &amp;&amp; canServerPrepare) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.cachePrepStmts.getValue()) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (<span class="keyword">this</span>.serverSideStatementCache) &#123;</span><br><span class="line">                      <span class="comment">// 从cache中取出来</span></span><br><span class="line">                        pStmt = <span class="keyword">this</span>.serverSideStatementCache.remove(<span class="keyword">new</span> CompoundCacheKey(<span class="keyword">this</span>.database, sql));</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (pStmt != <span class="keyword">null</span>) &#123;</span><br><span class="line">                          <span class="comment">// 强转为ServerPreparedStatement，清理参数，直接返回</span></span><br><span class="line">                            ((com.mysql.cj.jdbc.ServerPreparedStatement) pStmt).setClosed(<span class="keyword">false</span>);</span><br><span class="line">                            pStmt.clearParameters();</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (pStmt == <span class="keyword">null</span>) &#123;</span><br><span class="line">                          <span class="comment">// 创建新的ServerPreparedStatement</span></span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                pStmt = ServerPreparedStatement.getInstance(getMultiHostSafeProxy(), nativeSql, <span class="keyword">this</span>.database, resultSetType,</span><br><span class="line">                                        resultSetConcurrency);</span><br><span class="line">                                <span class="keyword">if</span> (sql.length() &lt; <span class="keyword">this</span>.prepStmtCacheSqlLimit.getValue()) &#123;</span><br><span class="line">                                    ((com.mysql.cj.jdbc.ServerPreparedStatement) pStmt).isCached = <span class="keyword">true</span>;</span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                                pStmt.setResultSetType(resultSetType);</span><br><span class="line">                                pStmt.setResultSetConcurrency(resultSetConcurrency);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (SQLException sqlEx) &#123;</span><br><span class="line">                                <span class="comment">// Punt, if necessary</span></span><br><span class="line">                                <span class="keyword">if</span> (<span class="keyword">this</span>.emulateUnsupportedPstmts.getValue()) &#123;</span><br><span class="line">                                    pStmt = (ClientPreparedStatement) clientPrepareStatement(nativeSql, resultSetType, resultSetConcurrency, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">                                    <span class="keyword">if</span> (sql.length() &lt; <span class="keyword">this</span>.prepStmtCacheSqlLimit.getValue()) &#123;</span><br><span class="line">                                        <span class="keyword">this</span>.serverSideStatementCheckCache.put(sql, Boolean.FALSE);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    <span class="keyword">throw</span> sqlEx;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="comment">// only canServerPrepare</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        pStmt = ServerPreparedStatement.getInstance(getMultiHostSafeProxy(), nativeSql, <span class="keyword">this</span>.database, resultSetType, resultSetConcurrency);</span><br><span class="line"></span><br><span class="line">                        pStmt.setResultSetType(resultSetType);</span><br><span class="line">                        pStmt.setResultSetConcurrency(resultSetConcurrency);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (SQLException sqlEx) &#123;</span><br><span class="line">                        <span class="comment">// Punt, if necessary</span></span><br><span class="line">                        <span class="keyword">if</span> (<span class="keyword">this</span>.emulateUnsupportedPstmts.getValue()) &#123;</span><br><span class="line">                            pStmt = (ClientPreparedStatement) clientPrepareStatement(nativeSql, resultSetType, resultSetConcurrency, <span class="keyword">false</span>);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">throw</span> sqlEx;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">// 正常流程</span></span><br><span class="line">                pStmt = (ClientPreparedStatement) clientPrepareStatement(nativeSql, resultSetType, resultSetConcurrency, <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> pStmt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>ServerPreparedStatement</code>的继承关系</p><img src="/2020/05/05/cache-prep-stmts/image-20200505001544675.png"><p>statement关闭时会重新放入缓存：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// com.mysql.cj.jdbc.ServerPreparedStatement#close</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  JdbcConnection locallyScopedConn = <span class="keyword">this</span>.connection;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (locallyScopedConn == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>; <span class="comment">// already closed</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">synchronized</span> (locallyScopedConn.getConnectionMutex()) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isCached &amp;&amp; isPoolable() &amp;&amp; !<span class="keyword">this</span>.isClosed) &#123;</span><br><span class="line">      clearParameters();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.isClosed = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">// 重新缓存起来</span></span><br><span class="line">      <span class="keyword">this</span>.connection.recachePreparedStatement(<span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.isClosed = <span class="keyword">false</span>;</span><br><span class="line">    realClose(<span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// com.mysql.cj.jdbc.ConnectionImpl#recachePreparedStatement</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recachePreparedStatement</span><span class="params">(JdbcPreparedStatement pstmt)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (getConnectionMutex()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.cachePrepStmts.getValue() &amp;&amp; pstmt.isPoolable()) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="keyword">this</span>.serverSideStatementCache) &#123;</span><br><span class="line">                    Object oldServerPrepStmt = <span class="keyword">this</span>.serverSideStatementCache.put(</span><br><span class="line">                            <span class="keyword">new</span> CompoundCacheKey(pstmt.getCurrentCatalog(), ((PreparedQuery&lt;?&gt;) pstmt.getQuery()).getOriginalSql()),</span><br><span class="line">                            (ServerPreparedStatement) pstmt);</span><br><span class="line">                    <span class="keyword">if</span> (oldServerPrepStmt != <span class="keyword">null</span> &amp;&amp; oldServerPrepStmt != pstmt) &#123;</span><br><span class="line">                        ((ServerPreparedStatement) oldServerPrepStmt).isCached = <span class="keyword">false</span>;</span><br><span class="line">                        ((ServerPreparedStatement) oldServerPrepStmt).setClosed(<span class="keyword">false</span>);</span><br><span class="line">                        ((ServerPreparedStatement) oldServerPrepStmt).realClose(<span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="druid"><a href="#druid" class="headerlink" title="druid"></a>druid</h3><p>druid的配置说明中，有如下的介绍，也有了一个更短的名字<strong>PSCache</strong>：</p><table><thead><tr><th>配置</th><th>缺省值</th><th>说明</th></tr></thead><tbody><tr><td>poolPreparedStatements</td><td>false</td><td>是否缓存preparedStatement，也就是<strong>PSCache</strong>。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td></tr><tr><td>maxPoolPreparedStatementPerConnectionSize</td><td>-1</td><td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td></tr></tbody></table><p>看下相关的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// com.alibaba.druid.pool.DruidPooledConnection#closePoolableStatement</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closePoolableStatement</span><span class="params">(DruidPooledPreparedStatement stmt)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  PreparedStatement rawStatement = stmt.getRawPreparedStatement();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (holder == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (stmt.isPooled()) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      rawStatement.clearParameters();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">      <span class="keyword">this</span>.handleException(ex, <span class="keyword">null</span>);</span><br><span class="line">      <span class="keyword">if</span> (rawStatement.getConnection().isClosed()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      LOG.error(<span class="string">"clear parameter error"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  PreparedStatementHolder stmtHolder = stmt.getPreparedStatementHolder();</span><br><span class="line">  stmtHolder.decrementInUseCount();</span><br><span class="line">  <span class="comment">// holder.isPoolPreparedStatements 对应上面配置的开关</span></span><br><span class="line">  <span class="keyword">if</span> (stmt.isPooled() &amp;&amp; holder.isPoolPreparedStatements() &amp;&amp; stmt.exceptionCount == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 放入缓存池子中</span></span><br><span class="line">    holder.getStatementPool().put(stmtHolder);</span><br><span class="line"></span><br><span class="line">    stmt.clearResultSet();</span><br><span class="line">    holder.removeTrace(stmt);</span><br><span class="line"></span><br><span class="line">    stmtHolder.setFetchRowPeak(stmt.getFetchRowPeak());</span><br><span class="line"></span><br><span class="line">    stmt.setClosed(<span class="keyword">true</span>); <span class="comment">// soft set close</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stmt.isPooled() &amp;&amp; holder.isPoolPreparedStatements()) &#123;</span><br><span class="line">    <span class="comment">// the PreparedStatement threw an exception</span></span><br><span class="line">    stmt.clearResultSet();</span><br><span class="line">    holder.removeTrace(stmt);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开启了PSCache但是这个stmt抛出过异常，直接从缓存中移除</span></span><br><span class="line">    holder.getStatementPool()</span><br><span class="line">      .remove(stmtHolder);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//Connection behind the statement may be in invalid state, which will throw a SQLException.</span></span><br><span class="line">      <span class="comment">//In this case, the exception is desired to be properly handled to remove the unusable connection from the pool.</span></span><br><span class="line">      stmt.closeInternal();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">      <span class="keyword">this</span>.handleException(ex, <span class="keyword">null</span>);</span><br><span class="line">      <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      holder.getDataSource().incrementClosedPreparedStatementCount();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>管理这个cache的最终是<code>com.alibaba.druid.pool.PreparedStatementPool</code>，内部是用的<code>LinkedHashMap</code>实现的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// com.alibaba.druid.pool.PreparedStatementPool.LRUCache</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span> <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">PreparedStatementKey</span>, <span class="title">PreparedStatementHolder</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> maxSize)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 最后一个参数true，保证了是按照访问顺序存储的</span></span><br><span class="line">    <span class="comment">// the ordering mode - &lt;tt&gt;true&lt;/tt&gt; for access-order, </span></span><br><span class="line">    <span class="comment">// &lt;tt&gt;false&lt;/tt&gt; for insertion-order</span></span><br><span class="line">    <span class="keyword">super</span>(maxSize, <span class="number">0.75f</span>, <span class="keyword">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Entry&lt;PreparedStatementKey, PreparedStatementHolder&gt; eldest)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> remove = (size() &gt; dataSource.getMaxPoolPreparedStatementPerConnectionSize());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (remove) &#123;</span><br><span class="line">      closeRemovedStatement(eldest.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> remove;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开启了druid的<code>poolPreparedStatements</code>，就不用开启jdbc的相关缓存了; 此外druid还有<code>sharePreparedStatements</code>等特性，后面可以接着研究一波。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="bug问题"><a href="#bug问题" class="headerlink" title="bug问题"></a>bug问题</h3><p>看到一些文章说，这两个参数有bug，专门查了下，大部分是connector的bug，升级即可；server端的bug很少。</p><img src="/2020/05/05/cache-prep-stmts/image-20200504214214243.png"><p><a href="https://mp.weixin.qq.com/s?__biz=MzA3NDcyMTQyNQ==&amp;mid=2649257737&amp;idx=1&amp;sn=1704e467a71e747ac66dd2588ae2c3e0&amp;chksm=8767a6f7b0102fe146ed7185bb7e7c182f4171b7250b4ae3afeed6656f6301e127b99a8fc024&amp;mpshare=1&amp;scene=1&amp;srcid=05042eGYalgiTMQDhreEiRVD&amp;sharer_sharetime=1588528226758&amp;sharer_shareid=56c8325ce0536d61fe7c36f461094531%23rd" rel="external nofollow noopener noreferrer" target="_blank">聊聊一次与DeadLock的相遇</a></p><p><a href="https://www.cnblogs.com/jiarui-zjb/p/12635971.html" rel="external nofollow noopener noreferrer" target="_blank">三、mysql 报错 Unknown type ‘14 in column 3 of 5 in binary-encoded result set - 爱笑的berg - 博客园</a></p><h3 id="是否需要开启"><a href="#是否需要开启" class="headerlink" title="是否需要开启"></a>是否需要开启</h3><p>在<a href="https://mp.weixin.qq.com/s?__biz=MzIzNjUxMzk2NQ==&amp;mid=2247484886&amp;idx=1&amp;sn=2cd673f89d3add0e4b50cf8b65bcdadb&amp;chksm=e8d7fa14dfa073024507ddce1c8eed19c175d9dcf97b3781b09ec78b4860bec1205b41b8cdbf&amp;mpshare=1&amp;scene=1&amp;srcid=0504sUEKJQ0os3LxdsVFrQ9C&amp;sharer_sharetime=1588527189589&amp;sharer_shareid=56c8325ce0536d61fe7c36f461094531%23rd" rel="external nofollow noopener noreferrer" target="_blank">浅析MySQL JDBC连接配置上的两个误区</a>中对这个问题，有比较好的说明:</p><blockquote><p>综上所述，现在在使用MySQL时（如果版本比较新的话），出于性能考虑，应该在数据库连接池上开启针对PreparedStatement的缓存。如果没有使用连接池，或者所用的连接池不支持PSCache，也可以在JDBC连接上设置cachePrepStmts=true。</p></blockquote><p>当然，加上这些参数之后，还是应该观察下系统的监控，看看是否性能有提升。</p><p>其中提到了<code></code>useConfigs<code>=maxPerformance</code>, 查了下官网：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--  maxPerformance相当于打开了</span><br><span class="line">cachePrepStmts=true</span><br><span class="line">cacheCallableStmts=true</span><br><span class="line">cacheServerConfiguration=true</span><br><span class="line">useLocalSessionState=true</span><br><span class="line">elideSetAutoCommits=true</span><br><span class="line">alwaysSendSetIsolation=false</span><br><span class="line">enableQueryTimeouts=false</span><br></pre></td></tr></table></figure><p>类似的还有：<code>solarisMaxPerformance</code>、<code>fullDebug</code>、<code>coldFusion</code>等，可以在<a href="https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-reference-configuration-properties.html" rel="external nofollow noopener noreferrer" target="_blank">MySQL :: MySQL Connector/J 5.1 Developer Guide :: 5.3 Configuration Properties for Connector/J</a>找到对应的解释。</p><p>另外，HikariCP的wiki里也有一篇<a href="https://github.com/brettwooldridge/HikariCP/wiki/MySQL-Configuration" rel="external nofollow noopener noreferrer" target="_blank">MySQL Configuration · brettwooldridge/HikariCP Wiki</a>, 也是建议开启。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://dev.mysql.com/doc/refman/5.7/en/sql-prepared-statements.html" rel="external nofollow noopener noreferrer" target="_blank">MySQL :: MySQL 5.7 Reference Manual :: 13.5 Prepared Statements</a></li><li><a href="https://www.it610.com/article/4927543.htm" rel="external nofollow noopener noreferrer" target="_blank">PreparedStatement是如何大幅度提高性能的 - it610.com</a></li><li><a href="https://bugs.mysql.com/bug.php?id=24344" rel="external nofollow noopener noreferrer" target="_blank">MySQL Bugs: #24344: useServerPrepStmts impacts time zone calculations</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzIzNjUxMzk2NQ==&amp;mid=2247484886&amp;idx=1&amp;sn=2cd673f89d3add0e4b50cf8b65bcdadb&amp;chksm=e8d7fa14dfa073024507ddce1c8eed19c175d9dcf97b3781b09ec78b4860bec1205b41b8cdbf&amp;mpshare=1&amp;scene=1&amp;srcid=0504sUEKJQ0os3LxdsVFrQ9C&amp;sharer_sharetime=1588527189589&amp;sharer_shareid=56c8325ce0536d61fe7c36f461094531%23rd" rel="external nofollow noopener noreferrer" target="_blank">浅析MySQL JDBC连接配置上的两个误区</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzA3NDcyMTQyNQ==&amp;mid=2649257737&amp;idx=1&amp;sn=1704e467a71e747ac66dd2588ae2c3e0&amp;chksm=8767a6f7b0102fe146ed7185bb7e7c182f4171b7250b4ae3afeed6656f6301e127b99a8fc024&amp;mpshare=1&amp;scene=1&amp;srcid=05042eGYalgiTMQDhreEiRVD&amp;sharer_sharetime=1588528226758&amp;sharer_shareid=56c8325ce0536d61fe7c36f461094531%23rd" rel="external nofollow noopener noreferrer" target="_blank">聊聊一次与DeadLock的相遇</a></li><li><a href="https://www.cnblogs.com/jiarui-zjb/p/12635971.html" rel="external nofollow noopener noreferrer" target="_blank">三、mysql 报错 Unknown type ‘14 in column 3 of 5 in binary-encoded result set - 爱笑的berg - 博客园</a></li><li><a href="https://www.cnblogs.com/micrari/p/7112781.html" rel="external nofollow noopener noreferrer" target="_blank">预编译语句(Prepared Statements)介绍，以MySQL为例 - 活在夢裡 - 博客园</a></li><li><a href="https://dev.mysql.com/doc/connector-j/5.1/en/connector-j-reference-configuration-properties.html" rel="external nofollow noopener noreferrer" target="_blank">MySQL :: MySQL Connector/J 5.1 Developer Guide :: 5.3 Configuration Properties for Connector/J</a></li><li><a href="https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8" rel="external nofollow noopener noreferrer" target="_blank">DruidDataSource配置属性列表 · alibaba/druid Wiki</a></li><li><a href="https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-reference-configuration-properties.html" rel="external nofollow noopener noreferrer" target="_blank">MySQL :: MySQL Connector/J 8.0 Developer Guide :: 6.3 Configuration Properties</a></li><li><a href="https://github.com/brettwooldridge/HikariCP/wiki/MySQL-Configuration" rel="external nofollow noopener noreferrer" target="_blank">MySQL Configuration · brettwooldridge/HikariCP Wiki</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;PreparedStatement&lt;/code&gt;可以防止sql注入，这个大家都知道；今天来聊聊他对性能的提升。&lt;/p&gt;
&lt;h2 id=&quot;SQL-syntax&quot;&gt;&lt;a href=&quot;#SQL-syntax&quot; class=&quot;headerlink&quot; title=&quot;SQL
      
    
    </summary>
    
      <category term="jdbc" scheme="http://qsli.github.io/categories/jdbc/"/>
    
    
      <category term="cache-prep-stmts" scheme="http://qsli.github.io/tags/cache-prep-stmts/"/>
    
  </entry>
  
  <entry>
    <title>jdbc-batching</title>
    <link href="http://qsli.github.io/2020/05/03/jdbc-batching/"/>
    <id>http://qsli.github.io/2020/05/03/jdbc-batching/</id>
    <published>2020-05-03T07:12:18.000Z</published>
    <updated>2020-05-03T10:40:19.146Z</updated>
    
    <content type="html"><![CDATA[<h2 id="批量处理"><a href="#批量处理" class="headerlink" title="批量处理"></a>批量处理</h2><h3 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * insert into words (word)  values(?)  -&gt;  stopwatch = 66487</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@SneakyThrows</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBatch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String connectString = <span class="string">"jdbc:mysql://localhost/test?user=root&amp;password=toor&amp;useLocalSessionState=true&amp;useSSL=false"</span>;</span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>)</span><br><span class="line">            .newInstance();</span><br><span class="line">        <span class="keyword">try</span> (Connection conn = DriverManager.getConnection(connectString)) &#123;</span><br><span class="line">            <span class="comment">//插入100000条测试代码</span></span><br><span class="line">            Stopwatch stopwatch = Stopwatch.createStarted();</span><br><span class="line">            <span class="keyword">try</span> (PreparedStatement psts = conn.prepareStatement(<span class="string">"insert into words (`word`)  VALUES(?)"</span>)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">                    psts.setString(<span class="number">1</span>, <span class="string">"123"</span>);</span><br><span class="line">                    psts.addBatch();</span><br><span class="line">                &#125;</span><br><span class="line">                psts.executeBatch();</span><br><span class="line">                stopwatch.stop();</span><br><span class="line">                System.out.println(<span class="string">"stopwatch = "</span> + stopwatch.elapsed(TimeUnit.MILLISECONDS));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>打开mysql的general log:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like <span class="string">'%general%'</span>;</span><br><span class="line">+------------------+---------------------------------------+</span><br><span class="line">| Variable_name    | Value                                 |</span><br><span class="line">+------------------+---------------------------------------+</span><br><span class="line">| general_log      | ON                                    |</span><br><span class="line">| general_log_file | /usr/<span class="built_in">local</span>/var/mysql/qishengdembp.log |</span><br><span class="line">+------------------+---------------------------------------+</span><br><span class="line">2 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br></pre></td></tr></table></figure><p>这里已经是开启的状态，如果没有开启可以设置下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; <span class="built_in">set</span> global general_log=1;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure><p>上述java代码执行的时候，查看general log:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">2020-05-02T23:41:28.438048Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.438535Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.439123Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.439725Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.440244Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.440827Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.441424Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.441962Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.442464Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.443025Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.443645Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.444439Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.444938Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.445491Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.446027Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.446575Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.447071Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.447608Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.448215Z  154 Queryinsert into words (`word`)  VALUES(<span class="string">'123'</span>)</span><br><span class="line">2020-05-02T23:41:28.453209Z  154 Quit</span><br></pre></td></tr></table></figure><p>对应的抓包：</p><img src="/2020/05/03/jdbc-batching/image-20200503131020833.png"><p>看起来是一个一个发送的，server端也是一个一个执行的。这样并不能提高效率</p><h4 id="rewriteBatchedStatements-true"><a href="#rewriteBatchedStatements-true" class="headerlink" title="rewriteBatchedStatements=true"></a>rewriteBatchedStatements=true</h4><p>jdbc的连接上配置这个参数，重复上面的过程，得到的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stopwatch = 1320</span><br></pre></td></tr></table></figure><p>sql被改写成了：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2020-05-03T05:27:17.921856Z  163 Connectroot@localhost on test using TCP/IP</span><br><span class="line">2020-05-03T05:27:17.925632Z  163 Query<span class="comment">/* mysql-connector-java-8.0.16 (Revision: 34cbc6bc61f72836e26327537a432d6db7c77de6) */</span><span class="keyword">SELECT</span>  @@session.auto_increment_increment <span class="keyword">AS</span> auto_increment_increment, @@character_set_client <span class="keyword">AS</span> character_set_client, @@character_set_connection <span class="keyword">AS</span> character_set_connection, @@character_set_results <span class="keyword">AS</span> character_set_results, @@character_set_server <span class="keyword">AS</span> character_set_server, @@collation_server <span class="keyword">AS</span> collation_server, @@collation_connection <span class="keyword">AS</span> collation_connection, @@init_connect <span class="keyword">AS</span> init_connect, @@interactive_timeout <span class="keyword">AS</span> interactive_timeout, @@license <span class="keyword">AS</span> license, @@lower_case_table_names <span class="keyword">AS</span> lower_case_table_names, @@max_allowed_packet <span class="keyword">AS</span> max_allowed_packet, @@net_write_timeout <span class="keyword">AS</span> net_write_timeout, @@performance_schema <span class="keyword">AS</span> performance_schema, @@sql_mode <span class="keyword">AS</span> sql_mode, @@system_time_zone <span class="keyword">AS</span> system_time_zone, @@<span class="keyword">time_zone</span> <span class="keyword">AS</span> <span class="keyword">time_zone</span>, @@transaction_isolation <span class="keyword">AS</span> transaction_isolation, @@wait_timeout <span class="keyword">AS</span> wait_timeout</span><br><span class="line"><span class="number">2020</span><span class="number">-05</span><span class="number">-03</span>T05:<span class="number">27</span>:<span class="number">17.944989</span>Z  <span class="number">163</span> <span class="keyword">Query</span><span class="keyword">SET</span> character_set_results = <span class="literal">NULL</span></span><br><span class="line"><span class="number">2020</span><span class="number">-05</span><span class="number">-03</span>T05:<span class="number">27</span>:<span class="number">18.312174</span>Z  <span class="number">163</span> <span class="keyword">Query</span><span class="keyword">insert</span> <span class="keyword">into</span> words (<span class="string">`word`</span>)  <span class="keyword">VALUES</span>(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>)</span><br><span class="line"><span class="number">2020</span><span class="number">-05</span><span class="number">-03</span>T05:<span class="number">27</span>:<span class="number">19.280437</span>Z  <span class="number">163</span> Quit</span><br></pre></td></tr></table></figure><img src="/2020/05/03/jdbc-batching/image-20200503132913411.png"><p>抓包也只看到了一次请求，这个性能提升有60+倍。</p><h3 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h3><p>测试下批量删除会变成什么样子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteBatch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>)</span><br><span class="line">    .newInstance();</span><br><span class="line">  <span class="keyword">try</span> (Connection conn = DriverManager.getConnection(connectString)) &#123;</span><br><span class="line">    Stopwatch stopwatch = Stopwatch.createStarted();</span><br><span class="line">    <span class="keyword">try</span> (PreparedStatement psts = conn.prepareStatement(<span class="string">"delete from words where id = ?"</span>)) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        psts.setInt(<span class="number">1</span>, i);</span><br><span class="line">        psts.addBatch();</span><br><span class="line">      &#125;</span><br><span class="line">      psts.executeBatch();</span><br><span class="line">      stopwatch.stop();</span><br><span class="line">      System.out.println(<span class="string">"stopwatch = "</span> + stopwatch.elapsed(TimeUnit.MILLISECONDS));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/05/03/jdbc-batching/image-20200503141225096.png"><p><strong>sql是一起发过去的</strong>， response貌似是逐个返回的，看下general log：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">2020-05-03T06:14:33.457011Z  180 Querydelete from words <span class="built_in">where</span> id = 99980;</span><br><span class="line">2020-05-03T06:14:33.460456Z  180 Querydelete from words <span class="built_in">where</span> id = 99981;</span><br><span class="line">2020-05-03T06:14:33.465265Z  180 Querydelete from words <span class="built_in">where</span> id = 99982;</span><br><span class="line">2020-05-03T06:14:33.466960Z  180 Querydelete from words <span class="built_in">where</span> id = 99983;</span><br><span class="line">2020-05-03T06:14:33.471134Z  180 Querydelete from words <span class="built_in">where</span> id = 99984;</span><br><span class="line">2020-05-03T06:14:33.478481Z  180 Querydelete from words <span class="built_in">where</span> id = 99985;</span><br><span class="line">2020-05-03T06:14:33.482165Z  180 Querydelete from words <span class="built_in">where</span> id = 99986;</span><br><span class="line">2020-05-03T06:14:33.484546Z  180 Querydelete from words <span class="built_in">where</span> id = 99987;</span><br><span class="line">2020-05-03T06:14:33.489019Z  180 Querydelete from words <span class="built_in">where</span> id = 99988;</span><br><span class="line">2020-05-03T06:14:33.492171Z  180 Querydelete from words <span class="built_in">where</span> id = 99989;</span><br><span class="line">2020-05-03T06:14:33.496335Z  180 Querydelete from words <span class="built_in">where</span> id = 99990;</span><br><span class="line">2020-05-03T06:14:33.502214Z  180 Querydelete from words <span class="built_in">where</span> id = 99991;</span><br><span class="line">2020-05-03T06:14:33.504907Z  180 Querydelete from words <span class="built_in">where</span> id = 99992;</span><br><span class="line">2020-05-03T06:14:33.511418Z  180 Querydelete from words <span class="built_in">where</span> id = 99993;</span><br><span class="line">2020-05-03T06:14:33.519557Z  180 Querydelete from words <span class="built_in">where</span> id = 99994;</span><br><span class="line">2020-05-03T06:14:33.524177Z  180 Querydelete from words <span class="built_in">where</span> id = 99995;</span><br><span class="line">2020-05-03T06:14:33.530256Z  180 Querydelete from words <span class="built_in">where</span> id = 99996;</span><br><span class="line">2020-05-03T06:14:33.533451Z  180 Querydelete from words <span class="built_in">where</span> id = 99997;</span><br><span class="line">2020-05-03T06:14:33.536034Z  180 Querydelete from words <span class="built_in">where</span> id = 99998;</span><br><span class="line">2020-05-03T06:14:33.537884Z  180 Querydelete from words <span class="built_in">where</span> id = 99999</span><br><span class="line">2020-05-03T06:14:33.947681Z  180 Quit</span><br></pre></td></tr></table></figure><p>执行是一条一条执行的</p><h3 id="内存占用过大"><a href="#内存占用过大" class="headerlink" title="内存占用过大"></a>内存占用过大</h3><p>如果一直<code>addBatch</code>,内存压力会比较大，可以分批执行下。</p><h2 id="mysql的实现"><a href="#mysql的实现" class="headerlink" title="mysql的实现"></a>mysql的实现</h2><p>在低版本的mysql connector里，有的不会改写成<code>insert into xx () values</code>的形式，感觉是个bug；升级版本之后就可以了。</p><p>mysql-connector-java-8.0.16.jar</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// com.mysql.cj.jdbc.ClientPreparedStatement#executeBatchInternal</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  statementBegins();</span><br><span class="line">  clearWarnings();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.batchHasPlainStatements &amp;&amp; <span class="keyword">this</span>.rewriteBatchedStatements.getValue()) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (((PreparedQuery&lt;?&gt;) <span class="keyword">this</span>.query).getParseInfo().canRewriteAsMultiValueInsertAtSqlLevel()) &#123;</span><br><span class="line">      <span class="comment">// batch insert 重写</span></span><br><span class="line">      <span class="keyword">return</span> executeBatchedInserts(batchTimeout);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.batchHasPlainStatements &amp;&amp; <span class="keyword">this</span>.query.getBatchedArgs() != <span class="keyword">null</span></span><br><span class="line">        &amp;&amp; <span class="keyword">this</span>.query.getBatchedArgs().size() &gt; <span class="number">3</span> <span class="comment">/* cost of option setting rt-wise */</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> executePreparedBatchAsMultiStatement(batchTimeout);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> executeBatchSerially(batchTimeout);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.query.getStatementExecuting().set(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">  clearBatch();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加事务"><a href="#添加事务" class="headerlink" title="添加事务"></a>添加事务</h2><p>之前执行都是自动提交的，相当于是多个事务，这次修改成一个单独的事务看看效果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testBatchWithTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>)</span><br><span class="line">    .newInstance();</span><br><span class="line">  <span class="keyword">try</span> (Connection conn = DriverManager.getConnection(connectString)) &#123;</span><br><span class="line">    <span class="comment">// 关闭事务的自动提交</span></span><br><span class="line">    conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">    Stopwatch stopwatch = Stopwatch.createStarted();</span><br><span class="line">    <span class="keyword">try</span> (PreparedStatement psts = conn.prepareStatement(<span class="string">"insert into words (word)  values(?)"</span>)) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        psts.setString(<span class="number">1</span>, <span class="string">"123"</span>);</span><br><span class="line">        psts.addBatch();</span><br><span class="line">      &#125;</span><br><span class="line">      psts.executeBatch();</span><br><span class="line">      <span class="comment">// 提交事务</span></span><br><span class="line">      conn.commit();</span><br><span class="line">      stopwatch.stop();</span><br><span class="line">      System.out.println(<span class="string">"stopwatch = "</span> + stopwatch.elapsed(TimeUnit.MILLISECONDS));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>General log：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-05-03T06:58:19.567073Z  191 Queryinsert into words (word)  values(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>),(<span class="string">'123'</span>)</span><br><span class="line">2020-05-03T06:58:26.751411Z  191 Querycommit</span><br><span class="line">2020-05-03T06:58:26.784298Z  191 Queryrollback</span><br><span class="line">2020-05-03T06:58:26.828868Z  191 Quit</span><br></pre></td></tr></table></figure><p>执行时间：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stopwatch = 2236</span><br></pre></td></tr></table></figure><p>时间并没有提升，反倒有些下降，这个涉及的原因可能跟数据库的事务相关的各种配置有关系，后面再继续研究。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul><li>executeBatch要和<code>rewriteBatchedStatements</code>或<code>allowMultiQueries</code>一起使用才有效果</li><li>executeBatch执行的sql太多时最好分批次，避免对jvm造成太大的压力</li><li>executeBatch执行的sql个数大于4</li></ul><img src="/2020/05/03/jdbc-batching/image-20200503183918245.png"><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://my.oschina.net/u/2300159/blog/783613" rel="external nofollow noopener noreferrer" target="_blank">MySQL Jdbc驱动的rewriteBatchedStatements参数使batch生效 - 如风达的个人空间 - OSCHINA</a></li><li><a href="https://dev.mysql.com/doc/refman/5.6/en/insert-optimization.html" rel="external nofollow noopener noreferrer" target="_blank">MySQL :: MySQL 5.6 Reference Manual :: 8.2.4.1 Optimizing INSERT Statements</a></li><li><a href="https://yq.aliyun.com/articles/131279" rel="external nofollow noopener noreferrer" target="_blank">Mysql 批量insert 性能测试-云栖社区-阿里云</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;批量处理&quot;&gt;&lt;a href=&quot;#批量处理&quot; class=&quot;headerlink&quot; title=&quot;批量处理&quot;&gt;&lt;/a&gt;批量处理&lt;/h2&gt;&lt;h3 id=&quot;批量插入&quot;&gt;&lt;a href=&quot;#批量插入&quot; class=&quot;headerlink&quot; title=&quot;批量插入&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="jdbc" scheme="http://qsli.github.io/categories/jdbc/"/>
    
    
      <category term="executeBatch" scheme="http://qsli.github.io/tags/executeBatch/"/>
    
  </entry>
  
  <entry>
    <title>mysql jdbc驱动参数性能调优</title>
    <link href="http://qsli.github.io/2020/05/03/jdbc-connector/"/>
    <id>http://qsli.github.io/2020/05/03/jdbc-connector/</id>
    <published>2020-05-03T00:46:01.000Z</published>
    <updated>2020-11-29T14:43:00.599Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SSL对性能的影响"><a href="#SSL对性能的影响" class="headerlink" title="SSL对性能的影响"></a>SSL对性能的影响</h2><h3 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h3><p>我将驱动从</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>升级到：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同样的sql（for循环写库），执行时间从<code>18607</code>上升至<code>46000</code>, 时间翻了一倍还多。wireshark抓包之后发现，之后的包都不是mysql协议的（看不到具体内容了）：<br><img src="/2020/05/03/jdbc-connector/image-20200503084506187.png"></p><p>打开网络调试，<code>-Djavax.net.debug=all</code>，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> AA CB 5A 46 58 C1 55   BD DC 3F 8A 03 03 03 03  ...ZFX.U..?.....</span><br><span class="line">main, WRITE: TLSv1.2 Application Data, length = 96</span><br><span class="line">[Raw write]: length = 101</span><br><span class="line">0000: 17 03 03 00 60 33 3D D6   C6 D6 59 F1 48 C5 07 BC  ....`3=...Y.H...</span><br><span class="line">0010: BA 2C 95 88 C4 60 FC 83   5A CB B3 EA 52 C3 9C F6  .,...`..Z...R...</span><br><span class="line">0020: 96 8B A4 85 01 EE 22 E5   4B 36 DD 26 87 46 F1 FD  ......<span class="string">".K6.&amp;.F..</span></span><br><span class="line"><span class="string">0030: E9 E9 42 DA 51 D7 96 10   F4 6D F5 FF 81 DE F0 5E  ..B.Q....m.....^</span></span><br><span class="line"><span class="string">0040: 9D BE 8D 08 77 05 B7 A0   14 2F 38 AC 50 D8 DA E0  ....w..../8.P...</span></span><br><span class="line"><span class="string">0050: D1 7C 0D B8 07 E2 8B 05   7C 8E 1E D5 71 FA 48 21  ............q.H!</span></span><br><span class="line"><span class="string">0060: FC A5 FF 91 0F                                     .....</span></span><br><span class="line"><span class="string">[Raw read]: length = 5</span></span><br><span class="line"><span class="string">0000: 17 03 03 00 40                                     ....@</span></span><br><span class="line"><span class="string">[Raw read]: length = 64</span></span><br><span class="line"><span class="string">0000: 46 0D 04 E4 49 AE 5A DB   3C 0B 36 59 23 62 55 3C  F...I.Z.&lt;.6Y#bU&lt;</span></span><br><span class="line"><span class="string">0010: B9 C0 AC A2 EF 04 28 51   28 0F C0 7C A8 37 58 0B  ......(Q(....7X.</span></span><br><span class="line"><span class="string">0020: 1D 28 49 A1 41 CD 61 85   B7 7A A7 CA A9 8C 8B 3D  .(I.A.a..z.....=</span></span><br><span class="line"><span class="string">0030: 5E 99 92 50 6E F2 23 86   1F 8F 1A 2F 6F 41 C7 BB  ^..Pn.#..../oA..</span></span><br><span class="line"><span class="string">main, READ: TLSv1.2 Application Data, length = 64</span></span><br><span class="line"><span class="string">Padded plaintext after DECRYPTION:  len = 64</span></span><br><span class="line"><span class="string">0000: 44 F8 0A ED 84 81 F4 1B   6E 87 73 BA A1 67 71 95  D.......n.s..gq.</span></span><br><span class="line"><span class="string">0010: 0A 00 00 01 00 01 FD 3C   B7 02 01 00 00 00 BA 36  .......&lt;.......6</span></span><br><span class="line"><span class="string">0020: 13 72 F5 7D 3A B7 11 69   F4 EE 87 38 FB A3 5A 29  .r..:..i...8..Z)</span></span><br><span class="line"><span class="string">0030: 6B 7F A5 D3 59 E1 28 5C   B2 74 F8 E8 F4 9E 01 01  k...Y.(\.t......</span></span><br><span class="line"><span class="string">Padded plaintext before ENCRYPTION:  len = 96</span></span><br><span class="line"><span class="string">0000: 60 74 1B E8 4E D3 47 52   EA 95 B9 FC 26 11 DA 20  `t..N.GR....&amp;.. </span></span><br><span class="line"><span class="string">0010: 28 00 00 00 03 69 6E 73   65 72 74 20 69 6E 74 6F  (....insert into</span></span><br><span class="line"><span class="string">0020: 20 77 6F 72 64 73 20 28   77 6F 72 64 29 20 20 76   words (word)  v</span></span><br><span class="line"><span class="string">0030: 61 6C 75 65 73 28 27 31   32 33 27 29 70 0D 4F 3B  alues('123')p.O;</span></span><br><span class="line"><span class="string">0040: 1D C3 CF E4 79 19 7E 1C   CC 66 A3 26 1C 81 38 C5  ....y....f.&amp;..8.</span></span><br><span class="line"><span class="string">0050: 47 52 89 4C FC 0B C9 00   39 CD 3E A9 03 03 03 03  GR.L....9.&gt;.....</span></span><br><span class="line"><span class="string">main, WRITE: TLSv1.2 Application Data, length = 96</span></span><br><span class="line"><span class="string">[Raw write]: length = 101</span></span><br></pre></td></tr></table></figure><p>默认就把SSL打开了</p><blockquote><p><em>For 8.0.13 and later:</em> As long as the server is correctly configured to use SSL, there is no need to configure anything on the Connector/J client to use encrypted connections.</p></blockquote><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><blockquote><p>Connector/J can encrypt all data communicated between the JDBC driver and the server (except for the initial handshake) using SSL. There is a <strong>performance penalty</strong> for enabling connection encryption, the severity of which depends on multiple factors including (but not limited to) the size of the query, the amount of data returned, the server hardware, the SSL library used, the network bandwidth, and so on.</p></blockquote><p>这里有一个测试，<a href="https://www.percona.com/blog/2013/10/10/mysql-ssl-performance-overhead/" rel="external nofollow noopener noreferrer" target="_blank">SSL Performance Overhead in MySQL</a>，贴下对比：</p><img src="/2020/05/03/jdbc-connector/sysbench-throughput.png"><img src="/2020/05/03/jdbc-connector/sysbench-response-time.png"><img src="/2020/05/03/jdbc-connector/connection-throughput.png"><h3 id="如何关闭："><a href="#如何关闭：" class="headerlink" title="如何关闭："></a>如何关闭：</h3><blockquote><p><strong>useSSL</strong></p><p>For 8.0.12 and earlier: Use SSL when communicating with the server (true/false), default is ‘true’ when connecting to MySQL 5.5.45+, 5.6.26+ or 5.7.6+, otherwise default is ‘false’.</p><p>For 8.0.13 and later: Default is ‘true’. DEPRECATED. See sslMode property description for details.</p><p>Default: true</p><p>Since version: 3.0.2</p></blockquote><p>useSSL设置为false之后，就关闭了加密，之前的sql时间也降到了<code>22541</code></p><h2 id="useLocalSessionState"><a href="#useLocalSessionState" class="headerlink" title="useLocalSessionState"></a>useLocalSessionState</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.percona.com/blog/2013/10/10/mysql-ssl-performance-overhead/" rel="external nofollow noopener noreferrer" target="_blank">SSL Performance Overhead in MySQL</a></li><li><a href="https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-reference-using-ssl.html" rel="external nofollow noopener noreferrer" target="_blank">MySQL :: MySQL Connector/J 8.0 Developer Guide :: 6.7 Connecting Securely Using SSL</a></li><li><a href="https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-reference-configuration-properties.html" rel="external nofollow noopener noreferrer" target="_blank">MySQL :: MySQL Connector/J 8.0 Developer Guide :: 6.3 Configuration Properties</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SSL对性能的影响&quot;&gt;&lt;a href=&quot;#SSL对性能的影响&quot; class=&quot;headerlink&quot; title=&quot;SSL对性能的影响&quot;&gt;&lt;/a&gt;SSL对性能的影响&lt;/h2&gt;&lt;h3 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="jdbc" scheme="http://qsli.github.io/categories/jdbc/"/>
    
    
      <category term="java-connector" scheme="http://qsli.github.io/tags/java-connector/"/>
    
  </entry>
  
  <entry>
    <title>crontab和邮件</title>
    <link href="http://qsli.github.io/2020/05/01/crontab/"/>
    <id>http://qsli.github.io/2020/05/01/crontab/</id>
    <published>2020-05-01T14:15:28.000Z</published>
    <updated>2020-05-01T14:15:28.041Z</updated>
    
    <content type="html"><![CDATA[<h1 id="crontab是什么"><a href="#crontab是什么" class="headerlink" title="crontab是什么"></a>crontab是什么</h1><p>linux下的定时任务执行</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*     *     *   *    *        <span class="built_in">command</span> to be executed</span><br><span class="line">-     -     -   -    -</span><br><span class="line">|     |     |   |    |</span><br><span class="line">|     |     |   |    +----- day of week (0 - 6) (Sunday=0)</span><br><span class="line">|     |     |   +------- month (1 - 12)</span><br><span class="line">|     |     +--------- day of        month (1 - 31)</span><br><span class="line">|     +----------- hour (0 - 23)</span><br><span class="line">+------------- min (0 - 59)</span><br></pre></td></tr></table></figure><p>在线<code>crontab</code>表达式生成： </p><img src="/2020/05/01/crontab/image-20200501221243150.png"><h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p><code>crontab</code>的输出分为三种：</p><ul><li>1 代表标准输出(<code>stdout</code>)</li><li>2代表错误输出(<code>stderr</code>)</li><li><strong>&amp;</strong> 表示等同于的意思，2&gt;&amp;1表示将标准错误输出重定向到标准输出stdout</li></ul><h2 id="重定向stdout"><a href="#重定向stdout" class="headerlink" title="重定向stdout"></a>重定向stdout</h2><h3 id="为何重定向"><a href="#为何重定向" class="headerlink" title="为何重定向"></a>为何重定向</h3><p><code>crontab</code>的输出如果没有重定向到<code>/dev/null</code><strong>就会发送邮件</strong>, crontab的标准输出一般不太关心，可以重定向。</p><p>邮件内容一般存储在 <code>/var/mail/$user</code> 中，如果不清理就会打满服务器根分区，最终导致机器无法登陆。</p><h2 id="如何重定向"><a href="#如何重定向" class="headerlink" title="如何重定向"></a>如何重定向</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 0 * * *  sh /home/q/tools/bin/zip_homeq_log_daily.sh 1&gt;/dev/null</span><br></pre></td></tr></table></figure><p>标准输出流重定向到空设备</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bash test.sh &gt;test.out     //脚本的标准输出写入到文件test.out ,标准错误输出直接打印在屏幕 等价于：bash test.sh 1&gt;test.out</span><br><span class="line">bash test.sh &gt;test.out 2&gt;&amp;1 //标准输出和标准错误输出都写入到test.out并且不会互相覆盖，等价于 bash test.sh &amp;&gt;test.out</span><br><span class="line">bash test.sh &gt;test.out 2&gt;test.out //标准输出和标准错误输出都写入到test.out，会出现互相覆盖的问题，正常情况不推荐这样使用</span><br><span class="line">bash test.sh &amp;&gt;test.out //等价于第二种方法</span><br></pre></td></tr></table></figure><h2 id="不要重定向stderr"><a href="#不要重定向stderr" class="headerlink" title="不要重定向stderr"></a>不要重定向stderr</h2><p><code>stderr</code>可能就是脚本执行过程中发生了错误， 这个是需要关注的， 最好不要重定向到空设备。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 7 * * * sh /home/q/tools/bin/carnival/carnival.sh 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><strong>最好不要这样做！</strong></p><p>当<code>stderr</code>中有输出时，需要发送邮件，必须指定邮件的接收人。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@yd-dev-api server]<span class="comment"># crontab -e -u root</span></span><br><span class="line">MAILTO=<span class="string">"qisheng.li@yaduo.com,fan.zhang@yaduo.com"</span></span><br><span class="line">*/3 * * * * /bin/sh /datadisk/mv.sh 1&gt;/dev/null</span><br></pre></td></tr></table></figure><p>当脚本执行发生错误的时候，邮箱里就有一封邮件。</p><img src="/2020/05/01/crontab/image-20180813104941719.png"><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://serverfault.com/questions/133058/how-to-send-the-output-from-a-cronjob-to-multiple-e-mail-addresses" rel="external nofollow noopener noreferrer" target="_blank">email - How to send the output from a cronjob to multiple e-mail addresses? - Server Fault</a></li><li><a href="http://mengalong.github.io/2018/10/31/crontab-redirect/" rel="external nofollow noopener noreferrer" target="_blank">Linux crontab 输出重定向不生效问题解决 — Mengalong</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;crontab是什么&quot;&gt;&lt;a href=&quot;#crontab是什么&quot; class=&quot;headerlink&quot; title=&quot;crontab是什么&quot;&gt;&lt;/a&gt;crontab是什么&lt;/h1&gt;&lt;p&gt;linux下的定时任务执行&lt;/p&gt;
&lt;h2 id=&quot;语法&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="linux" scheme="http://qsli.github.io/categories/linux/"/>
    
    
      <category term="crontab" scheme="http://qsli.github.io/tags/crontab/"/>
    
  </entry>
  
  <entry>
    <title>配置sudo.log</title>
    <link href="http://qsli.github.io/2020/05/01/sudo-log/"/>
    <id>http://qsli.github.io/2020/05/01/sudo-log/</id>
    <published>2020-05-01T08:50:02.000Z</published>
    <updated>2020-05-01T08:50:02.136Z</updated>
    
    <content type="html"><![CDATA[<h1 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h1><h2 id="配置-sudo-log"><a href="#配置-sudo-log" class="headerlink" title="配置 sudo.log"></a>配置 sudo.log</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@yd-test-01-pms <span class="built_in">log</span>]<span class="comment"># touch /var/log/sudo.log</span></span><br><span class="line">[root@yd-test-01-pms <span class="built_in">log</span>]<span class="comment"># visudo</span></span><br></pre></td></tr></table></figure><p><code>visudo</code>有语法检查，比直接修改 <code>/etc/sudoers</code>要安全些， 在末尾加入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Defaults logfile=/var/<span class="built_in">log</span>/sudo.log    <span class="comment">#增加日志输出地址</span></span><br></pre></td></tr></table></figure><p>可以测试下是否生效:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@yd-test-01-pms <span class="built_in">log</span>]<span class="comment"># sudo yum install -y sl</span></span><br></pre></td></tr></table></figure><p>然后查看sudo.log</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@yd-test-01-pms <span class="built_in">log</span>]<span class="comment"># cat sudo.log</span></span><br><span class="line">Aug 21 10:54:05 : root : TTY=pts/0 ; PWD=/var/<span class="built_in">log</span> ; USER=root ; COMMAND=/bin/yum</span><br><span class="line">    install -y sl</span><br><span class="line">Aug 21 10:54:25 : root : TTY=pts/0 ; PWD=/var/<span class="built_in">log</span> ; USER=root ;</span><br><span class="line">    COMMAND=/bin/less sudo.log</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://note.t4x.org/system/sudo-log-config/" rel="external nofollow noopener noreferrer" target="_blank">Centos 6.4 sudo 日志文件配置方法 | Byrd’s Weblog</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;日志&quot;&gt;&lt;a href=&quot;#日志&quot; class=&quot;headerlink&quot; title=&quot;日志&quot;&gt;&lt;/a&gt;日志&lt;/h1&gt;&lt;h2 id=&quot;配置-sudo-log&quot;&gt;&lt;a href=&quot;#配置-sudo-log&quot; class=&quot;headerlink&quot; title=&quot;配置 
      
    
    </summary>
    
      <category term="linux" scheme="http://qsli.github.io/categories/linux/"/>
    
    
      <category term="sudo-log" scheme="http://qsli.github.io/tags/sudo-log/"/>
    
  </entry>
  
  <entry>
    <title>Spring中bean name重复的问题</title>
    <link href="http://qsli.github.io/2020/04/29/spring-bean-duplic-name/"/>
    <id>http://qsli.github.io/2020/04/29/spring-bean-duplic-name/</id>
    <published>2020-04-29T05:10:58.000Z</published>
    <updated>2020-04-29T05:10:58.956Z</updated>
    
    <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">org.apache.ibatis.binding.BindingException: Invalid bound statement (not found): com.atour.oss.dao.mapper.OssFileMapper.insert</span><br><span class="line"></span><br><span class="line">at org.apache.ibatis.binding.MapperMethod<span class="variable">$SqlCommand</span>.&lt;init&gt;(MapperMethod.java:227)</span><br><span class="line">at org.apache.ibatis.binding.MapperMethod.&lt;init&gt;(MapperMethod.java:49)</span><br><span class="line">at org.apache.ibatis.binding.MapperProxy.cachedMapperMethod(MapperProxy.java:65)</span><br><span class="line">at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)</span><br><span class="line">at com.sun.proxy.<span class="variable">$Proxy188</span>.insert(Unknown Source)</span><br></pre></td></tr></table></figure><p>一个同事新加了一个数据源，然后老的数据源居然报错了，他说没有改动老的。翻了下代码，最后发现是<strong>不加思索地复制粘贴</strong>埋的坑，老的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = MapperConfig.PACKAGE, sqlSessionFactoryRef = <span class="string">"sessionFactory"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 包目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String PACKAGE = <span class="string">"com.atour.oss.dao.mapper"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE_ALIASES_PACKAGE = <span class="string">"com.atour.oss.dao.entity"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * mapper所在目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MAPPER_LOCATION = <span class="string">"classpath*:mapper/oss/*.xml"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数配置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource 数据库信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resource   配置文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SqlSessionFactory</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"sessionFactory"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">invitationSessionFactory</span><span class="params">(@Qualifier(<span class="string">"dataSource"</span>)</span> DataSource dataSource,</span></span><br><span class="line"><span class="function">        @<span class="title">Qualifier</span><span class="params">(<span class="string">"mybatisConf"</span>)</span> Resource resource) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> SqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">        Resource[] mapperLocations = <span class="keyword">new</span> PathMatchingResourcePatternResolver().getResources(MAPPER_LOCATION);</span><br><span class="line">        sqlSessionFactoryBean.setMapperLocations(mapperLocations);</span><br><span class="line">        sqlSessionFactoryBean.setConfigLocation(resource);</span><br><span class="line">        sqlSessionFactoryBean.setTypeAliasesPackage(TYPE_ALIASES_PACKAGE);</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新加的代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = NoticeIntelligenceMapperConfig.PACKAGE, sqlSessionFactoryRef = <span class="string">"sessionFactory"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoticeIntelligenceMapperConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 包目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String PACKAGE = <span class="string">"com.atour.noticeIntelligence.dao.mapper"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE_ALIASES_PACKAGE = <span class="string">"com.atour.noticeIntelligence.dao.entity"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * mapper所在目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MAPPER_LOCATION = <span class="string">"classpath*:mapper/noticeIntelligence/*Mapper.xml"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数配置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource 数据库信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resource   配置文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SqlSessionFactory</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"sessionFactory"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">invitationSessionFactory</span><span class="params">(@Qualifier(<span class="string">"dataSource"</span>)</span> DataSource dataSource,</span></span><br><span class="line"><span class="function">        @<span class="title">Qualifier</span><span class="params">(<span class="string">"mybatisConf"</span>)</span> Resource resource) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> SqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">        Resource[] mapperLocations = <span class="keyword">new</span> PathMatchingResourcePatternResolver().getResources(MAPPER_LOCATION);</span><br><span class="line">        sqlSessionFactoryBean.setMapperLocations(mapperLocations);</span><br><span class="line">        sqlSessionFactoryBean.setConfigLocation(resource);</span><br><span class="line">        sqlSessionFactoryBean.setTypeAliasesPackage(TYPE_ALIASES_PACKAGE);</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意看bean的名字，完全一模一样！！！😂，目测spring在查找引用的时候错乱了。值得注意的是，俩bean还都标记上了<code>@Primary</code>。</p><h2 id="Primary"><a href="#Primary" class="headerlink" title="@Primary"></a>@Primary</h2><blockquote><pre><code>No matter how you designate a primary bean, the effect is the same. You’re telling</code></pre><p>Spring that it should choose the primary bean in the case of ambiguity.</p><pre><code>This works well right up to the point where you designate two or more primary</code></pre><p>beans.</p><pre><code>Now there are two primary Dessert beans: Cake and IceCream. This poses a new ambi</code></pre><p>guity issue. Just as Spring couldn’t choose among multiple candidate beans, it can’t</p><p>choose among multiple primary beans. Clearly, when more than one bean is desig</p><p>nated as primary, there are no primary candidates.</p><p>​                                                                —— 《Spring in action 4th Edition》</p></blockquote><p><strong>Clearly, when more than one bean is designated as primary, there are no primary candidates </strong></p><p>如果有多个<code>@Primary</code>注解的bean，那么就没有<code>primary</code>的candidate了；这里说的已经很明确了，但是没有说spring具体怎么处理的。毕竟上面的项目启动的时候也没有报<code>ambiguity</code> 相关的异常。</p><h2 id="MapperScan"><a href="#MapperScan" class="headerlink" title="MapperScan"></a>MapperScan</h2><p><code>MapperScan</code>是mybatis提供的注解，用来指定扫描dao层接口的目录和mapper文件所在的位置的注解，上面名字冲突的bean是通过下面的形式引入的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(basePackages = NoticeIntelligenceMapperConfig.PACKAGE, sqlSessionFactoryRef = <span class="string">"sessionFactory"</span>)</span><br></pre></td></tr></table></figure><p>看下源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.mybatis.spring.annotation.MapperScannerRegistrar#registerBeanDefinitions</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 省略n行</span></span><br><span class="line">    scanner.setSqlSessionTemplateBeanName(annoAttrs.getString(<span class="string">"sqlSessionTemplateRef"</span>));</span><br><span class="line">    <span class="comment">// 这里获取注解里对应的属性值</span></span><br><span class="line">    scanner.setSqlSessionFactoryBeanName(annoAttrs.getString(<span class="string">"sqlSessionFactoryRef"</span>));</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; basePackages = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String pkg : annoAttrs.getStringArray(<span class="string">"value"</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (StringUtils.hasText(pkg)) &#123;</span><br><span class="line">        basePackages.add(pkg);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (String pkg : annoAttrs.getStringArray(<span class="string">"basePackages"</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (StringUtils.hasText(pkg)) &#123;</span><br><span class="line">        basePackages.add(pkg);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (Class&lt;?&gt; clazz : annoAttrs.getClassArray(<span class="string">"basePackageClasses"</span>)) &#123;</span><br><span class="line">      basePackages.add(ClassUtils.getPackageName(clazz));</span><br><span class="line">    &#125;</span><br><span class="line">    scanner.registerFilters();</span><br><span class="line">    scanner.doScan(StringUtils.toStringArray(basePackages));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>找到对应属性使用的地方：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.mybatis.spring.mapper.ClassPathMapperScanner#processBeanDefinitions</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processBeanDefinitions</span><span class="params">(Set&lt;BeanDefinitionHolder&gt; beanDefinitions)</span> </span>&#123;</span><br><span class="line">    GenericBeanDefinition definition;</span><br><span class="line">    <span class="keyword">for</span> (BeanDefinitionHolder holder : beanDefinitions) &#123;</span><br><span class="line">      definition = (GenericBeanDefinition) holder.getBeanDefinition();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(<span class="string">"Creating MapperFactoryBean with name '"</span> + holder.getBeanName() </span><br><span class="line">          + <span class="string">"' and '"</span> + definition.getBeanClassName() + <span class="string">"' mapperInterface"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// the mapper interface is the original class of the bean</span></span><br><span class="line">      <span class="comment">// but, the actual class of the bean is MapperFactoryBean</span></span><br><span class="line">      definition.getConstructorArgumentValues().addGenericArgumentValue(definition.getBeanClassName()); <span class="comment">// issue #59</span></span><br><span class="line">      definition.setBeanClass(<span class="keyword">this</span>.mapperFactoryBean.getClass());</span><br><span class="line"></span><br><span class="line">      definition.getPropertyValues().add(<span class="string">"addToConfig"</span>, <span class="keyword">this</span>.addToConfig);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">boolean</span> explicitFactoryUsed = <span class="keyword">false</span>;</span><br><span class="line">      <span class="comment">// 这里设置对应依赖的占位</span></span><br><span class="line">      <span class="keyword">if</span> (StringUtils.hasText(<span class="keyword">this</span>.sqlSessionFactoryBeanName)) &#123;</span><br><span class="line">        <span class="comment">// 这里的RunTimeBean</span></span><br><span class="line">        definition.getPropertyValues().add(<span class="string">"sqlSessionFactory"</span>, <span class="keyword">new</span> RuntimeBeanReference(<span class="keyword">this</span>.sqlSessionFactoryBeanName));</span><br><span class="line">        explicitFactoryUsed = <span class="keyword">true</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.sqlSessionFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">        definition.getPropertyValues().add(<span class="string">"sqlSessionFactory"</span>, <span class="keyword">this</span>.sqlSessionFactory);</span><br><span class="line">        explicitFactoryUsed = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (StringUtils.hasText(<span class="keyword">this</span>.sqlSessionTemplateBeanName)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (explicitFactoryUsed) &#123;</span><br><span class="line">          logger.warn(<span class="string">"Cannot use both: sqlSessionTemplate and sqlSessionFactory together. sqlSessionFactory is ignored."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        definition.getPropertyValues().add(<span class="string">"sqlSessionTemplate"</span>, <span class="keyword">new</span> RuntimeBeanReference(<span class="keyword">this</span>.sqlSessionTemplateBeanName));</span><br><span class="line">        explicitFactoryUsed = <span class="keyword">true</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.sqlSessionTemplate != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (explicitFactoryUsed) &#123;</span><br><span class="line">          logger.warn(<span class="string">"Cannot use both: sqlSessionTemplate and sqlSessionFactory together. sqlSessionFactory is ignored."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        definition.getPropertyValues().add(<span class="string">"sqlSessionTemplate"</span>, <span class="keyword">this</span>.sqlSessionTemplate);</span><br><span class="line">        explicitFactoryUsed = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!explicitFactoryUsed) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">          logger.debug(<span class="string">"Enabling autowire by type for MapperFactoryBean with name '"</span> + holder.getBeanName() + <span class="string">"'."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>最终使用的是<code>RuntimeBeanReference</code>。</p><h2 id="RuntimeBeanReference"><a href="#RuntimeBeanReference" class="headerlink" title="RuntimeBeanReference"></a>RuntimeBeanReference</h2><p><code>@Primary</code>注解最终转换成了bean的<code>isPrimary</code>属性，搜代码可以大概知道是在<code>DefaultListableBeanFactory</code>中处理的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.beans.factory.support.DefaultListableBeanFactory#determinePrimaryCandidate</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Determine the primary candidate in the given set of beans.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> candidates a Map of candidate names and candidate instances</span></span><br><span class="line"><span class="comment"> * (or candidate classes if not created yet) that match the required type</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> requiredType the target dependency type to match against</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the name of the primary candidate, or &#123;<span class="doctag">@code</span> null&#125; if none found</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #isPrimary(String, Object)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">determinePrimaryCandidate</span><span class="params">(Map&lt;String, Object&gt; candidates, Class&lt;?&gt; requiredType)</span> </span>&#123;</span><br><span class="line">String primaryBeanName = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : candidates.entrySet()) &#123;</span><br><span class="line">String candidateBeanName = entry.getKey();</span><br><span class="line">Object beanInstance = entry.getValue();</span><br><span class="line"><span class="keyword">if</span> (isPrimary(candidateBeanName, beanInstance)) &#123;</span><br><span class="line"><span class="keyword">if</span> (primaryBeanName != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">boolean</span> candidateLocal = containsBeanDefinition(candidateBeanName);</span><br><span class="line"><span class="keyword">boolean</span> primaryLocal = containsBeanDefinition(primaryBeanName);</span><br><span class="line"><span class="keyword">if</span> (candidateLocal &amp;&amp; primaryLocal) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NoUniqueBeanDefinitionException(requiredType, candidates.size(),</span><br><span class="line"><span class="string">"more than one 'primary' bean found among candidates: "</span> + candidates.keySet());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (candidateLocal) &#123;</span><br><span class="line">primaryBeanName = candidateBeanName;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">primaryBeanName = candidateBeanName;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> primaryBeanName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这里抛异常了，应该不是这里 🙄</p><blockquote><p>首先是信息解析，即将属性定义中的值进行解析，如RuntimeBeanReference解析成引用的Bean对象，这里会进行级联获取bean信息，并追加depend信息。这一步只是解析。</p></blockquote><p>原来在这里：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.beans.factory.support.BeanDefinitionValueResolver#resolveValueIfNecessary</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Given a PropertyValue, return a value, resolving any references to other</span></span><br><span class="line"><span class="comment"> * beans in the factory if necessary. The value could be:</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;A BeanDefinition, which leads to the creation of a corresponding</span></span><br><span class="line"><span class="comment"> * new bean instance. Singleton flags and names of such "inner beans"</span></span><br><span class="line"><span class="comment"> * are always ignored: Inner beans are anonymous prototypes.</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;A RuntimeBeanReference, which must be resolved.</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;A ManagedList. This is a special collection that may contain</span></span><br><span class="line"><span class="comment"> * RuntimeBeanReferences or Collections that will need to be resolved.</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;A ManagedSet. May also contain RuntimeBeanReferences or</span></span><br><span class="line"><span class="comment"> * Collections that will need to be resolved.</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;A ManagedMap. In this case the value may be a RuntimeBeanReference</span></span><br><span class="line"><span class="comment"> * or Collection that will need to be resolved.</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;An ordinary object or &#123;<span class="doctag">@code</span> null&#125;, in which case it's left alone.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> argName the name of the argument that the value is defined for</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value the value object to resolve</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the resolved object</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">resolveValueIfNecessary</span><span class="params">(Object argName, @Nullable Object value)</span> </span>&#123;</span><br><span class="line"><span class="comment">// We must check each value to see whether it requires a runtime reference</span></span><br><span class="line"><span class="comment">// to another bean to be resolved.</span></span><br><span class="line"><span class="keyword">if</span> (value <span class="keyword">instanceof</span> RuntimeBeanReference) &#123;</span><br><span class="line">      <span class="comment">// 在这里处理的！！！</span></span><br><span class="line">RuntimeBeanReference ref = (RuntimeBeanReference) value;</span><br><span class="line"><span class="keyword">return</span> resolveReference(argName, ref);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> RuntimeBeanNameReference) &#123;</span><br><span class="line">String refName = ((RuntimeBeanNameReference) value).getBeanName();</span><br><span class="line">refName = String.valueOf(doEvaluate(refName));</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.beanFactory.containsBean(refName)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line"><span class="string">"Invalid bean name '"</span> + refName + <span class="string">"' in bean reference for "</span> + argName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> refName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> BeanDefinitionHolder) &#123;</span><br><span class="line"><span class="comment">// Resolve BeanDefinitionHolder: contains BeanDefinition with name and aliases.</span></span><br><span class="line">BeanDefinitionHolder bdHolder = (BeanDefinitionHolder) value;</span><br><span class="line"><span class="keyword">return</span> resolveInnerBean(argName, bdHolder.getBeanName(), bdHolder.getBeanDefinition());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> BeanDefinition) &#123;</span><br><span class="line"><span class="comment">// Resolve plain BeanDefinition, without contained name: use dummy name.</span></span><br><span class="line">BeanDefinition bd = (BeanDefinition) value;</span><br><span class="line">String innerBeanName = <span class="string">"(inner bean)"</span> + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR +</span><br><span class="line">ObjectUtils.getIdentityHexString(bd);</span><br><span class="line"><span class="keyword">return</span> resolveInnerBean(argName, innerBeanName, bd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> ManagedArray) &#123;</span><br><span class="line"><span class="comment">// May need to resolve contained runtime references.</span></span><br><span class="line">ManagedArray array = (ManagedArray) value;</span><br><span class="line">Class&lt;?&gt; elementType = array.resolvedElementType;</span><br><span class="line"><span class="keyword">if</span> (elementType == <span class="keyword">null</span>) &#123;</span><br><span class="line">String elementTypeName = array.getElementTypeName();</span><br><span class="line"><span class="keyword">if</span> (StringUtils.hasText(elementTypeName)) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">elementType = ClassUtils.forName(elementTypeName, <span class="keyword">this</span>.beanFactory.getBeanClassLoader());</span><br><span class="line">array.resolvedElementType = elementType;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="comment">// Improve the message by showing the context.</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line"><span class="keyword">this</span>.beanDefinition.getResourceDescription(), <span class="keyword">this</span>.beanName,</span><br><span class="line"><span class="string">"Error resolving array type for "</span> + argName, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">elementType = Object<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> resolveManagedArray(argName, (List&lt;?&gt;) value, elementType);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> ManagedList) &#123;</span><br><span class="line"><span class="comment">// May need to resolve contained runtime references.</span></span><br><span class="line"><span class="keyword">return</span> resolveManagedList(argName, (List&lt;?&gt;) value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> ManagedSet) &#123;</span><br><span class="line"><span class="comment">// May need to resolve contained runtime references.</span></span><br><span class="line"><span class="keyword">return</span> resolveManagedSet(argName, (Set&lt;?&gt;) value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> ManagedMap) &#123;</span><br><span class="line"><span class="comment">// May need to resolve contained runtime references.</span></span><br><span class="line"><span class="keyword">return</span> resolveManagedMap(argName, (Map&lt;?, ?&gt;) value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> ManagedProperties) &#123;</span><br><span class="line">Properties original = (Properties) value;</span><br><span class="line">Properties copy = <span class="keyword">new</span> Properties();</span><br><span class="line">original.forEach((propKey, propValue) -&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (propKey <span class="keyword">instanceof</span> TypedStringValue) &#123;</span><br><span class="line">propKey = evaluate((TypedStringValue) propKey);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (propValue <span class="keyword">instanceof</span> TypedStringValue) &#123;</span><br><span class="line">propValue = evaluate((TypedStringValue) propValue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (propKey == <span class="keyword">null</span> || propValue == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line"><span class="keyword">this</span>.beanDefinition.getResourceDescription(), <span class="keyword">this</span>.beanName,</span><br><span class="line"><span class="string">"Error converting Properties key/value pair for "</span> + argName + <span class="string">": resolved to null"</span>);</span><br><span class="line">&#125;</span><br><span class="line">copy.put(propKey, propValue);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> TypedStringValue) &#123;</span><br><span class="line"><span class="comment">// Convert value to target type here.</span></span><br><span class="line">TypedStringValue typedStringValue = (TypedStringValue) value;</span><br><span class="line">Object valueObject = evaluate(typedStringValue);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class&lt;?&gt; resolvedTargetType = resolveTargetType(typedStringValue);</span><br><span class="line"><span class="keyword">if</span> (resolvedTargetType != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.typeConverter.convertIfNecessary(valueObject, resolvedTargetType);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> valueObject;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line"><span class="comment">// Improve the message by showing the context.</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line"><span class="keyword">this</span>.beanDefinition.getResourceDescription(), <span class="keyword">this</span>.beanName,</span><br><span class="line"><span class="string">"Error converting typed String value for "</span> + argName, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> NullBean) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> evaluate(value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>debug看了下，也确实是对的：</p><img src="/2020/04/29/spring-bean-duplic-name/image-20200429120415453.png"><p>跟进去， 发现：</p><img src="/2020/04/29/spring-bean-duplic-name/image-20200429120839555.png"><p>老的dao层关联的sessionFactory居然是新的（扫描路径不一样，这里只加载了新的mapper文件）。根据名称获取一把：</p><img src="/2020/04/29/spring-bean-duplic-name/image-20200429121457725.png"><h2 id="bean注册"><a href="#bean注册" class="headerlink" title="bean注册"></a>bean注册</h2><img src="/2020/04/29/spring-bean-duplic-name/image-20200429125600021.png"><img src="/2020/04/29/spring-bean-duplic-name/image-20200429125633517.png"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//---------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">// Implementation of BeanDefinitionRegistry interface</span></span><br><span class="line"><span class="comment">//---------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinition</span><span class="params">(String beanName, BeanDefinition beanDefinition)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line"></span><br><span class="line">Assert.hasText(beanName, <span class="string">"Bean name must not be empty"</span>);</span><br><span class="line">Assert.notNull(beanDefinition, <span class="string">"BeanDefinition must not be null"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (beanDefinition <span class="keyword">instanceof</span> AbstractBeanDefinition) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">((AbstractBeanDefinition) beanDefinition).validate();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,</span><br><span class="line"><span class="string">"Validation of bean definition failed"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里发生了覆盖</span></span><br><span class="line">BeanDefinition existingDefinition = <span class="keyword">this</span>.beanDefinitionMap.get(beanName);</span><br><span class="line"><span class="keyword">if</span> (existingDefinition != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!isAllowBeanDefinitionOverriding()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,</span><br><span class="line"><span class="string">"Cannot register bean definition ["</span> + beanDefinition + <span class="string">"] for bean '"</span> + beanName +</span><br><span class="line"><span class="string">"': There is already ["</span> + existingDefinition + <span class="string">"] bound."</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (existingDefinition.getRole() &lt; beanDefinition.getRole()) &#123;</span><br><span class="line"><span class="comment">// e.g. was ROLE_APPLICATION, now overriding with ROLE_SUPPORT or ROLE_INFRASTRUCTURE</span></span><br><span class="line"><span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">logger.warn(<span class="string">"Overriding user-defined bean definition for bean '"</span> + beanName +</span><br><span class="line"><span class="string">"' with a framework-generated bean definition: replacing ["</span> +</span><br><span class="line">existingDefinition + <span class="string">"] with ["</span> + beanDefinition + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!beanDefinition.equals(existingDefinition)) &#123;</span><br><span class="line">        <span class="comment">// 走到了这里，打印了override的日志，不过是info级别的</span></span><br><span class="line"><span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">logger.info(<span class="string">"Overriding bean definition for bean '"</span> + beanName +</span><br><span class="line"><span class="string">"' with a different definition: replacing ["</span> + existingDefinition +</span><br><span class="line"><span class="string">"] with ["</span> + beanDefinition + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Overriding bean definition for bean '"</span> + beanName +</span><br><span class="line"><span class="string">"' with an equivalent definition: replacing ["</span> + existingDefinition +</span><br><span class="line"><span class="string">"] with ["</span> + beanDefinition + <span class="string">"]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (hasBeanCreationStarted()) &#123;</span><br><span class="line"><span class="comment">// Cannot modify startup-time collection elements anymore (for stable iteration)</span></span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>.beanDefinitionMap) &#123;</span><br><span class="line"><span class="keyword">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">List&lt;String&gt; updatedDefinitions = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">this</span>.beanDefinitionNames.size() + <span class="number">1</span>);</span><br><span class="line">updatedDefinitions.addAll(<span class="keyword">this</span>.beanDefinitionNames);</span><br><span class="line">updatedDefinitions.add(beanName);</span><br><span class="line"><span class="keyword">this</span>.beanDefinitionNames = updatedDefinitions;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.manualSingletonNames.contains(beanName)) &#123;</span><br><span class="line">Set&lt;String&gt; updatedSingletons = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(<span class="keyword">this</span>.manualSingletonNames);</span><br><span class="line">updatedSingletons.remove(beanName);</span><br><span class="line"><span class="keyword">this</span>.manualSingletonNames = updatedSingletons;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Still in startup registration phase</span></span><br><span class="line"><span class="keyword">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line"><span class="keyword">this</span>.beanDefinitionNames.add(beanName);</span><br><span class="line"><span class="keyword">this</span>.manualSingletonNames.remove(beanName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.frozenBeanDefinitionNames = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (existingDefinition != <span class="keyword">null</span> || containsSingleton(beanName)) &#123;</span><br><span class="line">resetBeanDefinition(beanName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2020/04/29/spring-bean-duplic-name/image-20200429125804639.png"><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>最终排查下来，发现只是bean的名称重复，导致覆盖；跟<code>@Primary</code>没有关系。在成文的过程中又一起<strong>不加思索地复制粘贴</strong>引起的故障</p><img src="/2020/04/29/spring-bean-duplic-name/image-20200429130442650.png"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of <span class="built_in">type</span> <span class="string">'com.atour.pay.api.remote.statistics.TransStatisticsRemote'</span> available</span><br><span class="line">at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:347)</span><br><span class="line">at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:334)</span><br><span class="line">at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1103)</span><br></pre></td></tr></table></figure><p>还是需要保持敬畏之心，多去了解，不能无脑的粘贴。同时我们的基础建设不够完善，才导致了这么多复制粘贴的代码，道阻且长！</p><p>覆盖的规则可以参考， <a href="https://blog.csdn.net/f641385712/article/details/93777536" rel="external nofollow noopener noreferrer" target="_blank">聊聊Spring的bean覆盖（存在同名name/id问题），介绍Spring名称生成策略接口BeanNameGenerator【享学Spring】_Java_BAT的乌托邦-CSDN博客</a>, 这里简单贴下结论：</p><blockquote><ul><li>同一个配置文件内同名的<code>Bean</code>，<strong>以最上面定义的为准</strong></li><li>不同配置文件中存在同名Bean，<code>后解析</code>的配置文件会覆盖<code>先解析</code>的配置文件（配置文件的先后顺序其实会受到<code>@Order</code>来控制）</li><li>通过<code>@ComponentScan</code>扫描进来的优先级是最低的，原因就是它扫描进来的Bean定义是<strong>最先</strong>被注册的~</li><li>在不同容器内，即使<code>Bean</code>名称相同，它们也是能够<strong>和谐共存</strong>的（想想父子容器）</li></ul></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.iflym.com/index.php/code/201208290002.html" rel="external nofollow noopener noreferrer" target="_blank">Spring中获取一个bean的流程-2 – i flym</a></li><li><a href="https://blog.csdn.net/f641385712/article/details/93777536" rel="external nofollow noopener noreferrer" target="_blank">聊聊Spring的bean覆盖（存在同名name/id问题），介绍Spring名称生成策略接口BeanNameGenerator【享学Spring】_Java_BAT的乌托邦-CSDN博客</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
      <category term="spring" scheme="http://qsli.github.io/categories/spring/"/>
    
    
      <category term="spring-bean" scheme="http://qsli.github.io/tags/spring-bean/"/>
    
  </entry>
  
  <entry>
    <title>Feign方法级别的超时</title>
    <link href="http://qsli.github.io/2020/04/28/feign-method-timeout/"/>
    <id>http://qsli.github.io/2020/04/28/feign-method-timeout/</id>
    <published>2020-04-28T06:00:44.000Z</published>
    <updated>2020-05-09T15:23:17.375Z</updated>
    
    <content type="html"><![CDATA[<img src="/2020/04/28/feign-method-timeout/image-20200428135947174.png"><h2 id="Feign方法级别的超时"><a href="#Feign方法级别的超时" class="headerlink" title="Feign方法级别的超时"></a>Feign方法级别的超时</h2><ul><li><p>discussion</p><p><a href="https://github.com/OpenFeign/feign/issues/562" rel="external nofollow noopener noreferrer" target="_blank">Per request timeout options · Issue #562 · OpenFeign/feign</a></p></li><li><p>版本 &gt;= 10.3.0</p></li></ul><img src="/2020/04/28/feign-method-timeout/WeChatWorkScreenshot_cb1954f6-abee-48ad-8dc5-14e9ef579bb9.png"><ul><li>源码中的单测：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> pengfei.zhao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptionsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">interface</span> <span class="title">OptionsInterface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestLine</span>(<span class="string">"GET /"</span>)</span><br><span class="line">    <span class="comment">// 参数中多了一个超时的配置</span></span><br><span class="line">    <span class="function">String <span class="title">get</span><span class="params">(Request.Options options)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestLine</span>(<span class="string">"GET /"</span>)</span><br><span class="line">    <span class="function">String <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Rule</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">final</span> ExpectedException thrown = ExpectedException.none();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 测试总的配置会导致超时</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">socketTimeoutTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> MockWebServer server = <span class="keyword">new</span> MockWebServer();</span><br><span class="line">    server.enqueue(<span class="keyword">new</span> MockResponse().setBody(<span class="string">"foo"</span>).setBodyDelay(<span class="number">3</span>, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> OptionsInterface api = Feign.builder()</span><br><span class="line">        .options(<span class="keyword">new</span> Request.Options(<span class="number">1000</span>, <span class="number">1000</span>))</span><br><span class="line">        .target(OptionsInterface.class, server.url("/").toString());</span><br><span class="line"></span><br><span class="line">    thrown.expect(FeignException<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    thrown.expectCause(CoreMatchers.isA(SocketTimeoutException<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line"></span><br><span class="line">    api.get();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 接口级别的配置可以覆盖总的配置，从而在等待3s之后拿到结果</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">normalResponseTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> MockWebServer server = <span class="keyword">new</span> MockWebServer();</span><br><span class="line">    server.enqueue(<span class="keyword">new</span> MockResponse().setBody(<span class="string">"foo"</span>).setBodyDelay(<span class="number">3</span>, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> OptionsInterface api = Feign.builder()</span><br><span class="line">        .options(<span class="keyword">new</span> Request.Options(<span class="number">1000</span>, <span class="number">1000</span>))</span><br><span class="line">        .target(OptionsInterface.class, server.url("/").toString());</span><br><span class="line"></span><br><span class="line">    assertThat(api.get(<span class="keyword">new</span> Request.Options(<span class="number">1000</span>, <span class="number">4</span> * <span class="number">1000</span>))).isEqualTo(<span class="string">"foo"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="部分源码"><a href="#部分源码" class="headerlink" title="部分源码"></a>部分源码</h3><p>版本：<code>10.10.1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// feign.SynchronousMethodHandler#invoke</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object[] argv)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    RequestTemplate template = buildTemplateFromArgs.create(argv);</span><br><span class="line">    <span class="comment">// 从参数中找对应的option</span></span><br><span class="line">    Options options = findOptions(argv);</span><br><span class="line">    Retryer retryer = <span class="keyword">this</span>.retryer.clone();</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> executeAndDecode(template, options);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (RetryableException e) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          retryer.continueOrPropagate(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RetryableException th) &#123;</span><br><span class="line">          Throwable cause = th.getCause();</span><br><span class="line">          <span class="keyword">if</span> (propagationPolicy == UNWRAP &amp;&amp; cause != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> cause;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> th;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</span><br><span class="line">          logger.logRetry(metadata.configKey(), logLevel);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>findOptions</code>的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Options <span class="title">findOptions</span><span class="params">(Object[] argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (argv == <span class="keyword">null</span> || argv.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.options;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Stream.of(argv)</span><br><span class="line">      .filter(Options.class::isInstance)</span><br><span class="line">      .map(Options.class::cast)</span><br><span class="line">      .findFirst()</span><br><span class="line">    <span class="comment">// fall back to总的超时</span></span><br><span class="line">      .orElse(<span class="keyword">this</span>.options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>如果使用<code>feign-ribbon</code>，版本要和<code>feign-core</code>保持一致，不然会报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalArgumentException: url values must be not be absolute.</span><br><span class="line"></span><br><span class="line">at feign.RequestTemplate.uri(RequestTemplate.java:438)</span><br><span class="line">at feign.RequestTemplate.uri(RequestTemplate.java:425)</span><br><span class="line">at feign.RequestTemplate.append(RequestTemplate.java:392)</span><br><span class="line">at feign.ribbon.LBClient<span class="variable">$RibbonRequest</span>.toRequest(LBClient.java:100)</span><br><span class="line">at feign.ribbon.LBClient.getRequestSpecificRetryHandler(LBClient.java:79)</span><br><span class="line">at feign.ribbon.LBClient.getRequestSpecificRetryHandler(LBClient.java:38)</span><br><span class="line">at com.netflix.client.AbstractLoadBalancerAwareClient.buildLoadBalancerCommand(AbstractLoadBalancerAwareClient.java:127)</span><br><span class="line">at com.netflix.client.AbstractLoadBalancerAwareClient.executeWithLoadBalancer(AbstractLoadBalancerAwareClient.java:94)</span><br><span class="line">at feign.ribbon.RibbonClient.execute(RibbonClient.java:69)</span><br><span class="line">at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:119)</span><br><span class="line">at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:89)</span><br><span class="line">at feign.ReflectiveFeign<span class="variable">$FeignInvocationHandler</span>.invoke(ReflectiveFeign.java:100)</span><br><span class="line">at com.sun.proxy.<span class="variable">$Proxy36</span>.getEffectiveMebIds(Unknown Source)</span><br></pre></td></tr></table></figure><img src="/2020/04/28/feign-method-timeout/image-20200428135018581.png"><p><code>vip</code>没有解析出来，版本改了之后就没有问题了:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">feign-core.version</span>&gt;</span>10.10.1<span class="tag">&lt;/<span class="name">feign-core.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;feign-core.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;feign-core.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码里连接超时设置为100mills，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> List&lt;Integer&gt; effectiveMebIds =</span><br><span class="line">           personalMemberRemote.getEffectiveMebIds(<span class="keyword">new</span> Request.Options(<span class="number">100</span>, <span class="number">500</span>), Lists.newArrayList(<span class="number">1</span>, <span class="number">17</span>, <span class="number">15</span>, <span class="number">1386232841</span>));</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">13:55:21.376 [PollingServerListUpdater-0] DEBUG c.n.l.DynamicServerListLoadBalancer-179  - Setting server list <span class="keyword">for</span> zones: &#123;defaultzone=[192.168.16.211:10020]&#125;</span><br><span class="line">13:55:21.376 [PollingServerListUpdater-0] DEBUG c.n.loadbalancer.BaseLoadBalancer-472  - LoadBalancer [user-center_defaultzone]: clearing server list (SET op)</span><br><span class="line">13:55:21.376 [PollingServerListUpdater-0] DEBUG c.n.loadbalancer.BaseLoadBalancer-488  - LoadBalancer [user-center_defaultzone]:  addServer [192.168.16.211:10020]</span><br><span class="line">13:55:21.600 [main] DEBUG c.n.l.ZoneAwareLoadBalancer-112  - Zone aware logic disabled or there is only one zone</span><br><span class="line">13:55:21.633 [main] DEBUG c.n.loadbalancer.LoadBalancerContext-492  - user-center using LB returned Server: 192.168.16.211:10020 <span class="keyword">for</span> request http:///personalMember/getEffectiveMebIds</span><br><span class="line">13:55:21.741 [main] DEBUG c.n.l.reactive.LoadBalancerCommand-314  - Got error java.net.SocketTimeoutException: connect timed out when executed on server 192.168.16.211:10020</span><br><span class="line">13:55:22.253 [main] DEBUG c.n.l.ZoneAwareLoadBalancer-112  - Zone aware logic disabled or there is only one zone</span><br><span class="line">13:55:22.254 [main] DEBUG c.n.loadbalancer.LoadBalancerContext-492  - user-center using LB returned Server: 192.168.16.211:10020 <span class="keyword">for</span> request http:///personalMember/getEffectiveMebIds</span><br><span class="line">13:55:22.358 [main] DEBUG c.n.l.reactive.LoadBalancerCommand-314  - Got error java.net.SocketTimeoutException: connect timed out when executed on server 192.168.16.211:10020</span><br><span class="line"></span><br><span class="line">feign.RetryableException: connect timed out executing POST http://user-center/personalMember/getEffectiveMebIds</span><br><span class="line"></span><br><span class="line">at feign.FeignException.errorExecuting(FeignException.java:249)</span><br><span class="line">at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:129)</span><br><span class="line">at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:89)</span><br><span class="line">at feign.ReflectiveFeign<span class="variable">$FeignInvocationHandler</span>.invoke(ReflectiveFeign.java:100)</span><br><span class="line">at com.sun.proxy.<span class="variable">$Proxy36</span>.getEffectiveMebIds(Unknown Source)</span><br></pre></td></tr></table></figure><p>直接超时了，说明这个限制生效了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2020/04/28/feign-method-timeout/image-20200428135947174.png&quot;&gt;
&lt;h2 id=&quot;Feign方法级别的超时&quot;&gt;&lt;a href=&quot;#Feign方法级别的超时&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="feign" scheme="http://qsli.github.io/categories/feign/"/>
    
    
      <category term="spring-cloud" scheme="http://qsli.github.io/tags/spring-cloud/"/>
    
  </entry>
  
  <entry>
    <title>tomcat busy thread如何统计的</title>
    <link href="http://qsli.github.io/2020/04/27/tomcat-busy-thread/"/>
    <id>http://qsli.github.io/2020/04/27/tomcat-busy-thread/</id>
    <published>2020-04-27T05:59:37.000Z</published>
    <updated>2020-04-27T05:59:37.209Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tomcat-busy-thread"><a href="#tomcat-busy-thread" class="headerlink" title="tomcat busy thread"></a>tomcat busy thread</h2><p>突然好奇tomcat的busy thread怎么统计的，翻了下代码。</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.tomcat.util.net.AbstractEndpoint#getCurrentThreadsBusy   </span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return the amount of threads that are in use</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the amount of threads that are in use</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCurrentThreadsBusy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (executor!=<span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (executor <span class="keyword">instanceof</span> ThreadPoolExecutor) &#123;</span><br><span class="line">      <span class="keyword">return</span> ((ThreadPoolExecutor)executor).getActiveCount();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (executor <span class="keyword">instanceof</span> ResizableExecutor) &#123;</span><br><span class="line">      <span class="keyword">return</span> ((ResizableExecutor)executor).getActiveCount();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是在执行任务的线程跟线程的状态没有关系：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.ThreadPoolExecutor#getActiveCount</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the approximate number of threads that are actively</span></span><br><span class="line"><span class="comment">     * executing tasks.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the number of threads</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getActiveCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">  mainLock.lock();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Worker w : workers)</span><br><span class="line">      <span class="keyword">if</span> (w.isLocked())</span><br><span class="line">        ++n;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    mainLock.unlock();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> MBeanServer server = ManagementFactory.getPlatformMBeanServer();</span><br><span class="line">Set&lt;ObjectName&gt; names = server.queryNames(<span class="keyword">new</span> ObjectName(<span class="string">"Catalina:type=ThreadPool,*"</span>), <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> ObjectName name : names) &#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">final</span> Object maxThreads = server.getAttribute(name, <span class="string">"maxThreads"</span>);</span><br><span class="line">    <span class="keyword">final</span> Object currentThreadCount = server.getAttribute(name, <span class="string">"currentThreadCount"</span>);</span><br><span class="line">    <span class="keyword">final</span> Object currentThreadsBusy = server.getAttribute(name, <span class="string">"currentThreadsBusy"</span>);</span><br><span class="line">    System.out.println(<span class="string">"maxThreads = "</span> + maxThreads);</span><br><span class="line">    System.out.println(<span class="string">"currentThreadCount = "</span> + currentThreadCount);</span><br><span class="line">    System.out.println(<span class="string">"currentThreadsBusy = "</span> + currentThreadsBusy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Catalina:<span class="built_in">type</span>=ThreadPool,name=<span class="string">"ajp-nio-8009"</span></span><br><span class="line">maxThreads = 200</span><br><span class="line">currentThreadCount = 10</span><br><span class="line">currentThreadsBusy = 0</span><br><span class="line">Catalina:<span class="built_in">type</span>=ThreadPool,name=<span class="string">"http-nio-8080"</span></span><br><span class="line">maxThreads = 200</span><br><span class="line">currentThreadCount = 10</span><br><span class="line">currentThreadsBusy = 0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;tomcat-busy-thread&quot;&gt;&lt;a href=&quot;#tomcat-busy-thread&quot; class=&quot;headerlink&quot; title=&quot;tomcat busy thread&quot;&gt;&lt;/a&gt;tomcat busy thread&lt;/h2&gt;&lt;p&gt;突然好奇to
      
    
    </summary>
    
      <category term="tomcat" scheme="http://qsli.github.io/categories/tomcat/"/>
    
    
      <category term="busy-thread" scheme="http://qsli.github.io/tags/busy-thread/"/>
    
  </entry>
  
  <entry>
    <title>Druid连接泄露记录</title>
    <link href="http://qsli.github.io/2020/04/25/druid-conn-leak/"/>
    <id>http://qsli.github.io/2020/04/25/druid-conn-leak/</id>
    <published>2020-04-25T12:36:21.000Z</published>
    <updated>2020-04-25T12:36:21.334Z</updated>
    
    <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>当时数据库需要升级配置，已知中间会有闪断，按照之前的经验都是自动重连然后恢复。但是，这次tomcat的连接线程全部变成busy，导致应用不能提供服务。线程栈如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"http-nio-11022-exec-196"</span> <span class="comment">#216701 daemon prio=5 os_prio=0 tid=0x00007fbac4082000 nid=0x3c4a waiting on condition [0x00007fba0fb52000]</span></span><br><span class="line">   java.lang.Thread.State: WAITING (parking)</span><br><span class="line">at sun.misc.Unsafe.park(Native Method)</span><br><span class="line">- parking to <span class="built_in">wait</span> <span class="keyword">for</span>  &lt;0x00007fbb318710f0&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>)</span><br><span class="line">at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)</span><br><span class="line">at java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>.await(AbstractQueuedSynchronizer.java:2039)</span><br><span class="line">at com.alibaba.druid.pool.DruidDataSource.takeLast(DruidDataSource.java:1899)</span><br><span class="line">at com.alibaba.druid.pool.DruidDataSource.getConnectionInternal(DruidDataSource.java:1460)</span><br><span class="line">at com.alibaba.druid.pool.DruidDataSource.getConnectionDirect(DruidDataSource.java:1255)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5007)</span><br><span class="line">at com.alibaba.druid.filter.FilterAdapter.dataSource_getConnection(FilterAdapter.java:2745)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5003)</span><br><span class="line">at com.alibaba.druid.filter.logging.LogFilter.dataSource_getConnection(LogFilter.java:876)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5003)</span><br><span class="line">at com.alibaba.druid.filter.stat.StatFilter.dataSource_getConnection(StatFilter.java:680)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5003)</span><br><span class="line">at com.alibaba.druid.filter.FilterAdapter.dataSource_getConnection(FilterAdapter.java:2745)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5003)</span><br><span class="line">at com.alibaba.druid.filter.stat.StatFilter.dataSource_getConnection(StatFilter.java:680)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5003)</span><br><span class="line">at com.alibaba.druid.filter.FilterAdapter.dataSource_getConnection(FilterAdapter.java:2745)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5003)</span><br><span class="line">at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:1233)</span><br><span class="line">at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:1225)</span><br><span class="line">at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:90)</span><br><span class="line">at com.atour.db.DynamicDataSource.getConnection(DynamicDataSource.java:140)</span><br><span class="line">at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:151)</span><br><span class="line">at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:115)</span><br><span class="line">at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:78)</span><br><span class="line">at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:82)</span><br><span class="line">at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:68)</span><br><span class="line">at com.atour.migrate.helper.mybatis.interceptor.MyBatisMigrateChainIdKiller.checkDsIgnoreTableStatus(MyBatisMigrateChainIdKiller.java:181)</span><br></pre></td></tr></table></figure><p>查看jstack的输出发现连接线程都卡在了<code>DruidDataSource.java:1899</code>， 代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DruidConnectionHolder <span class="title">takeLast</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, SQLException </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">while</span> (poolingCount == <span class="number">0</span>) &#123;</span><br><span class="line">               emptySignal(); <span class="comment">// send signal to CreateThread create connection</span></span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (failFast &amp;&amp; failContinuous.get()) &#123;</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> DataSourceNotAvailableException(createError);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               notEmptyWaitThreadCount++;</span><br><span class="line">               <span class="keyword">if</span> (notEmptyWaitThreadCount &gt; notEmptyWaitThreadPeak) &#123;</span><br><span class="line">                   notEmptyWaitThreadPeak = notEmptyWaitThreadCount;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                 <span class="comment">// DruidDataSource.java:1899 卡在这里</span></span><br><span class="line">                   notEmpty.await(); <span class="comment">// signal by recycle or creator</span></span><br><span class="line">               &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                   notEmptyWaitThreadCount--;</span><br><span class="line">               &#125;</span><br><span class="line">               notEmptyWaitCount++;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (!enable) &#123;</span><br><span class="line">                   connectErrorCountUpdater.incrementAndGet(<span class="keyword">this</span>);</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> DataSourceDisableException();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</span><br><span class="line">           notEmpty.signal(); <span class="comment">// propagate to non-interrupted thread</span></span><br><span class="line">           notEmptySignalCount++;</span><br><span class="line">           <span class="keyword">throw</span> ie;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       decrementPoolingCount();</span><br><span class="line">       DruidConnectionHolder last = connections[poolingCount];</span><br><span class="line">       connections[poolingCount] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> last;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>等待在druid的notEmpty队里上，等待有可用的连接。找到对应的创建连接线程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Druid-ConnectionPool-Create-219971169"</span> <span class="comment">#80 daemon prio=5 os_prio=0 tid=0x00007fbab2fce000 nid=0x67e0 waiting on condition [0x00007fba2b974000]</span></span><br><span class="line">   java.lang.Thread.State: WAITING (parking)</span><br><span class="line">at sun.misc.Unsafe.park(Native Method)</span><br><span class="line">- parking to <span class="built_in">wait</span> <span class="keyword">for</span>  &lt;0x00007fbb31048098&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>)</span><br><span class="line">at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)</span><br><span class="line">at java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>.await(AbstractQueuedSynchronizer.java:2039)</span><br><span class="line">at com.alibaba.druid.pool.DruidDataSource<span class="variable">$CreateConnectionThread</span>.run(DruidDataSource.java:2448)</span><br><span class="line"></span><br><span class="line">   Locked ownable synchronizers:</span><br><span class="line">- None</span><br></pre></td></tr></table></figure><p>对应的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 防止创建超过maxActive数量的连接</span></span><br><span class="line"><span class="keyword">if</span> (activeCount + poolingCount &gt;= maxActive) &#123;</span><br><span class="line">  <span class="comment">// DruidDataSource.java:2448</span></span><br><span class="line">  empty.await();</span><br><span class="line">  <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>奇怪的是，创建连接的线程在等待empty的条件。问题可能就出在<code>activeCount + poolingCount &gt;= maxActive</code>这个条件上，其他线程都在等待连接，所以<code>poolingCount</code>肯定是0（连接池里没有空闲的连接），那么有问题的肯定是<code>activeCount</code>这里了。</p><p>第一反应是<code>druid</code>的bug，去github的issue上找了好久也没有找到类似的bug，只能再深入的挖掘系统的错误日志，最终还是找到了一些端倪。最初断开连接的时候出错日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">2020-04-09 17:32:29.321 ERROR [pms-provider-prod,cbcb523cffa38a5d,cbcb523cffa38a5d,<span class="literal">false</span>] --- [io-11022-exec-2] c.a.m.h.m.i.MyBatisMigrateChainIdKiller  : migrate.helper.MyBatisMigrateChainIdKillerError处理过程出现错误,</span><br><span class="line"></span><br><span class="line">org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: SQL Server 未返回响应。连接已关闭。</span><br><span class="line">at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81)</span><br><span class="line">at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:82)</span><br><span class="line">at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:68)</span><br><span class="line">at com.atour.migrate.helper.mybatis.interceptor.MyBatisMigrateChainIdKiller.checkDsIgnoreTableStatus(MyBatisMigrateChainIdKiller.java:181)</span><br><span class="line">...</span><br><span class="line">Caused by: com.microsoft.sqlserver.jdbc.SQLServerException: SQL Server 未返回响应。连接已关闭。</span><br><span class="line">at com.microsoft.sqlserver.jdbc.SQLServerConnection.terminate(SQLServerConnection.java:1667)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.SQLServerConnection.terminate(SQLServerConnection.java:1654)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.TDSReader.readPacket(IOBuffer.java:4844)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.TDSCommand.startResponse(IOBuffer.java:6154)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.TDSCommand.startResponse(IOBuffer.java:6106)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.SQLServerConnection<span class="variable">$1ConnectionCommand</span>.doExecute(SQLServerConnection.java:1756)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:5696)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:1715)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.SQLServerConnection.connectionCommand(SQLServerConnection.java:1761)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.SQLServerConnection.setCatalog(SQLServerConnection.java:2063)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:750)</span><br><span class="line">at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">at com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl.setCatalog(ConnectionProxyImpl.java:437)</span><br><span class="line">at com.alibaba.druid.pool.DruidPooledConnection.setCatalog(DruidPooledConnection.java:910)</span><br><span class="line">at com.atour.db.DynamicDataSource.getConnection(DynamicDataSource.java:143)</span><br><span class="line">at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:151)</span><br><span class="line">at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:115)</span><br><span class="line">at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:78)</span><br><span class="line">... 131 common frames omitted</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2020-04-09 17:32:43.701 ERROR [pms-provider-prod,,,] --- [reate-219971169] com.alibaba.druid.pool.DruidDataSource   : create connection SQLException, url: jdbc:sqlserver://xxx:3433;DatabaseName=xx, errorCode 0, state 08S01</span><br><span class="line"></span><br><span class="line">com.microsoft.sqlserver.jdbc.SQLServerException: 通过端口 1433 连接到主机 R8IC10364 的 TCP/IP 连接失败。错误:“null。请验证连接属性。确保 SQL Server 的实例正在主机上运行，且在此端口接受 TCP/IP 连接，还要确保防火墙没有阻止到此端口的 TCP 连接。”。</span><br><span class="line">at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDriverError(SQLServerException.java:190)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.SQLServerException.ConvertConnectExceptionToSQLServerException(SQLServerException.java:241)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.SocketFinder.findSocket(IOBuffer.java:2243)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.TDSChannel.open(IOBuffer.java:491)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.SQLServerConnection.connectHelper(SQLServerConnection.java:1309)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2020-04-09 17:33:09.338 ERROR [pms-provider-prod,69497e80a3d973de,69497e80a3d973de,<span class="literal">false</span>] --- [io-11022-exec-9] c.a.m.h.m.i.MyBatisMigrateChainIdKiller  : migrate.helper.MyBatisMigrateChainIdKillerError处理过程出现错误,</span><br><span class="line"></span><br><span class="line">org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: Database <span class="string">'xxx'</span> cannot be opened. It is <span class="keyword">in</span> the middle of a restore.</span><br><span class="line">at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81)</span><br><span class="line">at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:82)</span><br><span class="line">...</span><br><span class="line">Caused by: com.microsoft.sqlserver.jdbc.SQLServerException: Database <span class="string">'xxxx'</span> cannot be opened. It is <span class="keyword">in</span> the middle of a restore.</span><br><span class="line">at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:216)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.TDSTokenHandler.onEOF(tdsparser.java:254)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.TDSParser.parse(tdsparser.java:84)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.TDSParser.parse(tdsparser.java:39)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.SQLServerConnection<span class="variable">$1ConnectionCommand</span>.doExecute(SQLServerConnection.java:1756)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:5696)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:1715)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.SQLServerConnection.connectionCommand(SQLServerConnection.java:1761)</span><br><span class="line">at com.microsoft.sqlserver.jdbc.SQLServerConnection.setCatalog(SQLServerConnection.java:2063)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:750)</span><br><span class="line">at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">at com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl.setCatalog(ConnectionProxyImpl.java:437)</span><br><span class="line">at com.alibaba.druid.pool.DruidPooledConnection.setCatalog(DruidPooledConnection.java:910)</span><br><span class="line">at com.atour.db.DynamicDataSource.getConnection(DynamicDataSource.java:143)</span><br><span class="line">at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:151)</span><br><span class="line">at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:115)</span><br><span class="line">at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:78)</span><br><span class="line">  ... 131 common frames omitted</span><br></pre></td></tr></table></figure><p>异常栈中关键的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">Connection connection = <span class="keyword">this</span>.determineTargetDataSource().getConnection();</span><br><span class="line"><span class="keyword">if</span>(dynamicInstance) &#123;</span><br><span class="line"><span class="comment">/**数据源创建到实例维度，获取连接之前设置数据库名*/</span></span><br><span class="line">    <span class="comment">// 这里setCatalog抛出了异常</span></span><br><span class="line">connection.setCatalog(databaseNameMap.get(DynamicDataSourceHolder.getDataSouce()));</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> connection;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先druid的配置没有设置<code>testOnBorrow</code>，拿到连接之后没有校验连接的有效性；</p><p>其次，由于分库太多（实例没有那么多），公司开发了中间件，动态切换数据库（就是上面的代码，一个druid实例默认就有一个Create线程和Destroy线程，有上百分库的时候，开销就相当大）。</p><p><strong>连接池的变化</strong></p><p>数据库刚开始断开的时候，业务线程拿到连接之后，执行<code>setCatalog</code>操作，此时会失败，然后没有catch关闭对应的数据库连接，就会占用druid的一个active count；</p><p>中间有创建连接Druid-ConnectionPool-C<code>reate-219971169</code>， 尝试创建，然后失败了。</p><p>后续数据库应该可以连上了，但是切换分库会有问题，也会占用druid的一个active count；</p><p>最终active count 会被占满，然后就无法创建连接，业务线程和连接创建线程都会一直等待。</p><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><ul><li><p>必须设置获取连接的等待时间（maxWait) 和最大等待线程个数（maxWaitThreadCount）。</p></li><li><p>操作连接的时候，一定要在异常的情况下关闭连接，不要造成连接的泄露</p></li><li>可以设置druid的<ul><li><code>removeAbandoned</code> （是否强制关闭连接时长大于removeAbandonedTimeoutMillis的连接）</li><li><code>removeAbandonedTimeoutMillis</code> （一个连接从被连接到被关闭之间的最大生命周期）</li><li><code>logAbandoned</code> （强制关闭连接时是否记录日志）</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h2&gt;&lt;p&gt;当时数据库需要升级配置，已知中间会有闪断，按照之前的经验都是自动重连然后恢复。但是，这次tomcat的连接线程全部变成busy，导致应用不能
      
    
    </summary>
    
      <category term="druid" scheme="http://qsli.github.io/categories/druid/"/>
    
    
      <category term="druid" scheme="http://qsli.github.io/tags/druid/"/>
    
  </entry>
  
  <entry>
    <title>mediawiki-plantuml</title>
    <link href="http://qsli.github.io/2020/03/23/mediawiki-plantuml/"/>
    <id>http://qsli.github.io/2020/03/23/mediawiki-plantuml/</id>
    <published>2020-03-22T18:12:14.000Z</published>
    <updated>2020-03-22T18:12:14.564Z</updated>
    
    <content type="html"><![CDATA[<p>mediawiki的plantuml插件，在渲染中文的时候，发现文字丢了。</p><img src="/2020/03/23/mediawiki-plantuml/WeChatWorkScreenshot_0e466b8c-c8f5-48c4-bcab-45db7ddbf597.png"><p>方框里中文的说明都没有了，最后发现是缺少字体，这里mark下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install cjkuni-uming-fonts</span><br></pre></td></tr></table></figure><p>安装完字体就好了:</p><img src="/2020/03/23/mediawiki-plantuml/uml-13d5bec9d5aa4740c2198be487d50707-b9db094fe17005d80a48cfc93309f835.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;mediawiki的plantuml插件，在渲染中文的时候，发现文字丢了。&lt;/p&gt;
&lt;img src=&quot;/2020/03/23/mediawiki-plantuml/WeChatWorkScreenshot_0e466b8c-c8f5-48c4-bcab-45db7ddbf
      
    
    </summary>
    
      <category term="mediawiki" scheme="http://qsli.github.io/categories/mediawiki/"/>
    
    
      <category term="plantuml" scheme="http://qsli.github.io/tags/plantuml/"/>
    
  </entry>
  
  <entry>
    <title>cglib-tips</title>
    <link href="http://qsli.github.io/2020/03/23/cglib-tips/"/>
    <id>http://qsli.github.io/2020/03/23/cglib-tips/</id>
    <published>2020-03-22T17:56:51.000Z</published>
    <updated>2020-03-22T17:56:51.374Z</updated>
    
    <content type="html"><![CDATA[<ul><li>设置debug的环境变量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 该设置用于输出cglib动态代理产生的类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">System.setProperty(DebuggingClassWriter.DEBUG_LOCATION_PROPERTY, <span class="string">"/tmp/"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 该设置用于输出jdk动态代理产生的类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">System.getProperties().put(<span class="string">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span>, <span class="string">"true"</span>);</span><br></pre></td></tr></table></figure><img src="/2020/03/23/cglib-tips/image-20200322181246078.png"><ul><li>或者使用 HSDB（Hotspot的debug工具）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo java -classpath <span class="string">"/Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home/lib/sa-jdi.jar"</span>  sun.jvm.hotspot.HSDB</span><br></pre></td></tr></table></figure><p>attach到指定的进程之后，选择class browser，就可以找到动态生成的类</p><img src="/2020/03/23/cglib-tips/image-20200322181636481.png"><p>点进去</p><img src="/2020/03/23/cglib-tips/image-20200322181729901.png"><p>会在当前目录生成对应的class文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  /tmp  tree</span><br><span class="line">.</span><br><span class="line">├── com</span><br><span class="line">│   └── air</span><br><span class="line">│       └── mvc</span><br><span class="line">│           └── SampleController$<span class="variable">$EnhancerBySpringCGLIB</span>$<span class="variable">$d680c039</span>.class</span><br></pre></td></tr></table></figure><p>对应的class文件就创建了，可以拖到idea或者其他的工具中查看，也可以查看类的继承关系</p><img src="/2020/03/23/cglib-tips/image-20200322181908616.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;设置debug的环境变量&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
      <category term="spring" scheme="http://qsli.github.io/categories/spring/"/>
    
    
      <category term="cglib" scheme="http://qsli.github.io/tags/cglib/"/>
    
  </entry>
  
</feed>
