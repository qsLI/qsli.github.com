<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KL&#39;s blog</title>
  
  <subtitle>世事洞明皆学问，人情练达即文章</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://qsli.github.io/"/>
  <updated>2022-10-05T16:25:21.742Z</updated>
  <id>http://qsli.github.io/</id>
  
  <author>
    <name>Kevin Leo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>tomcat的线程池为什么不回落？</title>
    <link href="http://qsli.github.io/2022/10/06/tomcat-threadpool-timeout/"/>
    <id>http://qsli.github.io/2022/10/06/tomcat-threadpool-timeout/</id>
    <published>2022-10-05T16:25:21.000Z</published>
    <updated>2022-10-05T16:25:21.742Z</updated>
    
    <content type="html"><![CDATA[<h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><p>从监控上看，tomcat的线程busy的非常少，线程池使用率很低，但是线程池里的线程的个数却很多。</p><p>难道tomcat的线程池没有回落机制吗？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[arthas@22]$ mbean | grep -i thread</span><br><span class="line">Catalina:<span class="built_in">type</span>=ThreadPool,name=<span class="string">"http-nio-22441"</span></span><br><span class="line">java.lang:<span class="built_in">type</span>=Threading</span><br><span class="line">Catalina:<span class="built_in">type</span>=ThreadPool,name=<span class="string">"http-nio-22441"</span>,subType=SocketProperties</span><br><span class="line">[arthas@22]$ mbean Catalina:<span class="built_in">type</span>=ThreadPool,name=*</span><br><span class="line"> OBJECT_NAME                       Catalina:<span class="built_in">type</span>=ThreadPool,name=<span class="string">"http-nio-22441"</span></span><br><span class="line">----------------------------------------------------------------------------------</span><br><span class="line"> NAME                              VALUE</span><br><span class="line">----------------------------------------------------------------------------------</span><br><span class="line"> currentThreadsBusy                2</span><br><span class="line"> sslImplementationName             null</span><br><span class="line"> paused                            <span class="literal">false</span></span><br><span class="line"> selectorTimeout                   1000</span><br><span class="line"> modelerType                       org.apache.tomcat.util.net.NioEndpoint</span><br><span class="line"> connectionCount                   46</span><br><span class="line"> acceptCount                       2000</span><br><span class="line"> threadPriority                    5</span><br><span class="line"> executorTerminationTimeoutMillis  5000</span><br><span class="line"> running                           <span class="literal">true</span></span><br><span class="line"> currentThreadCount                916</span><br><span class="line"> sSLEnabled                        <span class="literal">false</span></span><br><span class="line"> sniParseLimit                     65536</span><br><span class="line"> maxThreads                        2000</span><br><span class="line"> sslImplementation                 null</span><br><span class="line"> connectionTimeout                 2000</span><br><span class="line"> tcpNoDelay                        <span class="literal">true</span></span><br><span class="line"> maxConnections                    20000</span><br><span class="line"> connectionLinger                  -1</span><br><span class="line"> keepAliveCount                    1</span><br><span class="line"> keepAliveTimeout                  5000</span><br><span class="line"> maxKeepAliveRequests              2000</span><br><span class="line"> localPort                         22441</span><br><span class="line"> deferAccept                       <span class="literal">false</span></span><br><span class="line"> useSendfile                       <span class="literal">true</span></span><br><span class="line"> acceptorThreadCount               1</span><br><span class="line"> pollerThreadCount                 2</span><br><span class="line"> daemon                            <span class="literal">true</span></span><br><span class="line"> minSpareThreads                   25</span><br><span class="line"> useInheritedChannel               <span class="literal">false</span></span><br><span class="line"> alpnSupported                     <span class="literal">false</span></span><br><span class="line"> acceptorThreadPriority            5</span><br><span class="line"> bindOnInit                        <span class="literal">true</span></span><br><span class="line"> pollerThreadPriority              5</span><br><span class="line"> port                              22441</span><br><span class="line"> domain                            Catalina</span><br><span class="line"> name                              http-nio-22441</span><br><span class="line"> defaultSSLHostConfigName          _default_</span><br></pre></td></tr></table></figure><p>几个关键点：</p><ul><li>currentThreadsBusy                2</li><li>currentThreadCount              916</li><li>maxThreads                              2000</li><li>minSpareThreads                   25</li></ul><p>干活的线程只有2个，但是线程池里有916个线程？why？</p><p>多次观察，仍然是这个情况。</p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><h2 id="mbean数据来源"><a href="#mbean数据来源" class="headerlink" title="mbean数据来源"></a>mbean数据来源</h2><p>先搞清楚mbean的数据来源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.tomcat.util.net.AbstractEndpoint#init</span></span><br><span class="line"><span class="comment">// Register endpoint (as ThreadPool - historical name)</span></span><br><span class="line">oname = <span class="keyword">new</span> ObjectName(domain + <span class="string">":type=ThreadPool,name=\""</span> + getName() + <span class="string">"\""</span>);</span><br><span class="line">Registry.getRegistry(<span class="keyword">null</span>, <span class="keyword">null</span>).registerComponent(<span class="keyword">this</span>, oname, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><ul><li><p>currentThreadBusy——当前有任务的线程个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.tomcat.util.net.AbstractEndpoint#getCurrentThreadsBusy</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCurrentThreadsBusy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Executor executor = <span class="keyword">this</span>.executor;</span><br><span class="line">  <span class="keyword">if</span> (executor != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (executor <span class="keyword">instanceof</span> ThreadPoolExecutor) &#123;</span><br><span class="line">      <span class="keyword">return</span> ((ThreadPoolExecutor) executor).getActiveCount();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (executor <span class="keyword">instanceof</span> ResizableExecutor) &#123;</span><br><span class="line">      <span class="keyword">return</span> ((ResizableExecutor) executor).getActiveCount();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>currentThreadCount——线程池中，当前线程个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.tomcat.util.net.AbstractEndpoint#getCurrentThreadCount</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCurrentThreadCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Executor executor = <span class="keyword">this</span>.executor;</span><br><span class="line">  <span class="keyword">if</span> (executor != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (executor <span class="keyword">instanceof</span> ThreadPoolExecutor) &#123;</span><br><span class="line">      <span class="keyword">return</span> ((ThreadPoolExecutor) executor).getPoolSize();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (executor <span class="keyword">instanceof</span> ResizableExecutor) &#123;</span><br><span class="line">      <span class="keyword">return</span> ((ResizableExecutor) executor).getPoolSize();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>maxThreads——最大线程数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.tomcat.util.net.AbstractEndpoint#getMaxThreads</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMaxThreads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (internalExecutor) &#123;</span><br><span class="line">    <span class="keyword">return</span> maxThreads;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>minSpareThreads——核心线程数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.tomcat.util.net.AbstractEndpoint#getMinSpareThreads</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMinSpareThreads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Math.min(getMinSpareThreadsInternal(), getMaxThreads());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getMinSpareThreadsInternal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (internalExecutor) &#123;</span><br><span class="line">    <span class="keyword">return</span> minSpareThreads;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>默认线程池初始化逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.tomcat.util.net.AbstractEndpoint#createExecutor</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 使用内部线程池</span></span><br><span class="line">  internalExecutor = <span class="keyword">true</span>;</span><br><span class="line">  TaskQueue taskqueue = <span class="keyword">new</span> TaskQueue();</span><br><span class="line">  TaskThreadFactory tf = <span class="keyword">new</span> TaskThreadFactory(getName() + <span class="string">"-exec-"</span>, daemon, getThreadPriority());</span><br><span class="line">  <span class="comment">// 注意，这个ThreadPoolExecutor是tomcat自己魔改过的</span></span><br><span class="line">  executor = <span class="keyword">new</span> ThreadPoolExecutor(getMinSpareThreads(), getMaxThreads(), <span class="number">60</span>, TimeUnit.SECONDS,taskqueue, tf);</span><br><span class="line">  taskqueue.setParent( (ThreadPoolExecutor) executor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到线程池的初始化，就会发现miniSpareThreads其实就是corePoolSize! 而且有一个写死的<strong>keepAliveTime 60s。</strong>而且任务队列是个无界的队列。</p><h2 id="线程池的keepAliveTime"><a href="#线程池的keepAliveTime" class="headerlink" title="线程池的keepAliveTime"></a>线程池的keepAliveTime</h2><p>先看JDK中的注释：</p><blockquote><p>@param keepAliveTime when the number of threads is greater than<br>  the core, this is the maximum time that excess idle threads<br>    will wait for new tasks before terminating.</p></blockquote><p>简单来说，就是超过核心数的线程，如果等待keepAliveTime，还没有接到任务，就会被终止掉。</p><p>看一眼实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.ThreadPoolExecutor#runWorker</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// 注意，没有获取到task，这里循环也就结束了，走到线程退出的逻辑</span></span><br><span class="line">  <span class="keyword">while</span> (task != <span class="keyword">null</span> || (task = getTask()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line">    task.run();</span><br><span class="line">  &#125;</span><br><span class="line">  completedAbruptly = <span class="keyword">false</span>;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="comment">// 线程退出的一些清理工作</span></span><br><span class="line">  processWorkerExit(w, completedAbruptly);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取task的逻辑</span></span><br><span class="line"><span class="comment">// java.util.concurrent.ThreadPoolExecutor#getTask</span></span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    <span class="comment">// Are workers subject to culling?</span></span><br><span class="line">    <span class="keyword">boolean</span> timed = allowCoreThreadTimeOut || wc &gt; corePoolSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果允许timeout，而且timeout发生了，这里直接返回null，循环结束，线程的任务就结束了（退出）</span></span><br><span class="line">    <span class="keyword">if</span> ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut))</span><br><span class="line">        &amp;&amp; (wc &gt; <span class="number">1</span> || workQueue.isEmpty())) &#123;</span><br><span class="line">      <span class="keyword">if</span> (compareAndDecrementWorkerCount(c))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 允许timeout（核心线程，或者worker count &gt; 核心个数），则使用poll，而且timeout是keepAliveTime</span></span><br><span class="line">      <span class="comment">// 否则，走的是阻塞版本的take</span></span><br><span class="line">      Runnable r = timed ?</span><br><span class="line">        workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :</span><br><span class="line">      workQueue.take();</span><br><span class="line">      <span class="comment">// poll到task，或者take到，可以直接返回</span></span><br><span class="line">      <span class="keyword">if</span> (r != <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">      <span class="comment">// 走到这里肯定是poll超时了</span></span><br><span class="line">      timedOut = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException retry) &#123;</span><br><span class="line">      timedOut = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从源码上看，这个keepAliveTime并没有什么问题。</p><h2 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h2><img src="/2022/10/06/tomcat-threadpool-timeout/image-20221005165254624.png"><p>有没有一种可能，task queue的poll是雨露均撒的？</p><blockquote><p>When you have eliminated the impossible, whatever remains, however improbable, must be the truth.</p></blockquote><p>tomcat使用的TaskQueue作为队列，继承自LinkedBlockingQueue。但是核心的poll逻辑，还是用的LinkedBlockingQueue:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.tomcat.util.threads.TaskQueue#poll</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Runnable <span class="title">poll</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">  Runnable runnable = <span class="keyword">super</span>.poll(timeout, unit);</span><br><span class="line">  <span class="keyword">if</span> (runnable == <span class="keyword">null</span> &amp;&amp; parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// the poll timed out, it gives an opportunity to stop the current</span></span><br><span class="line">    <span class="comment">// thread if needed to avoid memory leaks.</span></span><br><span class="line">    parent.stopCurrentThreadIfNeeded();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> runnable;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//java.util.concurrent.LinkedBlockingQueue#poll(long, java.util.concurrent.TimeUnit)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">poll</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">  E x = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">int</span> c = -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">long</span> nanos = unit.toNanos(timeout);</span><br><span class="line">  <span class="keyword">final</span> AtomicInteger count = <span class="keyword">this</span>.count;</span><br><span class="line">  <span class="keyword">final</span> ReentrantLock takeLock = <span class="keyword">this</span>.takeLock;</span><br><span class="line">  <span class="comment">// 锁范围开始</span></span><br><span class="line">  takeLock.lockInterruptibly();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (count.get() == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 超时时间为0（没有设置超时，或者超时时间到了），则没有就直接返回</span></span><br><span class="line">      <span class="keyword">if</span> (nanos &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      <span class="comment">// 否则，放入ReentrantLock的条件队列，等待timeout时间</span></span><br><span class="line">      nanos = notEmpty.awaitNanos(nanos);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 此时count &gt; 0，取出一个</span></span><br><span class="line">    x = dequeue();</span><br><span class="line">    <span class="comment">// 减少计数</span></span><br><span class="line">    c = count.getAndDecrement();</span><br><span class="line">    <span class="comment">// 如果还有，则通知条件队列里等待的线程</span></span><br><span class="line">    <span class="keyword">if</span> (c &gt; <span class="number">1</span>)</span><br><span class="line">      notEmpty.signal();</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 锁范围结束</span></span><br><span class="line">    takeLock.unlock();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 因为poll走了一个，现在容量是capacity - 1，所以signalNotFull</span></span><br><span class="line">  <span class="keyword">if</span> (c == capacity)</span><br><span class="line">    signalNotFull();</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心就在takeLock和notEmpty上，takeLock是ReentrantLock默认非公平，notEmpty是takeLock的条件队列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.LinkedBlockingQueue</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Lock held by take, poll, etc */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock takeLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Wait queue for waiting takes */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Condition notEmpty = takeLock.newCondition();</span><br></pre></td></tr></table></figure><p>ReentrantLock默认非公平的，底层基于AQS实现。公平和非公平的区别只是在<strong>首次抢锁的行为</strong>上，首次如果没有抢到，都是排队，然后按顺序解锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.locks.ReentrantLock.Sync#nonfairTryAcquire</span></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Performs non-fair tryLock.  tryAcquire is implemented in</span></span><br><span class="line"><span class="comment">   * subclasses, but both need nonfair try for trylock method.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="meta">@ReservedStackAccess</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">nonfairTryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">  <span class="keyword">int</span> c = getState();</span><br><span class="line">  <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 因为是非公平，这里直接抢一次</span></span><br><span class="line">    <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">      setExclusiveOwnerThread(current);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果没有抢到，看看是不是自己已经获取（可重入）</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">    <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">    <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">    setState(nextc);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 最终抢失败，返回false</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>qps比较低的场景下，锁的竞争并不激烈，大部分线程即使抢到了锁，也拿不到任务，只能在条件队列中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.locks.AbstractQueuedLongSynchronizer.ConditionObject#signal</span></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Moves the longest-waiting thread, if one exists, from the</span></span><br><span class="line"><span class="comment">         * wait queue for this condition to the wait queue for the</span></span><br><span class="line"><span class="comment">         * owning lock.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> IllegalMonitorStateException if &#123;<span class="doctag">@link</span> #isHeldExclusively&#125;</span></span><br><span class="line"><span class="comment">         *         returns &#123;<span class="doctag">@code</span> false&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">signal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!isHeldExclusively())</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">  Node first = firstWaiter;</span><br><span class="line">  <span class="keyword">if</span> (first != <span class="keyword">null</span>)</span><br><span class="line">    doSignal(first);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>条件队列里是按排队的顺序（longest-waiting thread）去通知的，将条件队列里的wait node转移到锁的等待队列中，重新竞争锁。</p><p>此时竞争的对象很少，基本就是busy的线程+被notify唤醒的线程，因此大概率还是能抢到任务的。</p><img src="/2022/10/06/tomcat-threadpool-timeout/image-20221005180143867.png"><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><p>问题的根源在于如果task很少，大家会在notEmpty的Condition队列中排队；task来的时候，又是按顺序解锁，如果qps和keepAliveTime合适，在keepAliveTime时间内，每个worker线程都能有机会至少活得一个task，从而不会被回收掉。</p><h2 id="顺序排队"><a href="#顺序排队" class="headerlink" title="顺序排队"></a>顺序排队</h2><p>maxThreads设置为10，打印每次处理的线程的名称，测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">  LOGGER.error(<span class="string">"thread is "</span> + Thread.currentThread().getName());</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Thread.sleep(<span class="number">1_000</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125;</span><br><span class="line">  resp.getWriter().write(<span class="string">"Hello World! "</span> + Thread.currentThread().getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>串行curl 7次：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 1 10`; <span class="keyword">do</span> curl <span class="string">"http://localhost:8087/web_war_exploded/hello"</span> &amp;&amp; <span class="built_in">echo</span> -e <span class="string">'\n'</span>; <span class="keyword">done</span>;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">➜  conf  <span class="keyword">for</span> i <span class="keyword">in</span> `seq 1 10`; <span class="keyword">do</span> curl <span class="string">"http://localhost:8087/web_war_exploded/hello"</span> &amp;&amp; <span class="built_in">echo</span> -e <span class="string">'\n'</span>; <span class="keyword">done</span>;</span><br><span class="line">Hello World! http-nio-8087-exec-8</span><br><span class="line"></span><br><span class="line">Hello World! http-nio-8087-exec-9</span><br><span class="line"></span><br><span class="line">Hello World! http-nio-8087-exec-1</span><br><span class="line"></span><br><span class="line">Hello World! http-nio-8087-exec-2</span><br><span class="line"></span><br><span class="line">Hello World! http-nio-8087-exec-3</span><br><span class="line"></span><br><span class="line">Hello World! http-nio-8087-exec-4</span><br><span class="line"></span><br><span class="line">Hello World! http-nio-8087-exec-5</span><br><span class="line"></span><br><span class="line">Hello World! http-nio-8087-exec-7</span><br><span class="line"></span><br><span class="line">Hello World! http-nio-8087-exec-9</span><br><span class="line"></span><br><span class="line">Hello World! http-nio-8087-exec-10</span><br></pre></td></tr></table></figure><p>确实是类似round robin的形式来的</p><h2 id="线程回落"><a href="#线程回落" class="headerlink" title="线程回落"></a>线程回落</h2><p>tomcat默认的线程池，keepAliveTime是60s，修改maxThreads为10，minSpareThreads为3。</p><p>启动之后，mbean输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[arthas@98537]$ mbean Catalina:type=ThreadPool,name=*</span><br><span class="line"> OBJECT_NAME                       Catalina:type=ThreadPool,name=&quot;http-nio-8087&quot;</span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> NAME                              VALUE</span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> currentThreadsBusy                0</span><br><span class="line"> running                           true</span><br><span class="line"> currentThreadCount                3</span><br><span class="line"> maxThreads                        10</span><br><span class="line"> minSpareThreads                   3</span><br></pre></td></tr></table></figure><p>跟设置一致，先来波高峰请求，创建出来10个worker（maxThreads）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 1 10`; <span class="keyword">do</span> curl -s <span class="string">"http://localhost:8087/web_war_exploded/hello"</span> &amp; <span class="keyword">done</span>;</span><br></pre></td></tr></table></figure><p>此时mbean输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[arthas@98537]$ mbean Catalina:<span class="built_in">type</span>=ThreadPool,name=*</span><br><span class="line"> OBJECT_NAME                       Catalina:<span class="built_in">type</span>=ThreadPool,name=<span class="string">"http-nio-8087"</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> NAME                              VALUE</span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> currentThreadsBusy                0</span><br><span class="line"> running                           <span class="literal">true</span></span><br><span class="line"> currentThreadCount                10</span><br><span class="line"> maxThreads                        10</span><br><span class="line"> minSpareThreads                   3</span><br></pre></td></tr></table></figure><p>currentThreadCount有10个了，等1min，然后再看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[arthas@98537]$ mbean Catalina:<span class="built_in">type</span>=ThreadPool,name=*</span><br><span class="line"> OBJECT_NAME                       Catalina:<span class="built_in">type</span>=ThreadPool,name=<span class="string">"http-nio-8087"</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> NAME                              VALUE</span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> currentThreadsBusy                0</span><br><span class="line"> running                           <span class="literal">true</span></span><br><span class="line"> currentThreadCount                3</span><br><span class="line"> maxThreads                        10</span><br><span class="line"> minSpareThreads                   3</span><br></pre></td></tr></table></figure><p>currentThreadCount已经回落到了3个（minSpareThreads）</p><h2 id="线程不回落"><a href="#线程不回落" class="headerlink" title="线程不回落"></a>线程不回落</h2><p>线程不回落，只用保证每个线程1min内有一个task就行了。maxThreads是10，也就是10 qpm就行了。</p><p>先冲高</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 1 10`; <span class="keyword">do</span> curl -s <span class="string">"http://localhost:8087/web_war_exploded/hello"</span> &amp; <span class="keyword">done</span>;</span><br></pre></td></tr></table></figure><p>再维持10 qpm</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 1 100000`; <span class="keyword">do</span> curl -s <span class="string">"http://localhost:8087/web_war_exploded/hello"</span> &amp;&amp; <span class="built_in">echo</span> <span class="string">"-n"</span> &amp;&amp; sleep 5; <span class="keyword">done</span>;</span><br></pre></td></tr></table></figure><p>代码里sleep了1s，加上curl的sleep 5s，一个请求6s，一分钟10个请求。此时再看mbean输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[arthas@98537]$ mbean Catalina:<span class="built_in">type</span>=ThreadPool,name=*</span><br><span class="line"> OBJECT_NAME                       Catalina:<span class="built_in">type</span>=ThreadPool,name=<span class="string">"http-nio-8087"</span></span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> NAME                              VALUE</span><br><span class="line">--------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line"> currentThreadsBusy                0</span><br><span class="line"> running                           <span class="literal">true</span></span><br><span class="line"> currentThreadCount                10</span><br><span class="line"> maxThreads                        10</span><br><span class="line"> minSpareThreads                   3</span><br></pre></td></tr></table></figure><p>一直是10，跟线上的现象一样，复现了线程不回落的情形。</p><p>修改sleep的时间，降低qpm，看看是否有部分回落：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 1 100000`; <span class="keyword">do</span> curl -s <span class="string">"http://localhost:8087/web_war_exploded/hello"</span> &amp;&amp; <span class="built_in">echo</span> <span class="string">"-n"</span> &amp;&amp; sleep 7; <span class="keyword">done</span>;</span><br></pre></td></tr></table></figure><p>逐渐回落至8个线程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[arthas@98537]$ mbean Catalina:<span class="built_in">type</span>=ThreadPool,name=* | grep -i currentThreadCount</span><br><span class="line"> currentThreadCount                8</span><br></pre></td></tr></table></figure><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>QPS的临界值是maxThreads / keepAliveTime，考虑上请求的处理时间，实际值可能稍微大一点。大于临界值则不会发生线程的回落，小于临界值会逐渐回落。</p><ul><li>调整keepAliveTime</li></ul><p>Tomcat使用默认的线程池，keepAliveTime是无法调整的，但是可以使用自定义的线程池，可以设置maxIdleTime（即keepAliveTime）。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--The connectors can use a shared executor, you can define one or more named thread pools--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Executor</span> <span class="attr">name</span>=<span class="string">"tomcatThreadPool"</span> <span class="attr">namePrefix</span>=<span class="string">"catalina-exec-"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">maxThreads</span>=<span class="string">"10"</span> <span class="attr">minSpareThreads</span>=<span class="string">"3"</span> <span class="attr">maxIdleTime</span>=<span class="string">"10000"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">executor</span>=<span class="string">"tomcatThreadPool"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>调整为10s之后，维持10qpm，很快就回落了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[arthas@54257]$ mbean Catalina:<span class="built_in">type</span>=ThreadPool,name=* | grep -i currentThreadCount</span><br><span class="line"> currentThreadCount                3</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>tomcat的线程池使用TaskQueue控制请求的分发，poll的逻辑和父类LinkedBlockingQueue一致</li><li>LinkedBlockingQueue内部，如果没有task时，poll的<strong>线程</strong>都会在notEmpty的ReentrantLock的Condition队列中，<strong>按序排队</strong></li><li>任务来时，signal操作是按队列里的顺序唤醒的，<strong>先入先出</strong></li><li><strong>qps &gt; maxThreads / keepAliveTime</strong>，可以保证在keepAliveTime，每个线程都有机会获得task，从而避免被回收</li><li>tomcat默认的线程池，不支持设置keepAliveTime，可以使用<strong>自定义的线程池</strong>解决</li><li>JDK的线程池同样有这个问题，需要注意keepAliveTime的设置</li><li>频繁的线程切换，会导致频繁的<strong>上下文切换</strong>，对性能应该也有影响</li><li>对于线上的服务，一般会有<strong>探活机制</strong>，也是线程不回落的原因之一</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.bbsmax.com/A/kmzLY8vWJG/" rel="external nofollow noopener noreferrer" target="_blank">Tomcat线程池，更符合大家想象的可扩展线程池</a></li><li><a href="https://www.cnblogs.com/thisiswhy/p/12782548.html" rel="external nofollow noopener noreferrer" target="_blank">每天都在用，但你知道 Tomcat 的线程池有多努力吗？ - why技术 - 博客园</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h1&gt;&lt;p&gt;从监控上看，tomcat的线程busy的非常少，线程池使用率很低，但是线程池里的线程的个数却很多。&lt;/p&gt;
&lt;p&gt;难道tomcat的线程池没
      
    
    </summary>
    
      <category term="tomcat" scheme="http://qsli.github.io/categories/tomcat/"/>
    
    
      <category term="threadpool" scheme="http://qsli.github.io/tags/threadpool/"/>
    
  </entry>
  
  <entry>
    <title>tomcat队列满了之后会发生什么？</title>
    <link href="http://qsli.github.io/2022/10/05/tomcat-when-queue-is-full/"/>
    <id>http://qsli.github.io/2022/10/05/tomcat-when-queue-is-full/</id>
    <published>2022-10-05T08:08:22.000Z</published>
    <updated>2022-10-05T08:08:22.460Z</updated>
    
    <content type="html"><![CDATA[<p>tomcat线程池满了之后，请求会堆积在队列里。队列满了之后会发生什么？</p><h1 id="队列长度"><a href="#队列长度" class="headerlink" title="队列长度"></a>队列长度</h1><p>首先需要看下队列长度，使用tomcat默认的线程池，采用的是无界队列：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.tomcat.util.net.AbstractEndpoint#createExecutor</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  internalExecutor = <span class="keyword">true</span>;</span><br><span class="line">  <span class="comment">// 默认是无界的</span></span><br><span class="line">  TaskQueue taskqueue = <span class="keyword">new</span> TaskQueue();</span><br><span class="line">  TaskThreadFactory tf = <span class="keyword">new</span> TaskThreadFactory(getName() + <span class="string">"-exec-"</span>, daemon, getThreadPriority());</span><br><span class="line">  executor = <span class="keyword">new</span> ThreadPoolExecutor(getMinSpareThreads(), getMaxThreads(), <span class="number">60</span>, TimeUnit.SECONDS,taskqueue, tf);</span><br><span class="line">  taskqueue.setParent( (ThreadPoolExecutor) executor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好在可以自定义线程池：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Executor</span> <span class="attr">name</span>=<span class="string">"tomcatThreadPool"</span> <span class="attr">namePrefix</span>=<span class="string">"catalina-exec-"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">maxThreads</span>=<span class="string">"7"</span> <span class="attr">minSpareThreads</span>=<span class="string">"4"</span> <span class="attr">maxQueueSize</span>=<span class="string">"3"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- A "Connector" using the shared thread pool--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">executor</span>=<span class="string">"tomcatThreadPool"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>此处可以设置maxQueueSize，这里设置为3</p><p>启动之后，使用arthas查看mbean：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[arthas@84145]$ mbean Catalina:<span class="built_in">type</span>=Executor,name=tomcatThreadPool</span><br><span class="line"> OBJECT_NAME              Catalina:<span class="built_in">type</span>=Executor,name=tomcatThreadPool</span><br><span class="line">--------------------------------------------------------------------------</span><br><span class="line"> NAME                     VALUE</span><br><span class="line">--------------------------------------------------------------------------</span><br><span class="line"> activeCount              1</span><br><span class="line"> modelerType              org.apache.catalina.core.StandardThreadExecutor</span><br><span class="line"> queueSize                0</span><br><span class="line"> largestPoolSize          7</span><br><span class="line"> poolSize                 4</span><br><span class="line"> maxIdleTime              60000</span><br><span class="line"> threadPriority           5</span><br><span class="line"> daemon                   <span class="literal">true</span></span><br><span class="line"> minSpareThreads          4</span><br><span class="line"> maxQueueSize             3</span><br><span class="line"> stateName                STARTED</span><br><span class="line"> namePrefix               catalina-exec-</span><br><span class="line"> name                     tomcatThreadPool</span><br><span class="line"> corePoolSize             4</span><br><span class="line"> completedTaskCount       16</span><br><span class="line"> maxThreads               7</span><br><span class="line"> prestartminSpareThreads  <span class="literal">false</span></span><br><span class="line"> threadRenewalDelay       1000</span><br></pre></td></tr></table></figure><p>maxQueueSize确实是3，maxThreads是7</p><h1 id="构造队列满的场景"><a href="#构造队列满的场景" class="headerlink" title="构造队列满的场景"></a>构造队列满的场景</h1><p>servlet代码，代码里直接sleep，占住tomcat的线程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 多睡一会儿</span></span><br><span class="line">        Thread.sleep(<span class="number">1000_000</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      resp.getWriter().write(<span class="string">"Hello World!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端直接curl，20个并发请求 &gt; maxThreads + maxQueueSize = 7 + 3 = 10</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `seq 1 20`; <span class="keyword">do</span> curl -v  http://localhost:8080/web_war_exploded/hello &amp;; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>看一眼tomcat的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[arthas@84145]$ mbean Catalina:<span class="built_in">type</span>=Executor,name=tomcatThreadPool</span><br><span class="line"> OBJECT_NAME              Catalina:<span class="built_in">type</span>=Executor,name=tomcatThreadPool</span><br><span class="line">--------------------------------------------------------------------------</span><br><span class="line"> NAME                     VALUE</span><br><span class="line">--------------------------------------------------------------------------</span><br><span class="line"> activeCount              7</span><br><span class="line"> modelerType              org.apache.catalina.core.StandardThreadExecutor</span><br><span class="line"> queueSize                3</span><br><span class="line"> largestPoolSize          7</span><br><span class="line"> poolSize                 7</span><br><span class="line"> maxIdleTime              60000</span><br><span class="line"> threadPriority           5</span><br><span class="line"> daemon                   <span class="literal">true</span></span><br><span class="line"> minSpareThreads          4</span><br><span class="line"> maxQueueSize             3</span><br><span class="line"> stateName                STARTED</span><br><span class="line"> namePrefix               catalina-exec-</span><br><span class="line"> name                     tomcatThreadPool</span><br><span class="line"> corePoolSize             4</span><br><span class="line"> completedTaskCount       29</span><br><span class="line"> maxThreads               7</span><br><span class="line"> prestartminSpareThreads  <span class="literal">false</span></span><br><span class="line"> threadRenewalDelay       1000</span><br></pre></td></tr></table></figure><p>queueSize 3已经达到了maxQueueSize。</p><p>此时我们再次curl，tomcat应该就会抛出队列满的异常：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ curl  http://localhost:8080/web_war_exploded/hello  --trace-ascii -</span><br><span class="line">== Info:   Trying 127.0.0.1:8080...</span><br><span class="line">== Info: Connected to localhost (127.0.0.1) port 8080 (<span class="comment">#0)</span></span><br><span class="line">=&gt; Send header, 100 bytes (0x64)</span><br><span class="line">0000: GET /web_war_exploded/hello HTTP/1.1</span><br><span class="line">0026: Host: localhost:8080</span><br><span class="line">003c: User-Agent: curl/7.79.1</span><br><span class="line">0055: Accept: */*</span><br><span class="line">0062:</span><br><span class="line">== Info: Recv failure: Connection reset by peer</span><br><span class="line">== Info: Closing connection 0</span><br><span class="line">curl: (56) Recv failure: Connection reset by peer</span><br></pre></td></tr></table></figure><p>curl的连接直接别reset了，再看tomcat的日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java.util.concurrent.RejectedExecutionException: The executor<span class="string">'s work queue is full</span></span><br><span class="line"><span class="string">at org.apache.catalina.core.StandardThreadExecutor.execute(StandardThreadExecutor.java:179)</span></span><br><span class="line"><span class="string">at org.apache.tomcat.util.net.AbstractEndpoint.processSocket(AbstractEndpoint.java:1105)</span></span><br><span class="line"><span class="string">at org.apache.tomcat.util.net.NioEndpoint$Poller.processKey(NioEndpoint.java:896)</span></span><br><span class="line"><span class="string">at org.apache.tomcat.util.net.NioEndpoint$Poller.run(NioEndpoint.java:872)</span></span><br><span class="line"><span class="string">at java.lang.Thread.run(Thread.java:750)</span></span><br></pre></td></tr></table></figure><p>提交任务到线程池失败之后，tomcat会cancel掉这个key：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[arthas@84145]$ stack org.apache.tomcat.util.net.NioEndpoint<span class="variable">$Poller</span> cancelledKey  -n 5</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 1 , method count: 1) cost <span class="keyword">in</span> 696 ms, listenerId: 2</span><br><span class="line">ts=2022-09-30 14:04:45;thread_name=http-nio-8080-ClientPoller-0;id=1c;is_daemon=<span class="literal">true</span>;priority=5;TCCL=java.net.URLClassLoader@123772c4</span><br><span class="line">    @org.apache.tomcat.util.net.NioEndpoint<span class="variable">$Poller</span>.cancelledKey()</span><br><span class="line">        at org.apache.tomcat.util.net.NioEndpoint<span class="variable">$Poller</span>.processKey(NioEndpoint.java:906)</span><br><span class="line">        at org.apache.tomcat.util.net.NioEndpoint<span class="variable">$Poller</span>.run(NioEndpoint.java:872)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:750)</span><br><span class="line">        </span><br><span class="line">[arthas@84145]$ trace org.apache.tomcat.util.net.NioEndpoint<span class="variable">$Poller</span> cancelledKey  -n 5 --skipJDKMethod <span class="literal">false</span></span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 1 , method count: 1) cost <span class="keyword">in</span> 473 ms, listenerId: 4</span><br><span class="line">`---ts=2022-09-30 14:12:30;thread_name=http-nio-8080-ClientPoller-0;id=1c;is_daemon=<span class="literal">true</span>;priority=5;TCCL=java.net.URLClassLoader@123772c4</span><br><span class="line">    `---[0.508941ms] org.apache.tomcat.util.net.NioEndpoint<span class="variable">$Poller</span>:cancelledKey()</span><br><span class="line">        +---[3.74% 0.01904ms ] java.nio.channels.SelectionKey:attach() <span class="comment">#765</span></span><br><span class="line">        +---[1.98% 0.010098ms ] org.apache.tomcat.util.net.NioEndpoint:getHandler() <span class="comment">#769</span></span><br><span class="line">        +---[4.51% 0.022943ms ] org.apache.tomcat.util.net.AbstractEndpoint<span class="variable">$Handler</span>:release() <span class="comment">#769</span></span><br><span class="line">        +---[1.04% 0.005282ms ] java.nio.channels.SelectionKey:isValid() <span class="comment">#771</span></span><br><span class="line">        +---[2.64% 0.013427ms ] java.nio.channels.SelectionKey:cancel() <span class="comment">#771</span></span><br><span class="line">        +---[1.75% 0.008886ms ] org.apache.tomcat.util.net.NioEndpoint<span class="variable">$NioSocketWrapper</span>:getSocket() <span class="comment">#778</span></span><br><span class="line">        +---[10.72% 0.054534ms ] org.apache.tomcat.util.net.NioChannel:close() <span class="comment">#778</span></span><br><span class="line">        +---[2.54% 0.01293ms ] java.nio.channels.SelectionKey:channel() <span class="comment">#788</span></span><br><span class="line">        +---[1.82% 0.009248ms ] java.nio.channels.SelectableChannel:isOpen() <span class="comment">#788</span></span><br><span class="line">        +---[5.49% 0.027926ms ] org.apache.tomcat.util.net.NioEndpoint<span class="variable">$NioSocketWrapper</span>:getSendfileData() <span class="comment">#799</span></span><br><span class="line">        +---[7.03% 0.035797ms ] org.apache.tomcat.util.net.NioEndpoint:countDownConnection() <span class="comment">#807</span></span><br><span class="line">        `---[2.58% 0.01312ms ] org.apache.tomcat.util.net.NioEndpoint<span class="variable">$NioSocketWrapper</span>:access<span class="variable">$202</span>() <span class="comment">#808</span></span><br></pre></td></tr></table></figure><h1 id="实验结果分析"><a href="#实验结果分析" class="headerlink" title="实验结果分析"></a>实验结果分析</h1><p>tomcat，线程池满了之后，观察到的现象：</p><ul><li>新的http请求，会得到Connection reset by peer，无法正常进行</li><li>tomcat日志中会有work queue is full的异常</li></ul><h2 id="work-queue-is-full"><a href="#work-queue-is-full" class="headerlink" title="work queue is full"></a>work queue is full</h2><p>代码位置：</p><blockquote><p>Executes the given command at some time in the future.  The command may execute in a new thread, in a pooled thread, or in the calling thread, at the discretion of the <code>Executor</code> implementation.<br>If no threads are available, it will be added to the work queue.<br>If the <strong>work queue is full</strong>, the system will <strong>wait</strong> for the specified time and it throw a <strong>RejectedExecutionException</strong> if the queue is <strong>still</strong> <strong>full after that</strong>.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.tomcat.util.threads.ThreadPoolExecutor#execute(java.lang.Runnable, long, java.util.concurrent.TimeUnit)</span></span><br><span class="line"><span class="comment">// @deprecated This will be removed in Tomcat 10.1.x onwards</span></span><br><span class="line"> <span class="meta">@Deprecated</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command, <span class="keyword">long</span> timeout, TimeUnit unit)</span> </span>&#123;</span><br><span class="line">  submittedCount.incrementAndGet();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    executeInternal(command);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (RejectedExecutionException rx) &#123;</span><br><span class="line">    <span class="keyword">if</span> (getQueue() <span class="keyword">instanceof</span> TaskQueue) &#123;</span><br><span class="line">      <span class="comment">// If the Executor is close to maximum pool size, concurrent</span></span><br><span class="line">      <span class="comment">// calls to execute() may result (due to Tomcat's use of</span></span><br><span class="line">      <span class="comment">// TaskQueue) in some tasks being rejected rather than queued.</span></span><br><span class="line">      <span class="comment">// If this happens, add them to the queue.</span></span><br><span class="line">      <span class="keyword">final</span> TaskQueue queue = (TaskQueue) getQueue();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 如果是TaskQueue，这里还会等一会儿，如果还是失败，再抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (!queue.force(command, timeout, unit)) &#123;</span><br><span class="line">          submittedCount.decrementAndGet();</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> RejectedExecutionException(sm.getString(<span class="string">"threadPoolExecutor.queueFull"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException x) &#123;</span><br><span class="line">        submittedCount.decrementAndGet();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RejectedExecutionException(x);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      submittedCount.decrementAndGet();</span><br><span class="line">      <span class="keyword">throw</span> rx;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用arthas验证下，是否走到force：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[arthas@84145]$ stack org.apache.tomcat.util.threads.TaskQueue force  -n 5</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 1 , method count: 2) cost <span class="keyword">in</span> 82 ms, listenerId: 7</span><br><span class="line">ts=2022-09-30 14:52:32;thread_name=http-nio-8080-ClientPoller-1;id=1d;is_daemon=<span class="literal">true</span>;priority=5;TCCL=java.net.URLClassLoader@123772c4</span><br><span class="line">    @org.apache.tomcat.util.threads.TaskQueue.force()</span><br><span class="line">        at org.apache.tomcat.util.threads.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:178)</span><br><span class="line">        at org.apache.tomcat.util.threads.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:151)</span><br><span class="line">        at org.apache.catalina.core.StandardThreadExecutor.execute(StandardThreadExecutor.java:175)</span><br><span class="line">        at org.apache.tomcat.util.net.AbstractEndpoint.processSocket(AbstractEndpoint.java:1105)</span><br><span class="line">        at org.apache.tomcat.util.net.NioEndpoint<span class="variable">$Poller</span>.processKey(NioEndpoint.java:896)</span><br><span class="line">        at org.apache.tomcat.util.net.NioEndpoint<span class="variable">$Poller</span>.run(NioEndpoint.java:872)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:750)</span><br><span class="line">        </span><br><span class="line">[arthas@84145]$ watch org.apache.tomcat.util.threads.TaskQueue force <span class="string">'params'</span>  -n 5  -x 1</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 1 , method count: 2) cost <span class="keyword">in</span> 45 ms, listenerId: 10</span><br><span class="line">method=org.apache.tomcat.util.threads.TaskQueue.force location=AtExit</span><br><span class="line">ts=2022-09-30 14:55:19; [cost=0.648436ms] result=@Object[][</span><br><span class="line">    @SocketProcessor[org.apache.tomcat.util.net.NioEndpoint<span class="variable">$SocketProcessor</span>@5af3cff6],</span><br><span class="line">    @Long[0],</span><br><span class="line">    @[MILLISECONDS],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>确实走到了force的逻辑，但是默认的timeout是0，0代表不等待。只是相当于多了一次尝试。</p><p>而且这个超时是无法配置的，对于http请求来说，功能相当于是废掉的。</p><p>AbstractEndpoint  -&gt; StandardThreadExecutor -&gt; org.apache.tomcat.util.threads.ThreadPoolExecutor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.tomcat.util.net.AbstractEndpoint#processSocket</span></span><br><span class="line"><span class="comment">// 这里用的Executor的接口来接的，没有传超时的地方，这里返回的就是StandardThreadExecutor</span></span><br><span class="line">Executor executor = getExecutor();</span><br><span class="line"><span class="keyword">if</span> (dispatch &amp;&amp; executor != <span class="keyword">null</span>) &#123;</span><br><span class="line">  <span class="comment">// 没地方传超时</span></span><br><span class="line">  executor.execute(sc);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  sc.run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// org.apache.catalina.core.StandardThreadExecutor#execute(java.lang.Runnable)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (executor != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// Note any RejectedExecutionException due to the use of TaskQueue</span></span><br><span class="line">    <span class="comment">// will be handled by the o.a.t.u.threads.ThreadPoolExecutor</span></span><br><span class="line">    <span class="comment">// 没地方传超时</span></span><br><span class="line">    executor.execute(command);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(sm.getString(<span class="string">"standardThreadExecutor.notStarted"</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// org.apache.tomcat.util.threads.ThreadPoolExecutor#execute(java.lang.Runnable)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// timeout 0</span></span><br><span class="line">  execute(command,<span class="number">0</span>,TimeUnit.MILLISECONDS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Connection-reset-by-peer"><a href="#Connection-reset-by-peer" class="headerlink" title="Connection reset by peer"></a>Connection reset by peer</h2><p>从提交线程池的地方，逆流而上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.tomcat.util.net.AbstractEndpoint#processSocket</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">processSocket</span><span class="params">(SocketWrapperBase&lt;S&gt; socketWrapper,</span></span></span><br><span class="line"><span class="function"><span class="params">                             SocketEvent event, <span class="keyword">boolean</span> dispatch)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">   <span class="comment">// 省略</span></span><br><span class="line">    SocketProcessorBase&lt;S&gt; sc = processorCache.pop();</span><br><span class="line">    Executor executor = getExecutor();</span><br><span class="line">    <span class="keyword">if</span> (dispatch &amp;&amp; executor != <span class="keyword">null</span>) &#123;</span><br><span class="line">      executor.execute(sc);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      sc.run();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (RejectedExecutionException ree) &#123;</span><br><span class="line">    getLog().warn(sm.getString(<span class="string">"endpoint.executor.fail"</span>, socketWrapper) , ree);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">    ExceptionUtils.handleThrowable(t);</span><br><span class="line">    <span class="comment">// This means we got an OOM or similar creating a thread, or that</span></span><br><span class="line">    <span class="comment">// the pool and its queue are full</span></span><br><span class="line">    getLog().error(sm.getString(<span class="string">"endpoint.process.fail"</span>), t);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.apache.tomcat.util.net.NioEndpoint.Poller#processKey</span></span><br><span class="line"> <span class="keyword">if</span> (!processSocket(attachment, SocketEvent.OPEN_READ, <span class="keyword">true</span>)) &#123;</span><br><span class="line">   closeSocket = <span class="keyword">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line">  <span class="keyword">if</span> (closeSocket) &#123;</span><br><span class="line">    cancelledKey(sk);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.apache.tomcat.util.net.NioEndpoint.Poller#cancelledKey</span></span><br><span class="line"><span class="comment">// If attachment is non-null then there may be a current</span></span><br><span class="line"><span class="comment">// connection with an associated processor.</span></span><br><span class="line"><span class="number">1</span>. getHandler().release(ka);</span><br><span class="line"><span class="number">2</span>. key.cancel();</span><br><span class="line"><span class="number">3</span>. ka.getSocket().close(<span class="keyword">true</span>);</span><br><span class="line"><span class="number">4</span>. countDownConnection();</span><br></pre></td></tr></table></figure><p>AbstractEndpoint#processSocket 返回false  -&gt; NioEndpoint.Poller#cancelledKey，取消主要包含了4步：</p><ol><li>【tomcat】getHandler().release(ka);<ul><li>从当前处理的集合（connections）中移除</li><li>释放Http11Processor至对象池</li></ul></li><li>【nio】key.cancel();<ul><li>处理select的deregister逻辑</li></ul></li><li>【tomcat】ka.getSocket().close(true);<ul><li>关闭IOChannel对应的socket</li><li>关闭IOChannel</li></ul></li><li>【tomcat】countDownConnection();<ul><li>LimitLatch计数减少</li></ul></li></ol><p>那么为啥是tcp reset呢？</p><blockquote><p>socket接收缓冲区（Recv-Q）中的数据，未完全被应用程序读取时，关闭该socket会产生TCP Reset</p></blockquote><p>Http协议的解析都是在worker线程中进行的，由于提交任务失败，<strong>这部分内容是没有读取的</strong>。因此在连接关闭时，TCP发现Receive Buffer中还有数据没有读取，因此给对端发送了Rest。</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><ul><li>默认的Executor的队列是<strong>无界队列</strong>，因此不会有队列满的情况</li><li>使用定制的Executor可以设置maxQueueSize</li><li>RejectedExecutionException之后，tomcat会<strong>立即重试一次提交</strong>（timeout是0）</li><li>重试之后，仍然失败，会走到cancelledKey的逻辑，<strong>关闭底层的连接</strong></li><li>http协议的解析都是在worker线程池中进行的，由于提交任务失败，<strong>Receive Buffer里仍有数据</strong></li><li>TCP协议在关闭连接时，发现Receive Buffer里仍有数据，给对端<strong>发送Reset</strong></li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/30791159" rel="external nofollow noopener noreferrer" target="_blank">tcp rst产生的几种情况 - 知乎</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;tomcat线程池满了之后，请求会堆积在队列里。队列满了之后会发生什么？&lt;/p&gt;
&lt;h1 id=&quot;队列长度&quot;&gt;&lt;a href=&quot;#队列长度&quot; class=&quot;headerlink&quot; title=&quot;队列长度&quot;&gt;&lt;/a&gt;队列长度&lt;/h1&gt;&lt;p&gt;首先需要看下队列长度，使用tomca
      
    
    </summary>
    
      <category term="tomcat" scheme="http://qsli.github.io/categories/tomcat/"/>
    
    
      <category term="tomcat" scheme="http://qsli.github.io/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>tomcat-stringcache</title>
    <link href="http://qsli.github.io/2022/08/07/tomcat-stringcache/"/>
    <id>http://qsli.github.io/2022/08/07/tomcat-stringcache/</id>
    <published>2022-08-07T11:08:35.000Z</published>
    <updated>2022-08-07T11:08:35.315Z</updated>
    
    <content type="html"><![CDATA[<h2 id="StringCache是啥？"><a href="#StringCache是啥？" class="headerlink" title="StringCache是啥？"></a>StringCache是啥？</h2><p>​        众所周知，http协议是文本协议，因此传输过程中的ByteChunk和CharChunk最终都会转为String。tomcat为了减少内存占用，减少对GC的影响，提出了StringCache的解决方案。</p><p>​        先看下StringCache的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.tomcat.util.buf.StringCache</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This class implements a String cache for ByteChunk and CharChunk.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Remy Maucherat</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringCache</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Statistics hash map for byte chunk.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> HashMap&lt;ByteEntry,<span class="keyword">int</span>[]&gt; bcStats =</span><br><span class="line">            <span class="keyword">new</span> HashMap&lt;&gt;(cacheSize);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * toString count for byte chunk.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">int</span> bcCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Cache for byte chunk.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> ByteEntry[] bcCache = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Statistics hash map for char chunk.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> HashMap&lt;CharEntry,<span class="keyword">int</span>[]&gt; ccStats =</span><br><span class="line">            <span class="keyword">new</span> HashMap&lt;&gt;(cacheSize);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * toString count for char chunk.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">int</span> ccCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Cache for char chunk.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> CharEntry[] ccCache = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Access count.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">int</span> accessCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Hit count.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">int</span> hitCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ------------------------------------------------------------ Properties</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StringCache包含两类，一类是ByteChunk转过来的，一类是CharChunk转过来的。底层的缓存逻辑是一致的，只是类型不同，我们只需关注一种即可。缓存使用数组实现，以ByteChunk为例，数组的类型是ByteEntry:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org.apache.tomcat.util.buf.StringCache.ByteEntry</span></span><br><span class="line">   <span class="comment">// -------------------------------------------------- ByteEntry Inner Class</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ByteEntry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 底层的byte数组</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">byte</span>[] name = <span class="keyword">null</span>;</span><br><span class="line">  <span class="comment">// String的字符集</span></span><br><span class="line">  <span class="keyword">private</span> Charset charset = <span class="keyword">null</span>;</span><br><span class="line">  <span class="comment">// 对应的String实现</span></span><br><span class="line">  <span class="keyword">private</span> String value = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value.hashCode();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> ByteEntry) &#123;</span><br><span class="line">      <span class="keyword">return</span> value.equals(((ByteEntry) obj).value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类一目了然，这里不再赘述。当调用StringCache的toString方法时，会优先从cache中取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.tomcat.util.buf.StringCache#toString(org.apache.tomcat.util.buf.ByteChunk)</span></span><br><span class="line"><span class="keyword">if</span> (bcCache == <span class="keyword">null</span>) &#123;</span><br><span class="line">  <span class="comment">// 缓存维护逻辑，此处省略，后面会讲</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 调用计数</span></span><br><span class="line">  accessCount++;</span><br><span class="line">  <span class="comment">// Find the corresponding String</span></span><br><span class="line">  <span class="comment">// 二分查找</span></span><br><span class="line">  String result = find(bc);</span><br><span class="line">  <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 没有命中，直接走原来的逻辑</span></span><br><span class="line">    <span class="keyword">return</span> bc.toStringInternal();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Note: We don't care about safety for the stats</span></span><br><span class="line">  <span class="comment">// 命中计数</span></span><br><span class="line">  hitCount++;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cache的查找使用的是二分法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org.apache.tomcat.util.buf.StringCache#findClosest(org.apache.tomcat.util.buf.ByteChunk, org.apache.tomcat.util.buf.StringCache.ByteEntry[], int)</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Find an entry given its name in a sorted array of map elements.</span></span><br><span class="line"><span class="comment">     * This will return the index for the closest inferior or equal item in the</span></span><br><span class="line"><span class="comment">     * given array.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name The name to find</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array The array in which to look</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> len The effective length of the array</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the position of the best match</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">findClosest</span><span class="params">(ByteChunk name, ByteEntry[] array,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 二分查找的low和high</span></span><br><span class="line">  <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> b = len - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Special cases: -1 and 0</span></span><br><span class="line">  <span class="keyword">if</span> (b == -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (compare(name, array[<span class="number">0</span>].name) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 以上是特殊的case</span></span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">    <span class="comment">// 取中间坐标，用位运算避免溢出风险</span></span><br><span class="line">    i = (b + a) &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// compare的结果， -1, 0, 1</span></span><br><span class="line">    <span class="keyword">int</span> result = compare(name, array[i].name);</span><br><span class="line">    <span class="comment">// 在右侧，更新low</span></span><br><span class="line">    <span class="keyword">if</span> (result == <span class="number">1</span>) &#123;</span><br><span class="line">      a = i;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 正好查找到</span></span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 在左侧，缩减high</span></span><br><span class="line">      b = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 特殊情况</span></span><br><span class="line">    <span class="keyword">if</span> ((b - a) == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">int</span> result2 = compare(name, array[b].name);</span><br><span class="line">      <span class="keyword">if</span> (result2 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缓存维护"><a href="#缓存维护" class="headerlink" title="缓存维护"></a>缓存维护</h2><p>缓存的核心是缓存的维护。StringCache更像一个半成品，采用固定长度的缓存。</p><p>在启动初期，有一个训练的阈值，调用次数没有达到阈值之前，只会做stat；超过阈值之后，才会根据前面统计到的stat来构建cache。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.tomcat.util.buf.StringCache#toString(org.apache.tomcat.util.buf.ByteChunk)</span></span><br><span class="line"><span class="comment">// If the cache is null, then either caching is disabled, or we're</span></span><br><span class="line"><span class="comment">// still training</span></span><br><span class="line"><span class="keyword">if</span> (bcCache == <span class="keyword">null</span>) &#123;</span><br><span class="line">  <span class="comment">// bcCache为空，1.在training阶段，2. cache被禁用了</span></span><br><span class="line">  <span class="comment">// 所以这里直接调用了对应的toString方法</span></span><br><span class="line">  String value = bc.toStringInternal();</span><br><span class="line">  <span class="comment">// 缓存开关打开了，开始构建缓存的统计信息</span></span><br><span class="line">  <span class="comment">// 这里有个String上线的限制，有相应的bug：https://bz.apache.org/bugzilla/show_bug.cgi?id=41057</span></span><br><span class="line">  <span class="keyword">if</span> (byteEnabled &amp;&amp; (value.length() &lt; maxStringSize)) &#123;</span><br><span class="line">    <span class="comment">// If training, everything is synced</span></span><br><span class="line">    <span class="keyword">synchronized</span> (bcStats) &#123;</span><br><span class="line">      <span class="comment">// If the cache has been generated on a previous invocation</span></span><br><span class="line">      <span class="comment">// while waiting for the lock, just return the toString</span></span><br><span class="line">      <span class="comment">// value we just calculated</span></span><br><span class="line">      <span class="comment">// double checked lock, 在同步代码块中再次check</span></span><br><span class="line">      <span class="keyword">if</span> (bcCache != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Two cases: either we just exceeded the train count, in</span></span><br><span class="line">      <span class="comment">// which case the cache must be created, or we just update</span></span><br><span class="line">      <span class="comment">// the count for the string</span></span><br><span class="line">      <span class="comment">// 超过训练阈值，构建cache逻辑</span></span><br><span class="line">      <span class="keyword">if</span> (bcCount &gt; trainThreshold) &#123;</span><br><span class="line">        <span class="keyword">long</span> t1 = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// Sort the entries according to occurrence</span></span><br><span class="line">        <span class="comment">// stats中每个item的出现次数</span></span><br><span class="line">        TreeMap&lt;Integer,ArrayList&lt;ByteEntry&gt;&gt; tempMap =</span><br><span class="line">          <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;ByteEntry,<span class="keyword">int</span>[]&gt; item : bcStats.entrySet()) &#123;</span><br><span class="line">          ByteEntry entry = item.getKey();</span><br><span class="line">          <span class="keyword">int</span>[] countA = item.getValue();</span><br><span class="line">          Integer count = Integer.valueOf(countA[<span class="number">0</span>]);</span><br><span class="line">          <span class="comment">// Add to the list for that count</span></span><br><span class="line">          ArrayList&lt;ByteEntry&gt; list = tempMap.get(count);</span><br><span class="line">          <span class="keyword">if</span> (list == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Create list</span></span><br><span class="line">            list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            tempMap.put(count, list);</span><br><span class="line">          &#125;</span><br><span class="line">          list.add(entry);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Allocate array of the right size</span></span><br><span class="line">        <span class="comment">// 不能超过缓存的上限</span></span><br><span class="line">        <span class="keyword">int</span> size = bcStats.size();</span><br><span class="line">        <span class="keyword">if</span> (size &gt; cacheSize) &#123;</span><br><span class="line">          size = cacheSize;</span><br><span class="line">        &#125;</span><br><span class="line">        ByteEntry[] tempbcCache = <span class="keyword">new</span> ByteEntry[size];</span><br><span class="line">        <span class="comment">// Fill it up using an alphabetical order</span></span><br><span class="line">        <span class="comment">// and a dumb insert sort</span></span><br><span class="line">        ByteChunk tempChunk = <span class="keyword">new</span> ByteChunk();</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n &lt; size) &#123;</span><br><span class="line">          <span class="comment">// TreeMap，这里取lastKey就是出现次数最多的</span></span><br><span class="line">          Object key = tempMap.lastKey();</span><br><span class="line">          ArrayList&lt;ByteEntry&gt; list = tempMap.get(key);</span><br><span class="line">          <span class="comment">// 出现次数并列的情况</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size() &amp;&amp; n &lt; size; i++) &#123;</span><br><span class="line">            ByteEntry entry = list.get(i);</span><br><span class="line">            tempChunk.setBytes(entry.name, <span class="number">0</span>,</span><br><span class="line">                               entry.name.length);</span><br><span class="line">            <span class="comment">// 二分查找，找到插入位置</span></span><br><span class="line">            <span class="keyword">int</span> insertPos = findClosest(tempChunk,</span><br><span class="line">                                        tempbcCache, n);</span><br><span class="line">            <span class="keyword">if</span> (insertPos == n) &#123;</span><br><span class="line">              tempbcCache[n + <span class="number">1</span>] = entry;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              System.arraycopy(tempbcCache, insertPos + <span class="number">1</span>,</span><br><span class="line">                               tempbcCache, insertPos + <span class="number">2</span>,</span><br><span class="line">                               n - insertPos - <span class="number">1</span>);</span><br><span class="line">              tempbcCache[insertPos + <span class="number">1</span>] = entry;</span><br><span class="line">            &#125;</span><br><span class="line">            n++;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 删除掉已经处理的</span></span><br><span class="line">          tempMap.remove(key);</span><br><span class="line">        &#125; <span class="comment">// while loop</span></span><br><span class="line">        bcCount = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 构建完成，清理掉stat数据</span></span><br><span class="line">        bcStats.clear();</span><br><span class="line">        bcCache = tempbcCache;</span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">          <span class="keyword">long</span> t2 = System.currentTimeMillis();</span><br><span class="line">          log.debug(<span class="string">"ByteCache generation time: "</span> +</span><br><span class="line">                    (t2 - t1) + <span class="string">"ms"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// ----------------- 以下是收集训练数据的过程 -----------------</span></span><br><span class="line">        bcCount++;</span><br><span class="line">        <span class="comment">// Allocate new ByteEntry for the lookup</span></span><br><span class="line">        ByteEntry entry = <span class="keyword">new</span> ByteEntry();</span><br><span class="line">        entry.value = value;</span><br><span class="line">        <span class="keyword">int</span>[] count = bcStats.get(entry);</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">int</span> end = bc.getEnd();</span><br><span class="line">          <span class="keyword">int</span> start = bc.getStart();</span><br><span class="line">          <span class="comment">// Create byte array and copy bytes</span></span><br><span class="line">          entry.name = <span class="keyword">new</span> <span class="keyword">byte</span>[bc.getLength()];</span><br><span class="line">          System.arraycopy(bc.getBuffer(), start, entry.name,</span><br><span class="line">                           <span class="number">0</span>, end - start);</span><br><span class="line">          <span class="comment">// Set encoding</span></span><br><span class="line">          entry.charset = bc.getCharset();</span><br><span class="line">          <span class="comment">// Initialize occurrence count to one</span></span><br><span class="line">          count = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">1</span>];</span><br><span class="line">          count[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">          <span class="comment">// Set in the stats hash map</span></span><br><span class="line">          bcStats.put(entry, count);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 更新出现的次数</span></span><br><span class="line">          count[<span class="number">0</span>] = count[<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 走缓存的逻辑，这里忽略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="tomcat相关开关"><a href="#tomcat相关开关" class="headerlink" title="tomcat相关开关"></a>tomcat相关开关</h2><ul><li><p>tomcat.util.buf.StringCache.cacheSize </p></li><li><ul><li>缓存大小</li><li>默认200个entry</li></ul></li><li><p>tomcat.util.buf.StringCache.byte.enabled</p></li><li><ul><li>ByteChunk缓存开关</li><li>默认开启</li></ul></li><li><p>tomcat.util.buf.StringCache.char.enabled</p></li><li><ul><li>CharChunk缓存开关</li><li>默认关闭</li></ul></li><li><p>tomcat.util.buf.StringCache.trainThreshold</p></li><li><ul><li>采样次数的阈值</li><li>默认20000</li></ul></li><li><p>tomcat.util.buf.StringCache.maxStringSize</p></li><li><ul><li>缓存的String最大长度</li><li>这个是有人反馈之后才加上的，参加这个bug <a href="https://bz.apache.org/bugzilla/show_bug.cgi?id=41057" rel="external nofollow noopener noreferrer" target="_blank">41057 – Tomcat leaks memory on every request</a></li></ul></li></ul><h2 id="性能影响"><a href="#性能影响" class="headerlink" title="性能影响"></a>性能影响</h2><p>从源码角度看，这个缓存的开销主要有两部分：</p><ul><li>缓存生成的开销（前期统计和缓存生成）</li><li>缓存使用的开销（底层是有序数组，使用二分法查找）</li></ul><p>tomcat默认的缓存大小是200，但是这个ByteChunk非常底层，uri中的参数、postbody中的内容、header中的内容等都会使用到，很容易被污染。而且缓存的效果取决于启动初期的流量，如果是预热请求，收集到的采样数据可能不准确。</p><p>生产环境，通过观测，有些场景下，cpu开销约为1%，主要花费在二分查找上：</p><img src="/2022/08/07/tomcat-stringcache/image-20220807185524674.png"><h2 id="看看是啥？"><a href="#看看是啥？" class="headerlink" title="看看是啥？"></a>看看是啥？</h2><ul><li>dump出来内存，直接看StringCache存了什么：</li></ul><img src="/2022/08/07/tomcat-stringcache/image-20220807185329232.png"><img src="/2022/08/07/tomcat-stringcache/image-20220807185405006.png"><ul><li><p>使用arthas查看tomcat暴露出来的mbean信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[arthas@96]$ mbean | grep -i StringCache</span><br><span class="line">Catalina:<span class="built_in">type</span>=StringCache</span><br><span class="line">[arthas@96]$ mbean Catalina:<span class="built_in">type</span>=StringCache</span><br><span class="line"> OBJECT_NAME     Catalina:<span class="built_in">type</span>=StringCache                                                                                                               </span><br><span class="line">--------------------------------------------------------                                                                                                 </span><br><span class="line"> NAME            VALUE                                                                                                                                   </span><br><span class="line">--------------------------------------------------------                                                                                                 </span><br><span class="line"> accessCount     2120845422                                                                                                                              </span><br><span class="line"> modelerType     org.apache.tomcat.util.buf.StringCache                                                                                                  </span><br><span class="line"> hitCount        1218278493                                                                                                                              </span><br><span class="line"> cacheSize       200                                                                                                                                     </span><br><span class="line"> trainThreshold  20000                                                                                                                                   </span><br><span class="line"> charEnabled     <span class="literal">false</span>                                                                                                                                   </span><br><span class="line"> byteEnabled     <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>注意，计数存在溢出的情况。</p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://marc.info/?l=tomcat-dev&amp;w=2&amp;r=1&amp;s=StringCache&amp;q=b" rel="external nofollow noopener noreferrer" target="_blank">‘stringcache’ in tomcat-dev - MARC</a></li><li><a href="https://bz.apache.org/bugzilla/show_bug.cgi?id=41057" rel="external nofollow noopener noreferrer" target="_blank">41057 – Tomcat leaks memory on every request</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;StringCache是啥？&quot;&gt;&lt;a href=&quot;#StringCache是啥？&quot; class=&quot;headerlink&quot; title=&quot;StringCache是啥？&quot;&gt;&lt;/a&gt;StringCache是啥？&lt;/h2&gt;&lt;p&gt;​        众所周知，http协议是文
      
    
    </summary>
    
      <category term="tomcat" scheme="http://qsli.github.io/categories/tomcat/"/>
    
    
      <category term="tomcat" scheme="http://qsli.github.io/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>Java的反射慢吗？</title>
    <link href="http://qsli.github.io/2022/08/07/reflection/"/>
    <id>http://qsli.github.io/2022/08/07/reflection/</id>
    <published>2022-08-07T10:00:13.000Z</published>
    <updated>2022-08-07T10:00:14.058Z</updated>
    
    <content type="html"><![CDATA[<h1 id="反射很慢？"><a href="#反射很慢？" class="headerlink" title="反射很慢？"></a>反射很慢？</h1><p>有些人说反射很慢，但是也没有人真正地测试过。spring的代码里有好多使用反射的地方，所以性能应该也没有那么差。</p><p>本文就来挖一挖反射的实现原理以及可能导致的问题。</p><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>简单地用反射的方式获取一个field的属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(JUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ReflectTest</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span> count = <span class="number">10</span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 为了查看调用栈</span></span><br><span class="line">      <span class="keyword">new</span> RuntimeException().printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setCount</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.count = count;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="meta">@SneakyThrows</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReflection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; clazz = Class.forName(<span class="string">"com.air.lang.reflect.ReflectTest"</span>);</span><br><span class="line">    Method getCountMethod = clazz.getDeclaredMethod(<span class="string">"getCount"</span>, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">final</span> Object instance = clazz.newInstance();</span><br><span class="line">    <span class="keyword">final</span> Object o = getCountMethod.invoke(instance);</span><br><span class="line">    System.out.println(<span class="string">"o = "</span> + o);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行起来（-XX:+TraceClassLoading ），输出如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[Loaded sun.reflect.NativeMethodAccessorImpl from /Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home/jre/lib/rt.jar]</span><br><span class="line">[Loaded sun.reflect.DelegatingMethodAccessorImpl from /Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home/jre/lib/rt.jar]</span><br><span class="line">java.lang.RuntimeException</span><br><span class="line">at com.air.lang.reflect.ReflectTest.getCount(ReflectTest.java:21)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">at com.air.lang.reflect.ReflectTest.testReflection(ReflectTest.java:82)</span><br><span class="line">// 下面是junit用反射调用这个方法的栈</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">at org.junit.internal.runners.TestMethod.invoke(TestMethod.java:68)</span><br><span class="line">o = 10</span><br></pre></td></tr></table></figure><p>从调用栈可以看到，Method的invoke的调用路径：</p><p>DelegatingMethodAccessorImpl -&gt; NativeMethodAccessorImpl</p><p>翻下invoke的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java.lang.reflect.Method#invoke</span></span><br><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object obj, Object... args)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> IllegalAccessException, IllegalArgumentException,</span></span><br><span class="line"><span class="function">InvocationTargetException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!override) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!Reflection.quickCheckMemberAccess(clazz, modifiers)) &#123;</span><br><span class="line">      Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">      checkAccess(caller, clazz, obj, modifiers);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  MethodAccessor ma = methodAccessor;             <span class="comment">// read volatile</span></span><br><span class="line">  <span class="keyword">if</span> (ma == <span class="keyword">null</span>) &#123;</span><br><span class="line">    ma = acquireMethodAccessor();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ma.invoke(obj, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终调用是委托给了MethodAccessor，这是java中的一个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sun.reflect.MethodAccessor</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** This interface provides the declaration for</span></span><br><span class="line"><span class="comment">    java.lang.reflect.Method.invoke(). Each Method object is</span></span><br><span class="line"><span class="comment">    configured with a (possibly dynamically-generated) class which</span></span><br><span class="line"><span class="comment">    implements this interface.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MethodAccessor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** Matches specification in &#123;<span class="doctag">@link</span> java.lang.reflect.Method&#125; */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object obj, Object[] args)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IllegalArgumentException, InvocationTargetException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2022/08/07/reflection/image-20220710014957451.png"><p>实现类有三个，DelegatingMethodAccessorImpl是代理模式，主要是为了切换底层的实现。因此主要的实现就两种，一个是MethodAccessorImpl，一个是NativeMethodAccessorImpl。</p><blockquote><p>Delegates its invocation to another MethodAccessorImpl and can change its delegate at run time.</p></blockquote><h2 id="简单测试下时间"><a href="#简单测试下时间" class="headerlink" title="简单测试下时间"></a>简单测试下时间</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReflection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Class&lt;?&gt; clazz = Class.forName(<span class="string">"com.air.lang.reflect.ReflectTest"</span>);</span><br><span class="line">  Method getCountMethod = clazz.getDeclaredMethod(<span class="string">"getCount"</span>, <span class="keyword">null</span>);</span><br><span class="line">  <span class="keyword">final</span> Object instance = clazz.newInstance();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 注意，这里是nano time</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line">    <span class="keyword">final</span> Object o = getCountMethod.invoke(instance);</span><br><span class="line">    System.out.println(i + <span class="number">1</span> + <span class="string">": cost "</span> + (System.nanoTime() - start));</span><br><span class="line">  &#125;</span><br><span class="line">  System.in.read();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1: cost 19792</span><br><span class="line">2: cost 3625</span><br><span class="line">3: cost 2583</span><br><span class="line">4: cost 2333</span><br><span class="line">5: cost 3250</span><br><span class="line">6: cost 4166</span><br><span class="line">7: cost 2459</span><br><span class="line">8: cost 27041</span><br><span class="line">9: cost 7875</span><br><span class="line">10: cost 7500</span><br><span class="line">11: cost 8167</span><br><span class="line">12: cost 7500</span><br><span class="line">13: cost 7250</span><br><span class="line">14: cost 7459</span><br><span class="line">15: cost 7750</span><br><span class="line">16: cost 1085417</span><br><span class="line">17: cost 7208</span><br><span class="line">18: cost 2500</span><br><span class="line">19: cost 1917</span><br><span class="line">20: cost 2292</span><br></pre></td></tr></table></figure><p>注意看，第1次调用和第16次调用，时间都比较长。inflation的默认阈值是15，超过15之后就会转为动态字节码生成的方式，中间要生成字节码，所以耗时较高，之后耗时就降下来了。</p><h1 id="两种实现方式"><a href="#两种实现方式" class="headerlink" title="两种实现方式"></a>两种实现方式</h1><blockquote><p>Before Java 1.4 <code>Method.invoke</code> worked through a JNI call to VM runtime. </p><p>Since Java 1.4 <code>Method.invoke</code> uses dynamic bytecode generation if a method is called more than 15 times (configurable via <code>sun.reflect.inflationThreshold</code> system property).</p></blockquote><p>Java 1.4之前都是使用Native的方式调用，1.4之后，会根据调用的阈值做优化，超过一定的阈值<code>-Dsun.reflect.inflationThreshold</code>,会转换成dynamic bytecode generation的方式。dynamic bytecode generation的性能会更好。</p><h2 id="Native实现"><a href="#Native实现" class="headerlink" title="Native实现"></a>Native实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sun.reflect.NativeMethodAccessorImpl#invoke</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object obj, Object[] args)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IllegalArgumentException, InvocationTargetException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// We can't inflate methods belonging to vm-anonymous classes because</span></span><br><span class="line">  <span class="comment">// that kind of class can't be referred to by name, hence can't be</span></span><br><span class="line">  <span class="comment">// found from the generated bytecode.</span></span><br><span class="line">  <span class="keyword">if</span> (++numInvocations &gt; ReflectionFactory.inflationThreshold()</span><br><span class="line">      &amp;&amp; !ReflectUtil.isVMAnonymousClass(method.getDeclaringClass())) &#123;</span><br><span class="line">    MethodAccessorImpl acc = (MethodAccessorImpl)</span><br><span class="line">      <span class="comment">// 超过阈值之后，会切换成动态字节码的方式</span></span><br><span class="line">      <span class="comment">// 注意，这里没有加锁</span></span><br><span class="line">      <span class="keyword">new</span> MethodAccessorGenerator().</span><br><span class="line">      generateMethod(method.getDeclaringClass(),</span><br><span class="line">                     method.getName(),</span><br><span class="line">                     method.getParameterTypes(),</span><br><span class="line">                     method.getReturnType(),</span><br><span class="line">                     method.getExceptionTypes(),</span><br><span class="line">                     method.getModifiers());</span><br><span class="line">    <span class="comment">// parent就是刚才说的代理DelegatingMethodAccessorImpl</span></span><br><span class="line">    <span class="comment">// 生成结束之后，这里切换成新的调用方式</span></span><br><span class="line">    parent.setDelegate(acc);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里是native方法</span></span><br><span class="line">  <span class="keyword">return</span> invoke0(method, obj, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setParent</span><span class="params">(DelegatingMethodAccessorImpl parent)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.parent = parent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> Object <span class="title">invoke0</span><span class="params">(Method m, Object obj, Object[] args)</span></span>;</span><br></pre></td></tr></table></figure><p>去jdk的代码里看看这个nativev方法的实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NativeAccessors.c</span></span><br><span class="line">JNIEXPORT jobject JNICALL Java_jdk_internal_reflect_NativeMethodAccessorImpl_invoke0</span><br><span class="line">(JNIEnv *env, jclass unused, jobject m, jobject obj, jobjectArray args)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> JVM_InvokeMethod(env, m, obj, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// jvm.cpp</span></span><br><span class="line">JVM_ENTRY(jobject, JVM_InvokeMethod(JNIEnv *env, jobject method, jobject obj, jobjectArray args0))</span><br><span class="line">  Handle method_handle;</span><br><span class="line">  <span class="keyword">if</span> (thread-&gt;stack_overflow_state()-&gt;stack_available((address) &amp;method_handle) &gt;= JVMInvokeMethodSlack) &#123;</span><br><span class="line">    method_handle = Handle(THREAD, JNIHandles::resolve(method));</span><br><span class="line">    <span class="function">Handle <span class="title">receiver</span><span class="params">(THREAD, JNIHandles::resolve(obj))</span></span>;</span><br><span class="line">    <span class="function">objArrayHandle <span class="title">args</span><span class="params">(THREAD, objArrayOop(JNIHandles::resolve(args0)))</span></span>;</span><br><span class="line">    oop result = Reflection::invoke_method(method_handle(), receiver, args, CHECK_NULL);</span><br><span class="line">    jobject res = JNIHandles::make_local(THREAD, result);</span><br><span class="line">    <span class="keyword">if</span> (JvmtiExport::should_post_vm_object_alloc()) &#123;</span><br><span class="line">      oop ret_type = java_lang_reflect_Method::return_type(method_handle());</span><br><span class="line">      assert(ret_type != <span class="literal">NULL</span>, <span class="string">"sanity check: ret_type oop must not be NULL!"</span>);</span><br><span class="line">      <span class="keyword">if</span> (java_lang_Class::is_primitive(ret_type)) &#123;</span><br><span class="line">        <span class="comment">// Only for primitive type vm allocates memory for java object.</span></span><br><span class="line">        <span class="comment">// See box() method.</span></span><br><span class="line">        JvmtiExport::post_vm_object_alloc(thread, result);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    THROW_0(vmSymbols::java_lang_StackOverflowError());</span><br><span class="line">  &#125;</span><br><span class="line">JVM_END</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// reflection.cpp</span></span><br><span class="line">  <span class="comment">// This would be nicer if, say, java.lang.reflect.Method was a subclass</span></span><br><span class="line"><span class="comment">// of java.lang.reflect.Constructor</span></span><br><span class="line"></span><br><span class="line"><span class="function">oop <span class="title">Reflection::invoke_method</span><span class="params">(oop method_mirror, Handle receiver, objArrayHandle args, TRAPS)</span> </span>&#123;</span><br><span class="line">  oop mirror             = java_lang_reflect_Method::clazz(method_mirror);</span><br><span class="line">  <span class="keyword">int</span> slot               = java_lang_reflect_Method::slot(method_mirror);</span><br><span class="line">  <span class="keyword">bool</span> <span class="keyword">override</span>          = java_lang_reflect_Method::<span class="keyword">override</span>(method_mirror) != <span class="number">0</span>;</span><br><span class="line">  <span class="function">objArrayHandle <span class="title">ptypes</span><span class="params">(THREAD, objArrayOop(java_lang_reflect_Method::parameter_types(method_mirror)))</span></span>;</span><br><span class="line"></span><br><span class="line">  oop return_type_mirror = java_lang_reflect_Method::return_type(method_mirror);</span><br><span class="line">  BasicType rtype;</span><br><span class="line">  <span class="keyword">if</span> (java_lang_Class::is_primitive(return_type_mirror)) &#123;</span><br><span class="line">    rtype = basic_type_mirror_to_basic_type(return_type_mirror);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    rtype = T_OBJECT;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  InstanceKlass* klass = InstanceKlass::cast(java_lang_Class::as_Klass(mirror));</span><br><span class="line">  Method* m = klass-&gt;method_with_idnum(slot);</span><br><span class="line">  <span class="keyword">if</span> (m == <span class="literal">NULL</span>) &#123;</span><br><span class="line">    THROW_MSG_0(vmSymbols::java_lang_InternalError(), <span class="string">"invoke"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function">methodHandle <span class="title">method</span><span class="params">(THREAD, m)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> invoke(klass, method, receiver, <span class="keyword">override</span>, ptypes, rtype, args, <span class="literal">true</span>, THREAD);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>invoke方法就比较复杂了，这里就不跟进了，可以看到native的实现就是使用JNI调用，然后利用jvm内部的数据结构完成方法的调用。</p><h2 id="dynamic-bytecode-generation"><a href="#dynamic-bytecode-generation" class="headerlink" title="dynamic bytecode generation"></a>dynamic bytecode generation</h2><blockquote><p>The approach with dynamic bytecode generation is much faster since it</p></blockquote><ul><li>does not suffer from <strong>JNI overhead</strong>;</li><li>does not need to parse method signature each time, because each method invoked via Reflection has its own <strong>unique MethodAccessor</strong>;</li><li>can be further optimized, e.g. these MethodAccessors can benefit from all regular <strong>JIT optimizations</strong> like inlining, constant propagation, autoboxing elimination etc.</li><li>Note, that this optimization is implemented mostly in Java code without JVM assistance. The only thing HotSpot VM does to make this optimization possible - is skipping bytecode verification for such generated MethodAccessors. Otherwise the verifier would not allow, for example, to call private methods.</li></ul><p>稍微改造下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReflection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Class&lt;?&gt; clazz = Class.forName(<span class="string">"com.air.lang.reflect.ReflectTest"</span>);</span><br><span class="line">  Method getCountMethod = clazz.getDeclaredMethod(<span class="string">"getCount"</span>, <span class="keyword">null</span>);</span><br><span class="line">  <span class="keyword">final</span> Object instance = clazz.newInstance();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">final</span> Object o = getCountMethod.invoke(instance);</span><br><span class="line">    System.out.println(<span class="string">"o = "</span> + o);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 阻塞退出，等待输入</span></span><br><span class="line">  System.in.read();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序跑起来之后，反复调用了20次，超过了默认的阈值，会自动生成字节码。</p><p>第一次输出的调用栈：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java.lang.RuntimeException</span><br><span class="line">at com.air.lang.reflect.ReflectTest.getCount(ReflectTest.java:21)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">at com.air.lang.reflect.ReflectTest.testReflection(ReflectTest.java:83)</span><br></pre></td></tr></table></figure><p>最后一次输出的调用栈：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java.lang.RuntimeException</span><br><span class="line">at com.air.lang.reflect.ReflectTest.getCount(ReflectTest.java:21)</span><br><span class="line">at sun.reflect.GeneratedMethodAccessor1.invoke(Unknown Source)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">at com.air.lang.reflect.ReflectTest.testReflection(ReflectTest.java:83)</span><br></pre></td></tr></table></figure><p>调用栈发生了变化，<strong>从NativeMethodAccessorImpl变为了GeneratedMethodAccessor1</strong></p><p>我们用arthas找下生成的字节码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[arthas@45767]$ sc -d *GeneratedMethodAccessor1</span><br><span class="line"> class-info        sun.reflect.GeneratedMethodAccessor1</span><br><span class="line"> code-source</span><br><span class="line"> name              sun.reflect.GeneratedMethodAccessor1</span><br><span class="line"> isInterface       <span class="literal">false</span></span><br><span class="line"> isAnnotation      <span class="literal">false</span></span><br><span class="line"> isEnum            <span class="literal">false</span></span><br><span class="line"> isAnonymousClass  <span class="literal">false</span></span><br><span class="line"> isArray           <span class="literal">false</span></span><br><span class="line"> isLocalClass      <span class="literal">false</span></span><br><span class="line"> isMemberClass     <span class="literal">false</span></span><br><span class="line"> isPrimitive       <span class="literal">false</span></span><br><span class="line"> isSynthetic       <span class="literal">false</span></span><br><span class="line"> simple-name       GeneratedMethodAccessor1</span><br><span class="line"> modifier          public</span><br><span class="line"> annotation</span><br><span class="line"> interfaces</span><br><span class="line"> super-class       +-sun.reflect.MethodAccessorImpl</span><br><span class="line">                     +-sun.reflect.MagicAccessorImpl</span><br><span class="line">                       +-java.lang.Object</span><br><span class="line"> class-loader      +-sun.reflect.DelegatingClassLoader@57fa26b7</span><br><span class="line">                     +-sun.misc.Launcher<span class="variable">$AppClassLoader</span>@18b4aac2</span><br><span class="line">                       +-sun.misc.Launcher<span class="variable">$ExtClassLoader</span>@6d3a7064</span><br><span class="line"> classLoaderHash   57fa26b7</span><br><span class="line"></span><br><span class="line">Affect(row-cnt:1) cost <span class="keyword">in</span> 29 ms.</span><br></pre></td></tr></table></figure><p>反编译下看看生成的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">[arthas@<span class="number">45767</span>]$ jad sun.reflect.GeneratedMethodAccessor1</span><br><span class="line"></span><br><span class="line">ClassLoader:</span><br><span class="line">+-sun.reflect.DelegatingClassLoader@<span class="number">57f</span>a26b7</span><br><span class="line">  +-sun.misc.Launcher$AppClassLoader@<span class="number">18</span>b4aac2</span><br><span class="line">    +-sun.misc.Launcher$ExtClassLoader@<span class="number">6</span>d3a7064</span><br><span class="line"></span><br><span class="line">Location:</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Decompiled with CFR.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Could not load the following classes:</span></span><br><span class="line"><span class="comment"> *  com.air.lang.reflect.ReflectTest</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> sun.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.air.lang.reflect.ReflectTest;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> sun.reflect.MethodAccessorImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeneratedMethodAccessor1</span></span></span><br><span class="line"><span class="class"><span class="keyword">extends</span> <span class="title">MethodAccessorImpl</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Loose catch block</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object object, Object[] objectArray)</span> <span class="keyword">throws</span> InvocationTargetException </span>&#123;</span><br><span class="line">        ReflectTest reflectTest;</span><br><span class="line">        block5: &#123;</span><br><span class="line">            <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">            &#125;</span><br><span class="line">          <span class="comment">// 这里直接强转了，把Object类型转成了目标类型ReflectTest</span></span><br><span class="line">            reflectTest = (ReflectTest)object;</span><br><span class="line">            <span class="keyword">if</span> (objectArray == <span class="keyword">null</span> || objectArray.length == <span class="number">0</span>) <span class="keyword">break</span> block5;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 调用对应的方法</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Integer(reflectTest.getCount());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvocationTargetException(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ClassCastException | NullPointerException runtimeException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="keyword">super</span>.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Affect(row-cnt:<span class="number">1</span>) cost in <span class="number">537</span> ms.</span><br></pre></td></tr></table></figure><p>可以看到，动态生成的字节码，跟直接方法调用差别并不是很大。值得注意的是，这个类的classloader是<code>sun.reflect.DelegatingClassLoader</code>.</p><h3 id="DelegatingClassLoader"><a href="#DelegatingClassLoader" class="headerlink" title="DelegatingClassLoader"></a>DelegatingClassLoader</h3><p>DelegatingClassLoader有何特殊之处？看代码也没有特殊的实现，应该只是为了做classloader隔离。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sun.reflect.DelegatingClassLoader</span></span><br><span class="line"><span class="comment">// <span class="doctag">NOTE:</span> this class's name and presence are known to the virtual</span></span><br><span class="line"><span class="comment">// machine as of the fix for 4474172.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DelegatingClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    DelegatingClassLoader(ClassLoader parent) &#123;</span><br><span class="line">        <span class="keyword">super</span>(parent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>之所以搞一个新的类加载器，是为了<strong>性能考虑</strong>，在某些情况下可以<strong>卸载这些生成的类</strong>，因为类的卸载是只有在类加载器可以被回收的情况下才会被回收的，如果用了原来的类加载器，那可能导致这些新创建的类一直无法被卸载，从其设计来看本身就不希望他们一直存在内存里的，在需要的时候有就行了，在内存紧俏的时候可以释放掉内存</p><p>——你假笨 <a href="https://mp.weixin.qq.com/s/5H6UHcP6kvR2X5hTj_SBjA" rel="external nofollow noopener noreferrer" target="_blank">假笨说-从一起GC血案谈到反射原理</a></p></blockquote><blockquote><ul><li><p>first, it avoids any possible security risk of having these bytecodes in the same loader.</p></li><li><p>Second, it allows the generated bytecodes to be unloaded earlier </p><p>than would otherwise be possible, decreasing run-time footprint.</p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jdk.internal.reflect.ClassDefiner</span></span><br><span class="line"><span class="comment">/** Utility class which assists in calling defineClass() by</span></span><br><span class="line"><span class="comment">    creating a new class loader which delegates to the one needed in</span></span><br><span class="line"><span class="comment">    order for proper resolution of the given bytecodes to occur. */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassDefiner</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> JavaLangAccess JLA = SharedSecrets.getJavaLangAccess();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** &lt;P&gt; We define generated code into a new class loader which</span></span><br><span class="line"><span class="comment">      delegates to the defining loader of the target class. It is</span></span><br><span class="line"><span class="comment">      necessary for the VM to be able to resolve references to the</span></span><br><span class="line"><span class="comment">      target class from the generated bytecodes, which could not occur</span></span><br><span class="line"><span class="comment">      if the generated code was loaded into the bootstrap class</span></span><br><span class="line"><span class="comment">      loader. &lt;/P&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      &lt;P&gt; There are two primary reasons for creating a new loader</span></span><br><span class="line"><span class="comment">      instead of defining these bytecodes directly into the defining</span></span><br><span class="line"><span class="comment">      loader of the target class: first, it avoids any possible</span></span><br><span class="line"><span class="comment">      security risk of having these bytecodes in the same loader.</span></span><br><span class="line"><span class="comment">      Second, it allows the generated bytecodes to be unloaded earlier</span></span><br><span class="line"><span class="comment">      than would otherwise be possible, decreasing run-time</span></span><br><span class="line"><span class="comment">      footprint. &lt;/P&gt;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">static</span> Class&lt;?&gt; defineClass(String name, <span class="keyword">byte</span>[] bytes, <span class="keyword">int</span> off, <span class="keyword">int</span> len,</span><br><span class="line">                                <span class="keyword">final</span> ClassLoader parentClassLoader)</span><br><span class="line">    &#123;</span><br><span class="line">        ClassLoader newLoader = AccessController.doPrivileged(</span><br><span class="line">            <span class="keyword">new</span> PrivilegedAction&lt;ClassLoader&gt;() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> ClassLoader <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> DelegatingClassLoader(parentClassLoader);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">return</span> JLA.defineClass(newLoader, name, bytes, <span class="keyword">null</span>, <span class="string">"__ClassDefiner__"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="反射使用过多可能造成的问题"><a href="#反射使用过多可能造成的问题" class="headerlink" title="反射使用过多可能造成的问题"></a>反射使用过多可能造成的问题</h1><p>前面说到达到阈值，切换为动态字节码生成时<strong>没有加锁</strong>。而每次生成动态字节码，都会生成自己的类加载器。如果并发很高，会导致classloader和class过多，占用相应的内存。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="http://rednaxelafx.iteye.com/blog/548536" rel="external nofollow noopener noreferrer" target="_blank">关于反射调用方法的一个log - Script Ahead, Code Behind - ITeye博客</a></li><li><a href="https://stackoverflow.com/questions/28793118/what-is-a-de-reflection-optimization-in-hotspot-jit-and-how-does-it-implemented" rel="external nofollow noopener noreferrer" target="_blank">java - What is a de-reflection optimization in HotSpot JIT and how does it implemented? - Stack Overflow</a></li><li><a href="https://www.zhihu.com/question/19826278/answer/44331421" rel="external nofollow noopener noreferrer" target="_blank">Java 反射到底慢在哪里？ - 知乎</a></li><li><a href="http://www.fanyilun.me/2015/10/29/Java%E5%8F%8D%E5%B0%84%E5%8E%9F%E7%90%86/" rel="external nofollow noopener noreferrer" target="_blank">Java反射原理简析 | Yilun Fan’s Blog</a></li><li><a href="https://time.geekbang.org/column/article/12192" rel="external nofollow noopener noreferrer" target="_blank">07 | JVM是如何实现反射的？</a></li><li><a href="https://mp.weixin.qq.com/s/5H6UHcP6kvR2X5hTj_SBjA" rel="external nofollow noopener noreferrer" target="_blank">假笨说-从一起GC血案谈到反射原理</a></li><li><a href="https://www.jianshu.com/p/20b7ab284c0a" rel="external nofollow noopener noreferrer" target="_blank">反射代理类加载器的潜在内存使用问题 - 简书</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;反射很慢？&quot;&gt;&lt;a href=&quot;#反射很慢？&quot; class=&quot;headerlink&quot; title=&quot;反射很慢？&quot;&gt;&lt;/a&gt;反射很慢？&lt;/h1&gt;&lt;p&gt;有些人说反射很慢，但是也没有人真正地测试过。spring的代码里有好多使用反射的地方，所以性能应该也没有那么差。&lt;/
      
    
    </summary>
    
    
      <category term="jvm" scheme="http://qsli.github.io/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>open-tracing</title>
    <link href="http://qsli.github.io/2022/07/08/open-tracing/"/>
    <id>http://qsli.github.io/2022/07/08/open-tracing/</id>
    <published>2022-07-07T16:19:21.000Z</published>
    <updated>2022-07-07T16:19:21.734Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Open-Tracing"><a href="#Open-Tracing" class="headerlink" title="Open-Tracing"></a>Open-Tracing</h2><blockquote><p>现代微服务架构正在逐渐普及。面对真正高并发的生产系统，解耦成大量微服务后，以前容易实现的重点任务变得不容易实现了：用户体验优化、后台真实错误原因分析、系统内各组件的调用情况等。分布式跟踪系统（Zipkin、Dapper、HTrace、X-Trace等）可以解决这个问题，但是这些系统使用不兼容的API，难以整合到一起。</p><p><strong>OpenTracing提供平台无关、厂商无关的API，让开发人员可以方便地添加、更换追踪系统。</strong></p></blockquote><p>相当于是在做标准化，类似日志中的SLF4j，目前还在发展中。</p><h3 id="Trace概念"><a href="#Trace概念" class="headerlink" title="Trace概念"></a>Trace概念</h3><p>1、Trace(追踪):<br>在广义上，一个trace代表了一个事务或者流程在（分布式）系统中的执行过程。在OpenTracing标准中，trace是多个span组成的一个有向无环图（DAG），每一个span代表trace中被命名并计时的连续性的执行片段。</p><p>2、Span(跨度)：一个span代表系统中具有开始时间和执行时长的逻辑运行单元。span之间通过嵌套或者顺序排列建立逻辑因果关系。</p><img src="/2022/07/08/open-tracing/image-20210312022847325.png"><img src="/2022/07/08/open-tracing/image-20210312022824793.png"><h4 id="TraceId作用"><a href="#TraceId作用" class="headerlink" title="TraceId作用"></a>TraceId作用</h4><ul><li>串起来一次请求</li></ul><img src="/2022/07/08/open-tracing/image-20210312022800718.png"><ul><li><p>request-id</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"RequestId"</span>: <span class="string">"4C467B38-3910-447D-87BC-AC049166F216"</span></span><br><span class="line">    /* 返回结果数据 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三方有问题反馈时，可以拿着这个id作为凭证，就省去了很多沟通的问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-app-api-01 logs]$ curl -sI <span class="string">'http://api2.yaduo.com/atourlife/duomicang/queryDuoMiCangTabOtherData?appVer=3.6.0&amp;channelId=10005&amp;platType=1&amp;token=7254035f0e3e4d05bc7af3afb54f313e&amp;deviceId=73519b32-c539-3c18-af4c-ce4523938bb9&amp;activitySource=ydaandroid&amp;activeId=&amp;inactiveId='</span></span><br><span class="line">HTTP/1.1 200</span><br><span class="line">Date: Fri, 12 Mar 2021 06:19:56 GMT</span><br><span class="line">Content-Type: application/json;charset=UTF-8</span><br><span class="line">Content-Length: 2477</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Set-Cookie: acw_tc=2760829916155299964998880ec4036c629fa0b9319095cdd9fffc150bc930;path=/;HttpOnly;Max-Age=1800</span><br><span class="line">ZIPKIN-TRACE-ID: f39f5791988ff5b2</span><br></pre></td></tr></table></figure><img src="/2022/07/08/open-tracing/image-20210312142240390.png"></li><li><p>elk关联日志</p><img src="/2022/07/08/open-tracing/image-20210312022225378.png"></li><li><p>幂等</p></li></ul><h2 id="OpenZipkin"><a href="#OpenZipkin" class="headerlink" title="OpenZipkin"></a>OpenZipkin</h2><h3 id="Brave"><a href="#Brave" class="headerlink" title="Brave"></a>Brave</h3><blockquote><p>Brave is a distributed tracing instrumentation library. </p><p>Brave’s dependency-free <a href="https://github.com/openzipkin/brave/blob/master/brave" rel="external nofollow noopener noreferrer" target="_blank">tracer library</a> works against JRE6+. </p></blockquote><p>可以简单理解为标准的实现（类比logback和log4j）</p><h4 id="Trace上下文传递"><a href="#Trace上下文传递" class="headerlink" title="Trace上下文传递"></a>Trace上下文传递</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> Client Tracer                                                  Server Tracer     </span><br><span class="line">┌───────────────────────┐                                       ┌───────────────────────┐</span><br><span class="line">│                       │                                       │                       │</span><br><span class="line">│   TraceContext        │          Http Request Headers         │   TraceContext        │</span><br><span class="line">│ ┌───────────────────┐ │         ┌───────────────────┐         │ ┌───────────────────┐ │</span><br><span class="line">│ │ TraceId           │ │         │ X-B3-TraceId      │         │ │ TraceId           │ │</span><br><span class="line">│ │                   │ │         │                   │         │ │                   │ │</span><br><span class="line">│ │ ParentSpanId      │ │ Inject  │ X-B3-ParentSpanId │ Extract │ │ ParentSpanId      │ │</span><br><span class="line">│ │                   ├─┼────────&gt;│                   ├─────────┼&gt;│                   │ │</span><br><span class="line">│ │ SpanId            │ │         │ X-B3-SpanId       │         │ │ SpanId            │ │</span><br><span class="line">│ │                   │ │         │                   │         │ │                   │ │</span><br><span class="line">│ │ Sampling decision │ │         │ X-B3-Sampled      │         │ │ Sampling decision │ │</span><br><span class="line">│ └───────────────────┘ │         └───────────────────┘         │ └───────────────────┘ │</span><br><span class="line">│                       │                                       │                       │</span><br><span class="line">└───────────────────────┘                                       └───────────────────────┘</span><br></pre></td></tr></table></figure><p>http请求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">2021-03-12 01:29:19.624 INFO [order-center,f211feedd7b9904e,9c4b9442005296fb,<span class="literal">true</span>] --- [o-9301-exec-131] http.request.response.log                :</span><br><span class="line">ip: 192.168.6.214</span><br><span class="line">POST http://192.168.6.215:9301/point/pay/query/list?</span><br><span class="line">x-b3-spanid: 9c4b9442005296fb</span><br><span class="line">x-b3-parentspanid: 5e901c4a1fb6be73</span><br><span class="line">x-b3-sampled: 1</span><br><span class="line">x-b3-traceid: f211feedd7b9904e</span><br><span class="line">appcode: pms</span><br><span class="line">content-type: application/json;charset=UTF-8</span><br><span class="line">accept: */*</span><br><span class="line">host: 192.168.6.215:9301</span><br><span class="line">connection: Keep-Alive</span><br><span class="line">user-agent: Apache-HttpClient/4.5.6 (Java/1.8.0_171)</span><br><span class="line">accept-encoding: gzip,deflate</span><br><span class="line">atour-time-out: 1000,20000</span><br><span class="line">atour-proxyee-info: http://192.168.6.215:9301</span><br><span class="line"></span><br><span class="line">&#123;  <span class="string">"chainId"</span> : 440319,  <span class="string">"folioIdList"</span> : [ 2589101966 ]&#125;</span><br><span class="line"></span><br><span class="line">ret code 200, start time 1615483759621 --&gt; end time 1615483759624, cost: 3</span><br></pre></td></tr></table></figure><p>header中的<code>x-b3</code>开头的会自动传递下去</p><p>采样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">                                Server Tracer     </span><br><span class="line">                              ┌───────────────────────┐</span><br><span class="line"> Health check request         │                       │</span><br><span class="line">┌───────────────────┐         │   TraceContext        │</span><br><span class="line">│ GET /health       │ Extract │ ┌───────────────────┐ │</span><br><span class="line">│ X-B3-Sampled: 0   ├─────────┼&gt;│ NoOp              │ │</span><br><span class="line">└───────────────────┘         │ └───────────────────┘ │</span><br><span class="line">                              └───────────────────────┘</span><br></pre></td></tr></table></figure><h3 id="zipkin"><a href="#zipkin" class="headerlink" title="zipkin"></a>zipkin</h3><img src="/2022/07/08/open-tracing/architecture-1.png"><ul><li><p>上报</p><img src="/2022/07/08/open-tracing/2f84e3a7-de34-449b-8733-e944bd103772.jpg"><ul><li><p>上报方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function">Tracing <span class="title">tracing</span><span class="params">(@Value(<span class="string">"$&#123;spring.application.name&#125;"</span>)</span> String serviceName, @<span class="title">Value</span><span class="params">(<span class="string">"$&#123;spring.zipkin.base-url:&#125;"</span>)</span> String zipkinServer) </span>&#123;</span><br><span class="line">  Reporter reporter = Reporter.NOOP;</span><br><span class="line">  <span class="keyword">if</span> (StringUtils.isNotBlank(zipkinServer)) &#123;</span><br><span class="line">    reporter = AsyncReporter.builder(OkHttpSender.create(zipkinServer))</span><br><span class="line">      .queuedMaxSpans(<span class="number">1000</span>) <span class="comment">// historical constraint. Note: AsyncReporter supports memory bounds</span></span><br><span class="line">      .messageTimeout(<span class="number">1</span>, TimeUnit.SECONDS)</span><br><span class="line">      .metrics(ReporterMetrics.NOOP_METRICS)</span><br><span class="line">      .build(SpanBytesEncoder.JSON_V2);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">final</span> SamplerProperties samplerProperties = <span class="keyword">new</span> SamplerProperties();</span><br><span class="line">  <span class="comment">// 默认全采样</span></span><br><span class="line">  samplerProperties.setProbability(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> Tracing.newBuilder()</span><br><span class="line">    .sampler(<span class="keyword">new</span> ProbabilityBasedSampler(samplerProperties))</span><br><span class="line">    .localServiceName(serviceName)</span><br><span class="line">    .propagationFactory(ExtraFieldPropagation.newFactory(B3Propagation.FACTORY, <span class="string">"user-name"</span>))</span><br><span class="line">    .currentTraceContext(Slf4jCurrentTraceContext.create(ThreadLocalCurrentTraceContext.newBuilder()</span><br><span class="line">                                                         .build()))</span><br><span class="line">    .spanReporter(reporter)</span><br><span class="line">    .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><pre><code>- 采样- Reporter- eureka支持</code></pre><ul><li>挂掉影响<ul><li>Zipkin 展示端</li><li><img src="/2022/07/08/open-tracing/web-screenshot.png"></li><li><img src="/2022/07/08/open-tracing/dependency-graph.png"></li><li>zipkin存储</li></ul></li><li>mysql<ul><li>玩具</li></ul></li><li>elastic-search<ul><li>调优<ul><li>translog</li><li>Refresh_interval</li><li>_id</li></ul></li><li>保留几天</li><li>定时删除脚本</li><li>elastic-search的template</li></ul></li></ul><h3 id="系统接入"><a href="#系统接入" class="headerlink" title="系统接入"></a>系统接入</h3><h2 id="Spring-Cloud"><a href="#Spring-Cloud" class="headerlink" title="Spring-Cloud"></a>Spring-Cloud</h2><h3 id="Sleuth"><a href="#Sleuth" class="headerlink" title="Sleuth"></a>Sleuth</h3><blockquote><p>Sleuth configures everything you need to get started. This includes where trace data (spans) are reported to, how many traces to keep (sampling), if remote fields (baggage) are sent, and which libraries are traced.</p><p>Spring Cloud Sleuth integrates with the OpenZipkin Brave tracer via the bridge that is available in the <code>spring-cloud-sleuth-brave</code> module.</p></blockquote><ul><li><p>baggage</p><ul><li><p>Request级别的日志debug开关</p><p>@see <a href="http://wiki.corp.yaduo.com/index.php/Sleuth-debug-flag" rel="external nofollow noopener noreferrer" target="_blank">Sleuth-debug-flag - Atour Wiki</a></p></li></ul></li></ul><img src="/2022/07/08/open-tracing/image-20210312130036912.png"> <img src="/2022/07/08/open-tracing/image-20210312125542638.png"> <img src="/2022/07/08/open-tracing/image-20210312125715781.png"> <img src="/2022/07/08/open-tracing/image-20210312125618924.png"> <img src="/2022/07/08/open-tracing/image-20210312125751929.png"> <img src="/2022/07/08/open-tracing/image-20210312125846371.png"><ul><li>@NewSpan</li><li>@SpanTag</li><li>@ContinueSpan</li></ul><p>相关代码位置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.cloud.sleuth.instrument.web.TraceWebServletAutoConfiguration</span></span><br><span class="line"><span class="comment">// brave.servlet.TracingFilter</span></span><br><span class="line"><span class="comment">// org.springframework.cloud.sleuth.autoconfig.TraceAutoConfiguration#sleuthPropagation</span></span><br><span class="line"><span class="comment">// org.springframework.cloud.sleuth.log.SleuthLogAutoConfiguration</span></span><br><span class="line"></span><br><span class="line">Slf4jCurrentTraceContext &lt;- CurrentTraceContext</span><br></pre></td></tr></table></figure><p>埋点增强</p><ul><li><p>db</p></li><li><p>线程池</p><ul><li><p>Brave:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// brave.propagation.CurrentTraceContext</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Decorates the input such that the &#123;<span class="doctag">@link</span> #get() current trace context&#125; at the time a task is</span></span><br><span class="line"><span class="comment">   * scheduled is made current when the task is executed.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ExecutorService <span class="title">executorService</span><span class="params">(ExecutorService delegate)</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">CurrentTraceContextExecutorService</span> <span class="keyword">extends</span> <span class="title">brave</span>.<span class="title">internal</span>.<span class="title">WrappingExecutorService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> ExecutorService <span class="title">delegate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> delegate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="keyword">protected</span> &lt;C&gt; <span class="function">Callable&lt;C&gt; <span class="title">wrap</span><span class="params">(Callable&lt;C&gt; task)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> CurrentTraceContext.<span class="keyword">this</span>.wrap(task);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> Runnable <span class="title">wrap</span><span class="params">(Runnable task)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> CurrentTraceContext.<span class="keyword">this</span>.wrap(task);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> CurrentTraceContextExecutorService();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** Wraps the input so that it executes with the same context as now. */</span></span><br><span class="line"><span class="keyword">public</span> &lt;C&gt; <span class="function">Callable&lt;C&gt; <span class="title">wrap</span><span class="params">(Callable&lt;C&gt; task)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> TraceContext invocationContext = get();</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">CurrentTraceContextCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">C</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> C <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> (Scope scope = maybeScope(invocationContext)) &#123;</span><br><span class="line">        <span class="keyword">return</span> task.call();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> CurrentTraceContextCallable();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>sleuth:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.cloud.sleuth.instrument.async.LazyTraceExecutor</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.tracing == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.tracing = <span class="keyword">this</span>.beanFactory.getBean(Tracing<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (NoSuchBeanDefinitionException e) &#123;</span><br><span class="line">      <span class="keyword">this</span>.delegate.execute(command);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.delegate.execute(<span class="keyword">new</span> TraceRunnable(<span class="keyword">this</span>.tracing, spanNamer(), command));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.cloud.sleuth.instrument.async.ExecutorBeanPostProcessor  代理逻辑</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>bolt</p></li><li><p>feign</p></li><li><p>rocketmq</p></li></ul><h2 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="http://wiki.corp.yaduo.com/index.php/Zikin-server%E8%BF%90%E7%BB%B4" rel="external nofollow noopener noreferrer" target="_blank">Zikin-server运维 - Atour Wiki</a></li><li><a href="https://opentracing.io/docs/overview/what-is-tracing/" rel="external nofollow noopener noreferrer" target="_blank">What is Distributed Tracing?</a></li><li><a href="https://blog.btstream.net/post/2019-01-14-spring-cloud-sleuth-2.0%E6%A6%82%E8%A6%81%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/" rel="external nofollow noopener noreferrer" target="_blank">Spring Cloud Sleuth 2.0概要使用说明 - BTStream’s Blog</a></li><li><a href="https://github.com/spring-cloud/spring-cloud-sleuth" rel="external nofollow noopener noreferrer" target="_blank">GitHub - spring-cloud/spring-cloud-sleuth: Distributed tracing for spring cloud</a></li><li><a href="https://zhuanlan.zhihu.com/p/268740698" rel="external nofollow noopener noreferrer" target="_blank">OpenTracing基本原理 - 知乎</a></li><li><a href="https://wu-sheng.gitbooks.io/opentracing-io/content/" rel="external nofollow noopener noreferrer" target="_blank">openTracing文档中文版</a></li><li><a href="https://github.com/openzipkin/brave" rel="external nofollow noopener noreferrer" target="_blank">GitHub - openzipkin/brave: Java distributed tracing implementation compatible with Zipkin backend services.</a></li><li><a href="http://wiki.corp.yaduo.com/index.php/Sleuth-debug-flag" rel="external nofollow noopener noreferrer" target="_blank">Sleuth-debug-flag - Atour Wiki</a></li><li><a href="https://itzone.com.vn/en/article/introducing-to-zipkin-distribution-tracing/amp/" rel="external nofollow noopener noreferrer" target="_blank">Introducing to Zipkin - Distribution Tracing - ITZone</a></li><li><a href="https://zipkin.io/" rel="external nofollow noopener noreferrer" target="_blank">OpenZipkin · A distributed tracing system</a></li><li><a href="https://github.com/openzipkin/b3-propagation" rel="external nofollow noopener noreferrer" target="_blank">GitHub - openzipkin/b3-propagation: Repository that describes and sometimes implements B3 propagation</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MjM5MDI3MjA5MQ==&amp;mid=2697266385&amp;idx=2&amp;sn=2712989b72306cb153e1fcbac216bef2&amp;chksm=8376fbe5b40172f35eb049e81fdd0f554a281458acb6ff0066e7da9ce15e52d0e67bc42ae4ac&amp;mpshare=1&amp;scene=1&amp;srcid=0403dk8RFwBQSrcJQGiZW0Pm%23rd" rel="external nofollow noopener noreferrer" target="_blank">干货 | Qunar全链路跟踪及Debug</a></li><li><a href="http://zipkin.kibana.corp.yaduo-l.com/app/kibana" rel="external nofollow noopener noreferrer" target="_blank">zipkin-Kibana</a></li><li><a href="http://elk.corp.yaduo-l.com/app/kibana#/discover?_g=(" rel="external nofollow noopener noreferrer" target="_blank">elk-Discover - Kibana</a>&amp;_a=(columns:!(_source),index:’01f5dec0-e772-11ea-9d81-e1017b1b6645’,interval:auto,query:(language:lucene,query:ee3ceac468425f6e),sort:!(‘@timestamp’,desc)))</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Open-Tracing&quot;&gt;&lt;a href=&quot;#Open-Tracing&quot; class=&quot;headerlink&quot; title=&quot;Open-Tracing&quot;&gt;&lt;/a&gt;Open-Tracing&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;现代微服务架构正在逐渐普及。面对真
      
    
    </summary>
    
      <category term="microservice" scheme="http://qsli.github.io/categories/microservice/"/>
    
    
      <category term="tracing" scheme="http://qsli.github.io/tags/tracing/"/>
    
  </entry>
  
  <entry>
    <title>tomcat-startup-2</title>
    <link href="http://qsli.github.io/2021/12/05/tomcat-startup-2/"/>
    <id>http://qsli.github.io/2021/12/05/tomcat-startup-2/</id>
    <published>2021-12-05T12:07:45.000Z</published>
    <updated>2021-12-05T12:07:45.376Z</updated>
    
    <content type="html"><![CDATA[<p>书接上回，我们从启动脚本跟踪到了<code>Bootstrap</code>类，发现它只是个<strong>传话筒</strong>，内部通过发射将调用都转给了<code>Catalina</code>，用官方的话来说就是<code>roundabout approach</code>（迂回战术），目的是为了不将tomcat的内部lib暴露给class path。</p><p>这篇文章，我们就分析下<code>Catalina</code>以及tomcat内部的关键组件的启动。</p><p>先看下tomcat的整体组件，按web.xml中的声明，主要包含Catalina、Server、Service、Connector、Engine、Host、Context、Wrapper等，以及图中没有画到的Valve、Listener等组件。</p><img src="/2021/12/05/tomcat-startup-2/tomcat-arch.jpg"><h1 id="Catalina"><a href="#Catalina" class="headerlink" title="Catalina"></a>Catalina</h1><blockquote><p>Startup/Shutdown shell program for Catalina. </p></blockquote><p>Catalina提供了命令行参数的解析，持有Server对象，主要提供的功能：</p><ul><li><p>start</p><ul><li>digester解析web.xml</li><li>调用Server的init方法</li></ul></li><li><p>stop</p><ul><li>ShutdownHook</li></ul></li><li><p>Configtest</p></li></ul><p>从前面的分析我们知道，Bootstrap是通过反射直接调用的Catalina的start方法，start方法的实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.catalina.startup.Catalina#start</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Start a new server instance.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (getServer() == <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="comment">// 首次会走到这里，负责加载web.xml，初始化对应的组件</span></span><br><span class="line">            load();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (getServer() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            log.fatal(<span class="string">"Cannot start server. Server instance is not configured."</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start the new server</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 调用server的start方法</span></span><br><span class="line">            getServer().start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (LifecycleException e) &#123;</span><br><span class="line">            log.fatal(sm.getString(<span class="string">"catalina.serverStartFail"</span>), e);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                getServer().destroy();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (LifecycleException e1) &#123;</span><br><span class="line">                log.debug(<span class="string">"destroy() failed for failed Server "</span>, e1);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> t2 = System.nanoTime();</span><br><span class="line">        <span class="keyword">if</span>(log.isInfoEnabled()) &#123;</span><br><span class="line">            log.info(<span class="string">"Server startup in "</span> + ((t2 - t1) / <span class="number">1000000</span>) + <span class="string">" ms"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Register shutdown hook</span></span><br><span class="line">        <span class="keyword">if</span> (useShutdownHook) &#123;</span><br><span class="line">            <span class="keyword">if</span> (shutdownHook == <span class="keyword">null</span>) &#123;</span><br><span class="line">                shutdownHook = <span class="keyword">new</span> CatalinaShutdownHook();</span><br><span class="line">            &#125;</span><br><span class="line">            Runtime.getRuntime().addShutdownHook(shutdownHook);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// If JULI is being used, disable JULI's shutdown hook since</span></span><br><span class="line">            <span class="comment">// shutdown hooks run in parallel and log messages may be lost</span></span><br><span class="line">            <span class="comment">// if JULI's hook completes before the CatalinaShutdownHook()</span></span><br><span class="line">            LogManager logManager = LogManager.getLogManager();</span><br><span class="line">            <span class="keyword">if</span> (logManager <span class="keyword">instanceof</span> ClassLoaderLogManager) &#123;</span><br><span class="line">                ((ClassLoaderLogManager) logManager).setUseShutdownHook(</span><br><span class="line">                        <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// startup时Bootstrap会设置为true</span></span><br><span class="line">      <span class="comment">// 调用server的await，退出后调用自身的stop方法</span></span><br><span class="line">        <span class="keyword">if</span> (await) &#123;</span><br><span class="line">            await();</span><br><span class="line">            stop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>load</code>方法里就是解析web.xml的具体过程，这里就不赘述了，同时load方法里会<strong>调用server的init方法</strong>进行初始化，绑定Server所属的Catalina。</p><p>初始化之后，就直接<strong>调用了Server的start方法</strong>，触发其包含的组件的启动。然后这里还注册了Jvm的shutdownHook，关闭的时候也会调用Catalina的stop方法。</p><p>最后，调用server的await方法，等待Server的声明周期结束。</p><h1 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h1><p>Server是tomcat中比较重要的组件，默认实现是<code>StandardServer</code>。主要提供的功能：</p><ul><li>管理Service组件<ul><li>addService</li><li>removeService</li><li>findService</li></ul></li><li>shutdown端口监听</li><li>naming相关的功能</li><li>可以设置ParentClassLoader（后面讲类加载的时候，会统一讲）</li></ul><p>Server实现了Lifecycle接口，我们着重关注下<code>initInternal</code>方法和<code>startInternal</code>方法。</p><h2 id="initInternal"><a href="#initInternal" class="headerlink" title="initInternal"></a>initInternal</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.catalina.core.StandardServer#initInternal</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.initInternal();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Register global String cache</span></span><br><span class="line">        <span class="comment">// Note although the cache is global, if there are multiple Servers</span></span><br><span class="line">        <span class="comment">// present in the JVM (may happen when embedding) then the same cache</span></span><br><span class="line">        <span class="comment">// will be registered under multiple names</span></span><br><span class="line">        onameStringCache = register(<span class="keyword">new</span> StringCache(), <span class="string">"type=StringCache"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Register the MBeanFactory</span></span><br><span class="line">        MBeanFactory factory = <span class="keyword">new</span> MBeanFactory();</span><br><span class="line">        factory.setContainer(<span class="keyword">this</span>);</span><br><span class="line">        onameMBeanFactory = register(factory, <span class="string">"type=MBeanFactory"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Register the naming resources</span></span><br><span class="line">        globalNamingResources.init();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Populate the extension validator with JARs from common and shared</span></span><br><span class="line">        <span class="comment">// class loaders</span></span><br><span class="line">       <span class="comment">// 省略...</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">// Initialize our defined Services</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; services.length; i++) &#123;</span><br><span class="line">            services[i].init();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在前面的文章中，我们知道Server默认实现了<code>LifecycleMbeanBase</code>,会自动将自身暴露给Jmx，这里Server手动也额外地注册了个MBean的对象。然后初始化了Naming相关的东西，extension validator。最后也是最关键的，对Server中包含的所有的Service<strong>调用其init方法</strong>，触发其初始化。</p><h2 id="startInternal"><a href="#startInternal" class="headerlink" title="startInternal"></a>startInternal</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.catalina.core.StandardServer#startInternal</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">        fireLifecycleEvent(CONFIGURE_START_EVENT, <span class="keyword">null</span>);</span><br><span class="line">        setState(LifecycleState.STARTING);</span><br><span class="line"></span><br><span class="line">        globalNamingResources.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start our defined Services</span></span><br><span class="line">        <span class="keyword">synchronized</span> (servicesLock) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; services.length; i++) &#123;</span><br><span class="line">                services[i].start();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里除了基类默认触发的时间，这里也有自己定义的<code>CONFIGURE_START_EVENT</code>事件，然后触发naming相关的启动。最后，<strong>调用对应Service的start方法</strong>。</p><h2 id="await"><a href="#await" class="headerlink" title="await"></a>await</h2><p>Catalina会调用Server的await，来等待Server结束服务。await的实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.catalina.core.StandardServer#await</span></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Wait until a proper shutdown command is received, then return.</span></span><br><span class="line"><span class="comment">     * This keeps the main thread alive - the thread pool listening for http</span></span><br><span class="line"><span class="comment">     * connections is daemon threads.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Negative values - don't wait on port - tomcat is embedded or we just don't like ports</span></span><br><span class="line">        <span class="keyword">if</span>( port == -<span class="number">2</span> ) &#123;</span><br><span class="line">            <span class="comment">// undocumented yet - for embedding apps that are around, alive.</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">// port没有定义的话，就直接没10s检查一次是否结束服务</span></span><br><span class="line">      <span class="comment">// 这里使用了变量awaitThread来标识结束，当然他是volatile的</span></span><br><span class="line">        <span class="keyword">if</span>( port==-<span class="number">1</span> ) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                awaitThread = Thread.currentThread();</span><br><span class="line">                <span class="keyword">while</span>(!stopAwait) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep( <span class="number">10000</span> );</span><br><span class="line">                    &#125; <span class="keyword">catch</span>( InterruptedException ex ) &#123;</span><br><span class="line">                        <span class="comment">// continue and check the flag</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                awaitThread = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 这里会启动一个Server，监听shutdown的端口，和发过来的命令</span></span><br><span class="line">        <span class="comment">// Set up a server socket to wait on</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            awaitSocket = <span class="keyword">new</span> ServerSocket(port, <span class="number">1</span>,</span><br><span class="line">                    InetAddress.getByName(address));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">"StandardServer.await: create["</span> + address</span><br><span class="line">                               + <span class="string">":"</span> + port</span><br><span class="line">                               + <span class="string">"]: "</span>, e);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            awaitThread = Thread.currentThread();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Loop waiting for a connection and a valid command</span></span><br><span class="line">            <span class="keyword">while</span> (!stopAwait) &#123;</span><br><span class="line">                ServerSocket serverSocket = awaitSocket;</span><br><span class="line">                <span class="keyword">if</span> (serverSocket == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Wait for the next connection</span></span><br><span class="line">                Socket socket = <span class="keyword">null</span>;</span><br><span class="line">                StringBuilder command = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    InputStream stream;</span><br><span class="line">                    <span class="keyword">long</span> acceptStartTime = System.currentTimeMillis();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        socket = serverSocket.accept();</span><br><span class="line">                        socket.setSoTimeout(<span class="number">10</span> * <span class="number">1000</span>);  <span class="comment">// Ten seconds</span></span><br><span class="line">                        stream = socket.getInputStream();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (SocketTimeoutException ste) &#123;</span><br><span class="line">                        <span class="comment">// This should never happen but bug 56684 suggests that</span></span><br><span class="line">                        <span class="comment">// it does.</span></span><br><span class="line">                        log.warn(sm.getString(<span class="string">"standardServer.accept.timeout"</span>,</span><br><span class="line">                                Long.valueOf(System.currentTimeMillis() - acceptStartTime)), ste);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (AccessControlException ace) &#123;</span><br><span class="line">                        log.warn(<span class="string">"StandardServer.accept security exception: "</span></span><br><span class="line">                                + ace.getMessage(), ace);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (stopAwait) &#123;</span><br><span class="line">                            <span class="comment">// Wait was aborted with socket.close()</span></span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        log.error(<span class="string">"StandardServer.await: accept: "</span>, e);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// Read a set of characters from the socket</span></span><br><span class="line">                    <span class="keyword">int</span> expected = <span class="number">1024</span>; <span class="comment">// Cut off to avoid DoS attack</span></span><br><span class="line">                    <span class="keyword">while</span> (expected &lt; shutdown.length()) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (random == <span class="keyword">null</span>)</span><br><span class="line">                            random = <span class="keyword">new</span> Random();</span><br><span class="line">                        expected += (random.nextInt() % <span class="number">1024</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">while</span> (expected &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">int</span> ch = -<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            ch = stream.read();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                            log.warn(<span class="string">"StandardServer.await: read: "</span>, e);</span><br><span class="line">                            ch = -<span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// Control character or EOF (-1) terminates loop</span></span><br><span class="line">                        <span class="keyword">if</span> (ch &lt; <span class="number">32</span> || ch == <span class="number">127</span>) &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        command.append((<span class="keyword">char</span>) ch);</span><br><span class="line">                        expected--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// Close the socket now that we are done with it</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            socket.close();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        <span class="comment">// Ignore</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Match against our command string</span></span><br><span class="line">                <span class="keyword">boolean</span> match = command.toString().equals(shutdown);</span><br><span class="line">                <span class="keyword">if</span> (match) &#123;</span><br><span class="line">                    log.info(sm.getString(<span class="string">"standardServer.shutdownViaPort"</span>));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line">                    log.warn(<span class="string">"StandardServer.await: Invalid command '"</span></span><br><span class="line">                            + command.toString() + <span class="string">"' received"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ServerSocket serverSocket = awaitSocket;</span><br><span class="line">            awaitThread = <span class="keyword">null</span>;</span><br><span class="line">            awaitSocket = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Close the server socket and return</span></span><br><span class="line">            <span class="keyword">if</span> (serverSocket != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    serverSocket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    <span class="comment">// Ignore</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>配置了shutdown端口，会监听这个端口，如果发送过来的是<code>SHUTDOWN</code>的命令，就会调用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">"8005"</span> <span class="attr">shutdown</span>=<span class="string">"SHUTDOWN"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">➜  bin  telnet localhost 8005</span><br><span class="line">Trying ::1...</span><br><span class="line">telnet: connect to address ::1: Connection refused</span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line">sdf</span><br><span class="line">Connection closed by foreign host.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面的命令不对，tomcat没有反应，这里还能连接8005端口</span></span><br><span class="line">➜  bin  telnet localhost 8005</span><br><span class="line">Trying ::1...</span><br><span class="line">telnet: connect to address ::1: Connection refused</span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line">SHUTDOWN</span><br><span class="line">Connection closed by foreign host.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时tomcat已经被shutdown了</span></span><br><span class="line">➜  bin  telnet localhost 8005</span><br><span class="line">Trying ::1...</span><br><span class="line">telnet: connect to address ::1: Connection refused</span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">telnet: connect to address 127.0.0.1: Connection refused</span><br><span class="line">telnet: Unable to connect to remote host</span><br></pre></td></tr></table></figure><p>被shutdown的同时，会在Catalina.out中打印如下的日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">27-Nov-2021 21:00:14.933 INFO [main] org.apache.catalina.core.StandardServer.await A valid shutdown <span class="built_in">command</span> was received via the shutdown port. Stopping the Server instance.</span><br></pre></td></tr></table></figure><p>如果下次，tomcat莫名奇妙shutdown了，可以考虑下是不是被人打接口导致的。</p><h1 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h1><blockquote><p>A “Service” is a collection of one or more “Connectors” that share</p><p>a single “Container” Note:  A “Service” is not itself a “Container”,</p><p> so you may not define subcomponents such as “Valves” at this level.</p></blockquote><p>service的作用就是连接多个<code>Connectors</code>和一个<code>Container</code>。主要提供的功能：</p><ul><li>管理Engine<ul><li>getContainer/setContainer</li></ul></li><li>管理Connector组件<ul><li>addConnector</li><li>findConnectors</li><li>removeConnector</li></ul></li><li>管理executor<ul><li>addExecutor</li><li>findExecutors</li><li>getExecutor</li><li>removeExecutor</li></ul></li><li>Mapper/MapperListener的管理</li></ul><h2 id="initInternal-1"><a href="#initInternal-1" class="headerlink" title="initInternal"></a>initInternal</h2><p>init操作也是中规中矩，没有特殊操作，挨个调用被管理的Engine/Connector/Executor/MapperListener的<code>init</code>方法。</p><h2 id="startInternal-1"><a href="#startInternal-1" class="headerlink" title="startInternal"></a>startInternal</h2><p>同initInternal一样，调用子组件的start方法。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>Connector内部是数组存储的，每次修改操作会加锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The set of Connectors associated with this Service.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">protected</span> Connector connectors[] = <span class="keyword">new</span> Connector[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Object connectorsLock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Add a new Connector to the set of defined Connectors, and associate it</span></span><br><span class="line"><span class="comment">     * with this Service's Container.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connector The Connector to be added</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addConnector</span><span class="params">(Connector connector)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (connectorsLock) &#123;</span><br><span class="line">          <span class="comment">// 省略</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>重要属性变更时，会发出一个PropertyChangeEvent:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The property change support for this component.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> PropertyChangeSupport support = <span class="keyword">new</span> PropertyChangeSupport(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Report this property change to interested listeners</span></span><br><span class="line">support.firePropertyChange(<span class="string">"container"</span>, oldEngine, <span class="keyword">this</span>.engine);</span><br></pre></td></tr></table></figure><h1 id="Engine"><a href="#Engine" class="headerlink" title="Engine"></a>Engine</h1><blockquote><p>If used, an Engine is always the top level Container in a Catalina hierarchy.</p><p> It is useful in the following types of scenarios:</p><ol><li>You wish to use Interceptors that see every single request processed<br>   by the entire engine.</li><li>You wish to run Catalina in with a standalone HTTP connector, but still<br>   want support for multiple virtual hosts.</li></ol></blockquote><p>Engine容器的子容器，必须是Host容器，而且他自身必须是top level的容器，也就是不能有parent 容器。Engine下可以配置Valve，可以拦截所有的请求。同时可以配置多个virtual host。</p><p>默认的实现是<code>StandardEngine</code>，<code>StandardEngine</code>继承了<code>ContainerBase</code>，<code>ContainerBase</code>实现了子容器的管理、以及<code>ContainerListener</code>的管理。</p><h2 id="initInternal-2"><a href="#initInternal-2" class="headerlink" title="initInternal"></a>initInternal</h2><p>Engine自身没有特殊的实现，逻辑都在ContainerBase中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.catalina.core.ContainerBase#initInternal</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line">  BlockingQueue&lt;Runnable&gt; startStopQueue = <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;();</span><br><span class="line">  startStopExecutor = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">    getStartStopThreadsInternal(),</span><br><span class="line">    getStartStopThreadsInternal(), <span class="number">10</span>, TimeUnit.SECONDS,</span><br><span class="line">    startStopQueue,</span><br><span class="line">    <span class="keyword">new</span> StartStopThreadFactory(getName() + <span class="string">"-startStop-"</span>));</span><br><span class="line">  startStopExecutor.allowCoreThreadTimeOut(<span class="keyword">true</span>);</span><br><span class="line">  <span class="keyword">super</span>.initInternal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>仅仅是初始化了一个<code>startStopExecutor</code></p><h2 id="startInternal-2"><a href="#startInternal-2" class="headerlink" title="startInternal"></a>startInternal</h2><p>逻辑也在ContainerBase中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.catalina.core.ContainerBase#startInternal</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start our subordinate components, if any</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start our child containers, if any</span></span><br><span class="line">        Container children[] = findChildren();</span><br><span class="line">        List&lt;Future&lt;Void&gt;&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 子容器的启动是在刚才创建的线程池中</span></span><br><span class="line">            results.add(startStopExecutor.submit(<span class="keyword">new</span> StartChild(children[i])));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> fail = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (Future&lt;Void&gt; result : results) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                result.get();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(sm.getString(<span class="string">"containerBase.threadedStartFailed"</span>), e);</span><br><span class="line">                fail = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fail) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(</span><br><span class="line">                    sm.getString(<span class="string">"containerBase.threadedStartFailed"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start the Valves in our pipeline (including the basic), if any</span></span><br><span class="line">        <span class="keyword">if</span> (pipeline <span class="keyword">instanceof</span> Lifecycle)</span><br><span class="line">            ((Lifecycle) pipeline).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        setState(LifecycleState.STARTING);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 后台线程</span></span><br><span class="line">        <span class="comment">// Start our thread</span></span><br><span class="line">        threadStart();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h1><p>Engine的子容器是Host容器，它与url中的host对应，server.xml中的配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置中指定了该host的部署目录，比如webapps，是否自动解压war包，自动部署等属性。默认实现是StandardHost，init和start没有特殊的逻辑，只是设置了error report valve。valve的机制，会在后面请求处理过程中详细解析。</p><h1 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h1><blockquote><p>A Context is a Container that represents a servlet context, and therefore an individual web application, in the Catalina servlet engine.</p></blockquote><p>Context代表一个tomcat的应用，也就是appBase下的一个目录。可以包含一个或者多个Servlet。</p><h1 id="Wrapper"><a href="#Wrapper" class="headerlink" title="Wrapper"></a>Wrapper</h1><blockquote><p>Standard implementation of the Wrapper interface that represents an individual servlet definition.  No child Containers are allowed, and the parent Container must be a Context.</p></blockquote><p>wrapper就是servlet的包装，默认实现是StandardWrapper，init和start没有特殊的逻辑。</p><h1 id="Connector"><a href="#Connector" class="headerlink" title="Connector"></a>Connector</h1><img src="/2021/12/05/tomcat-startup-2/6eeaeb93839adcb4e76c15ee93f545ce.jpg"><p>Connector组件负责网络连接的处理、协议的解析等。网络协议的处理是tomcat中很重要的一块儿，后面也会单独分析不同协议的实现。</p><h2 id="initInternal-3"><a href="#initInternal-3" class="headerlink" title="initInternal"></a>initInternal</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.catalina.connector.Connector#initInternal</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.initInternal();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Initialize adapter</span></span><br><span class="line">        adapter = <span class="keyword">new</span> CoyoteAdapter(<span class="keyword">this</span>);</span><br><span class="line">        protocolHandler.setAdapter(adapter);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 省略</span></span><br><span class="line">      </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            protocolHandler.init();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(</span><br><span class="line">                    sm.getString(<span class="string">"coyoteConnector.protocolHandlerInitializationFailed"</span>), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>主要是protocolHandler的初始化</p><h2 id="startInternal-3"><a href="#startInternal-3" class="headerlink" title="startInternal"></a>startInternal</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.catalina.connector.Connector#startInternal</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Validate settings before starting</span></span><br><span class="line">        <span class="keyword">if</span> (getPort() &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(sm.getString(</span><br><span class="line">                    <span class="string">"coyoteConnector.invalidPort"</span>, Integer.valueOf(getPort())));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setState(LifecycleState.STARTING);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            protocolHandler.start();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            String errPrefix = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">this</span>.service != <span class="keyword">null</span>) &#123;</span><br><span class="line">                errPrefix += <span class="string">"service.getName(): \""</span> + <span class="keyword">this</span>.service.getName() + <span class="string">"\"; "</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException</span><br><span class="line">                (errPrefix + <span class="string">" "</span> + sm.getString</span><br><span class="line">                 (<span class="string">"coyoteConnector.protocolHandlerStartFailed"</span>), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>同样的委托给protocolHandler。</p><h1 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h1><p>Executor也是标准的tomcat组件，它的默认实现类是<code>StandardThreadExecutor</code>。可以在server.xml的Service节点下配置，默认是没有配置的。tomcat给了一个示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">55     <span class="comment">&lt;!--The connectors can use a shared executor, you can define one or more named thread pools--&gt;</span></span><br><span class="line">56     <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">57     &lt;Executor name="tomcatThreadPool" namePrefix="catalina-exec-"</span></span><br><span class="line"><span class="comment">58         maxThreads="150" minSpareThreads="4"/&gt;</span></span><br><span class="line"><span class="comment">59     --&gt;</span></span><br></pre></td></tr></table></figure><p>如果这里设置了，是可以在Connector中共享的，这一部分是在解析server.xml时实现的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.catalina.startup.ConnectorCreateRule#begin</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">begin</span><span class="params">(String namespace, String name, Attributes attributes)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Service svc = (Service)digester.peek();</span><br><span class="line">        Executor ex = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> ( attributes.getValue(<span class="string">"executor"</span>)!=<span class="keyword">null</span> ) &#123;</span><br><span class="line">          <span class="comment">// 如果配置executor属性，则从service中，查找对应的executor</span></span><br><span class="line">            ex = svc.getExecutor(attributes.getValue(<span class="string">"executor"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        Connector con = <span class="keyword">new</span> Connector(attributes.getValue(<span class="string">"protocol"</span>));</span><br><span class="line">        <span class="keyword">if</span> (ex != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="comment">// 设置executor为共享的</span></span><br><span class="line">            setExecutor(con, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        String sslImplementationName = attributes.getValue(<span class="string">"sslImplementationName"</span>);</span><br><span class="line">        <span class="keyword">if</span> (sslImplementationName != <span class="keyword">null</span>) &#123;</span><br><span class="line">            setSSLImplementationName(con, sslImplementationName);</span><br><span class="line">        &#125;</span><br><span class="line">        digester.push(con);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><table><thead><tr><th><code>executor</code></th><th>A reference to the name in an <a href="https://tomcat.apache.org/tomcat-8.5-doc/config/executor.html" rel="external nofollow noopener noreferrer" target="_blank">Executor</a> element. If this attribute is set, and the named executor exists, the connector will use the executor, and all the other thread attributes will be ignored. Note that if a shared executor is not specified for a connector then the connector will use a private, internal executor to provide the thread pool</th></tr></thead><tbody><tr><td></td></tr></tbody></table></blockquote><h2 id="initInternal-4"><a href="#initInternal-4" class="headerlink" title="initInternal"></a>initInternal</h2><p>无特殊逻辑</p><h2 id="startInternal-4"><a href="#startInternal-4" class="headerlink" title="startInternal"></a>startInternal</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org.apache.catalina.core.StandardThreadExecutor#startInternal</span></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Start the component and implement the requirements</span></span><br><span class="line"><span class="comment">     * of &#123;<span class="doctag">@link</span> org.apache.catalina.util.LifecycleBase#startInternal()&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@exception</span> LifecycleException if this component detects a fatal error</span></span><br><span class="line"><span class="comment">     *  that prevents this component from being used</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">        taskqueue = <span class="keyword">new</span> TaskQueue(maxQueueSize);</span><br><span class="line">        TaskThreadFactory tf = <span class="keyword">new</span> TaskThreadFactory(namePrefix,daemon,getThreadPriority());</span><br><span class="line">      <span class="comment">// 注意，这里是tomcat自己实现的ThreadPoolExecutor</span></span><br><span class="line">        executor = <span class="keyword">new</span> ThreadPoolExecutor(getMinSpareThreads(), getMaxThreads(), maxIdleTime, TimeUnit.MILLISECONDS,taskqueue, tf);</span><br><span class="line">        executor.setThreadRenewalDelay(threadRenewalDelay);</span><br><span class="line">        <span class="keyword">if</span> (prestartminSpareThreads) &#123;</span><br><span class="line">            executor.prestartAllCoreThreads();</span><br><span class="line">        &#125;</span><br><span class="line">        taskqueue.setParent(executor);</span><br><span class="line"></span><br><span class="line">        setState(LifecycleState.STARTING);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>没有特殊的逻辑，只是这个tomcat的自己实现的Executor，和jdk的默认executor在行为上有所差异，后面会专门分析。</p><h1 id="MapperListener"><a href="#MapperListener" class="headerlink" title="MapperListener"></a>MapperListener</h1><p>MapperListener实现了<code>ContainerListener</code>接口和<code>LifecycleListener</code>接口，可以监听容器发出的<code>ContainerEvent</code>。MapperListener主要是为了Mapper服务的，通过监听到的事件，注册对应的信息到Mapper中。</p><p>这个组件没有覆写initInternal，startInternal的时候，将自己注册为Engine以及Engine的各个子容器的listener：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org.apache.catalina.mapper.MapperListener#addListeners</span></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Add this mapper to the container and all child containers</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> container</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addListeners</span><span class="params">(Container container)</span> </span>&#123;</span><br><span class="line">        container.addContainerListener(<span class="keyword">this</span>);</span><br><span class="line">        container.addLifecycleListener(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">for</span> (Container child : container.findChildren()) &#123;</span><br><span class="line">          <span class="comment">// 递归</span></span><br><span class="line">            addListeners(child);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>同时会将Host组件的相关信息注册至Mapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.catalina.mapper.MapperListener#registerHost</span></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Register host.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerHost</span><span class="params">(Host host)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String[] aliases = host.findAliases();</span><br><span class="line">        mapper.addHost(host.getName(), aliases, host);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Container container : host.findChildren()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (container.getState().isAvailable()) &#123;</span><br><span class="line">              <span class="comment">// 子容器的映射信息</span></span><br><span class="line">                registerContext((Context) container);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(sm.getString(<span class="string">"mapperListener.registerHost"</span>,</span><br><span class="line">                    host.getName(), domain, service));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>以此类推，从 Engine -&gt; Host -&gt; Context -&gt; Wrapper都会将映射信息注册到Mapper中，为后面的查找提供支撑。</p><p>除了启动时，自动注册信息到Mapper中，动态添加组件时，MapperListener也能监听到对应的变动：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.catalina.mapper.MapperListener#lifecycleEvent</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lifecycleEvent</span><span class="params">(LifecycleEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (event.getType().equals(Lifecycle.AFTER_START_EVENT)) &#123;</span><br><span class="line">          </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.getType().equals(Lifecycle.BEFORE_STOP_EVENT)) &#123;</span><br><span class="line">          </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.apache.catalina.mapper.MapperListener#containerEvent</span></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">containerEvent</span><span class="params">(ContainerEvent event)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Container.ADD_CHILD_EVENT.equals(event.getType())) &#123;</span><br><span class="line">          </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Container.REMOVE_CHILD_EVENT.equals(event.getType())) &#123;</span><br><span class="line">            <span class="comment">// No need to unregister - life-cycle listener will handle this when</span></span><br><span class="line">            <span class="comment">// the child stops</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Host.ADD_ALIAS_EVENT.equals(event.getType())) &#123;</span><br><span class="line">            <span class="comment">// Handle dynamically adding host aliases</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Host.REMOVE_ALIAS_EVENT.equals(event.getType())) &#123;</span><br><span class="line">            <span class="comment">// Handle dynamically removing host aliases</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Wrapper.ADD_MAPPING_EVENT.equals(event.getType())) &#123;</span><br><span class="line">            <span class="comment">// Handle dynamically adding wrappers</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Wrapper.REMOVE_MAPPING_EVENT.equals(event.getType())) &#123;</span><br><span class="line">            <span class="comment">// Handle dynamically removing wrappers</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Context.ADD_WELCOME_FILE_EVENT.equals(event.getType())) &#123;</span><br><span class="line">            <span class="comment">// Handle dynamically adding welcome files</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Context.REMOVE_WELCOME_FILE_EVENT.equals(event.getType())) &#123;</span><br><span class="line">            <span class="comment">// Handle dynamically removing welcome files</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Context.CLEAR_WELCOME_FILES_EVENT.equals(event.getType())) &#123;</span><br><span class="line">            <span class="comment">// Handle dynamically clearing welcome files</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h1><blockquote><p>Mapper, which implements the servlet API mapping rules (which are derived<br>from the HTTP rules).</p></blockquote><p>Mapper，顾名思义，是专门做映射的。请求进来的时候负责根据请求中的host、uri等参数找到对应的容器。</p><p>映射的代码在<code>org.apache.catalina.mapper.Mapper#internalMap</code>，后续我们会在请求处理篇章中，具体分析映射的过程。</p><p>这个类没有实现接口。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文走马观花似的，过了一遍tomcat启动过程中涉及到的各个基础组件，分析了各个组件的initInternal和startInternal方法，详细地梳理了tomcat初始化的流程详细。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://time.geekbang.org/column/article/96764" rel="external nofollow noopener noreferrer" target="_blank">06 | Tomcat系统架构（下）：聊聊多层容器的设计</a></li><li><a href="https://time.geekbang.org/column/article/96328" rel="external nofollow noopener noreferrer" target="_blank">05 | Tomcat系统架构（上）： 连接器是如何设计的？</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;书接上回，我们从启动脚本跟踪到了&lt;code&gt;Bootstrap&lt;/code&gt;类，发现它只是个&lt;strong&gt;传话筒&lt;/strong&gt;，内部通过发射将调用都转给了&lt;code&gt;Catalina&lt;/code&gt;，用官方的话来说就是&lt;code&gt;roundabout approach&lt;
      
    
    </summary>
    
      <category term="tomcat" scheme="http://qsli.github.io/categories/tomcat/"/>
    
    
      <category term="tomcat-startup" scheme="http://qsli.github.io/tags/tomcat-startup/"/>
    
  </entry>
  
  <entry>
    <title>tomcat-component-lifecycle</title>
    <link href="http://qsli.github.io/2021/11/27/tomcat-component-lifecycle/"/>
    <id>http://qsli.github.io/2021/11/27/tomcat-component-lifecycle/</id>
    <published>2021-11-27T11:08:08.000Z</published>
    <updated>2021-11-27T11:08:08.641Z</updated>
    
    <content type="html"><![CDATA[<p>Tomcat将组件的声明周期抽象为了不同的状态，同时定义了组件状态转移的状态机，并将其定义为Lifecycle接口，通过这个接口来管理所有组件。</p><h2 id="Lifecycle-接口"><a href="#Lifecycle-接口" class="headerlink" title="Lifecycle 接口"></a>Lifecycle 接口</h2><p>Lifecycle 接口主要定义三个功能：</p><ul><li>tomcat组件生命周期对应的方法（init、start、stop、destroy等），这些方法会触发组件状态的变化，方法对应的状态转移如图：</li></ul><img src="/2021/11/27/tomcat-component-lifecycle/image-20211031182459713.png"><ul><li>获取当强状态的一些方法（getState/getStateName）</li><li>以及Listener管理相关的方法（addLifecycleListener、findLifecycleListeners、removeLifecycleListener）</li></ul><p>Lifecycle接口是tomcat中很基础的接口，tomcat的组件都直接或者间接地实现了这个接口，继承这个接口的类如图所示。</p><img src="/2021/11/27/tomcat-component-lifecycle/image-20211127182758386.png"><p>从图中可以看出，tomcat的Server接口、Service接口、以及Container接口都继承了Lifecycle。这些常用的组件一般不会直接实现这个接口，一般会通过继承<code>LifeCycleBase</code>（LifecycleBase —&gt; Lifecycle）或者<code>LifecycleMbeanBase</code>（LifecycleMbeanBase —&gt; LifecycleBase —&gt; Lifecycle）</p><h2 id="LifeCycleBase"><a href="#LifeCycleBase" class="headerlink" title="LifeCycleBase"></a>LifeCycleBase</h2><blockquote><p> Base implementation of the {@link Lifecycle} interface that implements the<br> state transition rules for {@link Lifecycle#start()} and<br> {@link Lifecycle#stop()}</p></blockquote><p>这个类实现了接口定义中的LifecycleListener管理、以及组件状态的管理。他的子类无需关系状态转移、以及Listener的通知，只用实现对应的抽象方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">startInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException</span>;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException</span>;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">stopInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException</span>;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">destroyInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException</span>;</span><br></pre></td></tr></table></figure><p>以这个接口实现的init为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.catalina.util.LifecycleBase#init</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!state.equals(LifecycleState.NEW)) &#123;</span><br><span class="line">    invalidTransition(Lifecycle.BEFORE_INIT_EVENT);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    setStateInternal(LifecycleState.INITIALIZING, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">    initInternal();</span><br><span class="line">    setStateInternal(LifecycleState.INITIALIZED, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">    ExceptionUtils.handleThrowable(t);</span><br><span class="line">    setStateInternal(LifecycleState.FAILED, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> LifecycleException(</span><br><span class="line">      sm.getString(<span class="string">"lifecycleBase.initFail"</span>,toString()), t);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中已经做了状态转移的判断，只有从NEW状态才能调用init，抽象方法<code>initInternal</code>，实现了状态从<code>INITIALIZING</code>到状态<code>INITIALIZED</code>的转义，发生异常时会自动的将状态转移到<code>FAILED</code>。</p><p><code>setStateInternal</code>中也完成了Listener的触发：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.catalina.util.LifecycleBase#setStateInternal</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setStateInternal</span><span class="params">(LifecycleState state,</span></span></span><br><span class="line"><span class="function"><span class="params">                                           Object data, <span class="keyword">boolean</span> check)</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">    log.debug(sm.getString(<span class="string">"lifecycleBase.setState"</span>, <span class="keyword">this</span>, state));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (check) &#123;</span><br><span class="line">    <span class="comment">// Must have been triggered by one of the abstract methods (assume</span></span><br><span class="line">    <span class="comment">// code in this class is correct)</span></span><br><span class="line">    <span class="comment">// null is never a valid state</span></span><br><span class="line">    <span class="keyword">if</span> (state == <span class="keyword">null</span>) &#123;</span><br><span class="line">      invalidTransition(<span class="string">"null"</span>);</span><br><span class="line">      <span class="comment">// Unreachable code - here to stop eclipse complaining about</span></span><br><span class="line">      <span class="comment">// a possible NPE further down the method</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Any method can transition to failed</span></span><br><span class="line">    <span class="comment">// startInternal() permits STARTING_PREP to STARTING</span></span><br><span class="line">    <span class="comment">// stopInternal() permits STOPPING_PREP to STOPPING and FAILED to</span></span><br><span class="line">    <span class="comment">// STOPPING</span></span><br><span class="line">    <span class="keyword">if</span> (!(state == LifecycleState.FAILED ||</span><br><span class="line">          (<span class="keyword">this</span>.state == LifecycleState.STARTING_PREP &amp;&amp;</span><br><span class="line">           state == LifecycleState.STARTING) ||</span><br><span class="line">          (<span class="keyword">this</span>.state == LifecycleState.STOPPING_PREP &amp;&amp;</span><br><span class="line">           state == LifecycleState.STOPPING) ||</span><br><span class="line">          (<span class="keyword">this</span>.state == LifecycleState.FAILED &amp;&amp;</span><br><span class="line">           state == LifecycleState.STOPPING))) &#123;</span><br><span class="line">      <span class="comment">// No other transition permitted</span></span><br><span class="line">      invalidTransition(state.name());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.state = state;</span><br><span class="line">  String lifecycleEvent = state.getLifecycleEvent();</span><br><span class="line">  <span class="keyword">if</span> (lifecycleEvent != <span class="keyword">null</span>) &#123;</span><br><span class="line">    fireLifecycleEvent(lifecycleEvent, data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.apache.catalina.util.LifecycleBase#fireLifecycleEvent</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">fireLifecycleEvent</span><span class="params">(String type, Object data)</span> </span>&#123;</span><br><span class="line">  LifecycleEvent event = <span class="keyword">new</span> LifecycleEvent(<span class="keyword">this</span>, type, data);</span><br><span class="line">  <span class="keyword">for</span> (LifecycleListener listener : lifecycleListeners) &#123;</span><br><span class="line">    listener.lifecycleEvent(event);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样状态转移的时候，listener也能感知到了，注意这都是在<strong>一个线程</strong>中通知的，不要在Listener中做特别重的操作。</p><h2 id="LifecycleMbeanBase"><a href="#LifecycleMbeanBase" class="headerlink" title="LifecycleMbeanBase"></a>LifecycleMbeanBase</h2><p><code>LifecycleMbeanBase</code>继承了<code>LifeCycleBase</code>，同时也实现了<code>JmxEnabled</code>接口:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JmxEnabled</span> <span class="keyword">extends</span> <span class="title">MBeanRegistration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the domain under which this component will be / has been</span></span><br><span class="line"><span class="comment">     * registered.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">getDomain</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Specify the domain under which this component should be registered. Used</span></span><br><span class="line"><span class="comment">     * with components that cannot (easily) navigate the component hierarchy to</span></span><br><span class="line"><span class="comment">     * determine the correct domain to use.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> domain The name of the domain under which this component should be</span></span><br><span class="line"><span class="comment">     *               registered</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setDomain</span><span class="params">(String domain)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the name under which this component has been registered with JMX.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ObjectName <span class="title">getObjectName</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>JmxEnabled</code>接口继承了<code>javax.management.MBeanRegistration</code>,用以通过Mbean来暴露对应的组件。可以用arthas 查看tomcat暴露的mbean信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[arthas@62513]$ mbean</span><br><span class="line">Catalina:<span class="built_in">type</span>=Service</span><br><span class="line">Catalina:<span class="built_in">type</span>=StringCache</span><br><span class="line">Catalina:<span class="built_in">type</span>=Valve,host=localhost,context=/servlet,name=NonLoginAuthenticator</span><br><span class="line">Catalina:<span class="built_in">type</span>=JspMonitor,WebModule=//localhost/servlet,name=jsp,J2EEApplication=none,J2EEServer=none</span><br><span class="line">Catalina:<span class="built_in">type</span>=NamingResources,host=localhost,context=/servlet</span><br><span class="line">Catalina:<span class="built_in">type</span>=WebResourceRoot,host=localhost,context=/atour_crawler_war</span><br><span class="line">Catalina:<span class="built_in">type</span>=ThreadPool,name=<span class="string">"ajp-nio-8009"</span></span><br></pre></td></tr></table></figure><p>可以看到这里暴露了一个Service，正是<code>StandardService</code>,他继承了<code>LifecycleMbeanBase</code>,于是自动的暴露出去了。下面来分析下他是如何实现的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// org.apache.catalina.util.LifecycleMBeanBase#initInternal</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sub-classes wishing to perform additional initialization should override</span></span><br><span class="line"><span class="comment">     * this method, ensuring that super.initInternal() is the first call in the</span></span><br><span class="line"><span class="comment">     * overriding method.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If oname is not null then registration has already happened via</span></span><br><span class="line">        <span class="comment">// preRegister().</span></span><br><span class="line">        <span class="keyword">if</span> (oname == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mserver = Registry.getRegistry(<span class="keyword">null</span>, <span class="keyword">null</span>).getMBeanServer();</span><br><span class="line"></span><br><span class="line">            oname = register(<span class="keyword">this</span>, getObjectNameKeyProperties());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.apache.catalina.util.LifecycleMBeanBase#destroyInternal</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sub-classes wishing to perform additional clean-up should override this</span></span><br><span class="line"><span class="comment">     * method, ensuring that super.destroyInternal() is the last call in the</span></span><br><span class="line"><span class="comment">     * overriding method.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">destroyInternal</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line">        unregister(oname);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在初始化的时候，如果当前组件没有注册到<code>Registry</code>，会自动的进行注册。注意，子类在覆盖这个方法的时候，不要忘了调用父类的<code>initInternal</code>。在组件声明周期结束的时候，也会自动的将其从<code>Registry</code>移除。</p><p>具体的注册逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Default domain for MBeans if none can be determined</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_MBEAN_DOMAIN = <span class="string">"Catalina"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.apache.catalina.util.LifecycleMBeanBase#register</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> ObjectName <span class="title">register</span><span class="params">(Object obj,</span></span></span><br><span class="line"><span class="function"><span class="params">            String objectNameKeyProperties)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Construct an object name with the right domain</span></span><br><span class="line">  StringBuilder name = <span class="keyword">new</span> StringBuilder(getDomain());</span><br><span class="line">  name.append(<span class="string">':'</span>);</span><br><span class="line">  name.append(objectNameKeyProperties);</span><br><span class="line"></span><br><span class="line">  ObjectName on = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    on = <span class="keyword">new</span> ObjectName(name.toString());</span><br><span class="line"></span><br><span class="line">    Registry.getRegistry(<span class="keyword">null</span>, <span class="keyword">null</span>).registerComponent(obj, on, <span class="keyword">null</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (MalformedObjectNameException e) &#123;</span><br><span class="line">    log.warn(sm.getString(<span class="string">"lifecycleMBeanBase.registerFail"</span>, obj, name),</span><br><span class="line">             e);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    log.warn(sm.getString(<span class="string">"lifecycleMBeanBase.registerFail"</span>, obj, name),</span><br><span class="line">             e);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认注册的名称，格式是<code>domain:组件名称</code>，这里默认的domain就是<code>Catalina</code>。组件的名称是通过<code>getObjectNameKeyProperties</code>，这是个抽象方法，留给子类的钩子。我们看下<code>StandardService</code>是如何实现的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.catalina.core.StandardService#getObjectNameKeyProperties</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">getObjectNameKeyProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"type=Service"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个跟arthas的输出结果正好印证上了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>tomcat通过Lifecycle接口来管理各个组件，定义了init/start/stop/destroy等方法。同时提供了抽象类的实现，对子类屏蔽了状态转移和Listener机制的实现。也通过LifecycleMbeanBase提供了通一的暴露到jmx的方式。</p><p>至于这些组件的init/start/stop/destroy等方法是何时被调用的，我们会在接下来的文章中接着分析启动的过程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Tomcat将组件的声明周期抽象为了不同的状态，同时定义了组件状态转移的状态机，并将其定义为Lifecycle接口，通过这个接口来管理所有组件。&lt;/p&gt;
&lt;h2 id=&quot;Lifecycle-接口&quot;&gt;&lt;a href=&quot;#Lifecycle-接口&quot; class=&quot;headerl
      
    
    </summary>
    
      <category term="tomcat" scheme="http://qsli.github.io/categories/tomcat/"/>
    
    
      <category term="tomcat" scheme="http://qsli.github.io/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>tomcat-startup</title>
    <link href="http://qsli.github.io/2021/11/20/tomcat-startup/"/>
    <id>http://qsli.github.io/2021/11/20/tomcat-startup/</id>
    <published>2021-11-20T11:25:08.000Z</published>
    <updated>2021-11-27T09:41:09.105Z</updated>
    
    <content type="html"><![CDATA[<h2 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h2><h3 id="startup-sh"><a href="#startup-sh" class="headerlink" title="startup.sh"></a>startup.sh</h3><p>一般是用<code>$CATALINA_HOME/bin/startup.sh</code>脚本启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">➜  bin  cat startup.sh</span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Licensed to the Apache Software Foundation (ASF) under one or more</span></span><br><span class="line"><span class="comment"># contributor license agreements.  See the NOTICE file distributed with</span></span><br><span class="line"><span class="comment"># this work for additional information regarding copyright ownership.</span></span><br><span class="line"><span class="comment"># The ASF licenses this file to You under the Apache License, Version 2.0</span></span><br><span class="line"><span class="comment"># (the "License"); you may not use this file except in compliance with</span></span><br><span class="line"><span class="comment"># the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"># distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"># See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"># limitations under the License.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Start Script for the CATALINA Server</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Better OS/400 detection: see Bugzilla 31132</span></span><br><span class="line">os400=<span class="literal">false</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"`uname`"</span> <span class="keyword">in</span></span><br><span class="line">OS400*) os400=<span class="literal">true</span>;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># resolve links - $0 may be a softlink</span></span><br><span class="line">PRG=<span class="string">"<span class="variable">$0</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [ -h <span class="string">"<span class="variable">$PRG</span>"</span> ] ; <span class="keyword">do</span></span><br><span class="line">  ls=`ls -ld <span class="string">"<span class="variable">$PRG</span>"</span>`</span><br><span class="line">  link=`expr <span class="string">"<span class="variable">$ls</span>"</span> : <span class="string">'.*-&gt; \(.*\)$'</span>`</span><br><span class="line">  <span class="keyword">if</span> expr <span class="string">"<span class="variable">$link</span>"</span> : <span class="string">'/.*'</span> &gt; /dev/null; <span class="keyword">then</span></span><br><span class="line">    PRG=<span class="string">"<span class="variable">$link</span>"</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    PRG=`dirname <span class="string">"<span class="variable">$PRG</span>"</span>`/<span class="string">"<span class="variable">$link</span>"</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">PRGDIR=`dirname <span class="string">"<span class="variable">$PRG</span>"</span>`</span><br><span class="line">EXECUTABLE=catalina.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># Check that target executable exists</span></span><br><span class="line"><span class="keyword">if</span> <span class="variable">$os400</span>; <span class="keyword">then</span></span><br><span class="line">  <span class="comment"># -x will Only work on the os400 if the files are:</span></span><br><span class="line">  <span class="comment"># 1. owned by the user</span></span><br><span class="line">  <span class="comment"># 2. owned by the PRIMARY group of the user</span></span><br><span class="line">  <span class="comment"># this will not work if the user belongs in secondary groups</span></span><br><span class="line">  <span class="built_in">eval</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="keyword">if</span> [ ! -x <span class="string">"<span class="variable">$PRGDIR</span>"</span>/<span class="string">"<span class="variable">$EXECUTABLE</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Cannot find <span class="variable">$PRGDIR</span>/<span class="variable">$EXECUTABLE</span>"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"The file is absent or does not have execute permission"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"This file is needed to run this program"</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> <span class="string">"<span class="variable">$PRGDIR</span>"</span>/<span class="string">"<span class="variable">$EXECUTABLE</span>"</span> start <span class="string">"<span class="variable">$@</span>"</span></span><br></pre></td></tr></table></figure><p>这个脚本最终调用的是<code>catalina.sh</code>,传入的参数是<code>start</code>和我们的命令行参数</p><p>这个脚本除了start，还有其他的命令，相当于其他脚本的一个入口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">➜  bin  catalina.sh</span><br><span class="line">Using CATALINA_BASE:   /Users/qishengli/software/apache-tomcat-8.5.32</span><br><span class="line">Using CATALINA_HOME:   /Users/qishengli/software/apache-tomcat-8.5.32</span><br><span class="line">Using CATALINA_TMPDIR: /Users/qishengli/software/apache-tomcat-8.5.32/temp</span><br><span class="line">Using JRE_HOME:        /Users/qishengli/software/jdk8/jre</span><br><span class="line">Using CLASSPATH:       /Users/qishengli/software/apache-tomcat-8.5.32/bin/bootstrap.jar:/Users/qishengli/software/apache-tomcat-8.5.32/bin/tomcat-juli.jar</span><br><span class="line">Usage: catalina.sh ( commands ... )</span><br><span class="line">commands:</span><br><span class="line">  debug             Start Catalina <span class="keyword">in</span> a debugger</span><br><span class="line">  debug -security   Debug Catalina with a security manager</span><br><span class="line">  jpda start        Start Catalina under JPDA debugger</span><br><span class="line">  run               Start Catalina <span class="keyword">in</span> the current window</span><br><span class="line">  run -security     Start <span class="keyword">in</span> the current window with security manager</span><br><span class="line">  start             Start Catalina <span class="keyword">in</span> a separate window</span><br><span class="line">  start -security   Start <span class="keyword">in</span> a separate window with security manager</span><br><span class="line">  stop              Stop Catalina, waiting up to 5 seconds <span class="keyword">for</span> the process to end</span><br><span class="line">  stop n            Stop Catalina, waiting up to n seconds <span class="keyword">for</span> the process to end</span><br><span class="line">  stop -force       Stop Catalina, <span class="built_in">wait</span> up to 5 seconds and <span class="keyword">then</span> use <span class="built_in">kill</span> -KILL <span class="keyword">if</span> still running</span><br><span class="line">  stop n -force     Stop Catalina, <span class="built_in">wait</span> up to n seconds and <span class="keyword">then</span> use <span class="built_in">kill</span> -KILL <span class="keyword">if</span> still running</span><br><span class="line">  configtest        Run a basic syntax check on server.xml - check <span class="built_in">exit</span> code <span class="keyword">for</span> result</span><br><span class="line">  version           What version of tomcat are you running?</span><br><span class="line">Note: Waiting <span class="keyword">for</span> the process to end and use of the -force option require that <span class="variable">$CATALINA_PID</span> is defined</span><br></pre></td></tr></table></figure><p>比如<code>version</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">➜  bin  catalina.sh version</span><br><span class="line">Using CATALINA_BASE:   /Users/qishengli/software/apache-tomcat-8.5.32</span><br><span class="line">Using CATALINA_HOME:   /Users/qishengli/software/apache-tomcat-8.5.32</span><br><span class="line">Using CATALINA_TMPDIR: /Users/qishengli/software/apache-tomcat-8.5.32/temp</span><br><span class="line">Using JRE_HOME:        /Users/qishengli/software/jdk8/jre</span><br><span class="line">Using CLASSPATH:       /Users/qishengli/software/apache-tomcat-8.5.32/bin/bootstrap.jar:/Users/qishengli/software/apache-tomcat-8.5.32/bin/tomcat-juli.jar</span><br><span class="line">Server version: Apache Tomcat/8.5.32</span><br><span class="line">Server built:   Jun 20 2018 19:50:35 UTC</span><br><span class="line">Server number:  8.5.32.0</span><br><span class="line">OS Name:        Mac OS X</span><br><span class="line">OS Version:     11.6</span><br><span class="line">Architecture:   aarch64</span><br><span class="line">JVM Version:    1.8.0_282-b08</span><br><span class="line">JVM Vendor:     Azul Systems, Inc.</span><br></pre></td></tr></table></figure><p>看一下start对应的源码部分：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">elif</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">"start"</span> ] ; <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line"> <span class="comment"># CATALINA_PID的处理逻辑，此处省略</span></span><br><span class="line">  <span class="built_in">shift</span></span><br><span class="line">  touch <span class="string">"<span class="variable">$CATALINA_OUT</span>"</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">"-security"</span> ] ; <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$have_tty</span> -eq 1 ]; <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"Using Security Manager"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">shift</span></span><br><span class="line">    <span class="built_in">eval</span> <span class="variable">$_NOHUP</span> <span class="string">"\"<span class="variable">$_RUNJAVA</span>\""</span> <span class="string">"\"<span class="variable">$LOGGING_CONFIG</span>\""</span> <span class="variable">$LOGGING_MANAGER</span> <span class="variable">$JAVA_OPTS</span> <span class="variable">$CATALINA_OPTS</span> \</span><br><span class="line">      -D<span class="variable">$ENDORSED_PROP</span>=<span class="string">"\"<span class="variable">$JAVA_ENDORSED_DIRS</span>\""</span> \</span><br><span class="line">      -classpath <span class="string">"\"<span class="variable">$CLASSPATH</span>\""</span> \</span><br><span class="line">      -Djava.security.manager \</span><br><span class="line">      -Djava.security.policy==<span class="string">"\"<span class="variable">$CATALINA_BASE</span>/conf/catalina.policy\""</span> \</span><br><span class="line">      -Dcatalina.base=<span class="string">"\"<span class="variable">$CATALINA_BASE</span>\""</span> \</span><br><span class="line">      -Dcatalina.home=<span class="string">"\"<span class="variable">$CATALINA_HOME</span>\""</span> \</span><br><span class="line">      -Djava.io.tmpdir=<span class="string">"\"<span class="variable">$CATALINA_TMPDIR</span>\""</span> \</span><br><span class="line">      org.apache.catalina.startup.Bootstrap <span class="string">"<span class="variable">$@</span>"</span> start \</span><br><span class="line">      &gt;&gt; <span class="string">"<span class="variable">$CATALINA_OUT</span>"</span> 2&gt;&amp;1 <span class="string">"&amp;"</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">eval</span> <span class="variable">$_NOHUP</span> <span class="string">"\"<span class="variable">$_RUNJAVA</span>\""</span> <span class="string">"\"<span class="variable">$LOGGING_CONFIG</span>\""</span> <span class="variable">$LOGGING_MANAGER</span> <span class="variable">$JAVA_OPTS</span> <span class="variable">$CATALINA_OPTS</span> \</span><br><span class="line">      -D<span class="variable">$ENDORSED_PROP</span>=<span class="string">"\"<span class="variable">$JAVA_ENDORSED_DIRS</span>\""</span> \</span><br><span class="line">      -classpath <span class="string">"\"<span class="variable">$CLASSPATH</span>\""</span> \</span><br><span class="line">      -Dcatalina.base=<span class="string">"\"<span class="variable">$CATALINA_BASE</span>\""</span> \</span><br><span class="line">      -Dcatalina.home=<span class="string">"\"<span class="variable">$CATALINA_HOME</span>\""</span> \</span><br><span class="line">      -Djava.io.tmpdir=<span class="string">"\"<span class="variable">$CATALINA_TMPDIR</span>\""</span> \</span><br><span class="line">      org.apache.catalina.startup.Bootstrap <span class="string">"<span class="variable">$@</span>"</span> start \</span><br><span class="line">      &gt;&gt; <span class="string">"<span class="variable">$CATALINA_OUT</span>"</span> 2&gt;&amp;1 <span class="string">"&amp;"</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [ ! -z <span class="string">"<span class="variable">$CATALINA_PID</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> $! &gt; <span class="string">"<span class="variable">$CATALINA_PID</span>"</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Tomcat started."</span></span><br></pre></td></tr></table></figure><p>基本上就是把之前detect到的各种环境变量当做参数，传递给java命令，这个脚本里默认会执行<code>bin/setenv.sh</code>，所以一般会在这个文件中设置tomcat的环境变量，比如本机的设置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  bin  cat setenv.sh</span><br><span class="line"><span class="built_in">export</span> CATALINA_OPTS=<span class="string">"-agentpath:/Users/qishengli/Downloads/async-profiler-2.5-macos/build/libasyncProfiler.so=start,event=cpu,interval=1ms,file=profile.html   -Djava.rmi.server.logCalls=true   -Dsun.rmi.server.logLevel=debug"</span></span><br></pre></td></tr></table></figure><p>对应的脚本位置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  bin  grep -n  setenv catalina.sh</span><br><span class="line">24:<span class="comment">#   setenv.sh in CATALINA_BASE/bin to keep your customizations separate.</span></span><br><span class="line">145:<span class="comment"># but allow them to be specified in setenv.sh, in rare case when it is needed.</span></span><br><span class="line">148:<span class="keyword">if</span> [ -r <span class="string">"<span class="variable">$CATALINA_BASE</span>/bin/setenv.sh"</span> ]; <span class="keyword">then</span></span><br><span class="line">149:  . <span class="string">"<span class="variable">$CATALINA_BASE</span>/bin/setenv.sh"</span></span><br><span class="line">150:<span class="keyword">elif</span> [ -r <span class="string">"<span class="variable">$CATALINA_HOME</span>/bin/setenv.sh"</span> ]; <span class="keyword">then</span></span><br><span class="line">151:  . <span class="string">"<span class="variable">$CATALINA_HOME</span>/bin/setenv.sh"</span></span><br></pre></td></tr></table></figure><p>最终我们能拿到的命令形式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"/Users/qishengli/software/jdk8/jre/bin/java"</span> <span class="string">"-Djava.util.logging.config.file=/Users/qishengli/software/apache-tomcat-8.5.32/conf/logging.properties"</span> -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djdk.tls.ephemeralDHKeySize=2048 -Djava.protocol.handler.pkgs=org.apache.catalina.webresources -Dorg.apache.catalina.security.SecurityListener.UMASK=0027 -agentpath:/Users/qishengli/Downloads/async-profiler-2.5-macos/build/libasyncProfiler.so=start,event=cpu,interval=1ms,file=profile.html -Djava.rmi.server.logCalls=<span class="literal">true</span> -Dsun.rmi.server.logLevel=debug -Dignore.endorsed.dirs=<span class="string">""</span> -classpath <span class="string">"/Users/qishengli/software/apache-tomcat-8.5.32/bin/bootstrap.jar:/Users/qishengli/software/apache-tomcat-8.5.32/bin/tomcat-juli.jar"</span> -Dcatalina.base=<span class="string">"/Users/qishengli/software/apache-tomcat-8.5.32"</span> -Dcatalina.home=<span class="string">"/Users/qishengli/software/apache-tomcat-8.5.32"</span> -Djava.io.tmpdir=<span class="string">"/Users/qishengli/software/apache-tomcat-8.5.32/temp"</span> org.apache.catalina.startup.Bootstrap start &amp;</span><br></pre></td></tr></table></figure><p>最后终于到了对应的java代码<code>org.apache.catalina.startup.Bootstrap start</code>。</p><h3 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/Users/qishengli/software/apache-tomcat-8.5.32/bin/catalina.sh run</span><br><span class="line">NOTE: Picked up JDK_JAVA_OPTIONS:  --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.io=ALL-UNNAMED --add-opens=java.rmi/sun.rmi.transport=ALL-UNNAMED</span><br><span class="line">-Dcatalina.base=/Users/qishengli/Library/Caches/JetBrains/IntelliJIdea2021.2/tomcat/15632928-a384-44e8-ba78-fe9ca3f37059</span><br><span class="line">[2021-10-31 05:19:05,458] Artifact web:war exploded: Waiting <span class="keyword">for</span> server connection to start artifact deployment...</span><br></pre></td></tr></table></figure><p>直接调用的catalina.sh的run命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">376 <span class="keyword">elif</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">"run"</span> ]; <span class="keyword">then</span></span><br><span class="line">377</span><br><span class="line">378   <span class="built_in">shift</span></span><br><span class="line">379   <span class="keyword">if</span> [ <span class="string">"<span class="variable">$1</span>"</span> = <span class="string">"-security"</span> ] ; <span class="keyword">then</span></span><br><span class="line">380     <span class="keyword">if</span> [ <span class="variable">$have_tty</span> -eq 1 ]; <span class="keyword">then</span></span><br><span class="line">381       <span class="built_in">echo</span> <span class="string">"Using Security Manager"</span></span><br><span class="line">382     <span class="keyword">fi</span></span><br><span class="line">383     <span class="built_in">shift</span></span><br><span class="line">384     <span class="built_in">eval</span> <span class="built_in">exec</span> <span class="string">"\"<span class="variable">$_RUNJAVA</span>\""</span> <span class="string">"\"<span class="variable">$LOGGING_CONFIG</span>\""</span> <span class="variable">$LOGGING_MANAGER</span> <span class="variable">$JAVA_OPTS</span> <span class="variable">$CATALINA_OPTS</span> \</span><br><span class="line">385       -D<span class="variable">$ENDORSED_PROP</span>=<span class="string">"\"<span class="variable">$JAVA_ENDORSED_DIRS</span>\""</span> \</span><br><span class="line">386       -classpath <span class="string">"\"<span class="variable">$CLASSPATH</span>\""</span> \</span><br><span class="line">387       -Djava.security.manager \</span><br><span class="line">388       -Djava.security.policy==<span class="string">"\"<span class="variable">$CATALINA_BASE</span>/conf/catalina.policy\""</span> \</span><br><span class="line">389       -Dcatalina.base=<span class="string">"\"<span class="variable">$CATALINA_BASE</span>\""</span> \</span><br><span class="line">390       -Dcatalina.home=<span class="string">"\"<span class="variable">$CATALINA_HOME</span>\""</span> \</span><br><span class="line">391       -Djava.io.tmpdir=<span class="string">"\"<span class="variable">$CATALINA_TMPDIR</span>\""</span> \</span><br><span class="line">392       org.apache.catalina.startup.Bootstrap <span class="string">"<span class="variable">$@</span>"</span> start</span><br><span class="line">393   <span class="keyword">else</span></span><br><span class="line">394     <span class="built_in">eval</span> <span class="built_in">exec</span> <span class="string">"\"<span class="variable">$_RUNJAVA</span>\""</span> <span class="string">"\"<span class="variable">$LOGGING_CONFIG</span>\""</span> <span class="variable">$LOGGING_MANAGER</span> <span class="variable">$JAVA_OPTS</span> <span class="variable">$CATALINA_OPTS</span> \</span><br><span class="line">395       -D<span class="variable">$ENDORSED_PROP</span>=<span class="string">"\"<span class="variable">$JAVA_ENDORSED_DIRS</span>\""</span> \</span><br><span class="line">396       -classpath <span class="string">"\"<span class="variable">$CLASSPATH</span>\""</span> \</span><br><span class="line">397       -Dcatalina.base=<span class="string">"\"<span class="variable">$CATALINA_BASE</span>\""</span> \</span><br><span class="line">398       -Dcatalina.home=<span class="string">"\"<span class="variable">$CATALINA_HOME</span>\""</span> \</span><br><span class="line">399       -Djava.io.tmpdir=<span class="string">"\"<span class="variable">$CATALINA_TMPDIR</span>\""</span> \</span><br><span class="line">400       org.apache.catalina.startup.Bootstrap <span class="string">"<span class="variable">$@</span>"</span> start</span><br><span class="line">401   <span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>跟脚本里启动相比，这里有两点不同：</p><ul><li><p>没有创建PID文件</p></li><li><p>使用的是eval exec，而不是eval</p></li><li><p>通过-Dcatalina.base=xxx，指定了catalina.base的位置为idea自定义的目录（tomcat 默认读取catalina.base下的web.xml）</p><img src="/2021/11/20/tomcat-startup/image-20211114010037863.png"></li></ul><blockquote><p><code>catalina.sh run</code> starts tomcat in the foreground, displaying the logs on the console that you started it. Hitting Ctrl-C will terminate tomcat.</p><p><code>startup.sh</code> will start tomcat in the background. You’ll have to <code>tail -f logs/catalina.out</code> to see the logs.</p><p>Both will do the same things, apart from the foreground/background distinction.</p></blockquote><p>后续的流程就到了java代码里</p><h2 id="Java代码中的启动流程"><a href="#Java代码中的启动流程" class="headerlink" title="Java代码中的启动流程"></a>Java代码中的启动流程</h2><h3 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h3><blockquote><p>The purpose of this roundabout approach is to keep the Catalina internal classes (and any<br>other classes they depend on, such as an XML parser) out of the system<br>class path and therefore not visible to application level classes.</p></blockquote><p>bootstrap只是一张皮，先初始化了<code>org.apache.catalina.startup.Catalina</code>，然后调用其<code>start</code>方法。这么做的原因，注释中也给出了解释——防止tomcat的内部类被应用层感知（不在class path中，class path中只引入两个jar包，一个叫/bin/bootstrap.jar，一个叫/tomcat-juli.jar，其他的内部的jar包都在lib目录中，这部分是不在class path中的）。</p><img src="/2021/11/20/tomcat-startup/image-20211127174106373.png"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.catalina.startup.Bootstrap#start</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Start the Catalina daemon.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception Fatal start error</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>( catalinaDaemon==<span class="keyword">null</span> ) init();</span><br><span class="line"></span><br><span class="line">        Method method = catalinaDaemon.getClass().getMethod(<span class="string">"start"</span>, (Class [] )<span class="keyword">null</span>);</span><br><span class="line">        method.invoke(catalinaDaemon, (Object [])<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>初始化的时候，会初始化三个类加载器<code>commonLoader</code>、<code>catalinaLoader</code>、<code>sharedLoader</code>。这三个类加载器本质上都是URLClassLoader，只是负责的加载的路径不同，可以在catalina.properties中配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">38 # List of comma-separated paths defining the contents of the &quot;common&quot;</span><br><span class="line">39 # classloader.</span><br><span class="line">53 common.loader=&quot;$&#123;catalina.base&#125;/lib&quot;,&quot;$&#123;catalina.base&#125;/lib/*.jar&quot;,&quot;$&#123;catalina.home&#125;/lib&quot;,&quot;$&#123;catalina.home&#125;/lib/*.jar&quot;</span><br><span class="line"></span><br><span class="line">56 # List of comma-separated paths defining the contents of the &quot;server&quot;</span><br><span class="line">57 # classloader.</span><br><span class="line">71 server.loader=</span><br><span class="line"></span><br><span class="line">73 #</span><br><span class="line">74 # List of comma-separated paths defining the contents of the &quot;shared&quot;</span><br><span class="line">75 # classloader. </span><br><span class="line">90 shared.loader=</span><br></pre></td></tr></table></figure><p>这部分涉及到tomcat的类加载机制，会单独写一篇解析的文章，可以暂且跳过。</p><p>接力棒转交到Catalina之后，就涉及到配置文件的解析、tomcat的各个组件的启动了，会在第二篇中接着讲。</p><h3 id="idea-tomcat-configuration-启动"><a href="#idea-tomcat-configuration-启动" class="headerlink" title="idea tomcat configuration 启动"></a>idea tomcat configuration 启动</h3><p>从火焰图中看，Servlet是在RMI的线程中加载的：</p><img src="/2021/11/20/tomcat-startup/image-20211031162246558.png"><p>debug，获取对应的socket信息</p><img src="/2021/11/20/tomcat-startup/image-20211031161736022.png"><p>可以看出这个RMI调用是idea发起的，server是tomcat</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  conf  lsof -i:54276</span><br><span class="line">COMMAND   PID      USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME</span><br><span class="line">java    28192 qishengli   84u  IPv6 0x9b294f61ef653d83      0t0  TCP localhost:54268-&gt;localhost:54276 (ESTABLISHED)</span><br><span class="line">idea    55040 qishengli  227u  IPv4 0x9b294f61f4b22e13      0t0  TCP localhost:54276-&gt;localhost:54268 (ESTABLISHED)</span><br></pre></td></tr></table></figure><p>查看idea此时的栈信息，可以找到对应的线程栈：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"javaee connector"</span> <span class="comment">#5620 prio=4 os_prio=31 cpu=17.64ms elapsed=926.91s tid=0x000000036be2e400 nid=0x4e78b runnable  [0x000000039bbb9000]</span></span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line">        at java.net.SocketInputStream.socketRead0(java.base@11.0.12/Native Method)</span><br><span class="line">        at java.net.SocketInputStream.socketRead(java.base@11.0.12/SocketInputStream.java:115)</span><br><span class="line">        at java.net.SocketInputStream.read(java.base@11.0.12/SocketInputStream.java:168)</span><br><span class="line">        at java.net.SocketInputStream.read(java.base@11.0.12/SocketInputStream.java:140)</span><br><span class="line">        at java.io.BufferedInputStream.fill(java.base@11.0.12/BufferedInputStream.java:252)</span><br><span class="line">        at java.io.BufferedInputStream.read(java.base@11.0.12/BufferedInputStream.java:271)</span><br><span class="line">        - locked &lt;0x0000000794f63408&gt; (a java.io.BufferedInputStream)</span><br><span class="line">        at java.io.DataInputStream.readByte(java.base@11.0.12/DataInputStream.java:270)</span><br><span class="line">        at sun.rmi.transport.StreamRemoteCall.executeCall(java.rmi@11.0.12/StreamRemoteCall.java:240)</span><br><span class="line">        at sun.rmi.server.UnicastRef.invoke(java.rmi@11.0.12/UnicastRef.java:164)</span><br><span class="line">        at jdk.jmx.remote.internal.rmi.PRef.invoke(jdk.remoteref/Unknown Source)</span><br><span class="line">        at javax.management.remote.rmi.RMIConnectionImpl_Stub.invoke(java.management.rmi@11.0.12/Unknown Source)</span><br><span class="line">        at javax.management.remote.rmi.RMIConnector<span class="variable">$RemoteMBeanServerConnection</span>.invoke(java.management.rmi@11.0.12/RMIConnector.java:1021)</span><br><span class="line">        at com.intellij.javaee.oss.util.AbstractConnectorCommand.invokeOperation(AbstractConnectorCommand.java:139)</span><br><span class="line">        at org.jetbrains.idea.tomcat.admin.TomcatAdminServerBase<span class="variable">$2</span>.doExecute(TomcatAdminServerBase.java:159)</span><br><span class="line">        at org.jetbrains.idea.tomcat.admin.TomcatAdminServerBase<span class="variable">$2</span>.doExecute(TomcatAdminServerBase.java:155)</span><br><span class="line">        at com.intellij.javaee.oss.util.AbstractConnectorCommand<span class="variable">$1</span>.call(AbstractConnectorCommand.java:36)</span><br><span class="line">        at java.util.concurrent.FutureTask.run(java.base@11.0.12/FutureTask.java:264)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(java.base@11.0.12/ThreadPoolExecutor.java:1128)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor<span class="variable">$Worker</span>.run(java.base@11.0.12/ThreadPoolExecutor.java:628)</span><br><span class="line">        at java.lang.Thread.run(java.base@11.0.12/Thread.java:829)</span><br></pre></td></tr></table></figure><p>idea的社区版里没有找到这个类，用arthas 反编译<code>org.jetbrains.idea.tomcat.admin.TomcatAdminServerBase</code>，得到源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[arthas@<span class="number">55040</span>]$ jad org.jetbrains.idea.tomcat.admin.TomcatAdminServerBase$<span class="number">2</span></span><br><span class="line"></span><br><span class="line">ClassLoader:</span><br><span class="line">+-PluginClassLoader(plugin=PluginDescriptor(name=Tomcat and TomEE, id=Tomcat, descriptorPath=plugin.xml, path=/Applications/IntelliJ IDEA.app/Contents/plugins/Tomcat, version=<span class="number">2</span></span><br><span class="line">  <span class="number">12.5284</span><span class="number">.40</span>, <span class="keyword">package</span>=<span class="keyword">null</span>), packagePrefix=<span class="keyword">null</span>, instanceId=<span class="number">190</span>, state=active)</span><br><span class="line"></span><br><span class="line">Location:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Decompiled with CFR.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * Could not load the following classes:</span></span><br><span class="line"><span class="comment">         *  org.jetbrains.idea.tomcat.admin.TomcatJmxAdminServerBase</span></span><br><span class="line"><span class="comment">         *  org.jetbrains.idea.tomcat.admin.TomcatJmxAdminServerBase$TomcatConnectorCommandBase</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">package</span> org.jetbrains.idea.tomcat.admin;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> java.io.IOException;</span><br><span class="line">        <span class="keyword">import</span> javax.management.JMException;</span><br><span class="line">        <span class="keyword">import</span> javax.management.MBeanServerConnection;</span><br><span class="line">        <span class="keyword">import</span> javax.management.ObjectName;</span><br><span class="line">        <span class="keyword">import</span> org.jetbrains.idea.tomcat.admin.TomcatJmxAdminServerBase;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">TomcatAdminServerBase</span>.2</span></span><br><span class="line"><span class="class">        <span class="keyword">extends</span> <span class="title">TomcatJmxAdminServerBase</span>.<span class="title">TomcatConnectorCommandBase</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="comment">/* synthetic */</span> String val$contextPath;</span><br><span class="line">            <span class="keyword">final</span> <span class="comment">/* synthetic */</span> String val$deploymentPath;</span><br><span class="line"></span><br><span class="line">            TomcatAdminServerBase<span class="number">.2</span>(String string, String string2) &#123;</span><br><span class="line">                <span class="keyword">this</span>.val$contextPath = string;</span><br><span class="line">                <span class="keyword">this</span>.val$deploymentPath = string2;</span><br><span class="line">                <span class="keyword">super</span>((TomcatJmxAdminServerBase)TomcatAdminServerBase.<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> String <span class="title">doExecute</span><span class="params">(MBeanServerConnection connection)</span> <span class="keyword">throws</span> JMException, IOException </span>&#123;</span><br><span class="line"><span class="comment">/*159*/</span>         <span class="keyword">return</span> (String)TomcatAdminServerBase<span class="number">.2</span>.invokeOperation((MBeanServerConnection)connection, (ObjectName)TomcatAdminServerBase<span class="number">.2</span>.createObjectName((String)TomcatAdminServerBase.<span class="keyword">this</span>.getFactoryObjectName()), (String)<span class="string">"createStandardContext"</span>, (Object[])<span class="keyword">new</span> Object[]&#123;TomcatAdminServerBase.<span class="keyword">this</span>.getHostObjectName(), <span class="keyword">this</span>.val$contextPath, <span class="keyword">this</span>.val$deploymentPath&#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> Integer <span class="title">getTimeoutSeconds</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">/*167*/</span>         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">Affect(row-cnt:<span class="number">1</span>) cost in <span class="number">2415</span> ms.</span><br></pre></td></tr></table></figure><p>正是这里调用了tomcat的<code>createStandardContext</code></p><h4 id="idea为何这么做？"><a href="#idea为何这么做？" class="headerlink" title="idea为何这么做？"></a>idea为何这么做？</h4><p>idea通过RMI调用tomcat的DynamicBean，可以显示的指定app的class目录，而无需放到tomcat的指定目录下：</p><img src="/2021/11/20/tomcat-startup/image-20211114004458277.png"><p>同时，ide里对应配置的修改，也会反应到idea自己创建的web.xml上：</p><img src="/2021/11/20/tomcat-startup/image-20211114005120004.png"><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">➜  conf  cat  /Users/qishengli/Library/Caches/JetBrains/IntelliJIdea2021.2/tomcat/15632928-a384-44e8-ba78-fe9ca3f37059/conf/server.xml</span><br><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">"8005"</span> <span class="attr">shutdown</span>=<span class="string">"SHUTDOWN"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.startup.VersionLoggerListener"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.core.AprLifecycleListener"</span> <span class="attr">SSLEngine</span>=<span class="string">"on"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.core.JreMemoryLeakPreventionListener"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.mbeans.GlobalResourcesLifecycleListener"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.core.ThreadLocalLeakPreventionListener"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">GlobalNamingResources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Resource</span> <span class="attr">name</span>=<span class="string">"UserDatabase"</span> <span class="attr">auth</span>=<span class="string">"Container"</span> <span class="attr">type</span>=<span class="string">"org.apache.catalina.UserDatabase"</span> <span class="attr">description</span>=<span class="string">"User database that can be updated and saved"</span> <span class="attr">factory</span>=<span class="string">"org.apache.catalina.users.MemoryUserDatabaseFactory"</span> <span class="attr">pathname</span>=<span class="string">"conf/tomcat-users.xml"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">GlobalNamingResources</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">"Catalina"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8087"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8009"</span> <span class="attr">protocol</span>=<span class="string">"AJP/1.3"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">"Catalina"</span> <span class="attr">defaultHost</span>=<span class="string">"localhost"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.realm.LockOutRealm"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.realm.UserDatabaseRealm"</span> <span class="attr">resourceName</span>=<span class="string">"UserDatabase"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Realm</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span> <span class="attr">appBase</span>=<span class="string">"/Users/qishengli/software/apache-tomcat-8.5.32/webapps"</span> <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span> <span class="attr">deployOnStartup</span>=<span class="string">"false"</span> <span class="attr">deployIgnore</span>=<span class="string">"^(?!(manager)|(tomee)$).*"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attr">directory</span>=<span class="string">"logs"</span> <span class="attr">prefix</span>=<span class="string">"localhost_access_log"</span> <span class="attr">suffix</span>=<span class="string">".txt"</span> <span class="attr">pattern</span>=<span class="string">"%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://xstarcd.github.io/wiki/shell/exec_redirect.html" rel="external nofollow noopener noreferrer" target="_blank">linux exec与重定向</a></li><li><a href="https://stackoverflow.com/questions/29984238/whats-the-difference-between-service-tomcat-start-stop-and-catalina-sh-run-sto" rel="external nofollow noopener noreferrer" target="_blank">apache tomee - Whats the difference between service tomcat start/stop and ./catalina.sh run/stop - Stack Overflow</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;启动脚本&quot;&gt;&lt;a href=&quot;#启动脚本&quot; class=&quot;headerlink&quot; title=&quot;启动脚本&quot;&gt;&lt;/a&gt;启动脚本&lt;/h2&gt;&lt;h3 id=&quot;startup-sh&quot;&gt;&lt;a href=&quot;#startup-sh&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="tomcat" scheme="http://qsli.github.io/categories/tomcat/"/>
    
    
      <category term="tomcat-startup" scheme="http://qsli.github.io/tags/tomcat-startup/"/>
    
  </entry>
  
  <entry>
    <title>web.xml</title>
    <link href="http://qsli.github.io/2021/10/16/web-xml/"/>
    <id>http://qsli.github.io/2021/10/16/web-xml/</id>
    <published>2021-10-16T09:45:06.884Z</published>
    <updated>2021-10-16T09:45:06.884Z</updated>
    
    <content type="html"><![CDATA[<h2 id="load-on-startup标签"><a href="#load-on-startup标签" class="headerlink" title="load-on-startup标签"></a>load-on-startup标签</h2><blockquote><p>Servlets are initialized either lazily at request processing time or eagerly during<br>deployment. In the latter case, they are initialized in the order indicated by<br>their load-on-startup elements.</p></blockquote><p>在web容器启动的时候，可以采用<code>lazily</code>加载的方式和<code>eagerly</code>的方式。</p><p><code>load-on-startup</code>中的值决定了进行哪种方式。</p><blockquote><p>If the value is a negative integer, or the element is not present, the<br>container is free to load the servlet whenever it chooses. If the value is a positive<br>integer or 0, the container must load and initialize the servlet as the application is<br>deployed.</p></blockquote><p>如果<load-on-startup>这个元素没有出现，或者出现了但是里面的值是负的，容器可以按照自己的需要选择加载Servlet的时机。</load-on-startup></p><p>如果里面的值是正数或者0，容器必须保证在容器启动的时候加载和初始化这个servlet</p><blockquote><p> The container must guarantee that servlets marked with lower integers<br>are loaded before servlets marked with higher integers.</p></blockquote><p>这个值越小，优先级越高，容器优先加载。</p><blockquote><p>The container may choose<br>the order of loading of servlets with the same load-on-startup value.</p></blockquote><p>如果里面的值是一样的，那么加载的顺序由容器来决定（不同实现可能不同）</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li>Java Servlet Specification 3.0</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;load-on-startup标签&quot;&gt;&lt;a href=&quot;#load-on-startup标签&quot; class=&quot;headerlink&quot; title=&quot;load-on-startup标签&quot;&gt;&lt;/a&gt;load-on-startup标签&lt;/h2&gt;&lt;blockquote&gt;

      
    
    </summary>
    
      <category term="tomcat" scheme="http://qsli.github.io/categories/tomcat/"/>
    
    
      <category term="servlet" scheme="http://qsli.github.io/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title>hexo迁移到ubuntu</title>
    <link href="http://qsli.github.io/2021/10/16/hexo-ubuntu/"/>
    <id>http://qsli.github.io/2021/10/16/hexo-ubuntu/</id>
    <published>2021-10-16T09:45:06.741Z</published>
    <updated>2021-10-16T09:45:06.741Z</updated>
    
    <content type="html"><![CDATA[<p>系统切换到ubuntu之后，使用的apt安装的node，默认权限是sudo。安装hexo之后也必须以sudo身份执行。<br>需要修改下node的权限，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  qsli.github.com (hexo|✚1…)  npm config get prefix</span><br><span class="line">/usr/local</span><br></pre></td></tr></table></figure><p>修改owner</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R $(whoami) $(npm config get prefix)/&#123;lib/node_modules,bin,share&#125;</span><br></pre></td></tr></table></figure><p>修改owner之后就可以正常执行hexo了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://docs.npmjs.com/getting-started/fixing-npm-permissions" rel="external nofollow noopener noreferrer" target="_blank">03 - Fixing npm permissions | npm Documentation</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;系统切换到ubuntu之后，使用的apt安装的node，默认权限是sudo。安装hexo之后也必须以sudo身份执行。&lt;br&gt;需要修改下node的权限，命令如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td clas
      
    
    </summary>
    
      <category term="hexo" scheme="http://qsli.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://qsli.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>git-commit-id执行耗时过长</title>
    <link href="http://qsli.github.io/2021/08/08/git-commit-id/"/>
    <id>http://qsli.github.io/2021/08/08/git-commit-id/</id>
    <published>2021-08-08T10:07:18.000Z</published>
    <updated>2021-11-13T17:53:22.251Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>maven的<code>git-commit-id</code>插件，可以在release jar包时，生成一个<code>git.properties</code>文件，文件中可以附带上git的一些信息。<code>git.properties</code>示例：</p><img src="/2021/08/08/git-commit-id/image-20210808174520654.png"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#Generated by Git-Commit-Id-Plugin</span><br><span class="line">#Sun Jun 27 14:58:49 CST 2021</span><br><span class="line">git.branch=6b3dbc38d106181da431300c928cc961d2454c66</span><br><span class="line">git.build.host=2926090-11428607-20260424</span><br><span class="line">git.build.time=20210627145849282</span><br><span class="line">git.build.user.email=</span><br><span class="line">git.build.user.name=</span><br><span class="line">git.build.version=1.0.2458</span><br><span class="line">git.commit.id=6b3dbc38d106181da431300c928cc961d2454c66</span><br><span class="line">git.commit.id.abbrev=6b3dbc38</span><br><span class="line">git.commit.time=20210627145707000</span><br><span class="line">git.commit.user.email=xx@xx.com</span><br><span class="line">git.commit.user.name=xx</span><br><span class="line">git.remote.origin.url=git@git.xxx</span><br></pre></td></tr></table></figure><p>使用过程中，会发现一些大的项目，执行这个插件的时间总是很长：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2021-07-16 21:23:25.000 [INFO] [INFO] --- git-commit-id-plugin:2.2.6:revision (get-the-git-infos) @ xxx ---</span><br><span class="line">2021-07-16 21:24:03.000 [INFO] [INFO]</span><br></pre></td></tr></table></figure><p>比如这个模块，就执行了38s，如果有多个模块的话，这个时间的花费就非常的客观了，一次release都能好几分钟。</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>获取git的哪些属性可以通过xml来配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>pl.project13.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>git-commit-id-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;git-commit-id-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span>&gt;</span>get-the-git-infos<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">goal</span>&gt;</span>revision<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>false<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">abbrevLength</span>&gt;</span>8<span class="tag">&lt;/<span class="name">abbrevLength</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dateFormat</span>&gt;</span>yyyyMMddHHmmssSSS<span class="tag">&lt;/<span class="name">dateFormat</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">failOnNoGitDirectory</span>&gt;</span>false<span class="tag">&lt;/<span class="name">failOnNoGitDirectory</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">failOnUnableToExtractRepoInfo</span>&gt;</span>false<span class="tag">&lt;/<span class="name">failOnUnableToExtractRepoInfo</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">generateGitPropertiesFile</span>&gt;</span>true<span class="tag">&lt;/<span class="name">generateGitPropertiesFile</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">gitDescribe</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">skip</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skip</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">gitDescribe</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">includeOnlyProperties</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">include</span>&gt;</span>git.branch<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">include</span>&gt;</span>git.build<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">include</span>&gt;</span>git.commit.id<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">include</span>&gt;</span>git.commit.time<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">include</span>&gt;</span>git.commit.user<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">include</span>&gt;</span>git.remote.origin.url<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">includeOnlyProperties</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有些属性的获取是比较耗时的，需要遍历所有的commit记录（比如Tags等）。但是我们的配置中<strong>并没有这个属性</strong>，时间还是很长，执行火焰图发现：</p><img src="/2021/08/08/git-commit-id/loadimage-8416461.png"><p>从火焰图中，可以明细的看出，在递归地遍历git的history，而且这个操作是getTags触发的。阅读源码发现，低版本的插件，<strong>是先计算，后过滤</strong>。也就是不管你配置了没有配置这个属性，都会参与一遍计算：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pl.project13.maven.git.GitCommitIdMojo#execute</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 获取所有git的数据，包含tags</span></span><br><span class="line">loadGitData(properties);</span><br><span class="line">loadBuildData(properties);</span><br><span class="line">loadShortDescribe(properties);</span><br><span class="line">propertiesReplacer.performReplacement(properties, replacementProperties);</span><br><span class="line"><span class="comment">// 2. 根据传入的参数进行过滤，相当于总是获取全量数据，然后给用户的视图进行了过滤</span></span><br><span class="line">propertiesFilterer.filter(properties, includeOnlyProperties, <span class="keyword">this</span>.prefixDot);</span><br><span class="line">propertiesFilterer.filterNot(properties, excludeProperties, <span class="keyword">this</span>.prefixDot);</span><br><span class="line">logProperties();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.  pl.project13.maven.git.GitDataProvider#loadGitData</span></span><br><span class="line"><span class="comment">// 这里直接是getTags()，而不是provider的模式，所以直接计算了所有的tags，很耗时</span></span><br><span class="line">put(properties, GitCommitPropertyConstant.TAGS, getTags());</span><br><span class="line">put(properties,GitCommitPropertyConstant.CLOSEST_TAG_NAME, getClosestTagName());</span><br><span class="line">put(properties,GitCommitPropertyConstant.CLOSEST_TAG_COMMIT_COUNT, getClosestTagCommitCount());</span><br></pre></td></tr></table></figure><p>loadGitData时，将所有的属性都计算了一遍，然后扔到properties中，后续再propertiesFilterer进行过滤。切换到最新版的代码，已经修改为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pl.project13.core.GitDataProvider#loadGitData</span></span><br><span class="line"><span class="comment">// 已经改成了provider的形式，这里是方法引用，压栈时不会触发属性的计算</span></span><br><span class="line">maybePut(properties, GitCommitPropertyConstant.TAGS, <span class="keyword">this</span>::getTags);</span><br><span class="line">maybePut(properties,GitCommitPropertyConstant.CLOSEST_TAG_NAME, <span class="keyword">this</span>::getClosestTagName);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// pl.project13.core.GitDataProvider#maybePut</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">maybePut</span><span class="params">(@Nonnull Properties properties, String key, SupplierEx&lt;String&gt; value)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> GitCommitIdExecutionException </span>&#123;</span><br><span class="line">  String keyWithPrefix = prefixDot + key;</span><br><span class="line">  <span class="keyword">if</span> (properties.stringPropertyNames().contains(keyWithPrefix)) &#123;</span><br><span class="line">    String propertyValue = properties.getProperty(keyWithPrefix);</span><br><span class="line">    log.info(<span class="string">"Using cached &#123;&#125; with value &#123;&#125;"</span>, keyWithPrefix, propertyValue);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (PropertiesFilterer.isIncluded(keyWithPrefix, includeOnlyProperties, excludeProperties)) &#123;</span><br><span class="line">    <span class="comment">// 符合条件（配置文件中配置了对应的属性）的才会get，触发计算</span></span><br><span class="line">    String propertyValue = value.get();</span><br><span class="line">    log.info(<span class="string">"Collected &#123;&#125; with value &#123;&#125;"</span>, keyWithPrefix, propertyValue);</span><br><span class="line">    PropertyManager.putWithoutPrefix(properties, keyWithPrefix, propertyValue);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新的代码中已经改为<strong>provider的模式</strong>了，这种是懒加载的，实际去get的时候，才会触发计算。因此直接升级之后就好了，升级之后，耗时直接变为毫秒级。</p><h3 id="JGit"><a href="#JGit" class="headerlink" title="JGit"></a>JGit</h3><p>除了计算逻辑上的bug，还有一个jgit与native git的性能差异，</p><p>issue中也有人反馈tag过多导致执行慢的，但是通过使用本地的git替换之后从<strong>38s到3.6s</strong></p><p><a href="https://github.com/git-commit-id/git-commit-id-maven-plugin/issues/408" rel="external nofollow noopener noreferrer" target="_blank">Long execution times with jgit · Issue #408 · git-commit-id/git-commit-id-maven-plugin</a></p><p>作者的回复中也比较了JGit和NativeGit的区别，JGit可以不用关心git的版本导致的输出形式的变化（这些问题由JGit来负责）；如果使用Native Git的话，是自己解析的git的输出，如果git版本变了，这个解析可能出错。所以默认是使用JGit。</p><blockquote><p>using the native git binary  should usually give your build some performance boost, it may randomly break if you upgrade your git version and it decides to print information in a different format suddenly. As rule of thumb, keep using the default <code>jgit</code> implementation until you notice performance problems within your build</p></blockquote><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul><li>Git-commit-id的低版本（2.2.6至少是有问题的）有计算逻辑的问题（<strong>先计算，后过滤</strong>），升级之后就好了，时间从秒级下降至毫秒级</li><li>JGit的性能不如native git，必要时可以进行替换</li><li>发布脚本，在clone代码时，可以加上–depth=1，避免不必要的提交历史</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/git-commit-id/git-commit-id-maven-plugin" rel="external nofollow noopener noreferrer" target="_blank">GitHub - git-commit-id/git-commit-id-maven-plugin: Maven plugin which includes build-time git repository information into an POJO / *.properties). Make your apps tell you which version exactly they were built from! Priceless in large distributed deployments… :-)</a></li><li><a href="https://github.com/git-commit-id/git-commit-id-maven-plugin/issues?q=slow+down" rel="external nofollow noopener noreferrer" target="_blank">Issues · git-commit-id/git-commit-id-maven-plugin · GitHub</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;maven的&lt;code&gt;git-commit-id&lt;/code&gt;插件，可以在release jar包时，生成一个&lt;code&gt;git.prop
      
    
    </summary>
    
      <category term="maven" scheme="http://qsli.github.io/categories/maven/"/>
    
    
      <category term="git-commit-id" scheme="http://qsli.github.io/tags/git-commit-id/"/>
    
  </entry>
  
  <entry>
    <title>keepalive</title>
    <link href="http://qsli.github.io/2021/03/29/keepalive/"/>
    <id>http://qsli.github.io/2021/03/29/keepalive/</id>
    <published>2021-03-29T08:02:45.000Z</published>
    <updated>2021-11-13T17:53:22.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCP-keep-alive"><a href="#TCP-keep-alive" class="headerlink" title="TCP keep alive"></a>TCP keep alive</h2><p>TCP协议栈的<code>keepalive</code>，连接空闲一定时间后，会进行保活探测</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-order-center-01 ~]$ sudo sysctl -a | grep keep</span><br><span class="line">net.ipv4.tcp_keepalive_intvl = 75</span><br><span class="line">net.ipv4.tcp_keepalive_probes = 9</span><br><span class="line">net.ipv4.tcp_keepalive_time = 7200</span><br></pre></td></tr></table></figure><ul><li><p>tcp_keepalive_time</p><p>the interval between the last data packet sent (simple ACKs are not considered data) and the first keepalive probe; after the connection is marked to need keepalive, this counter is not used any further</p><p>连接空闲<code>tcp_keepalive_time</code>这么久之后，系统协议栈会认为连接需要保活</p></li><li><p>tcp_keepalive_intvl</p><p>the interval between subsequential keepalive probes, regardless of what the connection has exchanged in the meantime</p><p>两次探测的间隔</p></li><li><p>tcp_keepalive_probes</p><p>the number of unacknowledged probes to send before considering the connection dead and notifying the application layer</p><p>探测次数</p><img src="/2021/03/29/keepalive/slide_16.jpg"></li></ul><h2 id="HTTP-keep-alive"><a href="#HTTP-keep-alive" class="headerlink" title="HTTP keep alive"></a>HTTP keep alive</h2><p>从HTTP/1.1之后默认就使用keepalive了，http请求之后，连接不会关闭。这里只是实现了<strong>连接的复用</strong>，但是<strong>并没有保活相关的逻辑</strong>。</p><p>主要是通过header中的<code>Connection: Keep-Alive</code>来实现连接的复用的，http/1.1之后默认就是keepalive，除非显式地声明为close。</p><blockquote><p>parameters</p><p>A comma-separated list of parameters, each consisting of an identifier and a value separated by the equal sign (<code>&#39;=&#39;</code>). The following identifiers are possible:</p><ul><li><code>timeout</code>: indicating the <em>minimum</em> amount of time an idle connection has to be kept opened (in seconds). Note that timeouts longer than the TCP timeout may be ignored if no keep-alive TCP message is set at the transport level.</li><li><code>max</code>: indicating the maximum number of requests that can be sent on this connection before closing it. Unless <code>0</code>, this value is ignored for non-pipelined connections as another request will be sent in the next response. An HTTP pipeline can use it to limit the pipelining.</li></ul></blockquote><p>返回示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Date: Thu, 11 Aug 2016 15:23:13 GMT</span><br><span class="line">Keep-Alive: timeout=5, max=1000</span><br><span class="line">Last-Modified: Mon, 25 Jul 2016 04:32:39 GMT</span><br><span class="line">Server: Apache</span><br><span class="line"></span><br><span class="line">(body)</span><br></pre></td></tr></table></figure><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><blockquote><p>那么 TCP 连接在发送后将仍然保持打开状态，<strong>这样浏览器就可以继续通过同一个 TCP 连接发送请求</strong>。保持 TCP 连接可以省去下次请求时需要建立连接的时间，提升资源加载速度。比如，一个 Web 页面中内嵌的图片就都来自同一个 Web 站点，如果初始化了一个持久连接，你就可以复用该连接，以请求其他资源，而不需要重新再建立新的 TCP 连接。</p></blockquote><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream  BACKEND &#123;</span><br><span class="line">        server   192.168.0.1：8080  weight=1 max_fails=2 fail_timeout=30s;</span><br><span class="line">        server   192.168.0.2：8080  weight=1 max_fails=2 fail_timeout=30s;</span><br><span class="line"></span><br><span class="line">        keepalive 300;        // 这个很重要！</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 8080 default_server;</span><br><span class="line">        server_name <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        location /  &#123;</span><br><span class="line">            proxy_pass http://BACKEND;</span><br><span class="line">            proxy_set_header Host  <span class="variable">$Host</span>;</span><br><span class="line">            proxy_set_header x-forwarded-for <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            add_header Cache-Control no-store;</span><br><span class="line">            add_header Pragma  no-cache;</span><br><span class="line"></span><br><span class="line">            proxy_http_version 1.1;                    // 这两个最好也设置</span><br><span class="line">            proxy_set_header Connection <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">            client_max_body_size  3072k;</span><br><span class="line">            client_body_buffer_size 128k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>默认情况下，nginx已经自动开启了对client连接的keep alive支持。一般场景可以直接使用，但是对于一些比较特殊的场景，还是有必要调整个别参数。</p><p>需要修改nginx的配置文件(在nginx安装目录下的conf/nginx.conf):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; http &#123;</span><br><span class="line">&gt;     keepalive_timeout  120s 120s; // 默认75s</span><br><span class="line">&gt;     keepalive_requests 10000; // 默认是100</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><ul><li><p>keepalive_timeout</p><blockquote><p>第一个参数设置keep-alive客户端连接在服务器端保持开启的超时值。值为0会禁用keep-alive客户端连接。可选的第二个参数在响应的header域中设置一个值“Keep-Alive: timeout=time”。这两个参数可以不一样。</p></blockquote></li><li><p>keepalive_requests</p><blockquote><p>keepalive_requests指令用于设置一个keep-alive连接上可以服务的请求的最大数量。当最大请求数量达到时，连接被关闭。默认是100。</p></blockquote></li><li><p>keepalive</p><blockquote><p>The <code>*connections*</code> parameter sets the <strong>maximum number of idle keepalive connections</strong> to upstream servers that are preserved in the cache of <strong>each worker process</strong>. When this number is exceeded, <strong>the least recently used connections are closed</strong>.</p></blockquote><p>类似<code>maxIdle</code></p></li></ul><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><table><thead><tr><th>配置名称</th><th>备注</th></tr></thead><tbody><tr><td><code>keepAliveTimeout</code></td><td>The number of milliseconds this Connector will <strong>wait for another HTTP request before closing the connection</strong>. The default value is to use the value that has been set for the connectionTimeout attribute. Use a value of -1 to indicate no (i.e. infinite) timeout.</td></tr><tr><td><code>maxKeepAliveRequests</code></td><td>The maximum number of HTTP requests which <strong>can be pipelined</strong> until the connection is closed by the server. Setting this attribute to 1 will disable HTTP/1.0 keep-alive, as well as HTTP/1.1 keep-alive and pipelining. Setting this to -1 will allow an unlimited amount of pipelined or keep-alive HTTP requests. If not specified, this attribute is set to 100.</td></tr></tbody></table><h3 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a>HttpClient</h3><p>apache的httpclient也没有保活的机制，连接的复用依赖于HTTP协议中的<code>keep-alive</code>。HttpClient中有定时的任务，去清理过期和空闲的连接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Closes connections that have been idle longer than the given period</span></span><br><span class="line"><span class="comment">     * of time and evicts them from the pool.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> idletime maximum idle time.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tunit time unit.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">// org.apache.http.pool.AbstractConnPool#closeIdle</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeIdle</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> idletime, <span class="keyword">final</span> TimeUnit tunit)</span> </span>&#123;</span><br><span class="line">  Args.notNull(tunit, <span class="string">"Time unit"</span>);</span><br><span class="line">  <span class="keyword">long</span> time = tunit.toMillis(idletime);</span><br><span class="line">  <span class="keyword">if</span> (time &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    time = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">long</span> deadline = System.currentTimeMillis() - time;</span><br><span class="line">  enumAvailable(<span class="keyword">new</span> PoolEntryCallback&lt;T, C&gt;() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">final</span> PoolEntry&lt;T, C&gt; entry)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 空闲超过idleTime的，给关闭掉</span></span><br><span class="line">      <span class="keyword">if</span> (entry.getUpdated() &lt;= deadline) &#123;</span><br><span class="line">        entry.close();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Closes expired connections and evicts them from the pool.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">// org.apache.http.pool.AbstractConnPool#closeExpired</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeExpired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line">  enumAvailable(<span class="keyword">new</span> PoolEntryCallback&lt;T, C&gt;() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">final</span> PoolEntry&lt;T, C&gt; entry)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 过期的，Keep-Alive: timeout=5, max=1000</span></span><br><span class="line">      <span class="keyword">if</span> (entry.isExpired(now)) &#123;</span><br><span class="line">        entry.close();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Enumerates all available connections.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 4.3</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">// org.apache.http.pool.AbstractConnPool#enumAvailable</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">enumAvailable</span><span class="params">(<span class="keyword">final</span> PoolEntryCallback&lt;T, C&gt; callback)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.lock.lock();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> Iterator&lt;E&gt; it = <span class="keyword">this</span>.available.iterator();</span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">      <span class="keyword">final</span> E entry = it.next();</span><br><span class="line">      callback.process(entry);</span><br><span class="line">      <span class="keyword">if</span> (entry.isClosed()) &#123;</span><br><span class="line">        <span class="keyword">final</span> RouteSpecificPool&lt;T, C, E&gt; pool = getPool(entry.getRoute());</span><br><span class="line">        pool.remove(entry);</span><br><span class="line">        it.remove();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    purgePoolMap();</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.lock.unlock();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>归还连接时，根据response header中的来判断是否可以复用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.http.impl.execchain.MinimalClientExec#execute</span></span><br><span class="line"><span class="comment">// The connection is in or can be brought to a re-usable state.</span></span><br><span class="line"><span class="keyword">if</span> (reuseStrategy.keepAlive(response, context)) &#123;</span><br><span class="line">  <span class="comment">// Set the idle duration of this connection</span></span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">long</span> duration = keepAliveStrategy.getKeepAliveDuration(response, context);</span><br><span class="line">  <span class="comment">// 连接有效期</span></span><br><span class="line">  releaseTrigger.setValidFor(duration, TimeUnit.MILLISECONDS);</span><br><span class="line">  <span class="comment">// 标记为可以复用</span></span><br><span class="line">  releaseTrigger.markReusable();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  releaseTrigger.markNonReusable();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// org.apache.http.impl.conn.PoolingHttpClientConnectionManager#releaseConnection</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">releaseConnection</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">final</span> HttpClientConnection managedConn,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">final</span> Object state,</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">final</span> <span class="keyword">long</span> keepalive, <span class="keyword">final</span> TimeUnit tunit)</span> </span>&#123;</span><br><span class="line">  Args.notNull(managedConn, <span class="string">"Managed connection"</span>);</span><br><span class="line">  <span class="keyword">synchronized</span> (managedConn) &#123;</span><br><span class="line">    <span class="keyword">final</span> CPoolEntry entry = CPoolProxy.detach(managedConn);</span><br><span class="line">    <span class="keyword">if</span> (entry == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> ManagedHttpClientConnection conn = entry.getConnection();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (conn.isOpen()) &#123;</span><br><span class="line">        entry.setState(state);</span><br><span class="line">        <span class="comment">// 设置对象的过期时间</span></span><br><span class="line">        entry.updateExpiry(keepalive, tunit != <span class="keyword">null</span> ? tunit : TimeUnit.MILLISECONDS);</span><br><span class="line">        <span class="comment">// debug 日志</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.log.isDebugEnabled()) &#123;</span><br><span class="line">          <span class="keyword">final</span> String s;</span><br><span class="line">          <span class="keyword">if</span> (keepalive &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            s = <span class="string">"for "</span> + (<span class="keyword">double</span>) keepalive / <span class="number">1000</span> + <span class="string">" seconds"</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            s = <span class="string">"indefinitely"</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">this</span>.log.debug(<span class="string">"Connection "</span> + format(entry) + <span class="string">" can be kept alive "</span> + s);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.pool.release(entry, conn.isOpen() &amp;&amp; entry.isRouteComplete());</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.log.isDebugEnabled()) &#123;</span><br><span class="line">        <span class="keyword">this</span>.log.debug(<span class="string">"Connection released: "</span> + format(entry) + formatStats(entry.getRoute()));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ConnectionKeepAliveStrategy"><a href="#ConnectionKeepAliveStrategy" class="headerlink" title="ConnectionKeepAliveStrategy"></a>ConnectionKeepAliveStrategy</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.http.conn.ConnectionKeepAliveStrategy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConnectionKeepAliveStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the duration of time which this connection can be safely kept</span></span><br><span class="line"><span class="comment">     * idle. If the connection is left idle for longer than this period of time,</span></span><br><span class="line"><span class="comment">     * it MUST not reused. A value of 0 or less may be returned to indicate that</span></span><br><span class="line"><span class="comment">     * there is no suitable suggestion.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * When coupled with a &#123;<span class="doctag">@link</span> org.apache.http.ConnectionReuseStrategy&#125;, if</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> org.apache.http.ConnectionReuseStrategy#keepAlive(</span></span><br><span class="line"><span class="comment">     *   HttpResponse, HttpContext)&#125; returns true, this allows you to control</span></span><br><span class="line"><span class="comment">     * how long the reuse will last. If keepAlive returns false, this should</span></span><br><span class="line"><span class="comment">     * have no meaningful impact</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     *            The last response received over the connection.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     *            the context in which the connection is being used.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the duration in ms for which it is safe to keep the connection</span></span><br><span class="line"><span class="comment">     *         idle, or &lt;=0 if no suggested duration.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="function"><span class="keyword">long</span> <span class="title">getKeepAliveDuration</span><span class="params">(HttpResponse response, HttpContext context)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy</span></span><br><span class="line"><span class="meta">@Immutable</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultConnectionKeepAliveStrategy</span> <span class="keyword">implements</span> <span class="title">ConnectionKeepAliveStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DefaultConnectionKeepAliveStrategy INSTANCE = <span class="keyword">new</span> DefaultConnectionKeepAliveStrategy();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getKeepAliveDuration</span><span class="params">(<span class="keyword">final</span> HttpResponse response, <span class="keyword">final</span> HttpContext context)</span> </span>&#123;</span><br><span class="line">        Args.notNull(response, <span class="string">"HTTP response"</span>);</span><br><span class="line">      <span class="comment">// header中的Keep-Alive</span></span><br><span class="line">        <span class="keyword">final</span> HeaderElementIterator it = <span class="keyword">new</span> BasicHeaderElementIterator(</span><br><span class="line">                response.headerIterator(HTTP.CONN_KEEP_ALIVE));</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">final</span> HeaderElement he = it.nextElement();</span><br><span class="line">            <span class="keyword">final</span> String param = he.getName();</span><br><span class="line">            <span class="keyword">final</span> String value = he.getValue();</span><br><span class="line">            <span class="keyword">if</span> (value != <span class="keyword">null</span> &amp;&amp; param.equalsIgnoreCase(<span class="string">"timeout"</span>)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                  <span class="comment">// 解析timeout的值</span></span><br><span class="line">                    <span class="keyword">return</span> Long.parseLong(value) * <span class="number">1000</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span>(<span class="keyword">final</span> NumberFormatException ignore) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ConnectionReuseStrategy"><a href="#ConnectionReuseStrategy" class="headerlink" title="ConnectionReuseStrategy"></a>ConnectionReuseStrategy</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.http.ConnectionReuseStrategy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConnectionReuseStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Decides whether a connection can be kept open after a request.</span></span><br><span class="line"><span class="comment">     * If this method returns &lt;code&gt;false&lt;/code&gt;, the caller MUST</span></span><br><span class="line"><span class="comment">     * close the connection to correctly comply with the HTTP protocol.</span></span><br><span class="line"><span class="comment">     * If it returns &lt;code&gt;true&lt;/code&gt;, the caller SHOULD attempt to</span></span><br><span class="line"><span class="comment">     * keep the connection open for reuse with another request.</span></span><br><span class="line"><span class="comment">     * &lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * One can use the HTTP context to retrieve additional objects that</span></span><br><span class="line"><span class="comment">     * may be relevant for the keep-alive strategy: the actual HTTP</span></span><br><span class="line"><span class="comment">     * connection, the original HTTP request, target host if known,</span></span><br><span class="line"><span class="comment">     * number of times the connection has been reused already and so on.</span></span><br><span class="line"><span class="comment">     * &lt;br/&gt;</span></span><br><span class="line"><span class="comment">     * If the connection is already closed, &lt;code&gt;false&lt;/code&gt; is returned.</span></span><br><span class="line"><span class="comment">     * The stale connection check MUST NOT be triggered by a</span></span><br><span class="line"><span class="comment">     * connection reuse strategy.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     *          The last response received over that connection.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context   the context in which the connection is being</span></span><br><span class="line"><span class="comment">     *          used.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &lt;code&gt;true&lt;/code&gt; if the connection is allowed to be reused, or</span></span><br><span class="line"><span class="comment">     *         &lt;code&gt;false&lt;/code&gt; if it MUST NOT be reused</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">keepAlive</span><span class="params">(HttpResponse response, HttpContext context)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.http.impl.DefaultConnectionReuseStrategy</span></span><br><span class="line"><span class="comment">// see interface ConnectionReuseStrategy</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">keepAlive</span><span class="params">(<span class="keyword">final</span> HttpResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">final</span> HttpContext context)</span> </span>&#123;</span><br><span class="line">  Args.notNull(response, <span class="string">"HTTP response"</span>);</span><br><span class="line">  Args.notNull(context, <span class="string">"HTTP context"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Check for a self-terminating entity. If the end of the entity will</span></span><br><span class="line">  <span class="comment">// be indicated by closing the connection, there is no keep-alive.</span></span><br><span class="line">  <span class="keyword">final</span> ProtocolVersion ver = response.getStatusLine().getProtocolVersion();</span><br><span class="line">  <span class="keyword">final</span> Header teh = response.getFirstHeader(HTTP.TRANSFER_ENCODING);</span><br><span class="line">  <span class="keyword">if</span> (teh != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 有Transfer-Encoding，但是值不是chunked的，不可复用</span></span><br><span class="line">    <span class="comment">// 看上面的注释是因为，有些encoding会以连接关闭来标识entity结束</span></span><br><span class="line">    <span class="keyword">if</span> (!HTTP.CHUNK_CODING.equalsIgnoreCase(teh.getValue())) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 有response body，但是content-length不合法的也应该关闭</span></span><br><span class="line">    <span class="comment">// 这是RFC中规定的</span></span><br><span class="line">    <span class="keyword">if</span> (canResponseHaveBody(response)) &#123;</span><br><span class="line">      <span class="keyword">final</span> Header[] clhs = response.getHeaders(HTTP.CONTENT_LEN);</span><br><span class="line">      <span class="comment">// Do not reuse if not properly content-length delimited</span></span><br><span class="line">      <span class="keyword">if</span> (clhs.length == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> Header clh = clhs[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">final</span> <span class="keyword">int</span> contentLen = Integer.parseInt(clh.getValue());</span><br><span class="line">          <span class="keyword">if</span> (contentLen &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> NumberFormatException ex) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Check for the "Connection" header. If that is absent, check for</span></span><br><span class="line">  <span class="comment">// the "Proxy-Connection" header. The latter is an unspecified and</span></span><br><span class="line">  <span class="comment">// broken but unfortunately common extension of HTTP.</span></span><br><span class="line">  <span class="comment">// header中的Connection</span></span><br><span class="line">  HeaderIterator hit = response.headerIterator(HTTP.CONN_DIRECTIVE);</span><br><span class="line">  <span class="keyword">if</span> (!hit.hasNext()) &#123;</span><br><span class="line">    hit = response.headerIterator(<span class="string">"Proxy-Connection"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Experimental usage of the "Connection" header in HTTP/1.0 is</span></span><br><span class="line">  <span class="comment">// documented in RFC 2068, section 19.7.1. A token "keep-alive" is</span></span><br><span class="line">  <span class="comment">// used to indicate that the connection should be persistent.</span></span><br><span class="line">  <span class="comment">// Note that the final specification of HTTP/1.1 in RFC 2616 does not</span></span><br><span class="line">  <span class="comment">// include this information. Neither is the "Connection" header</span></span><br><span class="line">  <span class="comment">// mentioned in RFC 1945, which informally describes HTTP/1.0.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// RFC 2616 specifies "close" as the only connection token with a</span></span><br><span class="line">  <span class="comment">// specific meaning: it disables persistent connections.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// The "Proxy-Connection" header is not formally specified anywhere,</span></span><br><span class="line">  <span class="comment">// but is commonly used to carry one token, "close" or "keep-alive".</span></span><br><span class="line">  <span class="comment">// The "Connection" header, on the other hand, is defined as a</span></span><br><span class="line">  <span class="comment">// sequence of tokens, where each token is a header name, and the</span></span><br><span class="line">  <span class="comment">// token "close" has the above-mentioned additional meaning.</span></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">// To get through this mess, we treat the "Proxy-Connection" header</span></span><br><span class="line">  <span class="comment">// in exactly the same way as the "Connection" header, but only if</span></span><br><span class="line">  <span class="comment">// the latter is missing. We scan the sequence of tokens for both</span></span><br><span class="line">  <span class="comment">// "close" and "keep-alive". As "close" is specified by RFC 2068,</span></span><br><span class="line">  <span class="comment">// it takes precedence and indicates a non-persistent connection.</span></span><br><span class="line">  <span class="comment">// If there is no "close" but a "keep-alive", we take the hint.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (hit.hasNext()) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> TokenIterator ti = createTokenIterator(hit);</span><br><span class="line">      <span class="keyword">boolean</span> keepalive = <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">while</span> (ti.hasNext()) &#123;</span><br><span class="line">        <span class="keyword">final</span> String token = ti.nextToken();</span><br><span class="line">        <span class="keyword">if</span> (HTTP.CONN_CLOSE.equalsIgnoreCase(token)) &#123;</span><br><span class="line">          <span class="comment">// 如果是Connection: close，是不能复用的</span></span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (HTTP.CONN_KEEP_ALIVE.equalsIgnoreCase(token)) &#123;</span><br><span class="line">          <span class="comment">// continue the loop, there may be a "close" afterwards</span></span><br><span class="line">          <span class="comment">// Connection: Keep-Alive</span></span><br><span class="line">          keepalive = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (keepalive)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// neither "close" nor "keep-alive", use default policy</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> ParseException px) &#123;</span><br><span class="line">      <span class="comment">// invalid connection header means no persistent connection</span></span><br><span class="line">      <span class="comment">// we don't have logging in HttpCore, so the exception is lost</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// HTTP/1.1之后，默认都是可以keepalive的</span></span><br><span class="line">  <span class="comment">// default since HTTP/1.1 is persistent, before it was non-persistent</span></span><br><span class="line">  <span class="keyword">return</span> !ver.lessEquals(HttpVersion.HTTP_1_0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><h3 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask#doTask</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doTask</span><span class="params">(Channel channel)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Long lastRead = lastRead(channel);</span><br><span class="line">    Long lastWrite = lastWrite(channel);</span><br><span class="line">    <span class="keyword">if</span> ((lastRead != <span class="keyword">null</span> &amp;&amp; now() - lastRead &gt; heartbeat)</span><br><span class="line">        || (lastWrite != <span class="keyword">null</span> &amp;&amp; now() - lastWrite &gt; heartbeat)) &#123;</span><br><span class="line">      Request req = <span class="keyword">new</span> Request();</span><br><span class="line">      req.setVersion(Version.getProtocolVersion());</span><br><span class="line">      req.setTwoWay(<span class="keyword">true</span>);</span><br><span class="line">      req.setEvent(HEARTBEAT_EVENT);</span><br><span class="line">      channel.send(req);</span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(<span class="string">"Send heartbeat to remote channel "</span> + channel.getRemoteAddress()</span><br><span class="line">                     + <span class="string">", cause: The channel has no data-transmission exceeds a heartbeat period: "</span></span><br><span class="line">                     + heartbeat + <span class="string">"ms"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">    logger.warn(<span class="string">"Exception when heartbeat to remote channel "</span> + channel.getRemoteAddress(), t);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Druid"><a href="#Druid" class="headerlink" title="Druid"></a>Druid</h3><blockquote><p>在Druid-1.0.27之前的版本，DruidDataSource建议使用TestWhileIdle来保证连接的有效性，但仍有很多场景需要对连接进行保活处理。在1.0.28版本之后，新加入keepAlive配置，缺省关闭。</p><p>使用keepAlive功能，建议使用最新版本，比如1.1.21或者更高版本</p></blockquote><h3 id="Hikari-CP"><a href="#Hikari-CP" class="headerlink" title="Hikari CP"></a>Hikari CP</h3><blockquote><p>⏳<code>keepaliveTime</code><br>This property controls how frequently HikariCP will attempt to keep a connection alive, in order to <strong>prevent it from being timed out by the database or network infrastructure</strong>. This value <strong>must be less than the <code>maxLifetime</code> value</strong>. A “keepalive” will only occur on an idle connection. When the time arrives for a “keepalive” against a given connection, that connection will be removed from the pool, “pinged”, and then returned to the pool. The ‘ping’ is one of either: invocation of the JDBC4 <code>isValid()</code> method, or execution of the <code>connectionTestQuery</code>. Typically, the duration out-of-the-pool should be measured in single digit milliseconds or even sub-millisecond, and therefore should have little or no noticible performance impact. The minimum allowed value is 30000ms (30 seconds), but a value in the range of minutes is most desirable. <em>Default: 0 (disabled)</em></p></blockquote><blockquote><p>⏳<code>idleTimeout</code><br>This property controls the maximum amount of time that a connection is allowed to sit idle in the pool. <strong>This setting only applies when <code>minimumIdle</code> is defined to be less than <code>maximumPoolSize</code>.</strong> Idle connections will <em>not</em> be retired once the pool reaches <code>minimumIdle</code> connections. Whether a connection is retired as idle or not is subject to a maximum variation of +30 seconds, and average variation of +15 seconds. A connection will never be retired as idle <em>before</em> this timeout. A value of 0 means that idle connections are never removed from the pool. The minimum allowed value is 10000ms (10 seconds). <em>Default: 600000 (10 minutes)</em></p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://time.geekbang.org/column/article/116588" rel="external nofollow noopener noreferrer" target="_blank">03 | HTTP请求流程：为什么很多站点第二次打开速度会很快？</a></li><li><a href="https://github.com/brettwooldridge/HikariCP" rel="external nofollow noopener noreferrer" target="_blank">brettwooldridge/HikariCP: 光 HikariCP・A solid, high-performance, JDBC connection pool at last.</a></li><li><a href="https://github.com/alibaba/druid/wiki/KeepAlive_cn" rel="external nofollow noopener noreferrer" target="_blank">KeepAlive_cn · alibaba/druid Wiki</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Keep-Alive" rel="external nofollow noopener noreferrer" target="_blank">Keep-Alive - HTTP | MDN</a></li><li><a href="https://tldp.org/HOWTO/TCP-Keepalive-HOWTO/usingkeepalive.html" rel="external nofollow noopener noreferrer" target="_blank">Using TCP keepalive under Linux</a></li><li><a href="https://slideplayer.com/slide/7378740/" rel="external nofollow noopener noreferrer" target="_blank">TCP Timers Chia-tai Tsai Introduction The 7 Timers for each Connection Connection-Establishment Timer Establish a new connection. - ppt download</a></li><li><a href="https://www.nginx.com/blog/http-keepalives-and-web-performance/" rel="external nofollow noopener noreferrer" target="_blank">Using NGINX as an Accelerating Proxy for HTTP Servers</a></li><li><a href="https://my.oschina.net/OutOfMemory/blog/4272077" rel="external nofollow noopener noreferrer" target="_blank">Dubbo分析之心跳设计 - ksfzhaohui的个人页面 - OSCHINA - 中文开源技术交流社区</a></li><li><a href="https://www.cnkirito.moe/tcp-talk/" rel="external nofollow noopener noreferrer" target="_blank">聊聊 TCP 长连接和心跳那些事 | 徐靖峰|个人博客</a></li><li><a href="https://skyao.gitbooks.io/learning-nginx/content/documentation/keep_alive.html" rel="external nofollow noopener noreferrer" target="_blank">长连接 · Nginx 学习笔记</a></li><li><a href="http://nginx.org/en/docs/http/ngx_http_upstream_module.html#:~:text=The%20connections%20parameter%20sets%20the,recently%20used%20connections%20are%20closed." rel="external nofollow noopener noreferrer" target="_blank">Module ngx_http_upstream_module</a></li><li><a href="https://my.oschina.net/haitaohu/blog/3043113" rel="external nofollow noopener noreferrer" target="_blank">NGINX + TOMCAT出现大量的TIME-WAIT状态的TCP连接解决 - 小海bug的个人空间 - OSCHINA - 中文开源技术交流社区</a></li><li><a href="https://tomcat.apache.org/tomcat-8.5-doc/config/http.html" rel="external nofollow noopener noreferrer" target="_blank">Apache Tomcat 8 Configuration Reference (8.5.64) - The HTTP Connector</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;TCP-keep-alive&quot;&gt;&lt;a href=&quot;#TCP-keep-alive&quot; class=&quot;headerlink&quot; title=&quot;TCP keep alive&quot;&gt;&lt;/a&gt;TCP keep alive&lt;/h2&gt;&lt;p&gt;TCP协议栈的&lt;code&gt;keepalive
      
    
    </summary>
    
      <category term="http" scheme="http://qsli.github.io/categories/http/"/>
    
    
      <category term="keepalive" scheme="http://qsli.github.io/tags/keepalive/"/>
    
  </entry>
  
  <entry>
    <title>spring-transaction</title>
    <link href="http://qsli.github.io/2021/03/23/spring-tx/"/>
    <id>http://qsli.github.io/2021/03/23/spring-tx/</id>
    <published>2021-03-23T09:35:02.000Z</published>
    <updated>2021-11-13T17:53:22.301Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="JDBC事务"><a href="#JDBC事务" class="headerlink" title="JDBC事务"></a>JDBC事务</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (Connection conn = DriverManager.getConnection(connectString)) &#123;</span><br><span class="line">        conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">try</span> (PreparedStatement psts = conn.prepareStatement(<span class="string">"update words set word=CONCAT(word, '++') where id=?"</span>)) &#123;</span><br><span class="line">            <span class="comment">// 第一个更新语句</span></span><br><span class="line">            psts.setInt(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">            psts.executeUpdate();</span><br><span class="line">            <span class="comment">// 第二个更新语句</span></span><br><span class="line">            <span class="comment">// 抛出异常</span></span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">            psts.setInt(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">            psts.executeUpdate();</span><br><span class="line">            <span class="comment">// 提交事务</span></span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            conn.rollback();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2021-03-23T03:07:15.228849Z   93 Connectroot@localhost on <span class="built_in">test</span> using TCP/IP</span><br><span class="line">2021-03-23T03:07:15.235215Z   93 Query/* mysql-connector-java-8.0.20 (Revision: afc0a13cd3c5a0bf57eaa809ee0ee6df1fd5ac9b) */SELECT  @@session.auto_increment_increment AS auto_increment_increment, @@character_set_client AS character_set_client, @@character_set_connection AS character_set_connection, @@character_set_results AS character_set_results, @@character_set_server AS character_set_server, @@collation_server AS collation_server, @@collation_connection AS collation_connection, @@init_connect AS init_connect, @@interactive_timeout AS interactive_timeout, @@license AS license, @@lower_case_table_names AS lower_case_table_names, @@max_allowed_packet AS max_allowed_packet, @@net_write_timeout AS net_write_timeout, @@performance_schema AS performance_schema, @@sql_mode AS sql_mode, @@system_time_zone AS system_time_zone, @@time_zone AS time_zone, @@transaction_isolation AS transaction_isolation, @@wait_timeout AS wait_timeout</span><br><span class="line">2021-03-23T03:07:15.257727Z   93 QuerySET character_set_results = NULL</span><br><span class="line">2021-03-23T03:07:15.261596Z   93 QuerySET autocommit=0</span><br><span class="line">2021-03-23T03:07:15.296076Z   93 Queryupdate words <span class="built_in">set</span> word=CONCAT(word, <span class="string">'++'</span>) <span class="built_in">where</span> id=2</span><br><span class="line">2021-03-23T03:07:15.305666Z   93 Queryrollback</span><br><span class="line">2021-03-23T03:07:15.330138Z   93 Queryrollback</span><br><span class="line">2021-03-23T03:07:15.347768Z   93 Quit</span><br></pre></td></tr></table></figure></p><p>可以看出使用原始的JDBC提供的接口，需要获取conn，设置各种属性，获取statement，同时还需要处理各种资源的关闭，事务的commit或者rollback。这些步骤就是<code>boilerplate code</code>——样板化的代码，非常适合使用模板方法，将这些细节隐藏起来。</p><p>spring提供了JdbcTemplate来简化jdbc相关的开发，对于事务相关的开发，提供了声明式事务和编程式事务。</p><h3 id="声明式事务（Declarative-transaction-management）"><a href="#声明式事务（Declarative-transaction-management）" class="headerlink" title="声明式事务（Declarative transaction management）"></a>声明式事务（Declarative transaction management）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mindTransactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"mindDataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 开启事务注解@Transactional支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(transactionManager = <span class="string">"mindTransactionManager"</span>, readOnly = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> MindEntity mindEntity = minderDao.selectOne(<span class="number">1</span>);</span><br><span class="line">  log.info(<span class="string">"mindEntity = &#123;&#125;"</span>, mindEntity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编程式事务-（Programmatic-transaction-management）"><a href="#编程式事务-（Programmatic-transaction-management）" class="headerlink" title="编程式事务 （Programmatic transaction management）"></a>编程式事务 （Programmatic transaction management）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"orderShardingTransactionTemplate"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> TransactionTemplate <span class="title">transactionTemplate</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  @Qualifier(<span class="string">"orderShardingTransactionManager"</span>)</span> DataSourceTransactionManager dataSourceTransactionManager) </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> TransactionTemplate transactionTemplate = <span class="keyword">new</span> TransactionTemplate(dataSourceTransactionManager);</span><br><span class="line">  transactionTemplate.setTimeout(<span class="number">60</span>);</span><br><span class="line">  <span class="keyword">return</span> transactionTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transactionTemplate.execute(status -&gt; &#123;&#125;)</span><br></pre></td></tr></table></figure><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><img src="http://www.plantuml.com/plantuml/svg/dLAnIWGn4EtdAwRKuduWk5Te9IW8jpyGS-CIp2PBTbRakC9Ez6nixQxIJn05_PbJrxymotAm2yaLfWelRsRUcnUGYfr7PJHP1gYaPwrq9IrZxgMjmxDsDgUoCf9fJ3WBq8NpvO1uAgqio2SR7KbZpgMw71CEzUB45Lf1Tx8CSLPvROlDs-hhVlrzzzok7zhFsv-N5MOPGAyL9zEOGe5qJQfXsejCFSYds2Fx0DtbAbJ4VKR0RcBQii22U003fBauIOaVW3EMtDH99H5x0kVks8uqH5XTyNRX0ZUlJs77lpVlxSVZlrmhLvQQSOdURQEDTWbj-k04UgeR4pxRd7Pd07y0"><p>声明式事务，最终通过AOP代理到了<code>TransactionInterceptor</code>(org.springframework.transaction.interceptor.TransactionInterceptor)，处理逻辑可以顺着配置类查看，这里不再赘述。</p><p>下面从编程式事务入手，解析下源码</p><h3 id="TransactionTemplate"><a href="#TransactionTemplate" class="headerlink" title="TransactionTemplate"></a>TransactionTemplate</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.transaction.support.TransactionTemplate#execute</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">execute</span><span class="params">(TransactionCallback&lt;T&gt; action)</span> <span class="keyword">throws</span> TransactionException </span>&#123;</span><br><span class="line">  Assert.state(<span class="keyword">this</span>.transactionManager != <span class="keyword">null</span>, <span class="string">"No PlatformTransactionManager set"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.transactionManager <span class="keyword">instanceof</span> CallbackPreferringPlatformTransactionManager) &#123;</span><br><span class="line">    <span class="keyword">return</span> ((CallbackPreferringPlatformTransactionManager) <span class="keyword">this</span>.transactionManager).execute(<span class="keyword">this</span>, action);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 获取TransactionStatus</span></span><br><span class="line">    TransactionStatus status = <span class="keyword">this</span>.transactionManager.getTransaction(<span class="keyword">this</span>);</span><br><span class="line">    T result;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 执行业务代码</span></span><br><span class="line">      result = action.doInTransaction(status);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (RuntimeException | Error ex) &#123;</span><br><span class="line">      <span class="comment">// Transactional code threw application exception -&gt; rollback</span></span><br><span class="line">      <span class="comment">// 回滚</span></span><br><span class="line">      rollbackOnException(status, ex);</span><br><span class="line">      <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      <span class="comment">// Transactional code threw unexpected exception -&gt; rollback</span></span><br><span class="line">      <span class="comment">// 回滚</span></span><br><span class="line">      rollbackOnException(status, ex);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(ex, <span class="string">"TransactionCallback threw undeclared checked exception"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 提交事务</span></span><br><span class="line">    <span class="keyword">this</span>.transactionManager.commit(status);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模板里的代码没什么看的，整体的逻辑都委托给了<code>PlatformTransactionManager</code></p><h3 id="PlatformTransactionManager"><a href="#PlatformTransactionManager" class="headerlink" title="PlatformTransactionManager"></a>PlatformTransactionManager</h3><blockquote><p> This is the central interface in Spring’s transaction infrastructure.<br> Applications can use this directly, but it is not primarily meant as API:<br> Typically, applications will work with either <strong>TransactionTemplate</strong> or<br> <strong>declarative transaction demarcation through AOP</strong>.</p></blockquote><img src="/2021/03/23/spring-tx/image-20210323104428182.png"><p><code>PlatformTransactionManager</code>定义了三个接口，<code>getTransaction</code>/<code>commit</code>/<code>rollback</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PlatformTransactionManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return a currently active transaction or create a new one, according to</span></span><br><span class="line"><span class="comment"> * the specified propagation behavior.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Note that parameters like isolation level or timeout will only be applied</span></span><br><span class="line"><span class="comment"> * to new transactions, and thus be ignored when participating in active ones.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Furthermore, not all transaction definition settings will be supported</span></span><br><span class="line"><span class="comment"> * by every transaction manager: A proper transaction manager implementation</span></span><br><span class="line"><span class="comment"> * should throw an exception when unsupported settings are encountered.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;An exception to the above rule is the read-only flag, which should be</span></span><br><span class="line"><span class="comment"> * ignored if no explicit read-only mode is supported. Essentially, the</span></span><br><span class="line"><span class="comment"> * read-only flag is just a hint for potential optimization.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> definition TransactionDefinition instance (can be &#123;<span class="doctag">@code</span> null&#125; for defaults),</span></span><br><span class="line"><span class="comment"> * describing propagation behavior, isolation level, timeout etc.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> transaction status object representing the new or current transaction</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> TransactionException in case of lookup, creation, or system errors</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalTransactionStateException if the given transaction definition</span></span><br><span class="line"><span class="comment"> * cannot be executed (for example, if a currently active transaction is in</span></span><br><span class="line"><span class="comment"> * conflict with the specified propagation behavior)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> TransactionDefinition#getPropagationBehavior</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> TransactionDefinition#getIsolationLevel</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> TransactionDefinition#getTimeout</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> TransactionDefinition#isReadOnly</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">TransactionStatus <span class="title">getTransaction</span><span class="params">(TransactionDefinition definition)</span> <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Commit the given transaction, with regard to its status. If the transaction</span></span><br><span class="line"><span class="comment"> * has been marked rollback-only programmatically, perform a rollback.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;If the transaction wasn't a new one, omit the commit for proper</span></span><br><span class="line"><span class="comment"> * participation in the surrounding transaction. If a previous transaction</span></span><br><span class="line"><span class="comment"> * has been suspended to be able to create a new one, resume the previous</span></span><br><span class="line"><span class="comment"> * transaction after committing the new one.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Note that when the commit call completes, no matter if normally or</span></span><br><span class="line"><span class="comment"> * throwing an exception, the transaction must be fully completed and</span></span><br><span class="line"><span class="comment"> * cleaned up. No rollback call should be expected in such a case.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;If this method throws an exception other than a TransactionException,</span></span><br><span class="line"><span class="comment"> * then some before-commit error caused the commit attempt to fail. For</span></span><br><span class="line"><span class="comment"> * example, an O/R Mapping tool might have tried to flush changes to the</span></span><br><span class="line"><span class="comment"> * database right before commit, with the resulting DataAccessException</span></span><br><span class="line"><span class="comment"> * causing the transaction to fail. The original exception will be</span></span><br><span class="line"><span class="comment"> * propagated to the caller of this commit method in such a case.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> status object returned by the &#123;<span class="doctag">@code</span> getTransaction&#125; method</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> UnexpectedRollbackException in case of an unexpected rollback</span></span><br><span class="line"><span class="comment"> * that the transaction coordinator initiated</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> HeuristicCompletionException in case of a transaction failure</span></span><br><span class="line"><span class="comment"> * caused by a heuristic decision on the side of the transaction coordinator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> TransactionSystemException in case of commit or system errors</span></span><br><span class="line"><span class="comment"> * (typically caused by fundamental resource failures)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalTransactionStateException if the given transaction</span></span><br><span class="line"><span class="comment"> * is already completed (that is, committed or rolled back)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> TransactionStatus#setRollbackOnly</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Perform a rollback of the given transaction.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;If the transaction wasn't a new one, just set it rollback-only for proper</span></span><br><span class="line"><span class="comment"> * participation in the surrounding transaction. If a previous transaction</span></span><br><span class="line"><span class="comment"> * has been suspended to be able to create a new one, resume the previous</span></span><br><span class="line"><span class="comment"> * transaction after rolling back the new one.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;b&gt;Do not call rollback on a transaction if commit threw an exception.&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * The transaction will already have been completed and cleaned up when commit</span></span><br><span class="line"><span class="comment"> * returns, even in case of a commit exception. Consequently, a rollback call</span></span><br><span class="line"><span class="comment"> * after commit failure will lead to an IllegalTransactionStateException.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> status object returned by the &#123;<span class="doctag">@code</span> getTransaction&#125; method</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> TransactionSystemException in case of rollback or system errors</span></span><br><span class="line"><span class="comment"> * (typically caused by fundamental resource failures)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalTransactionStateException if the given transaction</span></span><br><span class="line"><span class="comment"> * is already completed (that is, committed or rolled back)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AbstractPlatformTransactionManager"><a href="#AbstractPlatformTransactionManager" class="headerlink" title="AbstractPlatformTransactionManager"></a>AbstractPlatformTransactionManager</h4><p><code>AbstractPlatformTransactionManager</code>主要实现了两个功能：</p><ul><li>挂起和恢复事务（propagation behavior）</li><li>通知<code>TransactionSynchronization</code>事务的状态</li></ul><h4 id="获取事务过程"><a href="#获取事务过程" class="headerlink" title="获取事务过程"></a>获取事务过程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This implementation handles propagation behavior. Delegates to</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> doGetTransaction&#125;, &#123;<span class="doctag">@code</span> isExistingTransaction&#125;</span></span><br><span class="line"><span class="comment"> * and &#123;<span class="doctag">@code</span> doBegin&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #doGetTransaction</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #isExistingTransaction</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #doBegin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> TransactionStatus <span class="title">getTransaction</span><span class="params">(TransactionDefinition definition)</span> <span class="keyword">throws</span> TransactionException </span>&#123;</span><br><span class="line">  <span class="comment">// 留给子类实现</span></span><br><span class="line">  <span class="comment">// template method，</span></span><br><span class="line">  Object transaction = doGetTransaction();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Cache debug flag to avoid repeated checks.</span></span><br><span class="line">  <span class="keyword">boolean</span> debugEnabled = logger.isDebugEnabled();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (definition == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// Use defaults if no transaction definition given.</span></span><br><span class="line">    definition = <span class="keyword">new</span> DefaultTransactionDefinition();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当前是否存在事务</span></span><br><span class="line">  <span class="comment">// isExistingTransaction也是子类负责实现的</span></span><br><span class="line">  <span class="comment">// template method，</span></span><br><span class="line">  <span class="keyword">if</span> (isExistingTransaction(transaction)) &#123;</span><br><span class="line">    <span class="comment">// Existing transaction found -&gt; check propagation behavior to find out how to behave.</span></span><br><span class="line">    <span class="comment">// 处理事务的传播和挂起</span></span><br><span class="line">    <span class="comment">// 直接返回handleExistingTransaction的结果</span></span><br><span class="line">    <span class="keyword">return</span> handleExistingTransaction(definition, transaction, debugEnabled);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ------------------------------------- 新事务处理流程 -------------------------------------</span></span><br><span class="line">  <span class="comment">// Check definition settings for new transaction.</span></span><br><span class="line">  <span class="comment">// 事务超时</span></span><br><span class="line">  <span class="keyword">if</span> (definition.getTimeout() &lt; TransactionDefinition.TIMEOUT_DEFAULT) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> InvalidTimeoutException(<span class="string">"Invalid transaction timeout"</span>, definition.getTimeout());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// No existing transaction found -&gt; check propagation behavior to find out how to proceed.</span></span><br><span class="line">  <span class="keyword">if</span> (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_MANDATORY) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalTransactionStateException(</span><br><span class="line">      <span class="string">"No existing transaction found for transaction marked with propagation 'mandatory'"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRED ||</span><br><span class="line">           definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_REQUIRES_NEW ||</span><br><span class="line">           definition.getPropagationBehavior() == TransactionDefinition.PROPAGATION_NESTED) &#123;</span><br><span class="line">    <span class="comment">// just suspend active synchronizations, if any</span></span><br><span class="line">    <span class="comment">// 返回值保存了之前的状态</span></span><br><span class="line">    SuspendedResourcesHolder suspendedResources = suspend(<span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">if</span> (debugEnabled) &#123;</span><br><span class="line">      logger.debug(<span class="string">"Creating new transaction with name ["</span> + definition.getName() + <span class="string">"]: "</span> + definition);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">boolean</span> newSynchronization = (getTransactionSynchronization() != SYNCHRONIZATION_NEVER);</span><br><span class="line">      <span class="comment">// 构建TransactionStatus，后续的事务操作都是以此为依据</span></span><br><span class="line">      <span class="comment">// 这个类中包含各种必要的信息</span></span><br><span class="line">      DefaultTransactionStatus status = newTransactionStatus(</span><br><span class="line">        definition, transaction, <span class="keyword">true</span>, newSynchronization, debugEnabled, suspendedResources);</span><br><span class="line">      <span class="comment">// template method，子类负责实现</span></span><br><span class="line">      <span class="comment">// 这里就无需考虑propagation behavior，上面已经处理了</span></span><br><span class="line">      doBegin(transaction, definition);</span><br><span class="line">      <span class="comment">// 初始化ThreadLocal中的事务信息</span></span><br><span class="line">      prepareSynchronization(status, definition);</span><br><span class="line">      <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">      <span class="comment">// 发生异常，恢复之前挂起的事务</span></span><br><span class="line">      resume(<span class="keyword">null</span>, suspendedResources);</span><br><span class="line">      <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Error err) &#123;</span><br><span class="line">      <span class="comment">// 发生异常，恢复之前挂起的事务</span></span><br><span class="line">      resume(<span class="keyword">null</span>, suspendedResources);</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Create "empty" transaction: no actual transaction, but potentially synchronization.</span></span><br><span class="line">    <span class="keyword">if</span> (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT &amp;&amp; logger.isWarnEnabled()) &#123;</span><br><span class="line">      logger.warn(<span class="string">"Custom isolation level specified but no actual transaction initiated; "</span> +</span><br><span class="line">                  <span class="string">"isolation level will effectively be ignored: "</span> + definition);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">boolean</span> newSynchronization = (getTransactionSynchronization() == SYNCHRONIZATION_ALWAYS);</span><br><span class="line">    <span class="keyword">return</span> prepareTransactionStatus(definition, <span class="keyword">null</span>, <span class="keyword">true</span>, newSynchronization, debugEnabled, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Commit事务过程"><a href="#Commit事务过程" class="headerlink" title="Commit事务过程"></a>Commit事务过程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.transaction.support.AbstractPlatformTransactionManager#commit</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This implementation of commit handles participating in existing</span></span><br><span class="line"><span class="comment"> * transactions and programmatic rollback requests.</span></span><br><span class="line"><span class="comment"> * Delegates to &#123;<span class="doctag">@code</span> isRollbackOnly&#125;, &#123;<span class="doctag">@code</span> doCommit&#125;</span></span><br><span class="line"><span class="comment"> * and &#123;<span class="doctag">@code</span> rollback&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.transaction.TransactionStatus#isRollbackOnly()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #doCommit</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #rollback</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (status.isCompleted()) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalTransactionStateException(</span><br><span class="line">      <span class="string">"Transaction is already completed - do not call commit or rollback more than once per transaction"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  DefaultTransactionStatus defStatus = (DefaultTransactionStatus) status;</span><br><span class="line">  <span class="keyword">if</span> (defStatus.isLocalRollbackOnly()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (defStatus.isDebug()) &#123;</span><br><span class="line">      logger.debug(<span class="string">"Transactional code has requested rollback"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    processRollback(defStatus);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!shouldCommitOnGlobalRollbackOnly() &amp;&amp; defStatus.isGlobalRollbackOnly()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (defStatus.isDebug()) &#123;</span><br><span class="line">      logger.debug(<span class="string">"Global transaction is marked as rollback-only but transactional code requested commit"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    processRollback(defStatus);</span><br><span class="line">    <span class="comment">// Throw UnexpectedRollbackException only at outermost transaction boundary</span></span><br><span class="line">    <span class="comment">// or if explicitly asked to.</span></span><br><span class="line">    <span class="keyword">if</span> (status.isNewTransaction() || isFailEarlyOnGlobalRollbackOnly()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> UnexpectedRollbackException(</span><br><span class="line">        <span class="string">"Transaction rolled back because it has been marked as rollback-only"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  processCommit(defStatus);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.transaction.support.AbstractPlatformTransactionManager#processCommit</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Process an actual commit.</span></span><br><span class="line"><span class="comment"> * Rollback-only flags have already been checked and applied.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> status object representing the transaction</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> TransactionException in case of commit failure</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processCommit</span><span class="params">(DefaultTransactionStatus status)</span> <span class="keyword">throws</span> TransactionException </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">boolean</span> beforeCompletionInvoked = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      prepareForCommit(status);</span><br><span class="line">      <span class="comment">// 下面的几个方法会通知之前注册的TransactionSynchronization，告知事务的状态</span></span><br><span class="line">      triggerBeforeCommit(status);</span><br><span class="line">      triggerBeforeCompletion(status);</span><br><span class="line">      beforeCompletionInvoked = <span class="keyword">true</span>;</span><br><span class="line">      <span class="keyword">boolean</span> globalRollbackOnly = <span class="keyword">false</span>;</span><br><span class="line">      <span class="keyword">if</span> (status.isNewTransaction() || isFailEarlyOnGlobalRollbackOnly()) &#123;</span><br><span class="line">        globalRollbackOnly = status.isGlobalRollbackOnly();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (status.hasSavepoint()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">          logger.debug(<span class="string">"Releasing transaction savepoint"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        status.releaseHeldSavepoint();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (status.isNewTransaction()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">          logger.debug(<span class="string">"Initiating transaction commit"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// template method</span></span><br><span class="line">        <span class="comment">// 子类负责实现</span></span><br><span class="line">        doCommit(status);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Throw UnexpectedRollbackException if we have a global rollback-only</span></span><br><span class="line">      <span class="comment">// marker but still didn't get a corresponding exception from commit.</span></span><br><span class="line">      <span class="keyword">if</span> (globalRollbackOnly) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnexpectedRollbackException(</span><br><span class="line">          <span class="string">"Transaction silently rolled back because it has been marked as rollback-only"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (UnexpectedRollbackException ex) &#123;</span><br><span class="line">      <span class="comment">// can only be caused by doCommit</span></span><br><span class="line">      <span class="comment">// 通知回调函数</span></span><br><span class="line">      triggerAfterCompletion(status, TransactionSynchronization.STATUS_ROLLED_BACK);</span><br><span class="line">      <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (TransactionException ex) &#123;</span><br><span class="line">      <span class="comment">// can only be caused by doCommit</span></span><br><span class="line">      <span class="keyword">if</span> (isRollbackOnCommitFailure()) &#123;</span><br><span class="line">        doRollbackOnCommitException(status, ex);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 通知回调函数</span></span><br><span class="line">        triggerAfterCompletion(status, TransactionSynchronization.STATUS_UNKNOWN);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!beforeCompletionInvoked) &#123;</span><br><span class="line">        <span class="comment">// 通知回调函数</span></span><br><span class="line">        triggerBeforeCompletion(status);</span><br><span class="line">      &#125;</span><br><span class="line">      doRollbackOnCommitException(status, ex);</span><br><span class="line">      <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Error err) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!beforeCompletionInvoked) &#123;</span><br><span class="line">        triggerBeforeCompletion(status);</span><br><span class="line">      &#125;</span><br><span class="line">      doRollbackOnCommitException(status, err);</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Trigger afterCommit callbacks, with an exception thrown there</span></span><br><span class="line">    <span class="comment">// propagated to callers but the transaction still considered as committed.</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      triggerAfterCommit(status);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">      triggerAfterCompletion(status, TransactionSynchronization.STATUS_COMMITTED);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 清空TransactionSynchronizationManager中保存的状态</span></span><br><span class="line">    <span class="comment">// 触发事务回调对应的接口</span></span><br><span class="line">    <span class="comment">// 恢复挂起的事务</span></span><br><span class="line">    cleanupAfterCompletion(status);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Rollback过程"><a href="#Rollback过程" class="headerlink" title="Rollback过程"></a>Rollback过程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.transaction.support.AbstractPlatformTransactionManager#rollback</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This implementation of rollback handles participating in existing</span></span><br><span class="line"><span class="comment"> * transactions. Delegates to &#123;<span class="doctag">@code</span> doRollback&#125; and</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> doSetRollbackOnly&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #doRollback</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #doSetRollbackOnly</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">(TransactionStatus status)</span> <span class="keyword">throws</span> TransactionException </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (status.isCompleted()) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalTransactionStateException(</span><br><span class="line">      <span class="string">"Transaction is already completed - do not call commit or rollback more than once per transaction"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  DefaultTransactionStatus defStatus = (DefaultTransactionStatus) status;</span><br><span class="line">  processRollback(defStatus);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Process an actual rollback.</span></span><br><span class="line"><span class="comment"> * The completed flag has already been checked.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> status object representing the transaction</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> TransactionException in case of rollback failure</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processRollback</span><span class="params">(DefaultTransactionStatus status)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      triggerBeforeCompletion(status);</span><br><span class="line">      <span class="keyword">if</span> (status.hasSavepoint()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">          logger.debug(<span class="string">"Rolling back transaction to savepoint"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        status.rollbackToHeldSavepoint();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (status.isNewTransaction()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">          logger.debug(<span class="string">"Initiating transaction rollback"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// template method</span></span><br><span class="line">        <span class="comment">// 子类实现</span></span><br><span class="line">        doRollback(status);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (status.hasTransaction()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (status.isLocalRollbackOnly() || isGlobalRollbackOnParticipationFailure()) &#123;</span><br><span class="line">          <span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"Participating transaction failed - marking existing transaction as rollback-only"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          doSetRollbackOnly(status);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">            logger.debug(<span class="string">"Participating transaction failed - letting transaction originator decide on rollback"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        logger.debug(<span class="string">"Should roll back transaction but cannot - no transaction available"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">      <span class="comment">// 触发事务回调</span></span><br><span class="line">      triggerAfterCompletion(status, TransactionSynchronization.STATUS_UNKNOWN);</span><br><span class="line">      <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Error err) &#123;</span><br><span class="line">      <span class="comment">// 触发事务回调</span></span><br><span class="line">      triggerAfterCompletion(status, TransactionSynchronization.STATUS_UNKNOWN);</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 触发事务回调</span></span><br><span class="line">    triggerAfterCompletion(status, TransactionSynchronization.STATUS_ROLLED_BACK);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 清空TransactionSynchronizationManager中保存的状态</span></span><br><span class="line">    <span class="comment">// 触发事务回调对应的接口</span></span><br><span class="line">    <span class="comment">// 恢复挂起的事务</span></span><br><span class="line">    cleanupAfterCompletion(status);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DataSourceTransactionManager"><a href="#DataSourceTransactionManager" class="headerlink" title="DataSourceTransactionManager"></a>DataSourceTransactionManager</h4><p>这个类是<code>AbstractPlatformTransactionManager</code>的实现，使用<code>javax.sql.DataSource</code>获取连接的都可以是用这个类来管理事务。</p><p>几个关键template method的实现：</p><p>开始事务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org.springframework.jdbc.datasource.DataSourceTransactionManager#doGetTransaction</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">doGetTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  DataSourceTransactionObject txObject = <span class="keyword">new</span> DataSourceTransactionObject();</span><br><span class="line">  txObject.setSavepointAllowed(isNestedTransactionAllowed());</span><br><span class="line">  <span class="comment">// 从ThreadLocal中获取</span></span><br><span class="line">  ConnectionHolder conHolder =</span><br><span class="line">    (ConnectionHolder) TransactionSynchronizationManager.getResource(<span class="keyword">this</span>.dataSource);</span><br><span class="line">  txObject.setConnectionHolder(conHolder, <span class="keyword">false</span>);</span><br><span class="line">  <span class="keyword">return</span> txObject;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This implementation sets the isolation level but ignores the timeout.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doBegin</span><span class="params">(Object transaction, TransactionDefinition definition)</span> </span>&#123;</span><br><span class="line">  DataSourceTransactionObject txObject = (DataSourceTransactionObject) transaction;</span><br><span class="line">  Connection con = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 开启事务同步，但是没有ConnectionHolder，进行初始化</span></span><br><span class="line">    <span class="keyword">if</span> (txObject.getConnectionHolder() == <span class="keyword">null</span> ||</span><br><span class="line">        txObject.getConnectionHolder().isSynchronizedWithTransaction()) &#123;</span><br><span class="line">      <span class="comment">// 这里从数据源拿连接</span></span><br><span class="line">      Connection newCon = <span class="keyword">this</span>.dataSource.getConnection();</span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(<span class="string">"Acquired Connection ["</span> + newCon + <span class="string">"] for JDBC transaction"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      txObject.setConnectionHolder(<span class="keyword">new</span> ConnectionHolder(newCon), <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标记事务同步</span></span><br><span class="line">    txObject.getConnectionHolder().setSynchronizedWithTransaction(<span class="keyword">true</span>);</span><br><span class="line">    con = txObject.getConnectionHolder().getConnection();</span><br><span class="line"><span class="comment">// 暂存之前的隔离级别</span></span><br><span class="line">    Integer previousIsolationLevel = DataSourceUtils.prepareConnectionForTransaction(con, definition);</span><br><span class="line">    txObject.setPreviousIsolationLevel(previousIsolationLevel);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Switch to manual commit if necessary. This is very expensive in some JDBC drivers,</span></span><br><span class="line">    <span class="comment">// so we don't want to do it unnecessarily (for example if we've explicitly</span></span><br><span class="line">    <span class="comment">// configured the connection pool to set it already).</span></span><br><span class="line">    <span class="comment">// 连接置为手动commit</span></span><br><span class="line">    <span class="keyword">if</span> (con.getAutoCommit()) &#123;</span><br><span class="line">      txObject.setMustRestoreAutoCommit(<span class="keyword">true</span>);</span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(<span class="string">"Switching JDBC Connection ["</span> + con + <span class="string">"] to manual commit"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      con.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 标记事务开始</span></span><br><span class="line">    txObject.getConnectionHolder().setTransactionActive(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 事务超时时间</span></span><br><span class="line">    <span class="keyword">int</span> timeout = determineTimeout(definition);</span><br><span class="line">    <span class="keyword">if</span> (timeout != TransactionDefinition.TIMEOUT_DEFAULT) &#123;</span><br><span class="line">      txObject.getConnectionHolder().setTimeoutInSeconds(timeout);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Bind the session holder to the thread.</span></span><br><span class="line">    <span class="comment">// 新创建的连接，需要交给spring管理(ThreadLocal)</span></span><br><span class="line">    <span class="comment">// DataSource --&gt; ConnectionHolder</span></span><br><span class="line">    <span class="keyword">if</span> (txObject.isNewConnectionHolder()) &#123;</span><br><span class="line">      TransactionSynchronizationManager.bindResource(getDataSource(), txObject.getConnectionHolder());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">    <span class="comment">// 异常时释放连接</span></span><br><span class="line">    <span class="keyword">if</span> (txObject.isNewConnectionHolder()) &#123;</span><br><span class="line">      DataSourceUtils.releaseConnection(con, <span class="keyword">this</span>.dataSource);</span><br><span class="line">      txObject.setConnectionHolder(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> CannotCreateTransactionException(<span class="string">"Could not open JDBC Connection for transaction"</span>, ex);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提交事务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.jdbc.datasource.DataSourceTransactionManager#doCommit</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doCommit</span><span class="params">(DefaultTransactionStatus status)</span> </span>&#123;</span><br><span class="line">  DataSourceTransactionObject txObject = (DataSourceTransactionObject) status.getTransaction();</span><br><span class="line">  Connection con = txObject.getConnectionHolder().getConnection();</span><br><span class="line">  <span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">    logger.debug(<span class="string">"Committing JDBC transaction on Connection ["</span> + con + <span class="string">"]"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    con.commit();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> TransactionSystemException(<span class="string">"Could not commit JDBC transaction"</span>, ex);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回滚事务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doRollback</span><span class="params">(DefaultTransactionStatus status)</span> </span>&#123;</span><br><span class="line">  DataSourceTransactionObject txObject = (DataSourceTransactionObject) status.getTransaction();</span><br><span class="line">  Connection con = txObject.getConnectionHolder().getConnection();</span><br><span class="line">  <span class="keyword">if</span> (status.isDebug()) &#123;</span><br><span class="line">    logger.debug(<span class="string">"Rolling back JDBC transaction on Connection ["</span> + con + <span class="string">"]"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    con.rollback();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> TransactionSystemException(<span class="string">"Could not roll back JDBC transaction"</span>, ex);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>清理工作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.jdbc.datasource.DataSourceTransactionManager#doCleanupAfterCompletion</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doCleanupAfterCompletion</span><span class="params">(Object transaction)</span> </span>&#123;</span><br><span class="line">  DataSourceTransactionObject txObject = (DataSourceTransactionObject) transaction;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Remove the connection holder from the thread, if exposed.</span></span><br><span class="line">  <span class="comment">// 清理ThreadLocal里绑定的连接</span></span><br><span class="line">  <span class="keyword">if</span> (txObject.isNewConnectionHolder()) &#123;</span><br><span class="line">    TransactionSynchronizationManager.unbindResource(<span class="keyword">this</span>.dataSource);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Reset connection.</span></span><br><span class="line">  <span class="comment">// 把conn 恢复原样</span></span><br><span class="line">  Connection con = txObject.getConnectionHolder().getConnection();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (txObject.isMustRestoreAutoCommit()) &#123;</span><br><span class="line">      con.setAutoCommit(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    DataSourceUtils.resetConnectionAfterTransaction(con, txObject.getPreviousIsolationLevel());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">    logger.debug(<span class="string">"Could not reset JDBC Connection after transaction"</span>, ex);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (txObject.isNewConnectionHolder()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">      logger.debug(<span class="string">"Releasing JDBC Connection ["</span> + con + <span class="string">"] after transaction"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 减少Conn计数</span></span><br><span class="line">    DataSourceUtils.releaseConnection(con, <span class="keyword">this</span>.dataSource);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 清空holder</span></span><br><span class="line">  txObject.getConnectionHolder().clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TransactionalEventListener"><a href="#TransactionalEventListener" class="headerlink" title="TransactionalEventListener"></a>TransactionalEventListener</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 代故</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/22 2:45 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionalEventListenerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TransactionalEventListener</span>(phase = TransactionPhase.AFTER_COMMIT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"recieved after commit event &#123;&#125;"</span>, event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TransactionalEventListener</span>(phase = TransactionPhase.AFTER_ROLLBACK)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listenRollback</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"recieved after rollback event &#123;&#125;"</span>, event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 代故</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/22 2:58 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTransactionEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a new ApplicationEvent.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source the object on which the event initially occurred (never &#123;<span class="doctag">@code</span> null&#125;)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTransactionEvent</span><span class="params">(Object source)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span>(transactionManager = <span class="string">"proxyDataSourceTransactionManager"</span>, readOnly = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> MindEntity mindEntity = minderDao.selectOne(<span class="number">1</span>);</span><br><span class="line">  log.info(<span class="string">"mindEntity = &#123;&#125;"</span>, mindEntity);</span><br><span class="line">  <span class="keyword">final</span> List&lt;WordEntity&gt; wordEntities = wordDao.selectAll(<span class="keyword">new</span> RowBounds(<span class="number">0</span>, <span class="number">20</span>));</span><br><span class="line">  log.info(<span class="string">"wordEntities = &#123;&#125;"</span>, wordEntities);</span><br><span class="line">  transactionService.query0();</span><br><span class="line">  applicationContext.publishEvent(<span class="keyword">new</span> MyTransactionEvent(transactionService));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以监听事务的不同阶段的信息</p><h3 id="TransactionSynchronizationManager"><a href="#TransactionSynchronizationManager" class="headerlink" title="TransactionSynchronizationManager"></a>TransactionSynchronizationManager</h3><p>是主要的ThreadLocal管理类，用来做事务的同步。Mybatis的SqlSession，Jdbc的Connection都会通过这个类来和ThreadLocal交互。</p><p>主要属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionSynchronizationManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(TransactionSynchronizationManager<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 资源管理</span></span><br><span class="line">  <span class="comment">// datasource -&gt; connection</span></span><br><span class="line">  <span class="comment">// sqlsessionFactory -&gt; sqlSession</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Map&lt;Object, Object&gt;&gt; resources =</span><br><span class="line"><span class="keyword">new</span> NamedThreadLocal&lt;Map&lt;Object, Object&gt;&gt;(<span class="string">"Transactional resources"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 事务回调，当前事务状态发生变化时会收到通知，可以做一些清理的工作</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Set&lt;TransactionSynchronization&gt;&gt; synchronizations =</span><br><span class="line"><span class="keyword">new</span> NamedThreadLocal&lt;Set&lt;TransactionSynchronization&gt;&gt;(<span class="string">"Transaction synchronizations"</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 当前事务的名称</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;String&gt; currentTransactionName =</span><br><span class="line"><span class="keyword">new</span> NamedThreadLocal&lt;String&gt;(<span class="string">"Current transaction name"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// read-only 状态</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Boolean&gt; currentTransactionReadOnly =</span><br><span class="line"><span class="keyword">new</span> NamedThreadLocal&lt;Boolean&gt;(<span class="string">"Current transaction read-only status"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 隔离级别</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Integer&gt; currentTransactionIsolationLevel =</span><br><span class="line"><span class="keyword">new</span> NamedThreadLocal&lt;Integer&gt;(<span class="string">"Current transaction isolation level"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 事务是否active</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Boolean&gt; actualTransactionActive =</span><br><span class="line"><span class="keyword">new</span> NamedThreadLocal&lt;Boolean&gt;(<span class="string">"Actual transaction active"</span>);</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>资源的管理的主要接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.transaction.support.TransactionSynchronizationManager#bindResource</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Bind the given resource for the given key to the current thread.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the key to bind the value to (usually the resource factory)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value the value to bind (usually the active resource object)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalStateException if there is already a value bound to the thread</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> ResourceTransactionManager#getResourceFactory()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bindResource</span><span class="params">(Object key, Object value)</span> <span class="keyword">throws</span> IllegalStateException </span>&#123;</span><br><span class="line">  Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key);</span><br><span class="line">  Assert.notNull(value, <span class="string">"Value must not be null"</span>);</span><br><span class="line">  Map&lt;Object, Object&gt; map = resources.get();</span><br><span class="line">  <span class="comment">// set ThreadLocal Map if none found</span></span><br><span class="line">  <span class="keyword">if</span> (map == <span class="keyword">null</span>) &#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;Object, Object&gt;();</span><br><span class="line">    resources.set(map);</span><br><span class="line">  &#125;</span><br><span class="line">  Object oldValue = map.put(actualKey, value);</span><br><span class="line">  <span class="comment">// Transparently suppress a ResourceHolder that was marked as void...</span></span><br><span class="line">  <span class="keyword">if</span> (oldValue <span class="keyword">instanceof</span> ResourceHolder &amp;&amp; ((ResourceHolder) oldValue).isVoid()) &#123;</span><br><span class="line">    oldValue = <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 事务挂起的时候要清理绑定的资源，不然开启新事务时，同一个dataSource会抛异常</span></span><br><span class="line">  <span class="keyword">if</span> (oldValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Already value ["</span> + oldValue + <span class="string">"] for key ["</span> +</span><br><span class="line">                                    actualKey + <span class="string">"] bound to thread ["</span> + Thread.currentThread().getName() + <span class="string">"]"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">    logger.trace(<span class="string">"Bound value ["</span> + value + <span class="string">"] for key ["</span> + actualKey + <span class="string">"] to thread ["</span> +</span><br><span class="line">                 Thread.currentThread().getName() + <span class="string">"]"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Unbind a resource for the given key from the current thread.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the key to unbind (usually the resource factory)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the previously bound value (usually the active resource object)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalStateException if there is no value bound to the thread</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> ResourceTransactionManager#getResourceFactory()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">unbindResource</span><span class="params">(Object key)</span> <span class="keyword">throws</span> IllegalStateException </span>&#123;</span><br><span class="line">  Object actualKey = TransactionSynchronizationUtils.unwrapResourceIfNecessary(key);</span><br><span class="line">  Object value = doUnbindResource(actualKey);</span><br><span class="line">  <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">      <span class="string">"No value for key ["</span> + actualKey + <span class="string">"] bound to thread ["</span> + Thread.currentThread().getName() + <span class="string">"]"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ResourceHolderSupport"><a href="#ResourceHolderSupport" class="headerlink" title="ResourceHolderSupport"></a>ResourceHolderSupport</h3><img src="/2021/03/23/spring-tx/ResourceHolderSupport.png"><p>这个提供了引用计数的功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Increase the reference count by one because the holder has been requested</span></span><br><span class="line"><span class="comment"> * (i.e. someone requested the resource held by it).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requested</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.referenceCount++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Decrease the reference count by one because the holder has been released</span></span><br><span class="line"><span class="comment"> * (i.e. someone released the resource held by it).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">released</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.referenceCount--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return whether there are still open references to this holder.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isOpen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="keyword">this</span>.referenceCount &gt; <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring在处理这些带状态的类<code>SqlSession</code>、<code>Connection</code>都做了<code>ThreadLocal</code>的绑定。</p><p>在事务的场景下，需要复用同一个连接，spring存到ThreadLocal里的就是<code>ResourceHolderSupport</code>的子类，每次请求计数就加一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.jdbc.datasource.DataSourceUtils#doGetConnection</span></span><br><span class="line"><span class="keyword">if</span> (TransactionSynchronizationManager.isSynchronizationActive()) &#123;</span><br><span class="line">  logger.debug(<span class="string">"Registering transaction synchronization for JDBC Connection"</span>);</span><br><span class="line">  <span class="comment">// Use same Connection for further JDBC actions within the transaction.</span></span><br><span class="line">  <span class="comment">// Thread-bound object will get removed by synchronization at transaction completion.</span></span><br><span class="line">  ConnectionHolder holderToUse = conHolder;</span><br><span class="line">  <span class="keyword">if</span> (holderToUse == <span class="keyword">null</span>) &#123;</span><br><span class="line">    holderToUse = <span class="keyword">new</span> ConnectionHolder(con);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    holderToUse.setConnection(con);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 计数加一</span></span><br><span class="line">  holderToUse.requested();</span><br><span class="line">  TransactionSynchronizationManager.registerSynchronization(</span><br><span class="line">    <span class="keyword">new</span> ConnectionSynchronization(holderToUse, dataSource));</span><br><span class="line">  holderToUse.setSynchronizedWithTransaction(<span class="keyword">true</span>);</span><br><span class="line">  <span class="keyword">if</span> (holderToUse != conHolder) &#123;</span><br><span class="line">    TransactionSynchronizationManager.bindResource(dataSource, holderToUse);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当计数减到0的时候，可以认为这个连接已经没有人用，可以回收。有点类似java中的垃圾回收算法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h2&gt;&lt;h3 id=&quot;JDBC事务&quot;&gt;&lt;a href=&quot;#JDBC事务&quot; class=&quot;headerlink&quot; title=&quot;JDBC事务&quot;&gt;&lt;/a&gt;J
      
    
    </summary>
    
      <category term="spring" scheme="http://qsli.github.io/categories/spring/"/>
    
    
      <category term="transaction" scheme="http://qsli.github.io/tags/transaction/"/>
    
  </entry>
  
  <entry>
    <title>mybatis源码解析（三）—— Spring集成</title>
    <link href="http://qsli.github.io/2021/03/23/mybatis-detail-03/"/>
    <id>http://qsli.github.io/2021/03/23/mybatis-detail-03/</id>
    <published>2021-03-23T00:08:22.000Z</published>
    <updated>2021-11-13T17:53:22.282Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>依赖包地址：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--    扫描mapper--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mindSqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"mindDataSource"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath*:mapper/minder/*Mapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"plugins"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"sqlInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    生成Dao代理类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"mindSqlSessionFactory"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.air.persistence.minder.dao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>接口类也要交给spring管理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MinderDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">MindEntity <span class="title">selectOne</span><span class="params">(@Param(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过上面的配置，<code>MinderDao</code>就交给spring容器管理了，使用的时候直接注入就行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MinderDao minderDao;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> MindEntity <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> MindEntity mindEntity = minderDao.selectOne(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> mindEntity;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="SqlSessionFactoryBean"><a href="#SqlSessionFactoryBean" class="headerlink" title="SqlSessionFactoryBean"></a>SqlSessionFactoryBean</h3><blockquote><p>FactoryBean that creates an MyBatis SqlSessionFactory.<br>This is the usual way to set up a shared MyBatis {@code SqlSessionFactory} in a Spring &gt; &gt;application context;<br>the SqlSessionFactory can then be passed to MyBatis-based DAOs via dependency injection.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.sqlSessionFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">    afterPropertiesSet();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.sqlSessionFactory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  notNull(dataSource, <span class="string">"Property 'dataSource' is required"</span>);</span><br><span class="line">  notNull(sqlSessionFactoryBuilder, <span class="string">"Property 'sqlSessionFactoryBuilder' is required"</span>);</span><br><span class="line">  state((configuration == <span class="keyword">null</span> &amp;&amp; configLocation == <span class="keyword">null</span>) || !(configuration != <span class="keyword">null</span> &amp;&amp; configLocation != <span class="keyword">null</span>),</span><br><span class="line">        <span class="string">"Property 'configuration' and 'configLocation' can not specified with together"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.sqlSessionFactory = buildSqlSessionFactory();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置Configuration并且生成SQLSessionFactory</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> SqlSessionFactory <span class="title">buildSqlSessionFactory</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">  Configuration configuration;</span><br><span class="line"></span><br><span class="line">  XMLConfigBuilder xmlConfigBuilder = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.configuration != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 指定了Configuration</span></span><br><span class="line">    configuration = <span class="keyword">this</span>.configuration;</span><br><span class="line">    <span class="keyword">if</span> (configuration.getVariables() == <span class="keyword">null</span>) &#123;</span><br><span class="line">      configuration.setVariables(<span class="keyword">this</span>.configurationProperties);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.configurationProperties != <span class="keyword">null</span>) &#123;</span><br><span class="line">      configuration.getVariables().putAll(<span class="keyword">this</span>.configurationProperties);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.configLocation != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 指定单个xml文件的位置</span></span><br><span class="line">    xmlConfigBuilder = <span class="keyword">new</span> XMLConfigBuilder(<span class="keyword">this</span>.configLocation.getInputStream(), <span class="keyword">null</span>, <span class="keyword">this</span>.configurationProperties);</span><br><span class="line">    configuration = xmlConfigBuilder.getConfiguration();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">      LOGGER.debug(<span class="string">"Property `configuration` or 'configLocation' not specified, using default MyBatis Configuration"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line">    configuration.setVariables(<span class="keyword">this</span>.configurationProperties);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.objectFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">    configuration.setObjectFactory(<span class="keyword">this</span>.objectFactory);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.objectWrapperFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">    configuration.setObjectWrapperFactory(<span class="keyword">this</span>.objectWrapperFactory);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.vfs != <span class="keyword">null</span>) &#123;</span><br><span class="line">    configuration.setVfsImpl(<span class="keyword">this</span>.vfs);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (hasLength(<span class="keyword">this</span>.typeAliasesPackage)) &#123;</span><br><span class="line">    String[] typeAliasPackageArray = tokenizeToStringArray(<span class="keyword">this</span>.typeAliasesPackage,</span><br><span class="line">                                                           ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);</span><br><span class="line">    <span class="keyword">for</span> (String packageToScan : typeAliasPackageArray) &#123;</span><br><span class="line">      configuration.getTypeAliasRegistry().registerAliases(packageToScan,</span><br><span class="line">                                                           typeAliasesSuperType == null ? Object.class : typeAliasesSuperType);</span><br><span class="line">      <span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">        LOGGER.debug(<span class="string">"Scanned package: '"</span> + packageToScan + <span class="string">"' for aliases"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!isEmpty(<span class="keyword">this</span>.typeAliases)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (Class&lt;?&gt; typeAlias : <span class="keyword">this</span>.typeAliases) &#123;</span><br><span class="line">      configuration.getTypeAliasRegistry().registerAlias(typeAlias);</span><br><span class="line">      <span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">        LOGGER.debug(<span class="string">"Registered type alias: '"</span> + typeAlias + <span class="string">"'"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 加载Mybatis的插件</span></span><br><span class="line">  <span class="keyword">if</span> (!isEmpty(<span class="keyword">this</span>.plugins)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (Interceptor plugin : <span class="keyword">this</span>.plugins) &#123;</span><br><span class="line">      configuration.addInterceptor(plugin);</span><br><span class="line">      <span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">        LOGGER.debug(<span class="string">"Registered plugin: '"</span> + plugin + <span class="string">"'"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// TypeHandler</span></span><br><span class="line">  <span class="keyword">if</span> (hasLength(<span class="keyword">this</span>.typeHandlersPackage)) &#123;</span><br><span class="line">    String[] typeHandlersPackageArray = tokenizeToStringArray(<span class="keyword">this</span>.typeHandlersPackage,</span><br><span class="line">                                                              ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS);</span><br><span class="line">    <span class="keyword">for</span> (String packageToScan : typeHandlersPackageArray) &#123;</span><br><span class="line">      configuration.getTypeHandlerRegistry().register(packageToScan);</span><br><span class="line">      <span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">        LOGGER.debug(<span class="string">"Scanned package: '"</span> + packageToScan + <span class="string">"' for type handlers"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!isEmpty(<span class="keyword">this</span>.typeHandlers)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (TypeHandler&lt;?&gt; typeHandler : <span class="keyword">this</span>.typeHandlers) &#123;</span><br><span class="line">      configuration.getTypeHandlerRegistry().register(typeHandler);</span><br><span class="line">      <span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">        LOGGER.debug(<span class="string">"Registered type handler: '"</span> + typeHandler + <span class="string">"'"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.databaseIdProvider != <span class="keyword">null</span>) &#123;<span class="comment">//fix #64 set databaseId before parse mapper xmls</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      configuration.setDatabaseId(<span class="keyword">this</span>.databaseIdProvider.getDatabaseId(<span class="keyword">this</span>.dataSource));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> NestedIOException(<span class="string">"Failed getting a databaseId"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.cache != <span class="keyword">null</span>) &#123;</span><br><span class="line">    configuration.addCache(<span class="keyword">this</span>.cache);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (xmlConfigBuilder != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      xmlConfigBuilder.parse();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">        LOGGER.debug(<span class="string">"Parsed configuration file: '"</span> + <span class="keyword">this</span>.configLocation + <span class="string">"'"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> NestedIOException(<span class="string">"Failed to parse config resource: "</span> + <span class="keyword">this</span>.configLocation, ex);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      ErrorContext.instance().reset();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Transaction</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.transactionFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 注意默认用的是SpringManagedTransactionFactory</span></span><br><span class="line">    <span class="keyword">this</span>.transactionFactory = <span class="keyword">new</span> SpringManagedTransactionFactory();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  configuration.setEnvironment(<span class="keyword">new</span> Environment(<span class="keyword">this</span>.environment, <span class="keyword">this</span>.transactionFactory, <span class="keyword">this</span>.dataSource));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// mapper的位置</span></span><br><span class="line">  <span class="keyword">if</span> (!isEmpty(<span class="keyword">this</span>.mapperLocations)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (Resource mapperLocation : <span class="keyword">this</span>.mapperLocations) &#123;</span><br><span class="line">      <span class="keyword">if</span> (mapperLocation == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        XMLMapperBuilder xmlMapperBuilder = <span class="keyword">new</span> XMLMapperBuilder(mapperLocation.getInputStream(),</span><br><span class="line">                                                                 configuration, mapperLocation.toString(), configuration.getSqlFragments());</span><br><span class="line">        xmlMapperBuilder.parse();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NestedIOException(<span class="string">"Failed to parse mapping resource: '"</span> + mapperLocation + <span class="string">"'"</span>, e);</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        ErrorContext.instance().reset();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">        LOGGER.debug(<span class="string">"Parsed mapper file: '"</span> + mapperLocation + <span class="string">"'"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">      LOGGER.debug(<span class="string">"Property 'mapperLocations' was not specified or no matching resources found"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 生成SqlSessionFactory</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.sqlSessionFactoryBuilder.build(configuration);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MapperScannerConfigurer"><a href="#MapperScannerConfigurer" class="headerlink" title="MapperScannerConfigurer"></a>MapperScannerConfigurer</h3><blockquote><p> BeanDefinitionRegistryPostProcessor that searches recursively starting from a base package for<br>  interfaces and <strong>registers them as  MapperFactoryBean </strong>. Note that only interfaces with at<br>  least one method will be registered; concrete classes will be ignored.</p></blockquote><p>这个类的作用是，扫描配置的接口，生成代理的Dao对象，这里扫描完之后，注册的是<code>MapperFactoryBean</code>。对象生成过程如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.mybatis.spring.mapper.MapperFactoryBean#getObject</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperFactoryBean</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> T <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 通过sqlSession的getMapper方法生成代理类对象MapperProxy，Dao对象就跟这个sqlSession关联了</span></span><br><span class="line">    <span class="keyword">return</span> getSqlSession().getMapper(<span class="keyword">this</span>.mapperInterface);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSqlSessionFactory</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.externalSqlSession) &#123;</span><br><span class="line">      <span class="comment">// 这里用的是SqlSessionTemplate，他也实现了SqlSession相关的接口</span></span><br><span class="line">      <span class="keyword">this</span>.sqlSession = <span class="keyword">new</span> SqlSessionTemplate(sqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单看下扫描过程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperScannerConfigurer</span> <span class="keyword">implements</span> <span class="title">BeanDefinitionRegistryPostProcessor</span>, <span class="title">InitializingBean</span>, <span class="title">ApplicationContextAware</span>, <span class="title">BeanNameAware</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.processPropertyPlaceHolders) &#123;</span><br><span class="line">      processPropertyPlaceHolders();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ClassPathMapperScanner scanner = <span class="keyword">new</span> ClassPathMapperScanner(registry);</span><br><span class="line">    scanner.setAddToConfig(<span class="keyword">this</span>.addToConfig);</span><br><span class="line">    scanner.setAnnotationClass(<span class="keyword">this</span>.annotationClass);</span><br><span class="line">    scanner.setMarkerInterface(<span class="keyword">this</span>.markerInterface);</span><br><span class="line">    scanner.setSqlSessionFactory(<span class="keyword">this</span>.sqlSessionFactory);</span><br><span class="line">    scanner.setSqlSessionTemplate(<span class="keyword">this</span>.sqlSessionTemplate);</span><br><span class="line">    scanner.setSqlSessionFactoryBeanName(<span class="keyword">this</span>.sqlSessionFactoryBeanName);</span><br><span class="line">    scanner.setSqlSessionTemplateBeanName(<span class="keyword">this</span>.sqlSessionTemplateBeanName);</span><br><span class="line">    scanner.setResourceLoader(<span class="keyword">this</span>.applicationContext);</span><br><span class="line">    scanner.setBeanNameGenerator(<span class="keyword">this</span>.nameGenerator);</span><br><span class="line">    scanner.registerFilters();</span><br><span class="line">    <span class="comment">// 开始从指定的位置扫描类</span></span><br><span class="line">    scanner.scan(StringUtils.tokenizeToStringArray(<span class="keyword">this</span>.basePackage, ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.mybatis.spring.mapper.ClassPathMapperScanner#processBeanDefinitions</span></span><br><span class="line"><span class="comment">// 注册bean过程：</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processBeanDefinitions</span><span class="params">(Set&lt;BeanDefinitionHolder&gt; beanDefinitions)</span> </span>&#123;</span><br><span class="line">  GenericBeanDefinition definition;</span><br><span class="line">  <span class="keyword">for</span> (BeanDefinitionHolder holder : beanDefinitions) &#123;</span><br><span class="line">    definition = (GenericBeanDefinition) holder.getBeanDefinition();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">      logger.debug(<span class="string">"Creating MapperFactoryBean with name '"</span> + holder.getBeanName() </span><br><span class="line">                   + <span class="string">"' and '"</span> + definition.getBeanClassName() + <span class="string">"' mapperInterface"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the mapper interface is the original class of the bean</span></span><br><span class="line">    <span class="comment">// but, the actual class of the bean is MapperFactoryBean</span></span><br><span class="line">    <span class="comment">// 注册的是MapperFactoryBean， 构造参数第一个字段是接口类型</span></span><br><span class="line">    definition.getConstructorArgumentValues().addGenericArgumentValue(definition.getBeanClassName()); <span class="comment">// issue #59</span></span><br><span class="line">    definition.setBeanClass(<span class="keyword">this</span>.mapperFactoryBean.getClass());</span><br><span class="line"></span><br><span class="line">    definition.getPropertyValues().add(<span class="string">"addToConfig"</span>, <span class="keyword">this</span>.addToConfig);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加sqlSessionFactory属性</span></span><br><span class="line">    <span class="keyword">boolean</span> explicitFactoryUsed = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasText(<span class="keyword">this</span>.sqlSessionFactoryBeanName)) &#123;</span><br><span class="line">      definition.getPropertyValues().add(<span class="string">"sqlSessionFactory"</span>, <span class="keyword">new</span> RuntimeBeanReference(<span class="keyword">this</span>.sqlSessionFactoryBeanName));</span><br><span class="line">      explicitFactoryUsed = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.sqlSessionFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">      definition.getPropertyValues().add(<span class="string">"sqlSessionFactory"</span>, <span class="keyword">this</span>.sqlSessionFactory);</span><br><span class="line">      explicitFactoryUsed = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加sqlSessionTemplate属性</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasText(<span class="keyword">this</span>.sqlSessionTemplateBeanName)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (explicitFactoryUsed) &#123;</span><br><span class="line">        logger.warn(<span class="string">"Cannot use both: sqlSessionTemplate and sqlSessionFactory together. sqlSessionFactory is ignored."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      definition.getPropertyValues().add(<span class="string">"sqlSessionTemplate"</span>, <span class="keyword">new</span> RuntimeBeanReference(<span class="keyword">this</span>.sqlSessionTemplateBeanName));</span><br><span class="line">      explicitFactoryUsed = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.sqlSessionTemplate != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (explicitFactoryUsed) &#123;</span><br><span class="line">        logger.warn(<span class="string">"Cannot use both: sqlSessionTemplate and sqlSessionFactory together. sqlSessionFactory is ignored."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      definition.getPropertyValues().add(<span class="string">"sqlSessionTemplate"</span>, <span class="keyword">this</span>.sqlSessionTemplate);</span><br><span class="line">      explicitFactoryUsed = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!explicitFactoryUsed) &#123;</span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(<span class="string">"Enabling autowire by type for MapperFactoryBean with name '"</span> + holder.getBeanName() + <span class="string">"'."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SqlSessionTemplate"><a href="#SqlSessionTemplate" class="headerlink" title="SqlSessionTemplate"></a>SqlSessionTemplate</h3><p>从上面的代码分析可以看出来，拿到的代理类，底层的SqlSession实际上是<code>SqlSessionTemplate</code>，<code>SqlSessionTemplate</code>内部采用了JDK的代理，将实际的请求代理给了<code>SqlSessionInterceptor</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.mybatis.spring.SqlSessionTemplate</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlSessionTemplate</span> <span class="keyword">implements</span> <span class="title">SqlSession</span>, <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ExecutorType executorType;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> SqlSession sqlSessionProxy;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> PersistenceExceptionTranslator exceptionTranslator;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Constructs a Spring managed &#123;<span class="doctag">@code</span> SqlSession&#125; with the given</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@code</span> SqlSessionFactory&#125; and &#123;<span class="doctag">@code</span> ExecutorType&#125;.</span></span><br><span class="line"><span class="comment">   * A custom &#123;<span class="doctag">@code</span> SQLExceptionTranslator&#125; can be provided as an</span></span><br><span class="line"><span class="comment">   * argument so any &#123;<span class="doctag">@code</span> PersistenceException&#125; thrown by MyBatis</span></span><br><span class="line"><span class="comment">   * can be custom translated to a &#123;<span class="doctag">@code</span> RuntimeException&#125;</span></span><br><span class="line"><span class="comment">   * The &#123;<span class="doctag">@code</span> SQLExceptionTranslator&#125; can also be null and thus no</span></span><br><span class="line"><span class="comment">   * exception translation will be done and MyBatis exceptions will be</span></span><br><span class="line"><span class="comment">   * thrown</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> sqlSessionFactory</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> executorType</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> exceptionTranslator</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SqlSessionTemplate</span><span class="params">(SqlSessionFactory sqlSessionFactory, ExecutorType executorType,</span></span></span><br><span class="line"><span class="function"><span class="params">      PersistenceExceptionTranslator exceptionTranslator)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    notNull(sqlSessionFactory, <span class="string">"Property 'sqlSessionFactory' is required"</span>);</span><br><span class="line">    notNull(executorType, <span class="string">"Property 'executorType' is required"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.sqlSessionFactory = sqlSessionFactory;</span><br><span class="line">    <span class="keyword">this</span>.executorType = executorType;</span><br><span class="line">    <span class="keyword">this</span>.exceptionTranslator = exceptionTranslator;</span><br><span class="line">    <span class="comment">// 这里生成了JDK的代理类，实际调用请求被转发给了SqlSessionInterceptor</span></span><br><span class="line">    <span class="keyword">this</span>.sqlSessionProxy = (SqlSession) newProxyInstance(</span><br><span class="line">        SqlSessionFactory<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>(),</span></span><br><span class="line">        new Class[] &#123; SqlSession.class &#125;,</span><br><span class="line">        <span class="keyword">new</span> SqlSessionInterceptor());</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">selectOne</span><span class="params">(String statement)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 接口的相关方法都转发给代理类</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.sqlSessionProxy.&lt;T&gt; selectOne(statement);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.mybatis.spring.SqlSessionTemplate.SqlSessionInterceptor</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Proxy needed to route MyBatis method calls to the proper SqlSession got</span></span><br><span class="line"><span class="comment">   * from Spring's Transaction Manager</span></span><br><span class="line"><span class="comment">   * It also unwraps exceptions thrown by &#123;<span class="doctag">@code</span> Method#invoke(Object, Object...)&#125; to</span></span><br><span class="line"><span class="comment">   * pass a &#123;<span class="doctag">@code</span> PersistenceException&#125; to the &#123;<span class="doctag">@code</span> PersistenceExceptionTranslator&#125;.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlSessionInterceptor</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="comment">// 这一步是关键，获取sqlSession</span></span><br><span class="line">    SqlSession sqlSession = getSqlSession(</span><br><span class="line">      SqlSessionTemplate.<span class="keyword">this</span>.sqlSessionFactory,</span><br><span class="line">      SqlSessionTemplate.<span class="keyword">this</span>.executorType,</span><br><span class="line">      SqlSessionTemplate.<span class="keyword">this</span>.exceptionTranslator);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 反射调用delegate对应的方法</span></span><br><span class="line">      Object result = method.invoke(sqlSession, args);</span><br><span class="line">      <span class="keyword">if</span> (!isSqlSessionTransactional(sqlSession, SqlSessionTemplate.<span class="keyword">this</span>.sqlSessionFactory)) &#123;</span><br><span class="line">        <span class="comment">// force commit even on non-dirty sessions because some databases require</span></span><br><span class="line">        <span class="comment">// a commit/rollback before calling close()</span></span><br><span class="line">        <span class="comment">// 非spring管理的，强制commit</span></span><br><span class="line">        sqlSession.commit(<span class="keyword">true</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">      Throwable unwrapped = unwrapThrowable(t);</span><br><span class="line">      <span class="keyword">if</span> (SqlSessionTemplate.<span class="keyword">this</span>.exceptionTranslator != <span class="keyword">null</span> &amp;&amp; unwrapped <span class="keyword">instanceof</span> PersistenceException) &#123;</span><br><span class="line">        <span class="comment">// release the connection to avoid a deadlock if the translator is no loaded. See issue #22</span></span><br><span class="line">    <span class="comment">// 异常时要确保sqlSession被关闭</span></span><br><span class="line">        closeSqlSession(sqlSession, SqlSessionTemplate.<span class="keyword">this</span>.sqlSessionFactory);</span><br><span class="line">        sqlSession = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 翻译成spring定义的标准异常</span></span><br><span class="line">        Throwable translated = SqlSessionTemplate.<span class="keyword">this</span>.exceptionTranslator.translateExceptionIfPossible((PersistenceException) unwrapped);</span><br><span class="line">        <span class="keyword">if</span> (translated != <span class="keyword">null</span>) &#123;</span><br><span class="line">          unwrapped = translated;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">throw</span> unwrapped;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (sqlSession != <span class="keyword">null</span>) &#123;</span><br><span class="line">        closeSqlSession(sqlSession, SqlSessionTemplate.<span class="keyword">this</span>.sqlSessionFactory);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SqlSessionUtils"><a href="#SqlSessionUtils" class="headerlink" title="SqlSessionUtils"></a>SqlSessionUtils</h4><p><code>SqlSessionUtils</code>是mybatis提供的工具类，处理了SqlSession的<code>ThreadLocal</code>绑定和事务结束后的释放：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.mybatis.spring.SqlSessionUtils#getSqlSession(org.apache.ibatis.session.SqlSessionFactory, org.apache.ibatis.session.ExecutorType, org.springframework.dao.support.PersistenceExceptionTranslator)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">(SqlSessionFactory sessionFactory, ExecutorType executorType, PersistenceExceptionTranslator exceptionTranslator)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  notNull(sessionFactory, NO_SQL_SESSION_FACTORY_SPECIFIED);</span><br><span class="line">  notNull(executorType, NO_EXECUTOR_TYPE_SPECIFIED);</span><br><span class="line"></span><br><span class="line">  SqlSessionHolder holder = (SqlSessionHolder) TransactionSynchronizationManager.getResource(sessionFactory);</span><br><span class="line"></span><br><span class="line">  SqlSession session = sessionHolder(executorType, holder);</span><br><span class="line">  <span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> session;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">    LOGGER.debug(<span class="string">"Creating a new SqlSession"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ThreadLocal中为空，就open一个新的session</span></span><br><span class="line">  session = sessionFactory.openSession(executorType);</span><br><span class="line"><span class="comment">// 将新open的session，交给spring来管理</span></span><br><span class="line">  <span class="comment">// 会通过TransactionSynchronizationManager，绑定到当前线程的ThreadLocal</span></span><br><span class="line">  registerSessionHolder(sessionFactory, executorType, exceptionTranslator, session);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> session;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.mybatis.spring.SqlSessionUtils#closeSqlSession</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Checks if &#123;<span class="doctag">@code</span> SqlSession&#125; passed as an argument is managed by Spring &#123;<span class="doctag">@code</span> TransactionSynchronizationManager&#125;</span></span><br><span class="line"><span class="comment">   * If it is not, it closes it, otherwise it just updates the reference counter and</span></span><br><span class="line"><span class="comment">   * lets Spring call the close callback when the managed transaction ends</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> sessionFactory</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeSqlSession</span><span class="params">(SqlSession session, SqlSessionFactory sessionFactory)</span> </span>&#123;</span><br><span class="line">  notNull(session, NO_SQL_SESSION_SPECIFIED);</span><br><span class="line">  notNull(sessionFactory, NO_SQL_SESSION_FACTORY_SPECIFIED);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ThreadLocal中取</span></span><br><span class="line">  SqlSessionHolder holder = (SqlSessionHolder) TransactionSynchronizationManager.getResource(sessionFactory);</span><br><span class="line">  <span class="keyword">if</span> ((holder != <span class="keyword">null</span>) &amp;&amp; (holder.getSqlSession() == session)) &#123;</span><br><span class="line">    <span class="comment">// spring管理的</span></span><br><span class="line">    <span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">      LOGGER.debug(<span class="string">"Releasing transactional SqlSession ["</span> + session + <span class="string">"]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 只用减少引用计数(referenceCount--)就行了，其他的交给spring来做，</span></span><br><span class="line">    <span class="comment">// 在getSqlSession的时候注册了SqlSessionSynchronization，在事务完成的时候，会负责做关闭的工作</span></span><br><span class="line">    holder.released();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 非spring管理的</span></span><br><span class="line">    <span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">      LOGGER.debug(<span class="string">"Closing non transactional SqlSession ["</span> + session + <span class="string">"]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 需要手动关闭</span></span><br><span class="line">    session.close();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="http://www.plantuml.com/plantuml/svg/hL8nJWCn4EpzYfMe8rrjwIXFK22A2m-mdDLXOTR6jYA53wI811rlu0UKl0QHP-0xK7BcR195kFFCUZqpkqp8O1n8hP02OrQueAIoWWAq3xf5xvMXETvRBGAM-4iAw2JQsAbKKi9lWj8-9UTEa8-o8jkkIDuwG-fHzDShGQB3uX_Du6N5XbFN0Dkdju_dbtt1zdtz-Rg1kcRisp3CpZCsENZKACCrHSUza6K4it5CiRJZA1WEYfRcBdaqejDtGoeSEWpZ13DIVkBx1VJD3gR8WR63HJ3BwTe35qOl-e5C19HZy4SuWhEgQfggoZgR39o3iKYxfXC-RsAiuxJy77RAHsV_ayK2o_FzYpjYdPA5plRQhVGN"><h4 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h4><p><code>SqlSession</code>不是线程安全的，多线程环境下必然有竞争问题。众所周知，spring是通过给每个Thread做绑定来解决竞争问题的。<br><code>SqlSessionTemplate</code>中的sqlSession实际上是个代理对象，他是<strong>没有状态</strong>的，每次执行的时候，再通过工具类类创建或者复用<strong><code>ThreadLocal</code></strong>中的session，从而避免了多线程的问题。</p><img src="/2021/03/23/mybatis-detail-03/spring-tx-Page-7.png"><h4 id="SqlSessionSynchronization"><a href="#SqlSessionSynchronization" class="headerlink" title="SqlSessionSynchronization"></a>SqlSessionSynchronization</h4><p>事务状态变化的时候，这个回调会得到通知，在通知里做了一些清理的工作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Callback for cleaning up resources. It cleans TransactionSynchronizationManager and</span></span><br><span class="line"><span class="comment">   * also commits and closes the &#123;<span class="doctag">@code</span> SqlSession&#125;.</span></span><br><span class="line"><span class="comment">   * It assumes that &#123;<span class="doctag">@code</span> Connection&#125; life cycle will be managed by</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@code</span> DataSourceTransactionManager&#125; or &#123;<span class="doctag">@code</span> JtaTransactionManager&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlSessionSynchronization</span> <span class="keyword">extends</span> <span class="title">TransactionSynchronizationAdapter</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">suspend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.holderActive) &#123;</span><br><span class="line">        <span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">          LOGGER.debug(<span class="string">"Transaction synchronization suspending SqlSession ["</span> + <span class="keyword">this</span>.holder.getSqlSession() + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 清空ThreadLocal，为新事务做准备</span></span><br><span class="line">        TransactionSynchronizationManager.unbindResource(<span class="keyword">this</span>.sessionFactory);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.holderActive) &#123;</span><br><span class="line">        <span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">          LOGGER.debug(<span class="string">"Transaction synchronization resuming SqlSession ["</span> + <span class="keyword">this</span>.holder.getSqlSession() + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        TransactionSynchronizationManager.bindResource(<span class="keyword">this</span>.sessionFactory, <span class="keyword">this</span>.holder);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeCommit</span><span class="params">(<span class="keyword">boolean</span> readOnly)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// Connection commit or rollback will be handled by ConnectionSynchronization or</span></span><br><span class="line">      <span class="comment">// DataSourceTransactionManager.</span></span><br><span class="line">      <span class="comment">// But, do cleanup the SqlSession / Executor, including flushing BATCH statements so</span></span><br><span class="line">      <span class="comment">// they are actually executed.</span></span><br><span class="line">      <span class="comment">// SpringManagedTransaction will no-op the commit over the jdbc connection</span></span><br><span class="line">      <span class="comment">// TODO This updates 2nd level caches but the tx may be rolledback later on! </span></span><br><span class="line">      <span class="keyword">if</span> (TransactionSynchronizationManager.isActualTransactionActive()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">            LOGGER.debug(<span class="string">"Transaction synchronization committing SqlSession ["</span> + <span class="keyword">this</span>.holder.getSqlSession() + <span class="string">"]"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">this</span>.holder.getSqlSession().commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PersistenceException p) &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">this</span>.holder.getPersistenceExceptionTranslator() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            DataAccessException translated = <span class="keyword">this</span>.holder</span><br><span class="line">              .getPersistenceExceptionTranslator()</span><br><span class="line">              .translateExceptionIfPossible(p);</span><br><span class="line">            <span class="keyword">if</span> (translated != <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="keyword">throw</span> translated;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">throw</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeCompletion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// Issue #18 Close SqlSession and deregister it now</span></span><br><span class="line">      <span class="comment">// because afterCompletion may be called from a different thread</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.holder.isOpen()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">          LOGGER.debug(<span class="string">"Transaction synchronization deregistering SqlSession ["</span> + <span class="keyword">this</span>.holder.getSqlSession() + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        TransactionSynchronizationManager.unbindResource(sessionFactory);</span><br><span class="line">        <span class="keyword">this</span>.holderActive = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">          LOGGER.debug(<span class="string">"Transaction synchronization closing SqlSession ["</span> + <span class="keyword">this</span>.holder.getSqlSession() + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.holder.getSqlSession().close();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(<span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.holderActive) &#123;</span><br><span class="line">        <span class="comment">// afterCompletion may have been called from a different thread</span></span><br><span class="line">        <span class="comment">// so avoid failing if there is nothing in this one</span></span><br><span class="line">        <span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">          LOGGER.debug(<span class="string">"Transaction synchronization deregistering SqlSession ["</span> + <span class="keyword">this</span>.holder.getSqlSession() + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        TransactionSynchronizationManager.unbindResourceIfPossible(sessionFactory);</span><br><span class="line">        <span class="keyword">this</span>.holderActive = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">          LOGGER.debug(<span class="string">"Transaction synchronization closing SqlSession ["</span> + <span class="keyword">this</span>.holder.getSqlSession() + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.holder.getSqlSession().close();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.holder.reset();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringManagedTransaction"><a href="#SpringManagedTransaction" class="headerlink" title="SpringManagedTransaction"></a>SpringManagedTransaction</h3><blockquote><p>SpringManagedTransaction handles the lifecycle of a JDBC connection.<br><strong>It retrieves a connection from Spring’s transaction manager and returns it back to it<br>when it is no longer needed.</strong><br>If Spring’s transaction handling is active it will no-op all commit/rollback/close calls<br>assuming that the Spring transaction manager will do the job.<br>If it is not it will behave like JdbcTransaction.</p></blockquote><p>这个Transaction也是mybatis为了适配spring的体系定制的，获取连接和释放连接都委托给了spring提供的工具类<code>DataSourceUtil</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringManagedTransaction</span> <span class="keyword">implements</span> <span class="title">Transaction</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.connection == <span class="keyword">null</span>) &#123;</span><br><span class="line">      openConnection();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.connection;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Gets a connection from Spring transaction manager and discovers if this</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@code</span> Transaction&#125; should manage connection or let it to Spring.</span></span><br><span class="line"><span class="comment">   * &lt;p&gt;</span></span><br><span class="line"><span class="comment">   * It also reads autocommit setting because when using Spring Transaction MyBatis</span></span><br><span class="line"><span class="comment">   * thinks that autocommit is always false and will always call commit/rollback</span></span><br><span class="line"><span class="comment">   * so we need to no-op that calls.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">openConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">// 委托给了spring的工具类来获取连接</span></span><br><span class="line">    <span class="keyword">this</span>.connection = DataSourceUtils.getConnection(<span class="keyword">this</span>.dataSource);</span><br><span class="line">    <span class="keyword">this</span>.autoCommit = <span class="keyword">this</span>.connection.getAutoCommit();</span><br><span class="line">    <span class="keyword">this</span>.isConnectionTransactional = DataSourceUtils.isConnectionTransactional(<span class="keyword">this</span>.connection, <span class="keyword">this</span>.dataSource);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">      LOGGER.debug(</span><br><span class="line">          <span class="string">"JDBC Connection ["</span></span><br><span class="line">              + <span class="keyword">this</span>.connection</span><br><span class="line">              + <span class="string">"] will"</span></span><br><span class="line">              + (<span class="keyword">this</span>.isConnectionTransactional ? <span class="string">" "</span> : <span class="string">" not "</span>)</span><br><span class="line">              + <span class="string">"be managed by Spring"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">// 委托给了spring的工具类类关闭连接</span></span><br><span class="line">    DataSourceUtils.releaseConnection(<span class="keyword">this</span>.connection, <span class="keyword">this</span>.dataSource);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了连接的获取和释放，这个类的commit和rollback也做了特殊处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  <span class="comment">// 事务连接，这里直接跳过了commit，最终的commit由spring框架处理</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.connection != <span class="keyword">null</span> &amp;&amp; !<span class="keyword">this</span>.isConnectionTransactional &amp;&amp; !<span class="keyword">this</span>.autoCommit) &#123;</span><br><span class="line">    <span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">      LOGGER.debug(<span class="string">"Committing JDBC Connection ["</span> + <span class="keyword">this</span>.connection + <span class="string">"]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.connection.commit();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">   <span class="comment">// 事务连接，这里直接跳过了rollback，最终的rollback由spring框架处理</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.connection != <span class="keyword">null</span> &amp;&amp; !<span class="keyword">this</span>.isConnectionTransactional &amp;&amp; !<span class="keyword">this</span>.autoCommit) &#123;</span><br><span class="line">    <span class="keyword">if</span> (LOGGER.isDebugEnabled()) &#123;</span><br><span class="line">      LOGGER.debug(<span class="string">"Rolling back JDBC Connection ["</span> + <span class="keyword">this</span>.connection + <span class="string">"]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.connection.rollback();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DataSourceUtil"><a href="#DataSourceUtil" class="headerlink" title="DataSourceUtil"></a>DataSourceUtil</h4><p><code>DataSourceUtils</code>是spring提供的工具类，主要是加了一层ThreadLocal缓存的管理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.jdbc.datasource.DataSourceUtils#getConnection</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">(DataSource dataSource)</span> <span class="keyword">throws</span> CannotGetJdbcConnectionException </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> doGetConnection(dataSource);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> CannotGetJdbcConnectionException(<span class="string">"Could not get JDBC Connection"</span>, ex);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Actually obtain a JDBC Connection from the given DataSource.</span></span><br><span class="line"><span class="comment"> * Same as &#123;<span class="doctag">@link</span> #getConnection&#125;, but throwing the original SQLException.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Is aware of a corresponding Connection bound to the current thread, for example</span></span><br><span class="line"><span class="comment"> * when using &#123;<span class="doctag">@link</span> DataSourceTransactionManager&#125;. Will bind a Connection to the thread</span></span><br><span class="line"><span class="comment"> * if transaction synchronization is active (e.g. if in a JTA transaction).</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Directly accessed by &#123;<span class="doctag">@link</span> TransactionAwareDataSourceProxy&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dataSource the DataSource to obtain Connections from</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a JDBC Connection from the given DataSource</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> SQLException if thrown by JDBC methods</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #doReleaseConnection</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">doGetConnection</span><span class="params">(DataSource dataSource)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">Assert.notNull(dataSource, <span class="string">"No DataSource specified"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从ThreadLocal中去获取ConnectionHolder</span></span><br><span class="line">ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource);</span><br><span class="line"><span class="keyword">if</span> (conHolder != <span class="keyword">null</span> &amp;&amp; (conHolder.hasConnection() || conHolder.isSynchronizedWithTransaction())) &#123;</span><br><span class="line"><span class="comment">// 引用计数+1</span></span><br><span class="line">      conHolder.requested();</span><br><span class="line"><span class="keyword">if</span> (!conHolder.hasConnection()) &#123;</span><br><span class="line">logger.debug(<span class="string">"Fetching resumed JDBC Connection from DataSource"</span>);</span><br><span class="line">conHolder.setConnection(dataSource.getConnection());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> conHolder.getConnection();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Else we either got no holder or an empty thread-bound holder here.</span></span><br><span class="line"><span class="comment">// 获取连接</span></span><br><span class="line">logger.debug(<span class="string">"Fetching JDBC Connection from DataSource"</span>);</span><br><span class="line">Connection con = dataSource.getConnection();</span><br><span class="line"><span class="comment">// 事务的场景下，才会复用连接</span></span><br><span class="line"><span class="keyword">if</span> (TransactionSynchronizationManager.isSynchronizationActive()) &#123;</span><br><span class="line">      <span class="comment">// 第一次进来的时候ThreadLocal里是没有ConnectionHolder的，这里需要获取连接，然后注册给spring管理</span></span><br><span class="line">logger.debug(<span class="string">"Registering transaction synchronization for JDBC Connection"</span>);</span><br><span class="line"><span class="comment">// Use same Connection for further JDBC actions within the transaction.</span></span><br><span class="line"><span class="comment">// Thread-bound object will get removed by synchronization at transaction completion.</span></span><br><span class="line">ConnectionHolder holderToUse = conHolder;</span><br><span class="line"><span class="keyword">if</span> (holderToUse == <span class="keyword">null</span>) &#123;</span><br><span class="line">holderToUse = <span class="keyword">new</span> ConnectionHolder(con);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">holderToUse.setConnection(con);</span><br><span class="line">&#125;</span><br><span class="line">      <span class="comment">// 引用计数+1</span></span><br><span class="line">      <span class="comment">// referenceCount++</span></span><br><span class="line">holderToUse.requested();</span><br><span class="line">      <span class="comment">// 注册回调处理函数，事务状态发生变化时，会处理connHolder</span></span><br><span class="line">TransactionSynchronizationManager.registerSynchronization(</span><br><span class="line"><span class="keyword">new</span> ConnectionSynchronization(holderToUse, dataSource));</span><br><span class="line">holderToUse.setSynchronizedWithTransaction(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">if</span> (holderToUse != conHolder) &#123;</span><br><span class="line">        <span class="comment">// 绑定到ThreadLocal</span></span><br><span class="line">TransactionSynchronizationManager.bindResource(dataSource, holderToUse);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> con;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.jdbc.datasource.DataSourceUtils#releaseConnection</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Close the given Connection, obtained from the given DataSource,</span></span><br><span class="line"><span class="comment"> * if it is not managed externally (that is, not bound to the thread).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> con the Connection to close if necessary</span></span><br><span class="line"><span class="comment"> * (if this is &#123;<span class="doctag">@code</span> null&#125;, the call will be ignored)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dataSource the DataSource that the Connection was obtained from</span></span><br><span class="line"><span class="comment"> * (may be &#123;<span class="doctag">@code</span> null&#125;)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #getConnection</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">releaseConnection</span><span class="params">(Connection con, DataSource dataSource)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    doReleaseConnection(con, dataSource);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">    logger.debug(<span class="string">"Could not close JDBC Connection"</span>, ex);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">    logger.debug(<span class="string">"Unexpected exception on closing JDBC Connection"</span>, ex);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doReleaseConnection</span><span class="params">(Connection con, DataSource dataSource)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (con == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (dataSource != <span class="keyword">null</span>) &#123;</span><br><span class="line">    ConnectionHolder conHolder = (ConnectionHolder) TransactionSynchronizationManager.getResource(dataSource);</span><br><span class="line">    <span class="keyword">if</span> (conHolder != <span class="keyword">null</span> &amp;&amp; connectionEquals(conHolder, con)) &#123;</span><br><span class="line">      <span class="comment">// It's the transactional Connection: Don't close it.</span></span><br><span class="line">      <span class="comment">// 事务连接，这里只是减少计数，实际的释放在事务完成之后，在ConnectionSynchronization中处理的</span></span><br><span class="line">      <span class="comment">// referenceCount--</span></span><br><span class="line">      conHolder.released();</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  logger.debug(<span class="string">"Returning JDBC Connection to DataSource"</span>);</span><br><span class="line">  <span class="comment">// 非事务连接，直接关闭</span></span><br><span class="line">  doCloseConnection(con, dataSource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ConnectionSynchronization"><a href="#ConnectionSynchronization" class="headerlink" title="ConnectionSynchronization"></a>ConnectionSynchronization</h4><p>最终实现了<code>TransactionSynchronization</code>接口，<code>AbstractPlatformTransactionManager</code>接口会在当前事务状态发生变化（比如挂起，完成等）通知<code>TransactionSynchronization</code>。对于事务连接的关闭就是在<code>ConnectionSynchronization</code>接口中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.jdbc.datasource.DataSourceUtils.ConnectionSynchronization</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Callback for resource cleanup at the end of a non-native JDBC transaction</span></span><br><span class="line"><span class="comment"> * (e.g. when participating in a JtaTransactionManager transaction).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.transaction.jta.JtaTransactionManager</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionSynchronization</span> <span class="keyword">extends</span> <span class="title">TransactionSynchronizationAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ConnectionHolder connectionHolder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> holderActive = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConnectionSynchronization</span><span class="params">(ConnectionHolder connectionHolder, DataSource dataSource)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.connectionHolder = connectionHolder;</span><br><span class="line"><span class="keyword">this</span>.dataSource = dataSource;</span><br><span class="line"><span class="keyword">this</span>.order = getConnectionSynchronizationOrder(dataSource);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.order;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">suspend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 比如事务的传播行为是REQUEST_NEW，每次都会创建一个新连接，</span></span><br><span class="line">      <span class="comment">// 会挂起当前的事务，当事务挂起的时候，就会回调到这里</span></span><br><span class="line">      <span class="comment">// conn在ThreadLocal中的缓存形式是  dataSource -&gt; conn</span></span><br><span class="line">      <span class="comment">// 所以这里要先把之前的conn给unbind掉，新的连接才能正常的工作</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.holderActive) &#123;</span><br><span class="line">        <span class="comment">// dataSource -&gt; conn 清除上一个事务对应的连接</span></span><br><span class="line">TransactionSynchronizationManager.unbindResource(<span class="keyword">this</span>.dataSource);</span><br><span class="line">        <span class="comment">// isOpen就是看引用技术是否大于0，如果大于0标识还有人在用，这里不会关闭</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.connectionHolder.hasConnection() &amp;&amp; !<span class="keyword">this</span>.connectionHolder.isOpen()) &#123;</span><br><span class="line"><span class="comment">// Release Connection on suspend if the application doesn't keep</span></span><br><span class="line"><span class="comment">// a handle to it anymore. We will fetch a fresh Connection if the</span></span><br><span class="line"><span class="comment">// application accesses the ConnectionHolder again after resume,</span></span><br><span class="line"><span class="comment">// assuming that it will participate in the same transaction.</span></span><br><span class="line">releaseConnection(<span class="keyword">this</span>.connectionHolder.getConnection(), <span class="keyword">this</span>.dataSource);</span><br><span class="line"><span class="keyword">this</span>.connectionHolder.setConnection(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resume</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.holderActive) &#123;</span><br><span class="line">        <span class="comment">// 恢复当前事务时，要把当前事务的connHolder恢复</span></span><br><span class="line">TransactionSynchronizationManager.bindResource(<span class="keyword">this</span>.dataSource, <span class="keyword">this</span>.connectionHolder);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeCompletion</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// Release Connection early if the holder is not open anymore</span></span><br><span class="line"><span class="comment">// (that is, not used by another resource like a Hibernate Session</span></span><br><span class="line"><span class="comment">// that has its own cleanup via transaction synchronization),</span></span><br><span class="line"><span class="comment">// to avoid issues with strict JTA implementations that expect</span></span><br><span class="line"><span class="comment">// the close call before transaction completion.</span></span><br><span class="line">      <span class="comment">// 事务完成之前</span></span><br><span class="line">      <span class="comment">// 这个阶段如果conn已经没有引用了，就直接关闭</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.connectionHolder.isOpen()) &#123;</span><br><span class="line">TransactionSynchronizationManager.unbindResource(<span class="keyword">this</span>.dataSource);</span><br><span class="line"><span class="keyword">this</span>.holderActive = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.connectionHolder.hasConnection()) &#123;</span><br><span class="line">releaseConnection(<span class="keyword">this</span>.connectionHolder.getConnection(), <span class="keyword">this</span>.dataSource);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(<span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line"><span class="comment">// If we haven't closed the Connection in beforeCompletion,</span></span><br><span class="line"><span class="comment">// close it now. The holder might have been used for other</span></span><br><span class="line"><span class="comment">// cleanup in the meantime, for example by a Hibernate Session.</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.holderActive) &#123;</span><br><span class="line"><span class="comment">// The thread-bound ConnectionHolder might not be available anymore,</span></span><br><span class="line"><span class="comment">// since afterCompletion might get called from a different thread.</span></span><br><span class="line">TransactionSynchronizationManager.unbindResourceIfPossible(<span class="keyword">this</span>.dataSource);</span><br><span class="line">        <span class="comment">// 置为非活跃</span></span><br><span class="line"><span class="keyword">this</span>.holderActive = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.connectionHolder.hasConnection()) &#123;</span><br><span class="line">releaseConnection(<span class="keyword">this</span>.connectionHolder.getConnection(), <span class="keyword">this</span>.dataSource);</span><br><span class="line"><span class="comment">// Reset the ConnectionHolder: It might remain bound to the thread.</span></span><br><span class="line"><span class="keyword">this</span>.connectionHolder.setConnection(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="comment">// 清空当前holder的状态</span></span><br><span class="line"><span class="keyword">this</span>.connectionHolder.reset();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h2&gt;&lt;p&gt;依赖包地址：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
      
    
    </summary>
    
      <category term="mybatis" scheme="http://qsli.github.io/categories/mybatis/"/>
    
    
      <category term="mybatis" scheme="http://qsli.github.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>mybatis源码解析（二）—— 代理类生成分析</title>
    <link href="http://qsli.github.io/2021/03/19/mybatis-detail-02/"/>
    <id>http://qsli.github.io/2021/03/19/mybatis-detail-02/</id>
    <published>2021-03-19T09:09:51.000Z</published>
    <updated>2021-11-13T17:53:22.282Z</updated>
    
    <content type="html"><![CDATA[<p>mybatis虽然支持直接使用SqlSession来操作db，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> List&lt;Object&gt; selectAll = sqlSession.selectList(<span class="string">"selectAll"</span>, <span class="keyword">null</span>, <span class="keyword">new</span> RowBounds(<span class="number">10</span>, <span class="number">20</span>));</span><br></pre></td></tr></table></figure><p>但是这种方式缺乏<strong>类型安全</strong>，参数传递的过程容易出错。</p><h2 id="使用代理类"><a href="#使用代理类" class="headerlink" title="使用代理类"></a>使用代理类</h2><p>mybatis还支持生成代理类的方式来使用：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.air.mybatis.sqlsession.WordsDao"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">fetchSize</span>=<span class="string">"3"</span> <span class="attr">resultSetType</span>=<span class="string">"SCROLL_INSENSITIVE"</span> <span class="attr">resultType</span>=<span class="string">"com.air.mybatis.sqlsession.WordEntity"</span>&gt;</span></span><br><span class="line">       select * from words</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意，namespace必须是<code>WordsDao</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.air.mybatis.sqlsession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.RowBounds;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 代故</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/19 2:36 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WordsDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;WordEntity&gt; <span class="title">selectAll</span><span class="params">(RowBounds rowBounds)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// com.air.mybatis.sqlsession.SqlSessionTest#testProxy</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> (Reader reader = Resources.getResourceAsReader(<span class="string">"mybatis-config.xml"</span>)) &#123;</span><br><span class="line">    <span class="comment">//创建SqlSessionFactory</span></span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">    <span class="comment">//获取SqlSession</span></span><br><span class="line">    <span class="keyword">try</span> (SqlSession sqlSession = sqlSessionFactory.openSession()) &#123;</span><br><span class="line">      <span class="keyword">final</span> WordsDao mapper = sqlSession.getMapper(WordsDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">      <span class="keyword">final</span> List&lt;WordEntity&gt; wordEntities = mapper.selectAll(<span class="keyword">new</span> RowBounds(<span class="number">1</span>, <span class="number">10</span>));</span><br><span class="line">      System.out.println(<span class="string">"words = "</span> + wordEntities);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="代理类生成过程"><a href="#代理类生成过程" class="headerlink" title="代理类生成过程"></a>代理类生成过程</h3><img src="http://www.plantuml.com/plantuml/svg/ut8eBaaiAYdDpU42WiJaalmYXUISpDIy4Ywk0g14Pd9cGM9UYK9mOKvmQd5nPduUghXpVbvQPdffKM89XfHlOa51Qb5GQdfcSKbH9JQvWAByYaetiAMuvL4be48WO6kheF1az-Bd4zgURzpzVChyPnqJNknlVxwYMy7MbeiBuWa5NJiafriffAUMG8pM2CylIYbsISpNIyv9B2xMvE92A0DfGl4NNdqeAa5QKVsDMw-EGZ7SIg0vgDeG1Y47afL2NcgvPnumolAIKpNWcf2Le6a4wy2b3g42p48sc8iBBAIWYyCTCAzWDnfBAA1hG7WKCxGHQj425oqs4UgG8m-e21Bvo0eSKlDIG8aS0000"><p>先从<code>sqlSession.getMapper(WordsDao.class);</code>入手，看看大概：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.ibatis.session.defaults.DefaultSqlSession#getMapper</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getMapper</span><span class="params">(Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> configuration.getMapper(type, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.apache.ibatis.session.Configuration#getMapper</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getMapper</span><span class="params">(Class&lt;T&gt; type, SqlSession sqlSession)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> mapperRegistry.getMapper(type, sqlSession);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.apache.ibatis.binding.MapperRegistry#getMapper</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Class&lt;?&gt;, MapperProxyFactory&lt;?&gt;&gt; knownMappers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getMapper</span><span class="params">(Class&lt;T&gt; type, SqlSession sqlSession)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 拿到类型对应的工厂类</span></span><br><span class="line">  <span class="keyword">final</span> MapperProxyFactory&lt;T&gt; mapperProxyFactory = (MapperProxyFactory&lt;T&gt;) knownMappers.get(type);</span><br><span class="line">  <span class="keyword">if</span> (mapperProxyFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">"Type "</span> + type + <span class="string">" is not known to the MapperRegistry."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 生成代理类</span></span><br><span class="line">    <span class="keyword">return</span> mapperProxyFactory.newInstance(sqlSession);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">"Error getting mapper instance. Cause: "</span> + e, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.apache.ibatis.binding.MapperProxyFactory</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lasse Voss</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperProxyFactory</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;T&gt; mapperInterface;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Method, MapperMethodInvoker&gt; methodCache = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MapperProxyFactory</span><span class="params">(Class&lt;T&gt; mapperInterface)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.mapperInterface = mapperInterface;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Class&lt;T&gt; <span class="title">getMapperInterface</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mapperInterface;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Map&lt;Method, MapperMethodInvoker&gt; <span class="title">getMethodCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> methodCache;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建JDK代理对象，实际的调用委托给mapperProxy</span></span><br><span class="line">  <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">protected</span> T <span class="title">newInstance</span><span class="params">(MapperProxy&lt;T&gt; mapperProxy)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(), <span class="keyword">new</span> Class[] &#123; mapperInterface &#125;, mapperProxy);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里是入口</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> T <span class="title">newInstance</span><span class="params">(SqlSession sqlSession)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> MapperProxy&lt;T&gt; mapperProxy = <span class="keyword">new</span> MapperProxy&lt;&gt;(sqlSession, mapperInterface, methodCache);</span><br><span class="line">    <span class="comment">// 创建JDK代理对象，实际的调用委托给mapperProxy</span></span><br><span class="line">    <span class="keyword">return</span> newInstance(mapperProxy);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端最终拿到的是一个<code>MapperProxy</code>的代理对象（<code>com.sun.proxy.$Proxy6</code>），下面看看调用过程的逻辑：</p><img src="http://www.plantuml.com/plantuml/svg/ZL8nJiD04Ept5QjKYL3o02CZHQ594HGH9EgJlGaMzfsvkuGWfQ22WWRUGCCV8i5da19-mTqPiCys0XVsUNV6dfbTO94M4gCq8Qu1SYPr4YKvunhFXOpLCHD-TSBodEHKYlLDMsD2-aB4OxuIboH_1_YTsLKw8wKImS5TOOZuldtUFTvzt6xthq_xj_lTomE68K0X5Fj7F_82L9HIf8Tfskq1V9SjfA8rmCHfif1AkKHvmfjehrrd1SZf6i14cQoOffhJwfjb6hSZaMMCDtXb1w0yrpcIb4XNv3uRpxGXPcvsFcCa-3nPB2NJ9jO05wHhX6xcT8sv9Zbd4GqCv8HbnZCUO6VGCVVCQRR5mnu2U9_4VarMGqzCVnfhv5W5-hcr3-gVuw4rHKlT6AS5JfbacRLuMiHgPXy9RfvwA1VgJ9IA71AWGMYnaHVGbib_xRbTC6N-WHjSvh6DQ8EnMMDtAFRP2z3Rg4y0"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.ibatis.binding.MapperProxy#invoke</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (Object<span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">method</span>.<span class="title">getDeclaringClass</span>())) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> method.invoke(<span class="keyword">this</span>, args);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 调用对应Invoker的invoke方法</span></span><br><span class="line">      <span class="comment">// public abstract java.util.List com.air.mybatis.sqlsession.WordsDao.selectAll(org.apache.ibatis.session.RowBounds)</span></span><br><span class="line">      <span class="keyword">return</span> cachedInvoker(method).invoke(proxy, method, args, sqlSession);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">    <span class="keyword">throw</span> ExceptionUtil.unwrapThrowable(t);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> MapperMethodInvoker <span class="title">cachedInvoker</span><span class="params">(Method method)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 首次调用会生成一个MethodInvoker</span></span><br><span class="line">    <span class="keyword">return</span> methodCache.computeIfAbsent(method, m -&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (m.isDefault()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (privateLookupInMethod == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DefaultMethodInvoker(getMethodHandleJava8(method));</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DefaultMethodInvoker(getMethodHandleJava9(method));</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException | InstantiationException | InvocationTargetException</span><br><span class="line">                 | NoSuchMethodException e) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 逻辑都在MapperMethod中</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PlainMethodInvoker(<span class="keyword">new</span> MapperMethod(mapperInterface, method, sqlSession.getConfiguration()));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (RuntimeException re) &#123;</span><br><span class="line">    Throwable cause = re.getCause();</span><br><span class="line">    <span class="keyword">throw</span> cause == <span class="keyword">null</span> ? re : cause;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// org.apache.ibatis.binding.MapperMethod#execute</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">execute</span><span class="params">(SqlSession sqlSession, Object[] args)</span> </span>&#123;</span><br><span class="line">    Object result;</span><br><span class="line">    <span class="keyword">switch</span> (command.getType()) &#123;</span><br><span class="line">      <span class="keyword">case</span> INSERT: &#123;</span><br><span class="line">        <span class="comment">// 转换成sqlSession需要的采纳数</span></span><br><span class="line">        Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">        <span class="comment">// 调用底层sqlSession的insert方法，并包装返回结果</span></span><br><span class="line">        result = rowCountResult(sqlSession.insert(command.getName(), param));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> UPDATE: &#123;</span><br><span class="line">        Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">        result = rowCountResult(sqlSession.update(command.getName(), param));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> DELETE: &#123;</span><br><span class="line">        Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">        result = rowCountResult(sqlSession.delete(command.getName(), param));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> SELECT:</span><br><span class="line">        <span class="keyword">if</span> (method.returnsVoid() &amp;&amp; method.hasResultHandler()) &#123;</span><br><span class="line">          executeWithResultHandler(sqlSession, args);</span><br><span class="line">          result = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.returnsMany()) &#123;</span><br><span class="line">          result = executeForMany(sqlSession, args);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.returnsMap()) &#123;</span><br><span class="line">          result = executeForMap(sqlSession, args);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.returnsCursor()) &#123;</span><br><span class="line">          result = executeForCursor(sqlSession, args);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">          result = sqlSession.selectOne(command.getName(), param);</span><br><span class="line">          <span class="keyword">if</span> (method.returnsOptional()</span><br><span class="line">              &amp;&amp; (result == <span class="keyword">null</span> || !method.getReturnType().equals(result.getClass()))) &#123;</span><br><span class="line">            result = Optional.ofNullable(result);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> FLUSH:</span><br><span class="line">        result = sqlSession.flushStatements();</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">"Unknown execution method for: "</span> + command.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="keyword">null</span> &amp;&amp; method.getReturnType().isPrimitive() &amp;&amp; !method.returnsVoid()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">"Mapper method '"</span> + command.getName()</span><br><span class="line">          + <span class="string">" attempted to return null from a method with a primitive return type ("</span> + method.getReturnType() + <span class="string">")."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增删改的返回结果， rowCount就是SqlSession返回的影响的行数</span></span><br><span class="line"><span class="comment">// org.apache.ibatis.binding.MapperMethod#rowCountResult</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">rowCountResult</span><span class="params">(<span class="keyword">int</span> rowCount)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Object result;</span><br><span class="line">  <span class="keyword">if</span> (method.returnsVoid()) &#123;</span><br><span class="line">    result = <span class="keyword">null</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Integer<span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">method</span>.<span class="title">getReturnType</span>()) || <span class="title">Integer</span>.<span class="title">TYPE</span>.<span class="title">equals</span>(<span class="title">method</span>.<span class="title">getReturnType</span>())) </span>&#123;</span><br><span class="line">    result = rowCount;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Long<span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">method</span>.<span class="title">getReturnType</span>()) || <span class="title">Long</span>.<span class="title">TYPE</span>.<span class="title">equals</span>(<span class="title">method</span>.<span class="title">getReturnType</span>())) </span>&#123;</span><br><span class="line">    result = (<span class="keyword">long</span>)rowCount;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Boolean<span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">method</span>.<span class="title">getReturnType</span>()) || <span class="title">Boolean</span>.<span class="title">TYPE</span>.<span class="title">equals</span>(<span class="title">method</span>.<span class="title">getReturnType</span>())) </span>&#123;</span><br><span class="line">    <span class="comment">// 可以转成boolean类型的</span></span><br><span class="line">    result = rowCount &gt; <span class="number">0</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">"Mapper method '"</span> + command.getName() + <span class="string">"' has an unsupported return type: "</span> + method.getReturnType());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注册代理类"><a href="#注册代理类" class="headerlink" title="注册代理类"></a>注册代理类</h3><img src="http://www.plantuml.com/plantuml/svg/ZL4xKiCm4ErrYYsJ0WxWYLC0aufa6590kv55HeCZ2Kac-0AXW88xqAHbA5Dm6S0S0oio10cRmPMyxwFtLWIfbHfepfcmX2ZKbbEkK5YONkLJPWoNOhGbbGS5ppEcGzRv-FXGYWi-xqB7g1JJhQWN5XfjVSc_8MzuokRSM5sIxPUc0A-Rn-fXLJrjtf_NRwlxZvVRQdq7QKg8RmTxmyvE2SpSeTSdf8lYv77P1EfWXZbP33NqeFqFUctDhz6obWt5atQd6HUP7usadk226ONqAyalVR3E131hj8wViJ_214Bd56u_ilesYjye_D_vd6XvKpPxJa2mPSjyCEoTIPsP8vJxD4TZ-jr-krogiC25bN0fv59ur0HbeuoV"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.ibatis.builder.xml.XMLMapperBuilder#bindMapperForNamespace</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bindMapperForNamespace</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  String namespace = builderAssistant.getCurrentNamespace();</span><br><span class="line">  <span class="keyword">if</span> (namespace != <span class="keyword">null</span>) &#123;</span><br><span class="line">    Class&lt;?&gt; boundType = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      boundType = Resources.classForName(namespace);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">      <span class="comment">//ignore, bound type is not required</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果namespace是一个类，比如WordsDao，就加到Mapper的Registry中</span></span><br><span class="line">    <span class="keyword">if</span> (boundType != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!configuration.hasMapper(boundType)) &#123;</span><br><span class="line">        <span class="comment">// Spring may not know the real resource name so we set a flag</span></span><br><span class="line">        <span class="comment">// to prevent loading again this resource from the mapper interface</span></span><br><span class="line">        <span class="comment">// look at MapperAnnotationBuilder#loadXmlResource</span></span><br><span class="line">        configuration.addLoadedResource(<span class="string">"namespace:"</span> + namespace);</span><br><span class="line">        configuration.addMapper(boundType);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.apache.ibatis.binding.MapperRegistry#addMapper</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">addMapper</span><span class="params">(Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (type.isInterface()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hasMapper(type)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">"Type "</span> + type + <span class="string">" is already known to the MapperRegistry."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">boolean</span> loadCompleted = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      knownMappers.put(type, <span class="keyword">new</span> MapperProxyFactory&lt;&gt;(type));</span><br><span class="line">      <span class="comment">// It's important that the type is added before the parser is run</span></span><br><span class="line">      <span class="comment">// otherwise the binding may automatically be attempted by the</span></span><br><span class="line">      <span class="comment">// mapper parser. If the type is already known, it won't try.</span></span><br><span class="line">      MapperAnnotationBuilder parser = <span class="keyword">new</span> MapperAnnotationBuilder(config, type);</span><br><span class="line">      parser.parse();</span><br><span class="line">      loadCompleted = <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!loadCompleted) &#123;</span><br><span class="line">        knownMappers.remove(type);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://juejin.cn/post/6844903841163378701" rel="external nofollow noopener noreferrer" target="_blank">浅析MyBatis的动态代理原理</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;mybatis虽然支持直接使用SqlSession来操作db，&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pr
      
    
    </summary>
    
      <category term="mybatis" scheme="http://qsli.github.io/categories/mybatis/"/>
    
    
      <category term="mybatis" scheme="http://qsli.github.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>mybatis源码解析（一）</title>
    <link href="http://qsli.github.io/2021/03/18/mybatis-detail-01/"/>
    <id>http://qsli.github.io/2021/03/18/mybatis-detail-01/</id>
    <published>2021-03-18T12:31:01.000Z</published>
    <updated>2021-11-13T17:53:22.279Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础组件"><a href="#基础组件" class="headerlink" title="基础组件"></a>基础组件</h1><img src="/2021/03/18/mybatis-detail-01/image-20210318200117139.png"><h2 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h2><p>SqlSession是mybatis面向用户的一个类，使用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> (Reader reader = Resources.getResourceAsReader(<span class="string">"mybatis-config.xml"</span>)) &#123;</span><br><span class="line">    <span class="comment">//创建SqlSessionFactory</span></span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">    <span class="comment">//获取SqlSession</span></span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">//执行Sql</span></span><br><span class="line">    <span class="keyword">final</span> List&lt;Object&gt; selectAll = sqlSession.selectList(<span class="string">"selectAll"</span>, <span class="keyword">null</span>, <span class="keyword">new</span> RowBounds(<span class="number">10</span>,<span class="number">20</span>));</span><br><span class="line">    System.out.println(<span class="string">"selectAll = "</span> + selectAll);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SqlSession</code>创建过程:</p><img src="/2021/03/18/mybatis-detail-01/spring-tx-SqlSession.jpg"><p>执行过程：</p><img src="/2021/03/18/mybatis-detail-01/spring-tx-selectList-6069717.jpg"><h2 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h2><p>这一层提供的接口主要是针对<code>MappedStatement</code>的:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Clinton Begin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Executor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  ResultHandler NO_RESULT_HANDLER = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(MappedStatement ms, Object parameter)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey cacheKey, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  &lt;E&gt; <span class="function">Cursor&lt;E&gt; <span class="title">queryCursor</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">List&lt;BatchResult&gt; <span class="title">flushStatements</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">(<span class="keyword">boolean</span> required)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">(<span class="keyword">boolean</span> required)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">CacheKey <span class="title">createCacheKey</span><span class="params">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, BoundSql boundSql)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isCached</span><span class="params">(MappedStatement ms, CacheKey key)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">clearLocalCache</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">deferLoad</span><span class="params">(MappedStatement ms, MetaObject resultObject, String property, CacheKey key, Class&lt;?&gt; targetType)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">Transaction <span class="title">getTransaction</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">(<span class="keyword">boolean</span> forceRollback)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isClosed</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setExecutorWrapper</span><span class="params">(Executor executor)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/03/18/mybatis-detail-01/image-20210318154049840.png"><h3 id="结果缓存"><a href="#结果缓存" class="headerlink" title="结果缓存"></a>结果缓存</h3><img src="/2021/03/18/mybatis-detail-01/20141123125616381.png"><p>在创建Session的时候，可以指定使用哪种executor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.ibatis.session.Configuration#newExecutor(org.apache.ibatis.transaction.Transaction, org.apache.ibatis.session.ExecutorType)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Executor <span class="title">newExecutor</span><span class="params">(Transaction transaction, ExecutorType executorType)</span> </span>&#123;</span><br><span class="line">  executorType = executorType == <span class="keyword">null</span> ? defaultExecutorType : executorType;</span><br><span class="line">  executorType = executorType == <span class="keyword">null</span> ? ExecutorType.SIMPLE : executorType;</span><br><span class="line">  Executor executor;</span><br><span class="line">  <span class="keyword">if</span> (ExecutorType.BATCH == executorType) &#123;</span><br><span class="line">    executor = <span class="keyword">new</span> BatchExecutor(<span class="keyword">this</span>, transaction);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ExecutorType.REUSE == executorType) &#123;</span><br><span class="line">    <span class="comment">// 缓存PreparedStatement</span></span><br><span class="line">    executor = <span class="keyword">new</span> ReuseExecutor(<span class="keyword">this</span>, transaction);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    executor = <span class="keyword">new</span> SimpleExecutor(<span class="keyword">this</span>, transaction);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果开启了二级缓存，就用CachingExecutor装饰下</span></span><br><span class="line">  <span class="keyword">if</span> (cacheEnabled) &#123;</span><br><span class="line">    executor = <span class="keyword">new</span> CachingExecutor(executor);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 插件机制，后面会详细讲</span></span><br><span class="line">  executor = (Executor) interceptorChain.pluginAll(executor);</span><br><span class="line">  <span class="keyword">return</span> executor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Session级别的缓存（一级缓存）"><a href="#Session级别的缓存（一级缓存）" class="headerlink" title="Session级别的缓存（一级缓存）"></a>Session级别的缓存（一级缓存）</h4><p><strong>一级缓存默认打开</strong></p><blockquote><p>MyBatis的一级缓存最大范围是SqlSession内部，有多个SqlSession或者分布式的环境下，<strong>数据库写操作会引起脏数据</strong>，建议设定缓存级别为Statement。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configuration.setLocalCacheScope(LocalCacheScope.valueOf(props.getProperty(<span class="string">"localCacheScope"</span>, <span class="string">"SESSION"</span>)));</span><br></pre></td></tr></table></figure><p>没有配置默认就是session级别的，配置示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"localCacheScope"</span> <span class="attr">value</span>=<span class="string">"SESSION"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>Executor是跟session绑定的，所以这个缓存是session级别的，也就是连接级别的。连接关闭之后，这个缓存也就消失了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.ibatis.executor.BaseExecutor#query(org.apache.ibatis.mapping.MappedStatement, java.lang.Object, org.apache.ibatis.session.RowBounds, org.apache.ibatis.session.ResultHandler)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  BoundSql boundSql = ms.getBoundSql(parameter);</span><br><span class="line">  CacheKey key = createCacheKey(ms, parameter, rowBounds, boundSql);</span><br><span class="line">  <span class="keyword">return</span> query(ms, parameter, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// org.apache.ibatis.executor.BaseExecutor#query(org.apache.ibatis.mapping.MappedStatement, java.lang.Object, org.apache.ibatis.session.RowBounds, org.apache.ibatis.session.ResultHandler, org.apache.ibatis.cache.CacheKey, org.apache.ibatis.mapping.BoundSql)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  ErrorContext.instance().resource(ms.getResource()).activity(<span class="string">"executing a query"</span>).object(ms.getId());</span><br><span class="line">  <span class="keyword">if</span> (closed) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ExecutorException(<span class="string">"Executor was closed."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (queryStack == <span class="number">0</span> &amp;&amp; ms.isFlushCacheRequired()) &#123;</span><br><span class="line">    clearLocalCache();</span><br><span class="line">  &#125;</span><br><span class="line">  List&lt;E&gt; list;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    queryStack++;</span><br><span class="line">    <span class="comment">// 从缓存中取</span></span><br><span class="line">    list = resultHandler == <span class="keyword">null</span> ? (List&lt;E&gt;) localCache.getObject(key) : <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (list != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 处理缓存的结果</span></span><br><span class="line">      handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    queryStack--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (queryStack == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (DeferredLoad deferredLoad : deferredLoads) &#123;</span><br><span class="line">      deferredLoad.load();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// issue #601</span></span><br><span class="line">    deferredLoads.clear();</span><br><span class="line">    <span class="keyword">if</span> (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) &#123;</span><br><span class="line">      <span class="comment">// issue #482</span></span><br><span class="line">      clearLocalCache();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.apache.ibatis.executor.BaseExecutor#queryFromDatabase</span></span><br><span class="line"><span class="keyword">private</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">queryFromDatabase</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  List&lt;E&gt; list;</span><br><span class="line">  <span class="comment">// 占位</span></span><br><span class="line">  localCache.putObject(key, EXECUTION_PLACEHOLDER);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 清空缓存</span></span><br><span class="line">    localCache.removeObject(key);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 更新缓存</span></span><br><span class="line">  localCache.putObject(key, list);</span><br><span class="line">  <span class="keyword">if</span> (ms.getStatementType() == StatementType.CALLABLE) &#123;</span><br><span class="line">    localOutputParameterCache.putObject(key, parameter);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Statement级别的缓存（二级缓存）"><a href="#Statement级别的缓存（二级缓存）" class="headerlink" title="Statement级别的缓存（二级缓存）"></a>Statement级别的缓存（二级缓存）</h4><p><code>CachingExecutor</code>加了一层<code>Statement</code>级别的缓存，其他的逻辑都是委托给其他的Executor来实现的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.ibatis.executor.CachingExecutor#query(org.apache.ibatis.mapping.MappedStatement, java.lang.Object, org.apache.ibatis.session.RowBounds, org.apache.ibatis.session.ResultHandler, org.apache.ibatis.cache.CacheKey, org.apache.ibatis.mapping.BoundSql)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  <span class="comment">// statement 级别的cache，可以在配置文件中开启</span></span><br><span class="line">  Cache cache = ms.getCache();</span><br><span class="line">  <span class="keyword">if</span> (cache != <span class="keyword">null</span>) &#123;</span><br><span class="line">    flushCacheIfRequired(ms);</span><br><span class="line">    <span class="keyword">if</span> (ms.isUseCache() &amp;&amp; resultHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">      ensureNoOutParams(ms, boundSql);</span><br><span class="line">      <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">      List&lt;E&gt; list = (List&lt;E&gt;) tcm.getObject(cache, key);</span><br><span class="line">      <span class="comment">// 缓存未命中</span></span><br><span class="line">      <span class="keyword">if</span> (list == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 委托给底层进行查询</span></span><br><span class="line">        list = delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">        <span class="comment">// 加入缓存</span></span><br><span class="line">        tcm.putObject(cache, key, list); <span class="comment">// issue #578 and #116</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 未开启缓存，直接委托给底层的实现</span></span><br><span class="line">  <span class="keyword">return</span> delegate.query(ms, parameterObject, rowBounds, resultHandler, key, boundSql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际处理类的逻辑:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.ibatis.executor.SimpleExecutor#doQuery</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">doQuery</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Configuration configuration = ms.getConfiguration();</span><br><span class="line">    <span class="comment">// 创建StatementHandler</span></span><br><span class="line">    StatementHandler handler = configuration.newStatementHandler(wrapper, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">    <span class="comment">// 把配置的一些属性，传递个对应的Statement, 比如fetchSize， timeout等</span></span><br><span class="line">    stmt = prepareStatement(handler, ms.getStatementLog());</span><br><span class="line">    <span class="comment">// 委托StatementHandler查询</span></span><br><span class="line">    <span class="keyword">return</span> handler.query(stmt, resultHandler);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    closeStatement(stmt);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Cache的实现使用了装饰者模式：</p><blockquote><p>SynchronizedCache -&gt; LoggingCache -&gt; SerializedCache -&gt; LruCache -&gt; PerpetualCache</p><p>以下是具体这些Cache实现类的介绍，他们的组合为Cache赋予了不同的能力。</p><ul><li><code>SynchronizedCache</code>：同步Cache，实现比较简单，直接使用synchronized修饰方法。</li><li><code>LoggingCache</code>：日志功能，装饰类，用于记录缓存的命中率，如果开启了DEBUG模式，则会输出命中率日志。</li><li><code>SerializedCache</code>：序列化功能，将值序列化后存到缓存中。该功能用于缓存返回一份实例的Copy，用于保存线程安全。</li><li><code>LruCache</code>：采用了Lru算法的Cache实现，移除最近最少使用的Key/Value。</li><li><code>PerpetualCache</code>： 作为为最基础的缓存类，底层实现比较简单，直接使用了HashMap。</li></ul></blockquote><p>二级缓存跨session存在，有很大的风险会读到错误的数据。而且大部分的互联网应用都是分布式的，一般不共享状态，可以水平扩展；但是本地缓存打破了无状态下，很有可能会读到错误的数据，应该慎重使用。</p><h3 id="PreparedStatement缓存（PSCache）"><a href="#PreparedStatement缓存（PSCache）" class="headerlink" title="PreparedStatement缓存（PSCache）"></a>PreparedStatement缓存（PSCache）</h3><p>又叫<code>PSCache</code>，这里对应的是<code>ReuseExecutor</code>，这个缓存也是Session级别的。除了在Mybatis这一层做缓存，还可以在MySQL驱动和MysqlServer做缓存，参见<a href="https://qsli.github.io/2020/05/05/cache-prep-stmts/#cachePrepStmts%E5%92%8CuseServerPrepStmts%E5%90%8C%E6%97%B6%E6%89%93%E5%BC%80">jdbc预编译缓存加速sql执行 | KL’s blog</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.ibatis.executor.ReuseExecutor#prepareStatement</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Statement <span class="title">prepareStatement</span><span class="params">(StatementHandler handler, Log statementLog)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  Statement stmt;</span><br><span class="line">  BoundSql boundSql = handler.getBoundSql();</span><br><span class="line">  String sql = boundSql.getSql();</span><br><span class="line">  <span class="keyword">if</span> (hasStatementFor(sql)) &#123;</span><br><span class="line">    <span class="comment">// 从缓存中取</span></span><br><span class="line">    stmt = getStatement(sql);</span><br><span class="line">    applyTransactionTimeout(stmt);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Connection connection = getConnection(statementLog);</span><br><span class="line">    stmt = handler.prepare(connection, transaction.getTimeout());</span><br><span class="line">    putStatement(sql, stmt);</span><br><span class="line">  &#125;</span><br><span class="line">  handler.parameterize(stmt);</span><br><span class="line">  <span class="keyword">return</span> stmt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// private final Map&lt;String, Statement&gt; statementMap = new HashMap&lt;String, Statement&gt;();</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">hasStatementFor</span><span class="params">(String sql)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> statementMap.keySet().contains(sql) &amp;&amp; !statementMap.get(sql).getConnection().isClosed();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Statement <span class="title">getStatement</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> statementMap.get(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">putStatement</span><span class="params">(String sql, Statement stmt)</span> </span>&#123;</span><br><span class="line">  statementMap.put(sql, stmt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="StatementHandler"><a href="#StatementHandler" class="headerlink" title="StatementHandler"></a>StatementHandler</h2><p><code>StatementHandler</code>主要是跟<code>javax</code>里<code>的Statement</code>打交道的，相当于对<code>Statement</code>的操作进行了一层封装，也是<code>mybatis</code>和<code>jdbc</code>的一个隔离层。</p><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Clinton Begin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StatementHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">Statement <span class="title">prepare</span><span class="params">(Connection connection, Integer transactionTimeout)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">parameterize</span><span class="params">(Statement statement)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">batch</span><span class="params">(Statement statement)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(Statement statement)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(Statement statement, ResultHandler resultHandler)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  &lt;E&gt; <span class="function">Cursor&lt;E&gt; <span class="title">queryCursor</span><span class="params">(Statement statement)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">BoundSql <span class="title">getBoundSql</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">ParameterHandler <span class="title">getParameterHandler</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，接口中的参数，都是<code>Statement</code>而不是<code>mybatis</code>自己的<code>MappedStatement</code></p><p>继承关系：</p><img src="/2021/03/18/mybatis-detail-01/image-20210318153611468.png"><p>其中<code>RoutingStatementHandler</code>就是用来路由的，根据查询的类型路由到<code>SimpleStatementHandler</code>、<code>CallableStatementHandler</code>、<code>PreparedStatementHandler</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RoutingStatementHandler</span><span class="params">(Executor executor, MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (ms.getStatementType()) &#123;</span><br><span class="line">    <span class="keyword">case</span> STATEMENT:</span><br><span class="line">      delegate = <span class="keyword">new</span> SimpleStatementHandler(executor, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> PREPARED:</span><br><span class="line">      delegate = <span class="keyword">new</span> PreparedStatementHandler(executor, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> CALLABLE:</span><br><span class="line">      delegate = <span class="keyword">new</span> CallableStatementHandler(executor, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ExecutorException(<span class="string">"Unknown statement type: "</span> + ms.getStatementType());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TypeHandler"><a href="#TypeHandler" class="headerlink" title="TypeHandler"></a>TypeHandler</h2><p><code>TypeHandler</code>主要负责类型转换，类似spring的<code>ConversionService</code>, 主要用于两个地方，一个是设置<code>PrepareStatement</code>，占位符对应的参数；一个是将ResultSet返回的结果集转换成对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Clinton Begin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TypeHandler</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setParameter</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i, T parameter, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">getResult</span><span class="params">(ResultSet rs, String columnName)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">getResult</span><span class="params">(ResultSet rs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">T <span class="title">getResult</span><span class="params">(CallableStatement cs, <span class="keyword">int</span> columnIndex)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ParameterHandler"><a href="#ParameterHandler" class="headerlink" title="ParameterHandler"></a>ParameterHandler</h4><p>比如数据库里面存的是<code>VARCHAR</code>，传给mybatis的是一个<code>Bean</code>对象，就可以在这一层做一个转换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNonNullParameter</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i, T parameter, JdbcType jdbcType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// Bean -&gt; json string</span></span><br><span class="line">    ps.setString(i, ObjectUtil.toJson(parameter));</span><br><span class="line">  &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认实现<code>org.apache.ibatis.scripting.defaults.DefaultParameterHandler</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.ibatis.scripting.defaults.DefaultParameterHandler#setParameters</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParameters</span><span class="params">(PreparedStatement ps)</span> </span>&#123;</span><br><span class="line">  ErrorContext.instance().activity(<span class="string">"setting parameters"</span>).object(mappedStatement.getParameterMap().getId());</span><br><span class="line">  List&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings();</span><br><span class="line">  <span class="keyword">if</span> (parameterMappings != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameterMappings.size(); i++) &#123;</span><br><span class="line">      ParameterMapping parameterMapping = parameterMappings.get(i);</span><br><span class="line">      <span class="keyword">if</span> (parameterMapping.getMode() != ParameterMode.OUT) &#123;</span><br><span class="line">        Object value;</span><br><span class="line">        String propertyName = parameterMapping.getProperty();</span><br><span class="line">        <span class="keyword">if</span> (boundSql.hasAdditionalParameter(propertyName)) &#123; <span class="comment">// issue #448 ask first for additional params</span></span><br><span class="line">          value = boundSql.getAdditionalParameter(propertyName);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (parameterObject == <span class="keyword">null</span>) &#123;</span><br><span class="line">          value = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) &#123;</span><br><span class="line">          value = parameterObject;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          MetaObject metaObject = configuration.newMetaObject(parameterObject);</span><br><span class="line">          value = metaObject.getValue(propertyName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 拿到参数对应的TypeHandler，通过&lt;JavaType, JDBC Type&gt; --&gt; TypeHandler， 解析的时候就确定了</span></span><br><span class="line">        TypeHandler typeHandler = parameterMapping.getTypeHandler();</span><br><span class="line">        JdbcType jdbcType = parameterMapping.getJdbcType();</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span> &amp;&amp; jdbcType == <span class="keyword">null</span>) &#123;</span><br><span class="line">          jdbcType = configuration.getJdbcTypeForNull();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 使用typeHandler做类型转换</span></span><br><span class="line">          typeHandler.setParameter(ps, i + <span class="number">1</span>, value, jdbcType);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TypeException e) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> TypeException(<span class="string">"Could not set parameters for mapping: "</span> + parameterMapping + <span class="string">". Cause: "</span> + e, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> TypeException(<span class="string">"Could not set parameters for mapping: "</span> + parameterMapping + <span class="string">". Cause: "</span> + e, e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ResultSetHandler"><a href="#ResultSetHandler" class="headerlink" title="ResultSetHandler"></a>ResultSetHandler</h4><p>用于转换<code>JDBC</code>返回的<code>ResultSet</code>对象为<code>Statement</code>中定义的返回值类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Clinton Begin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 处理批量</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResultSetHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">handleResultSets</span><span class="params">(Statement stmt)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  &lt;E&gt; <span class="function">Cursor&lt;E&gt; <span class="title">handleCursorResultSets</span><span class="params">(Statement stmt)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">handleOutputParameters</span><span class="params">(CallableStatement cs)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Clinton Begin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 处理单个</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResultHandler</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">handleResult</span><span class="params">(ResultContext&lt;? extends T&gt; resultContext)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.ibatis.executor.resultset.DefaultResultSetHandler#handleResultSet</span></span><br><span class="line"><span class="comment">// for循环中调用</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleResultSet</span><span class="params">(ResultSetWrapper rsw, ResultMap resultMap, List&lt;Object&gt; multipleResults, ResultMapping parentMapping)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (parentMapping != <span class="keyword">null</span>) &#123;</span><br><span class="line">      handleRowValues(rsw, resultMap, <span class="keyword">null</span>, RowBounds.DEFAULT, parentMapping);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (resultHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 默认的ResultHandler</span></span><br><span class="line">        DefaultResultHandler defaultResultHandler = <span class="keyword">new</span> DefaultResultHandler(objectFactory);</span><br><span class="line">        handleRowValues(rsw, resultMap, defaultResultHandler, rowBounds, <span class="keyword">null</span>);</span><br><span class="line">        multipleResults.add(defaultResultHandler.getResultList());</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        handleRowValues(rsw, resultMap, resultHandler, rowBounds, <span class="keyword">null</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// issue #228 (close resultsets)</span></span><br><span class="line">    closeResultSet(rsw.getResultSet());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.apache.ibatis.executor.resultset.DefaultResultSetHandler#createUsingConstructor</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">createUsingConstructor</span><span class="params">(ResultSetWrapper rsw, Class&lt;?&gt; resultType, List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs, Constructor&lt;?&gt; constructor)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">  <span class="keyword">boolean</span> foundValues = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; constructor.getParameterTypes().length; i++) &#123;</span><br><span class="line">    Class&lt;?&gt; parameterType = constructor.getParameterTypes()[i];</span><br><span class="line">    String columnName = rsw.getColumnNames().get(i);</span><br><span class="line">    <span class="comment">// 获取对应的TypeHandler</span></span><br><span class="line">    TypeHandler&lt;?&gt; typeHandler = rsw.getTypeHandler(parameterType, columnName);</span><br><span class="line">    <span class="comment">// 转换类型</span></span><br><span class="line">    Object value = typeHandler.getResult(rsw.getResultSet(), columnName);</span><br><span class="line">    constructorArgTypes.add(parameterType);</span><br><span class="line">    constructorArgs.add(value);</span><br><span class="line">    foundValues = value != <span class="keyword">null</span> || foundValues;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> foundValues ? objectFactory.create(resultType, constructorArgTypes, constructorArgs) : <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://blog.csdn.net/luanlouis/article/details/41408341" rel="external nofollow noopener noreferrer" target="_blank">《深入理解mybatis原理》 MyBatis的二级缓存的设计原理_我的程序人生(亦山札记)-CSDN博客_mybatis二级缓存原理</a></li><li><a href="https://yq.aliyun.com/articles/608941" rel="external nofollow noopener noreferrer" target="_blank">你真的懂Mybatis缓存机制吗-云栖社区-阿里云</a></li><li><a href="https://tech.meituan.com/2018/01/19/mybatis-cache.html" rel="external nofollow noopener noreferrer" target="_blank">聊聊MyBatis缓存机制 - 美团技术团队</a></li><li><a href="https://mp.weixin.qq.com/s/Rac7SPZnujq73lb0tcQULA" rel="external nofollow noopener noreferrer" target="_blank">面试官问: MyBatis SQL是如何执行的？把这篇文章甩给他</a></li><li><a href="http://dengchengchao.com/?p=1190" rel="external nofollow noopener noreferrer" target="_blank">MyBatis 的秘密（二）Executor – 邓承超的个人日志</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基础组件&quot;&gt;&lt;a href=&quot;#基础组件&quot; class=&quot;headerlink&quot; title=&quot;基础组件&quot;&gt;&lt;/a&gt;基础组件&lt;/h1&gt;&lt;img src=&quot;/2021/03/18/mybatis-detail-01/image-20210318200117139.p
      
    
    </summary>
    
      <category term="mybatis" scheme="http://qsli.github.io/categories/mybatis/"/>
    
    
      <category term="mybatis" scheme="http://qsli.github.io/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>spring-aop</title>
    <link href="http://qsli.github.io/2021/03/10/spring-aop/"/>
    <id>http://qsli.github.io/2021/03/10/spring-aop/</id>
    <published>2021-03-09T17:19:43.000Z</published>
    <updated>2021-11-13T17:53:22.298Z</updated>
    
    <content type="html"><![CDATA[<p>Spring-Aop是spring提供的面向切面编程的工具，spring的好多功能也是基于切面来实现。切面编程可以将分散的逻辑集中在切面中，便于代码的维护。</p><h2 id="AOP使用"><a href="#AOP使用" class="headerlink" title="AOP使用"></a>AOP使用</h2><h3 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h3><p>配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 代故</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/7 1:18 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Foo <span class="title">foo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Foo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PerformanceTraceAspect <span class="title">performanceTraceAspect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PerformanceTraceAspect();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><p>切面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 代故</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/5 5:24 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PerformanceTraceAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Pointcut</span>(<span class="string">"execution(public void *.hello1()) || execution(public void *.hello2())"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointCut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Around</span>(<span class="string">"pointCut()"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">tracePerformance</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">    Stopwatch stopwatch = Stopwatch.createStarted();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> proceedingJoinPoint.proceed();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      log.info(<span class="string">"&#123;&#125; total cost &#123;&#125; ms"</span>, proceedingJoinPoint.getSignature()</span><br><span class="line">               .getName(), stopwatch.elapsed(TimeUnit.MILLISECONDS));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 代故</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/5 5:28 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"hello1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"hello2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 代故</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/5 5:29 PM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(JUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Slf4j</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">AopTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 2021-03-05 17:36:05.406[main][INFO ]c.a.s.a.AopTest.testWeave:31 foo class is Foo$$EnhancerBySpringCGLIB$$a5169b75</span></span><br><span class="line"><span class="comment">    * 2021-03-05 17:36:05.854[main][INFO ]c.a.s.a.Foo.hello1:13 hello1</span></span><br><span class="line"><span class="comment">     * 2021-03-05 17:36:05.862[main][INFO ]c.a.s.a.PerformanceTraceAspect.tracePerformance:31 hello1 total cost 25 ms</span></span><br><span class="line"><span class="comment">     * 2021-03-05 17:36:05.863[main][INFO ]c.a.s.a.Foo.hello2:17 hello2</span></span><br><span class="line"><span class="comment">     * 2021-03-05 17:36:05.863[main][INFO ]c.a.s.a.PerformanceTraceAspect.tracePerformance:31 hello2 total cost 0 ms</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWeave</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> AspectJProxyFactory aspectJProxyFactory = <span class="keyword">new</span> AspectJProxyFactory();</span><br><span class="line">        aspectJProxyFactory.setProxyTargetClass(<span class="keyword">true</span>);</span><br><span class="line">        aspectJProxyFactory.setTarget(<span class="keyword">new</span> Foo());</span><br><span class="line">        aspectJProxyFactory.addAspect(PerformanceTraceAspect<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Foo proxy = (Foo)aspectJProxyFactory.getProxy();</span><br><span class="line">        log.info(<span class="string">"foo class is &#123;&#125;"</span>, proxy.getClass().getSimpleName());</span><br><span class="line">        proxy.hello1();</span><br><span class="line">        proxy.hello2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2021-03-07 01:20:33.714[main][INFO ]o.s.c.a.AnnotationConfigApplicationContext.prepareRefresh:582 Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@e45f292: startup date [Sun Mar 07 01:20:33 CST 2021]; root of context hierarchy</span></span><br><span class="line"><span class="comment">     * 2021-03-07 01:20:35.859[main][INFO ]c.a.s.a.AopTest.testWithSpringContext:47 foo class is Foo$$EnhancerBySpringCGLIB$$2546ecd</span></span><br><span class="line"><span class="comment">     * 2021-03-07 01:20:35.094[main][INFO ]c.a.s.a.Foo.hello1:13 hello1</span></span><br><span class="line"><span class="comment">     * 2021-03-07 01:20:35.096[main][INFO ]c.a.s.a.PerformanceTraceAspect.tracePerformance:31 hello1 total cost 31 ms</span></span><br><span class="line"><span class="comment">     * 2021-03-07 01:20:35.100[main][INFO ]c.a.s.a.Foo.hello2:17 hello2</span></span><br><span class="line"><span class="comment">     * 2021-03-07 01:20:35.103[main][INFO ]c.a.s.a.PerformanceTraceAspect.tracePerformance:31 hello2 total cost 0 ms</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWithSpringContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(AopConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">final</span> Foo foo = context.getBean(Foo<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        log.info(<span class="string">"foo class is &#123;&#125;"</span>, foo.getClass().getSimpleName());</span><br><span class="line">        foo.hello1();</span><br><span class="line">        foo.hello2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置类上使用注解<code>@EnableAspectJAutoProxy</code>即可，从输出的日志中可以看到，拿到的类其实是CGLIB代理过的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2021-03-07 01:20:35.859[main][INFO ]c.a.s.a.AopTest.testWithSpringContext:47 foo class is Foo$<span class="variable">$EnhancerBySpringCGLIB</span>$<span class="variable">$2546ecd</span></span><br></pre></td></tr></table></figure><p>注解有两个属性：</p><ul><li><p>proxyTargetClass</p><p>默认是false， 如果是true会强制使用cglib代理（默认的对于接口的，是使用的JDK代理）</p><blockquote><p>Indicate whether subclass-based (CGLIB) proxies are to be created as opposed<br>to standard Java interface-based proxies. The default is {@code false}.</p></blockquote></li><li><p>ExposeProxy</p><p>默认是false，是否暴露代理类， 可以通过<code>org.springframework.aop.framework.AopContext</code>获取（ThreadLocal）</p><blockquote><p>Indicate that the proxy should be exposed by the AOP framework as a {@code ThreadLocal}<br>for retrieval via the {@link org.springframework.aop.framework.AopContext} class.<br>Off by default, i.e. no guarantees that {@code AopContext} access will work.</p></blockquote></li></ul><h3 id="xml方式"><a href="#xml方式" class="headerlink" title="xml方式"></a>xml方式</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>除了配置方式不同，使用和注解的方式类似。xml方式也提供了类似的属性，和上面介绍的一致。</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="BeanPostProcess注册过程"><a href="#BeanPostProcess注册过程" class="headerlink" title="BeanPostProcess注册过程"></a>BeanPostProcess注册过程</h3><h4 id="注解方式-1"><a href="#注解方式-1" class="headerlink" title="注解方式"></a>注解方式</h4><p>注册过程：</p><img src="http://www.plantuml.com/plantuml/svg/TP51JiD034NtSufPmW8E42aeeR20HLKXSG0JdCfIQeyyhWeNW0L8x3X3zwoGa3XD2ySW4meY9TsDzErdFuyhee7QVDPuvqBxeee2iFbJXgi6onYmilDoRZ9HkRdjrsod5pYbQ0gwnIebZ8HhcbuQDR6V7IFm2TR4P2Iy8RHpyjntsKIYjV0AOnHTlonNTu-Vx_SVomU_Lmplk7v-NRqzxViyTswumXySxTuzypGBekRSRhtKttFAl7OXwayJinWafT_saIAOw5azncG3oR9FITpXUsJ-M_qFTW7wJsmpuh1g8BPtBf2lkv_z0W00"><h4 id="xml方式-1"><a href="#xml方式-1" class="headerlink" title="xml方式"></a>xml方式</h4><p>注册过程：</p><img src="http://www.plantuml.com/plantuml/svg/dPAnIWD148RxVOejjOWFS72I60kr28VW0moRkR2ojxlCJZ3f9HOAMWds5jTR2O9FSucFuTsPI7AvG4Yto-nyy___hEW61k9nPgGGlZnffJrObZtd1v1XyA3m0kpG83LV18-AhtfZTWcvoVGCmPvZggrcxMm2591sCszOcx1LxZkRwb5BRHD-ZICTcAP2nB6iQuaBNAfG68AZ-KTUp9v-lXyM-QCy0kSZgBNUTg0KwoknSfAP-UjdyVLyBEDOY3QxdTEzF4RoRrxnVhzucHLlUKdRewt6DmE99DNMa5O8Qnr3rVKFwnC2ExfC1rZPXIg6BT2IlfRdOUZcJZRlrPJspQn2MHjo1uJDO9O3JvI1KDAxQ8VrL_m5"><h4 id="AopConfigUtils"><a href="#AopConfigUtils" class="headerlink" title="AopConfigUtils"></a>AopConfigUtils</h4><p>核心代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The bean name of the internally managed auto-proxy creator.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String AUTO_PROXY_CREATOR_BEAN_NAME =</span><br><span class="line">  <span class="string">"org.springframework.aop.config.internalAutoProxyCreator"</span>;</span><br><span class="line"><span class="comment">// org.springframework.aop.config.AopConfigUtils#registerOrEscalateApcAsRequired</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> BeanDefinition <span class="title">registerOrEscalateApcAsRequired</span><span class="params">(Class&lt;?&gt; cls, BeanDefinitionRegistry registry, Object source)</span> </span>&#123;</span><br><span class="line">  Assert.notNull(registry, <span class="string">"BeanDefinitionRegistry must not be null"</span>);</span><br><span class="line">  <span class="comment">// 如果已经有同名的注册过了</span></span><br><span class="line">  <span class="keyword">if</span> (registry.containsBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME)) &#123;</span><br><span class="line">    BeanDefinition apcDefinition = registry.getBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME);</span><br><span class="line">    <span class="comment">// 如果不是AnnotationAwareAspectJAutoProxyCreator.class</span></span><br><span class="line">    <span class="keyword">if</span> (!cls.getName().equals(apcDefinition.getBeanClassName())) &#123;</span><br><span class="line">      <span class="keyword">int</span> currentPriority = findPriorityForClass(apcDefinition.getBeanClassName());</span><br><span class="line">      <span class="keyword">int</span> requiredPriority = findPriorityForClass(cls);</span><br><span class="line">      <span class="comment">// 取优先级大的注册</span></span><br><span class="line">      <span class="keyword">if</span> (currentPriority &lt; requiredPriority) &#123;</span><br><span class="line">        apcDefinition.setBeanClassName(cls.getName());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 没有注册过，直接注册AnnotationAwareAspectJAutoProxyCreator.class</span></span><br><span class="line">  RootBeanDefinition beanDefinition = <span class="keyword">new</span> RootBeanDefinition(cls);</span><br><span class="line">  beanDefinition.setSource(source);</span><br><span class="line">  beanDefinition.getPropertyValues().add(<span class="string">"order"</span>, Ordered.HIGHEST_PRECEDENCE);</span><br><span class="line">  beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">  registry.registerBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME, beanDefinition);</span><br><span class="line">  <span class="keyword">return</span> beanDefinition;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BeanPostProcessor处理逻辑"><a href="#BeanPostProcessor处理逻辑" class="headerlink" title="BeanPostProcessor处理逻辑"></a>BeanPostProcessor处理逻辑</h3><p>Spring-Aop是通过<code>BeanPostProcessor</code>来生成代理类，<code>BeanPostProcessor</code>可以在bean初始化之前和之后做一些修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Apply this BeanPostProcessor to the given new bean instance &lt;i&gt;before&lt;/i&gt; any bean</span></span><br><span class="line"><span class="comment"> * initialization callbacks (like InitializingBean's &lt;code&gt;afterPropertiesSet&lt;/code&gt;</span></span><br><span class="line"><span class="comment"> * or a custom init-method). The bean will already be populated with property values.</span></span><br><span class="line"><span class="comment"> * The returned bean instance may be a wrapper around the original.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bean the new bean instance</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beanName the name of the bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the bean instance to use, either the original or a wrapped one</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> org.springframework.beans.BeansException in case of errors</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.beans.factory.InitializingBean#afterPropertiesSet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Apply this BeanPostProcessor to the given new bean instance &lt;i&gt;after&lt;/i&gt; any bean</span></span><br><span class="line"><span class="comment"> * initialization callbacks (like InitializingBean's &#123;<span class="doctag">@code</span> afterPropertiesSet&#125;</span></span><br><span class="line"><span class="comment"> * or a custom init-method). The bean will already be populated with property values.</span></span><br><span class="line"><span class="comment"> * The returned bean instance may be a wrapper around the original.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;In case of a FactoryBean, this callback will be invoked for both the FactoryBean</span></span><br><span class="line"><span class="comment"> * instance and the objects created by the FactoryBean (as of Spring 2.0). The</span></span><br><span class="line"><span class="comment"> * post-processor can decide whether to apply to either the FactoryBean or created</span></span><br><span class="line"><span class="comment"> * objects or both through corresponding &#123;<span class="doctag">@code</span> bean instanceof FactoryBean&#125; checks.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This callback will also be invoked after a short-circuiting triggered by a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation&#125; method,</span></span><br><span class="line"><span class="comment"> * in contrast to all other BeanPostProcessor callbacks.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bean the new bean instance</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beanName the name of the bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the bean instance to use, either the original or a wrapped one;</span></span><br><span class="line"><span class="comment"> * if &#123;<span class="doctag">@code</span> null&#125;, no subsequent BeanPostProcessors will be invoked</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> org.springframework.beans.BeansException in case of errors</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.beans.factory.InitializingBean#afterPropertiesSet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.beans.factory.FactoryBean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面注册的<code>AnnotationAwareAspectJAutoProxyCreator</code>就间接实现了这个接口，生成对应bean的代理类，继承结构如下：</p><img src="/2021/03/10/spring-aop/image-20210307163021098.png"><p>处理代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator#postProcessBeforeInstantiation</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 用于缓存, 对于之前的Foo.class, 这里就是foo; 如果是FactoryBean，前面会加&amp;用于区分</span></span><br><span class="line">  Object cacheKey = getCacheKey(beanClass, beanName);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!StringUtils.hasLength(beanName) || !<span class="keyword">this</span>.targetSourcedBeans.contains(beanName)) &#123;</span><br><span class="line">    <span class="comment">// 增强过的直接就返回null，</span></span><br><span class="line">    <span class="comment">// @return the bean instance to use, either the original or a wrapped one;</span></span><br><span class="line">  <span class="comment">// if &#123;@code null&#125;, no subsequent BeanPostProcessors will be invoked</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.advisedBeans.containsKey(cacheKey)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Advice, Pointcut, Advisor, AopInfrastructureBean这些类直接跳过</span></span><br><span class="line">    <span class="keyword">if</span> (isInfrastructureClass(beanClass) || shouldSkip(beanClass, beanName)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create proxy here if we have a custom TargetSource.</span></span><br><span class="line">  <span class="comment">// Suppresses unnecessary default instantiation of the target bean:</span></span><br><span class="line">  <span class="comment">// The TargetSource will handle target instances in a custom fashion.</span></span><br><span class="line">  TargetSource targetSource = getCustomTargetSource(beanClass, beanName);</span><br><span class="line">  <span class="keyword">if</span> (targetSource != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasLength(beanName)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.targetSourcedBeans.add(beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(beanClass, beanName, targetSource);</span><br><span class="line">    Object proxy = createProxy(beanClass, beanName, specificInterceptors, targetSource);</span><br><span class="line">    <span class="keyword">this</span>.proxyTypes.put(cacheKey, proxy.getClass());</span><br><span class="line">    <span class="keyword">return</span> proxy;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator#postProcessAfterInitialization</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a proxy with the configured interceptors if the bean is</span></span><br><span class="line"><span class="comment"> * identified as one to proxy by the subclass.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #getAdvicesAndAdvisorsForBean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (bean != <span class="keyword">null</span>) &#123;</span><br><span class="line">    Object cacheKey = getCacheKey(bean.getClass(), beanName);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.earlyProxyReferences.contains(cacheKey)) &#123;</span><br><span class="line">      <span class="keyword">return</span> wrapIfNecessary(bean, beanName, cacheKey);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator#wrapIfNecessary</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Wrap the given bean if necessary, i.e. if it is eligible for being proxied.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bean the raw bean instance</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beanName the name of the bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cacheKey the cache key for metadata access</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> a proxy wrapping the bean, or the raw bean instance as-is</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">wrapIfNecessary</span><span class="params">(Object bean, String beanName, Object cacheKey)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (beanName != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.targetSourcedBeans.contains(beanName)) &#123;</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (Boolean.FALSE.equals(<span class="keyword">this</span>.advisedBeans.get(cacheKey))) &#123;</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) &#123;</span><br><span class="line">    <span class="keyword">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create proxy if we have advice.</span></span><br><span class="line">  <span class="comment">// 这里就会找到performanceTraceAspect</span></span><br><span class="line">  Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, <span class="keyword">null</span>);</span><br><span class="line">  <span class="keyword">if</span> (specificInterceptors != DO_NOT_PROXY) &#123;</span><br><span class="line">    <span class="comment">// 记录增强过的类</span></span><br><span class="line">    <span class="keyword">this</span>.advisedBeans.put(cacheKey, Boolean.TRUE);</span><br><span class="line">    <span class="comment">// 创建代理</span></span><br><span class="line">    Object proxy = createProxy(</span><br><span class="line">      bean.getClass(), beanName, specificInterceptors, <span class="keyword">new</span> SingletonTargetSource(bean));</span><br><span class="line">   <span class="comment">// 记录代理类</span></span><br><span class="line">    <span class="keyword">this</span>.proxyTypes.put(cacheKey, proxy.getClass());</span><br><span class="line">    <span class="comment">// 用代理类替代原始的类</span></span><br><span class="line">    <span class="keyword">return</span> proxy;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 记录无需增强的类</span></span><br><span class="line">  <span class="keyword">this</span>.advisedBeans.put(cacheKey, Boolean.FALSE);</span><br><span class="line">  <span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建代理类主要的步骤有两步，第一步是找到满足条件的Advice和Advisor，第二步是创建代理类。</p><h4 id="获取Advisor"><a href="#获取Advisor" class="headerlink" title="获取Advisor"></a>获取Advisor</h4><p>这里的<code>getAdvicesAndAdvisorsForBean</code>是一个抽象方法，子类可以覆盖整个方法，实现自己的查找策略：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator#getAdvicesAndAdvisorsForBean</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Object[] getAdvicesAndAdvisorsForBean(Class&lt;?&gt; beanClass, String beanName, TargetSource targetSource) &#123;</span><br><span class="line">  List&lt;Advisor&gt; advisors = findEligibleAdvisors(beanClass, beanName);</span><br><span class="line">  <span class="keyword">if</span> (advisors.isEmpty()) &#123;</span><br><span class="line">    <span class="keyword">return</span> DO_NOT_PROXY;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> advisors.toArray();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Find all eligible Advisors for auto-proxying this class.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beanClass the clazz to find advisors for</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> beanName the name of the currently proxied bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the empty List, not &#123;<span class="doctag">@code</span> null&#125;,</span></span><br><span class="line"><span class="comment"> * if there are no pointcuts or interceptors</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #findCandidateAdvisors</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #sortAdvisors</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #extendAdvisors</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;Advisor&gt; <span class="title">findEligibleAdvisors</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> </span>&#123;</span><br><span class="line"> <span class="comment">// 找出当前beanFactory中的所有的Advisor</span></span><br><span class="line">  List&lt;Advisor&gt; candidateAdvisors = findCandidateAdvisors();</span><br><span class="line">  <span class="comment">// 筛选出能用于当前beanClass的Advisor</span></span><br><span class="line">  List&lt;Advisor&gt; eligibleAdvisors = findAdvisorsThatCanApply(candidateAdvisors, beanClass, beanName);</span><br><span class="line">  <span class="comment">// 扩展点</span></span><br><span class="line">  extendAdvisors(eligibleAdvisors);</span><br><span class="line">  <span class="keyword">if</span> (!eligibleAdvisors.isEmpty()) &#123;</span><br><span class="line">    <span class="comment">// 按照@Order定义的优先级排序</span></span><br><span class="line">    eligibleAdvisors = sortAdvisors(eligibleAdvisors);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> eligibleAdvisors;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Find all candidate Advisors to use in auto-proxying.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the List of candidate Advisors</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;Advisor&gt; <span class="title">findCandidateAdvisors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.advisorRetrievalHelper.findAdvisorBeans();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.aop.framework.autoproxy.BeanFactoryAdvisorRetrievalHelper#findAdvisorBeans</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Find all eligible Advisor beans in the current bean factory,</span></span><br><span class="line"><span class="comment"> * ignoring FactoryBeans and excluding beans that are currently in creation.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the list of &#123;<span class="doctag">@link</span> org.springframework.aop.Advisor&#125; beans</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #isEligibleBean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Advisor&gt; <span class="title">findAdvisorBeans</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Determine list of advisor bean names, if not cached already.</span></span><br><span class="line">  String[] advisorNames = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">    <span class="comment">// 有缓存</span></span><br><span class="line">    advisorNames = <span class="keyword">this</span>.cachedAdvisorBeanNames;</span><br><span class="line">    <span class="keyword">if</span> (advisorNames == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span></span><br><span class="line">      <span class="comment">// uninitialized to let the auto-proxy creator apply to them!</span></span><br><span class="line">      advisorNames = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(</span><br><span class="line">        <span class="keyword">this</span>.beanFactory, Advisor<span class="class">.<span class="keyword">class</span>, <span class="title">true</span>, <span class="title">false</span>)</span>;</span><br><span class="line">      <span class="keyword">this</span>.cachedAdvisorBeanNames = advisorNames;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (advisorNames.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LinkedList&lt;Advisor&gt;();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  List&lt;Advisor&gt; advisors = <span class="keyword">new</span> LinkedList&lt;Advisor&gt;();</span><br><span class="line">  <span class="comment">// 遍历所有的advisor</span></span><br><span class="line">  <span class="keyword">for</span> (String name : advisorNames) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isEligibleBean(name)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory.isCurrentlyInCreation(name)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">          logger.debug(<span class="string">"Skipping currently created advisor '"</span> + name + <span class="string">"'"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          advisors.add(<span class="keyword">this</span>.beanFactory.getBean(name, Advisor<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (BeanCreationException ex) &#123;</span><br><span class="line">          Throwable rootCause = ex.getMostSpecificCause();</span><br><span class="line">          <span class="keyword">if</span> (rootCause <span class="keyword">instanceof</span> BeanCurrentlyInCreationException) &#123;</span><br><span class="line">            BeanCreationException bce = (BeanCreationException) rootCause;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory.isCurrentlyInCreation(bce.getBeanName())) &#123;</span><br><span class="line">              <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="string">"Skipping advisor '"</span> + name +</span><br><span class="line">                             <span class="string">"' with dependency on currently created bean: "</span> + ex.getMessage());</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="comment">// Ignore: indicates a reference back to the bean we're trying to advise.</span></span><br><span class="line">              <span class="comment">// We want to find advisors other than the currently created bean itself.</span></span><br><span class="line">              <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> advisors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AnnotationAwareAspectJAutoProxyCreator</code>中重写了<code>findCandidateAdvisors</code>方法，调用了父类的<code>findCandidateAdvisors</code>,也加上了自己的特化逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator#findCandidateAdvisors</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> List&lt;Advisor&gt; <span class="title">findCandidateAdvisors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 上述的逻辑，从beanFactory中查找advisor</span></span><br><span class="line"><span class="comment">// Add all the Spring advisors found according to superclass rules.</span></span><br><span class="line">List&lt;Advisor&gt; advisors = <span class="keyword">super</span>.findCandidateAdvisors();</span><br><span class="line">    <span class="comment">// AnnotationAwareAspectJAutoProxyCreator自己的逻辑</span></span><br><span class="line"><span class="comment">// Build Advisors for all AspectJ aspects in the bean factory.</span></span><br><span class="line">advisors.addAll(<span class="keyword">this</span>.aspectJAdvisorsBuilder.buildAspectJAdvisors());</span><br><span class="line"><span class="keyword">return</span> advisors;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.aop.aspectj.annotation.BeanFactoryAspectJAdvisorsBuilder#buildAspectJAdvisors</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Look for AspectJ-annotated aspect beans in the current bean factory,</span></span><br><span class="line"><span class="comment"> * and return to a list of Spring AOP Advisors representing them.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Creates a Spring Advisor for each AspectJ advice method.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the list of &#123;<span class="doctag">@link</span> org.springframework.aop.Advisor&#125; beans</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #isEligibleBean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Advisor&gt; <span class="title">buildAspectJAdvisors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  List&lt;String&gt; aspectNames = <span class="keyword">this</span>.aspectBeanNames;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (aspectNames == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">      aspectNames = <span class="keyword">this</span>.aspectBeanNames;</span><br><span class="line">      <span class="keyword">if</span> (aspectNames == <span class="keyword">null</span>) &#123;</span><br><span class="line">        List&lt;Advisor&gt; advisors = <span class="keyword">new</span> LinkedList&lt;Advisor&gt;();</span><br><span class="line">        aspectNames = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        <span class="comment">// 这里传入的是Object类，和上面传入的Advisor类不同</span></span><br><span class="line">        String[] beanNames = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(</span><br><span class="line">          <span class="keyword">this</span>.beanFactory, Object<span class="class">.<span class="keyword">class</span>, <span class="title">true</span>, <span class="title">false</span>)</span>;</span><br><span class="line">        <span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!isEligibleBean(beanName)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// We must be careful not to instantiate beans eagerly as in this case they</span></span><br><span class="line">          <span class="comment">// would be cached by the Spring container but would not have been weaved.</span></span><br><span class="line">          Class&lt;?&gt; beanType = <span class="keyword">this</span>.beanFactory.getType(beanName);</span><br><span class="line">          <span class="keyword">if</span> (beanType == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 是否是切面类，一般需要有@Aspect标记</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">this</span>.advisorFactory.isAspect(beanType)) &#123;</span><br><span class="line">            aspectNames.add(beanName);</span><br><span class="line">            AspectMetadata amd = <span class="keyword">new</span> AspectMetadata(beanType, beanName);</span><br><span class="line">            <span class="keyword">if</span> (amd.getAjType().getPerClause().getKind() == PerClauseKind.SINGLETON) &#123;</span><br><span class="line">              <span class="comment">// 根据标记的类生成Advisor</span></span><br><span class="line">              MetadataAwareAspectInstanceFactory factory =</span><br><span class="line">                <span class="keyword">new</span> BeanFactoryAspectInstanceFactory(<span class="keyword">this</span>.beanFactory, beanName);</span><br><span class="line">              List&lt;Advisor&gt; classAdvisors = <span class="keyword">this</span>.advisorFactory.getAdvisors(factory);</span><br><span class="line">              <span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory.isSingleton(beanName)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.advisorsCache.put(beanName, classAdvisors);</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.aspectFactoryCache.put(beanName, factory);</span><br><span class="line">              &#125;</span><br><span class="line">              advisors.addAll(classAdvisors);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">// Per target or per this.</span></span><br><span class="line">              <span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory.isSingleton(beanName)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Bean with name '"</span> + beanName +</span><br><span class="line">                                                   <span class="string">"' is a singleton, but aspect instantiation model is not singleton"</span>);</span><br><span class="line">              &#125;</span><br><span class="line">              MetadataAwareAspectInstanceFactory factory =</span><br><span class="line">                <span class="keyword">new</span> PrototypeAspectInstanceFactory(<span class="keyword">this</span>.beanFactory, beanName);</span><br><span class="line">              <span class="keyword">this</span>.aspectFactoryCache.put(beanName, factory);</span><br><span class="line">              advisors.addAll(<span class="keyword">this</span>.advisorFactory.getAdvisors(factory));</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.aspectBeanNames = aspectNames;</span><br><span class="line">        <span class="keyword">return</span> advisors;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="comment">// 初始化缓存的逻辑</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (aspectNames.isEmpty()) &#123;</span><br><span class="line">    <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">  &#125;</span><br><span class="line">  List&lt;Advisor&gt; advisors = <span class="keyword">new</span> LinkedList&lt;Advisor&gt;();</span><br><span class="line">  <span class="keyword">for</span> (String aspectName : aspectNames) &#123;</span><br><span class="line">    List&lt;Advisor&gt; cachedAdvisors = <span class="keyword">this</span>.advisorsCache.get(aspectName);</span><br><span class="line">    <span class="keyword">if</span> (cachedAdvisors != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 从缓存里直接取的逻辑</span></span><br><span class="line">      advisors.addAll(cachedAdvisors);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 新生成Advisor</span></span><br><span class="line">      MetadataAwareAspectInstanceFactory factory = <span class="keyword">this</span>.aspectFactoryCache.get(aspectName);</span><br><span class="line">      advisors.addAll(<span class="keyword">this</span>.advisorFactory.getAdvisors(factory));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> advisors;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="生成代理类"><a href="#生成代理类" class="headerlink" title="生成代理类"></a>生成代理类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator#createProxy</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">createProxy</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">  Class&lt;?&gt; beanClass, String beanName, Object[] specificInterceptors, TargetSource targetSource)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory <span class="keyword">instanceof</span> ConfigurableListableBeanFactory) &#123;</span><br><span class="line">    <span class="comment">// 可以通过determineTargetClass获取被代理的类</span></span><br><span class="line">    AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) <span class="keyword">this</span>.beanFactory, beanName, beanClass);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ProxyFactory proxyFactory = <span class="keyword">new</span> ProxyFactory();</span><br><span class="line">  proxyFactory.copyFrom(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!proxyFactory.isProxyTargetClass()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (shouldProxyTargetClass(beanClass, beanName)) &#123;</span><br><span class="line">      proxyFactory.setProxyTargetClass(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      evaluateProxyInterfaces(beanClass, proxyFactory);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Advisor[] advisors = buildAdvisors(beanName, specificInterceptors);</span><br><span class="line">  <span class="keyword">for</span> (Advisor advisor : advisors) &#123;</span><br><span class="line">    proxyFactory.addAdvisor(advisor);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  proxyFactory.setTargetSource(targetSource);</span><br><span class="line">  customizeProxyFactory(proxyFactory);</span><br><span class="line"></span><br><span class="line">  proxyFactory.setFrozen(<span class="keyword">this</span>.freezeProxy);</span><br><span class="line">  <span class="keyword">if</span> (advisorsPreFiltered()) &#123;</span><br><span class="line">    proxyFactory.setPreFiltered(<span class="keyword">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> proxyFactory.getProxy(getProxyClassLoader());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取代理的过程和测试代码中的步骤一致：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">final</span> AspectJProxyFactory aspectJProxyFactory = <span class="keyword">new</span> AspectJProxyFactory();</span><br><span class="line">aspectJProxyFactory.setProxyTargetClass(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 设置target</span></span><br><span class="line">aspectJProxyFactory.setTarget(<span class="keyword">new</span> Foo());</span><br><span class="line"><span class="comment">// 设置aspect</span></span><br><span class="line">aspectJProxyFactory.addAspect(PerformanceTraceAspect<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">Foo proxy = (Foo)aspectJProxyFactory.getProxy();</span><br><span class="line">log.info(<span class="string">"foo class is &#123;&#125;"</span>, proxy.getClass().getSimpleName());</span><br><span class="line">proxy.hello1();</span><br><span class="line">proxy.hello2();</span><br></pre></td></tr></table></figure><p>具体是JDK代理，还是CGLIB字节码增强，要看ProxyFactory</p><img src="/2021/03/10/spring-aop/image-20210307210031053.png"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.aop.framework.ProxyFactory#getProxy(java.lang.ClassLoader)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">(ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> createAopProxy().getProxy(classLoader);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> AopProxy <span class="title">createAopProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.active) &#123;</span><br><span class="line">    activate();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> getAopProxyFactory().createAopProxy(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.aop.framework.AopProxyFactory</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AopProxyFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create an &#123;<span class="doctag">@link</span> AopProxy&#125; for the given AOP configuration.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> config the AOP configuration in the form of an</span></span><br><span class="line"><span class="comment"> * AdvisedSupport object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the corresponding AOP proxy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> AopConfigException if the configuration is invalid</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">AopProxy <span class="title">createAopProxy</span><span class="params">(AdvisedSupport config)</span> <span class="keyword">throws</span> AopConfigException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//唯一的实现 org.springframework.aop.framework.DefaultAopProxyFactory</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AopProxy <span class="title">createAopProxy</span><span class="params">(AdvisedSupport config)</span> <span class="keyword">throws</span> AopConfigException </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) &#123;</span><br><span class="line">    Class&lt;?&gt; targetClass = config.getTargetClass();</span><br><span class="line">    <span class="keyword">if</span> (targetClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">"TargetSource cannot determine target class: "</span> +</span><br><span class="line">                                   <span class="string">"Either an interface or a target is required for proxy creation."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 实现了接口的，或者已经是JDK代理类</span></span><br><span class="line">    <span class="keyword">if</span> (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> JdkDynamicAopProxy(config);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// CglibAopProxy 代理的子类</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ObjenesisCglibAopProxy(config);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> JdkDynamicAopProxy(config);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AopProxy</code>的继承关系，ProxyFactory也实现了这个接口。</p><img src="/2021/03/10/spring-aop/image-20210307205728646.png"><h3 id="TargetSource"><a href="#TargetSource" class="headerlink" title="TargetSource"></a>TargetSource</h3><p>spring的代理其实是三层的：</p><p>cglib/jdk proxy  -&gt; targetSource -&gt; target</p><p>targetSource封装了获取target的逻辑，比如实现对象池化的<code>CommonsPool2TargetSource</code>、热修改的<code>HotSwappableTargetSource</code>;也可以扩展这个类，实现自己的获取逻辑。</p><h4 id="HotSwappableTargetSource"><a href="#HotSwappableTargetSource" class="headerlink" title="HotSwappableTargetSource"></a>HotSwappableTargetSource</h4><p>多了个swap的逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Swap the target, returning the old target object.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> newTarget the new target object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the old target object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if the new target is invalid</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Object <span class="title">swap</span><span class="params">(Object newTarget)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">  Assert.notNull(newTarget, <span class="string">"Target object must not be null"</span>);</span><br><span class="line">  Object old = <span class="keyword">this</span>.target;</span><br><span class="line">  <span class="keyword">this</span>.target = newTarget;</span><br><span class="line">  <span class="keyword">return</span> old;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有点类似jdk的<code>AtomicReference</code>，使用如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ProxyFactoryBean <span class="title">barFactory</span><span class="params">(HotSwappableTargetSource hotSwappableTargetSource)</span> </span>&#123;</span><br><span class="line">  ProxyFactoryBean pfb = <span class="keyword">new</span> ProxyFactoryBean();</span><br><span class="line">  pfb.setTargetSource(hotSwappableTargetSource);</span><br><span class="line">  pfb.setSingleton(<span class="keyword">false</span>);</span><br><span class="line">  <span class="keyword">return</span> pfb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"barTarget"</span>)</span><br><span class="line"><span class="meta">@Scope</span>(value = SCOPE_PROTOTYPE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Bar <span class="title">barTarget</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Bar(System.nanoTime());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> HotSwappableTargetSource <span class="title">hotSwappableTargetSource</span><span class="params">(Bar bar)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> HotSwappableTargetSource hotSwappableTargetSource = <span class="keyword">new</span> HotSwappableTargetSource(bar);</span><br><span class="line">  <span class="keyword">return</span> hotSwappableTargetSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHotSwap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(AopConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="keyword">final</span> HotSwappableTargetSource swapper = context.getBean(HotSwappableTargetSource<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="keyword">final</span> Hello bar = context.getBean(<span class="string">"barFactory"</span>, Hello<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="comment">// 2021-03-08 17:13:39.308[main][INFO ]c.a.s.a.Bar.sayHello:22 hello...327431205655481</span></span><br><span class="line">  bar.sayHello();</span><br><span class="line">  <span class="comment">// 替换类</span></span><br><span class="line">  swapper.swap(<span class="keyword">new</span> Bar(System.nanoTime()));</span><br><span class="line">  <span class="comment">// 2021-03-08 17:13:39.308[main][INFO ]c.a.s.a.Bar.sayHello:22 hello...327431263396408</span></span><br><span class="line">  bar.sayHello();</span><br><span class="line">  <span class="comment">// 2021-03-08 17:13:39.309[main][INFO ]c.a.s.a.Bar.sayHello:22 hello...327431263396408</span></span><br><span class="line">  bar.sayHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CommonsPool2TargetSource"><a href="#CommonsPool2TargetSource" class="headerlink" title="CommonsPool2TargetSource"></a>CommonsPool2TargetSource</h4><p>底层是apache的对象池，<code>getTarget</code>时是从对象池中取，在<code>releaseTarget</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.aop.target.CommonsPool2TargetSource#releaseTarget</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the specified object to the underlying &#123;<span class="doctag">@code</span> ObjectPool&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">releaseTarget</span><span class="params">(Object target)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.pool.returnObject(target);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.aop.target.CommonsPool2TargetSource#getTarget</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Borrows an object from the &#123;<span class="doctag">@code</span> ObjectPool&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getTarget</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.pool.borrowObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意对象池的一些超时设置，比如<code>maxWait</code>等，防止业务hang住。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 代故</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/7 1:18 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span>(proxyTargetClass = <span class="keyword">true</span>)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProxyFactoryBean <span class="title">barFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ProxyFactoryBean pfb = <span class="keyword">new</span> ProxyFactoryBean();</span><br><span class="line">        pfb.setTargetSource(poolTargetSource());</span><br><span class="line">        pfb.setSingleton(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> pfb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"barTarget"</span>)</span><br><span class="line">    <span class="meta">@Scope</span>(value = SCOPE_PROTOTYPE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bar <span class="title">barTarget</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Bar(System.nanoTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CommonsPool2TargetSource <span class="title">poolTargetSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> CommonsPool2TargetSource targetSource = <span class="keyword">new</span> CommonsPool2TargetSource();</span><br><span class="line">        targetSource.setMaxSize(<span class="number">2</span>);</span><br><span class="line">        targetSource.setMaxWait(<span class="number">500</span>);</span><br><span class="line">        targetSource.setTargetBeanName(<span class="string">"barTarget"</span>);</span><br><span class="line">        targetSource.setTargetClass(Bar<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> targetSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试获取对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCustomTargetSource</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(AopConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="keyword">final</span> ThreadFactory threadFactory = <span class="keyword">new</span> ThreadFactoryBuilder().setUncaughtExceptionHandler(</span><br><span class="line">    (Thread t, Throwable e) -&gt; &#123;</span><br><span class="line">      <span class="comment">// submit返回的是future，抛异常了，也是在Future get的时候抛的</span></span><br><span class="line">      <span class="comment">// execute没有返回值，如果异常了，就进到这里了</span></span><br><span class="line">      log.error(<span class="string">"thread &#123;&#125; throws exception &#123;&#125;"</span>, t.getName(), e);</span><br><span class="line">    &#125;)</span><br><span class="line">    .build();</span><br><span class="line">  ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">5</span>, <span class="number">5</span>, <span class="number">60</span>,</span><br><span class="line">                                                       TimeUnit.SECONDS, <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">30</span>), threadFactory);</span><br><span class="line">  executor.execute(() -&gt; actionCGLIB(context));</span><br><span class="line">  executor.execute(() -&gt; actionCGLIB(context));</span><br><span class="line">  executor.execute(() -&gt; actionCGLIB(context));</span><br><span class="line">  executor.execute(() -&gt; actionCGLIB(context));</span><br><span class="line">  executor.shutdown();</span><br><span class="line">  <span class="comment">//        actionCGLIB(context);</span></span><br><span class="line">  executor.awaitTermination(<span class="number">6000000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">  TimeUnit.SECONDS.sleep(<span class="number">30</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">actionCGLIB</span><span class="params">(AnnotationConfigApplicationContext context)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Bar bar1 = ((Bar)context.getBean(<span class="string">"barFactory"</span>));</span><br><span class="line">  log.info(<span class="string">"bar1 = "</span> + bar1.hashCode() + <span class="string">", className="</span> + bar1.getClass());</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    bar1.sayHello();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">    log.error(<span class="string">"say hello exception"</span>, t);</span><br><span class="line">    <span class="keyword">throw</span> t;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2021-03-08 17:41:13.137[pool-2-thread-3][INFO ]c.a.s.a.AopTest.action:91 bar1 = -1196711332, className=class com.sun.proxy.<span class="variable">$Proxy23</span></span><br><span class="line">2021-03-08 17:41:13.137[pool-2-thread-1][INFO ]c.a.s.a.AopTest.action:91 bar1 = -1196711332, className=class com.sun.proxy.<span class="variable">$Proxy23</span></span><br><span class="line">2021-03-08 17:41:13.137[pool-2-thread-2][INFO ]c.a.s.a.AopTest.action:91 bar1 = -1196711332, className=class com.sun.proxy.<span class="variable">$Proxy23</span></span><br><span class="line">2021-03-08 17:41:13.137[pool-2-thread-4][INFO ]c.a.s.a.AopTest.action:91 bar1 = -1196711332, className=class com.sun.proxy.<span class="variable">$Proxy23</span></span><br><span class="line">2021-03-08 17:41:23.143[pool-2-thread-2][INFO ]c.a.s.a.Bar.sayHello:22 hello...329095160261362</span><br><span class="line">2021-03-08 17:41:23.143[pool-2-thread-3][INFO ]c.a.s.a.Bar.sayHello:22 hello...329095160261350</span><br><span class="line">2021-03-08 17:41:23.146[pool-2-thread-1][INFO ]c.a.s.a.Bar.sayHello:22 hello...329095160261350</span><br><span class="line">2021-03-08 17:41:23.147[pool-2-thread-4][INFO ]c.a.s.a.Bar.sayHello:22 hello...329095160261362</span><br></pre></td></tr></table></figure><p>每次获取到的都是<code>ProxyFactoryBean</code>, 在每次调用具体的方法时，<code>ProxyFactoryBean</code>会调用底层的<code>TargetSource</code>来获取<code>Target</code>（这里就是<code>CommonsPool2TargetSource</code>）。<code>CommonsPool2TargetSource</code>会从持有的对象池中复用对象。典型的应用场景就是spring的状态机，使用完之后可以放入对象池中，避免频繁创建对象的开销。</p><p>spring提供了Advisor来获取对象池的状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MethodInvokingFactoryBean <span class="title">poolConfigAdvisor</span><span class="params">(CommonsPool2TargetSource pool2TargetSource)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> MethodInvokingFactoryBean factoryBean = <span class="keyword">new</span> MethodInvokingFactoryBean();</span><br><span class="line">  factoryBean.setTargetObject(pool2TargetSource);</span><br><span class="line">  factoryBean.setTargetMethod(<span class="string">"getPoolingConfigMixin"</span>);</span><br><span class="line">  <span class="keyword">return</span> factoryBean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ProxyFactoryBean <span class="title">barFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ProxyFactoryBean pfb = <span class="keyword">new</span> ProxyFactoryBean();</span><br><span class="line">  pfb.setTargetSource(poolTargetSource());</span><br><span class="line">  pfb.setSingleton(<span class="keyword">false</span>);</span><br><span class="line">  <span class="comment">// 配置interceptor的bean名称</span></span><br><span class="line">  pfb.setInterceptorNames(<span class="string">"poolConfigAdvisor"</span>);</span><br><span class="line">  <span class="keyword">return</span> pfb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span>(name = <span class="string">"barTarget"</span>)</span><br><span class="line"><span class="meta">@Scope</span>(value = SCOPE_PROTOTYPE)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Bar <span class="title">barTarget</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Bar(System.nanoTime());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonsPool2TargetSource <span class="title">poolTargetSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> CommonsPool2TargetSource targetSource = <span class="keyword">new</span> CommonsPool2TargetSource();</span><br><span class="line">  targetSource.setMaxSize(<span class="number">2</span>);</span><br><span class="line">  targetSource.setMaxWait(<span class="number">500</span>);</span><br><span class="line">  targetSource.setTargetBeanName(<span class="string">"barTarget"</span>);</span><br><span class="line">  targetSource.setTargetClass(Bar<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="keyword">return</span> targetSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPooling</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(AopConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  PoolingConfig poolingConfig = (PoolingConfig)context.getBean(<span class="string">"barFactory"</span>);</span><br><span class="line">  log.info(<span class="string">"pooling config is active=&#123;&#125;, max=&#123;&#125;"</span>, poolingConfig.getActiveCount(), poolingConfig.getMaxSize());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MethodInvokingFactoryBean</code>会把目标对象（targetObject）方法（targetMethod）的返回值，作为bean实例；就是<code>CommonsPool2TargetSource#getPoolingConfigMixin</code>的返回值<code>DefaultIntroductionAdvisor</code>, 会被交给spring管理（相当于是<strong>factory-method</strong>的特化）。另外<code>DelegatingIntroductionInterceptor</code>实现了<code>IntroductionInterceptor</code>是per 实例的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return an IntroductionAdvisor that providing a mixin</span></span><br><span class="line"><span class="comment"> * exposing statistics about the pool maintained by this object.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DefaultIntroductionAdvisor <span class="title">getPoolingConfigMixin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  DelegatingIntroductionInterceptor dii = <span class="keyword">new</span> DelegatingIntroductionInterceptor(<span class="keyword">this</span>);</span><br><span class="line">  <span class="comment">// 这个advisor的作用就是给生成的Target加了个接口PoolingConfig.class，这样后面拿到target之后就可以强转了</span></span><br><span class="line">  <span class="comment">// 调用PoolingConfig接口中的方法就会给代理到当前的TargetSource</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> DefaultIntroductionAdvisor(dii, PoolingConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拿到的代理对象实现了<code>PoolingConfig</code>接口，对应的调用就转到了<code>TargetSource</code>上</p><img src="/2021/03/10/spring-aop/image-20210309154235213.png"><h3 id="Jdk代理"><a href="#Jdk代理" class="headerlink" title="Jdk代理"></a>Jdk代理</h3><h4 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h4><p>静态代理需要自己写代理类，实现接口，然后代理方法委托给底层的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by KL on 2015/12/8.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Greeting</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by KL on 2015/12/8.</span></span><br><span class="line"><span class="comment"> * 具体的实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreetingImpl</span> <span class="keyword">implements</span> <span class="title">Greeting</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手动创建代理类</span></span><br><span class="line"><span class="comment"> * Created by KL on 2015/12/8.</span></span><br><span class="line"><span class="comment"> * static proxy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreetingProxy</span> <span class="keyword">implements</span> <span class="title">Greeting</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Greeting greetingImpl;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GreetingProxy</span><span class="params">(Greeting greetingImpl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.greetingImpl = greetingImpl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        before();</span><br><span class="line">      <span class="comment">// 具体的调用委托给底层的实现</span></span><br><span class="line">        greetingImpl.sayHello(name);</span><br><span class="line">        after();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"after"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><p>动态代理需要用到JDK提供的<code>InvocationHandler</code>接口, </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java.lang.reflect.InvocationHandler</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> Throwable</span>;</span><br></pre></td></tr></table></figure><p>实现代理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by KL on 2015/12/8.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreetingDynamicProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GreetingDynamicProxy</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取代理类</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T) Proxy.newProxyInstance(</span><br><span class="line">                target.getClass().getClassLoader(),</span><br><span class="line">                target.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">this</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用对应的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        before();</span><br><span class="line">        Object result = method.invoke(target,args);</span><br><span class="line">        after();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Before"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"After"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test dynamic proxy</span></span><br><span class="line">Greeting greeting = <span class="keyword">new</span> GreetingDynamicProxy(<span class="keyword">new</span> GreetingImpl()).getProxy();</span><br><span class="line">greeting.sayHello(<span class="string">"haha!"</span>);</span><br></pre></td></tr></table></figure><p>使用arthas查看生成的代理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">[arthas@<span class="number">61770</span>]$ jad com.sun.proxy.\\$Proxy0</span><br><span class="line"></span><br><span class="line">ClassLoader:</span><br><span class="line">+-sun.misc.Launcher$AppClassLoader@<span class="number">18</span>b4aac2</span><br><span class="line">  +-sun.misc.Launcher$ExtClassLoader@<span class="number">3429535</span>c</span><br><span class="line"></span><br><span class="line">Location:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Decompiled with CFR.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Could not load the following classes:</span></span><br><span class="line"><span class="comment"> *  com.air.proxy.Greeting</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> com.sun.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.air.proxy.Greeting;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> $<span class="title">Proxy0</span> <span class="keyword">extends</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Greeting</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler invocationHandler) &#123;</span><br><span class="line">        <span class="keyword">super</span>(invocationHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Boolean)<span class="keyword">this</span>.h.invoke(<span class="keyword">this</span>, m1, <span class="keyword">new</span> Object[]&#123;object&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 实现的接口方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String string)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// h就是invocationHandler</span></span><br><span class="line">            <span class="comment">// m3就是sayHello方法</span></span><br><span class="line">            <span class="keyword">this</span>.h.invoke(<span class="keyword">this</span>, m3, <span class="keyword">new</span> Object[]&#123;string&#125;);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="keyword">this</span>.h.invoke(<span class="keyword">this</span>, m2, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="keyword">this</span>.h.invoke(<span class="keyword">this</span>, m0, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"equals"</span>, Class.forName(<span class="string">"java.lang.Object"</span>));</span><br><span class="line">            m3 = Class.forName(<span class="string">"com.air.proxy.Greeting"</span>).getMethod(<span class="string">"sayHello"</span>, Class.forName(<span class="string">"java.lang.String"</span>));</span><br><span class="line">            m2 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"toString"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">            m0 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"hashCode"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchMethodException noSuchMethodException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError(noSuchMethodException.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ClassNotFoundException classNotFoundException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoClassDefFoundError(classNotFoundException.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Affect(row-cnt:<span class="number">1</span>) cost in <span class="number">907</span> ms.</span><br></pre></td></tr></table></figure><h4 id="JdkDynamicAopProxy"><a href="#JdkDynamicAopProxy" class="headerlink" title="JdkDynamicAopProxy"></a>JdkDynamicAopProxy</h4><p>创建代理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.aop.framework.JdkDynamicAopProxy#getProxy(java.lang.ClassLoader)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">(ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">    logger.debug(<span class="string">"Creating JDK dynamic proxy: target source is "</span> + <span class="keyword">this</span>.advised.getTargetSource());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 查找实现的接口</span></span><br><span class="line">  Class&lt;?&gt;[] proxiedInterfaces = AopProxyUtils.completeProxiedInterfaces(<span class="keyword">this</span>.advised, <span class="keyword">true</span>);</span><br><span class="line">  findDefinedEqualsAndHashCodeMethods(proxiedInterfaces);</span><br><span class="line">  <span class="comment">// 生成代理类</span></span><br><span class="line">  <span class="keyword">return</span> Proxy.newProxyInstance(classLoader, proxiedInterfaces, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.aop.framework.JdkDynamicAopProxy#invoke</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implementation of &#123;<span class="doctag">@code</span> InvocationHandler.invoke&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Callers will see exactly the exception thrown by the target,</span></span><br><span class="line"><span class="comment"> * unless a hook method throws an exception.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">  MethodInvocation invocation;</span><br><span class="line">  Object oldProxy = <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">boolean</span> setProxyContext = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  TargetSource targetSource = <span class="keyword">this</span>.advised.targetSource;</span><br><span class="line">  Class&lt;?&gt; targetClass = <span class="keyword">null</span>;</span><br><span class="line">  Object target = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.equalsDefined &amp;&amp; AopUtils.isEqualsMethod(method)) &#123;</span><br><span class="line">      <span class="comment">// The target does not implement the equals(Object) method itself.</span></span><br><span class="line">      <span class="keyword">return</span> equals(args[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>.hashCodeDefined &amp;&amp; AopUtils.isHashCodeMethod(method)) &#123;</span><br><span class="line">      <span class="comment">// The target does not implement the hashCode() method itself.</span></span><br><span class="line">      <span class="keyword">return</span> hashCode();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (method.getDeclaringClass() == DecoratingProxy<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// There is only getDecoratedClass() declared -&gt; dispatch to proxy config.</span></span><br><span class="line">      <span class="keyword">return</span> AopProxyUtils.ultimateTargetClass(<span class="keyword">this</span>.advised);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="keyword">this</span>.advised.opaque &amp;&amp; method.getDeclaringClass().isInterface() &amp;&amp;</span><br><span class="line">             method.getDeclaringClass().isAssignableFrom(Advised<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">      <span class="comment">// Service invocations on ProxyConfig with the proxy config...</span></span><br><span class="line">      <span class="keyword">return</span> AopUtils.invokeJoinpointUsingReflection(<span class="keyword">this</span>.advised, method, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object retVal;</span><br><span class="line"><span class="comment">// 暴露代理类</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.advised.exposeProxy) &#123;</span><br><span class="line">      <span class="comment">// Make invocation available if necessary.</span></span><br><span class="line">      oldProxy = AopContext.setCurrentProxy(proxy);</span><br><span class="line">      setProxyContext = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// May be null. Get as late as possible to minimize the time we "own" the target,</span></span><br><span class="line">    <span class="comment">// in case it comes from a pool.</span></span><br><span class="line">    <span class="comment">// 从targetSource获取对应的信息</span></span><br><span class="line">    target = targetSource.getTarget();</span><br><span class="line">    <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">      targetClass = target.getClass();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get the interception chain for this method.</span></span><br><span class="line">    <span class="comment">// 获取针对targetClass的MethodInterceptor, @Aspect等声明的会在这个chain中</span></span><br><span class="line">    List&lt;Object&gt; chain = <span class="keyword">this</span>.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check whether we have any advice. If we don't, we can fallback on direct</span></span><br><span class="line">    <span class="comment">// reflective invocation of the target, and avoid creating a MethodInvocation.</span></span><br><span class="line">    <span class="keyword">if</span> (chain.isEmpty()) &#123;</span><br><span class="line">      <span class="comment">// 没有advised的，就直接用普通的jdk代理</span></span><br><span class="line">      <span class="comment">// We can skip creating a MethodInvocation: just invoke the target directly</span></span><br><span class="line">      <span class="comment">// Note that the final invoker must be an InvokerInterceptor so we know it does</span></span><br><span class="line">      <span class="comment">// nothing but a reflective operation on the target, and no hot swapping or fancy proxying.</span></span><br><span class="line">      Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args);</span><br><span class="line">      retVal = AopUtils.invokeJoinpointUsingReflection(target, method, argsToUse);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 包装成ReflectiveMethodInvocation，</span></span><br><span class="line">      <span class="comment">// ReflectiveMethodInvocation类似filterChain，内部有状态记录处理到第几个，递归调用，使每个Interceptor都能执行</span></span><br><span class="line">      <span class="comment">// We need to create a method invocation...</span></span><br><span class="line">      invocation = <span class="keyword">new</span> ReflectiveMethodInvocation(proxy, target, method, args, targetClass, chain);</span><br><span class="line">      <span class="comment">// Proceed to the joinpoint through the interceptor chain.</span></span><br><span class="line">      retVal = invocation.proceed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Massage return value if necessary.</span></span><br><span class="line">    Class&lt;?&gt; returnType = method.getReturnType();</span><br><span class="line">    <span class="keyword">if</span> (retVal != <span class="keyword">null</span> &amp;&amp; retVal == target &amp;&amp;</span><br><span class="line">        returnType != Object<span class="class">.<span class="keyword">class</span> &amp;&amp; <span class="title">returnType</span>.<span class="title">isInstance</span>(<span class="title">proxy</span>) &amp;&amp;</span></span><br><span class="line"><span class="class">        !<span class="title">RawTargetAccess</span>.<span class="title">class</span>.<span class="title">isAssignableFrom</span>(<span class="title">method</span>.<span class="title">getDeclaringClass</span>())) </span>&#123;</span><br><span class="line">      <span class="comment">// Special case: it returned "this" and the return type of the method</span></span><br><span class="line">      <span class="comment">// is type-compatible. Note that we can't help if the target sets</span></span><br><span class="line">      <span class="comment">// a reference to itself in another returned object.</span></span><br><span class="line">      retVal = proxy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (retVal == <span class="keyword">null</span> &amp;&amp; returnType != Void.TYPE &amp;&amp; returnType.isPrimitive()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> AopInvocationException(</span><br><span class="line">        <span class="string">"Null return value from advice does not match primitive return type for: "</span> + method);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> retVal;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (target != <span class="keyword">null</span> &amp;&amp; !targetSource.isStatic()) &#123;</span><br><span class="line">      <span class="comment">// Must have come from TargetSource.</span></span><br><span class="line">      <span class="comment">// 底层的targetSource可能是池化的，这里把对象归还给池子</span></span><br><span class="line">      targetSource.releaseTarget(target);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (setProxyContext) &#123;</span><br><span class="line">      <span class="comment">// Restore old proxy.</span></span><br><span class="line">      AopContext.setCurrentProxy(oldProxy);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟前面介绍的动态代理差不多，只是框架生成的，而且加上了一些interceptor的逻辑（AOP Alliance）</p><h3 id="CglibAopProxy"><a href="#CglibAopProxy" class="headerlink" title="CglibAopProxy"></a>CglibAopProxy</h3><img src="/2021/03/10/spring-aop/image-20210310001148937.png"><p>获取Proxy的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">(ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">    logger.debug(<span class="string">"Creating CGLIB proxy: target source is "</span> + <span class="keyword">this</span>.advised.getTargetSource());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    Class&lt;?&gt; rootClass = <span class="keyword">this</span>.advised.getTargetClass();</span><br><span class="line">    Assert.state(rootClass != <span class="keyword">null</span>, <span class="string">"Target class must be available for creating a CGLIB proxy"</span>);</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; proxySuperClass = rootClass;</span><br><span class="line">    <span class="keyword">if</span> (ClassUtils.isCglibProxyClass(rootClass)) &#123;</span><br><span class="line">      proxySuperClass = rootClass.getSuperclass();</span><br><span class="line">      Class&lt;?&gt;[] additionalInterfaces = rootClass.getInterfaces();</span><br><span class="line">      <span class="keyword">for</span> (Class&lt;?&gt; additionalInterface : additionalInterfaces) &#123;</span><br><span class="line">        <span class="keyword">this</span>.advised.addInterface(additionalInterface);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Validate the class, writing log messages as necessary.</span></span><br><span class="line">    validateClassIfNecessary(proxySuperClass, classLoader);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Configure CGLIB Enhancer...</span></span><br><span class="line">    Enhancer enhancer = createEnhancer();</span><br><span class="line">    <span class="keyword">if</span> (classLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">      enhancer.setClassLoader(classLoader);</span><br><span class="line">      <span class="keyword">if</span> (classLoader <span class="keyword">instanceof</span> SmartClassLoader &amp;&amp;</span><br><span class="line">          ((SmartClassLoader) classLoader).isClassReloadable(proxySuperClass)) &#123;</span><br><span class="line">        enhancer.setUseCache(<span class="keyword">false</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 父类</span></span><br><span class="line">    enhancer.setSuperclass(proxySuperClass);</span><br><span class="line">    <span class="comment">// 实现的接口</span></span><br><span class="line">    enhancer.setInterfaces(AopProxyUtils.completeProxiedInterfaces(<span class="keyword">this</span>.advised));</span><br><span class="line">    <span class="comment">// 代理类的命名规则</span></span><br><span class="line">    enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE);</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    enhancer.setStrategy(<span class="keyword">new</span> ClassLoaderAwareUndeclaredThrowableStrategy(classLoader));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// callback数组，这个顺序要和CallBackFilter对应起来</span></span><br><span class="line">    Callback[] callbacks = getCallbacks(rootClass);</span><br><span class="line">    <span class="comment">// callback的类型</span></span><br><span class="line">    Class&lt;?&gt;[] types = <span class="keyword">new</span> Class&lt;?&gt;[callbacks.length];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; types.length; x++) &#123;</span><br><span class="line">      types[x] = callbacks[x].getClass();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// fixedInterceptorMap only populated at this point, after getCallbacks call above</span></span><br><span class="line">    <span class="comment">// callback对应的filter，filter的返回值决定了使用哪个下表的Callback</span></span><br><span class="line">    enhancer.setCallbackFilter(<span class="keyword">new</span> ProxyCallbackFilter(</span><br><span class="line">      <span class="keyword">this</span>.advised.getConfigurationOnlyCopy(), <span class="keyword">this</span>.fixedInterceptorMap, <span class="keyword">this</span>.fixedInterceptorOffset));</span><br><span class="line">    <span class="comment">// callback的类型</span></span><br><span class="line">    enhancer.setCallbackTypes(types);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate the proxy class and create a proxy instance.</span></span><br><span class="line">    <span class="comment">// 生成代理类和实例</span></span><br><span class="line">    <span class="keyword">return</span> createProxyClassAndInstance(enhancer, callbacks);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (CodeGenerationException ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">"Could not generate CGLIB subclass of class ["</span> +</span><br><span class="line">                                 <span class="keyword">this</span>.advised.getTargetClass() + <span class="string">"]: "</span> +</span><br><span class="line">                                 <span class="string">"Common causes of this problem include using a final class or a non-visible class"</span>,</span><br><span class="line">                                 ex);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">"Could not generate CGLIB subclass of class ["</span> +</span><br><span class="line">                                 <span class="keyword">this</span>.advised.getTargetClass() + <span class="string">"]: "</span> +</span><br><span class="line">                                 <span class="string">"Common causes of this problem include using a final class or a non-visible class"</span>,</span><br><span class="line">                                 ex);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">    <span class="comment">// TargetSource.getTarget() failed</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">"Unexpected AOP exception"</span>, ex);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里主要关注下Callback和CallbackFilter:</p><h4 id="Callback"><a href="#Callback" class="headerlink" title="Callback"></a>Callback</h4><p>callback里就是拦截的逻辑，spring支持多种，最常用的就是<code>MethodInterceptor</code>：</p><img src="/2021/03/10/spring-aop/image-20210310001935402.png"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.aop.framework.CglibAopProxy#getCallbacks</span></span><br><span class="line"><span class="keyword">private</span> Callback[] getCallbacks(Class&lt;?&gt; rootClass) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  <span class="comment">// Parameters used for optimisation choices...</span></span><br><span class="line">  <span class="comment">// 是否暴露代理类</span></span><br><span class="line">  <span class="keyword">boolean</span> exposeProxy = <span class="keyword">this</span>.advised.isExposeProxy();</span><br><span class="line">  <span class="comment">// 配置是否已经不可改</span></span><br><span class="line">  <span class="keyword">boolean</span> isFrozen = <span class="keyword">this</span>.advised.isFrozen();</span><br><span class="line">  <span class="comment">// 是否静态，静态就是每次调用getTarget返回的都是同一个对象，动态就是每次返回的可能不一样</span></span><br><span class="line">  <span class="keyword">boolean</span> isStatic = <span class="keyword">this</span>.advised.getTargetSource().isStatic();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Choose an "aop" interceptor (used for AOP calls).</span></span><br><span class="line">  <span class="comment">// 1、最常用的Interceptor</span></span><br><span class="line">  Callback aopInterceptor = <span class="keyword">new</span> DynamicAdvisedInterceptor(<span class="keyword">this</span>.advised);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Choose a "straight to target" interceptor. (used for calls that are</span></span><br><span class="line">  <span class="comment">// unadvised but can return this). May be required to expose the proxy.</span></span><br><span class="line">  <span class="comment">// 2、这里区分动态的TargetSource和静态的，动态的比如底层是对象池，每次getTarget()都是不同的对象</span></span><br><span class="line">  <span class="comment">// Dynamic的每次用完还需要releaseTarget</span></span><br><span class="line">  Callback targetInterceptor;</span><br><span class="line">  <span class="keyword">if</span> (exposeProxy) &#123;</span><br><span class="line">    targetInterceptor = isStatic ?</span><br><span class="line">      <span class="keyword">new</span> StaticUnadvisedExposedInterceptor(<span class="keyword">this</span>.advised.getTargetSource().getTarget()) :</span><br><span class="line">    <span class="keyword">new</span> DynamicUnadvisedExposedInterceptor(<span class="keyword">this</span>.advised.getTargetSource());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    targetInterceptor = isStatic ?</span><br><span class="line">      <span class="keyword">new</span> StaticUnadvisedInterceptor(<span class="keyword">this</span>.advised.getTargetSource().getTarget()) :</span><br><span class="line">    <span class="keyword">new</span> DynamicUnadvisedInterceptor(<span class="keyword">this</span>.advised.getTargetSource());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Choose a "direct to target" dispatcher (used for</span></span><br><span class="line">  <span class="comment">// unadvised calls to static targets that cannot return this).</span></span><br><span class="line">  <span class="comment">// 3. </span></span><br><span class="line">  Callback targetDispatcher = isStatic ?</span><br><span class="line">    <span class="keyword">new</span> StaticDispatcher(<span class="keyword">this</span>.advised.getTargetSource().getTarget()) : <span class="keyword">new</span> SerializableNoOp();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 主要的几个callback</span></span><br><span class="line">  Callback[] mainCallbacks = <span class="keyword">new</span> Callback[] &#123;</span><br><span class="line">    aopInterceptor,  <span class="comment">// for normal advice</span></span><br><span class="line">    targetInterceptor,  <span class="comment">// invoke target without considering advice, if optimized</span></span><br><span class="line">    <span class="keyword">new</span> SerializableNoOp(),  <span class="comment">// no override for methods mapped to this</span></span><br><span class="line">    targetDispatcher, <span class="keyword">this</span>.advisedDispatcher,</span><br><span class="line">    <span class="keyword">new</span> EqualsInterceptor(<span class="keyword">this</span>.advised),</span><br><span class="line">    <span class="keyword">new</span> HashCodeInterceptor(<span class="keyword">this</span>.advised)</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  Callback[] callbacks;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If the target is a static one and the advice chain is frozen,</span></span><br><span class="line">  <span class="comment">// then we can make some optimisations by sending the AOP calls</span></span><br><span class="line">  <span class="comment">// direct to the target using the fixed chain for that method.</span></span><br><span class="line">  <span class="comment">// 优化逻辑，tldr</span></span><br><span class="line">  <span class="keyword">if</span> (isStatic &amp;&amp; isFrozen) &#123;</span><br><span class="line">    Method[] methods = rootClass.getMethods();</span><br><span class="line">    Callback[] fixedCallbacks = <span class="keyword">new</span> Callback[methods.length];</span><br><span class="line">    <span class="keyword">this</span>.fixedInterceptorMap = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;(methods.length);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> small memory optimisation here (can skip creation for methods with no advice)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; methods.length; x++) &#123;</span><br><span class="line">      List&lt;Object&gt; chain = <span class="keyword">this</span>.advised.getInterceptorsAndDynamicInterceptionAdvice(methods[x], rootClass);</span><br><span class="line">      fixedCallbacks[x] = <span class="keyword">new</span> FixedChainStaticTargetInterceptor(</span><br><span class="line">        chain, <span class="keyword">this</span>.advised.getTargetSource().getTarget(), <span class="keyword">this</span>.advised.getTargetClass());</span><br><span class="line">      <span class="keyword">this</span>.fixedInterceptorMap.put(methods[x].toString(), x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Now copy both the callbacks from mainCallbacks</span></span><br><span class="line">    <span class="comment">// and fixedCallbacks into the callbacks array.</span></span><br><span class="line">    callbacks = <span class="keyword">new</span> Callback[mainCallbacks.length + fixedCallbacks.length];</span><br><span class="line">    System.arraycopy(mainCallbacks, <span class="number">0</span>, callbacks, <span class="number">0</span>, mainCallbacks.length);</span><br><span class="line">    System.arraycopy(fixedCallbacks, <span class="number">0</span>, callbacks, mainCallbacks.length, fixedCallbacks.length);</span><br><span class="line">    <span class="keyword">this</span>.fixedInterceptorOffset = mainCallbacks.length;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    callbacks = mainCallbacks;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> callbacks;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CallbackFilter"><a href="#CallbackFilter" class="headerlink" title="CallbackFilter"></a>CallbackFilter</h4><p>再看<code>CallbackFilter</code>:</p><blockquote><p>Implementation of CallbackFilter.accept() to return the index of the callback we need.</p></blockquote><p><code>CallbackFilter</code>就是根据调用的方法名称，来dispatch到不同的callback上，从而实现不同方法不同的拦截</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.aop.framework.CglibAopProxy.ProxyCallbackFilter#accept</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implementation of CallbackFilter.accept() to return the index of the</span></span><br><span class="line"><span class="comment"> * callback we need.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The callbacks for each proxy are built up of a set of fixed callbacks</span></span><br><span class="line"><span class="comment"> * for general use and then a set of callbacks that are specific to a method</span></span><br><span class="line"><span class="comment"> * for use on static targets with a fixed advice chain.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The callback used is determined thus:</span></span><br><span class="line"><span class="comment"> * &lt;dl&gt;</span></span><br><span class="line"><span class="comment"> * &lt;dt&gt;For exposed proxies&lt;/dt&gt;</span></span><br><span class="line"><span class="comment"> * &lt;dd&gt;Exposing the proxy requires code to execute before and after the</span></span><br><span class="line"><span class="comment"> * method/chain invocation. This means we must use</span></span><br><span class="line"><span class="comment"> * DynamicAdvisedInterceptor, since all other interceptors can avoid the</span></span><br><span class="line"><span class="comment"> * need for a try/catch block&lt;/dd&gt;</span></span><br><span class="line"><span class="comment"> * &lt;dt&gt;For Object.finalize():&lt;/dt&gt;</span></span><br><span class="line"><span class="comment"> * &lt;dd&gt;No override for this method is used.&lt;/dd&gt;</span></span><br><span class="line"><span class="comment"> * &lt;dt&gt;For equals():&lt;/dt&gt;</span></span><br><span class="line"><span class="comment"> * &lt;dd&gt;The EqualsInterceptor is used to redirect equals() calls to a</span></span><br><span class="line"><span class="comment"> * special handler to this proxy.&lt;/dd&gt;</span></span><br><span class="line"><span class="comment"> * &lt;dt&gt;For methods on the Advised class:&lt;/dt&gt;</span></span><br><span class="line"><span class="comment"> * &lt;dd&gt;the AdvisedDispatcher is used to dispatch the call directly to</span></span><br><span class="line"><span class="comment"> * the target&lt;/dd&gt;</span></span><br><span class="line"><span class="comment"> * &lt;dt&gt;For advised methods:&lt;/dt&gt;</span></span><br><span class="line"><span class="comment"> * &lt;dd&gt;If the target is static and the advice chain is frozen then a</span></span><br><span class="line"><span class="comment"> * FixedChainStaticTargetInterceptor specific to the method is used to</span></span><br><span class="line"><span class="comment"> * invoke the advice chain. Otherwise a DynamicAdvisedInterceptor is</span></span><br><span class="line"><span class="comment"> * used.&lt;/dd&gt;</span></span><br><span class="line"><span class="comment"> * &lt;dt&gt;For non-advised methods:&lt;/dt&gt;</span></span><br><span class="line"><span class="comment"> * &lt;dd&gt;Where it can be determined that the method will not return &#123;<span class="doctag">@code</span> this&#125;</span></span><br><span class="line"><span class="comment"> * or when &#123;<span class="doctag">@code</span> ProxyFactory.getExposeProxy()&#125; returns &#123;<span class="doctag">@code</span> false&#125;,</span></span><br><span class="line"><span class="comment"> * then a Dispatcher is used. For static targets, the StaticDispatcher is used;</span></span><br><span class="line"><span class="comment"> * and for dynamic targets, a DynamicUnadvisedInterceptor is used.</span></span><br><span class="line"><span class="comment"> * If it possible for the method to return &#123;<span class="doctag">@code</span> this&#125; then a</span></span><br><span class="line"><span class="comment"> * StaticUnadvisedInterceptor is used for static targets - the</span></span><br><span class="line"><span class="comment"> * DynamicUnadvisedInterceptor already considers this.&lt;/dd&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/dl&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">accept</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// final方法不代理</span></span><br><span class="line">  <span class="keyword">if</span> (AopUtils.isFinalizeMethod(method)) &#123;</span><br><span class="line">    logger.trace(<span class="string">"Found finalize() method - using NO_OVERRIDE"</span>);</span><br><span class="line">    <span class="keyword">return</span> NO_OVERRIDE;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 允许代理类被转为Advised, 且方法是Advised接口声明的</span></span><br><span class="line">  <span class="comment">// 直接走dispatcher，返回对应的Advised</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.advised.isOpaque() &amp;&amp; method.getDeclaringClass().isInterface() &amp;&amp;</span><br><span class="line">      method.getDeclaringClass().isAssignableFrom(Advised<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">      logger.trace(<span class="string">"Method is declared on Advised interface: "</span> + method);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> DISPATCH_ADVISED;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// We must always proxy equals, to direct calls to this.</span></span><br><span class="line">  <span class="comment">// Equals方法的代理</span></span><br><span class="line">  <span class="keyword">if</span> (AopUtils.isEqualsMethod(method)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">      logger.trace(<span class="string">"Found 'equals' method: "</span> + method);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> INVOKE_EQUALS;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// We must always calculate hashCode based on the proxy.</span></span><br><span class="line">  <span class="comment">// HashCode方法的代理</span></span><br><span class="line">  <span class="keyword">if</span> (AopUtils.isHashCodeMethod(method)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">      logger.trace(<span class="string">"Found 'hashCode' method: "</span> + method);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> INVOKE_HASHCODE;</span><br><span class="line">  &#125;</span><br><span class="line">  Class&lt;?&gt; targetClass = <span class="keyword">this</span>.advised.getTargetClass();</span><br><span class="line">  <span class="comment">// Proxy is not yet available, but that shouldn't matter.</span></span><br><span class="line">  List&lt;?&gt; chain = <span class="keyword">this</span>.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);</span><br><span class="line">  <span class="keyword">boolean</span> haveAdvice = !chain.isEmpty();</span><br><span class="line">  <span class="keyword">boolean</span> exposeProxy = <span class="keyword">this</span>.advised.isExposeProxy();</span><br><span class="line">  <span class="keyword">boolean</span> isStatic = <span class="keyword">this</span>.advised.getTargetSource().isStatic();</span><br><span class="line">  <span class="keyword">boolean</span> isFrozen = <span class="keyword">this</span>.advised.isFrozen();</span><br><span class="line">  <span class="comment">// 有advice，或者配置还能改</span></span><br><span class="line">  <span class="keyword">if</span> (haveAdvice || !isFrozen) &#123;</span><br><span class="line">    <span class="comment">// If exposing the proxy, then AOP_PROXY must be used.</span></span><br><span class="line">    <span class="keyword">if</span> (exposeProxy) &#123;</span><br><span class="line">      <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(<span class="string">"Must expose proxy on advised method: "</span> + method);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> AOP_PROXY;</span><br><span class="line">    &#125;</span><br><span class="line">    String key = method.toString();</span><br><span class="line">    <span class="comment">// Check to see if we have fixed interceptor to serve this method.</span></span><br><span class="line">    <span class="comment">// Else use the AOP_PROXY.</span></span><br><span class="line">    <span class="comment">// 优化逻辑，暂时不看</span></span><br><span class="line">    <span class="keyword">if</span> (isStatic &amp;&amp; isFrozen &amp;&amp; <span class="keyword">this</span>.fixedInterceptorMap.containsKey(key)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(<span class="string">"Method has advice and optimizations are enabled: "</span> + method);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// We know that we are optimizing so we can use the FixedStaticChainInterceptors.</span></span><br><span class="line">      <span class="keyword">int</span> index = <span class="keyword">this</span>.fixedInterceptorMap.get(key);</span><br><span class="line">      <span class="keyword">return</span> (index + <span class="keyword">this</span>.fixedInterceptorOffset);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(<span class="string">"Unable to apply any optimizations to advised method: "</span> + method);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> AOP_PROXY;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// See if the return type of the method is outside the class hierarchy of the target type.</span></span><br><span class="line">    <span class="comment">// If so we know it never needs to have return type massage and can use a dispatcher.</span></span><br><span class="line">    <span class="comment">// If the proxy is being exposed, then must use the interceptor the correct one is already</span></span><br><span class="line">    <span class="comment">// configured. If the target is not static, then we cannot use a dispatcher because the</span></span><br><span class="line">    <span class="comment">// target needs to be explicitly released after the invocation.</span></span><br><span class="line">    <span class="keyword">if</span> (exposeProxy || !isStatic) &#123;</span><br><span class="line">      <span class="keyword">return</span> INVOKE_TARGET;</span><br><span class="line">    &#125;</span><br><span class="line">    Class&lt;?&gt; returnType = method.getReturnType();</span><br><span class="line">    <span class="keyword">if</span> (targetClass != <span class="keyword">null</span> &amp;&amp; returnType.isAssignableFrom(targetClass)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(<span class="string">"Method return type is assignable from target type and "</span> +</span><br><span class="line">                     <span class="string">"may therefore return 'this' - using INVOKE_TARGET: "</span> + method);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> INVOKE_TARGET;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">        logger.trace(<span class="string">"Method return type ensures 'this' cannot be returned - "</span> +</span><br><span class="line">                     <span class="string">"using DISPATCH_TARGET: "</span> + method);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> DISPATCH_TARGET;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2021/03/10/spring-aop/image-20210309202927411.png"><h4 id="再看AdvisedDispatcher"><a href="#再看AdvisedDispatcher" class="headerlink" title="再看AdvisedDispatcher"></a>再看AdvisedDispatcher</h4><p><code>AdvisedDispatcher</code>每次返回的都是<code>AdvisedSupport</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.aop.framework.CglibAopProxy.AdvisedDispatcher</span></span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * Dispatcher for any methods declared on the Advised class.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AdvisedDispatcher</span> <span class="keyword">implements</span> <span class="title">Dispatcher</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> AdvisedSupport advised;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">AdvisedDispatcher</span><span class="params">(AdvisedSupport advised)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.advised = advised;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 每次方法调用都会走这里</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">loadObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.advised;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.aop.framework.CglibAopProxy.StaticDispatcher</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Dispatcher for a static target. Dispatcher is much faster than</span></span><br><span class="line"><span class="comment"> * interceptor. This will be used whenever it can be determined that a</span></span><br><span class="line"><span class="comment"> * method definitely does not return "this"</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticDispatcher</span> <span class="keyword">implements</span> <span class="title">Dispatcher</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">StaticDispatcher</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.target = target;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">loadObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.target;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以将代理对象转成Advised，测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCastToAdvised</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(AopConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="keyword">final</span> Foo foo = context.getBean(Foo<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  log.info(<span class="string">"foo class is &#123;&#125;"</span>, foo.getClass()</span><br><span class="line">           .getSimpleName());</span><br><span class="line">  foo.hello1();</span><br><span class="line">  foo.hello2();</span><br><span class="line">  <span class="keyword">final</span> Advised advised = (Advised)foo;</span><br><span class="line">  log.info(<span class="string">"advised &#123;&#125;"</span>, Arrays.toString(advised.getAdvisors()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">2021-03-10 01:04:34.103[main][INFO ]o.s.c.a.AnnotationConfigApplicationContext.prepareRefresh:582 Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@5f2108b5: startup date [Wed Mar 10 01:04:34 CST 2021]; root of context hierarchy</span><br><span class="line">2021-03-10 01:04:34.576[main][INFO ]c.a.s.a.Foo.init:22 init foo</span><br><span class="line">2021-03-10 01:04:34.730[main][INFO ]c.a.s.a.AopTest.testCastToAdvised:55 foo class is Foo$<span class="variable">$EnhancerBySpringCGLIB</span>$<span class="variable">$ce661b8a</span></span><br><span class="line">2021-03-10 01:04:34.744[main][INFO ]c.a.s.a.Foo.hello1:26 hello1</span><br><span class="line">2021-03-10 01:04:34.745[main][INFO ]c.a.s.a.PerformanceTraceAspect.tracePerformance:31 hello1 total cost 9 ms</span><br><span class="line">2021-03-10 01:04:34.745[main][INFO ]c.a.s.a.Foo.hello2:30 hello2</span><br><span class="line">2021-03-10 01:04:34.756[main][INFO ]c.a.s.a.HelloImpl.sayHello:15 haha</span><br><span class="line">2021-03-10 01:04:34.756[main][INFO ]c.a.s.a.PerformanceTraceAspect.tracePerformance:31 hello2 total cost 11 ms</span><br><span class="line">2021-03-10 01:04:34.757[main][INFO ]c.a.s.a.AopTest.testCastToAdvised:60 advised [org.springframework.aop.interceptor.ExposeInvocationInterceptor.ADVISOR, InstantiationModelAwarePointcutAdvisor: expression [pointCut()]; advice method [public java.lang.Object com.air.spring.aop.PerformanceTraceAspect.tracePerformance(org.aspectj.lang.ProceedingJoinPoint) throws java.lang.Throwable]; perClauseKind=SINGLETON]</span><br></pre></td></tr></table></figure><img src="/2021/03/10/spring-aop/image-20210310011207987.png"><h2 id="AOP的用途"><a href="#AOP的用途" class="headerlink" title="AOP的用途"></a>AOP的用途</h2><p>aop在spring中的用途非常广泛，比如注解事务的实现、Lazy初始化的实现等等。这里看几个简单的例子。</p><h3 id="Lazy实现"><a href="#Lazy实现" class="headerlink" title="@Lazy实现"></a>@Lazy实现</h3><p>lazy初始化的，也是生成了代理类，在实际调用方法时才会去做初始化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.context.annotation.CommonAnnotationBeanPostProcessor#buildLazyResourceProxy</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Obtain a lazily resolving resource proxy for the given name and type,</span></span><br><span class="line"><span class="comment"> * delegating to &#123;<span class="doctag">@link</span> #getResource&#125; on demand once a method call comes in.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> element the descriptor for the annotated field/method</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> requestingBeanName the name of the requesting bean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the resource object (never &#123;<span class="doctag">@code</span> null&#125;)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 4.2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #getResource</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> Lazy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">buildLazyResourceProxy</span><span class="params">(<span class="keyword">final</span> LookupElement element, <span class="keyword">final</span> String requestingBeanName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 匿名的TargetSource</span></span><br><span class="line">    TargetSource ts = <span class="keyword">new</span> TargetSource() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> Class&lt;?&gt; getTargetClass() &#123;</span><br><span class="line">        <span class="keyword">return</span> element.lookupType;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isStatic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Object <span class="title">getTarget</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这里实际去加载对应的类</span></span><br><span class="line">        <span class="keyword">return</span> getResource(element, requestingBeanName);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">releaseTarget</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 生成代理类</span></span><br><span class="line">    ProxyFactory pf = <span class="keyword">new</span> ProxyFactory();</span><br><span class="line">    pf.setTargetSource(ts);</span><br><span class="line">    <span class="keyword">if</span> (element.lookupType.isInterface()) &#123;</span><br><span class="line">      pf.addInterface(element.lookupType);</span><br><span class="line">    &#125;</span><br><span class="line">    ClassLoader classLoader = (<span class="keyword">this</span>.beanFactory <span class="keyword">instanceof</span> ConfigurableBeanFactory ?</span><br><span class="line">                               ((ConfigurableBeanFactory) <span class="keyword">this</span>.beanFactory).getBeanClassLoader() : <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">return</span> pf.getProxy(classLoader);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="Config配置类代理"><a href="#Config配置类代理" class="headerlink" title="Config配置类代理"></a>Config配置类代理</h3><p>有的系统有些祖传代码，写成这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> HuiPingDataSourceIdsBean <span class="title">getHuiPingDataSourceIdsBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HuiPingDataSourceIdsBean();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明看起来是没有问题的，使用的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String dataSourceId = appConfig.getHuiPingDataSourceIdsBean().getDataSourceId();</span><br></pre></td></tr></table></figure><p>那么这个<code>HuiPingDataSourceIdsBean</code> 会创建多次吗？答案是并不会，原因就是这个方法被代理了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.context.annotation.ConfigurationClassPostProcessor#enhanceConfigurationClasses</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Post-processes a BeanFactory in search of Configuration class BeanDefinitions;</span></span><br><span class="line"><span class="comment"> * any candidates are then enhanced by a &#123;<span class="doctag">@link</span> ConfigurationClassEnhancer&#125;.</span></span><br><span class="line"><span class="comment"> * Candidate status is determined by BeanDefinition attribute metadata.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> ConfigurationClassEnhancer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enhanceConfigurationClasses</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">  Map&lt;String, AbstractBeanDefinition&gt; configBeanDefs = <span class="keyword">new</span> LinkedHashMap&lt;String, AbstractBeanDefinition&gt;();</span><br><span class="line">  <span class="comment">// 遍历当前的bean</span></span><br><span class="line">  <span class="keyword">for</span> (String beanName : beanFactory.getBeanDefinitionNames()) &#123;</span><br><span class="line">    BeanDefinition beanDef = beanFactory.getBeanDefinition(beanName);</span><br><span class="line">    <span class="comment">// 如果是full Configuration的标记了@Configuration</span></span><br><span class="line">    <span class="keyword">if</span> (ConfigurationClassUtils.isFullConfigurationClass(beanDef)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!(beanDef <span class="keyword">instanceof</span> AbstractBeanDefinition)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(<span class="string">"Cannot enhance @Configuration bean definition '"</span> +</span><br><span class="line">                                               beanName + <span class="string">"' since it is not stored in an AbstractBeanDefinition subclass"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (logger.isWarnEnabled() &amp;&amp; beanFactory.containsSingleton(beanName)) &#123;</span><br><span class="line">        logger.warn(<span class="string">"Cannot enhance @Configuration bean definition '"</span> + beanName +</span><br><span class="line">                    <span class="string">"' since its singleton instance has been created too early. The typical cause "</span> +</span><br><span class="line">                    <span class="string">"is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor "</span> +</span><br><span class="line">                    <span class="string">"return type: Consider declaring such methods as 'static'."</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 加入到待处理集合</span></span><br><span class="line">      configBeanDefs.put(beanName, (AbstractBeanDefinition) beanDef);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (configBeanDefs.isEmpty()) &#123;</span><br><span class="line">    <span class="comment">// nothing to enhance -&gt; return immediately</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 这里出现了enhancer，内部是cglib的enhancer</span></span><br><span class="line">  ConfigurationClassEnhancer enhancer = <span class="keyword">new</span> ConfigurationClassEnhancer();</span><br><span class="line">  <span class="keyword">for</span> (Map.Entry&lt;String, AbstractBeanDefinition&gt; entry : configBeanDefs.entrySet()) &#123;</span><br><span class="line">    AbstractBeanDefinition beanDef = entry.getValue();</span><br><span class="line">    <span class="comment">// If a @Configuration class gets proxied, always proxy the target class</span></span><br><span class="line">    beanDef.setAttribute(AutoProxyUtils.PRESERVE_TARGET_CLASS_ATTRIBUTE, Boolean.TRUE);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// Set enhanced subclass of the user-specified bean class</span></span><br><span class="line">      Class&lt;?&gt; configClass = beanDef.resolveBeanClass(<span class="keyword">this</span>.beanClassLoader);</span><br><span class="line">      <span class="comment">// 生成增强类</span></span><br><span class="line">      Class&lt;?&gt; enhancedClass = enhancer.enhance(configClass, <span class="keyword">this</span>.beanClassLoader);</span><br><span class="line">      <span class="keyword">if</span> (configClass != enhancedClass) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">          logger.debug(String.format(<span class="string">"Replacing bean definition '%s' existing class '%s' with "</span> +</span><br><span class="line">                                     <span class="string">"enhanced class '%s'"</span>, entry.getKey(), configClass.getName(), enhancedClass.getName()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 替换为增强类</span></span><br><span class="line">        beanDef.setBeanClass(enhancedClass);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Cannot load configuration class: "</span> + beanDef.getBeanClassName(), ex);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConfigurationProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(AopConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  <span class="keyword">final</span> AopConfig aopConfig = context.getBean(AopConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">  log.info(<span class="string">"aopConfig class = &#123;&#125;"</span>, aopConfig.getClass());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2021-03-09 16:04:16.978[main][INFO ]c.a.s.a.AopTest.testConfigurationProxy:132 aopConfig class = class com.air.spring.aop.AopConfig$<span class="variable">$EnhancerBySpringCGLIB</span>$<span class="variable">$b88034a1</span></span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://my.oschina.net/mn1127/blog/649006?p=1" rel="external nofollow noopener noreferrer" target="_blank">实战CGLib系列之proxy篇(二)：回调过滤CallbackFilter - mn_1127的个人空间 - OSCHINA - 中文开源技术交流社区</a></li><li><a href="https://blog.csdn.net/zhang6622056/article/details/87286498" rel="external nofollow noopener noreferrer" target="_blank">死磕cglib系列之一 cglib简介与callback解析_zhang6622056的专栏-CSDN博客</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Spring-Aop是spring提供的面向切面编程的工具，spring的好多功能也是基于切面来实现。切面编程可以将分散的逻辑集中在切面中，便于代码的维护。&lt;/p&gt;
&lt;h2 id=&quot;AOP使用&quot;&gt;&lt;a href=&quot;#AOP使用&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="spring" scheme="http://qsli.github.io/categories/spring/"/>
    
    
      <category term="spring-aop" scheme="http://qsli.github.io/tags/spring-aop/"/>
    
  </entry>
  
  <entry>
    <title>spring-validator源码分析</title>
    <link href="http://qsli.github.io/2021/03/05/spring-validator/"/>
    <id>http://qsli.github.io/2021/03/05/spring-validator/</id>
    <published>2021-03-05T06:56:11.000Z</published>
    <updated>2021-11-13T17:53:22.302Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSR-303和JSR-349"><a href="#JSR-303和JSR-349" class="headerlink" title="JSR-303和JSR-349"></a>JSR-303和JSR-349</h1><h2 id="jsr-303：——Bean-Validation-1-0"><a href="#jsr-303：——Bean-Validation-1-0" class="headerlink" title="jsr-303：——Bean Validation 1.0"></a><code>jsr-303</code>：——Bean Validation 1.0</h2><blockquote><p>This document is the specification of the Java API for JavaBean validation in Java EE and Java SE. The technical objective of this work is to <strong>provide a class level constraint declaration and validation facility</strong> for the Java application developer, as well as a <strong>constraint metadata</strong> repository and query API.</p></blockquote><p>目标：</p><blockquote><p>Validating data is a common task that occurs throughout an application, <strong>from the presentation layer to the persistence layer.</strong> Often the same validation logic is implemented in each layer, proving to be time consuming and error-prone. To avoid duplication of these validations in each layer, developers often bundle validation logic directly into the <strong>domain model</strong>, cluttering domain classes with validation code that is, <strong>in fact, metadata about the class itself.</strong></p><p>This JSR <strong>defines a metadata model and API for JavaBean validation</strong>. The default metadata source is annotations, with the ability to override and extend the meta-data through the use of XML validation descriptors.</p><p>The validation API developed by this JSR is not intended for use in any one tier or programming model. It is specifically not tied to either the web tier or the persistence tier, and is <strong>available for both server-side application programming, as well as rich client Swing application developers.</strong> This API is seen as a <strong>general extension to the JavaBeans object model,</strong> and as such is expected to be used as a core component in other specifications. Ease of use and flexibility have influenced the design of this specification.</p></blockquote><p>如果同样的校验逻辑会在每个层都存在，就会很容易出bug，而且写起来也很耗时；一般的做法是将校验逻辑带入领域层，但是这些校验逻辑只是对应类的一种元数据；JSR-303就是一种描述这种元数据的方式。用他们的口号来说，就是：</p><blockquote><p> Constrain once, validate everywhere</p></blockquote><h2 id="jsr-349——Bean-Validation-1-1："><a href="#jsr-349——Bean-Validation-1-1：" class="headerlink" title="jsr-349——Bean Validation 1.1："></a><code>jsr-349</code>——Bean Validation 1.1：</h2><blockquote><p>Bean Validation 1.1 focused on the following topics:</p></blockquote><ul><li>openness of the specification and its process</li><li>method-level validation (validation of parameters or return values)</li><li>dependency injection for Bean Validation components</li><li>integration with Context and Dependency Injection (CDI)</li><li>group conversion</li><li>error message interpolation using EL expressions</li></ul><p>1.1支持了方法级别的校验。</p><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><img src="/2021/03/05/spring-validator/image-20210303162356732.png"><h3 id="第一种启动方式（Xml-Config-or-Default）："><a href="#第一种启动方式（Xml-Config-or-Default）：" class="headerlink" title="第一种启动方式（Xml Config or Default）："></a>第一种启动方式（Xml Config or Default）：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ValidatorFactory factory = Validation.buildDefaultValidatorFactory();</span><br></pre></td></tr></table></figure><p>这种情况下， validator的提供是通过：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">* The chosen provider is defined as followed:</span><br><span class="line">*     &lt;ul&gt;</span><br><span class="line">*         &lt;li&gt;if the XML configuration defines a provider, this provider is used&lt;/li&gt;</span><br><span class="line">*         &lt;li&gt;if the XML configuration does not define a provider or if no XML</span><br><span class="line">*         configuration is present the first provider returned by the</span><br><span class="line">*         &#123;@link ValidationProviderResolver&#125; instance is used.&lt;/li&gt;</span><br><span class="line">*     &lt;/ul&gt;</span><br><span class="line">**/</span><br></pre></td></tr></table></figure><ul><li>优先使用xml的配置：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//javax.validation.Configuration</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p/&gt;</span></span><br><span class="line"><span class="comment"> * By default, the configuration information is retrieved from</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> META-INF/validation.xml&#125;.</span></span><br><span class="line"><span class="comment"> * It is possible to override the configuration retrieved from the XML file</span></span><br><span class="line"><span class="comment"> * by using one or more of the &#123;<span class="doctag">@code</span> Configuration&#125; methods.</span></span><br><span class="line"><span class="comment"> * &lt;p/&gt;</span></span><br><span class="line"><span class="comment"> **/</span></span><br></pre></td></tr></table></figure><p><code>validation.xml</code>配置示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">validation-config</span> <span class="attr">xmlns</span>=<span class="string">"http://jboss.org/xml/ns/javax/validation/configuration"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://jboss.org/xml/ns/javax/validation/configuration"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">default-provider</span>&gt;</span>org.hibernate.validator.HibernateValidator<span class="tag">&lt;/<span class="name">default-provider</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">message-interpolator</span>&gt;</span>org.hibernate.validator.engine.ResourceBundleMessageInterpolator<span class="tag">&lt;/<span class="name">message-interpolator</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">traversable-resolver</span>&gt;</span>org.hibernate.validator.engine.resolver.DefaultTraversableResolver<span class="tag">&lt;/<span class="name">traversable-resolver</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constraint-validator-factory</span>&gt;</span>org.hibernate.validator.engine.ConstraintValidatorFactoryImpl<span class="tag">&lt;/<span class="name">constraint-validator-factory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constraint-mapping</span>&gt;</span>/constraints-car.xml<span class="tag">&lt;/<span class="name">constraint-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prop1"</span>&gt;</span>value1<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prop2"</span>&gt;</span>value2<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">validation-config</span>&gt;</span></span><br></pre></td></tr></table></figure>  <img src="/2021/03/05/spring-validator/image-20210303181653486.png"><ul><li>如果没有，就取SPI加载的第一个provider的配置：</li></ul><blockquote><p>Bean Validation providers are identified by the presence of<br>{@code META-INF/services/javax.validation.spi.ValidationProvider}</p></blockquote><img src="/2021/03/05/spring-validator/image-20210303181422423.png"><p>一般都是用的这种方式</p><h3 id="第二种启动方式（Java-Config）："><a href="#第二种启动方式（Java-Config）：" class="headerlink" title="第二种启动方式（Java Config）："></a>第二种启动方式（Java Config）：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Configuration&lt;?&gt; configuration = Validation</span><br><span class="line">                                .byDefaultProvider()</span><br><span class="line">                                .providerResolver( <span class="keyword">new</span> MyResolverStrategy() )</span><br><span class="line">                                .configure();</span><br><span class="line">ValidatorFactory factory = configuration.buildValidatorFactory();</span><br></pre></td></tr></table></figure><p>可以配置一个自定义的<code>provider resolver</code>，来决定使用哪个validator。</p><p>xml的配置，可以通过编程的方式调用<code>javax.validation.Configuration</code>来实现. 另外, 你可以通过<br>API的方式来重写xml中的配置信息, 也可以通过调用 <code>Configuration.ignoreXmlConfiguration()</code>来完全的忽略掉xml的配置信息. </p><h3 id="第三种启动方式"><a href="#第三种启动方式" class="headerlink" title="第三种启动方式"></a>第三种启动方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ACMEConfiguration configuration = Validation</span><br><span class="line">   .byProvider(ACMEProvider<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">   .<span class="title">providerResolver</span>( <span class="title">new</span> <span class="title">MyResolverStrategy</span>() )  // <span class="title">optionally</span> <span class="title">set</span> <span class="title">the</span> <span class="title">provider</span> <span class="title">resolver</span></span></span><br><span class="line"><span class="class">   .<span class="title">configure</span>()</span>;</span><br><span class="line">ValidatorFactory factory = configuration.buildValidatorFactory();</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>定义好Constraint：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.air.validation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.air.validation.custom.CaseMode;</span><br><span class="line"><span class="keyword">import</span> com.air.validation.custom.CheckCase;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Max;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Min;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Size;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 代故</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/3 11:31 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String manufacturer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Size</span>(min = <span class="number">2</span>, max = <span class="number">14</span>)</span><br><span class="line">    <span class="meta">@CheckCase</span>(CaseMode.UPPER)</span><br><span class="line">    <span class="keyword">private</span> String licensePlate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> seatCount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 嵌套校验</span></span><br><span class="line"><span class="comment">     * 如果标注了<span class="doctag">@Valid</span>, 那么当主对象被校验的时候,这些集合对象中的元素都会被校验.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="keyword">private</span> Person driver;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(String manufacturer, String licensePlate, <span class="keyword">int</span> seatCount, Person driver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.manufacturer = manufacturer;</span><br><span class="line">        <span class="keyword">this</span>.licensePlate = licensePlate;</span><br><span class="line">        <span class="keyword">this</span>.seatCount = seatCount;</span><br><span class="line">        <span class="keyword">this</span>.driver = driver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(String manufacturer, String licensePlate, <span class="keyword">int</span> seatCount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.manufacturer = manufacturer;</span><br><span class="line">        <span class="keyword">this</span>.licensePlate = licensePlate;</span><br><span class="line">        <span class="keyword">this</span>.seatCount = seatCount;</span><br><span class="line">        <span class="keyword">this</span>.driver = <span class="keyword">new</span> Person(<span class="string">"default-driver"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">(@Max(<span class="number">75</span>)</span> <span class="keyword">int</span> speedInMph) </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"driving car at speed "</span> + speedInMph);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.air.validation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.HibernateValidator;</span><br><span class="line"><span class="keyword">import</span> org.junit.BeforeClass;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.internal.runners.JUnit4ClassRunner;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintViolation;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Validation;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Validator;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ValidatorFactory;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Max;</span><br><span class="line"><span class="keyword">import</span> javax.validation.executable.ExecutableValidator;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Annotation;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertEquals;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertNotNull;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 代故</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/3/3 11:33 AM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(JUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">CarTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Validator validator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ExecutableValidator executableValidator;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();</span></span><br><span class="line">        <span class="keyword">final</span> ValidatorFactory factory = Validation.byProvider(HibernateValidator<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">            .<span class="title">configure</span>()</span></span><br><span class="line"><span class="class">            .<span class="title">failFast</span>(<span class="title">false</span>)</span></span><br><span class="line"><span class="class">            .<span class="title">buildValidatorFactory</span>()</span>;</span><br><span class="line">        validator = factory.getValidator();</span><br><span class="line">        executableValidator = validator.forExecutables();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">manufacturerIsNull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Car car = <span class="keyword">new</span> Car(<span class="keyword">null</span>, <span class="string">"DD-AB-123"</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations = validator.validate(car);</span><br><span class="line"></span><br><span class="line">        assertEquals(<span class="number">1</span>, constraintViolations.size());</span><br><span class="line">        assertEquals(<span class="string">"may not be null"</span>, constraintViolations.iterator()</span><br><span class="line">            .next()</span><br><span class="line">            .getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">licensePlateTooShort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Car car = <span class="keyword">new</span> Car(<span class="string">"Morris"</span>, <span class="string">"D"</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations = validator.validate(car);</span><br><span class="line"></span><br><span class="line">        assertEquals(<span class="number">1</span>, constraintViolations.size());</span><br><span class="line">        assertEquals(<span class="string">"size must be between 2 and 14"</span>, constraintViolations.iterator()</span><br><span class="line">            .next()</span><br><span class="line">            .getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seatCountTooLow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Car car = <span class="keyword">new</span> Car(<span class="string">"Morris"</span>, <span class="string">"DD-AB-123"</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations = validator.validate(car);</span><br><span class="line"></span><br><span class="line">        assertEquals(<span class="number">1</span>, constraintViolations.size());</span><br><span class="line">        assertEquals(<span class="string">"must be greater than or equal to 2"</span>, constraintViolations.iterator()</span><br><span class="line">            .next()</span><br><span class="line">            .getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">carIsValid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Car car = <span class="keyword">new</span> Car(<span class="string">"Morris"</span>, <span class="string">"DD-AB-123"</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations = validator.validate(car);</span><br><span class="line"></span><br><span class="line">        assertEquals(<span class="number">0</span>, constraintViolations.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testValidatePerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Car car = <span class="keyword">new</span> Car(<span class="string">"Morris"</span>, <span class="string">"豫D-AAAAA"</span>, <span class="number">2</span>, <span class="keyword">new</span> Person(<span class="keyword">null</span>));</span><br><span class="line">        <span class="keyword">final</span> Set&lt;ConstraintViolation&lt;Car&gt;&gt; violations = validator.validate(car);</span><br><span class="line">        <span class="keyword">for</span> (ConstraintViolation&lt;Car&gt; violation: violations) &#123;</span><br><span class="line">            System.out.println(violation.getPropertyPath() + <span class="string">" -&gt; "</span> + violation.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        assertNotNull(violations);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * validateProperty() 和 validateValue() 会忽略被验证属性上定义的<span class="doctag">@Valid</span>.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testValidateValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        final Set&lt;ConstraintViolation&lt;Car&gt;&gt; violations = validator.validateValue(Car.class, "driver", new Person(null));</span><br><span class="line">        <span class="keyword">for</span> (ConstraintViolation&lt;Car&gt; violation: violations) &#123;</span><br><span class="line">            System.out.println(violation.getLeafBean().getClass().getSimpleName() + <span class="string">" -&gt; "</span> + violation.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        assertEquals(<span class="number">0</span>, violations.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLicensePlateNotUpperCase</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Car car = <span class="keyword">new</span> Car(<span class="string">"Morris"</span>, <span class="string">"dd-ab-123"</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        Set&lt;ConstraintViolation&lt;Car&gt;&gt; constraintViolations =</span><br><span class="line">            validator.validate(car);</span><br><span class="line">        assertEquals(<span class="number">1</span>, constraintViolations.size());</span><br><span class="line">        assertEquals(</span><br><span class="line">            <span class="string">"Case mode must be UPPER."</span>,</span><br><span class="line">            constraintViolations.iterator().next().getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDrivingCar</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException </span>&#123;</span><br><span class="line">        Car object = <span class="keyword">new</span> Car( <span class="string">"Morris"</span> ,<span class="string">"dd-ab-123"</span>, <span class="number">4</span>);</span><br><span class="line">        Method method = Car.class.getMethod( "drive", int.class );</span><br><span class="line">        Object[] parameterValues = &#123; <span class="number">80</span> &#125;;</span><br><span class="line">      <span class="comment">// 并没有触发实际的调用</span></span><br><span class="line">        Set&lt;ConstraintViolation&lt;Car&gt;&gt; violations = executableValidator.validateParameters(</span><br><span class="line">            object,</span><br><span class="line">            method,</span><br><span class="line">            parameterValues</span><br><span class="line">        );</span><br><span class="line">        assertEquals( <span class="number">1</span>, violations.size() );</span><br><span class="line">        Class&lt;? extends Annotation&gt; constraintType = violations.iterator() .next() .getConstraintDescriptor() .getAnnotation() .annotationType();</span><br><span class="line">        assertEquals( Max<span class="class">.<span class="keyword">class</span>, <span class="title">constraintType</span> )</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>获取Validator过程：</p><img src="/2021/03/05/spring-validator/image-20210304162919206.png"><h3 id="ValidationProviderResolver"><a href="#ValidationProviderResolver" class="headerlink" title="ValidationProviderResolver"></a>ValidationProviderResolver</h3><h4 id="DefaultValidationProviderResolver"><a href="#DefaultValidationProviderResolver" class="headerlink" title="DefaultValidationProviderResolver"></a>DefaultValidationProviderResolver</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Finds &#123;<span class="doctag">@link</span> ValidationProvider&#125; according to the default &#123;<span class="doctag">@link</span> ValidationProviderResolver&#125; defined in the</span></span><br><span class="line"><span class="comment"> * Bean Validation specification. This implementation first uses thread's context classloader to locate providers.</span></span><br><span class="line"><span class="comment"> * If no suitable provider is found using the aforementioned class loader, it uses current class loader.</span></span><br><span class="line"><span class="comment"> * If it still does not find any suitable provider, it tries to locate the built-in provider using the current</span></span><br><span class="line"><span class="comment"> * class loader.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Emmanuel Bernard</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Hardy Ferentschik</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultValidationProviderResolver</span> <span class="keyword">implements</span> <span class="title">ValidationProviderResolver</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> List&lt;ValidationProvider&lt;?&gt;&gt; getValidationProviders() &#123;</span><br><span class="line"><span class="comment">// class loading and ServiceLoader methods should happen in a PrivilegedAction</span></span><br><span class="line"><span class="keyword">return</span> GetValidationProviderListAction.getValidationProviderList();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认的策略是：</p><ul><li><p>先从thread’s context class loader 中加载<code>SPI</code>接口<code>ValidationProvider</code>对应的实现，</p></li><li><p>如果没有加载到，就从<code>DefaultValidationProviderResolver</code>对应的classloader中加载。</p></li></ul><blockquote><p>if we cannot find any service files with the context class loader use the current class loader</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javax.validation.Validation.GetValidationProviderListAction</span></span><br><span class="line"><span class="keyword">public</span> List&lt;ValidationProvider&lt;?&gt;&gt; run() &#123;</span><br><span class="line">   <span class="comment">// Option #1: try first context class loader</span></span><br><span class="line">   <span class="comment">//从contextClassLoader中加载</span></span><br><span class="line">   ClassLoader classloader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">   List&lt;ValidationProvider&lt;?&gt;&gt; cachedContextClassLoaderProviderList = getCachedValidationProviders( classloader );</span><br><span class="line">   <span class="keyword">if</span> ( cachedContextClassLoaderProviderList != <span class="keyword">null</span> ) &#123;</span><br><span class="line">      <span class="comment">// if already processed return the cached provider list</span></span><br><span class="line">      <span class="keyword">return</span> cachedContextClassLoaderProviderList;</span><br><span class="line">   &#125;</span><br><span class="line">   List&lt;ValidationProvider&lt;?&gt;&gt; validationProviderList = loadProviders( classloader );</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">   <span class="comment">// Option #2: if we cannot find any service files with the context class loader use the current class loader</span></span><br><span class="line">   <span class="comment">//</span></span><br><span class="line">   <span class="comment">//</span></span><br><span class="line">   <span class="comment">//</span></span><br><span class="line">   <span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> ( validationProviderList.isEmpty() ) &#123;</span><br><span class="line">      <span class="comment">// 从当前class的加载器加载</span></span><br><span class="line">      classloader = DefaultValidationProviderResolver<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">      List&lt;ValidationProvider&lt;?&gt;&gt; cachedCurrentClassLoaderProviderList = getCachedValidationProviders(</span><br><span class="line">            classloader</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">if</span> ( cachedCurrentClassLoaderProviderList != <span class="keyword">null</span> ) &#123;</span><br><span class="line">         <span class="comment">// if already processed return the cached provider list</span></span><br><span class="line">         <span class="keyword">return</span> cachedCurrentClassLoaderProviderList;</span><br><span class="line">      &#125;</span><br><span class="line">      validationProviderList = loadProviders( classloader );</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// cache the detected providers against the classloader in which they were found</span></span><br><span class="line">   cacheValidationProviders( classloader, validationProviderList );</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> validationProviderList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至于<code>loadProviders</code>就是加载<code>SPI</code>的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;ValidationProvider&lt;?&gt;&gt; loadProviders(ClassLoader classloader) &#123;</span><br><span class="line">    ServiceLoader&lt;ValidationProvider&gt; loader = ServiceLoader.load( ValidationProvider<span class="class">.<span class="keyword">class</span>, <span class="title">classloader</span> )</span>;</span><br><span class="line">    Iterator&lt;ValidationProvider&gt; providerIterator = loader.iterator();</span><br><span class="line">    List&lt;ValidationProvider&lt;?&gt;&gt; validationProviderList = <span class="keyword">new</span> ArrayList&lt;ValidationProvider&lt;?&gt;&gt;();</span><br><span class="line">    <span class="keyword">while</span> ( providerIterator.hasNext() ) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            validationProviderList.add( providerIterator.next() );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( ServiceConfigurationError e ) &#123;</span><br><span class="line">            <span class="comment">// ignore, because it can happen when multiple</span></span><br><span class="line">            <span class="comment">// providers are present and some of them are not class loader</span></span><br><span class="line">            <span class="comment">// compatible with our API.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> validationProviderList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Hibernate-Validator"><a href="#Hibernate-Validator" class="headerlink" title="Hibernate-Validator"></a>Hibernate-Validator</h1><p><code>javax.validation</code>只是定义好了api，具体的实现一般用hibernate提供的validator。</p><p>获取元数据过程：</p><img src="/2021/03/05/spring-validator/image-20210304162952525.png"><p>具体实现类的选取，走的是<code>SPI</code>加载机制，所以先从<code>SPI</code>入手，找到 jar包下的<code>META-INF/services/javax.validation.spi.ValidationProvider</code>声明具体的实现类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.hibernate.validator.HibernateValidator</span><br></pre></td></tr></table></figure><h2 id="Validate过程："><a href="#Validate过程：" class="headerlink" title="Validate过程："></a>Validate过程：</h2><h3 id="validate"><a href="#validate" class="headerlink" title="validate"></a>validate</h3><img src="/2021/03/05/spring-validator/image-20210304163057740.png"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.hibernate.validator.internal.engine.ValidatorImpl#validate</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> &lt;T&gt; Set&lt;ConstraintViolation&lt;T&gt;&gt; validate(T object, Class&lt;?&gt;... groups) &#123;</span><br><span class="line">Contracts.assertNotNull( object, MESSAGES.validatedObjectMustNotBeNull() );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 没有注解信息或者xml中没有配置校验，直接返回空集合</span></span><br><span class="line"><span class="keyword">if</span> ( !beanMetaDataManager.isConstrained( object.getClass() ) ) &#123;</span><br><span class="line"><span class="keyword">return</span> Collections.emptySet();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">ValidationOrder validationOrder = determineGroupValidationOrder( groups );</span><br><span class="line">ValidationContext&lt;T&gt; validationContext = getValidationContext().forValidate( object );</span><br><span class="line"><span class="comment">// valueContext会不停的切换，路径也会更新，跟具体validate的属性有关</span></span><br><span class="line">ValueContext&lt;?, Object&gt; valueContext = ValueContext.getLocalExecutionContext(</span><br><span class="line">object,</span><br><span class="line">beanMetaDataManager.getBeanMetaData( object.getClass() ),</span><br><span class="line">PathImpl.createRootPath()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> validateInContext( valueContext, validationContext, validationOrder );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.hibernate.validator.internal.engine.ValidatorImpl#validateInContext</span></span><br><span class="line"><span class="keyword">private</span> &lt;T, U&gt; Set&lt;ConstraintViolation&lt;T&gt;&gt; validateInContext(ValueContext&lt;U, Object&gt; valueContext, ValidationContext&lt;T&gt; context, ValidationOrder validationOrder) &#123;</span><br><span class="line">  <span class="keyword">if</span> ( valueContext.getCurrentBean() == <span class="keyword">null</span> ) &#123;</span><br><span class="line">    <span class="keyword">return</span> Collections.emptySet();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对应类的元数据</span></span><br><span class="line">  BeanMetaData&lt;U&gt; beanMetaData = beanMetaDataManager.getBeanMetaData( valueContext.getCurrentBeanType() );</span><br><span class="line">  <span class="keyword">if</span> ( beanMetaData.defaultGroupSequenceIsRedefined() ) &#123;</span><br><span class="line">    validationOrder.assertDefaultGroupSequenceIsExpandable( beanMetaData.getDefaultGroupSequence( valueContext.getCurrentBean() ) );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// process first single groups. For these we can optimise object traversal by first running all validations on the current bean</span></span><br><span class="line">  <span class="comment">// before traversing the object.</span></span><br><span class="line">  <span class="comment">// 单个组的</span></span><br><span class="line">  Iterator&lt;Group&gt; groupIterator = validationOrder.getGroupIterator();</span><br><span class="line">  <span class="keyword">while</span> ( groupIterator.hasNext() ) &#123;</span><br><span class="line">    Group group = groupIterator.next();</span><br><span class="line">    valueContext.setCurrentGroup( group.getDefiningClass() );</span><br><span class="line">    validateConstraintsForCurrentGroup( context, valueContext );</span><br><span class="line">    <span class="keyword">if</span> ( shouldFailFast( context ) ) &#123;</span><br><span class="line">      <span class="keyword">return</span> context.getFailingConstraints();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  groupIterator = validationOrder.getGroupIterator();</span><br><span class="line">  <span class="keyword">while</span> ( groupIterator.hasNext() ) &#123;</span><br><span class="line">    Group group = groupIterator.next();</span><br><span class="line">    valueContext.setCurrentGroup( group.getDefiningClass() );</span><br><span class="line">   <span class="comment">// 校验级联的</span></span><br><span class="line">    validateCascadedConstraints( context, valueContext );</span><br><span class="line">    <span class="keyword">if</span> ( shouldFailFast( context ) ) &#123;</span><br><span class="line">      <span class="keyword">return</span> context.getFailingConstraints();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// now we process sequences. For sequences I have to traverse the object graph since I have to stop processing when an error occurs.</span></span><br><span class="line">  <span class="comment">// 多个组的 @GroupSequence(&#123;RentalCar.class, CarChecks.class, DriverChecks.class&#125;)</span></span><br><span class="line">  Iterator&lt;Sequence&gt; sequenceIterator = validationOrder.getSequenceIterator();</span><br><span class="line">  <span class="keyword">while</span> ( sequenceIterator.hasNext() ) &#123;</span><br><span class="line">    Sequence sequence = sequenceIterator.next();</span><br><span class="line">    <span class="keyword">for</span> ( Group group : sequence.getComposingGroups() ) &#123;</span><br><span class="line">      <span class="keyword">int</span> numberOfViolations = context.getFailingConstraints().size();</span><br><span class="line">      valueContext.setCurrentGroup( group.getDefiningClass() );</span><br><span class="line"></span><br><span class="line">      validateConstraintsForCurrentGroup( context, valueContext );</span><br><span class="line">      <span class="keyword">if</span> ( shouldFailFast( context ) ) &#123;</span><br><span class="line">        <span class="keyword">return</span> context.getFailingConstraints();</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">// 级联的</span></span><br><span class="line">      validateCascadedConstraints( context, valueContext );</span><br><span class="line">      <span class="keyword">if</span> ( shouldFailFast( context ) ) &#123;</span><br><span class="line">        <span class="keyword">return</span> context.getFailingConstraints();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ( context.getFailingConstraints().size() &gt; numberOfViolations ) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> context.getFailingConstraints();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="嵌套类型"><a href="#嵌套类型" class="headerlink" title="嵌套类型"></a>嵌套类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider#findPropertyMetaData</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ConstrainedField <span class="title">findPropertyMetaData</span><span class="params">(Field field)</span> </span>&#123;</span><br><span class="line">Set&lt;MetaConstraint&lt;?&gt;&gt; constraints = convertToMetaConstraints(</span><br><span class="line">findConstraints( field, ElementType.FIELD ),</span><br><span class="line">field</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">Map&lt;Class&lt;?&gt;, Class&lt;?&gt;&gt; groupConversions = getGroupConversions(</span><br><span class="line">field.getAnnotation( ConvertGroup<span class="class">.<span class="keyword">class</span> ),</span></span><br><span class="line"><span class="class"><span class="title">field</span>.<span class="title">getAnnotation</span>( <span class="title">ConvertGroup</span>.<span class="title">List</span>.<span class="title">class</span> )</span></span><br><span class="line"><span class="class">)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 被@Valid修饰的就认为是嵌套的</span></span><br><span class="line"><span class="keyword">boolean</span> isCascading = field.isAnnotationPresent( Valid<span class="class">.<span class="keyword">class</span> )</span>;</span><br><span class="line"><span class="keyword">boolean</span> requiresUnwrapping = field.isAnnotationPresent( UnwrapValidatedValue<span class="class">.<span class="keyword">class</span> )</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ConstrainedField(</span><br><span class="line">ConfigurationSource.ANNOTATION,</span><br><span class="line">ConstraintLocation.forProperty( field ),</span><br><span class="line">constraints,</span><br><span class="line">groupConversions,</span><br><span class="line">isCascading,</span><br><span class="line">requiresUnwrapping</span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法级别的验证"><a href="#方法级别的验证" class="headerlink" title="方法级别的验证"></a>方法级别的验证</h2><p>方法级别的验证是通过<code>ExecutableValidator</code>中的相关接口来实现的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;T&gt; Set&lt;ConstraintViolation&lt;T&gt;&gt; validateParameters(T object,</span><br><span class="line">   Method method,</span><br><span class="line">   Object[] parameterValues,</span><br><span class="line">   Class&lt;?&gt;... groups);</span><br><span class="line"></span><br><span class="line">&lt;T&gt; Set&lt;ConstraintViolation&lt;T&gt;&gt; validateReturnValue(T object,</span><br><span class="line">Method method,</span><br><span class="line">Object returnValue,</span><br><span class="line">Class&lt;?&gt;... groups);</span><br><span class="line"></span><br><span class="line">&lt;T&gt; Set&lt;ConstraintViolation&lt;T&gt;&gt; validateConstructorParameters(Constructor&lt;? extends T&gt; constructor,</span><br><span class="line">  Object[] parameterValues,</span><br><span class="line">  Class&lt;?&gt;... groups);</span><br><span class="line"></span><br><span class="line">&lt;T&gt; Set&lt;ConstraintViolation&lt;T&gt;&gt; validateConstructorReturnValue(Constructor&lt;? extends T&gt; constructor,</span><br><span class="line">   T createdObject,</span><br><span class="line">   Class&lt;?&gt;... groups);</span><br></pre></td></tr></table></figure><p>hibernate中对应的实现还在<code>ValidatorImpl</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.hibernate.validator.internal.engine.ValidatorImpl#validateParameters(T, java.lang.reflect.Executable, java.lang.Object[], java.lang.Class&lt;?&gt;...)</span></span><br><span class="line"><span class="keyword">private</span> &lt;T&gt; Set&lt;ConstraintViolation&lt;T&gt;&gt; validateParameters(T object, Executable executable, Object[] parameterValues, Class&lt;?&gt;... groups) &#123;</span><br><span class="line">sanityCheckGroups( groups );</span><br><span class="line"></span><br><span class="line">ValidationContext&lt;T&gt; validationContext = getValidationContextBuilder().forValidateParameters(</span><br><span class="line">validatorScopedContext.getParameterNameProvider(),</span><br><span class="line">object,</span><br><span class="line">executable,</span><br><span class="line">parameterValues</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 没有注解约束的直接返回</span></span><br><span class="line"><span class="keyword">if</span> (!validationContext.getRootBeanMetaData().hasConstraints() ) &#123;</span><br><span class="line"><span class="keyword">return</span> Collections.emptySet();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 决定校验组</span></span><br><span class="line">ValidationOrder validationOrder = determineGroupValidationOrder( groups );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 校验逻辑</span></span><br><span class="line">validateParametersInContext( validationContext, parameterValues, validationOrder );</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> validationContext.getFailingConstraints();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>元数据的获取方式扩展了下，后续的校验流程和bean属性的validate类似：</p><img src="/2021/03/05/spring-validator/image-20210305112537440.png"><h2 id="ConstraintValidator"><a href="#ConstraintValidator" class="headerlink" title="ConstraintValidator"></a>ConstraintValidator</h2><p>约束逻辑应该实现的接口</p><ul><li><p>对应的工厂类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javax.validation.ConstraintValidatorFactory</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConstraintValidatorFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&lt;T extends ConstraintValidator&lt;?, ?&gt;&gt; <span class="function">T <span class="title">getInstance</span><span class="params">(Class&lt;T&gt; key)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">releaseInstance</span><span class="params">(ConstraintValidator&lt;?, ?&gt; instance)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口定义：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">A</span> <span class="keyword">extends</span> <span class="title">Annotation</span>, <span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(A constraintAnnotation)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(T value, ConstraintValidatorContext context)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个接口定义了具体的校验逻辑的实现，可以实现这个接口，添加自己的校验逻辑。</p><p><code>NotBlankValidator</code>的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotBlankValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">NotBlank</span>, <span class="title">CharSequence</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Checks that the character sequence is not &#123;<span class="doctag">@code</span> null&#125; nor empty after removing any leading or trailing</span></span><br><span class="line"><span class="comment"> * whitespace.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> charSequence the character sequence to validate</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> constraintValidatorContext context in which the constraint is evaluated</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> returns &#123;<span class="doctag">@code</span> true&#125; if the string is not &#123;<span class="doctag">@code</span> null&#125; and the length of the trimmed</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> charSequence&#125; is strictly superior to 0, &#123;<span class="doctag">@code</span> false&#125; otherwise</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(CharSequence charSequence, ConstraintValidatorContext constraintValidatorContext)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ( charSequence == <span class="keyword">null</span> ) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> charSequence.toString().trim().length() &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注解和实现的映射关系</li></ul><p>注解和具体的实现类的映射维护在<code>org.hibernate.validator.internal.metadata.core.ConstraintHelper</code>:</p><img src="/2021/03/05/spring-validator/image-20210304114621014.png"><p>这个映射关系，在<code>MetaDataProvider</code>处理的时候，就已经映射好，放在了<code>ConstraintDescriptor</code>中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl#ConstraintDescriptorImpl(org.hibernate.validator.internal.metadata.core.ConstraintHelper, java.lang.reflect.Member, org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor&lt;T&gt;, java.lang.annotation.ElementType, java.lang.Class&lt;?&gt;, org.hibernate.validator.internal.metadata.core.ConstraintOrigin, org.hibernate.validator.internal.metadata.descriptor.ConstraintDescriptorImpl.ConstraintType)</span></span><br><span class="line"><span class="keyword">this</span>.constraintValidatorClasses = constraintHelper.getAllValidatorDescriptors( annotationDescriptor.getType() )</span><br><span class="line">.stream()</span><br><span class="line">.map( ConstraintValidatorDescriptor::getValidatorClass )</span><br><span class="line">.collect( Collectors.collectingAndThen( Collectors.toList(), CollectionHelper::toImmutableList ) );</span><br></pre></td></tr></table></figure><p>后面再根据，具体的值的类型来筛选，具体的<code>ConstraintValidator</code></p><p>annotation –&gt; ConstraintValidator  + 值的实际类型 –&gt; ConstraintValidator的具体实现;</p><p>也可以直接在注解中指定：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;METHOD, FIELD, ANNOTATION_TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RUNTIME)</span><br><span class="line"><span class="comment">// 指定具体的ConstraintValidator</span></span><br><span class="line"><span class="meta">@Constraint</span>(validatedBy = CheckCaseValidator<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Documented</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">CheckCase</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> "</span>&#123;com.mycompany.constraints.checkcase&#125;<span class="string">";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Class&lt;?&gt;[] groups() default &#123;&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Class&lt;? extends Payload&gt;[] payload() default &#123;&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    CaseMode value();</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="版本升级的坑"><a href="#版本升级的坑" class="headerlink" title="版本升级的坑"></a>版本升级的坑</h2><ul><li><p>maven坐标变了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">version=6.0.10.Final</span><br><span class="line">groupId=org.hibernate.validator</span><br><span class="line">artifactId=hibernate-validator</span><br><span class="line"></span><br><span class="line">version=5.1.3.Final</span><br><span class="line">groupId=org.hibernate</span><br><span class="line">artifactId=hibernate-validator</span><br></pre></td></tr></table></figure><p>俩groupId不一样，有的时候会造成一些冲突。</p></li></ul><h1 id="Spring集成"><a href="#Spring集成" class="headerlink" title="Spring集成"></a>Spring集成</h1><h2 id="Spring-mvc"><a href="#Spring-mvc" class="headerlink" title="Spring mvc"></a>Spring mvc</h2><blockquote><p> By default use of <code>@EnableWebMvc</code> or <code>&lt;mvc:annotation-driven&gt;</code> automatically registers Bean Validation support in Spring MVC through the <code>LocalValidatorFactoryBean</code> when a Bean Validation provider such as Hibernate Validator is detected on the classpath.</p></blockquote><h3 id="xml配置"><a href="#xml配置" class="headerlink" title="xml配置"></a>xml配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">validator</span>=<span class="string">"globalValidator"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>初始化路径：</p><img src="/2021/03/05/spring-validator/image-20210304225708264.png"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcNamespaceHandler</span> <span class="keyword">extends</span> <span class="title">NamespaceHandlerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">registerBeanDefinitionParser(<span class="string">"annotation-driven"</span>, <span class="keyword">new</span> AnnotationDrivenBeanDefinitionParser());</span><br><span class="line">    <span class="comment">// 省略。。。</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>AnnotationDrivenBeanDefinitionParser</code>这个类中会注册许多默认的配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser#parse</span></span><br><span class="line"><span class="comment">// 这里引入了validator</span></span><br><span class="line">RuntimeBeanReference validator = getValidator(element, source, parserContext);</span><br><span class="line"><span class="comment">// WebBindingInitializer，用来初始化webDataBinder</span></span><br><span class="line">RootBeanDefinition bindingDef = <span class="keyword">new</span> RootBeanDefinition(ConfigurableWebBindingInitializer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">bindingDef.setSource(source);</span><br><span class="line">bindingDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">bindingDef.getPropertyValues().add(<span class="string">"conversionService"</span>, conversionService);</span><br><span class="line">bindingDef.getPropertyValues().add(<span class="string">"validator"</span>, validator);</span><br><span class="line">bindingDef.getPropertyValues().add(<span class="string">"messageCodesResolver"</span>, messageCodesResolver);</span><br><span class="line"></span><br><span class="line"><span class="comment">// RequestMappingHandlerAdapter负责请求的处理，可以看前面的mvc源码解析</span></span><br><span class="line">RootBeanDefinition handlerAdapterDef = <span class="keyword">new</span> RootBeanDefinition(RequestMappingHandlerAdapter<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">// initializer 传递给了 RequestMappingHandlerAdapter</span></span><br><span class="line">handlerAdapterDef.getPropertyValues().add(<span class="string">"webBindingInitializer"</span>, bindingDef);</span><br></pre></td></tr></table></figure><p><code>getValidator</code>生成了validator的配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser#getValidator</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> javaxValidationPresent =</span><br><span class="line">ClassUtils.isPresent(<span class="string">"javax.validation.Validator"</span>, AnnotationDrivenBeanDefinitionParser<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>())</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> RuntimeBeanReference <span class="title">getValidator</span><span class="params">(Element element, Object source, ParserContext parserContext)</span> </span>&#123;</span><br><span class="line"><span class="comment">// xml配置里可以指定一个validator作为全局的，如果指定了，这里就返回指定的</span></span><br><span class="line">  <span class="keyword">if</span> (element.hasAttribute(<span class="string">"validator"</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> RuntimeBeanReference(element.getAttribute(<span class="string">"validator"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (javaxValidationPresent) &#123;</span><br><span class="line">    RootBeanDefinition validatorDef = <span class="keyword">new</span> RootBeanDefinition(</span><br><span class="line">      <span class="string">"org.springframework.validation.beanvalidation.OptionalValidatorFactoryBean"</span>);</span><br><span class="line">    validatorDef.setSource(source);</span><br><span class="line">    validatorDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">    String validatorName = parserContext.getReaderContext().registerWithGeneratedName(validatorDef);</span><br><span class="line">    parserContext.registerComponent(<span class="keyword">new</span> BeanComponentDefinition(validatorDef, validatorName));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> RuntimeBeanReference(validatorName);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到默认注入的是<code>OptionalValidatorFactoryBean</code>它是<code>LocalValidatorFactoryBean</code>的子类，跟jsr-303的validator对接的代码都在<code>LocalValidatorFactoryBean</code>中:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.validation.beanvalidation.LocalValidatorFactoryBean#afterPropertiesSet</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Validator <span class="title">getValidator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Assert.notNull(<span class="keyword">this</span>.validatorFactory, <span class="string">"No target ValidatorFactory set"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.validatorFactory.getValidator();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化完成之后，就可以拿到validator了，底层可能就是hibernate实现的validator。</p><h3 id="Java配置"><a href="#Java配置" class="headerlink" title="Java配置"></a>Java配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Validator <span class="title">getValidator</span><span class="params">()</span></span>; &#123;</span><br><span class="line">        <span class="comment">// return "global" validator</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java的配置和xml的作用差不多，只是java的配置是用java的代码写的，先看注解的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(DelegatingWebMvcConfiguration<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableWebMvc</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>import了一个配置类<code>DelegatingWebMvcConfiguration</code>, 它继承自<code>WebMvcConfigurationSupport</code>, 这个配置类注册了许多默认的bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport</span></span><br><span class="line"><span class="comment">// org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport#requestMappingHandlerAdapter</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RequestMappingHandlerAdapter <span class="title">requestMappingHandlerAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">RequestMappingHandlerAdapter adapter = createRequestMappingHandlerAdapter();</span><br><span class="line"><span class="comment">// WebBindingInitializer</span></span><br><span class="line">adapter.setWebBindingInitializer(getConfigurableWebBindingInitializer());</span><br><span class="line"><span class="comment">// 省略</span></span><br><span class="line"><span class="keyword">return</span> adapter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport#getConfigurableWebBindingInitializer</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return the &#123;<span class="doctag">@link</span> ConfigurableWebBindingInitializer&#125; to use for</span></span><br><span class="line"><span class="comment"> * initializing all &#123;<span class="doctag">@link</span> WebDataBinder&#125; instances.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ConfigurableWebBindingInitializer <span class="title">getConfigurableWebBindingInitializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ConfigurableWebBindingInitializer initializer = <span class="keyword">new</span> ConfigurableWebBindingInitializer();</span><br><span class="line">initializer.setConversionService(mvcConversionService());</span><br><span class="line">    <span class="comment">// 这里关联了validator</span></span><br><span class="line">initializer.setValidator(mvcValidator());</span><br><span class="line">initializer.setMessageCodesResolver(getMessageCodesResolver());</span><br><span class="line"><span class="keyword">return</span> initializer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport#mvcValidator</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Validator <span class="title">mvcValidator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 子类可以覆写，</span></span><br><span class="line">Validator validator = getValidator();</span><br><span class="line"><span class="keyword">if</span> (validator == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (ClassUtils.isPresent(<span class="string">"javax.validation.Validator"</span>, getClass().getClassLoader())) &#123;</span><br><span class="line">Class&lt;?&gt; clazz;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 默认的Validator实现类</span></span><br><span class="line">String className = <span class="string">"org.springframework.validation.beanvalidation.OptionalValidatorFactoryBean"</span>;</span><br><span class="line">clazz = ClassUtils.forName(className, WebMvcConfigurationSupport<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>())</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanInitializationException(<span class="string">"Could not find default validator class"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (LinkageError ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BeanInitializationException(<span class="string">"Could not load default validator class"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line">validator = (Validator) BeanUtils.instantiateClass(clazz);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">validator = <span class="keyword">new</span> NoOpValidator();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> validator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="请求处理"><a href="#请求处理" class="headerlink" title="请求处理"></a>请求处理</h3><p>初始化完成之后，就是请求来时的处理了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#invokeHandlerMethod</span></span><br><span class="line"><span class="comment">// 前面配置的WebBindingInitializer，会在这一步传递给WebDataBinderFactory</span></span><br><span class="line">WebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);</span><br><span class="line">ServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);</span><br><span class="line">invocableMethod.setDataBinderFactory(binderFactory);</span><br><span class="line"><span class="comment">// 省略</span></span><br><span class="line">invocableMethod.invokeAndHandle(webRequest, mavContainer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod#invokeAndHandle</span></span><br><span class="line">Object returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);</span><br><span class="line"><span class="comment">// org.springframework.web.method.support.InvocableHandlerMethod#invokeForRequest</span></span><br><span class="line">Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);</span><br><span class="line"><span class="comment">// org.springframework.web.method.support.InvocableHandlerMethod#getMethodArgumentValues</span></span><br><span class="line"><span class="comment">// 这里就转交给了argumentResolvers （HandlerMethodArgumentResolver），来处理</span></span><br><span class="line">args[i] = <span class="keyword">this</span>.argumentResolvers.resolveArgument(</span><br><span class="line">  parameter, mavContainer, request, <span class="keyword">this</span>.dataBinderFactory);</span><br></pre></td></tr></table></figure><p>类型转换和校验是在<code>org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver#validateIfApplicable</code>:</p><img src="/2021/03/05/spring-validator/image-20210304231222896.png"><p>以处理json/xml的<code>RequestResponseBodyMethodProcessor</code>为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Throws MethodArgumentNotValidException if validation fails.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> HttpMessageNotReadableException if &#123;<span class="doctag">@link</span> RequestBody#required()&#125;</span></span><br><span class="line"><span class="comment"> * is &#123;<span class="doctag">@code</span> true&#125; and there is no body content or if there is no suitable</span></span><br><span class="line"><span class="comment"> * converter to read the content with.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, ModelAndViewContainer mavContainer,</span></span></span><br><span class="line"><span class="function"><span class="params">NativeWebRequest webRequest, WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">parameter = parameter.nestedIfOptional();</span><br><span class="line">Object arg = readWithMessageConverters(webRequest, parameter, parameter.getNestedGenericParameterType());</span><br><span class="line">String name = Conventions.getVariableNameForParameter(parameter);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据之前绑定的WebDataBinderFactory，初始化WebDataBinder；Validator就传递给了WebDataBinder</span></span><br><span class="line">    <span class="comment">// 注意binder是每次都创建的，他是有状态的</span></span><br><span class="line">WebDataBinder binder = binderFactory.createBinder(webRequest, arg, name);</span><br><span class="line"><span class="keyword">if</span> (arg != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 校验参数</span></span><br><span class="line">validateIfApplicable(binder, parameter);</span><br><span class="line">      <span class="comment">// 处理校验的结果</span></span><br><span class="line"><span class="keyword">if</span> (binder.getBindingResult().hasErrors() &amp;&amp; isBindExceptionRequired(binder, parameter)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> MethodArgumentNotValidException(parameter, binder.getBindingResult());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">mavContainer.addAttribute(BindingResult.MODEL_KEY_PREFIX + name, binder.getBindingResult());</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> adaptArgumentIfNecessary(arg, parameter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法级别的校验"><a href="#方法级别的校验" class="headerlink" title="方法级别的校验"></a>方法级别的校验</h2><blockquote><p>The method validation feature supported by Bean Validation 1.1, and as a custom extension</p><p>also by Hibernate Validator 4.3, can be integrated into a Spring context through a</p><p>MethodValidationPostProcessor bean definition:</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"localValidatorFactoryBeanTest"</span> <span class="attr">class</span>=<span class="string">"org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.validation.beanvalidation.MethodValidationPostProcessor"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validator"</span> <span class="attr">ref</span>=<span class="string">"localValidatorFactoryBeanTest"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>In order to be eligible for Spring-driven method validation, all target classes need to be annotated</p><p>with Spring’s @Validated annotation, optionally declaring the validation groups to use. </p></blockquote><p>条件：</p><ul><li>类需要标注<code>@Validated</code></li><li>引入<code>MethodValidationPostProcessor</code>, validator也可以不指定，spring会创建默认的</li><li>方法得是protected或者public的（不然拦截不到）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/mvc"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleController</span> </span>&#123; </span><br><span class="line">  </span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">echo</span><span class="params">(@Min(<span class="number">100</span>)</span> @<span class="title">RequestParam</span><span class="params">(<span class="string">"id"</span>)</span> Integer id) </span>&#123;</span><br><span class="line">        log.info(<span class="string">"id=&#123;&#125;"</span>, id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>从<code>MethodValidationPostProcessor</code>入手，它间接地实现了<code>BeanPostProcessor</code>， 在bean初始化完成之后，做了拦截：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Class&lt;? extends Annotation&gt; validatedAnnotationType = Validated<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"><span class="comment">// org.springframework.validation.beanvalidation.MethodValidationPostProcessor#afterPropertiesSet</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 创建了一个切面，切入的条件是被@Validated标识的类</span></span><br><span class="line">  Pointcut pointcut = <span class="keyword">new</span> AnnotationMatchingPointcut(<span class="keyword">this</span>.validatedAnnotationType, <span class="keyword">true</span>);</span><br><span class="line">  <span class="comment">// 创建切面对应的advisor</span></span><br><span class="line">  <span class="keyword">this</span>.advisor = <span class="keyword">new</span> DefaultPointcutAdvisor(pointcut, createMethodValidationAdvice(<span class="keyword">this</span>.validator));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Advice <span class="title">createMethodValidationAdvice</span><span class="params">(Validator validator)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 用传入的JSR-303的创建一个Method的拦截器，或者基于默认的</span></span><br><span class="line">  <span class="keyword">return</span> (validator != <span class="keyword">null</span> ? <span class="keyword">new</span> MethodValidationInterceptor(validator) : <span class="keyword">new</span> MethodValidationInterceptor());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MethodValidationInterceptor</code>就是对调用方法做了一层拦截，在这里实现了具体校验逻辑的接入：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.validation.beanvalidation.MethodValidationInterceptor#invoke</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">  Class&lt;?&gt;[] groups = determineValidationGroups(invocation);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 反射拿到的方法，主要是看底层的validator是否支持JSR-349</span></span><br><span class="line">  <span class="keyword">if</span> (forExecutablesMethod != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// Standard Bean Validation 1.1 API</span></span><br><span class="line">    Object execVal = ReflectionUtils.invokeMethod(forExecutablesMethod, <span class="keyword">this</span>.validator);</span><br><span class="line">    Method methodToValidate = invocation.getMethod();</span><br><span class="line">    Set&lt;ConstraintViolation&lt;?&gt;&gt; result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 反射调用validator的参数校验的方法</span></span><br><span class="line">      result = (Set&lt;ConstraintViolation&lt;?&gt;&gt;) ReflectionUtils.invokeMethod(validateParametersMethod,</span><br><span class="line">                                                                          execVal, invocation.getThis(), methodToValidate, invocation.getArguments(), groups);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class="line">      <span class="comment">// Probably a generic type mismatch between interface and impl as reported in SPR-12237 / HV-1011</span></span><br><span class="line">      <span class="comment">// Let's try to find the bridged method on the implementation class...</span></span><br><span class="line">      methodToValidate = BridgeMethodResolver.findBridgedMethod(</span><br><span class="line">        ClassUtils.getMostSpecificMethod(invocation.getMethod(), invocation.getThis().getClass()));</span><br><span class="line">      result = (Set&lt;ConstraintViolation&lt;?&gt;&gt;) ReflectionUtils.invokeMethod(validateParametersMethod,</span><br><span class="line">                                                                          execVal, invocation.getThis(), methodToValidate, invocation.getArguments(), groups);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!result.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ConstraintViolationException(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 调用方法的实际处理逻辑</span></span><br><span class="line">    Object returnValue = invocation.proceed();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反射调用validator的返回值校验的方法</span></span><br><span class="line">    result = (Set&lt;ConstraintViolation&lt;?&gt;&gt;) ReflectionUtils.invokeMethod(validateReturnValueMethod,</span><br><span class="line">                                                                        execVal, invocation.getThis(), methodToValidate, returnValue, groups);</span><br><span class="line">    <span class="keyword">if</span> (!result.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> ConstraintViolationException(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> returnValue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Hibernate Validator 4.3's native API</span></span><br><span class="line">    <span class="keyword">return</span> HibernateValidatorDelegate.invokeWithinValidation(invocation, <span class="keyword">this</span>.validator, groups);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring管理的bean的校验"><a href="#Spring管理的bean的校验" class="headerlink" title="Spring管理的bean的校验"></a>Spring管理的bean的校验</h2><p>spring提供了<code>**BeanValidationPostProcessor**</code>, 可以校验bean的属性是否正确注入了。这个process默认没有包含，如需用到，需要手动添加。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.validation.beanvalidation.BeanValidationPostProcessor</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Simple &#123;<span class="doctag">@link</span> BeanPostProcessor&#125; that checks JSR-303 constraint annotations</span></span><br><span class="line"><span class="comment"> * in Spring-managed beans, throwing an initialization exception in case of</span></span><br><span class="line"><span class="comment"> * constraint violations right before calling the bean's init method (if any).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 3.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanValidationPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span>, <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.afterInitialization) &#123;</span><br><span class="line">        doValidate(bean);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.afterInitialization) &#123;</span><br><span class="line">        doValidate(bean);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> bean;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Perform validation of the given bean.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bean the bean instance to validate</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> javax.validation.Validator#validate</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doValidate</span><span class="params">(Object bean)</span> </span>&#123;</span><br><span class="line">  Set&lt;ConstraintViolation&lt;Object&gt;&gt; result = <span class="keyword">this</span>.validator.validate(bean);</span><br><span class="line">  <span class="keyword">if</span> (!result.isEmpty()) &#123;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">"Bean state is invalid: "</span>);</span><br><span class="line">    <span class="keyword">for</span> (Iterator&lt;ConstraintViolation&lt;Object&gt;&gt; it = result.iterator(); it.hasNext();) &#123;</span><br><span class="line">      ConstraintViolation&lt;Object&gt; violation = it.next();</span><br><span class="line">      sb.append(violation.getPropertyPath()).append(<span class="string">" - "</span>).append(violation.getMessage());</span><br><span class="line">      <span class="keyword">if</span> (it.hasNext()) &#123;</span><br><span class="line">        sb.append(<span class="string">"; "</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BeanInitializationException(sb.toString());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; Caused by: org.springframework.beans.factory.BeanInitializationException: Bean state is invalid: age - 最小不能小于10; id - 不能为null</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>​        bean validation的标准有两个，一个JSR-303，主要针对bean属性的校验；JSR-349引入了方法入参和返回值的校验。hibernate-validator实现了bean validation的标准；spring则包装和扩展了一层，让我们用起来更加舒服。</p><p>​        <code>@Valid</code>注解是javax中的注解，也是标准的一部分，用来做嵌套的校验；<code>@Validated</code>是spring的注解，主要是为了做方法参数和返回值的校验，用来生成方法的拦截器。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://my.oschina.net/u/3211616/blog/821343" rel="external nofollow noopener noreferrer" target="_blank">详解Bean Validation - 阅读的伟哥的个人空间 - 开源中国</a></li><li><a href="https://my.oschina.net/zzuqiang/blog/761862" rel="external nofollow noopener noreferrer" target="_blank">JSR303、349 -Bean Validation 数据校验规范使用说明和验证流程源码分析 - zzuqiang的个人空间 - 开源中国</a></li><li><a href="http://docs.jboss.org/hibernate/validator/4.2/reference/zh-CN/html_single/" rel="external nofollow noopener noreferrer" target="_blank">Hibernate Validator</a></li><li><a href="https://stackoverflow.com/questions/7337046/tomcat-classloading-doesnt-seem-to-behave-as-documented" rel="external nofollow noopener noreferrer" target="_blank">java - Tomcat classloading doesn’t seem to behave as documented - Stack Overflow</a></li><li><a href="https://beanvalidation.org/1.0/spec/" rel="external nofollow noopener noreferrer" target="_blank">JSR 303: Bean Validation</a></li><li><a href="https://beanvalidation.org/1.1/" rel="external nofollow noopener noreferrer" target="_blank">Jakarta Bean Validation - Bean Validation 1.1 (JSR 349)</a></li><li><a href="https://docs.spring.io/spring-framework/docs/4.2.x/spring-framework-reference/html/mvc.html#mvc-config-validation" rel="external nofollow noopener noreferrer" target="_blank">21. Web MVC framework</a></li><li><a href="https://blog.csdn.net/f641385712/article/details/97402946" rel="external nofollow noopener noreferrer" target="_blank">Spring方法级别数据校验：@Validated + MethodValidationPostProcessor优雅的完成数据校验动作【享学Spring】_YourBatman-CSDN博客</a></li><li><a href="https://docs.jboss.org/hibernate/validator/5.1/reference/zh-CN/html/" rel="external nofollow noopener noreferrer" target="_blank">Hibernate Validator</a></li><li><a href="https://fangjian0423.github.io/2017/06/24/spring-embedded-bean-post-processor/" rel="external nofollow noopener noreferrer" target="_blank">Spring内置的BeanPostProcessor总结 | Format’s Notes</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JSR-303和JSR-349&quot;&gt;&lt;a href=&quot;#JSR-303和JSR-349&quot; class=&quot;headerlink&quot; title=&quot;JSR-303和JSR-349&quot;&gt;&lt;/a&gt;JSR-303和JSR-349&lt;/h1&gt;&lt;h2 id=&quot;jsr-303：——Bea
      
    
    </summary>
    
      <category term="spring" scheme="http://qsli.github.io/categories/spring/"/>
    
    
      <category term="spring-validator" scheme="http://qsli.github.io/tags/spring-validator/"/>
    
  </entry>
  
  <entry>
    <title>druid踩坑记录</title>
    <link href="http://qsli.github.io/2020/08/04/druid-pitfall/"/>
    <id>http://qsli.github.io/2020/08/04/druid-pitfall/</id>
    <published>2020-08-04T08:16:21.000Z</published>
    <updated>2021-11-13T17:53:22.250Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Druid配置踩坑记录"><a href="#Druid配置踩坑记录" class="headerlink" title="Druid配置踩坑记录"></a>Druid配置踩坑记录</h3><p>我用的druid版本 <code>1.1.10</code></p><h4 id="maxWait和公平锁"><a href="#maxWait和公平锁" class="headerlink" title="maxWait和公平锁"></a>maxWait和公平锁</h4><p>设置maxWait之后，druid默认开启了公平锁，公平锁对性能影响比较大。</p><p>可以看下有赞的压测结论：</p><img src="/2020/08/04/druid-pitfall/640.png"><img src="/2020/08/04/druid-pitfall/image-20200804160210813.png"><p>使用非公平锁性能可以提升70%，但是会导致有些连接的饥饿问题，这个需要自己权衡下。</p><h4 id="testOnBorrow、testWhileIdle、testOnReturn和mysql-connector-java-8-x"><a href="#testOnBorrow、testWhileIdle、testOnReturn和mysql-connector-java-8-x" class="headerlink" title="testOnBorrow、testWhileIdle、testOnReturn和mysql-connector-java 8.x+"></a>testOnBorrow、testWhileIdle、testOnReturn和mysql-connector-java 8.x+</h4><p>这个都是在不同的节点validate连接是否有效的，都会走到同一处逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// com.alibaba.druid.pool.DruidAbstractDataSource#testConnectionInternal(com.alibaba.druid.pool.DruidConnectionHolder, java.sql.Connection)</span></span><br><span class="line"><span class="keyword">if</span> (valid &amp;&amp; isMySql) &#123; <span class="comment">// unexcepted branch</span></span><br><span class="line">  <span class="comment">// 问题出在这里</span></span><br><span class="line">  <span class="keyword">long</span> lastPacketReceivedTimeMs = MySqlUtils.getLastPacketReceivedTimeMs(conn);</span><br><span class="line">  <span class="keyword">if</span> (lastPacketReceivedTimeMs &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">long</span> mysqlIdleMillis = currentTimeMillis - lastPacketReceivedTimeMs;</span><br><span class="line">    <span class="keyword">if</span> (lastPacketReceivedTimeMs &gt; <span class="number">0</span> <span class="comment">//</span></span><br><span class="line">        &amp;&amp; mysqlIdleMillis &gt;= timeBetweenEvictionRunsMillis) &#123;</span><br><span class="line">      discardConnection(conn);</span><br><span class="line">      String errorMsg = <span class="string">"discard long time none received connection. "</span></span><br><span class="line">        + <span class="string">", jdbcUrl : "</span> + jdbcUrl</span><br><span class="line">        + <span class="string">", jdbcUrl : "</span> + jdbcUrl</span><br><span class="line">        + <span class="string">", lastPacketReceivedIdleMillis : "</span> + mysqlIdleMillis;</span><br><span class="line">      LOG.error(errorMsg);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// com.alibaba.druid.util.MySqlUtils#getLastPacketReceivedTimeMs</span></span><br><span class="line"><span class="keyword">if</span> (class_connectionImpl == <span class="keyword">null</span> &amp;&amp; !class_connectionImpl_Error) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 这个类在8.x里面没有，但是loadClass内部catch住了ClassNotFoundException, 而且ignore了</span></span><br><span class="line">    <span class="comment">// 所以上面的if，会一直成立，每次都会触发这个类的加载</span></span><br><span class="line">    class_connectionImpl = Utils.loadClass(<span class="string">"com.mysql.jdbc.MySQLConnection"</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Throwable error)&#123;</span><br><span class="line">    class_connectionImpl_Error = <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// com.alibaba.druid.util.Utils#loadClass</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; loadClass(String className) &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (className == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Class.forName(className);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">          <span class="comment">// 这里忽略了。。。</span></span><br><span class="line">            <span class="comment">// skip</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ClassLoader ctxClassLoader = Thread.currentThread().getContextClassLoader();</span><br><span class="line">        <span class="keyword">if</span> (ctxClassLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                clazz = ctxClassLoader.loadClass(className);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="comment">// skip</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们的应用设置了testWhileIdle, 所以时不时的会有tomcat的thread busy:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"query-order-async-task-15"</span> Id=663 BLOCKED</span><br><span class="line">at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1152)</span><br><span class="line">at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1119)</span><br><span class="line">at java.lang.Class.forName0(Native Method)</span><br><span class="line">at java.lang.Class.forName(Class.java:264)</span><br><span class="line">at com.alibaba.druid.util.Utils.loadClass(Utils.java:203)</span><br><span class="line">at com.alibaba.druid.util.MySqlUtils.getLastPacketReceivedTimeMs(MySqlUtils.java:351)</span><br><span class="line">--</span><br><span class="line"><span class="string">"http-nio-9301-exec-103"</span> Id=567 BLOCKED</span><br><span class="line">at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1152)</span><br><span class="line">at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1119)</span><br><span class="line">at java.lang.Class.forName0(Native Method)</span><br><span class="line">at java.lang.Class.forName(Class.java:264)</span><br><span class="line">at com.alibaba.druid.util.Utils.loadClass(Utils.java:203)</span><br><span class="line">at com.alibaba.druid.util.MySqlUtils.getLastPacketReceivedTimeMs(MySqlUtils.java:351)</span><br><span class="line">--</span><br><span class="line"><span class="string">"http-nio-9301-exec-124"</span> Id=863 BLOCKED</span><br><span class="line">at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1152)</span><br><span class="line">at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1119)</span><br><span class="line">at java.lang.Class.forName0(Native Method)</span><br><span class="line">at java.lang.Class.forName(Class.java:264)</span><br><span class="line">at com.alibaba.druid.util.Utils.loadClass(Utils.java:203)</span><br><span class="line">at com.alibaba.druid.util.MySqlUtils.getLastPacketReceivedTimeMs(MySqlUtils.java:351)</span><br><span class="line">--</span><br><span class="line"><span class="string">"query-order-async-task-0"</span> Id=641 BLOCKED</span><br><span class="line">at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1152)</span><br><span class="line">at org.apache.catalina.loader.WebappClassLoaderBase.loadClass(WebappClassLoaderBase.java:1119)</span><br><span class="line">at java.lang.Class.forName0(Native Method)</span><br><span class="line">at java.lang.Class.forName(Class.java:264)</span><br><span class="line">at com.alibaba.druid.util.Utils.loadClass(Utils.java:203)</span><br><span class="line">at com.alibaba.druid.util.MySqlUtils.getLastPacketReceivedTimeMs(MySqlUtils.java:351)</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li><a href="https://mp.weixin.qq.com/s/RaiU9_ioWHvomZLLKuSuGw" rel="external nofollow noopener noreferrer" target="_blank">有赞DB连接池性能优化</a></li><li><a href="https://github.com/alibaba/druid/wiki/Druid%E9%94%81%E7%9A%84%E5%85%AC%E5%B9%B3%E6%A8%A1%E5%BC%8F%E9%97%AE%E9%A2%98" rel="external nofollow noopener noreferrer" target="_blank">Druid锁的公平模式问题 · alibaba/druid Wiki</a></li><li><a href="https://github.com/brettwooldridge/HikariCP/issues/232" rel="external nofollow noopener noreferrer" target="_blank">alibaba/druid pool analysis · Issue #232 · brettwooldridge/HikariCP</a></li><li><a href="https://github.com/alibaba/druid/issues/3808" rel="external nofollow noopener noreferrer" target="_blank">com.alibaba:druid:1.1.20 MysqlUtils写死了mysql-connector-java 5.1版本的MySQLConnection类加载，导致线程阻塞，性能受限 · Issue #3808 · alibaba/druid</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Druid配置踩坑记录&quot;&gt;&lt;a href=&quot;#Druid配置踩坑记录&quot; class=&quot;headerlink&quot; title=&quot;Druid配置踩坑记录&quot;&gt;&lt;/a&gt;Druid配置踩坑记录&lt;/h3&gt;&lt;p&gt;我用的druid版本 &lt;code&gt;1.1.10&lt;/code&gt;&lt;/p&gt;
      
    
    </summary>
    
      <category term="druid" scheme="http://qsli.github.io/categories/druid/"/>
    
    
      <category term="pitfall mysql-connector-java 8.x" scheme="http://qsli.github.io/tags/pitfall-mysql-connector-java-8-x/"/>
    
  </entry>
  
  <entry>
    <title>网络连接的各种timeout</title>
    <link href="http://qsli.github.io/2020/07/26/timeout/"/>
    <id>http://qsli.github.io/2020/07/26/timeout/</id>
    <published>2020-07-25T17:16:52.000Z</published>
    <updated>2021-11-13T17:53:22.312Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><h3 id="SERVER端DROP-SYNC报文导致的重试"><a href="#SERVER端DROP-SYNC报文导致的重试" class="headerlink" title="SERVER端DROP SYNC报文导致的重试"></a>SERVER端DROP SYNC报文导致的重试</h3><p>tcp sync 报文默认重试6次，每次等待的时间逐渐变长，最长等待 2^0 + 2^1 + 2^2 + 2^3 + 2^4 + 2^5 + 2^6 = 127 s</p><h4 id="测试步骤"><a href="#测试步骤" class="headerlink" title="测试步骤"></a>测试步骤</h4><p>iptables 添加规则，drop掉TCP的sync包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 server]$ sudo iptables -A INPUT --protocol tcp --dport 7777 --syn -j DROP</span><br></pre></td></tr></table></figure><p>简单启动一个server，监听7777端口：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 server]$ nc -l 7777 &amp;</span><br></pre></td></tr></table></figure><p>tcpdump抓包，指定port 7777：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 server]$ sudo tcpdump -i lo -Ss0 -n src 127.0.0.1 and dst 127.0.0.1 and port 7777</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on lo, link-type EN10MB (Ethernet), capture size 65535 bytes</span><br><span class="line"></span><br><span class="line">19:36:44.372996 IP 127.0.0.1.51754 &gt; 127.0.0.1.cbt: Flags [S], seq 1069437352, win 43690, options [mss 65495,sackOK,TS val 517451113 ecr 0,nop,wscale 7], length 0</span><br><span class="line">19:36:45.375615 IP 127.0.0.1.51754 &gt; 127.0.0.1.cbt: Flags [S], seq 1069437352, win 43690, options [mss 65495,sackOK,TS val 517452116 ecr 0,nop,wscale 7], length 0</span><br><span class="line">19:36:47.379606 IP 127.0.0.1.51754 &gt; 127.0.0.1.cbt: Flags [S], seq 1069437352, win 43690, options [mss 65495,sackOK,TS val 517454120 ecr 0,nop,wscale 7], length 0</span><br><span class="line">19:36:51.387627 IP 127.0.0.1.51754 &gt; 127.0.0.1.cbt: Flags [S], seq 1069437352, win 43690, options [mss 65495,sackOK,TS val 517458128 ecr 0,nop,wscale 7], length 0</span><br><span class="line">19:36:59.403615 IP 127.0.0.1.51754 &gt; 127.0.0.1.cbt: Flags [S], seq 1069437352, win 43690, options [mss 65495,sackOK,TS val 517466144 ecr 0,nop,wscale 7], length 0</span><br><span class="line">19:37:15.435623 IP 127.0.0.1.51754 &gt; 127.0.0.1.cbt: Flags [S], seq 1069437352, win 43690, options [mss 65495,sackOK,TS val 517482176 ecr 0,nop,wscale 7], length 0</span><br><span class="line">19:37:47.499624 IP 127.0.0.1.51754 &gt; 127.0.0.1.cbt: Flags [S], seq 1069437352, win 43690, options [mss 65495,sackOK,TS val 517514240 ecr 0,nop,wscale 7], length 0</span><br></pre></td></tr></table></figure><p>客户端超时时间：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 server]$ time telnet  localhost 7777</span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">telnet: connect to address 127.0.0.1: Connection timed out</span><br><span class="line">Trying ::1...</span><br><span class="line">telnet: connect to address ::1: Network is unreachable</span><br><span class="line"></span><br><span class="line">real2m7.257s</span><br><span class="line">user0m0.000s</span><br><span class="line">sys0m0.002s</span><br></pre></td></tr></table></figure><p>做差得到重试的间隔， telnet总共请求了<code>2m7.257s</code>，从而可以倒推出最后一次等待的时间</p><table><thead><tr><th>时间</th><th>时间差</th></tr></thead><tbody><tr><td>19:36:44.372996</td><td></td></tr><tr><td>19:36:45.375615</td><td>0:00:01.01 （1s）</td></tr><tr><td>19:36:47.379606</td><td>0:00:02.02 （2s）</td></tr><tr><td>19:36:51.387627</td><td>0:00:04.04 （4s）</td></tr><tr><td>19:36:59.403615</td><td>0:00:08.08 （8s）</td></tr><tr><td>19:37:15.435623</td><td>0:00:16.16 （16s)</td></tr><tr><td>19:37:47.499624</td><td>0:00:32.32 （32s）</td></tr><tr><td></td><td>0:01:04.254 （64s）</td></tr></tbody></table><img src="/2020/07/26/timeout/tcp_timeout.png"><p>然后就超时了。</p><p>查看系统配置的超时重试次数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 server]$ sudo sysctl -a | grep tcp_syn_retries</span><br><span class="line">net.ipv4.tcp_syn_retries = 6</span><br></pre></td></tr></table></figure><p>带上第一次请求，正好七次跟我们的观测一致。</p><h4 id="恢复iptables"><a href="#恢复iptables" class="headerlink" title="恢复iptables"></a>恢复iptables</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 server]$ sudo iptables --list --line-numbers</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">num  target     prot opt <span class="built_in">source</span>               destination</span><br><span class="line">1    DROP       tcp  --  anywhere             anywhere             tcp dpt:cbt flags:FIN,SYN,RST,ACK/SYN</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">num  target     prot opt <span class="built_in">source</span>               destination</span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">num  target     prot opt <span class="built_in">source</span>               destination</span><br></pre></td></tr></table></figure><p>删除对应的规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 server]$ sudo iptables -D INPUT 1</span><br><span class="line">[qisheng.li@YD-Test-01 server]$ sudo iptables --list --line-numbers</span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">num  target     prot opt <span class="built_in">source</span>               destination</span><br><span class="line"></span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">num  target     prot opt <span class="built_in">source</span>               destination</span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">num  target     prot opt <span class="built_in">source</span>               destination</span><br></pre></td></tr></table></figure><p>再试下telnet就好了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 server]$ time telnet  localhost 7777</span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to localhost.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line">^]</span><br><span class="line"></span><br><span class="line">telnet&gt; quit</span><br><span class="line">Connection closed.</span><br><span class="line"></span><br><span class="line">real0m3.745s</span><br><span class="line">user0m0.002s</span><br><span class="line">sys  0m0.001s</span><br></pre></td></tr></table></figure><p>已经ok了。</p><h3 id="Client端drop掉Server的ack导致的重试"><a href="#Client端drop掉Server的ack导致的重试" class="headerlink" title="Client端drop掉Server的ack导致的重试"></a>Client端drop掉Server的ack导致的重试</h3><ul><li>Client（yd-test-01）： <ul><li>ip: 192.168.16.211</li><li>Iptables： <code>sudo iptables -A INPUT --protocol tcp --sport 7777  -j DROP</code></li></ul></li><li>Server（yd-test-02）:<ul><li>Ip: 192.168.16.213</li><li>Nc: <code>nc -l 7777</code></li><li>Tcpdump: <code>sudo tcpdump -i eth0  -s0 -n   src port 7777 or dst port 7777</code></li></ul></li></ul><p>client 端输出:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 server]$ time telnet  192.168.16.213 7777</span><br><span class="line">Trying 192.168.16.213...</span><br><span class="line">telnet: connect to address 192.168.16.213: Connection timed out</span><br><span class="line"></span><br><span class="line">real2m7.335s</span><br><span class="line">user0m0.000s</span><br><span class="line">sys0m0.002s</span><br></pre></td></tr></table></figure><p>server端抓包输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@yd-test-02 server]$ sudo tcpdump -i eth0  -s0 -n   src port 7777 or dst port 7777</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">13:41:44.455035 IP 192.168.16.211.49306 &gt; 192.168.16.213.cbt: Flags [S], seq 3915399839, win 14600, options [mss 1460,sackOK,TS val 582551195 ecr 0,nop,wscale 7], length 0</span><br><span class="line">13:41:44.455067 IP 192.168.16.213.cbt &gt; 192.168.16.211.49306: Flags [S.], seq 369364050, ack 3915399840, win 28960, options [mss 1460,sackOK,TS val 582313766 ecr 582551195,nop,wscale 7], length 0</span><br><span class="line">13:41:45.455290 IP 192.168.16.211.49306 &gt; 192.168.16.213.cbt: Flags [S], seq 3915399839, win 14600, options [mss 1460,sackOK,TS val 582552196 ecr 0,nop,wscale 7], length 0</span><br><span class="line">13:41:45.455324 IP 192.168.16.213.cbt &gt; 192.168.16.211.49306: Flags [S.], seq 369364050, ack 3915399840, win 28960, options [mss 1460,sackOK,TS val 582314766 ecr 582551195,nop,wscale 7], length 0</span><br><span class="line">13:41:46.657636 IP 192.168.16.213.cbt &gt; 192.168.16.211.49306: Flags [S.], seq 369364050, ack 3915399840, win 28960, options [mss 1460,sackOK,TS val 582315969 ecr 582551195,nop,wscale 7], length 0</span><br><span class="line">13:41:47.459272 IP 192.168.16.211.49306 &gt; 192.168.16.213.cbt: Flags [S], seq 3915399839, win 14600, options [mss 1460,sackOK,TS val 582554200 ecr 0,nop,wscale 7], length 0</span><br><span class="line">13:41:47.459297 IP 192.168.16.213.cbt &gt; 192.168.16.211.49306: Flags [S.], seq 369364050, ack 3915399840, win 28960, options [mss 1460,sackOK,TS val 582316770 ecr 582551195,nop,wscale 7], length 0</span><br><span class="line">13:41:49.857639 IP 192.168.16.213.cbt &gt; 192.168.16.211.49306: Flags [S.], seq 369364050, ack 3915399840, win 28960, options [mss 1460,sackOK,TS val 582319169 ecr 582551195,nop,wscale 7], length 0</span><br><span class="line">13:41:51.467283 IP 192.168.16.211.49306 &gt; 192.168.16.213.cbt: Flags [S], seq 3915399839, win 14600, options [mss 1460,sackOK,TS val 582558208 ecr 0,nop,wscale 7], length 0</span><br><span class="line">13:41:51.467331 IP 192.168.16.213.cbt &gt; 192.168.16.211.49306: Flags [S.], seq 369364050, ack 3915399840, win 28960, options [mss 1460,sackOK,TS val 582320778 ecr 582551195,nop,wscale 7], length 0</span><br><span class="line">13:41:59.483259 IP 192.168.16.211.49306 &gt; 192.168.16.213.cbt: Flags [S], seq 3915399839, win 14600, options [mss 1460,sackOK,TS val 582566224 ecr 0,nop,wscale 7], length 0</span><br><span class="line">13:41:59.483274 IP 192.168.16.213.cbt &gt; 192.168.16.211.49306: Flags [S.], seq 604179795, ack 3915399840, win 28960, options [mss 1460,sackOK,TS val 582328794 ecr 582566224,nop,wscale 7], length 0</span><br><span class="line">13:42:00.884639 IP 192.168.16.213.cbt &gt; 192.168.16.211.49306: Flags [S.], seq 604179795, ack 3915399840, win 28960, options [mss 1460,sackOK,TS val 582330196 ecr 582566224,nop,wscale 7], length 0</span><br><span class="line">13:42:03.084649 IP 192.168.16.213.cbt &gt; 192.168.16.211.49306: Flags [S.], seq 604179795, ack 3915399840, win 28960, options [mss 1460,sackOK,TS val 582332396 ecr 582566224,nop,wscale 7], length 0</span><br><span class="line">13:42:15.531272 IP 192.168.16.211.49306 &gt; 192.168.16.213.cbt: Flags [S], seq 3915399839, win 14600, options [mss 1460,sackOK,TS val 582582272 ecr 0,nop,wscale 7], length 0</span><br><span class="line">13:42:15.531300 IP 192.168.16.213.cbt &gt; 192.168.16.211.49306: Flags [S.], seq 854930196, ack 3915399840, win 28960, options [mss 1460,sackOK,TS val 582344842 ecr 582582272,nop,wscale 7], length 0</span><br><span class="line">13:42:16.932662 IP 192.168.16.213.cbt &gt; 192.168.16.211.49306: Flags [S.], seq 854930196, ack 3915399840, win 28960, options [mss 1460,sackOK,TS val 582346244 ecr 582582272,nop,wscale 7], length 0</span><br><span class="line">13:42:18.932641 IP 192.168.16.213.cbt &gt; 192.168.16.211.49306: Flags [S.], seq 854930196, ack 3915399840, win 28960, options [mss 1460,sackOK,TS val 582348244 ecr 582582272,nop,wscale 7], length 0</span><br><span class="line">13:42:47.595311 IP 192.168.16.211.49306 &gt; 192.168.16.213.cbt: Flags [S], seq 3915399839, win 14600, options [mss 1460,sackOK,TS val 582614336 ecr 0,nop,wscale 7], length 0</span><br><span class="line">13:42:47.595361 IP 192.168.16.213.cbt &gt; 192.168.16.211.49306: Flags [S.], seq 1355930963, ack 3915399840, win 28960, options [mss 1460,sackOK,TS val 582376906 ecr 582614336,nop,wscale 7], length 0</span><br><span class="line">13:42:48.796643 IP 192.168.16.213.cbt &gt; 192.168.16.211.49306: Flags [S.], seq 1355930963, ack 3915399840, win 28960, options [mss 1460,sackOK,TS val 582378108 ecr 582614336,nop,wscale 7], length 0</span><br><span class="line">13:42:50.996649 IP 192.168.16.213.cbt &gt; 192.168.16.211.49306: Flags [S.], seq 1355930963, ack 3915399840, win 28960, options [mss 1460,sackOK,TS val 582380308 ecr 582614336,nop,wscale 7], length 0</span><br></pre></td></tr></table></figure><h4 id="恢复iptables-1"><a href="#恢复iptables-1" class="headerlink" title="恢复iptables"></a>恢复iptables</h4><p>别忘了把iptables里的规则删除！</p><h3 id="不存在的ip和端口导致的重试"><a href="#不存在的ip和端口导致的重试" class="headerlink" title="不存在的ip和端口导致的重试"></a>不存在的ip和端口导致的重试</h3><h4 id="macos"><a href="#macos" class="headerlink" title="macos"></a>macos</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  ping  192.168.16.211</span><br><span class="line">PING 192.168.16.211 (192.168.16.211): 56 data bytes</span><br><span class="line">Request timeout <span class="keyword">for</span> icmp_seq 0</span><br><span class="line">Request timeout <span class="keyword">for</span> icmp_seq 1</span><br><span class="line">Request timeout <span class="keyword">for</span> icmp_seq 2</span><br><span class="line">Request timeout <span class="keyword">for</span> icmp_seq 3</span><br><span class="line">Request timeout <span class="keyword">for</span> icmp_seq 4</span><br><span class="line">^C</span><br><span class="line">--- 192.168.16.211 ping statistics ---</span><br><span class="line">6 packets transmitted, 0 packets received, 100.0% packet loss</span><br><span class="line">➜  ~  time telnet 192.168.16.211 5555</span><br><span class="line">Trying 192.168.16.211...</span><br><span class="line">telnet: connect to address 192.168.16.211: Operation timed out</span><br><span class="line">telnet: Unable to connect to remote host</span><br><span class="line">telnet 192.168.16.211 5555  </span><br><span class="line">0.02s user </span><br><span class="line">0.01s system 0% cpu 1:15.32 total</span><br><span class="line">➜  ~  sudo sysctl -a | grep <span class="string">"keepinit"</span></span><br><span class="line">net.inet.tcp.keepinit: 75000</span><br></pre></td></tr></table></figure><p>等待了75s左右，和macOS系统的<code>net.inet.tcp.keepinit</code> 一致。抓包结果:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  sudo tcpdump -i en0  -Ss0 -n   dst 192.168.16.211 and dst port 5555</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on en0, link-type EN10MB (Ethernet), capture size 262144 bytes</span><br><span class="line">10:41:16.923029 IP 192.168.50.201.55232 &gt; 192.168.16.211.5555: Flags [S], seq 752380292, win 65535, options [mss 1460,nop,wscale 6,nop,nop,TS val 222295538 ecr 0,sackOK,eol], length 0</span><br><span class="line">10:41:17.971996 IP 192.168.50.201.55232 &gt; 192.168.16.211.5555: Flags [S], seq 752380292, win 65535, options [mss 1460,nop,wscale 6,nop,nop,TS val 222296538 ecr 0,sackOK,eol], length 0</span><br><span class="line">10:41:18.791837 IP 192.168.50.201.55232 &gt; 192.168.16.211.5555: Flags [S], seq 752380292, win 65535, options [mss 1460,nop,wscale 6,nop,nop,TS val 222297538 ecr 0,sackOK,eol], length 0</span><br><span class="line">10:41:19.763549 IP 192.168.50.201.55232 &gt; 192.168.16.211.5555: Flags [S], seq 752380292, win 65535, options [mss 1460,nop,wscale 6,nop,nop,TS val 222298538 ecr 0,sackOK,eol], length 0</span><br><span class="line">10:41:20.768079 IP 192.168.50.201.55232 &gt; 192.168.16.211.5555: Flags [S], seq 752380292, win 65535, options [mss 1460,nop,wscale 6,nop,nop,TS val 222299538 ecr 0,sackOK,eol], length 0</span><br><span class="line">10:41:21.771750 IP 192.168.50.201.55232 &gt; 192.168.16.211.5555: Flags [S], seq 752380292, win 65535, options [mss 1460,nop,wscale 6,nop,nop,TS val 222300538 ecr 0,sackOK,eol], length 0</span><br><span class="line">10:41:23.778444 IP 192.168.50.201.55232 &gt; 192.168.16.211.5555: Flags [S], seq 752380292, win 65535, options [mss 1460,nop,wscale 6,nop,nop,TS val 222302538 ecr 0,sackOK,eol], length 0</span><br><span class="line">10:41:27.805634 IP 192.168.50.201.55232 &gt; 192.168.16.211.5555: Flags [S], seq 752380292, win 65535, options [mss 1460,nop,wscale 6,nop,nop,TS val 222306539 ecr 0,sackOK,eol], length 0</span><br><span class="line">10:41:35.813752 IP 192.168.50.201.55232 &gt; 192.168.16.211.5555: Flags [S], seq 752380292, win 65535, options [mss 1460,nop,wscale 6,nop,nop,TS val 222314539 ecr 0,sackOK,eol], length 0</span><br><span class="line">10:41:51.834655 IP 192.168.50.201.55232 &gt; 192.168.16.211.5555: Flags [S], seq 752380292, win 65535, options [mss 1460,nop,wscale 6,nop,nop,TS val 222330539 ecr 0,sackOK,eol], length 0</span><br><span class="line">10:42:24.010187 IP 192.168.50.201.55232 &gt; 192.168.16.211.5555: Flags [S], seq 752380292, win 65535, options [mss 1460,sackOK,eol], length 0</span><br></pre></td></tr></table></figure><p><strong>等待的时间和重试的间隔和上面的结论完全不同，吓得我赶紧在centos上测试了下。</strong></p><h4 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h4><p>但是在<code>centos</code>上，测试的结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 server]$ ping 192.168.50.201</span><br><span class="line">PING 192.168.50.201 (192.168.50.201) 56(84) bytes of data.</span><br><span class="line">^C</span><br><span class="line">--- 192.168.50.201 ping statistics ---</span><br><span class="line">9 packets transmitted, 0 received, 100% packet loss, time 7999ms</span><br><span class="line">[qisheng.li@YD-Test-01 server]$ time telnet 192.168.50.201 5555</span><br><span class="line">Trying 192.168.50.201...</span><br><span class="line">telnet: connect to address 192.168.50.201: Connection timed out</span><br><span class="line"></span><br><span class="line">real2m7.233s</span><br><span class="line">user0m0.002s</span><br><span class="line">sys0m0.000s</span><br></pre></td></tr></table></figure><p>等待了大约<code>127</code>s，跟系统配置的重试次数产生的时间吻合。tcpdump的结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 server]$  sudo tcpdump -i en0  -Ss0 -n   dst 192.168.50.201 and dst port 5555</span><br><span class="line">tcpdump: en0: No such device exists</span><br><span class="line">(SIOCGIFHWADDR: No such device)</span><br><span class="line">[qisheng.li@YD-Test-01 server]$  sudo tcpdump -i eth0  -Ss0 -n   dst 192.168.50.201 and dst port 5555</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">11:54:22.718506 IP 192.168.16.211.41402 &gt; 192.168.50.201.personal-agent: Flags [S], seq 3156762544, win 14600, options [mss 1460,sackOK,TS val 576109458 ecr 0,nop,wscale 7], length 0</span><br><span class="line">11:54:23.719607 IP 192.168.16.211.41402 &gt; 192.168.50.201.personal-agent: Flags [S], seq 3156762544, win 14600, options [mss 1460,sackOK,TS val 576110460 ecr 0,nop,wscale 7], length 0</span><br><span class="line">11:54:25.723609 IP 192.168.16.211.41402 &gt; 192.168.50.201.personal-agent: Flags [S], seq 3156762544, win 14600, options [mss 1460,sackOK,TS val 576112464 ecr 0,nop,wscale 7], length 0</span><br><span class="line">11:54:29.731610 IP 192.168.16.211.41402 &gt; 192.168.50.201.personal-agent: Flags [S], seq 3156762544, win 14600, options [mss 1460,sackOK,TS val 576116472 ecr 0,nop,wscale 7], length 0</span><br><span class="line">11:54:37.739615 IP 192.168.16.211.41402 &gt; 192.168.50.201.personal-agent: Flags [S], seq 3156762544, win 14600, options [mss 1460,sackOK,TS val 576124480 ecr 0,nop,wscale 7], length 0</span><br><span class="line">11:54:53.771611 IP 192.168.16.211.41402 &gt; 192.168.50.201.personal-agent: Flags [S], seq 3156762544, win 14600, options [mss 1460,sackOK,TS val 576140512 ecr 0,nop,wscale 7], length 0</span><br><span class="line">11:55:25.803619 IP 192.168.16.211.41402 &gt; 192.168.50.201.personal-agent: Flags [S], seq 3156762544, win 14600, options [mss 1460,sackOK,TS val 576172544 ecr 0,nop,wscale 7], length 0</span><br></pre></td></tr></table></figure><p>可以发现两个系统的实现上还是有略微的差异的。</p><h2 id="java的connection-timeout"><a href="#java的connection-timeout" class="headerlink" title="java的connection timeout"></a>java的connection timeout</h2><h3 id="不设置超时"><a href="#不设置超时" class="headerlink" title="不设置超时"></a>不设置超时</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReadTimeout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">  <span class="keyword">try</span> (Socket socket = <span class="keyword">new</span> Socket()) &#123;</span><br><span class="line">    PrintWriter printWriter = <span class="keyword">null</span>;</span><br><span class="line">    socket.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"192.168.16.211"</span>, <span class="number">5555</span>));</span><br><span class="line">    <span class="keyword">final</span> OutputStream outputStream = socket.getOutputStream();</span><br><span class="line">    <span class="keyword">final</span> BufferedOutputStream bufferedOutputStream = <span class="keyword">new</span> BufferedOutputStream(outputStream);</span><br><span class="line">    printWriter = <span class="keyword">new</span> PrintWriter(bufferedOutputStream);</span><br><span class="line">    printWriter.print(<span class="string">"Hello world"</span>);</span><br><span class="line">    System.out.println(<span class="string">"socket = "</span> + socket);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"System.currentTimeMillis() - start = "</span> + (System.currentTimeMillis() - start));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问一个没有被监听的端口<code>5555</code>，经过一段时间之后，抛出异常：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">System.currentTimeMillis() - start = 75226</span><br><span class="line"></span><br><span class="line">java.net.ConnectException: Operation timed out (Connection timed out)</span><br><span class="line"></span><br><span class="line">at java.net.PlainSocketImpl.socketConnect(Native Method)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)</span><br><span class="line">at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)</span><br><span class="line">at java.net.Socket.connect(Socket.java:589)</span><br><span class="line">at java.net.Socket.connect(Socket.java:538)</span><br><span class="line">at com.air.lang.net.socket.SocketTest.testReadTimeout(SocketTest.java:27)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498)</span><br></pre></td></tr></table></figure><p>大约75s之后，操作超时了，这与macos系统默认的socket超时是一致的：</p><blockquote><p>net.inet.tcp.keepinit = timeout for establishing syn</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  sudo sysctl -a  | grep <span class="string">"net.inet.tcp.keepinit"</span></span><br><span class="line">net.inet.tcp.keepinit: 75000</span><br></pre></td></tr></table></figure><p>修改这个值为<code>33000</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  sudo sysctl -w net.inet.tcp.keepinit=33000</span><br><span class="line">Password:</span><br><span class="line">net.inet.tcp.keepinit: 75000 -&gt; 33000</span><br></pre></td></tr></table></figure><p>重新跑上面的代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">System.currentTimeMillis() - start = 33117</span><br><span class="line"></span><br><span class="line">java.net.ConnectException: Operation timed out (Connection timed out)</span><br><span class="line"></span><br><span class="line">at java.net.PlainSocketImpl.socketConnect(Native Method)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)</span><br><span class="line">at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)</span><br><span class="line">at java.net.Socket.connect(Socket.java:589)</span><br><span class="line">at java.net.Socket.connect(Socket.java:538)</span><br><span class="line">at com.air.lang.net.socket.SocketTest.testReadTimeout(SocketTest.java:66)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498)</span><br></pre></td></tr></table></figure><p><strong>结论：超时时间也变了，所以没有设置超时的时候用的就是os level的超时时间。</strong></p><h3 id="设置超时时间"><a href="#设置超时时间" class="headerlink" title="设置超时时间"></a>设置超时时间</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@SneakyThrows</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReadTimeout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">  <span class="keyword">try</span> (Socket socket = <span class="keyword">new</span> Socket()) &#123;</span><br><span class="line">    PrintWriter printWriter = <span class="keyword">null</span>;</span><br><span class="line">    socket.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"192.168.16.211"</span>, <span class="number">5555</span>), <span class="number">35000</span>);</span><br><span class="line">    <span class="keyword">final</span> OutputStream outputStream = socket.getOutputStream();</span><br><span class="line">    <span class="keyword">final</span> BufferedOutputStream bufferedOutputStream = <span class="keyword">new</span> BufferedOutputStream(outputStream);</span><br><span class="line">    printWriter = <span class="keyword">new</span> PrintWriter(bufferedOutputStream);</span><br><span class="line">    printWriter.print(<span class="string">"Hello world"</span>);</span><br><span class="line">    System.out.println(<span class="string">"socket = "</span> + socket);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"System.currentTimeMillis() - start = "</span> + (System.currentTimeMillis() - start));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码的超时设置为<code>35000</code>毫秒，系统超时<code>33000</code>毫秒得到的结果，大概33秒之后就超时了：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">System.currentTimeMillis() - start = 33271</span><br><span class="line"></span><br><span class="line">java.net.ConnectException: Operation timed out (Connection timed out)</span><br><span class="line"></span><br><span class="line">at java.net.PlainSocketImpl.socketConnect(Native Method)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)</span><br><span class="line">at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)</span><br><span class="line">at java.net.Socket.connect(Socket.java:589)</span><br><span class="line">at com.air.lang.net.socket.SocketTest.testReadTimeout(SocketTest.java:84)</span><br></pre></td></tr></table></figure><p>修改代码超时为<code>30000</code>毫秒，小于系统默认的<code>33000</code>毫秒，得到的输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">System.currentTimeMillis() - start = 30005</span><br><span class="line"></span><br><span class="line">java.net.SocketTimeoutException: connect timed out</span><br><span class="line"></span><br><span class="line">at java.net.PlainSocketImpl.socketConnect(Native Method)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)</span><br><span class="line">at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)</span><br><span class="line">at java.net.Socket.connect(Socket.java:589)</span><br><span class="line">at com.air.lang.net.socket.SocketTest.testReadTimeout(SocketTest.java:84)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498)</span><br></pre></td></tr></table></figure><p>30秒左右就超时了，说明设置生效。</p><p><strong>结论：代码里设置的连接超时，大于系统的默认超时是没有用的，系统会先抛出异常；</strong></p><p>​        <strong>小于系统的超时是可以生效的。</strong></p><h3 id="实现一瞥"><a href="#实现一瞥" class="headerlink" title="实现一瞥"></a>实现一瞥</h3><img src="/2020/07/26/timeout/bO_12e9048Rl-nJJHUfGU9OI8lPWH0Xhvq6s4RR6NS4rwktJagWyb9TX6FxvFdwHScwiSlfCFYahNcY0UGo3QmJR_9BZgHkMF7u5i7wi6sSjQI-6q9R9nZPNrEngwdXxcM6VdtfJaciyB5SGpiH7iFjKjzfJYUiqYK2FLAIE-SMF8OGW05FO8nLmK1ALtCbD1Z-aLGlvswY8tplrpibewPCZxW00.png"><h3 id="socket-read超时"><a href="#socket-read超时" class="headerlink" title="socket read超时"></a>socket read超时</h3><p><strong>对端宕机时，我们有数据需要发送：</strong></p><p>运行起来一个echo服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 ~]$ ncat -l 2000 -k -c <span class="string">'xargs -n1 echo "--&gt;"'</span></span><br></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 ~]$ nc localhost 2000</span><br><span class="line">hello</span><br><span class="line">--&gt; hello</span><br></pre></td></tr></table></figure><p>建立连接之后，输入<code>hello</code>， 自动返回了<code>--&gt; hello</code></p><p>然后利用iptables模拟网络故障，并抓包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -A INPUT --protocol tcp --dport 2000 -j DROP</span><br><span class="line">sudo tcpdump -i lo -Ss0 -n src 127.0.0.1 and dst 127.0.0.1 and port 2000</span><br></pre></td></tr></table></figure><p>客户端再次输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 ~]$ nc localhost 2000</span><br><span class="line">hello</span><br><span class="line">--&gt; hello</span><br><span class="line">world</span><br></pre></td></tr></table></figure><p>此时hang住了， 直到超时，大约持续了 13 min（22:33:21.427677 ~ 22:46:53.578945）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 ~]$ nc localhost 2000</span><br><span class="line">hello</span><br><span class="line">--&gt; hello</span><br><span class="line">world</span><br><span class="line">Ncat: Connection timed out.</span><br></pre></td></tr></table></figure><p>抓包结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 ~]$ sudo tcpdump -i lo -Ss0 -n src 127.0.0.1 and dst 127.0.0.1 and port 2000</span><br><span class="line">tcpdump: verbose output suppressed, use -v or -vv <span class="keyword">for</span> full protocol decode</span><br><span class="line">listening on lo, link-type EN10MB (Ethernet), capture size 65535 bytes</span><br><span class="line">22:33:21.427677 IP 127.0.0.1.36058 &gt; 127.0.0.1.sieve-filter: Flags [P.], seq 1659839133:1659839139, ack 912063479, win 342, options [nop,nop,TS val 3938221448 ecr 3938186493], length 6</span><br><span class="line">22:33:21.631935 IP 127.0.0.1.36058 &gt; 127.0.0.1.sieve-filter: Flags [P.], seq 1659839133:1659839139, ack 912063479, win 342, options [nop,nop,TS val 3938221653 ecr 3938186493], length 6</span><br><span class="line">22:33:21.836938 IP 127.0.0.1.36058 &gt; 127.0.0.1.sieve-filter: Flags [P.], seq 1659839133:1659839139, ack 912063479, win 342, options [nop,nop,TS val 3938221858 ecr 3938186493], length 6</span><br><span class="line">22:33:22.247936 IP 127.0.0.1.36058 &gt; 127.0.0.1.sieve-filter: Flags [P.], seq 1659839133:1659839139, ack 912063479, win 342, options [nop,nop,TS val 3938222269 ecr 3938186493], length 6</span><br><span class="line">22:33:23.070948 IP 127.0.0.1.36058 &gt; 127.0.0.1.sieve-filter: Flags [P.], seq 1659839133:1659839139, ack 912063479, win 342, options [nop,nop,TS val 3938223092 ecr 3938186493], length 6</span><br><span class="line">22:33:24.714925 IP 127.0.0.1.36058 &gt; 127.0.0.1.sieve-filter: Flags [P.], seq 1659839133:1659839139, ack 912063479, win 342, options [nop,nop,TS val 3938224736 ecr 3938186493], length 6</span><br><span class="line">22:33:28.002937 IP 127.0.0.1.36058 &gt; 127.0.0.1.sieve-filter: Flags [P.], seq 1659839133:1659839139, ack 912063479, win 342, options [nop,nop,TS val 3938228024 ecr 3938186493], length 6</span><br><span class="line">22:33:34.570945 IP 127.0.0.1.36058 &gt; 127.0.0.1.sieve-filter: Flags [P.], seq 1659839133:1659839139, ack 912063479, win 342, options [nop,nop,TS val 3938234592 ecr 3938186493], length 6</span><br><span class="line">22:33:47.722941 IP 127.0.0.1.36058 &gt; 127.0.0.1.sieve-filter: Flags [P.], seq 1659839133:1659839139, ack 912063479, win 342, options [nop,nop,TS val 3938247744 ecr 3938186493], length 6</span><br><span class="line">22:34:14.026941 IP 127.0.0.1.36058 &gt; 127.0.0.1.sieve-filter: Flags [P.], seq 1659839133:1659839139, ack 912063479, win 342, options [nop,nop,TS val 3938274048 ecr 3938186493], length 6</span><br><span class="line">22:35:06.634947 IP 127.0.0.1.36058 &gt; 127.0.0.1.sieve-filter: Flags [P.], seq 1659839133:1659839139, ack 912063479, win 342, options [nop,nop,TS val 3938326656 ecr 3938186493], length 6</span><br><span class="line">22:36:51.978934 IP 127.0.0.1.36058 &gt; 127.0.0.1.sieve-filter: Flags [P.], seq 1659839133:1659839139, ack 912063479, win 342, options [nop,nop,TS val 3938432000 ecr 3938186493], length 6</span><br><span class="line">22:38:52.298943 IP 127.0.0.1.36058 &gt; 127.0.0.1.sieve-filter: Flags [P.], seq 1659839133:1659839139, ack 912063479, win 342, options [nop,nop,TS val 3938552320 ecr 3938186493], length 6</span><br><span class="line">22:40:52.618953 IP 127.0.0.1.36058 &gt; 127.0.0.1.sieve-filter: Flags [P.], seq 1659839133:1659839139, ack 912063479, win 342, options [nop,nop,TS val 3938672640 ecr 3938186493], length 6</span><br><span class="line">22:42:52.938942 IP 127.0.0.1.36058 &gt; 127.0.0.1.sieve-filter: Flags [P.], seq 1659839133:1659839139, ack 912063479, win 342, options [nop,nop,TS val 3938792960 ecr 3938186493], length 6</span><br><span class="line">22:44:53.258934 IP 127.0.0.1.36058 &gt; 127.0.0.1.sieve-filter: Flags [P.], seq 1659839133:1659839139, ack 912063479, win 342, options [nop,nop,TS val 3938913280 ecr 3938186493], length 6</span><br><span class="line">22:46:53.578945 IP 127.0.0.1.36058 &gt; 127.0.0.1.sieve-filter: Flags [P.], seq 1659839133:1659839139, ack 912063479, win 342, options [nop,nop,TS val 3939033600 ecr 3938186493], length 6</span><br></pre></td></tr></table></figure><p>内核相关参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 ~]$ cat /proc/sys/net/ipv4/tcp_retries1</span><br><span class="line">3</span><br><span class="line">[qisheng.li@YD-Test-01 ~]$ cat /proc/sys/net/ipv4/tcp_retries2</span><br><span class="line">15</span><br></pre></td></tr></table></figure><p>别忘了删除iptables的规则。</p><p><strong>对端宕机时，我们没有数据需要发送：</strong></p><p>内核相关参数:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@YD-Test-01 ~]$ sudo sysctl -a | grep <span class="string">"tcp_keepalive"</span></span><br><span class="line">net.ipv4.tcp_keepalive_intvl = 75</span><br><span class="line">net.ipv4.tcp_keepalive_probes = 9</span><br><span class="line">net.ipv4.tcp_keepalive_time = 7200</span><br></pre></td></tr></table></figure><img src="/2020/07/26/timeout/qylrl8rr1u.jpeg"><p>setup好上面的client和server， </p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.chengweiyang.cn/2017/02/18/linux-connect-timeout/" rel="external nofollow noopener noreferrer" target="_blank">Linux 建立 TCP 连接的超时时间分析</a></li><li><a href="https://hoswey.github.io/2019/07/23/%E6%B5%85%E8%B0%88Java%E4%B8%AD%E7%9A%84TCP%E8%B6%85%E6%97%B6/" rel="external nofollow noopener noreferrer" target="_blank">浅谈Java中的TCP超时 | 程序员，川流不息</a></li><li><a href="https://cloud.tencent.com/developer/article/1574588" rel="external nofollow noopener noreferrer" target="_blank">从linux源码看socket(tcp)的timeout - 云+社区 - 腾讯云</a></li><li><a href="https://perthcharles.github.io/2015/09/07/wiki-tcp-retries/" rel="external nofollow noopener noreferrer" target="_blank">聊一聊重传次数 | 天赋 无与伦比的坚持</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;TCP&quot;&gt;&lt;a href=&quot;#TCP&quot; class=&quot;headerlink&quot; title=&quot;TCP&quot;&gt;&lt;/a&gt;TCP&lt;/h2&gt;&lt;h3 id=&quot;SERVER端DROP-SYNC报文导致的重试&quot;&gt;&lt;a href=&quot;#SERVER端DROP-SYNC报文导致的重试&quot; c
      
    
    </summary>
    
      <category term="base" scheme="http://qsli.github.io/categories/base/"/>
    
    
      <category term="tcp" scheme="http://qsli.github.io/tags/tcp/"/>
    
  </entry>
  
</feed>
