<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[git查看已合并分支的fork点]]></title>
      <url>http://qsli.github.io/2017/09/12/git-branch-log/</url>
      <content type="html"><![CDATA[<h2 id="一个问题"><a href="#一个问题" class="headerlink" title="一个问题"></a>一个问题</h2><p>有些需求有好几期，做后面几期的可能完全不了解前几期做了什么，拿到分支号后，就需要找到最初的commit点。由于这个分支已经merge到了master上，所以找最近的ancestor就不对了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git merge-base branch1 branch2 //只能找到最近的祖先</div></pre></td></tr></table></figure>
<p>那么如何找到这个分支最初的fork点呢，下面给出两种方案，亲测有效。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="git-别名"><a href="#git-别名" class="headerlink" title="git 别名"></a>git 别名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git config --global alias.oldest-ancestor <span class="string">'!zsh -c '</span>\<span class="string">''</span>diff -u &lt;(git rev-list --first-parent <span class="string">"<span class="variable">$&#123;1:-master&#125;</span>"</span>) &lt;(git rev-list --first-parent <span class="string">"<span class="variable">$&#123;2:-HEAD&#125;</span>"</span>) | sed <span class="_">-ne</span> <span class="string">"s/^ //p"</span> | head -1<span class="string">'\'</span><span class="string">' -'</span></div><div class="line">git config --global alias.branchdiff <span class="string">'!sh -c "git diff `git oldest-ancestor`.."'</span></div><div class="line">git config --global alias.branchlog <span class="string">'!sh -c "git log `git oldest-ancestor`.."'</span></div></pre></td></tr></table></figure>
<p>上述三个命令就可以找到最初的commit点，以及这个分支做了什么。参见<code>stackoverflow</code>上的回答:  <a href="https://stackoverflow.com/questions/1527234/finding-a-branch-point-with-git" rel="external nofollow noopener noreferrer" target="_blank">Finding a branch point with Git? - Stack Overflow</a></p>
<h3 id="git分支图"><a href="#git分支图" class="headerlink" title="git分支图"></a>git分支图</h3><p>如果你使用<code>zsh</code>, 内置的有两个相关的命令<code>glgg</code>,<code>glgga</code>.</p>
<ul>
<li><code>glgg</code>： 显示当前分支的分支图</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  ~  <span class="built_in">alias</span> glgg</div><div class="line">glgg=<span class="string">'git log --graph'</span></div></pre></td></tr></table></figure>
<img src="/2017/09/12/git-branch-log/glgg.png" alt="glgg.png" title="">
<ul>
<li><code>glgga</code>: 显示所有分支的分支图 </li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  ~  <span class="built_in">alias</span> glgga</div><div class="line">glgga=<span class="string">'git log --graph --decorate --all'</span></div></pre></td></tr></table></figure>
<img src="/2017/09/12/git-branch-log/glgga.png" alt="glgga.png" title="">
<p>从分支图中可以快速的看出当前分支是在哪里fork出来的</p>
<h4 id="分支图的显示方式"><a href="#分支图的显示方式" class="headerlink" title="分支图的显示方式"></a>分支图的显示方式</h4><ul>
<li><p>reverse chronological： 默认显示方式，会按照commit的时间，逆序显示</p>
</li>
<li><p>topo order： 按照commit的拓扑顺序显示，子提交在父提交之前显示</p>
</li>
</ul>
<p>查看fork点的时候，最好是按照拓扑排序显示，这样分支图不会很乱，便于找到。</p>
<h3 id="可视化工具"><a href="#可视化工具" class="headerlink" title="可视化工具"></a>可视化工具</h3><p>可视化工具和git log的用法是一样的，顺着查找即可。这里我用<code>idea</code>为例：</p>
<img src="/2017/09/12/git-branch-log/idea.png" alt="idea.png" title="">
<p>开启InteliSort后，注意红框勾上。</p>
<img src="/2017/09/12/git-branch-log/idea-sorted.png" alt="idea-sorted.png" title="">
<p>开启后是按照提交排序的，并没有按照插入的时间，这样可以清楚的顺着提交找到最初的fork点。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="https://stackoverflow.com/questions/1527234/finding-a-branch-point-with-git" rel="external nofollow noopener noreferrer" target="_blank">Finding a branch point with Git? - Stack Overflow</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/chucklu/p/4748394.html" rel="external nofollow noopener noreferrer" target="_blank">git图示所有分支的历史 - ChuckLu - 博客园</a></p>
</li>
<li><p><a href="http://gitbook.liuhui998.com/3_4.html" rel="external nofollow noopener noreferrer" target="_blank">Git Book 中文版 - 查看历史 －Git日志</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> idea </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用electron开发自己的工具]]></title>
      <url>http://qsli.github.io/2017/09/10/electron/</url>
      <content type="html"><![CDATA[<h2 id="electron-简介"><a href="#electron-简介" class="headerlink" title="electron 简介"></a>electron 简介</h2><p>web是天生跨平台的。</p>
<p>前几年用ubuntu的时候，各种软件都没有相应的版本，十分的蛋疼。这几年随着web的发展，情况改善了许多。<br>比如说chrome的app， 安装好之后和原生的应用几乎没有区别，可以从ubuntu的dash里面搜索到，可以独立打开。</p>
<p><code>electron</code>则是直接整一个微型的chrome，加上html写的界面，直接做客户端。也有类似<code>atom</code>， <code>visual source code</code>等大型应用也是使用<code>electron</code>构建的。</p>
<img src="/2017/09/10/electron/electron.jpg" alt="electron.jpg" title="">
<h2 id="简单的想法"><a href="#简单的想法" class="headerlink" title="简单的想法"></a>简单的想法</h2><p>之前在windows平台，使用的非常顺手的一个剪贴板增强工具——<a href="http://www.appinn.com/clibor/" rel="external nofollow noopener noreferrer" target="_blank">Clibor – 来自日本的剪贴板辅助工具[Win] - 小众软件</a>， 这个软件非常好用的一个功能就是支持<code>定型文</code>。所谓的<code>定型文</code>就是你事先录制好的一些常用的<br>条目，然后当你需要使用的时候，按快捷键呼出界面，选中想要的<code>定型文</code>，直接就给你复制到了剪贴板，十分的方便。</p>
<img src="/2017/09/10/electron/item.png" alt="item.png" title="">
<p>windows不爽的就是shell不好用， 虽然有<code>cygwin</code>,<code>babun</code>，<code>cmder</code>等还算不错的终端，但是用起来卡卡的，所以最终我还是迁移到了ubuntu，各种命令，各种爽。</p>
<p>但是，作为一个后端的开发，每天要上服务器上查各种问题，各种长长的命令，各种记不住，所以还是要有一个类似小抄试的工具来增强下工作效率。恰巧，上次在youtube上看electorn的一个视频——<a href="https://www.youtube.com/watch?v=FNHBfN8c32U" rel="external nofollow noopener noreferrer" target="_blank">Electron: Desktop Apps with Web Languages - GitHub Universe 2016 - YouTube</a>。这个视频大概介绍了electron，介绍了一些使用electron开发的有意思的应用， 恰巧我看到了一个叫做<code>mojibar</code>的简单应用。</p>
<img src="/2017/09/10/electron/mojibar.gif" alt="mojibar.gif" title="">
<p>她的这个应用是，搜索moji表情对应的文字， 然后会筛选出来相应的结果，然后复制到剪贴板上，支持快捷键呼出。看到这个就瞬间来了灵感，这和我要的小抄应用简直十分吻合。好在<code>electron</code>并不复杂，就研究了下代码自己改造了一番，于是就有了这篇文章。</p>
<h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p>这个demo基本可以在日常的工作中使用了， github的repo在——<a href="https://github.com/qsLI/quake-select" rel="external nofollow noopener noreferrer" target="_blank">qsLI/quake-select</a></p>
<p>下面是界面的截图：</p>
<img src="/2017/09/10/electron/select.png" alt="select.png" title="">
<p>配置文件在json中，类似下面的形式：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"commands"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"desc"</span>: <span class="string">"查看jvm堆的使用情况"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"sudo -u tomcat jmap -heap  `pgrep -f 'tomcat'`"</span>,</div><div class="line">      <span class="attr">"tag"</span>: <span class="string">"opt"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"desc"</span>: <span class="string">"查看jvm最终加载的开关"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"java -XX:+PrintFlagsFinal -version"</span>,</div><div class="line">      <span class="attr">"tag"</span>: <span class="string">"opt"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"desc"</span>: <span class="string">""</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"sudo -u tomcat jcmd `pgrep -f tomcat` VM.flags"</span>,</div><div class="line">      <span class="attr">"tag"</span>: <span class="string">"opt"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"desc"</span>: <span class="string">"查看jvm加载的系统变量"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"sudo -u tomcat jcmd `pgrep -f tomcat` VM.system_properties"</span>,</div><div class="line">      <span class="attr">"tag"</span>: <span class="string">"opt"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"desc"</span>: <span class="string">"查看本机jcmd支持的命令"</span>,</div><div class="line">      <span class="attr">"command"</span>: <span class="string">"sudo -u tomcat jcmd `pgrep -f tomcat` help"</span>,</div><div class="line">      <span class="attr">"tag"</span>: <span class="string">"opt"</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>目前支持按照<code>command</code>和<code>tag</code>搜索， mojibar使用的这个库在ubuntu下菜单会显示不出来，以后有时间再fix。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="https://electron.atom.io/" rel="external nofollow noopener noreferrer" target="_blank">Electron | Build cross platform desktop apps with JavaScript, HTML, and CSS.</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/20225295" rel="external nofollow noopener noreferrer" target="_blank">使用 Electron 构建桌面应用 - 知乎专栏</a></p>
</li>
<li><p><a href="http://www.appinn.com/clibor/" rel="external nofollow noopener noreferrer" target="_blank">Clibor – 来自日本的剪贴板辅助工具[Win] - 小众软件</a></p>
</li>
<li><p><a href="https://www.youtube.com/watch?v=FNHBfN8c32U" rel="external nofollow noopener noreferrer" target="_blank">Electron: Desktop Apps with Web Languages - GitHub Universe 2016 - YouTube</a></p>
</li>
<li><p><a href="https://github.com/muan/mojibar" rel="external nofollow noopener noreferrer" target="_blank">muan/mojibar: Emoji searcher but as a menubar app.</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> fe </category>
            
        </categories>
        
        
        <tags>
            
            <tag> electron </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux下删除文件]]></title>
      <url>http://qsli.github.io/2017/09/10/how-to-delete-file-correctly/</url>
      <content type="html"><![CDATA[<h1 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a>文件存储</h1><img src="/2017/09/10/how-to-delete-file-correctly/inode.png" alt="linux文件的存储" title="linux文件的存储">
<h2 id="软链接和硬链接"><a href="#软链接和硬链接" class="headerlink" title="软链接和硬链接"></a>软链接和硬链接</h2><p>软链接(Symbolic Link):</p>
<p>硬链接(Hard Link):</p>
<blockquote>
<p>硬链接就是在Directory中加入一条filename和Inode的对应关系，所以如果你删除了原来的文件，是不对硬链接文件有任何影响的，因为删除文件就是将link count 减少，当发现指向Inode为filename数量0的时候，系统会回收相应的Inode和Block空间。但是软链接就不同了，在Linux下所有的都是文件，所以软链接也有自己的Inode和block ，但是创建软链接不会在增加原文件Inode-Index，当删除原文件的时候，相应的Index不再能找到，所以导致软链接不能用。但是软链接有自身的优势，可以跨分区，这样就可以解决当前Inode数据区不足够写入，可以使用软链接指向空间充足的空间。</p>
</blockquote>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>软链接  硬链接 区别</p>
<img src="/2017/09/10/how-to-delete-file-correctly/links.png" alt="软链接和硬链接的区别" title="软链接和硬链接的区别">
<h2 id="文件是否被占用"><a href="#文件是否被占用" class="headerlink" title="文件是否被占用"></a>文件是否被占用</h2><p>一切皆文件，所以lsof（list open file）就很重要</p>
<p>lsof -i ：8080 查看端口占用</p>
<p>socket 也是文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo lsof  catalina.out</div><div class="line"></div><div class="line">COMMAND   PID   USER   FD   TYPE DEVICE SIZE/OFF     NODE NAME</div><div class="line">java    40916 tomcat    1w   REG    8,7   933679 27656540 catalina.out</div><div class="line">java    40916 tomcat    2w   REG    8,7   933679 27656540 catalina.out</div></pre></td></tr></table></figure>
<blockquote>
<p>‘‘REG’’ for a regular file<br>FD         is the File Descriptor number of the file or:</p>
</blockquote>
<pre><code>     cwd  current working directory;
     Lnn  library references (AIX);
     err  FD information error (see NAME column);
     jld  jail directory (FreeBSD);
     ltx  shared library text (code and data);
     Mxx  hex memory-mapped type number xx.
     m86  DOS Merge mapped file;
     mem  memory-mapped file;
     mmap memory-mapped device;
     pd   parent directory;
     rtd  root directory;
     tr   kernel trace file (OpenBSD);
     txt  program text (code and data);
     v86  VP/ix mapped file;

FD is followed by one of these characters, describing the mode under which the file is open:

     r for read access;
     w for write access;
     u for read and write access;
     space if mode unknown and no lock
          character follows;
     ‘-’ if mode unknown and lock
          character follows.
</code></pre><p>可以看出上面的文件的fd是1, w权限</p>
<p>系统，每个进程，文件描述符。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo ls /proc/40916/fd</div></pre></td></tr></table></figure>
<p>下面的两个命令是等价的：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo cat /proc/40916/fd/2</div><div class="line"></div><div class="line">sudo cat catalina.out</div></pre></td></tr></table></figure>
<h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>删除文件之前应该先看下文件的占用情况，<code>lsof</code>可以查看到文件被哪个进程占用。</p>
<p>如果被占用，直接使用<code>rm</code>删除相当于只是删除了文件名和inode的关联, 但是文件占用的空间还在(block), 应该使用下面的命令进行删除：</p>
<blockquote>
<p>You misunderstand: deletion will be complete only after all processes using the file at the time of deletion have reached completion: only then the deleted inode will be returned to the pool of available inodes, and the content of the file may begin to be corrupted by over-writing. Until then, the inode is alive and well, and is pointing to the area of the disk containing the file in question. As soon as less completes, the soft link will disappear, and so will the file testing.txt.</p>
<pre><code>当我们使用rm命令的时候，系统并不会真正删除这个资料。除非有档案非要将资料存储在原来档案的这些block中。这样原来的block就会被新档案给覆盖掉。 
</code></pre></blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cat /dev/null &gt; filename</div><div class="line">或者</div><div class="line">truncate <span class="_">-s</span> 0 filename</div></pre></td></tr></table></figure>
<h3 id="stat-命令"><a href="#stat-命令" class="headerlink" title="stat 命令"></a>stat 命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">sudo <span class="built_in">stat</span> /proc/40916/fd/2</div><div class="line"></div><div class="line">File: `/proc/40916/fd/2<span class="string">' -&gt; `/home/q/www/qta.open.coupon.provider/logs/catalina.out'</span></div><div class="line">  Size: 64        	Blocks: 0          IO Block: 1024   symbolic link</div><div class="line">Device: 3h/3d	Inode: 3017464897  Links: 1</div><div class="line">Access: (0300/l-wx------)  Uid: (40001/  tomcat)   Gid: (40001/  tomcat)</div><div class="line">Access: 2017-07-05 05:05:06.318550652 +0800</div><div class="line">Modify: 2017-06-15 12:35:24.590599522 +0800</div><div class="line">Change: 2017-06-15 12:35:24.590599522 +0800</div><div class="line"></div><div class="line"></div><div class="line">sudo <span class="built_in">stat</span> catalina.out</div><div class="line"></div><div class="line">File: `catalina.out<span class="string">'</span></div><div class="line">  Size: 962851    	Blocks: 1896       IO Block: 4096   regular file</div><div class="line">Device: 807h/2055d	Inode: 27656540    Links: 1</div><div class="line">Access: (0644/-rw-r--r--)  Uid: (40001/  tomcat)   Gid: (40001/  tomcat)</div><div class="line">Access: 2017-07-06 00:51:44.243427414 +0800</div><div class="line">Modify: 2017-07-06 00:52:27.096557541 +0800</div><div class="line">Change: 2017-07-06 00:52:27.096557541 +0800</div><div class="line"></div><div class="line">sudo ls -i /proc/40916/fd/2</div><div class="line"></div><div class="line">3017464897 /proc/40916/fd/2</div></pre></td></tr></table></figure>
<p>可以看出, 文件描述符是一个软链接.</p>
<h3 id="目录下的文件占用空间很小-但是目录占用空间很大"><a href="#目录下的文件占用空间很小-但是目录占用空间很大" class="headerlink" title="目录下的文件占用空间很小, 但是目录占用空间很大"></a>目录下的文件占用空间很小, 但是目录占用空间很大</h3><p>这种情况, 最常见的就是文件被删除了, 但是还有进程占用它. 于是这个文件占用的block就没有释放掉.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo lsof | grep deleted</div></pre></td></tr></table></figure>
<p>使用上面的命令就可以看到,那些文件被删除了, 但是还在被占用.  kill掉相应的进程, 空间就自己回来了.</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/lsof.html" rel="external nofollow noopener noreferrer" target="_blank">3. lsof 一切皆文件 — Linux Tools Quick Tutorial</a></p>
</li>
<li><p><a href="https://unix.stackexchange.com/questions/92384/how-to-clean-log-file" rel="external nofollow noopener noreferrer" target="_blank">How to clean log file? - Unix &amp; Linux Stack Exchange</a></p>
</li>
<li><p><a href="https://unix.stackexchange.com/questions/88808/empty-the-contents-of-a-file" rel="external nofollow noopener noreferrer" target="_blank">shell script - Empty the contents of a file - Unix &amp; Linux Stack Exchange</a></p>
</li>
<li><p><a href="http://himichaelchu.iteye.com/blog/2116023" rel="external nofollow noopener noreferrer" target="_blank">通过Inode原理分析Linux中ln命令 - Michael Chu - ITeye技术网站</a></p>
</li>
<li><p><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-hardandsymb-links/index.html" rel="external nofollow noopener noreferrer" target="_blank">理解 Linux 的硬链接与软链接</a></p>
</li>
<li><p><a href="https://superuser.com/questions/1112781/why-do-symbolic-links-in-prox-pid-fd-act-as-hard-links" rel="external nofollow noopener noreferrer" target="_blank">linux - why do symbolic links in /prox/$PID/fd/ act as hard links? - Super User</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> lsof </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[top用法]]></title>
      <url>http://qsli.github.io/2017/09/09/top/</url>
      <content type="html"><![CDATA[<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>top是了解系统状况最常用的命令，从top的输出我们可以很好的掌握系统的CPU, 内存，swap，进程的相关信息。</p>
<p>下面说下top的基本用法：</p>
<p><br><br></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[qisheng.li@xxx /home/www/xxx]$ sudo top</div><div class="line"></div><div class="line">top - 15:19:54 up 200 days,  4:06,  1 user,  load average: 5.91, 6.14, 5.57</div><div class="line">Tasks: 499 total,   1 running, 498 sleeping,   0 stopped,   0 zombie</div><div class="line">Cpu(s): 20.1%us,  1.2%sy,  0.0%ni, 78.4%id,  0.0%wa,  0.0%hi,  0.4%si,  0.0%st</div><div class="line">Mem:  65979844k total, 65004736k used,   975108k free,     8108k buffers</div><div class="line">Swap: 50331644k total,    29364k used, 50302280k free,  5530672k cached</div><div class="line"></div><div class="line">  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                                            </div><div class="line"> 8468 tomcat    20   0 71.2g  55g 6484 S 492.3 87.8  32033:12 java                                                                              </div><div class="line"> 1256 tomcat    20   0 6055m 251m 2504 S 24.9  0.4  41886:22 java                                                                               </div><div class="line"> 2446 root      20   0 15304 1568  928 R  0.7  0.0   0:00.11 top                                                                                </div><div class="line">30593 root      20   0  526m  31m 3208 S  0.3  0.0   0:15.41 salt-minion                                                                        </div><div class="line">    1 root      20   0 19232  632  384 S  0.0  0.0  11:49.23 init                                                                               </div><div class="line">    2 root      20   0     0    0    0 S  0.0  0.0   0:00.32 kthreadd                                                                           </div><div class="line">    3 root      RT   0     0    0    0 S  0.0  0.0   2:55.22 migration/0                                                                        </div><div class="line">    4 root      20   0     0    0    0 S  0.0  0.0   5:49.74 ksoftirqd/0                                                                        </div><div class="line">    5 root      RT   0     0    0    0 S  0.0  0.0   0:00.00 stopper/0</div></pre></td></tr></table></figure>
<h3 id="系统概况"><a href="#系统概况" class="headerlink" title="系统概况"></a>系统概况</h3><p> 从输出的第一行来看， 首先是系统的uptime信息(使用<code>uptime</code>也可以查看)， 可以看到系统已经运行了200天了，是在<code>15：19：54</code>这个时间点启动起来的， <code>4：06</code> 是当前的时间， 当前只有一个用户登录(使用<code>w</code>也可以查看当前的登录用户)。 还有就是系统的负载——load average，这个有三个值，分别是1分钟的平均负载， 5分钟的， 15分钟的（<code>uptime</code>的输出信息中也有这个）。</p>
<p> 第二行包含了系统进程的一些统计信息，Tasks是运行队列中的任务个数（Linux run-queue）， 还有一些其他状态的进程的个数信息</p>
<blockquote>
<ul>
<li><p><strong>running</strong>:  CPU 上运行的和将要被调度运行的；</p>
</li>
<li><p><strong>sleeping</strong>: 通常是等待事件(比如 IO 操作)完成的任务，细分可以包括 interruptible 和 uninterruptible 的类型；</p>
</li>
<li><p><strong>stopped</strong>: 是一些被暂停的任务，通常发送 SIGSTOP 或者对一个前台任务操作 Ctrl-Z 可以将其暂停；</p>
</li>
<li><p><strong>zombie</strong>: 僵尸任务，虽然进程终止资源会被自动回收，但是含有退出任务的 task descriptor 需要父进程访问后才能释放，这种进程显示为 <code>defunct</code> 状态，无论是因为父进程提前退出还是未 wait 调用，出现这种进程都应该格外注意程序是否设计有误。</p>
</li>
</ul>
</blockquote>
<h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><p> 第三行是CPU的一些信息，各个部分的占用都很明确。</p>
<blockquote>
<ul>
<li><p>(us) user：CPU 在低 nice 值(高优先级)用户态所占用的时间(nice&lt;=0)。正常情况下只要服务器不是很闲，那么大部分的 CPU 时间应该都在此执行这类程序</p>
</li>
<li><p>(sy) system：CPU 处于内核态所占用的时间，操作系统通过系统调用(system call)从用户态陷入内核态，以执行特定的服务；通常情况下该值会比较小，但是当服务器执行的 IO 比较密集的时候，该值会比较大</p>
</li>
<li><p>(ni) nice：CPU 在高 nice 值(低优先级)用户态以低优先级运行占用的时间(nice&gt;0)。默认新启动的进程 nice=0，是不会计入这里的，除非手动通过 renice 或者 setpriority() 的方式修改程序的nice值</p>
</li>
<li><p>(id) idle：CPU 在空闲状态(执行 kernel idle handler )所占用的时间</p>
</li>
<li><p>(wa) iowait：等待 IO 完成做占用的时间</p>
</li>
<li><p>(hi) irq：系统处理硬件中断所消耗的时间</p>
</li>
<li><p>(si) softirq：系统处理软中断所消耗的时间，记住软中断分为 softirqs、tasklets (其实是前者的特例)、work queues，不知道这里是统计的是哪些的时间，毕竟 work queues 的执行已经不是中断上下文了</p>
</li>
<li><p>(st) steal：在虚拟机情况下才有意义，因为虚拟机下 CPU 也是共享物理 CPU 的，所以这段时间表明虚拟机等待 hypervisor 调度 CPU 的时间，也意味着这段时间 hypervisor 将 CPU 调度给别的 CPU 执行，这个时段的 CPU 资源被“stolen”了。这个值在我 KVM 的 VPS 机器上是不为 0 的，但也只有 0.1 这个数量级，是不是可以用来判断 VPS 超售的情况？</p>
</li>
</ul>
</blockquote>
<p>iowait所包含的信息其实是非常少的，具体的解释可以看<strong>参考3</strong>中的文章，讲的非常好.</p>
<blockquote>
<p>%iowait 表示在一个采样周期内有百分之几的时间属于以下情况：CPU空闲、并且有仍未完成的I/O请求</p>
</blockquote>
<h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p>第四行主要是内存使用的相关信息， 系统的内存总共有<code>65979844k</code>， 已经使用<code>65004736k</code>, <code>975108k</code>可用， <code>8108k</code>缓存, </p>
<p>65979844k = 65004736k + 975108k</p>
<p>可见缓存的也包含在可用的内存中。</p>
<p>这些信息也可以通过<code>free -k</code> （还可以-m, -g 表示展示的单位），<code>free</code>的输出如下:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[qisheng.li@xxx /home/www/xxx]$ free -k</div><div class="line">             total       used       free     shared    buffers     cached</div><div class="line">Mem:      65979844   64863960    1115884        112       8824    5331160</div><div class="line">-/+ buffers/cache:   59523976    6455868 </div><div class="line">Swap:     50331644      29364   50302280</div></pre></td></tr></table></figure>
<p><code>vmstat</code> 也可以看到系统的内存状况：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[qisheng.li@xxx /home/www/xxx]$ vmstat 1 3 | column -t</div><div class="line">procs  -----------memory----------  ---swap--  -----io----  --system--  -----cpu-----</div><div class="line">r      b                            swpd       free         buff        cache          si  so  bi   bo   <span class="keyword">in</span>     cs     us  sy  id  wa  st</div><div class="line">5      1                            29364      2231704      8808        4214104        0   0   124  230  0      0      15  1   84  0   0</div><div class="line">6      0                            29364      2219016      8908        4225260        0   0   668  132  47040  68271  25  2   72  0   0</div><div class="line">5      0                            29364      2209552      8916        4234020        0   0   512  12   37178  52578  20  2   78  0   0</div></pre></td></tr></table></figure>
<p>第五行和第四行类似，输出的是swap的使用情况。</p>
<h3 id="进程的详细信息"><a href="#进程的详细信息" class="headerlink" title="进程的详细信息"></a>进程的详细信息</h3><blockquote>
<p>PID：进程的ID<br>USER：进程所有者<br>PR：进程的优先级别，越小越优先被执行<br>NI：nice值<br>VIRT：进程占用的虚拟内存<br>RES：进程占用的物理内存<br>SHR：进程使用的共享内存<br>S：进程的状态。S表示休眠，R表示正在运行，Z表示僵死状态，N表示该进程优先值为负数<br>%CPU：进程占用CPU的使用率<br>%MEM：进程使用的物理内存和总内存的百分比<br>TIME+：该进程启动后占用的总的CPU时间，即占用CPU使用时间的累加值。<br>COMMAND：进程启动命令名称</p>
</blockquote>
<h2 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h2><h3 id="交互命令"><a href="#交互命令" class="headerlink" title="交互命令"></a>交互命令</h3><ul>
<li><p>按照CPU占用排序： 交互模式下输入： <code>P</code></p>
</li>
<li><p>按照内存排序： 交互模式下输入： <code>M</code></p>
</li>
<li><p>杀死进程： 交互模式下输入: <code>k</code>, 然后根据提示输入相应的<code>pid</code></p>
</li>
<li><p>更改刷新时间： 交互模式下输入: <code>d</code>或者<code>s</code>, 然后输入相应的刷新值</p>
</li>
<li><p>显示CPU的每个核的使用情况： 交互模式下输入： 键盘上的<code>1</code></p>
</li>
</ul>
<p>top的显示界面会展开：</p>
<img src="/2017/09/09/top/cpu.png" alt="cpu.png" title="">
<ul>
<li>高亮模式： 交互模式下输入: ‘z’</li>
</ul>
<img src="/2017/09/09/top/highlight.png" alt="highlight.png" title="">
<ul>
<li>高亮当前的排序列(需要在z模式下)： 交互模式下输入: ‘x’</li>
</ul>
<img src="/2017/09/09/top/highlight-sort.png" alt="highlight-sort.png" title="">
<ul>
<li><p>改变排序列： 交互模式下按<code>shift</code> + <code>&lt;</code>或<code>&gt;</code></p>
</li>
<li><p>增加显示的Field： 交互模式下按<code>f</code>, 然后选择想要展示的列</p>
</li>
</ul>
<img src="/2017/09/09/top/fields.png" alt="fields.png" title="">
<ul>
<li><p>显示到线程级别： 交互模式下按<code>H</code></p>
</li>
<li><p>显示完整的命令名称: 交互模式下按<code>c</code></p>
</li>
<li><p>分类显示各种系统资源高的进程： 交互模式下按<code>A</code></p>
</li>
</ul>
<img src="/2017/09/09/top/top-a.png" alt="top-a.png" title="">
<h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><ul>
<li>显示某个进程的线程信息</li>
</ul>
<p><code>top -p &lt;PID&gt; -H</code></p>
<p>其中 <code>-H</code>是指显示线程的信息，可以看到每个线程的CPU占用情况</p>

<ul>
<li>显示完整的命令： <code>-c</code></li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><p><a href="http://kumu-linux.github.io/blog/2013/06/07/top-hacks/" rel="external nofollow noopener noreferrer" target="_blank">top实践小技巧 - OPS Notes By 枯木</a></p>
</li>
<li><p><a href="http://mp.weixin.qq.com/s?__biz=MzAxMzQ3NzQ3Nw==&amp;mid=2654249787&amp;idx=2&amp;sn=7aa8e765fda84d5fa26580c210585c53&amp;chksm=8061f031b716792776833370019a9fc4c79fa40ea7db5b4ccb165b90919056acaffd3d971d94&amp;mpshare=1&amp;scene=1&amp;srcid=0801QspCI2Xo04BsZlP6pCVb##" rel="external nofollow noopener noreferrer" target="_blank">Linux服务器的那些性能参数指标</a></p>
</li>
<li><p><a href="http://linuxperf.com/?p=33" rel="external nofollow noopener noreferrer" target="_blank">理解 %iowait (%wio) | Linux Performance</a></p>
</li>
<li><p><a href="http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/top.html" rel="external nofollow noopener noreferrer" target="_blank">8. top linux下的任务管理器 — Linux Tools Quick Tutorial</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> top </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jvm-flag]]></title>
      <url>http://qsli.github.io/2017/06/03/jvm-flag/</url>
      <content type="html"><![CDATA[<p>jinfo</p>
<p>-Xss</p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[maven-scope]]></title>
      <url>http://qsli.github.io/2017/06/01/maven-scope/</url>
      <content type="html"><![CDATA[<h2 id="scope-作用"><a href="#scope-作用" class="headerlink" title="scope 作用"></a>scope 作用</h2><blockquote>
<p>Dependency scope is used to limit the transitivity of a dependency, and also to affect the classpath used for various build tasks.</p>
</blockquote>
<p>主要是限制依赖的传递性，比如有些jar包只会在测试的时候才会有效，部署的时候不会生效。</p>
<p>scope的分类：</p>
<table>
<thead>
<tr>
<th>scope</th>
<th>生效时机</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>compiled</td>
<td>编译/测试/运行</td>
<td>默认</td>
</tr>
<tr>
<td>provided</td>
<td>编译/测试</td>
<td>servlet-api 由tomcat等容器提供</td>
</tr>
<tr>
<td>runtime</td>
<td>运行</td>
<td>编译的时候只需要，JDBC API， 运行的时候必须要有JDBC驱动实现</td>
</tr>
<tr>
<td>test</td>
<td>测试的时候才引入</td>
<td>junit 只在测试的时候生效</td>
</tr>
<tr>
<td>system</td>
<td>编译/测试</td>
<td>必须显式的提供jar的本地文件系统路径</td>
</tr>
<tr>
<td>import</td>
<td>只支持<code>dependencyManagement</code>元素下的type是pom的节点</td>
<td>only available in Maven 2.0.9 or later</td>
</tr>
</tbody>
</table>
<h3 id="import-scope"><a href="#import-scope" class="headerlink" title="import scope"></a>import scope</h3><p>使用方</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.air<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>haha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;com.air.haha.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">             <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div></pre></td></tr></table></figure>
<p>com.air.haha的声明</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.air<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>haha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>haha<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>test<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>a<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>test<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>b<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<p>使用方在使用的时候就可以不用指定，haha中包含的依赖的版本，默认就会使用haha中声明的版本。这样在升级的时候，可以保证依赖一同的升级。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html" rel="external nofollow noopener noreferrer" target="_blank">Maven – Introduction to the Dependency Mechanism</a></p>
</li>
<li><p>《Maven权威指南》—— 9.4 （项目依赖）</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo迁移到ubuntu]]></title>
      <url>http://qsli.github.io/2017/04/19/hexo-ubuntu/</url>
      <content type="html"><![CDATA[<p>系统切换到ubuntu之后，使用的apt安装的node，默认权限是sudo。安装hexo之后也必须以sudo身份执行。<br>需要修改下node的权限，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  qsli.github.com (hexo|✚1…)  npm config get prefix</div><div class="line">/usr/local</div></pre></td></tr></table></figure>
<p>修改owner</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chown -R $(whoami) $(npm config get prefix)/&#123;lib/node_modules,bin,share&#125;</div></pre></td></tr></table></figure>
<p>修改owner之后就可以正常执行hexo了。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://docs.npmjs.com/getting-started/fixing-npm-permissions" rel="external nofollow noopener noreferrer" target="_blank">03 - Fixing npm permissions | npm Documentation</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[web.xml]]></title>
      <url>http://qsli.github.io/2017/04/16/web-xml/</url>
      <content type="html"><![CDATA[<h2 id="load-on-startup标签"><a href="#load-on-startup标签" class="headerlink" title="load-on-startup标签"></a>load-on-startup标签</h2><blockquote>
<p>Servlets are initialized either lazily at request processing time or eagerly during<br>deployment. In the latter case, they are initialized in the order indicated by<br>their load-on-startup elements.</p>
</blockquote>
<p>在web容器启动的时候，可以采用<code>lazily</code>加载的方式和<code>eagerly</code>的方式。</p>
<p><code>load-on-startup</code>中的值决定了进行哪种方式。</p>
<blockquote>
<p>If the value is a negative integer, or the element is not present, the<br>container is free to load the servlet whenever it chooses. If the value is a positive<br>integer or 0, the container must load and initialize the servlet as the application is<br>deployed.</p>
</blockquote>
<p>如果<load-on-startup>这个元素没有出现，或者出现了但是里面的值是负的，容器可以按照自己的需要选择加载Servlet的时机。</load-on-startup></p>
<p>如果里面的值是正数或者0，容器必须保证在容器启动的时候加载和初始化这个servlet</p>
<blockquote>
<p> The container must guarantee that servlets marked with lower integers<br>are loaded before servlets marked with higher integers.</p>
</blockquote>
<p>这个值越小，优先级越高，容器优先加载。</p>
<blockquote>
<p>The container may choose<br>the order of loading of servlets with the same load-on-startup value.</p>
</blockquote>
<p>如果里面的值是一样的，那么加载的顺序由容器来决定（不同实现可能不同）</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li>Java Servlet Specification 3.0</li>
</ol>
]]></content>
      
        <categories>
            
            <category> tomcat </category>
            
        </categories>
        
        
        <tags>
            
            <tag> servlet </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tomcat连接数相关的配置]]></title>
      <url>http://qsli.github.io/2017/04/05/tomcat-connection/</url>
      <content type="html"><![CDATA[<p><em>以下是tomcat7的一些配置说明</em></p>
<h1 id="tomcat交互图"><a href="#tomcat交互图" class="headerlink" title="tomcat交互图"></a>tomcat交互图</h1><img src="/2017/04/05/tomcat-connection/tomcat-interaction.jpg" alt="图片取自参考1" title="图片取自参考1">
<h2 id="maxConnections"><a href="#maxConnections" class="headerlink" title="maxConnections"></a>maxConnections</h2><p>tomcat接受的最大连接的个数，超过这个连接个数，acceptor就会阻塞。</p>
<blockquote>
<p>The maximum number of connections that the server will accept and process at any given time. When this number has been reached, the server will accept, but not process, one further connection. This additional connection be blocked until the number of connections being processed falls below maxConnections at which point the server will start accepting and processing new connections again. Note that once the limit has been reached, the operating system may still accept connections based on the acceptCount setting. The default value varies by connector type. For BIO the default is the value of maxThreads unless an Executor is used in which case the default will be the value of maxThreads from the executor. For NIO the default is 10000. For APR/native, the default is 8192.</p>
</blockquote>
<p>需要注意的是，在BIO模式下，<code>maxConnections</code>的值默认等于<code>maxThreads</code>的值!!!</p>
<p>达到maxConnections之后，acceptor线程就会阻塞，用jstack查看堆栈会发现Acceptor线程阻塞在下面的代码</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo -u tomcat jstack  `pgrep <span class="_">-f</span> <span class="string">'tomcat'</span>` | less</div></pre></td></tr></table></figure>
<p>tomcat  7的源码中相应的代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//if we have reached max connections, wait</span></div><div class="line">countUpOrAwaitConnection();</div></pre></td></tr></table></figure>
<p>函数的具体实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">countUpOrAwaitConnection</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">    <span class="keyword">if</span> (maxConnections==-<span class="number">1</span>) <span class="keyword">return</span>;</div><div class="line">    LimitLatch latch = connectionLimitLatch;</div><div class="line">    <span class="keyword">if</span> (latch!=<span class="keyword">null</span>) latch.countUpOrAwait();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中<code>LimitLatch</code>是tomcat自己实现的一个类似<code>CountDownLatch</code>的东西。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Shared latch that allows the latch to be acquired a limited number of times</div><div class="line"> * after which all subsequent requests to acquire the latch will be placed in a</div><div class="line"> * FIFO queue until one of the shares is returned.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LimitLatch</span> </span>&#123;...&#125;</div></pre></td></tr></table></figure>
<p>它的初始化过程：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> LimitLatch <span class="title">initializeConnectionLatch</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (maxConnections==-<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (connectionLimitLatch==<span class="keyword">null</span>) &#123;</div><div class="line">        connectionLimitLatch = <span class="keyword">new</span> LimitLatch(getMaxConnections());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> connectionLimitLatch;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="maxThreads"><a href="#maxThreads" class="headerlink" title="maxThreads"></a>maxThreads</h2><p>tomcat的连接线程最大个数。</p>
<blockquote>
<p>The maximum number of request processing threads to be created by this Connector, which therefore determines the maximum number of simultaneous requests that can be handled. If not specified, this attribute is set to 200. If an executor is associated with this connector, this attribute is ignored as the connector will execute tasks using the executor rather than an internal thread pool. Note that if an executor is configured any value set for this attribute will be recorded correctly but it will be reported (e.g. via JMX) as -1 to make clear that it is not used.</p>
<p>maxThreads、minSpareThreads是tomcat工作线程池的配置参数，maxThreads就相当于jdk线程池的maxPoolSize，而minSpareThreads就相当于jdk线程池的corePoolSize。</p>
</blockquote>
<p>相应的代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createExecutor</span><span class="params">()</span> </span>&#123;</div><div class="line">    internalExecutor = <span class="keyword">true</span>;</div><div class="line">    TaskQueue taskqueue = <span class="keyword">new</span> TaskQueue();</div><div class="line">    TaskThreadFactory tf = <span class="keyword">new</span> TaskThreadFactory(getName() + <span class="string">"-exec-"</span>, daemon, getThreadPriority());</div><div class="line">    executor = <span class="keyword">new</span> ThreadPoolExecutor(getMinSpareThreads(), getMaxThreads(), <span class="number">60</span>, TimeUnit.SECONDS,taskqueue, tf);</div><div class="line">    taskqueue.setParent( (ThreadPoolExecutor) executor);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="acceptCount"><a href="#acceptCount" class="headerlink" title="acceptCount"></a>acceptCount</h2><p>系统积压队列的大小。</p>
<blockquote>
<p>The maximum queue length for incoming connection requests when all possible request processing threads are in use. Any requests received when the queue is full will be refused. The default value is 100.</p>
</blockquote>
<p>tomcat7的源码中有这么一段，大概就是别名的替换。<code>acceptCount</code>被替换成了<code>backlog</code>，<code>backlog</code>的意思是积压的东西。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> &#123;</div><div class="line">    replacements.put(<span class="string">"acceptCount"</span>, <span class="string">"backlog"</span>);</div><div class="line">    replacements.put(<span class="string">"connectionLinger"</span>, <span class="string">"soLinger"</span>);</div><div class="line">    replacements.put(<span class="string">"connectionTimeout"</span>, <span class="string">"soTimeout"</span>);</div><div class="line">    replacements.put(<span class="string">"rootFile"</span>, <span class="string">"rootfile"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>acceptCount</code>是在初始<code>bind</code>的时候传给jdk的<code>bind</code>函数的，最终会传递到系统层。<br>以<code>NioEndpoint</code>为例，大概如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Initialize the endpoint.</div><div class="line">    */</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">       serverSock = ServerSocketChannel.open();</div><div class="line">       socketProperties.setProperties(serverSock.socket());</div><div class="line">       InetSocketAddress addr = (getAddress()!=<span class="keyword">null</span>?<span class="keyword">new</span> InetSocketAddress(getAddress(),getPort()):<span class="keyword">new</span> InetSocketAddress(getPort()));</div><div class="line">       serverSock.socket().bind(addr,getBacklog());</div><div class="line">       serverSock.configureBlocking(<span class="keyword">true</span>); <span class="comment">//mimic APR behavior</span></div><div class="line">       serverSock.socket().setSoTimeout(getSocketProperties().getSoTimeout());</div><div class="line"></div><div class="line">       <span class="comment">// Initialize thread count defaults for acceptor, poller</span></div><div class="line">       <span class="keyword">if</span> (acceptorThreadCount == <span class="number">0</span>) &#123;</div><div class="line">           <span class="comment">// <span class="doctag">FIXME:</span> Doesn't seem to work that well with multiple accept threads</span></div><div class="line">           acceptorThreadCount = <span class="number">1</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (pollerThreadCount &lt;= <span class="number">0</span>) &#123;</div><div class="line">           <span class="comment">//minimum one poller thread</span></div><div class="line">           pollerThreadCount = <span class="number">1</span>;</div><div class="line">       &#125;</div><div class="line">       stopLatch = <span class="keyword">new</span> CountDownLatch(pollerThreadCount);</div><div class="line"></div><div class="line">       <span class="comment">// Initialize SSL if needed</span></div><div class="line">       <span class="keyword">if</span> (isSSLEnabled()) &#123;</div><div class="line">          <span class="comment">//ssl stuff</span></div><div class="line">          <span class="comment">//...</span></div><div class="line">          <span class="comment">//...</span></div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (oomParachute&gt;<span class="number">0</span>) reclaimParachute(<span class="keyword">true</span>);</div><div class="line">       selectorPool.open();</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>看下<code>getBackLog</code>的实现(<code>AbstractEndpoint</code>)：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Allows the server developer to specify the backlog that</div><div class="line"> * should be used for server sockets. By default, this value</div><div class="line"> * is 100.</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> backlog = <span class="number">100</span>;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBacklog</span><span class="params">(<span class="keyword">int</span> backlog)</span> </span>&#123; <span class="keyword">if</span> (backlog &gt; <span class="number">0</span>) <span class="keyword">this</span>.backlog = backlog; &#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBacklog</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> backlog; &#125;</div></pre></td></tr></table></figure>
<p>默认值大小是<code>100</code>。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>tomcat的<code>Acceptor</code>线程会不停的从系统的全连接队列里去拿对应的socket连接，直到达到了<code>maxConnections</code>的值。<br>之后<code>Acceptor</code>会阻塞在那里，直到处理的连接小于<code>maxConnections</code>的值。如果一直阻塞的话，就会在系统的tcp<br>连接队列中阻塞，这个队列的长度是<code>acceptCount</code>控制的，默认是<code>100</code>。如果仍然处理不过来，系统可能就会丢掉<br>一些建立的连接了。</p>
<p>所以，大致可以估计下最多能处理的连接数：</p>
<p><code>最大处理连接数 = acceptCount + maxConnection</code></p>
<p>#参考</p>
<ol>
<li><p><a href="https://segmentfault.com/a/1190000008064162" rel="external nofollow noopener noreferrer" target="_blank">tomcat的acceptCount与maxConnections - xixicat - SegmentFault</a></p>
</li>
<li><p><a href="https://tomcat.apache.org/tomcat-7.0-doc/config/http.html" rel="external nofollow noopener noreferrer" target="_blank">Apache Tomcat 7 Configuration Reference (7.0.77) - The HTTP Connector</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> tomcat </category>
            
        </categories>
        
        
        <tags>
            
            <tag> connections </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[异步Servlet及Spring对其的支持]]></title>
      <url>http://qsli.github.io/2017/02/28/servlet-async/</url>
      <content type="html"><![CDATA[<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>限定 tomcat的连接池个数为50，并发为200（&gt;&gt; 线程池大小），时异步具有很大的优势。</p>
<p>如果并发量小于线程池大小，异步的反倒比同步的时间长了很久。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></div><div class="line">            <span class="attr">maxThreads</span>=<span class="string">"50"</span></div><div class="line">            <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></div><div class="line">            <span class="attr">redirectPort</span>=<span class="string">"8443"</span> <span class="attr">URIEncoding</span>=<span class="string">"UTF-8"</span>/&gt;</div></pre></td></tr></table></figure>
<p>完整的测试代码地址： <a href="https://github.com/qsLI/Java_Tutorial/blob/master/web/src/main/java/com/air/async/AsyncRequestProcessor.java" rel="external nofollow noopener noreferrer" target="_blank"></a></p>
<h3 id="async-ab测试"><a href="#async-ab测试" class="headerlink" title="async ab测试"></a>async ab测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">$ ab -n 10000 -c 200 http://localhost:8080/async</div><div class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;</div><div class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</div><div class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</div><div class="line"></div><div class="line">Benchmarking localhost (be patient)</div><div class="line">Completed 1000 requests</div><div class="line">Completed 2000 requests</div><div class="line">Completed 3000 requests</div><div class="line">Completed 4000 requests</div><div class="line">Completed 5000 requests</div><div class="line">Completed 6000 requests</div><div class="line">Completed 7000 requests</div><div class="line">Completed 8000 requests</div><div class="line">Completed 9000 requests</div><div class="line">Completed 10000 requests</div><div class="line">Finished 10000 requests</div><div class="line"></div><div class="line"></div><div class="line">Server Software:        Apache-Coyote/1.1</div><div class="line">Server Hostname:        localhost</div><div class="line">Server Port:            8080</div><div class="line"></div><div class="line">Document Path:          /async</div><div class="line">Document Length:        40 bytes</div><div class="line"></div><div class="line">Concurrency Level:      200</div><div class="line">Time taken for tests:   1000.284 seconds</div><div class="line">Complete requests:      10000</div><div class="line">Failed requests:        47</div><div class="line">   (Connect: 0, Receive: 0, Length: 47, Exceptions: 0)</div><div class="line">Write errors:           0</div><div class="line">Non-2xx responses:      47</div><div class="line">Total transferred:      1530740 bytes</div><div class="line">HTML transferred:       506980 bytes</div><div class="line">Requests per second:    10.00 [#/sec] (mean)</div><div class="line">Time per request:       20005.686 [ms] (mean)</div><div class="line">Time per request:       100.028 [ms] (mean, across all concurrent requests)</div><div class="line">Transfer rate:          1.49 [Kbytes/sec] received</div><div class="line"></div><div class="line">Connection Times (ms)</div><div class="line">              min  mean[+/-sd] median   max</div><div class="line">Connect:        0    0   5.0      0     501</div><div class="line">Processing:     2 19810 1683.3  20001   20560</div><div class="line">Waiting:        1 19810 1683.4  20000   20558</div><div class="line">Total:          2 19811 1683.0  20001   20560</div><div class="line"></div><div class="line">Percentage of the requests served within a certain time (ms)</div><div class="line">  50%  20001</div><div class="line">  66%  20001</div><div class="line">  75%  20002</div><div class="line">  80%  20002</div><div class="line">  90%  20004</div><div class="line">  95%  20009</div><div class="line">  98%  20020</div><div class="line">  99%  20035</div><div class="line"> 100%  20560 (longest request)</div></pre></td></tr></table></figure>
<p>测试过程中出的异常：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">一月 21, 2017 1:05:32 上午 org.apache.catalina.core.StandardWrapperValve invoke</div><div class="line">严重: Servlet.service() for servlet [com.air.async.AsyncServlet] in context with path [] threw exception</div><div class="line">java.util.concurrent.RejectedExecutionException: Task com.air.async.AsyncRequestProcessor@3caec762 rejected from java.util.concurrent.ThreadPoolExecutor@64db0f23[Running, pool size = 100, active threads = 100, queued tasks = 100, completed tasks = 9726]</div><div class="line">  at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2048)</div><div class="line">  at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:821)</div><div class="line">  at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1372)</div><div class="line">  at com.air.async.AsyncServlet.doGet(AsyncServlet.java:25)</div><div class="line">  at javax.servlet.http.HttpServlet.service(HttpServlet.java:621)</div><div class="line">  at javax.servlet.http.HttpServlet.service(HttpServlet.java:728)</div><div class="line">  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305)</div><div class="line">  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)</div><div class="line">  at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)</div><div class="line">  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)</div><div class="line">  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)</div><div class="line">  at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:222)</div><div class="line">  at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123)</div><div class="line">  at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)</div><div class="line">  at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171)</div><div class="line">  at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100)</div><div class="line">  at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:953)</div><div class="line">  at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)</div><div class="line">  at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408)</div><div class="line">  at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1041)</div><div class="line">  at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:603)</div><div class="line">  at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.doRun(AprEndpoint.java:2430)</div><div class="line">  at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run(AprEndpoint.java:2419)</div><div class="line">  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</div><div class="line">  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</div><div class="line">  at java.lang.Thread.run(Thread.java:745)</div></pre></td></tr></table></figure>
<p>有47个失败的case，是队列满了，然后丢掉了请求。</p>
<h3 id="sync-ab测试"><a href="#sync-ab测试" class="headerlink" title="sync ab测试"></a>sync ab测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">$ ab -n 10000 -c 200 http://localhost:8080/hello</div><div class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;</div><div class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</div><div class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</div><div class="line"></div><div class="line">Benchmarking localhost (be patient)</div><div class="line">Completed 1000 requests</div><div class="line">Completed 2000 requests</div><div class="line">Completed 3000 requests</div><div class="line">Completed 4000 requests</div><div class="line">Completed 5000 requests</div><div class="line">Completed 6000 requests</div><div class="line">Completed 7000 requests</div><div class="line">Completed 8000 requests</div><div class="line">Completed 9000 requests</div><div class="line">Completed 10000 requests</div><div class="line">Finished 10000 requests</div><div class="line"></div><div class="line"></div><div class="line">Server Software:        Apache-Coyote/1.1</div><div class="line">Server Hostname:        localhost</div><div class="line">Server Port:            8080</div><div class="line"></div><div class="line">Document Path:          /hello</div><div class="line">Document Length:        12 bytes</div><div class="line"></div><div class="line">Concurrency Level:      200</div><div class="line">Time taken for tests:   2002.151 seconds</div><div class="line">Complete requests:      10000</div><div class="line">Failed requests:        0</div><div class="line">Write errors:           0</div><div class="line">Total transferred:      1340000 bytes</div><div class="line">HTML transferred:       120000 bytes</div><div class="line">Requests per second:    4.99 [#/sec] (mean)</div><div class="line">Time per request:       40043.028 [ms] (mean)</div><div class="line">Time per request:       200.215 [ms] (mean, across all concurrent requests)</div><div class="line">Transfer rate:          0.65 [Kbytes/sec] received</div><div class="line"></div><div class="line">Connection Times (ms)</div><div class="line">              min  mean[+/-sd] median   max</div><div class="line">Connect:        0    0   0.4      0       8</div><div class="line">Processing: 10002 39740 2686.3  40005   50319</div><div class="line">Waiting:    10002 39740 2686.4  40004   50319</div><div class="line">Total:      10002 39741 2686.3  40005   50319</div><div class="line"></div><div class="line">Percentage of the requests served within a certain time (ms)</div><div class="line">  50%  40005</div><div class="line">  66%  40009</div><div class="line">  75%  40014</div><div class="line">  80%  40022</div><div class="line">  90%  40122</div><div class="line">  95%  40316</div><div class="line">  98%  40449</div><div class="line">  99%  40483</div><div class="line"> 100%  50319 (longest request)</div></pre></td></tr></table></figure>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>异步的servle在高并发的情况下可以使用较少的连接线程实现较大的吞吐。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Puts this request into asynchronous mode, and initializes its</div><div class="line">    * &#123;<span class="doctag">@link</span> AsyncContext&#125; with the original (unwrapped) ServletRequest</div><div class="line">    * and ServletResponse objects.</div><div class="line">    *</div><div class="line">    * &lt;p&gt;Calling this method will cause committal of the associated</div><div class="line">    * response to be delayed until &#123;<span class="doctag">@link</span> AsyncContext#complete&#125; is</div><div class="line">    * called on the returned &#123;<span class="doctag">@link</span> AsyncContext&#125;, or the asynchronous</div><div class="line">    * operation has timed out.</div><div class="line">    *</div><div class="line">    * &lt;p&gt;Calling &#123;<span class="doctag">@link</span> AsyncContext#hasOriginalRequestAndResponse()&#125; on</div><div class="line">    * the returned AsyncContext will return &lt;code&gt;true&lt;/code&gt;. Any filters</div><div class="line">    * invoked in the &lt;i&gt;outbound&lt;/i&gt; direction after this request was put</div><div class="line">    * into asynchronous mode may use this as an indication that any request</div><div class="line">    * and/or response wrappers that they added during their &lt;i&gt;inbound&lt;/i&gt;</div><div class="line">    * invocation need not stay around for the duration of the asynchronous</div><div class="line">    * operation, and therefore any of their associated resources may be</div><div class="line">    * released.</div><div class="line">    *</div><div class="line">    * &lt;p&gt;This method clears the list of &#123;<span class="doctag">@link</span> AsyncListener&#125; instances</div><div class="line">    * (if any) that were registered with the AsyncContext returned by the</div><div class="line">    * previous call to one of the startAsync methods, after calling each</div><div class="line">    * AsyncListener at its &#123;<span class="doctag">@link</span> AsyncListener#onStartAsync onStartAsync&#125;</div><div class="line">    * method.</div><div class="line">    *</div><div class="line">    * &lt;p&gt;Subsequent invocations of this method, or its overloaded </div><div class="line">    * variant, will return the same AsyncContext instance, reinitialized</div><div class="line">    * as appropriate.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@return</span> the (re)initialized AsyncContext</div><div class="line">    * </div><div class="line">    * <span class="doctag">@throws</span> IllegalStateException if this request is within the scope of</div><div class="line">    * a filter or servlet that does not support asynchronous operations</div><div class="line">    * (that is, &#123;<span class="doctag">@link</span> #isAsyncSupported&#125; returns false),</div><div class="line">    * or if this method is called again without any asynchronous dispatch</div><div class="line">    * (resulting from one of the &#123;<span class="doctag">@link</span> AsyncContext#dispatch&#125; methods),</div><div class="line">    * is called outside the scope of any such dispatch, or is called again</div><div class="line">    * within the scope of the same dispatch, or if the response has</div><div class="line">    * already been closed</div><div class="line">    *</div><div class="line">    * <span class="doctag">@see</span> AsyncContext#dispatch()</div><div class="line">    * <span class="doctag">@since</span> Servlet 3.0</div><div class="line">    */</div><div class="line">       <span class="function"><span class="keyword">public</span> AsyncContext <span class="title">startAsync</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException</span>;</div></pre></td></tr></table></figure>
<p>//挖坑，待填</p>
<h2 id="Spring-对异步Servlet的支持"><a href="#Spring-对异步Servlet的支持" class="headerlink" title="Spring 对异步Servlet的支持"></a>Spring 对异步Servlet的支持</h2><p>web.xml中需要的配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--spring encoding filter--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--servlet--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></div><div class="line">            classpath:spring/mvc/mvc-app.xml</div><div class="line">        <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果有filter的话也必须配置上异步的支持</p>
<h3 id="Callable-方式"><a href="#Callable-方式" class="headerlink" title="Callable 方式"></a>Callable 方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/async"</span>)</div><div class="line"><span class="meta">@PostMapping</span></div><div class="line"><span class="function"><span class="keyword">public</span> Callable&lt;String&gt; <span class="title">asyncProcess</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Callable&lt;String&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"index"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种方式返回一个<code>Callable</code>，Spring在线程池中执行<code>Callable</code>并获取到结果然后进行后续的处理。</p>
<p>TaskExecutor 自定义线程池：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- ================================== --&gt;</span>  </div><div class="line"><span class="comment">&lt;!-- 0. Set up task executor for async  --&gt;</span></div><div class="line"><span class="comment">&lt;!-- ================================== --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;<span class="name">mvc:async-support</span> <span class="attr">default-timeout</span>=<span class="string">"30000"</span> <span class="attr">task-executor</span>=<span class="string">"taskExecutor"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- modify the parameters of thread pool --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"taskExecutor"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"corePoolSize"</span> <span class="attr">value</span>=<span class="string">"5"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"50"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"queueCapacity"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keepAliveSeconds"</span> <span class="attr">value</span>=<span class="string">"120"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="DeferredResult-方式"><a href="#DeferredResult-方式" class="headerlink" title="DeferredResult 方式"></a>DeferredResult 方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/asyncV2"</span>)</div><div class="line">   <span class="function"><span class="keyword">public</span> DeferredResult&lt;String&gt; <span class="title">aysncProcess2</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">final</span> DeferredResult&lt;String&gt; stringDeferredResult = <span class="keyword">new</span> DeferredResult&lt;&gt;();</div><div class="line">       MoreExecutors.directExecutor().execute(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">               <span class="keyword">try</span> &#123;</div><div class="line">                   Thread.sleep(<span class="number">30000</span>);</div><div class="line">                   stringDeferredResult.setResult(<span class="string">"index"</span>);</div><div class="line">               &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                   stringDeferredResult.setErrorResult(<span class="string">"error"</span>);</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;);</div><div class="line">       <span class="keyword">return</span> stringDeferredResult;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>这种方式返回的是<code>DeferredResult</code>，计算的逻辑可以在业务线程池中计算，当计算完成后，</p>
<p>直接向<code>DeferredResult</code>中set数据即可，会触发后续的处理，并返回给客户端。</p>
<h3 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h3><p><code>RequestMappingHandlerAdapter</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   * Invoke the &#123;<span class="doctag">@link</span> RequestMapping&#125; handler method preparing a &#123;<span class="doctag">@link</span> ModelAndView&#125;</div><div class="line">   * if view resolution is required.</div><div class="line">   * <span class="doctag">@since</span> 4.2</div><div class="line">   * <span class="doctag">@see</span> #createInvocableHandlerMethod(HandlerMethod)</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">invokeHandlerMethod</span><span class="params">(HttpServletRequest request,</span></span></div><div class="line">      HttpServletResponse response, HandlerMethod handlerMethod) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">    ServletWebRequest webRequest = <span class="keyword">new</span> ServletWebRequest(request, response);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      WebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);</div><div class="line">      ModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);</div><div class="line"></div><div class="line">      ServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);</div><div class="line">      invocableMethod.setHandlerMethodArgumentResolvers(<span class="keyword">this</span>.argumentResolvers);</div><div class="line">      invocableMethod.setHandlerMethodReturnValueHandlers(<span class="keyword">this</span>.returnValueHandlers);</div><div class="line">      invocableMethod.setDataBinderFactory(binderFactory);</div><div class="line">      invocableMethod.setParameterNameDiscoverer(<span class="keyword">this</span>.parameterNameDiscoverer);</div><div class="line"></div><div class="line">      ModelAndViewContainer mavContainer = <span class="keyword">new</span> ModelAndViewContainer();</div><div class="line">      mavContainer.addAllAttributes(RequestContextUtils.getInputFlashMap(request));</div><div class="line">      modelFactory.initModel(webRequest, mavContainer, invocableMethod);</div><div class="line">      mavContainer.setIgnoreDefaultModelOnRedirect(<span class="keyword">this</span>.ignoreDefaultModelOnRedirect);</div><div class="line"></div><div class="line">      <span class="comment">//创建异步请求</span></div><div class="line">      AsyncWebRequest asyncWebRequest = WebAsyncUtils.createAsyncWebRequest(request, response);</div><div class="line">      asyncWebRequest.setTimeout(<span class="keyword">this</span>.asyncRequestTimeout);</div><div class="line"></div><div class="line">      <span class="comment">//下面的代码设置了Callable执行的线程池，以及拦截器还有DeferredResult的拦截器</span></div><div class="line">      WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</div><div class="line">      asyncManager.setTaskExecutor(<span class="keyword">this</span>.taskExecutor);</div><div class="line">      asyncManager.setAsyncWebRequest(asyncWebRequest);</div><div class="line">      asyncManager.registerCallableInterceptors(<span class="keyword">this</span>.callableInterceptors);</div><div class="line">      asyncManager.registerDeferredResultInterceptors(<span class="keyword">this</span>.deferredResultInterceptors);</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (asyncManager.hasConcurrentResult()) &#123;</div><div class="line">        Object result = asyncManager.getConcurrentResult();</div><div class="line">        mavContainer = (ModelAndViewContainer) asyncManager.getConcurrentResultContext()[<span class="number">0</span>];</div><div class="line">        asyncManager.clearConcurrentResult();</div><div class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">          logger.debug(<span class="string">"Found concurrent result value ["</span> + result + <span class="string">"]"</span>);</div><div class="line">        &#125;</div><div class="line">        invocableMethod = invocableMethod.wrapConcurrentResult(result);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      invocableMethod.invokeAndHandle(webRequest, mavContainer);</div><div class="line">      <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">finally</span> &#123;</div><div class="line">      webRequest.requestCompleted();</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h4 id="Callable-的处理"><a href="#Callable-的处理" class="headerlink" title="Callable 的处理"></a>Callable 的处理</h4><p><code>Callable</code>的处理是在<code>CallableMethodReturnValueHandler</code>中的，这个接口最终继承了<code>HandlerMethodReturnValueHandler</code>, 也就是对Controller方法返回值的后处理。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableMethodReturnValueHandler</span> <span class="keyword">implements</span> <span class="title">AsyncHandlerMethodReturnValueHandler</span> </span>&#123;</div><div class="line">  <span class="comment">//省略...</span></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleReturnValue</span><span class="params">(Object returnValue, MethodParameter returnType,</span></span></div><div class="line">      ModelAndViewContainer mavContainer, NativeWebRequest webRequest) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (returnValue == <span class="keyword">null</span>) &#123;</div><div class="line">      mavContainer.setRequestHandled(<span class="keyword">true</span>);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Callable&lt;?&gt; callable = (Callable&lt;?&gt;) returnValue;</div><div class="line">    WebAsyncUtils.getAsyncManager(webRequest).startCallableProcessing(callable, mavContainer);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终是调用了<code>WebAsyncManager</code>的<code>startCallableProcessing</code>进行处理</p>
<p><code>WebAsyncManager</code>中的关键代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startCallableProcessing</span><span class="params">(Callable&lt;?&gt; callable, Object... processingContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    Assert.notNull(callable, <span class="string">"Callable must not be null"</span>);</div><div class="line">    startCallableProcessing(<span class="keyword">new</span> WebAsyncTask(callable), processingContext);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startCallableProcessing</span><span class="params">(<span class="keyword">final</span> WebAsyncTask&lt;?&gt; webAsyncTask, Object... processingContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    Assert.notNull(webAsyncTask, <span class="string">"WebAsyncTask must not be null"</span>);</div><div class="line">    Assert.state(<span class="keyword">this</span>.asyncWebRequest != <span class="keyword">null</span>, <span class="string">"AsyncWebRequest must not be null"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//超时</span></div><div class="line">    Long timeout = webAsyncTask.getTimeout();</div><div class="line">    <span class="keyword">if</span> (timeout != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">this</span>.asyncWebRequest.setTimeout(timeout);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//线程池</span></div><div class="line">    AsyncTaskExecutor executor = webAsyncTask.getExecutor();</div><div class="line">    <span class="keyword">if</span> (executor != <span class="keyword">null</span>) &#123;</div><div class="line">      <span class="keyword">this</span>.taskExecutor = executor;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//拦截器</span></div><div class="line">    List&lt;CallableProcessingInterceptor&gt; interceptors = <span class="keyword">new</span> ArrayList&lt;CallableProcessingInterceptor&gt;();</div><div class="line">    interceptors.add(webAsyncTask.getInterceptor());</div><div class="line">    interceptors.addAll(<span class="keyword">this</span>.callableInterceptors.values());</div><div class="line">    interceptors.add(timeoutCallableInterceptor);</div><div class="line"></div><div class="line">    <span class="keyword">final</span> Callable&lt;?&gt; callable = webAsyncTask.getCallable();</div><div class="line">    <span class="keyword">final</span> CallableInterceptorChain interceptorChain = <span class="keyword">new</span> CallableInterceptorChain(interceptors);</div><div class="line"></div><div class="line">    <span class="comment">//超时处理</span></div><div class="line">    <span class="keyword">this</span>.asyncWebRequest.addTimeoutHandler(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        logger.debug(<span class="string">"Processing timeout"</span>);</div><div class="line">        Object result = interceptorChain.triggerAfterTimeout(asyncWebRequest, callable);</div><div class="line">        <span class="keyword">if</span> (result != CallableProcessingInterceptor.RESULT_NONE) &#123;</div><div class="line">          setConcurrentResultAndDispatch(result);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">//成功的回调，会触发拦截器的拦截</span></div><div class="line">    <span class="keyword">this</span>.asyncWebRequest.addCompletionHandler(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        interceptorChain.triggerAfterCompletion(asyncWebRequest, callable);</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">//拦截</span></div><div class="line">    interceptorChain.applyBeforeConcurrentHandling(<span class="keyword">this</span>.asyncWebRequest, callable);</div><div class="line">    startAsyncProcessing(processingContext);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="keyword">this</span>.taskExecutor.submit(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">          Object result = <span class="keyword">null</span>;</div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//拦截</span></div><div class="line">            interceptorChain.applyPreProcess(asyncWebRequest, callable);</div><div class="line">            result = callable.call();</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">            result = ex;</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="comment">//拦截</span></div><div class="line">            result = interceptorChain.applyPostProcess(asyncWebRequest, callable, result);</div><div class="line">          &#125;</div><div class="line">          setConcurrentResultAndDispatch(result);</div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (RejectedExecutionException ex) &#123;</div><div class="line">      Object result = interceptorChain.applyPostProcess(<span class="keyword">this</span>.asyncWebRequest, callable, ex);</div><div class="line">      setConcurrentResultAndDispatch(result);</div><div class="line">      <span class="keyword">throw</span> ex;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h4 id="DeferredResult-的处理"><a href="#DeferredResult-的处理" class="headerlink" title="DeferredResult 的处理"></a>DeferredResult 的处理</h4><p>DeferredResult的返回时机就是有数据的时候，顺藤摸瓜:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setResult</span><span class="params">(T result)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> setResultInternal(result);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">setResultInternal</span><span class="params">(Object result)</span> </span>&#123;</div><div class="line">    <span class="comment">// Immediate expiration check outside of the result lock</span></div><div class="line">    <span class="keyword">if</span> (isSetOrExpired()) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    DeferredResultHandler resultHandlerToUse;</div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">      <span class="comment">// Got the lock in the meantime: double-check expiration status</span></div><div class="line">      <span class="keyword">if</span> (isSetOrExpired()) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// At this point, we got a new result to process</span></div><div class="line">      <span class="keyword">this</span>.result = result;</div><div class="line">      resultHandlerToUse = <span class="keyword">this</span>.resultHandler;</div><div class="line">      <span class="keyword">if</span> (resultHandlerToUse == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="comment">// No result handler set yet -&gt; let the setResultHandler implementation</span></div><div class="line">        <span class="comment">// pick up the result object and invoke the result handler for it.</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">      &#125;</div><div class="line">      <span class="comment">// Result handler available -&gt; let's clear the stored reference since</span></div><div class="line">      <span class="comment">// we don't need it anymore.</span></div><div class="line">      <span class="keyword">this</span>.resultHandler = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// If we get here, we need to process an existing result object immediately.</span></div><div class="line">    <span class="comment">// The decision is made within the result lock; just the handle call outside</span></div><div class="line">    <span class="comment">// of it, avoiding any deadlock potential with Servlet container locks.</span></div><div class="line">    resultHandlerToUse.handleResult(result);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p><code>DeferredResultHandler</code>是什么鬼？我们new的时候没有设置啊？？其实这个也是由<code>HandlerMethodReturnValueHandler</code>来实现的，有个对应的<code>DeferredResultMethodReturnValueHandler</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleReturnValue</span><span class="params">(Object returnValue, MethodParameter returnType,</span></span></div><div class="line">    ModelAndViewContainer mavContainer, NativeWebRequest webRequest) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (returnValue == <span class="keyword">null</span>) &#123;</div><div class="line">    mavContainer.setRequestHandled(<span class="keyword">true</span>);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  DeferredResultAdapter adapter = getAdapterFor(returnValue.getClass());</div><div class="line">  Assert.notNull(adapter);</div><div class="line">  DeferredResult&lt;?&gt; result = adapter.adaptToDeferredResult(returnValue);</div><div class="line">  WebAsyncUtils.getAsyncManager(webRequest).startDeferredResultProcessing(result, mavContainer);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终还是到了<code>WebAsyncManager</code>的处理方法中，和<code>Callable</code>的处理类似，不一一深入。</p>
<p>值得一提的是，正是在这个<code>startDeferredResultProcessing</code>中塞入了一个<code>DeferredResultHandler</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">      interceptorChain.applyPreProcess(<span class="keyword">this</span>.asyncWebRequest, deferredResult);</div><div class="line">      deferredResult.setResultHandler(<span class="keyword">new</span> DeferredResultHandler() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleResult</span><span class="params">(Object result)</span> </span>&#123;</div><div class="line">          result = interceptorChain.applyPostProcess(asyncWebRequest, deferredResult, result);</div><div class="line">          setConcurrentResultAndDispatch(result);</div><div class="line">        &#125;</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">      setConcurrentResultAndDispatch(ex);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>因为我们是异步执行的，所以虽然handler的注入在后面，其实影响也不大，而且<code>setResult</code>中也做了判断。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://www.journaldev.com/2008/async-servlet-feature-of-servlet-3" rel="external nofollow noopener noreferrer" target="_blank">Async Servlet Feature of Servlet 3 - JournalDev</a></p>
</li>
<li><p><a href="https://docs.oracle.com/javaee/7/tutorial/servlets012.htm" rel="external nofollow noopener noreferrer" target="_blank">17.12 Asynchronous Processing - Java Platform, Enterprise Edition: The Java EE Tutorial (Release 7)</a></p>
</li>
<li><p><a href="https://httpd.apache.org/docs/2.4/programs/ab.html" rel="external nofollow noopener noreferrer" target="_blank">ab - Apache HTTP server benchmarking tool - Apache HTTP Server Version 2.4</a></p>
</li>
<li><p><a href="http://www.ha97.com/5095.html" rel="external nofollow noopener noreferrer" target="_blank">系统吞吐量（TPS）、用户并发量、性能测试概念和公式</a></p>
</li>
<li><p><a href="https://lanjingling.github.io/2016/01/20/servlet3-new-furture/" rel="external nofollow noopener noreferrer" target="_blank">servlet3新特性——异步请求处理 | 晓的技术博客</a></p>
</li>
<li><p><a href="http://blog.csdn.net/wzy_1988/article/details/38922449" rel="external nofollow noopener noreferrer" target="_blank">解决java.util.concurrent.RejectedExecutionException - 小一的专栏 - 博客频道 - CSDN.NET</a></p>
</li>
<li><p><a href="http://www.lai18.com/content/2483896.html" rel="external nofollow noopener noreferrer" target="_blank">Springmvc异步支持报错- - Lai18.com IT技术文章收藏夹</a></p>
</li>
<li><p><a href="http://shengwangi.blogspot.hk/2015/09/asynchronous-spring-mvc-hello-world.html" rel="external nofollow noopener noreferrer" target="_blank">Asynchronous Spring MVC – Hello World Example | Code Breeze !</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> servlet </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[cygwin执行命令非常慢]]></title>
      <url>http://qsli.github.io/2017/02/20/cygwin-360/</url>
      <content type="html"><![CDATA[<p>cygwin在windows上提供了一套类似linux的开发环境，用起来还是挺爽的。</p>
<p>但是一直困扰我的一个问题是，太慢！具体现象就是使用<code>ls</code>都得等半天才出结果。</p>
<p>看网上的资料说cygwin确实慢，再加上我用了<code>oh-my-zsh</code>，更是慢上加慢。</p>
<h2 id="可能的原因"><a href="#可能的原因" class="headerlink" title="可能的原因"></a>可能的原因</h2><p>貌似360对这些工具程序的调用都会做一个拦截，判断下是否有风险。</p>
<p>于是干脆把360给卸载了，终于<code>ls</code>的速度变得可以接受。。。。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://www.it1352.com/321952.html" rel="external nofollow noopener noreferrer" target="_blank">为什么Cygwin的执行shell命令很慢？ - IT屋-程序员软件开发技术分享社区</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cygwin </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Intellij Idea中临时文件功能]]></title>
      <url>http://qsli.github.io/2017/02/15/idea-scratches/</url>
      <content type="html"><![CDATA[<h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>Intellij中默认新建文件必须指定存储的位置，但是有的时候我们可能只是想创建一个临时的文件顺手记录一些东西。这个功能类似<code>NotePad++</code>或者<code>sublime text</code>中的新建tab，这个tab默认是不落地到文件的，但是其中的内容会以临时文件存储起来。</p>
<p>在Google上搜索了大半天，也没有找到类似的功能（主要是关键词提炼的不行）。后来阴差阳错地搜到了scratches file, 翻译了一下，正是我要找的功能！ (英语差真是害死人啊！)</p>
<blockquote>
<p>scratch file 过期文件；临时文件</p>
</blockquote>
<h3 id="scratches优势"><a href="#scratches优势" class="headerlink" title="scratches优势"></a>scratches优势</h3><blockquote>
<ol>
<li><p>The scratch code in scripting languages is <em>executable</em>.</p>
</li>
<li><p>you can run and <em>debug</em> it.</p>
</li>
<li><p><em>Local history</em> for scratches is supported.</p>
</li>
<li><p>It is possible to perform <em>clipboard operations</em> with scratches.</p>
</li>
<li><p>The scratches are <em>stored</em>, depending on your operating system,<br>Under IntelliJ IDEA home, in the directory config/scratches (on Windows/*NIX)<br>~ Library-&gt;Preferences-&gt;<intellij idea="">XX-&gt;scratches(on OS X)<br>You can undo or redo changes in scratches.</intellij></p>
</li>
</ol>
</blockquote>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>以下功能基于Intellij Idea 2016.3.4</p>
<p><code>Ctrl + Shift + A</code>在搜索框中输入 <code>scratch</code>，可以看到如下的两个功能：</p>
<img src="/2017/02/15/idea-scratches/search.jpg" alt="search.jpg" title="">
<p>这里会出现两个scratch 相关的选项， 一个是scratch buffer， 一个是scratch file。<br>scratch buffer不用选择语法，scratch file则会让你选择对应的语法</p>
<img src="/2017/02/15/idea-scratches/new.jpg" alt="new.jpg" title="">
<p>创建之后，可以在下面的位置查看:</p>
<img src="/2017/02/15/idea-scratches/menu.jpg" alt="menu.jpg" title="">
<img src="/2017/02/15/idea-scratches/scratches.jpg" alt="scratches.jpg" title="">
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>快捷键需要按的键比较多，可以自己定制下，比如使用先后按键的那种。</p>
<img src="/2017/02/15/idea-scratches/keymap.jpg" alt="keymap.jpg" title="">
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="https://www.jetbrains.com/help/idea/2016.3/scratches.html" rel="external nofollow noopener noreferrer" target="_blank">IntelliJ IDEA 2016.3 Help :: Scratches</a></p>
</li>
<li><p><a href="http://docs.notepad-plus-plus.org/index.php/Sessions_And_Projects" rel="external nofollow noopener noreferrer" target="_blank">Sessions And Projects - Notepad++ Wiki</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> idea </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring中的factory-bean和FactoryBean]]></title>
      <url>http://qsli.github.io/2017/02/14/factorybean/</url>
      <content type="html"><![CDATA[<h3 id="factory-bean"><a href="#factory-bean" class="headerlink" title="factory-bean"></a>factory-bean</h3><p>spring的bean标签的一个属性，用来指定创建实例的方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientService</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ClientService clientService = <span class="keyword">new</span> ClientService();</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ClientService</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ClientService <span class="title">createInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> clientService;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultServiceLocator</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ClientService clientService = <span class="keyword">new</span> ClientServiceImpl();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AccountService accountService = <span class="keyword">new</span> AccountServiceImpl();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DefaultServiceLocator</span><span class="params">()</span> </span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ClientService <span class="title">createClientServiceInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> clientService;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> AccountService <span class="title">createAccountServiceInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> accountService;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="第一种写法"><a href="#第一种写法" class="headerlink" title="第一种写法"></a>第一种写法</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"clientService"</span></span></div><div class="line">    <span class="attr">class</span>=<span class="string">"examples.ClientService"</span></div><div class="line">    <span class="attr">factory-method</span>=<span class="string">"createInstance"</span>/&gt;</div></pre></td></tr></table></figure>
<p>这种写法要求<code>factory-method</code>必须是<code>static</code>的</p>
<h4 id="第二种写法"><a href="#第二种写法" class="headerlink" title="第二种写法"></a>第二种写法</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"serviceLocator"</span> <span class="attr">class</span>=<span class="string">"examples.DefaultServiceLocator"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- inject any dependencies required by this locator bean --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"clientService"</span></span></div><div class="line">    <span class="attr">factory-bean</span>=<span class="string">"serviceLocator"</span></div><div class="line">    <span class="attr">factory-method</span>=<span class="string">"createClientServiceInstance"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span></span></div><div class="line">    <span class="attr">factory-bean</span>=<span class="string">"serviceLocator"</span></div><div class="line">    <span class="attr">factory-method</span>=<span class="string">"createAccountServiceInstance"</span>/&gt;</div></pre></td></tr></table></figure>
<p>这种写法多了一个<code>factory-bean</code>，指定了使用哪个类的哪个方法去创建，不要求这个方法是<code>static</code>，但是<code>factory-bean</code>对应的类必须交由spring管理。</p>
<p>一个类中可以包含多个创建的方法。</p>
<h3 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h3><p>是Spring提供的一个接口，用来定制Bean的初始化逻辑。</p>
<blockquote>
<p>If you have complex initialization code that is better expressed in Java as opposed to a (potentially) verbose amount of XML, you can create your own FactoryBean</p>
<p>  Interface to be implemented by objects used within a {@link BeanFactory} which<br>    are themselves factories for individual objects. If a bean implements this<br>    interface, it is used as a factory for an object to expose, not directly as a<br>    bean instance that will be exposed itself.</p>
</blockquote>
<p>这个接口有三个方法：</p>
<ul>
<li>Object getObject()</li>
</ul>
<p>获取创建的对象</p>
<ul>
<li>boolean isSingleton()</li>
</ul>
<p>返回的对象是否是单例的</p>
<ul>
<li>Class getObjectType()</li>
</ul>
<p>获取返回的对象的类型</p>
<p><code>GsonFactoryBean</code>就实现了<code>FactoryBean</code>接口，是一个不错的例子，大概代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GsonFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Gson</span>&gt;, <span class="title">InitializingBean</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> base64EncodeByteArrays = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> serializeNulls = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> prettyPrinting = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> disableHtmlEscaping = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String dateFormatPattern;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Gson gson;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBase64EncodeByteArrays</span><span class="params">(<span class="keyword">boolean</span> base64EncodeByteArrays)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.base64EncodeByteArrays = base64EncodeByteArrays;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSerializeNulls</span><span class="params">(<span class="keyword">boolean</span> serializeNulls)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.serializeNulls = serializeNulls;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrettyPrinting</span><span class="params">(<span class="keyword">boolean</span> prettyPrinting)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.prettyPrinting = prettyPrinting;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDisableHtmlEscaping</span><span class="params">(<span class="keyword">boolean</span> disableHtmlEscaping)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.disableHtmlEscaping = disableHtmlEscaping;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDateFormatPattern</span><span class="params">(String dateFormatPattern)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.dateFormatPattern = dateFormatPattern;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</div><div class="line">        GsonBuilder builder = (<span class="keyword">this</span>.base64EncodeByteArrays ?</div><div class="line">                GsonBuilderUtils.gsonBuilderWithBase64EncodedByteArrays() : <span class="keyword">new</span> GsonBuilder());</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.serializeNulls) &#123;</div><div class="line">            builder.serializeNulls();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.prettyPrinting) &#123;</div><div class="line">            builder.setPrettyPrinting();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.disableHtmlEscaping) &#123;</div><div class="line">            builder.disableHtmlEscaping();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.dateFormatPattern != <span class="keyword">null</span>) &#123;</div><div class="line">            builder.setDateFormat(<span class="keyword">this</span>.dateFormatPattern);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.gson = builder.create();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Gson <span class="title">getObject</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.gson;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</div><div class="line">        <span class="keyword">return</span> Gson.class;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>GsonFactoryBean</code>除了实现了<code>FactoryBean</code>接口，还实现了<code>InitializingBean</code>接口，这个接口只有一个方法</p>
<p><code>afterPropertiesSet</code>。这个方法会在bean的所有提供的属性被设置之后，被BeanFactory调用，是spring保留的一个扩展点。</p>
<p><code>GsonFactoryBean</code>在这个方法中将收集到的配置信息传给builder，构建出一个<code>Gson</code>对象（这种一般是大对象，一个容器中有一个就够了）。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"gsonFactoryBean"</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.GsonFactoryBean"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dateFormatPattern"</span> <span class="attr">value</span>=<span class="string">"yyyy-MM-dd"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"disableHtmlEscaping"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prettyPrinting"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol>
<li><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html" rel="external nofollow noopener noreferrer" target="_blank">7. The IoC container</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> beanfactory </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[shell命令长度限制]]></title>
      <url>http://qsli.github.io/2017/02/06/shell-input-limit/</url>
      <content type="html"><![CDATA[<h2 id="两个命令"><a href="#两个命令" class="headerlink" title="两个命令"></a>两个命令</h2><h3 id="ARG-MAX"><a href="#ARG-MAX" class="headerlink" title="ARG_MAX"></a>ARG_MAX</h3><blockquote>
<p>The limit for the length of a command line is not imposed by the shell, but by the operating system. This limit is usually in the range of hundred kilobytes. POSIX denotes this limit ARG_MAX and on POSIX conformant systems you can query it with</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ getconf ARG_MAX    <span class="comment"># Get argument limit in bytes</span></div></pre></td></tr></table></figure>
<p>在我的cygwin上的结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  getconf ARG_MAX</div><div class="line">32000</div></pre></td></tr></table></figure>
<h3 id="xargs-–show-limits"><a href="#xargs-–show-limits" class="headerlink" title="xargs –show-limits"></a>xargs –show-limits</h3><p>我的Cygwin上的结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">➜   xargs --show-limits</div><div class="line">您的环境变量占有 7787 个字节</div><div class="line">此系统的参数长度 POSIX 上限: 22165</div><div class="line">所有系统中所允许的最小参数长度 POSIX 上限: 4096</div><div class="line">我们实际能用的最大命令长度: 14378</div><div class="line">我们实际能用的命令缓冲区的大小: 22165</div><div class="line">Maximum parallelism (--max-procs must be no greater): 2147483647</div><div class="line"></div><div class="line">xargs 中的命令现在将继续执行，并且它会尝试读取输入并运行命令；如果您不想它发生，请按下“文件结束”按键(ctrl-D)。</div><div class="line">警告: echo 将至少运行一次。如果您不想它发生，请按下中断按键。(ctrl-C)</div></pre></td></tr></table></figure>
<h2 id="绕过限制"><a href="#绕过限制" class="headerlink" title="绕过限制"></a>绕过限制</h2><p>使用脚本编写。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://stackoverflow.com/questions/19354870/bash-command-line-and-input-limit" rel="external nofollow noopener noreferrer" target="_blank">shell - Bash command line and input limit - Stack Overflow</a></p>
</li>
<li><p><a href="http://stackoverflow.com/questions/6846263/maximum-length-of-command-line-argument-that-can-be-passed-to-sqlplus-from-lin" rel="external nofollow noopener noreferrer" target="_blank">Maximum length of command line argument that can be passed to SQL*Plus (from Linux C Shell)? - Stack Overflow</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> shell </category>
            
        </categories>
        
        
        <tags>
            
            <tag> limit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tomcat中的StringManager]]></title>
      <url>http://qsli.github.io/2017/02/06/tomcat-stringmanager/</url>
      <content type="html"><![CDATA[<p>tomcat中使用StringManager来管理错误提示信息，错误信息存储在<code>LocalStrings.properties</code>文件中，支持包级别的文件配置。</p>
<h2 id="StringManager"><a href="#StringManager" class="headerlink" title="StringManager"></a>StringManager</h2><p>构造函数私有，通过静态方法<code>getManager</code>获取对应package的实例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Hashtable&lt;String, StringManager&gt; managers =</div><div class="line">        <span class="keyword">new</span> Hashtable&lt;&gt;();</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Get the StringManager for a particular package. If a manager for</div><div class="line"> * a package already exists, it will be reused, else a new</div><div class="line"> * StringManager will be created and returned.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> packageName The package name</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> StringManager <span class="title">getManager</span><span class="params">(String packageName)</span> </span>&#123;</div><div class="line">    StringManager mgr = managers.get(packageName);</div><div class="line">    <span class="keyword">if</span> (mgr == <span class="keyword">null</span>) &#123;</div><div class="line">        mgr = <span class="keyword">new</span> StringManager(packageName);</div><div class="line">        managers.put(packageName, mgr);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> mgr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="LocalStrings"><a href="#LocalStrings" class="headerlink" title="LocalStrings"></a>LocalStrings</h2><p>本身支持国际化(i18n), LocalStrings.properties（英文）、LocalStrings_es.properties（西班牙语）、LocalStrings_ja.properties（日语）</p>
<p>文件示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">contextBindings.unknownContext=Unknown context name : &#123;0&#125;</div><div class="line">contextBindings.noContextBoundToThread=No naming context bound to this thread</div><div class="line">contextBindings.noContextBoundToCL=No naming context bound to this class loader</div><div class="line">selectorContext.noJavaUrl=This context must be accessed through a java: URL</div><div class="line">selectorContext.methodUsingName=Call to method &apos;&apos;&#123;0&#125;&apos;&apos; with a Name of &apos;&apos;&#123;1&#125;&apos;&apos;</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li>《How tomcat works》</li>
</ol>
]]></content>
      
        <categories>
            
            <category> tomcat </category>
            
        </categories>
        
        
        <tags>
            
            <tag> string-manager </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tomcat访问时发生AbstractMethodError]]></title>
      <url>http://qsli.github.io/2017/01/27/tomcat-AbstractMethodError/</url>
      <content type="html"><![CDATA[<h2 id="异常堆栈"><a href="#异常堆栈" class="headerlink" title="异常堆栈"></a>异常堆栈</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">javax.servlet.ServletException: Servlet execution threw an exception</div><div class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:313) [catalina.jar:6.0.29]</div><div class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [catalina.jar:6.0.29]</div><div class="line">        at qunar.ServletWatcher.doFilter(ServletWatcher.java:160) ~[common-core-8.3.5.jar:na]</div><div class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) [catalina.jar:6.0.29]</div><div class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [catalina.jar:6.0.29]</div><div class="line">        at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121) [spring-web-4.2.5.RELEASE.jar:4.2.5.RELEASE]</div><div class="line">        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.5.RELEASE.jar:4.2.5.RELEASE]</div><div class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) [catalina.jar:6.0.29]</div><div class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [catalina.jar:6.0.29]</div><div class="line">        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) [catalina.jar:6.0.29]</div><div class="line">        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) [catalina.jar:6.0.29]</div><div class="line">        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127) [catalina.jar:6.0.29]</div><div class="line">        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) [catalina.jar:6.0.29]</div><div class="line">        at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:555) [catalina.jar:6.0.29]</div><div class="line">        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) [catalina.jar:6.0.29]</div><div class="line">        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:298) [catalina.jar:6.0.29]</div><div class="line">        at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:857) [tomcat-coyote.jar:6.0.29]</div><div class="line">        at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:588) [tomcat-coyote.jar:6.0.29]</div><div class="line">        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489) [tomcat-coyote.jar:6.0.29]</div><div class="line">        at java.lang.Thread.run(Thread.java:745) [na:1.8.0_60]</div><div class="line">Caused by: java.lang.AbstractMethodError: null</div><div class="line">        at javax.servlet.http.HttpServletResponseWrapper.getStatus(HttpServletResponseWrapper.java:228) ~[lib/:na]</div><div class="line">        at javax.servlet.http.HttpServletResponseWrapper.getStatus(HttpServletResponseWrapper.java:228) ~[lib/:na]</div><div class="line">        at org.springframework.web.servlet.FrameworkServlet.publishRequestHandledEvent(FrameworkServlet.java:1070) ~[spring-webmvc-4.2.5.RELEASE.jar:4.2.5.RELEASE]</div><div class="line">        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1003) ~[spring-webmvc-4.2.5.RELEASE.jar:4.2.5.RELEASE]</div><div class="line">        at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:859) ~[spring-webmvc-4.2.5.RELEASE.jar:4.2.5.RELEASE]</div><div class="line">        at javax.servlet.http.HttpServlet.doHead(HttpServlet.java:244) ~[lib/:na]</div><div class="line">        at javax.servlet.http.HttpServlet.service(HttpServlet.java:644) ~[lib/:na]</div><div class="line">        at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:844) ~[spring-webmvc-4.2.5.RELEASE.jar:4.2.5.RELEASE]</div><div class="line">        at javax.servlet.http.HttpServlet.service(HttpServlet.java:728) ~[lib/:na]</div><div class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) [catalina.jar:6.0.29]</div><div class="line">        ... 19 common frames omitted</div></pre></td></tr></table></figure>
<h3 id="AbstractMethodError异常"><a href="#AbstractMethodError异常" class="headerlink" title="AbstractMethodError异常"></a>AbstractMethodError异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Thrown when an application tries to call an abstract method.</div><div class="line"> * Normally, this error is caught by the compiler; this error can</div><div class="line"> * only occur at run time if the definition of some class has</div><div class="line"> * incompatibly changed since the currently executing method was last</div><div class="line"> * compiled.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span>  unascribed</div><div class="line"> * <span class="doctag">@since</span>   JDK1.0</div><div class="line"> */</div><div class="line"><span class="keyword">public</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractMethodError</span> <span class="keyword">extends</span> <span class="title">IncompatibleClassChangeError</span> </span>&#123;...&#125;</div></pre></td></tr></table></figure>
<p>就是调用了一个没有实现的抽象方法时会抛出这个异常。</p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><h3 id="环境被搞乱"><a href="#环境被搞乱" class="headerlink" title="环境被搞乱"></a>环境被搞乱</h3><p>有人把<code>servlet-api 3.0</code>的jar包拷贝到了<code>tomcat6</code>的lib目录下，替换了原来的jar包，造成spring以为他支持Servlet3.0 但是tomcat却没有实现这个方法。</p>
<h2 id="Spring-版本"><a href="#Spring-版本" class="headerlink" title="Spring 版本"></a>Spring 版本</h2><p>Spring的版本是4.2.5，增加了一些<code>Servlet 3.0</code> 的特性支持, 但是使用之前Spring会根据使用的</p>
<p><code>Servlet-api</code>来检测是否支持<code>Servlet 3.0</code></p>
<p>使用的3.0的api</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Gets the current status code of this response.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@return</span> the current status code of this response</div><div class="line"> *</div><div class="line"> * <span class="doctag">@since</span> Servlet 3.0</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStatus</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<p>在<code>FrameworkServlet</code>中会进行相应的检测和使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">/** Checking for Servlet 3.0+ HttpServletResponse.getStatus() */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> responseGetStatusAvailable =</div><div class="line">            ClassUtils.hasMethod(HttpServletResponse.class, <span class="string">"getStatus"</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">publishRequestHandledEvent</span><span class="params">(</span></span></div><div class="line">HttpServletRequest request, HttpServletResponse response, <span class="keyword">long</span> startTime, Throwable failureCause) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.publishEvents) &#123;</div><div class="line">        <span class="comment">// Whether or not we succeeded, publish an event.</span></div><div class="line">        <span class="keyword">long</span> processingTime = System.currentTimeMillis() - startTime;</div><div class="line">        <span class="keyword">int</span> statusCode = (responseGetStatusAvailable ? response.getStatus() : -<span class="number">1</span>);</div><div class="line">        <span class="keyword">this</span>.webApplicationContext.publishEvent(</div><div class="line">            <span class="keyword">new</span> ServletRequestHandledEvent(<span class="keyword">this</span>,</div><div class="line">                    request.getRequestURI(), request.getRemoteAddr(),</div><div class="line">                    request.getMethod(), getServletConfig().getServletName(),</div><div class="line">                    WebUtils.getSessionId(request), getUsernameForRequest(request),</div><div class="line">                    processingTime, failureCause, statusCode));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="为什么编译时没有报错"><a href="#为什么编译时没有报错" class="headerlink" title="为什么编译时没有报错"></a>为什么编译时没有报错</h3><blockquote>
<p>当前的JVM规范中，与方法调用相关的指令有4个：invokevirtual、invokeinterface、invokestatic与invokespecial。其中调用接口方法时使用的JVM指令是invokeinterface。这个指令与另外3个方法调用指令有一个显著的差异：它不要求JVM的校验器（verifier）检查被调用对象（receiver）的类型；另外3个方法调用指令都要求校验被调用对象。也就是说，使用invokeinterface时如果被调用对象没有实现指定的接口，则应该在运行时而不是链接时抛出异常；而另外3个方法调用指令都要求在链接时抛出异常。 </p>
</blockquote>
<p>这也是为啥类的载入是成功的，但是tomcat里面没有实现那个方法。</p>
<h2 id="servlet和tomcat的对应关系"><a href="#servlet和tomcat的对应关系" class="headerlink" title="servlet和tomcat的对应关系"></a>servlet和tomcat的对应关系</h2>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://rednaxelafx.iteye.com/blog/400362" rel="external nofollow noopener noreferrer" target="_blank">JVM在校验阶段不检查接口的实现状况 - Script Ahead, Code Behind - ITeye技术网站</a></p>
</li>
<li><p><a href="http://tomcat.apache.org/whichversion.html" rel="external nofollow noopener noreferrer" target="_blank">Apache Tomcat® - Which Version Do I Want?</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> tomcat </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[jar文件查看]]></title>
      <url>http://qsli.github.io/2017/01/27/jar/</url>
      <content type="html"><![CDATA[<p>查看jar包内容</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unzip -q -c myarchive.jar META-INF/MANIFEST.MF</div></pre></td></tr></table></figure>
<blockquote>
<p><code>-q</code> will suppress verbose output from the unzip program</p>
<p><code>-c</code> will extract to stdout</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">unzip -q -c servlet-api.jar META-INF/MANIFEST.MF</div><div class="line">Manifest-Version: 1.0</div><div class="line">Ant-Version: Apache Ant 1.8.1</div><div class="line">Created-By: 1.6.0_45-b06 (Sun Microsystems Inc.)</div><div class="line">X-Compile-Source-JDK: 1.6</div><div class="line">X-Compile-Target-JDK: 1.6</div><div class="line"></div><div class="line">Name: javax/servlet/</div><div class="line">Specification-Title: Java API for Servlets</div><div class="line">Specification-Version: 3.0</div><div class="line">Specification-Vendor: Sun Microsystems, Inc.</div><div class="line">Implementation-Title: javax.servlet</div><div class="line">Implementation-Version: 3.0.FR</div><div class="line">Implementation-Vendor: Apache Software Foundation</div></pre></td></tr></table></figure>
<h2 id="jar命令"><a href="#jar命令" class="headerlink" title="jar命令"></a>jar命令</h2><p>在linux下如何查看一个jar文件中有哪些类呢？</p>
<p><code>jar tf test.jar</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">META-INF/</div><div class="line">META-INF/MANIFEST.MF</div><div class="line">javax/</div><div class="line">javax/servlet/</div><div class="line">javax/servlet/annotation/</div><div class="line">javax/servlet/descriptor/</div><div class="line">javax/servlet/http/</div><div class="line">...</div><div class="line">javax/servlet/resources/xml.xsd</div><div class="line">META-INF/NOTICE</div><div class="line">META-INF/LICENSE</div></pre></td></tr></table></figure>
<h2 id="grepjar"><a href="#grepjar" class="headerlink" title="grepjar"></a>grepjar</h2><p>有些时候，我们需要查看一个jar文件中是否包含了某个方法，这个在linux下可以通过下面的命令来查询</p>
<p><code>grepjar methodName class.jar</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ grepjar <span class="string">'getStatus'</span> servlet-api.jar</div><div class="line">javax/servlet/http/HttpServletResponse.class:getStatus</div><div class="line">javax/servlet/http/HttpServletResponseWrapper.class:getStatus</div></pre></td></tr></table></figure>
<p>参数：</p>
<p>||option || meaning ||<br>|-b |  Print byte offset of match.|<br>|–|—————|<br>|-c |  Print number of matches.|<br>|-i |  Compare case-insensitively.|<br>|-n |  Print line number of each match.|<br>|-s |  Suppress error messages.|<br>|-w |  Force PATTERN to match only whole words.|<br>|-e | PATTERN  Use PATTERN as regular expression.|<br>|–help |  Print help, then exit.|<br>|-V |  |<br>|–version |   Print version number, then exit.|</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://stackoverflow.com/questions/7066063/how-to-read-manifest-mf-file-from-jar-using-bash" rel="external nofollow noopener noreferrer" target="_blank">How to read MANIFEST.MF file from JAR using Bash - Stack Overflow</a></p>
<p><a href="http://xiaofengwu.tumblr.com/post/63518704051/linux%E6%9F%A5%E7%9C%8Bjar%E4%B8%AD%E7%9A%84%E7%B1%BB%E4%BB%A5%E5%8F%8A%E7%B1%BB%E4%B8%AD%E6%96%B9%E6%B3%95%E5%91%BD%E4%BB%A4" rel="external nofollow noopener noreferrer" target="_blank">吴峰子 — linux查看jar中的类以及类中方法命令</a></p>
<p><a href="http://www.tutorialspoint.com/unix_commands/grepjar.htm" rel="external nofollow noopener noreferrer" target="_blank">grepdiff - Unix, Linux Command</a></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jar </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[guava-eventbus]]></title>
      <url>http://qsli.github.io/2017/01/17/guava-eventbus/</url>
      <content type="html"><![CDATA[<h2 id="从观察者模式说起"><a href="#从观察者模式说起" class="headerlink" title="从观察者模式说起"></a>从观察者模式说起</h2><h3 id="观察者模式类图"><a href="#观察者模式类图" class="headerlink" title="观察者模式类图"></a>观察者模式类图</h3><p>观察者模式是软件设计中经常使用到的一种模式，又叫发布-订阅模式（Publish/Subscribe）、模型-视图(Model/View)模式、源-监听器（Source/Listener）模式或从属者（Dependents）模式。</p>
<img src="http://www.plantuml.com/plantuml/svg/ZL1B3e8m4Dtt51FSWCe5Z36X7825I-C2w4XGqffIJOnwTm5f1IdYRlBcVMOUESVfASuGoajon5JT2O1e9jY-4QYX1N2XyiCjIagKLvIbwpLep9Y6MeHXWGfxu9DyJ4F1KraHMlDWtFo7YawezENhX-yF4YVsb5GMkXJHUdTQYJgGFc6OB2fZP-uODgp0DNCeYg8YvO9xbXyrBR0dZB2fdMqoUw-QY4a69NKTtnM2lvjb4f4lcL0AsNvZiHw8_b1HyW80">
<h3 id="Java中的支持"><a href="#Java中的支持" class="headerlink" title="Java中的支持"></a>Java中的支持</h3><p>Java中有一个<code>Observable</code>类和一个<code>Observer</code>接口, <code>Observable</code>类已经实现了添加、删除观察者的方法。</p>
<ul>
<li>主题继承自<code>Observable</code>，继承一些便利方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> <span class="keyword">extends</span> <span class="title">Observable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String subject = <span class="string">"play with some fun"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        notifyObservers(message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSubject</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> subject;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Subject subject = <span class="keyword">new</span> Subject();</div><div class="line">        subject.addObserver(<span class="keyword">new</span> Watcher(<span class="string">"001"</span>));</div><div class="line">        subject.addObserver(<span class="keyword">new</span> Watcher(<span class="string">"007"</span>));</div><div class="line">        subject.setChanged();</div><div class="line">        <span class="comment">//will do nothing until setChanged() is called</span></div><div class="line">        subject.push(<span class="string">"My watch is ended!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>观察者继承<code>Observer</code>接口，只有一个<code>update</code>方法用来更新数据</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String id;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Watcher</span><span class="params">(String id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">        System.out.println(<span class="string">"My watch begins! "</span> + id);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"-----------------------------------------------------------"</span>);</div><div class="line">        System.out.println(id);</div><div class="line">        Subject subject = (Subject) o;</div><div class="line">        System.out.println(<span class="string">"subject is : "</span> + subject.getSubject());</div><div class="line">        System.out.println(<span class="string">"update data is : "</span> + (String)arg );</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">My watch begins! 001</div><div class="line">My watch begins! 007</div><div class="line">-----------------------------------------------------------</div><div class="line">007</div><div class="line">subject is : play with some fun</div><div class="line">update data is : My watch is ended!</div><div class="line">-----------------------------------------------------------</div><div class="line">001</div><div class="line">subject is : play with some fun</div><div class="line">update data is : My watch is ended!</div></pre></td></tr></table></figure>
<h3 id="EventBus"><a href="#EventBus" class="headerlink" title="EventBus"></a>EventBus</h3><blockquote>
<p>EventBus allows publish-subscribe-style communication between components without requiring the components to explicitly register with one another (and thus be aware of each other). It is designed exclusively to replace traditional Java in-process event distribution using explicit registration. It is not a general-purpose publish-subscribe system, nor is it intended for interprocess communication.</p>
</blockquote>
<p>EventBus的优点：</p>
<ul>
<li>无需定义接口，使用注解的形式。</li>
<li>可以在一个类中实现多个事件的捕获。</li>
</ul>
<blockquote>
<p>Due to erasure, no single class can implement a generic interface more than once with different type parameters. </p>
</blockquote>
<ul>
<li>支持子类的捕获。</li>
<li>支持捕获无人处理的event（让我想起了死漂）。</li>
<li>传递的事件类型可以是任意的。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</div><div class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", age="</span> + age +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">extends</span> <span class="title">Person</span>  <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbies;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(name, age);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getHobbies</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> hobbies;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobbies</span><span class="params">(List&lt;String&gt; hobbies)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.hobbies = hobbies;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>定义一个<code>Person</code>类和一个<code>Customer</code>类，用于测试继承关系的捕捉</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventBusTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        EventBus eventBus = <span class="keyword">new</span> EventBus();</div><div class="line">        eventBus.register(<span class="keyword">new</span> EventBusChangeRecorder());</div><div class="line">        Customer customer = <span class="keyword">new</span> Customer(<span class="string">"customer"</span>, <span class="number">66</span>);</div><div class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">"person"</span>, <span class="number">11</span>);</div><div class="line">        eventBus.post(customer);</div><div class="line">        eventBus.post(p);</div><div class="line">        eventBus.post(<span class="keyword">new</span> Integer(<span class="number">123</span>));</div><div class="line">        eventBus.post(<span class="string">"Hello World"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EventBusChangeRecorder</span> </span>&#123;</div><div class="line">        <span class="meta">@Subscribe</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recordCustomerChange</span><span class="params">(Customer customer)</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"-----------------------------------"</span>);</div><div class="line">            System.out.println(<span class="string">"recieved change:"</span>);</div><div class="line">            System.out.println(<span class="string">"customer name: "</span> + customer.getName());</div><div class="line">            System.out.println(<span class="string">"cutomer age: "</span> + customer.getAge());</div><div class="line">            System.out.println(<span class="string">"\n\n"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Subscribe</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">valueChange</span><span class="params">(Integer val)</span> </span>&#123;<span class="comment">//注意方法的类型</span></div><div class="line">            System.out.println(<span class="string">"-----------------------------------"</span>);</div><div class="line">            System.out.println(<span class="string">"val = "</span> + val);</div><div class="line">            System.out.println(<span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Subscribe</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deadEvent</span><span class="params">(DeadEvent deadEvent)</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"-----------------------------------"</span>);</div><div class="line">            System.out.println(<span class="string">"deadEvent = "</span> + deadEvent);</div><div class="line">            System.out.println(<span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Subscribe</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hierarchy</span><span class="params">(Person person)</span> </span>&#123;</div><div class="line">            System.out.println(<span class="string">"-----------------------------------"</span>);</div><div class="line">            <span class="comment">//will recieve all person and it's subtype</span></div><div class="line">            System.out.println(person);</div><div class="line">            System.out.println(<span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在我的电脑上的执行结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">-----------------------------------</div><div class="line">recieved change:</div><div class="line">customer name: customer</div><div class="line">cutomer age: 66</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">-----------------------------------</div><div class="line">Person&#123;name=&apos;customer&apos;, age=66&#125;</div><div class="line"></div><div class="line"></div><div class="line">-----------------------------------</div><div class="line">Person&#123;name=&apos;person&apos;, age=11&#125;</div><div class="line"></div><div class="line"></div><div class="line">-----------------------------------</div><div class="line">val = 123</div><div class="line"></div><div class="line"></div><div class="line">-----------------------------------</div><div class="line">deadEvent = DeadEvent&#123;source=EventBus&#123;default&#125;, event=Hello World&#125;</div></pre></td></tr></table></figure>
<h3 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h3><h4 id="listener注册过程"><a href="#listener注册过程" class="headerlink" title="listener注册过程"></a>listener注册过程</h4><p><code>EventBus</code>中有一个成员变量叫做<code>subscribers</code>, 负责管理所有注册进来的listener</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> SubscriberRegistry subscribers = <span class="keyword">new</span> SubscriberRegistry(<span class="keyword">this</span>);</div></pre></td></tr></table></figure>
<p><code>register(Object object)</code>方法就是调用<code>subscribers</code>的注册方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Registers all subscriber methods on &#123;<span class="doctag">@code</span> object&#125; to receive events.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> object object whose subscriber methods should be registered.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Object object)</span> </span>&#123;</div><div class="line">  subscribers.register(object);</div><div class="line">&#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line"> * Registers all subscriber methods on the given listener object.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">register</span><span class="params">(Object listener)</span> </span>&#123;</div><div class="line">  <span class="comment">//解析注解，生成&lt;EventType, ListenMethod&gt;的multimap</span></div><div class="line">  Multimap&lt;Class&lt;?&gt;, Subscriber&gt; listenerMethods = findAllSubscribers(listener);</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (Map.Entry&lt;Class&lt;?&gt;, Collection&lt;Subscriber&gt;&gt; entry : listenerMethods.asMap().entrySet()) &#123;</div><div class="line">    Class&lt;?&gt; eventType = entry.getKey();</div><div class="line">    Collection&lt;Subscriber&gt; eventMethodsInListener = entry.getValue();</div><div class="line"></div><div class="line">    CopyOnWriteArraySet&lt;Subscriber&gt; eventSubscribers = subscribers.get(eventType);</div><div class="line"></div><div class="line">    <span class="comment">//新建或者添加到已有的事件对应的Listener中</span></div><div class="line">    <span class="keyword">if</span> (eventSubscribers == <span class="keyword">null</span>) &#123;</div><div class="line">      CopyOnWriteArraySet&lt;Subscriber&gt; newSet = <span class="keyword">new</span> CopyOnWriteArraySet&lt;Subscriber&gt;();</div><div class="line">      eventSubscribers =</div><div class="line">          MoreObjects.firstNonNull(subscribers.putIfAbsent(eventType, newSet), newSet);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    eventSubscribers.addAll(eventMethodsInListener);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line"> * Returns all subscribers for the given listener grouped by the type of event they subscribe to.</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> Multimap&lt;Class&lt;?&gt;, Subscriber&gt; findAllSubscribers(Object listener) &#123;</div><div class="line">  Multimap&lt;Class&lt;?&gt;, Subscriber&gt; methodsInListener = HashMultimap.create();</div><div class="line">  Class&lt;?&gt; clazz = listener.getClass();</div><div class="line">  <span class="keyword">for</span> (Method method : getAnnotatedMethods(clazz)) &#123;<span class="comment">//有缓存哦</span></div><div class="line">    Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</div><div class="line">    Class&lt;?&gt; eventType = parameterTypes[<span class="number">0</span>];</div><div class="line">    methodsInListener.put(eventType, Subscriber.create(bus, listener, method));</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> methodsInListener;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>subscribers</code>的注册方法中完成了对注解<code>@Subscribe</code>的解析。</p>
<h4 id="事件分发过程"><a href="#事件分发过程" class="headerlink" title="事件分发过程"></a>事件分发过程</h4><p><code>EventBus</code>的post方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Posts an event to all registered subscribers. This method will return successfully after the</div><div class="line"> * event has been posted to all subscribers, and regardless of any exceptions thrown by</div><div class="line"> * subscribers.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;If no subscribers have been subscribed for &#123;<span class="doctag">@code</span> event&#125;'s class, and &#123;<span class="doctag">@code</span> event&#125; is not</div><div class="line"> * already a &#123;<span class="doctag">@link</span> DeadEvent&#125;, it will be wrapped in a DeadEvent and reposted.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> event event to post.</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(Object event)</span> </span>&#123;</div><div class="line">  Iterator&lt;Subscriber&gt; eventSubscribers = subscribers.getSubscribers(event);</div><div class="line">  <span class="keyword">if</span> (eventSubscribers.hasNext()) &#123;</div><div class="line">    dispatcher.dispatch(event, eventSubscribers);</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(event <span class="keyword">instanceof</span> DeadEvent)) &#123;</div><div class="line">    <span class="comment">// the event had no subscribers and was not itself a DeadEvent</span></div><div class="line">    post(<span class="keyword">new</span> DeadEvent(<span class="keyword">this</span>, event));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的<code>dispatcher</code>默认是<code>Dispatcher.perThreadDispatchQueue()</code></p>
<p>它的<code>dispatch</code>方法实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Per-thread queue of events to dispatch.</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal&lt;Queue&lt;Event&gt;&gt; queue =</div><div class="line">    <span class="keyword">new</span> ThreadLocal&lt;Queue&lt;Event&gt;&gt;() &#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">protected</span> Queue&lt;Event&gt; <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Queues.newArrayDeque();</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Per-thread dispatch state, used to avoid reentrant event dispatching.</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal&lt;Boolean&gt; dispatching =</div><div class="line">    <span class="keyword">new</span> ThreadLocal&lt;Boolean&gt;() &#123;</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">protected</span> Boolean <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatch</span><span class="params">(Object event, Iterator&lt;Subscriber&gt; subscribers)</span> </span>&#123;</div><div class="line">  <span class="comment">//入参校验</span></div><div class="line">  checkNotNull(event);</div><div class="line">  checkNotNull(subscribers);</div><div class="line">  <span class="comment">//从ThreadLocal中拿到队列</span></div><div class="line">  Queue&lt;Event&gt; queueForThread = queue.get();</div><div class="line">  <span class="comment">//先把事件入队列</span></div><div class="line">  queueForThread.offer(<span class="keyword">new</span> Event(event, subscribers));</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (!dispatching.get()) &#123;</div><div class="line">    dispatching.set(<span class="keyword">true</span>);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      Event nextEvent;</div><div class="line">      <span class="comment">//遍历队列中的事件，并分发给相应的订阅者</span></div><div class="line">      <span class="keyword">while</span> ((nextEvent = queueForThread.poll()) != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">while</span> (nextEvent.subscribers.hasNext()) &#123;</div><div class="line">          nextEvent.subscribers.next().dispatchEvent(nextEvent.event);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">      dispatching.remove();</div><div class="line">      queue.remove();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>EventBus的注解提取（简单的缓存），构建相应的Map，以及事件的分发设计地非常好，有了一个大型系统完整的雏形。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://www.cnblogs.com/peida/p/EventBus.html" rel="external nofollow noopener noreferrer" target="_blank">Guava学习笔记：EventBus - peida - 博客园</a></p>
</li>
<li><p><a href="https://github.com/google/guava/wiki/EventBusExplained" rel="external nofollow noopener noreferrer" target="_blank">EventBusExplained · google/guava Wiki</a></p>
</li>
<li><p><a href="https://zh.wikipedia.org/wiki/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F" rel="external nofollow noopener noreferrer" target="_blank">观察者模式 - 维基百科，自由的百科全书</a></p>
</li>
<li><p><a href="http://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/observer.html" rel="external nofollow noopener noreferrer" target="_blank">观察者模式 — Graphic Design Patterns</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> guava </category>
            
        </categories>
        
        
        <tags>
            
            <tag> event-bus </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring MVC 中的异常处理]]></title>
      <url>http://qsli.github.io/2017/01/09/Spring-mvc-exception/</url>
      <content type="html"><![CDATA[<h2 id="Spring-MVC的异常处理"><a href="#Spring-MVC的异常处理" class="headerlink" title="Spring MVC的异常处理"></a>Spring MVC的异常处理</h2><p>Spring中的异常处理主要有两种方式，<em>一种</em>是实现<code>HandlerExceptionResolver</code>接口，</p>
<p>这个接口中只有一个方法<code>resolveException</code>，返回值是一个<code>ModelAndView</code>的对象; </p>
<p><em>另外一种</em>是使用<code>@ExceptionHandler</code>注解作用在方法上，注解的值来指定这个方法能处理的异常的类，</p>
<p>如果注解的值是空的，能处理的类以方法的参数为准。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Try to resolve the given exception that got thrown during handler execution,</div><div class="line">     * returning a &#123;<span class="doctag">@link</span> ModelAndView&#125; that represents a specific error page if appropriate.</div><div class="line">     * &lt;p&gt;The returned &#123;<span class="doctag">@code</span> ModelAndView&#125; may be &#123;<span class="doctag">@linkplain</span> ModelAndView#isEmpty() empty&#125;</div><div class="line">     * to indicate that the exception has been resolved successfully but that no view</div><div class="line">     * should be rendered, for instance by setting a status code.</div><div class="line">     * <span class="doctag">@param</span> request current HTTP request</div><div class="line">     * <span class="doctag">@param</span> response current HTTP response</div><div class="line">     * <span class="doctag">@param</span> handler the executed handler, or &#123;<span class="doctag">@code</span> null&#125; if none chosen at the</div><div class="line">     * time of the exception (for example, if multipart resolution failed)</div><div class="line">     * <span class="doctag">@param</span> ex the exception that got thrown during handler execution</div><div class="line">     * <span class="doctag">@return</span> a corresponding &#123;<span class="doctag">@code</span> ModelAndView&#125; to forward to, or &#123;<span class="doctag">@code</span> null&#125;</div><div class="line">     * for default processing</div><div class="line">     */</div><div class="line">    <span class="function">ModelAndView <span class="title">resolveException</span><span class="params">(</span></span></div><div class="line">            HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//@ExceptionHandler</span></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// @RequestMapping methods omitted ...</span></div><div class="line"></div><div class="line">    <span class="meta">@ExceptionHandler</span>(IOException.class)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title">handleIOException</span><span class="params">(IOException ex)</span> </span>&#123;</div><div class="line">        <span class="comment">// prepare responseEntity</span></div><div class="line">        <span class="keyword">return</span> responseEntity;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="异常相关的类"><a href="#异常相关的类" class="headerlink" title="异常相关的类"></a>异常相关的类</h3><blockquote class="pullquote mindmap"><p>#Spring MVC Exception</p>
<p>##HandlerExceptionResolver</p>
<p>###SimpleMappingExceptionResolver</p>
<p>###DefaultHandlerExceptionResolver</p>
<p>##@ExceptionHandler</p>
<p>###@ControllerAdvice</p>
<p>###ResponseEntityExceptionHandler</p>
<p>##Default Servlet Container Error Page</p>
<p>##@ResponseStatus</p>
<p>###ResponseStatusExceptionResolver</p>
</blockquote>
<h3 id="SimpleMappingExceptionResolver"><a href="#SimpleMappingExceptionResolver" class="headerlink" title="SimpleMappingExceptionResolver"></a><code>SimpleMappingExceptionResolver</code></h3><blockquote>
<p>The SimpleMappingExceptionResolver enables you to take the<br>class name of any exception that might be thrown and map it to a view name. </p>
</blockquote>
<p>这个Resolver可以将异常对应的类名映射到一个对应的view name上。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exceptionMappings"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"com.howtodoinjava.demo.exception.AuthException"</span>&gt;</span></div><div class="line">                error/authExceptionView</div><div class="line">            <span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultErrorView"</span> <span class="attr">value</span>=<span class="string">"error/genericView"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="DefaultHandlerExceptionResolver"><a href="#DefaultHandlerExceptionResolver" class="headerlink" title="DefaultHandlerExceptionResolver"></a><code>DefaultHandlerExceptionResolver</code></h3><blockquote>
<p>The DefaultHandlerExceptionResolver translates Spring MVC exceptions to specific error<br>status codes.</p>
</blockquote>
<p>这个Resolver的作用就是将Spring MVC产生的一些异常翻译成对应的http status code。Spring MVC中</p>
<p>默认注册了这个Resolver。</p>
<p>转换列表：</p>
<table>
<thead>
<tr>
<th>Exception</th>
<th>HTTP Status Code</th>
</tr>
</thead>
<tbody>
<tr>
<td>BindException</td>
<td>400 (Bad Request)</td>
</tr>
<tr>
<td>ConversionNotSupportedException</td>
<td>500 (Internal Server Error)</td>
</tr>
<tr>
<td>HttpMediaTypeNotAcceptableException</td>
<td>406 (Not Acceptable)</td>
</tr>
<tr>
<td>HttpMediaTypeNotSupportedException</td>
<td>415 (Unsupported Media Type)</td>
</tr>
<tr>
<td>HttpMessageNotReadableException</td>
<td>400 (Bad Request)</td>
</tr>
<tr>
<td>HttpMessageNotWritableException</td>
<td>500 (Internal Server Error)</td>
</tr>
<tr>
<td>HttpRequestMethodNotSupportedException</td>
<td>405 (Method Not Allowed)</td>
</tr>
<tr>
<td>MethodArgumentNotValidException</td>
<td>400 (Bad Request)</td>
</tr>
<tr>
<td>MissingPathVariableException</td>
<td>500 (Internal Server Error)</td>
</tr>
<tr>
<td>MissingServletRequestParameterException</td>
<td>400 (Bad Request)</td>
</tr>
<tr>
<td>MissingServletRequestPartException</td>
<td>400 (Bad Request)</td>
</tr>
<tr>
<td>NoHandlerFoundException</td>
<td>404 (Not Found)</td>
</tr>
<tr>
<td>NoSuchRequestHandlingMethodException</td>
<td>404 (Not Found)</td>
</tr>
</tbody>
</table>
<h3 id="ExceptionHandler和-ControllerAdvice"><a href="#ExceptionHandler和-ControllerAdvice" class="headerlink" title="@ExceptionHandler和@ControllerAdvice"></a>@ExceptionHandler和@ControllerAdvice</h3><p><code>@ExceptionHandler</code> 可以指定异常的处理类，<code>@ControllerAdvice</code>则可以实现全局的异常统一处理。</p>
<p>两者可配合使用，达到统一处理异常的效果。</p>
<blockquote>
<p>The @ControllerAdvice annotation is a component annotation allowing implementation classes<br>to be auto-detected through classpath scanning. It is automatically enabled when using the MVC<br>namespace or the MVC Java config.</p>
</blockquote>
<p><code>@ControllerAdvice</code>默认在Spring MVC的命名空间中启用。</p>
<blockquote>
<p>Classes annotated with @ControllerAdvice can contain @ExceptionHandler, @InitBinder,<br>and @ModelAttribute annotated methods, and these methods will apply to @RequestMapping<br>methods across all controller hierarchies as opposed to the controller hierarchy within which they are<br>declared.</p>
</blockquote>
<p><code>@ControllerAdvice</code>声明的异常处理方法默认对全局都是有效的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Target all Controllers annotated with @RestController</span></div><div class="line"><span class="meta">@ControllerAdvice</span>(annotations = RestController.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationAdvice</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// Target all Controllers within specific packages</span></div><div class="line"><span class="meta">@ControllerAdvice</span>(<span class="string">"org.example.controllers"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasePackageAdvice</span> </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="comment">// Target all Controllers assignable to specific classes</span></div><div class="line"><span class="meta">@ControllerAdvice</span>(assignableTypes = &#123;ControllerInterface.class, AbstractController.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AssignableTypesAdvice</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>还有一个<code>@RestControllerAdvice</code>和<code>@ControllerAdvice</code>相似，只是假定<code>@ResponseBody</code>出现在<code>@ExceptionHandler</code>上</p>
<blockquote>
<p>@RestControllerAdvice is an alternative where @ExceptionHandler methods assume<br>@ResponseBody semantics by default.</p>
</blockquote>
<h3 id="ResponseEntityExceptionHandler"><a href="#ResponseEntityExceptionHandler" class="headerlink" title="ResponseEntityExceptionHandler"></a><code>ResponseEntityExceptionHandler</code></h3><p>如果你想使用<code>@ExceptionHandler</code>来处理异常的话， 你可以继承这个类。</p>
<p>这个类中定义好了一个异常处理的方法，来处理Spring MVC 的标准异常。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Provides handling for standard Spring MVC exceptions.</div><div class="line">     * <span class="doctag">@param</span> ex the target exception</div><div class="line">     * <span class="doctag">@param</span> request the current request</div><div class="line">     */</div><div class="line">    <span class="meta">@ExceptionHandler</span>(&#123;</div><div class="line">            NoSuchRequestHandlingMethodException.class,</div><div class="line">            HttpRequestMethodNotSupportedException.class,</div><div class="line">            HttpMediaTypeNotSupportedException.class,</div><div class="line">            HttpMediaTypeNotAcceptableException.class,</div><div class="line">            MissingPathVariableException.class,</div><div class="line">            MissingServletRequestParameterException.class,</div><div class="line">            ServletRequestBindingException.class,</div><div class="line">            ConversionNotSupportedException.class,</div><div class="line">            TypeMismatchException.class,</div><div class="line">            HttpMessageNotReadableException.class,</div><div class="line">            HttpMessageNotWritableException.class,</div><div class="line">            MethodArgumentNotValidException.class,</div><div class="line">            MissingServletRequestPartException.class,</div><div class="line">            BindException.class,</div><div class="line">            NoHandlerFoundException.class</div><div class="line">        &#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ResponseEntity&lt;Object&gt; <span class="title">handleException</span><span class="params">(Exception ex, WebRequest request)</span> </span>&#123;</div><div class="line"></div><div class="line">            HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> NoSuchRequestHandlingMethodException) &#123;</div><div class="line">                HttpStatus status = HttpStatus.NOT_FOUND;</div><div class="line">                <span class="keyword">return</span> handleNoSuchRequestHandlingMethod((NoSuchRequestHandlingMethodException) ex, headers, status, request);</div><div class="line">            &#125;</div><div class="line">            ...</div><div class="line">            ...</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h3 id="ResponseStatus"><a href="#ResponseStatus" class="headerlink" title="@ResponseStatus"></a>@ResponseStatus</h3><p>用于在自定义异常，设置http的状态码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ResponseStatus</span>(value=HttpStatus.NOT_FOUND, reason=<span class="string">"No such Order"</span>)  <span class="comment">// 404</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderNotFoundException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Spring MVC 中默认开启了<code>ResponseStatusExceptionResolver</code>，这个Resolver会处理上面</p>
<p>设置的Http status code。</p>
<blockquote>
<p>A business exception can be annotated with @ResponseStatus. When the exception is raised, the<br>ResponseStatusExceptionResolver handles it by setting the status of the response accordingly.<br>By default the DispatcherServlet registers the ResponseStatusExceptionResolver and it is<br>available for use.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">doResolveException</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></div><div class="line">            Object handler, Exception ex) &#123;</div><div class="line"></div><div class="line">        ResponseStatus responseStatus = AnnotatedElementUtils.findMergedAnnotation(ex.getClass(), ResponseStatus.class);</div><div class="line">        <span class="keyword">if</span> (responseStatus != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">return</span> resolveResponseStatus(responseStatus, request, response, handler, ex);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">catch</span> (Exception resolveEx) &#123;</div><div class="line">                logger.warn(<span class="string">"Handling of @ResponseStatus resulted in Exception"</span>, resolveEx);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ex.getCause() <span class="keyword">instanceof</span> Exception) &#123;</div><div class="line">            ex = (Exception) ex.getCause();</div><div class="line">            <span class="keyword">return</span> doResolveException(request, response, handler, ex);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>通过工具类拿到注解上的值，然后调用内部的<code>resolveResponseStatus</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">resolveResponseStatus</span><span class="params">(ResponseStatus responseStatus, HttpServletRequest request,</span></span></div><div class="line">            HttpServletResponse response, Object handler, Exception ex) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> statusCode = responseStatus.code().value();</div><div class="line">        String reason = responseStatus.reason();</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.messageSource != <span class="keyword">null</span>) &#123;</div><div class="line">            reason = <span class="keyword">this</span>.messageSource.getMessage(reason, <span class="keyword">null</span>, reason, LocaleContextHolder.getLocale());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!StringUtils.hasLength(reason)) &#123;</div><div class="line">            response.sendError(statusCode);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            response.sendError(statusCode, reason);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>最终将http status code 设置到reponse中。</p>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>Spring MVC 的异常处理在<code>DispatcherServlet</code>的<code>doDispatch</code>方法中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        HttpServletRequest processedRequest = request;</div><div class="line">        HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ModelAndView mv = <span class="keyword">null</span>;</div><div class="line">            Exception dispatchException = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">//do Handle</span></div><div class="line">                ...</div><div class="line">                &#125;</div><div class="line">            <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">                dispatchException = ex;</div><div class="line">            &#125;</div><div class="line">            processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">            triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (Error err) &#123;</div><div class="line">            triggerAfterCompletionWithError(processedRequest, response, mappedHandler, err);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="comment">//post process</span></div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在内层的<code>try-catch</code>中有一个方法<code>processDispatchResult</code>, 在这个方法之前的catch块已经将处理过程可能出现的异常catch住了，并赋值给 <code>dispatchException</code>.</p>
<p>然后调用<code>processDispatchResult</code>分发给能处理这个异常的<code>ExceptionResolver</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">/**</span></div><div class="line">     * Handle the result of handler selection and handler invocation, which is</div><div class="line">     * either a ModelAndView or an Exception to be resolved to a ModelAndView.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></div><div class="line">            HandlerExecutionChain mappedHandler, ModelAndView mv, Exception exception) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">        <span class="keyword">boolean</span> errorView = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</div><div class="line">                logger.debug(<span class="string">"ModelAndViewDefiningException encountered"</span>, exception);</div><div class="line">                mv = ((ModelAndViewDefiningException) exception).getModelAndView();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                Object handler = (mappedHandler != <span class="keyword">null</span> ? mappedHandler.getHandler() : <span class="keyword">null</span>);</div><div class="line">                mv = processHandlerException(request, response, handler, exception);</div><div class="line">                errorView = (mv != <span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Did the handler return a view to render?</span></div><div class="line">        <span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.wasCleared()) &#123;</div><div class="line">            render(mv, request, response);</div><div class="line">            <span class="keyword">if</span> (errorView) &#123;</div><div class="line">                WebUtils.clearErrorRequestAttributes(request);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">                logger.debug(<span class="string">"Null ModelAndView returned to DispatcherServlet with name '"</span> + getServletName() +</div><div class="line">                        <span class="string">"': assuming HandlerAdapter completed request handling"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</div><div class="line">            <span class="comment">// Concurrent handling started during a forward</span></div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</div><div class="line">            mappedHandler.triggerAfterCompletion(request, response, <span class="keyword">null</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">processHandlerException</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></div><div class="line">            Object handler, Exception ex) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">        <span class="comment">// Check registered HandlerExceptionResolvers...</span></div><div class="line">        ModelAndView exMv = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">for</span> (HandlerExceptionResolver handlerExceptionResolver : <span class="keyword">this</span>.handlerExceptionResolvers) &#123;</div><div class="line">            exMv = handlerExceptionResolver.resolveException(request, response, handler, ex);</div><div class="line">            <span class="keyword">if</span> (exMv != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (exMv != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (exMv.isEmpty()) &#123;</div><div class="line">                request.setAttribute(EXCEPTION_ATTRIBUTE, ex);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// We might still need view name translation for a plain error model...</span></div><div class="line">            <span class="keyword">if</span> (!exMv.hasView()) &#123;</div><div class="line">                exMv.setViewName(getDefaultViewName(request));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">                logger.debug(<span class="string">"Handler execution resulted in exception - forwarding to resolved error view: "</span> + exMv, ex);</div><div class="line">            &#125;</div><div class="line">            WebUtils.exposeErrorRequestAttributes(request, ex, getServletName());</div><div class="line">            <span class="keyword">return</span> exMv;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">throw</span> ex;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这个异常的处理和之前，查找handler的过程是一样的。</p>
<p>遍历所有已经注册的<code>HandlerExceptionResolver</code>, 找到第一个能处理的。</p>
<h4 id="ExceptionHandler的处理"><a href="#ExceptionHandler的处理" class="headerlink" title="@ExceptionHandler的处理"></a>@ExceptionHandler的处理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Implementation of the &#123;<span class="doctag">@link</span> org.springframework.web.portlet.HandlerExceptionResolver&#125; interface that handles</div><div class="line"> * exceptions through the &#123;<span class="doctag">@link</span> ExceptionHandler&#125; annotation.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;This exception resolver is enabled by default in the &#123;<span class="doctag">@link</span> org.springframework.web.portlet.DispatcherPortlet&#125;.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> Arjen Poutsma</div><div class="line"> * <span class="doctag">@author</span> Juergen Hoeller</div><div class="line"> * <span class="doctag">@since</span> 3.0</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationMethodHandlerExceptionResolver</span> <span class="keyword">extends</span> <span class="title">AbstractHandlerExceptionResolver</span> </span>&#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">doResolveException</span><span class="params">(</span></span></div><div class="line">            PortletRequest request, MimeResponse response, Object handler, Exception ex) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123;</div><div class="line">            Method handlerMethod = findBestExceptionHandlerMethod(handler, ex);</div><div class="line">            <span class="keyword">if</span> (handlerMethod != <span class="keyword">null</span>) &#123;</div><div class="line">                NativeWebRequest webRequest = <span class="keyword">new</span> PortletWebRequest(request, response);</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Object[] args = resolveHandlerArguments(handlerMethod, handler, webRequest, ex);</div><div class="line">                    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">                        logger.debug(<span class="string">"Invoking request handler method: "</span> + handlerMethod);</div><div class="line">                    &#125;</div><div class="line">                    Object retVal = doInvokeMethod(handlerMethod, handler, args);</div><div class="line">                    <span class="keyword">return</span> getModelAndView(retVal);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">catch</span> (Exception invocationEx) &#123;</div><div class="line">                    logger.error(<span class="string">"Invoking request method resulted in exception : "</span> + handlerMethod, invocationEx);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>和普通的处理类似，从所有标注了<code>@ExceptionHandler</code>的方法中找到最佳匹配，然后解析参数，调用。</p>
<h2 id="web容器的错误处理"><a href="#web容器的错误处理" class="headerlink" title="web容器的错误处理"></a>web容器的错误处理</h2><p><code>WEB-INF/web.xml</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>500<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/Error.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">exception-type</span>&gt;</span>java.lang.Exception<span class="tag">&lt;/<span class="name">exception-type</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/Error.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></div></pre></td></tr></table></figure>
<p>location中的值可以是一个jsp，也可以是一个URL（包括<code>@Controller</code>注解的）</p>
<p>处理error的Controller示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(path = <span class="string">"/error"</span>, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">handle</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</div><div class="line"></div><div class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</div><div class="line">        map.put(<span class="string">"status"</span>, request.getAttribute(<span class="string">"javax.servlet.error.status_code"</span>));</div><div class="line">        map.put(<span class="string">"reason"</span>, request.getAttribute(<span class="string">"javax.servlet.error.message"</span>));</div><div class="line"></div><div class="line">        <span class="keyword">return</span> map;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>JSP示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page contentType=&quot;application/json&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</div><div class="line">&#123;</div><div class="line">status:&lt;%=request.getAttribute(&quot;javax.servlet.error.status_code&quot;) %&gt;,</div><div class="line">reason:&lt;%=request.getAttribute(&quot;javax.servlet.error.message&quot;) %&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://www.cnblogs.com/hupengcool/p/4586910.html" rel="external nofollow noopener noreferrer" target="_blank">SpringMVC 异常处理 - 纵酒挥刀斩人头 - 博客园</a></p>
</li>
<li><p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-exceptionhandlers" rel="external nofollow noopener noreferrer" target="_blank">22. Web MVC framework</a></p>
</li>
<li><p><a href="http://howtodoinjava.com/spring/spring-mvc/spring-mvc-simplemappingexceptionresolver-example/" rel="external nofollow noopener noreferrer" target="_blank">Spring MVC Mapping Exceptions to Views Example | Spring MVC SimpleMappingExceptionResolver Example</a></p>
</li>
<li><p><a href="http://stackoverflow.com/questions/15987212/custom-error-page-in-tomcat-7-for-error-code-500" rel="external nofollow noopener noreferrer" target="_blank">java - Custom Error Page in Tomcat 7 for Error Code 500 - Stack Overflow</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> exception </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pip使用]]></title>
      <url>http://qsli.github.io/2017/01/08/pip/</url>
      <content type="html"><![CDATA[<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下载安装文件, <a href="https://bootstrap.pypa.io/get-pip.py" rel="external nofollow noopener noreferrer" target="_blank"></a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python get-pip.py</div></pre></td></tr></table></figure>
<h3 id="从列表文件安装"><a href="#从列表文件安装" class="headerlink" title="从列表文件安装"></a>从列表文件安装</h3><p>导出文件列表(一般配合virtualenv适应)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ pip freeze                               </div><div class="line">backports-abc==0.4                         </div><div class="line">backports.shutil-get-terminal-size==1.0.0  </div><div class="line">backports.ssl-match-hostname==3.5.0.1      </div><div class="line">beautifulsoup4==4.5.1                      </div><div class="line">bs4==0.0.1                                 </div><div class="line">...</div></pre></td></tr></table></figure>
<p>可以重定向到一个文件中，一般叫做requirements.txt</p>
<p>然后安装的时候，可以使用下面的命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install -r requirements.txt</div></pre></td></tr></table></figure>
<h3 id="安装VCS上的软件"><a href="#安装VCS上的软件" class="headerlink" title="安装VCS上的软件"></a>安装VCS上的软件</h3><blockquote>
<p>pip currently supports cloning over git, git+http, git+https, git+ssh, git+git and git+file:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[-e] git://git.myproject.org/MyProject#egg=MyProject</div><div class="line">[-e] git+http://git.myproject.org/MyProject#egg=MyProject</div><div class="line">[-e] git+https://git.myproject.org/MyProject#egg=MyProject</div><div class="line">[-e] git+ssh://git.myproject.org/MyProject#egg=MyProject</div><div class="line">[-e] git+git://git.myproject.org/MyProject#egg=MyProject</div><div class="line">[-e] git+file://git.myproject.org/MyProject#egg=MyProject</div><div class="line">-e git+git@git.myproject.org:MyProject#egg=MyProject</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="https://pip.pypa.io/en/stable/reference/pip_install/#vcs-support" rel="external nofollow noopener noreferrer" target="_blank">pip install — pip 9.0.1 documentation</a></p>
</li>
<li><p><a href="https://segmentfault.com/a/1190000003050954" rel="external nofollow noopener noreferrer" target="_blank">Django | requirement.txt 生成 - 黑月亮 - SegmentFault</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pip </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[windows命令操作剪贴板——CLIP]]></title>
      <url>http://qsli.github.io/2017/01/07/CLIP/</url>
      <content type="html"><![CDATA[<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><blockquote>
<p>CLIP</p>
<p>Description:<br>    Redirects output of command line tools to the Windows clipboard.<br>    This text output can then be pasted into other programs.</p>
<p>Parameter List:<br>    /?                  Displays this help message.</p>
<p>Examples:<br>    DIR | CLIP          Places a copy of the current directory<br>                        listing into the Windows clipboard.</p>
<p>   CLIP &lt; README.TXT   Places a copy of the text from readme.txt<br>                        on to the Windows clipboard.</p>
</blockquote>
<h2 id="简单应用"><a href="#简单应用" class="headerlink" title="简单应用"></a>简单应用</h2><h3 id="将ip地址拷贝到剪贴板"><a href="#将ip地址拷贝到剪贴板" class="headerlink" title="将ip地址拷贝到剪贴板"></a>将ip地址拷贝到剪贴板</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ipconfig | find <span class="string">"IPv4"</span> | find /V <span class="string">"自动"</span>  | find /V <span class="string">"Auto"</span> | awk <span class="string">"&#123; print <span class="variable">$(NF)</span>;&#125;"</span> | CLIP</div></pre></td></tr></table></figure>
<p>也可以添加一个alias，这样就不用每次敲<code>ipconfig</code>, 然后复制ip了</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://superuser.com/questions/382265/fastest-method-to-determine-my-pcs-ip-address-windows" rel="external nofollow noopener noreferrer" target="_blank">Fastest method to determine my PC’s IP address (Windows) - Super User</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> shell </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 剪贴板 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ThunderBird使用Markdown写邮件]]></title>
      <url>http://qsli.github.io/2017/01/02/markdown-here/</url>
      <content type="html"><![CDATA[<h1 id="Thunderbird"><a href="#Thunderbird" class="headerlink" title="Thunderbird"></a>Thunderbird</h1><p><img src="https://www.mozilla.org/media/img/thunderbird/landing/wordmark.3b0e03fa56f1.png" alt=""></p>
<p>是Mozilla基金推出的免费、开源的邮件客户端，它支持linux、mac和windows。</p>
<p>这个客户端看起来和火狐非常像，也支持插件扩展。</p>
<h1 id="markdown-here"><a href="#markdown-here" class="headerlink" title="markdown here"></a>markdown here</h1><p>markdown here便是借助markdown的力量来编写邮件。他在Chrome、Firefox、Safari上都有插件。</p>
<p>Thunderbird中的插件：</p>
<img src="/2017/01/02/markdown-here/additional.jpg" alt="插件" title="插件">
<p>插件安装好之后，在编写gmail等支持富文本编辑器的时候就可以将markdown转换成相应的样式。</p>
<p>markdown here也提供了Thunderbird的插件，在附加组件中安装重启后即可使用markdown来编辑，</p>
<p>编写完成后，点击工具栏的图标即可进行转换。</p>
<img src="/2017/01/02/markdown-here/mail.jpg" alt="编写邮件" title="编写邮件">
<p>转换的样式也可以在设置中自己定义。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>1.<a href="http://www.yangzhiping.com/tech/markdown-tips.html" rel="external nofollow noopener noreferrer" target="_blank">Markdown小技巧集合 - 阳志平的网志</a></p>
<p>2.<a href="http://markdown-here.com/" rel="external nofollow noopener noreferrer" target="_blank">Markdown Here</a></p>
]]></content>
      
        <categories>
            
            <category> markdown </category>
            
        </categories>
        
        
        <tags>
            
            <tag> markdown-here </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo中使用markdown来绘制脑图（mind map）]]></title>
      <url>http://qsli.github.io/2017/01/01/markdown-mindmap/</url>
      <content type="html"><![CDATA[<h1 id="脑图是什么？"><a href="#脑图是什么？" class="headerlink" title="脑图是什么？"></a>脑图是什么？</h1><p>脑图英文叫做<code>mind map</code>, 是一种帮助发散思维的工具。将读过的书、看过的源码等总结成脑图，等下次需要复习的时候</p>
<p>顺着脑图去看，效率非常高。</p>
<img src="/2017/01/01/markdown-mindmap/sample.jpg" alt="sample.jpg" title="">
<h2 id="用makrdown来画脑图"><a href="#用makrdown来画脑图" class="headerlink" title="用makrdown来画脑图"></a>用makrdown来画脑图</h2><p><code>markdown</code>是一种非常方便的标记性语言，使用<code>markdown</code>记录可以忽略格式带来的困扰，让我们更加的专注于内容。</p>
<p>脑图的结构也不复杂，就是一级一级的分支。使用markdown完全可以表达出来，关键是怎么渲染出来。</p>
<h2 id="kityminder"><a href="#kityminder" class="headerlink" title="kityminder"></a>kityminder</h2><p>经多番查找，最终锁定了百度前端团队开源的——<code>kityminder</code>, <a href="http://naotu.baidu.com/" rel="external nofollow noopener noreferrer" target="_blank">百度脑图</a>也是使用这个构建的。</p>
<p><code>kityminder</code>分成了两部分，一部分是<a href="https://github.com/fex-team/kityminder-core" rel="external nofollow noopener noreferrer" target="_blank">kityminder-core</a>,一个是<a href="https://github.com/fex-team/kityminder-editor" rel="external nofollow noopener noreferrer" target="_blank">kityminder-editor</a>.</p>
<img src="/2017/01/01/markdown-mindmap/relations.png" alt="relations.png" title="">
<h3 id="kityminder-core"><a href="#kityminder-core" class="headerlink" title="kityminder-core"></a>kityminder-core</h3><p>kityminder-core是百度脑图最核心部分的实现，主要包括了:</p>
<ul>
<li><p>包括脑图数据的可视化展示（Json 格式）</p>
</li>
<li><p>包括简单的编辑功能（节点创建、编辑、删除）。更加强大编辑功能的 KityMinder 编辑器请移步 kityminder-editor</p>
</li>
<li><p>不包含第三方格式（FreeMind、XMind、MindManager）的支持，可以加载 kityminder-protocol 来扩展第三方格式支持。</p>
</li>
<li><p>不包含文件存储的支持，需要自行实现存储。可参照百度脑图中的开源的 fio + 百度网盘方案进行实现。</p>
</li>
</ul>
<h3 id="kityminder-editor"><a href="#kityminder-editor" class="headerlink" title="kityminder-editor"></a>kityminder-editor</h3><blockquote>
<p>KityMinder Editor 是一款强大、简洁、体验优秀的脑图编辑工具，适合用于编辑树/图/网等结构的数据。</p>
<p>编辑器由百度 FEX 基于 kityminder-core 搭建，并且在百度脑图中使用。</p>
</blockquote>
<h2 id="让hexo支持kityminder"><a href="#让hexo支持kityminder" class="headerlink" title="让hexo支持kityminder"></a>让hexo支持kityminder</h2><p>这个主要是客户端渲染的。</p>
<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>引入<code>kityminder-core</code>的js和css，以及<code>kityminder-core</code>的依赖kity到相应的主题下面</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//core压缩后的</div><div class="line">kityminder.core.min.js</div><div class="line">//kity的cdn地址</div><div class="line">https://cdn.rawgit.com/fex-team/kity/dev/dist/kity.min.js</div></pre></td></tr></table></figure>
<h3 id="为mind-map找到一个标签"><a href="#为mind-map找到一个标签" class="headerlink" title="为mind map找到一个标签"></a>为<code>mind map</code>找到一个标签</h3><p>渲染需要<em>数据</em>和<em>容器</em>节点。数据的标记应该越简单越好。</p>
<p>查阅hexo的官方文档，发现了几个支持设置class属性的标签，以及raw标签。</p>
<p>先来看看<code>raw</code>标签：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% raw %&#125;</div><div class="line">content</div><div class="line">&#123;% endraw %&#125;</div></pre></td></tr></table></figure>
<p><code>raw</code>标签里面是可以写html的，渲染的时候不会加以改变，但是写起了比较麻烦，失去了标记性语言简单的特性。</p>
<p><code>pull quote</code>标签：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;% pullquote [class] %&#125;</div><div class="line">content</div><div class="line">&#123;% endpullquote %&#125;</div></pre></td></tr></table></figure>
<p><code>pull quote</code> 标签支持设置class属性，使用这个标签，然后设置一个我们自己的class，比如<code>mindmap</code></p>
<h3 id="渲染数据"><a href="#渲染数据" class="headerlink" title="渲染数据"></a>渲染数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> minder = <span class="keyword">new</span> kityminder.Minder(&#123;</div><div class="line">            <span class="attr">renderTo</span>: <span class="string">'.mindmap'</span></div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">var</span> markdownText = $(<span class="string">'.mindmap'</span>).text().trim();</div><div class="line">        $(<span class="string">'.mindmap p'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index, element</span>) </span>&#123;</div><div class="line">            element.style.display = <span class="string">'none'</span>;</div><div class="line">        &#125;);</div><div class="line">        minder.importData(<span class="string">'markdown'</span>, markdownText);</div><div class="line">        minder.disable();</div><div class="line">        minder.execCommand(<span class="string">'hand'</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="number">3000</span></div><div class="line">)</div></pre></td></tr></table></figure>
<p>使用markdown写mind map示例:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;% pullquote mindmap %&#125;</div><div class="line">#主题</div><div class="line">##一级分支</div><div class="line">###二级分支</div><div class="line">##一级分支</div><div class="line">##一级分支</div><div class="line">###二级分支</div><div class="line">####三级分支</div><div class="line">&#123;% endpullquote %&#125;</div></pre></td></tr></table></figure>
<p>渲染的效果</p>
<blockquote class="pullquote mindmap"><p>#主题</p>
<p>##一级分支</p>
<p>###二级分支</p>
<p>##一级分支</p>
<p>##一级分支</p>
<p>###二级分支</p>
<p>####三级分支</p>
</blockquote>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://hexo.io/zh-cn/docs/tag-plugins.html" rel="external nofollow noopener noreferrer" target="_blank">标签插件（Tag Plugins） | Hexo</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mindmap </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[xstream教程]]></title>
      <url>http://qsli.github.io/2016/12/27/xstream/</url>
      <content type="html"><![CDATA[<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p><img src="http://x-stream.github.io/logo.gif" alt=""></p>
<h2 id="pom依赖"><a href="#pom依赖" class="headerlink" title="pom依赖"></a>pom依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.thoughtworks.xstream/xstream --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.thoughtworks.xstream<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xstream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="输出xml"><a href="#输出xml" class="headerlink" title="输出xml"></a>输出xml</h2><h3 id="手动配置"><a href="#手动配置" class="headerlink" title="手动配置"></a>手动配置</h3><p>Author 类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Author</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Entry 类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String title, description;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Entry</span><span class="params">(String title, String description)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.title = title;</div><div class="line">        <span class="keyword">this</span>.description = description;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Blog 类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Author writer;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List entries = <span class="keyword">new</span> ArrayList();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Blog</span><span class="params">(Author writer)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.writer = writer;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Entry entry)</span> </span>&#123;</div><div class="line">        entries.add(entry);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">getContent</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> entries;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Blog teamBlog = <span class="keyword">new</span> Blog(<span class="keyword">new</span> Author(<span class="string">"qisheng.li"</span>));</div><div class="line">        teamBlog.add(<span class="keyword">new</span> Entry(<span class="string">"first"</span>, <span class="string">"first blog entry"</span>));</div><div class="line">        teamBlog.add(<span class="keyword">new</span> Entry(<span class="string">"second"</span>, <span class="string">"second blog entry"</span>));</div><div class="line"></div><div class="line">        XStream xStream = <span class="keyword">new</span> XStream();</div><div class="line">        System.out.println(xStream.toXML(teamBlog));        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出的内容为:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">com.air.xml.xstream.alias.Blog</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">writer</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>qisheng.li<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">writer</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">entries</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">com.air.xml.xstream.alias.Entry</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>first<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">description</span>&gt;</span>first blog entry<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">com.air.xml.xstream.alias.Entry</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">com.air.xml.xstream.alias.Entry</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>second<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">description</span>&gt;</span>second blog entry<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">com.air.xml.xstream.alias.Entry</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">entries</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">com.air.xml.xstream.alias.Blog</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><em>默认输出的类，是fully qualified name，可以手动设置别名</em></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//alias</span></div><div class="line">        xStream.alias(<span class="string">"blog"</span>, Blog.class);</div><div class="line">        xStream.alias(<span class="string">"entry"</span>, Entry.class);</div></pre></td></tr></table></figure>
<p>输出:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">blog</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">writer</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>qisheng.li<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">writer</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">entries</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">entry</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>first<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">description</span>&gt;</span>first blog entry<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">entry</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>second<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">description</span>&gt;</span>second blog entry<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">entries</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">blog</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><em>也可以设置属性级别的别名</em></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xStream.aliasField(<span class="string">"author"</span>, Blog.class, <span class="string">"writter"</span>);</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">blog</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">author</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>qisheng.li<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">author</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">entries</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">entry</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>first<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">description</span>&gt;</span>first blog entry<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">entry</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>second<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">description</span>&gt;</span>second blog entry<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">entries</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">blog</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><em>包级别的别名</em></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xStream.aliasPackage(<span class="string">"aliased.pachage.name"</span>, <span class="string">"com.air.xml.xstream.alias"</span>);</div></pre></td></tr></table></figure>
<p>输出的xml:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">aliased.pachage.name.Blog</span> <span class="attr">author</span>=<span class="string">"qisheng.li"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">entry</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>first<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>first blog entry<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">entry</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>second<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>second blog entry<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">aliased.pachage.name.Blog</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="Implicit-Collections"><a href="#Implicit-Collections" class="headerlink" title="Implicit Collections"></a>Implicit Collections</h4><blockquote>
<p>implicit collection: whenever you have a collection which doesn’t need to display it’s root tag, you can map it as an implicit collection.</p>
</blockquote>
<p>如果不想展示一个集合的root节点，比如上述的<code>entries</code>，可以将其当做一个<code>implicit collection</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//implicit collection</span></div><div class="line">xStream.addImplicitCollection(Blog.class, <span class="string">"entries"</span>);</div></pre></td></tr></table></figure>
<p>输出:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">blog</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">author</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>qisheng.li<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">author</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">entry</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>first<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>first blog entry<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">entry</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>second<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>second blog entry<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">blog</span>&gt;</span></div></pre></td></tr></table></figure>
<p>可以看到<code>entries</code>这个节点已经没有了</p>
<h4 id="field输出为属性值"><a href="#field输出为属性值" class="headerlink" title="field输出为属性值"></a>field输出为属性值</h4><p>接着上面的例子，我们现在想让Blog的writer输出为Blog标签的属性值。</p>
<p>实现步骤：</p>
<p>1.创建一个转换器</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorConverter</span>  <span class="keyword">implements</span> <span class="title">SingleValueConverter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">(Object obj)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ((Author) obj).getName();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">fromString</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Author(str);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canConvert</span><span class="params">(Class type)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> type.equals(Author.class);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2.注册这个转换器</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xStream.registerConverter(<span class="keyword">new</span> AuthorConverter());</div></pre></td></tr></table></figure>
<p>3.告诉XStream</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//attribute aliasing</span></div><div class="line">xStream.useAttributeFor(Blog.class, <span class="string">"writer"</span>);</div><div class="line">xStream.registerConverter(<span class="keyword">new</span> AuthorConverter());</div><div class="line"><span class="comment">//field alias</span></div><div class="line">xStream.aliasField(<span class="string">"author"</span>, Blog.class, <span class="string">"writer"</span>);</div></pre></td></tr></table></figure>
<p>输出的xml：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">blog</span> <span class="attr">author</span>=<span class="string">"qisheng.li"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">entry</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>first<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>first blog entry<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">entry</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>second<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>second blog entry<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">blog</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="基于注解"><a href="#基于注解" class="headerlink" title="基于注解"></a>基于注解</h3><p>主要使用的是<code>XStreamAlias</code>注解来标记别名</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@XStreamAlias</span>(<span class="string">"message"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RendezvousMessage</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@XStreamAlias</span>(<span class="string">"type"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> messageType;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RendezvousMessage</span><span class="params">(<span class="keyword">int</span> messageType)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.messageType = messageType;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        XStream xStream = <span class="keyword">new</span> XStream();</div><div class="line">        xStream.processAnnotations(RendezvousMessage.class);</div><div class="line">        RendezvousMessage rendezvousMessage = <span class="keyword">new</span> RendezvousMessage(<span class="number">12</span>);</div><div class="line">        System.out.println(xStream.toXML(rendezvousMessage));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>xml 输出</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">type</span>&gt;</span>12<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">message</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>ImplicitCollection</li>
</ul>
<p>使用 <code>@XstreamImplicit(itemFieldName = &quot;xxx&quot;)</code>来处理</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@XStreamImplicit</span>(itemFieldName = <span class="string">"part"</span>)</div><div class="line"><span class="keyword">private</span> List&lt;String&gt; content;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">type</span>&gt;</span>12<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">part</span>&gt;</span>first content<span class="tag">&lt;/<span class="name">part</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">part</span>&gt;</span>second content<span class="tag">&lt;/<span class="name">part</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">message</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>converter</li>
</ul>
<p>添加一个属性字段并指明他使用的转换器, 和一个基本类型——boolean</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@XStreamConverter</span>(value=BooleanConverter.class)</div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> important;</div><div class="line"></div><div class="line"><span class="meta">@XStreamConverter</span>(SingleValueCalendarConverter.class)</div><div class="line"><span class="keyword">private</span> Calendar created = <span class="keyword">new</span> GregorianCalendar();</div></pre></td></tr></table></figure>
<p>转化器代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleValueCalendarConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">marshal</span><span class="params">(Object source, HierarchicalStreamWriter writer, MarshallingContext context)</span> </span>&#123;</div><div class="line">        Calendar calendar = (Calendar) source;</div><div class="line">        writer.setValue(String.valueOf(calendar.getTime().getTime()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">unmarshal</span><span class="params">(HierarchicalStreamReader reader, UnmarshallingContext context)</span> </span>&#123;</div><div class="line">        GregorianCalendar calendar = <span class="keyword">new</span> GregorianCalendar();</div><div class="line">        calendar.setTime(<span class="keyword">new</span> Date(Long.parseLong(reader.getValue())));</div><div class="line">        <span class="keyword">return</span> calendar;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canConvert</span><span class="params">(Class type)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> type.equals(GregorianCalendar.class);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出的xml结果：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">type</span>&gt;</span>12<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">part</span>&gt;</span>first content<span class="tag">&lt;/<span class="name">part</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">part</span>&gt;</span>second content<span class="tag">&lt;/<span class="name">part</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">important</span>&gt;</span>false<span class="tag">&lt;/<span class="name">important</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">created</span>&gt;</span>1482856467282<span class="tag">&lt;/<span class="name">created</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">message</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>属性</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@XStreamAlias</span>(<span class="string">"type"</span>)</div><div class="line"><span class="meta">@XStreamAsAttribute</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> messageType;</div></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">message</span> <span class="attr">type</span>=<span class="string">"12"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">part</span>&gt;</span>first content<span class="tag">&lt;/<span class="name">part</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">part</span>&gt;</span>second content<span class="tag">&lt;/<span class="name">part</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">important</span>&gt;</span>false<span class="tag">&lt;/<span class="name">important</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">created</span>&gt;</span>1482856554517<span class="tag">&lt;/<span class="name">created</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">message</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>忽略一些字段</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">message</span> <span class="attr">type</span>=<span class="string">"12"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">part</span>&gt;</span>first content<span class="tag">&lt;/<span class="name">part</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">part</span>&gt;</span>second content<span class="tag">&lt;/<span class="name">part</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">created</span>&gt;</span>1482856661757<span class="tag">&lt;/<span class="name">created</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">message</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>important</code> 属性已经被隐藏</p>
<h4 id="自动扫描注解"><a href="#自动扫描注解" class="headerlink" title="自动扫描注解"></a>自动扫描注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xStream.autodetectAnnotations(<span class="keyword">true</span>);</div></pre></td></tr></table></figure>
<h2 id="xml转对象"><a href="#xml转对象" class="headerlink" title="xml转对象"></a>xml转对象</h2> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">RendezvousMessage deserializedMessage = (RendezvousMessage) xStream.fromXML(<span class="string">"&lt;message type=\"12\"&gt;\n"</span> +</div><div class="line">        <span class="string">"  &lt;part&gt;first content&lt;/part&gt;\n"</span> +</div><div class="line">        <span class="string">"  &lt;part&gt;second content&lt;/part&gt;\n"</span> +</div><div class="line">        <span class="string">"  &lt;created&gt;1482859234272&lt;/created&gt;\n"</span> +</div><div class="line">        <span class="string">"&lt;/message&gt;"</span>);</div></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><p><a href="http://x-stream.github.io/index.html" rel="external nofollow noopener noreferrer" target="_blank">About XStream</a></p>
</li>
<li><p><a href="http://x-stream.github.io/alias-tutorial.html" rel="external nofollow noopener noreferrer" target="_blank">Alias Tutorial</a></p>
</li>
<li><p><a href="http://x-stream.github.io/annotations-tutorial.html" rel="external nofollow noopener noreferrer" target="_blank">Annotations Tutorial</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> xml </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[idea文件模板]]></title>
      <url>http://qsli.github.io/2016/12/23/idea-template/</url>
      <content type="html"><![CDATA[<h1 id="版权信息"><a href="#版权信息" class="headerlink" title="版权信息"></a>版权信息</h1><p>代码前面一般都会有相应的版权信息，拿guava的代码为例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Copyright (C) 2007 The Guava Authors</div><div class="line"> *</div><div class="line"> * Licensed under the Apache License, Version 2.0 (the "License");</div><div class="line"> * you may not use this file except in compliance with the License.</div><div class="line"> * You may obtain a copy of the License at</div><div class="line"> *</div><div class="line"> * http://www.apache.org/licenses/LICENSE-2.0</div><div class="line"> *</div><div class="line"> * Unless required by applicable law or agreed to in writing, software</div><div class="line"> * distributed under the License is distributed on an "AS IS" BASIS,</div><div class="line"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</div><div class="line"> * See the License for the specific language governing permissions and</div><div class="line"> * limitations under the License.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">package</span> com.google.common.collect;</div></pre></td></tr></table></figure>
<h2 id="idea自动生成版权信息"><a href="#idea自动生成版权信息" class="headerlink" title="idea自动生成版权信息"></a>idea自动生成版权信息</h2><p><code>File</code> &gt; <code>Settings</code> &gt; <code>Copyright</code> &gt; <code>Copyright Profiles</code></p>
<p>新建一个profile，填入如下的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/* * Copyright (c) $today.year xx.com. All Rights Reserved. */</div></pre></td></tr></table></figure></p>
<p><code>$today.year</code>代表当前的年</p>
<img src="/2016/12/23/idea-template/profiles.jpg" alt="profiles.jpg" title="">
<p>新建java文件时就自动生成了版权信息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> *  * Copyright (c) 2016 Qunar.com. All Rights Reserved. </div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">package</span> com.xxx.handler;</div></pre></td></tr></table></figure>
<h1 id="作者、日期、邮箱等"><a href="#作者、日期、邮箱等" class="headerlink" title="作者、日期、邮箱等"></a>作者、日期、邮箱等</h1><p><code>File</code> &gt; <code>Settings</code> &gt; <code>File and Ocde Templates</code> &gt; <code>Includes</code> &gt; <code>File Header</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#set( $email = "xx@xx.com")</div><div class="line">#set( $author = "xxx")</div><div class="line"></div><div class="line">/**</div><div class="line"> * @author $&#123;author&#125;</div><div class="line"> * @email $&#123;email&#125;</div><div class="line"> * @date $&#123;DATE&#125; $&#123;TIME&#125;</div><div class="line"> */</div></pre></td></tr></table></figure>
<p>这个使用的<code>velocity</code>渲染的，可以参考<code>velocity</code>的语法</p>
]]></content>
      
        <categories>
            
            <category> idea </category>
            
        </categories>
        
        
        <tags>
            
            <tag> template </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tomcat中文编码设置]]></title>
      <url>http://qsli.github.io/2016/12/23/tomcat-encoding/</url>
      <content type="html"><![CDATA[<h2 id="tomcat中文乱码"><a href="#tomcat中文乱码" class="headerlink" title="tomcat中文乱码"></a>tomcat中文乱码</h2><p>tomcat 默认的编<code>ISO-8859-1</code>编码，部分中文会出现乱码</p>
<blockquote>
<p><em>URIEncoding</em><br>This specifies the character encoding used to decode the URI bytes, after %xx decoding the URL. If not specified, ISO-8859-1 will be used.</p>
</blockquote>
<h2 id="编码设置"><a href="#编码设置" class="headerlink" title="编码设置"></a>编码设置</h2><p><code>conf/server.xml</code></p>
<p>修改前：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>修改后：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> </span></div><div class="line"><span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span>               </div><div class="line"><span class="attr">URIEncoding</span>=<span class="string">"UTF-8"</span>/&gt;</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://tomcat.apache.org/tomcat-7.0-doc/config/http.html" rel="external nofollow noopener noreferrer" target="_blank">The HTTP Connector</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> tomcat </category>
            
        </categories>
        
        
        <tags>
            
            <tag> encoding </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tomcat access log 格式设置]]></title>
      <url>http://qsli.github.io/2016/12/23/tomcat-access-log/</url>
      <content type="html"><![CDATA[<h2 id="Tomcat-access-log-日志格式"><a href="#Tomcat-access-log-日志格式" class="headerlink" title="Tomcat access log 日志格式"></a>Tomcat access log 日志格式</h2><p>文件位置: <code>conf/server.xml</code></p>
<p>默认配置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Access log processes all example.</span></div><div class="line">     Documentation at: /docs/config/valve.html</div><div class="line">     <span class="doctag">Note:</span> The pattern used is equivalent to using pattern="common" --&gt;</div><div class="line"><span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attr">directory</span>=<span class="string">"logs"</span></span></div><div class="line">       <span class="attr">prefix</span>=<span class="string">"localhost_access_log."</span> <span class="attr">suffix</span>=<span class="string">".txt"</span></div><div class="line">       <span class="attr">pattern</span>=<span class="string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /&gt;</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>名称</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>%a</td>
<td>Remote IP address</td>
</tr>
<tr>
<td>%A</td>
<td>Local IP address</td>
</tr>
<tr>
<td>%b</td>
<td>Bytes sent, excluding HTTP headers, or ‘-‘ if zero</td>
</tr>
<tr>
<td>%B</td>
<td>Bytes sent, excluding HTTP headers</td>
</tr>
<tr>
<td>%h</td>
<td>Remote host name (or IP address if enableLookups for the connector is false)</td>
</tr>
<tr>
<td>%H</td>
<td>Request protocol</td>
</tr>
<tr>
<td>%l</td>
<td>Remote logical username from identd (always returns ‘-‘)</td>
</tr>
<tr>
<td>%m</td>
<td>Request method (GET, POST, etc.)</td>
</tr>
<tr>
<td>%p</td>
<td>Local port on which this request was received</td>
</tr>
<tr>
<td>%q</td>
<td>Query string (prepended with a ‘?’ if it exists)</td>
</tr>
<tr>
<td>%r</td>
<td>First line of the request (method and request URI)</td>
</tr>
<tr>
<td>%s</td>
<td>HTTP status code of the response</td>
</tr>
<tr>
<td>%S</td>
<td>User session ID</td>
</tr>
<tr>
<td>%t</td>
<td>Date and time, in Common Log Format</td>
</tr>
<tr>
<td>%u</td>
<td>Remote user that was authenticated (if any), else ‘-‘</td>
</tr>
<tr>
<td>%U</td>
<td>Requested URL path</td>
</tr>
<tr>
<td>%v</td>
<td>Local server name</td>
</tr>
<tr>
<td>%D</td>
<td>Time taken to process the request, in millis</td>
</tr>
<tr>
<td>%T</td>
<td>Time taken to process the request, in seconds</td>
</tr>
<tr>
<td>%F</td>
<td>Time taken to commit the response, in millis</td>
</tr>
<tr>
<td>%I</td>
<td>Current request thread name (can compare later with stacktraces)</td>
</tr>
</tbody>
</table>
<p>默认的配置打出来的access日志如下：</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>127.0.0.1</td>
<td>-</td>
<td>-</td>
<td>[07/Oct/2016:22:31:56 +0800]</td>
<td>“GET /dubbo/ HTTP/1.1”</td>
<td>404</td>
<td>963</td>
</tr>
<tr>
<td>远程IP</td>
<td>logical username</td>
<td>remote user</td>
<td>时间和日期</td>
<td>http请求的第一行</td>
<td>状态码</td>
<td>除去http头的发送大小</td>
</tr>
</tbody>
</table>
<h3 id="header、cookie、session其他字段的支持"><a href="#header、cookie、session其他字段的支持" class="headerlink" title="header、cookie、session其他字段的支持"></a>header、cookie、session其他字段的支持</h3><blockquote>
<p>There is also support to write information incoming or outgoing headers, cookies, session or request attributes and special timestamp formats. It is modeled after the Apache HTTP Server log configuration syntax:</p>
</blockquote>
<table>
<thead>
<tr>
<th>名称</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>%{xxx}i</td>
<td>for incoming headers</td>
</tr>
<tr>
<td>%{xxx}o</td>
<td>for outgoing response headers</td>
</tr>
<tr>
<td>%{xxx}c</td>
<td>for a specific cookie</td>
</tr>
<tr>
<td>%{xxx}r</td>
<td>xxx is an attribute in the ServletRequest</td>
</tr>
<tr>
<td>%{xxx}s</td>
<td>xxx is an attribute in the HttpSession</td>
</tr>
<tr>
<td>%{xxx}t</td>
<td>xxx is an enhanced SimpleDateFormat pattern</td>
</tr>
</tbody>
</table>
<p>例如： <code>%{X-Forwarded-For}i</code>即可打印出实际访问的ip地址（考虑到ng的反向代理）</p>
<p>HTTP头一般格式如下:</p>
<p><code>X-Forwarded-For: client1, proxy1, proxy2</code></p>
<blockquote>
<p>其中的值通过一个 逗号+空格 把多个IP地址区分开, 最左边（client1）是最原始客户端的IP地址, 代理服务器每成功收到一个请求，就把请求来源IP地址添加到右边。 在上面这个例子中，这个请求成功通过了三台代理服务器：proxy1, proxy2 及 proxy3。请求由client1发出，到达了proxy3（proxy3可能是请求的终点）。请求刚从client1中发出时，XFF是空的，请求被发往proxy1；通过proxy1的时候，client1被添加到XFF中，之后请求被发往proxy2;通过proxy2的时候，proxy1被添加到XFF中，之后请求被发往proxy3；通过proxy3时，proxy2被添加到XFF中，之后请求的的去向不明，如果proxy3不是请求终点，请求会被继续转发。</p>
<p>鉴于伪造这一字段非常容易，应该谨慎使用X-Forwarded-For字段。正常情况下XFF中最后一个IP地址是最后一个代理服务器的IP地址, 这通常是一个比较可靠的信息来源。</p>
</blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://tomcat.apache.org/tomcat-7.0-doc/config/valve.html" rel="external nofollow noopener noreferrer" target="_blank">The Valve Component</a></p>
</li>
<li><p><a href="https://zh.wikipedia.org/wiki/X-Forwarded-For" rel="external nofollow noopener noreferrer" target="_blank">X-Forwarded-For</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> tomcat </category>
            
        </categories>
        
        
        <tags>
            
            <tag> access-log </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python 小技巧]]></title>
      <url>http://qsli.github.io/2016/12/18/python-util/</url>
      <content type="html"><![CDATA[<h2 id="开启一个简单的HTTP-Server"><a href="#开启一个简单的HTTP-Server" class="headerlink" title="开启一个简单的HTTP Server"></a>开启一个简单的HTTP Server</h2><ul>
<li>命令：</li>
</ul>
<p><code>python -m SimpleHTTPServer port</code></p>
<p><code>-m</code> 是指后面跟的是python的一个Modlue</p>
<p><code>port</code> 默认是<code>8080</code>，可以自行指定。</p>
<ul>
<li>作用：</li>
</ul>
<ol>
<li><p>可以当一个简单的httpserver，做测试用</p>
</li>
<li><p>可以简单的传输一些小文件（大文件性能不好，经常中断）,大文件的传输可以用nc</p>
</li>
</ol>
<p>见： <a href="/2016/12/18/nc/" title="netcat(nc) —— 使用小结">netcat(nc) —— 使用小结</a></p>
<h2 id="简单的cig-server"><a href="#简单的cig-server" class="headerlink" title="简单的cig server"></a>简单的cig server</h2><ul>
<li><p>命令：<br><code>python -m CGIHTTPServer port</code></p>
</li>
<li><p>作用:</p>
</li>
</ul>
<p>可以开启一个简单的cgi服务器，支持python作为cgi的语言，cgi的脚本须放置在root目录下的<code>cgi-bin</code></p>
<h2 id="格式化-json数据"><a href="#格式化-json数据" class="headerlink" title="格式化 json数据"></a>格式化 json数据</h2><ul>
<li>命令:</li>
</ul>
<p><code>curl http://my_url/ | python -m json.tool</code></p>
<ul>
<li>作用:</li>
</ul>
<p>在返回大量json数据时，在命令行里可以用这个工具进行格式化。</p>
<p>chrome浏览器中的<code>JsonView</code>插件可以做到同样的事情<a href="https://chrome.google.com/webstore/detail/json-viewer/aimiinbnnkboelefkjlenlgimcabobli?utm_source=chrome-ntp-icon" rel="external nofollow noopener noreferrer" target="_blank">chrome商店链接</a></p>
<ul>
<li>缺陷：</li>
</ul>
<p>python 2.x 中是使用ASCII码作为默认编码的，因此json中如果带有中文就只是16进制的表示，可以修改<code>json.tool</code>的源代码。</p>
<p>参见<a href="http://axiaoxin.com/article/77/" rel="external nofollow noopener noreferrer" target="_blank">json处理小技巧</a></p>
<blockquote>
<p>Python也有命令行里面格式化显示json的模块json.tool</p>
<p>cat data.json<br>{“爱”: “我”, “中”: “华”}<br>cat data.json| python -m json.tool<br>{<br>    “\u4e2d”: “\u534e”,<br>    “\u7231”: “\u6211”<br>}<br>好像有什么不对劲？因为json.tool在实现的时候ensure_ascii为True，让我们用Python来自己实现一个更好的Unix filter。</p>
</blockquote>
<p><code>filter.py</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> json</div><div class="line"><span class="keyword">import</span> fileinput</div><div class="line"><span class="keyword">for</span> l <span class="keyword">in</span> fileinput.input():</div><div class="line">    print(json.dumps(json.loads(l), ensure_ascii=<span class="keyword">False</span>).encode(<span class="string">'utf-8'</span>))</div></pre></td></tr></table></figure>
<p>只需要写上面那 4 行代码，就可以这样使用它：</p>
<blockquote>
<p>python filter.py data.json<br>{“爱”: “我”, “中”: “华”}<br>cat data.json| python filter.py<br>{“爱”: “我”, “中”: “华”}</p>
</blockquote>
<h2 id="编码问题"><a href="#编码问题" class="headerlink" title="编码问题"></a>编码问题</h2><p>python 2.x 默认使用的编码是ascii编码，中文总是出问题。</p>
<p>遇到乱码问题，一般使用如下的步骤即可解决:</p>
<ol>
<li>python文件自身的编码</li>
</ol>
<blockquote>
<pre><code>Python will default to ASCII as standard encoding if no other
encoding hints are given.
</code></pre></blockquote>
<pre><code>To define a source code encoding, a magic comment must
be placed into the source files either as first or second
line in the file, such as:

      # coding=&lt;encoding name&gt;

or (using formats recognized by popular editors)

      #!/usr/bin/python
      # -*- coding: &lt;encoding name&gt; -*-
</code></pre><p>在文件头加上默认编码即可：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/local/bin/python</span></div><div class="line"><span class="comment"># coding: utf-8</span></div><div class="line"><span class="keyword">import</span> os, sys</div><div class="line">...</div></pre></td></tr></table></figure>
<ol>
<li>重新设置系统模块的编码</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> sys</div><div class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</div></pre></td></tr></table></figure>
<ol>
<li>使用Unicode</li>
</ol>
<p><code>s = u&#39;中文&#39;</code> </p>
<h2 id="to-be-continued"><a href="#to-be-continued" class="headerlink" title="to be continued"></a>to be continued</h2><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://www.python.org/dev/peps/pep-0263/" rel="external nofollow noopener noreferrer" target="_blank">Defining Python Source Code Encodings</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python-util </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[netcat(nc) —— 使用小结]]></title>
      <url>http://qsli.github.io/2016/12/18/nc/</url>
      <content type="html"><![CDATA[<p>nc的全称是netcat，提供了许多关于网络操作的功能，号称网络工具中的瑞士军刀。</p>
<p>nc也有windows的移植版本：<a href="https://eternallybored.org/misc/netcat/" rel="external nofollow noopener noreferrer" target="_blank"></a></p>
<blockquote>
<p>  Netcat is a featured networking utility which reads and writes data across network connections, using the TCP/IP protocol.<br>It is designed to be a reliable “back-end” tool that can be used directly or easily driven by other programs and scripts. At the same time, it is a feature-rich network debugging and exploration tool, since it can create almost any kind of connection you would need and has several interesting built-in capabilities.</p>
</blockquote>
<h2 id="常见用途"><a href="#常见用途" class="headerlink" title="常见用途"></a>常见用途</h2><h3 id="nc-传输文件："><a href="#nc-传输文件：" class="headerlink" title="nc 传输文件："></a>nc 传输文件：</h3><ul>
<li>传送文件</li>
</ul>
<p>发送端：<code>nc -l 6666 &lt; file</code><br>接收端: <code>nc host 6666 | pv -L 30m &gt; wrapper</code></p>
<p>其中pv是一个限流的工具。</p>
<ul>
<li>压缩传输一个文件夹</li>
</ul>
<p><code>tar zcvf folder.tar.gz folder | nc -l 6666</code></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="http://netcat.sourceforge.net/" rel="external nofollow noopener noreferrer" target="_blank">The GNU Netcat</a></li>
<li><a href="https://www.oschina.net/translate/linux-netcat-command" rel="external nofollow noopener noreferrer" target="_blank">Linux Netcat 命令——网络工具中的瑞士军刀</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> shell </category>
            
        </categories>
        
        
        <tags>
            
            <tag> netcat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java SPI 总结]]></title>
      <url>http://qsli.github.io/2016/12/17/spi/</url>
      <content type="html"><![CDATA[<h2 id="SPI-ABC"><a href="#SPI-ABC" class="headerlink" title="SPI ABC"></a>SPI ABC</h2><p>SPI 代表<code>Service Provider Interfaces</code>, 是一种服务提供发现的机制。JDK中为其提供了<code>ServiceLoader</code>用来加载接口对应的实现。</p>
<h2 id="使用约定"><a href="#使用约定" class="headerlink" title="使用约定"></a>使用约定</h2><img src="/2016/12/17/spi/usage.jpg" alt="使用约定" title="使用约定">
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">└── src</div><div class="line">├── com</div><div class="line">│   └── ivanzhang</div><div class="line">│       └── spi</div><div class="line">│           ├── HelloInterface.java</div><div class="line">│           ├── impl</div><div class="line">│           │   ├── ImageHello.java</div><div class="line">│           │   └── TextHello.java</div><div class="line">│           └── SPIMain.java</div><div class="line">└── META-INF</div><div class="line">    └── services</div><div class="line">        └── com.ivanzhang.spi.HelloInterface</div></pre></td></tr></table></figure>
<h2 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h2><ul>
<li>common-logging</li>
</ul>
<blockquote>
<p>common-logging，apache最早提供的日志的门面接口。只有接口，没有实现。具体方案由各提供商实现，发现日志提供商是通过扫描 META-INF/services/org.apache.commons.logging.LogFactory配置文件，通过读取该文件的内容找到日志提工商实现类。只要我们的日志实现里包含了这个文件，并在文件里制定 LogFactory工厂接口的实现类即可。</p>
</blockquote>
<ul>
<li>jdbc</li>
</ul>
<blockquote>
<p>jdbc4.0以前，开发还需要基于Class.forName(“xxx”)的方式来装载驱动，jdbc4也基于spi的机制来发现驱动提供商了，可以通过META-INF/services/java.sql.Driver文件里指定实现类的方式来暴露驱动提供者。</p>
</blockquote>
<p><em>其他用途：</em></p>
<ul>
<li>Java Database Connectivity</li>
<li>Java Cryptography Extension</li>
<li>Java Naming and Directory Interface</li>
<li>Java API for XML Processing</li>
<li>Java Business Integration</li>
<li>Java Sound</li>
<li>Java Image I/O</li>
<li>Java File Systems</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://www.solinx.co/archives/142" rel="external nofollow noopener noreferrer" target="_blank">Java的SPI机制与简单示例</a></p>
</li>
<li><p><a href="https://my.oschina.net/u/1034176/blog/659445" rel="external nofollow noopener noreferrer" target="_blank">Java SPI机制简介 - oschina</a></p>
</li>
<li><p><a href="http://ivanzhangwb.github.io/blog/2012/06/01/java-spi/" rel="external nofollow noopener noreferrer" target="_blank">Java SPI机制简介 - 技术宅</a></p>
</li>
<li><p><a href="https://docs.oracle.com/javase/tutorial/sound/SPI-intro.html" rel="external nofollow noopener noreferrer" target="_blank">Introduction to the Service Provider Interfaces</a></p>
</li>
<li><p><a href="http://www.jianshu.com/p/bd36c023ddf0" rel="external nofollow noopener noreferrer" target="_blank">谈java SPI机制、spring-mvc启动及servlet3.0</a></p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/Service_provider_interface" rel="external nofollow noopener noreferrer" target="_blank">Service Provider Interface</a></p>
</li>
<li><p><a href="http://resources.sei.cmu.edu/asset_files/TechnicalNote/2002_004_001_13958.pdf" rel="external nofollow noopener noreferrer" target="_blank">Replaceable Components and the Service Provider Interface </a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spi </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[正则总结]]></title>
      <url>http://qsli.github.io/2016/12/14/re/</url>
      <content type="html"><![CDATA[<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>推荐使用<code>RegexBudy</code></p>
<p><img src="https://www.regexbuddy.com/img/icon.png" alt=""></p>
<p>界面如下:</p>
<p><img src="https://www.regexbuddy.com/screens/regexbuddy.png" alt=""></p>
<p>推荐python的 <code>VerbalExpressions</code> <a href="https://github.com/VerbalExpressions/PythonVerbalExpressions" rel="external nofollow noopener noreferrer" target="_blank">PythonVerbalExpressions </a></p>
<h1 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h1><h2 id="匹配多个单词"><a href="#匹配多个单词" class="headerlink" title="匹配多个单词"></a>匹配多个单词</h2><p><code>\b</code>可以匹配一个单词的开头或者结尾</p>
<p>匹配单个单词： <code>\bfoo\b</code> 可以匹配单个单测 foo</p>
<p>匹配多个单词： <code>\b(foo|bar)\b</code> 可以匹配foo 或者 bar</p>
<h2 id="匹配开头和结尾"><a href="#匹配开头和结尾" class="headerlink" title="匹配开头和结尾"></a>匹配开头和结尾</h2><p><code>^</code>可以匹配字符串的开头</p>
<p><code>$</code>可以匹配字符串的结尾</p>
<h2 id="零宽断言"><a href="#零宽断言" class="headerlink" title="零宽断言"></a>零宽断言</h2><table>
<thead>
<tr>
<th>分类</th>
<th>代码/语法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>捕获</td>
<td>(exp)</td>
<td>匹配exp,并捕获文本到自动命名的组里</td>
</tr>
<tr>
<td></td>
<td>(?<name>exp)</name></td>
<td>匹配exp,并捕获文本到名称为name的组里，也可以写成(?’name’exp)</td>
</tr>
<tr>
<td></td>
<td>(?:exp)</td>
<td>匹配exp,不捕获匹配的文本，也不给此分组分配组号</td>
</tr>
<tr>
<td>零宽断言</td>
<td>(?=exp) 匹配exp前面的位置</td>
</tr>
<tr>
<td></td>
<td>(?&lt;=exp)</td>
<td>匹配exp后面的位置</td>
</tr>
<tr>
<td></td>
<td>(?!exp)</td>
<td>匹配后面跟的不是exp的位置</td>
</tr>
<tr>
<td></td>
<td>(?&lt;!exp)</td>
<td>匹配前面不是exp的位置</td>
</tr>
<tr>
<td>注释  (?#comment)</td>
<td>这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读</td>
</tr>
</tbody>
</table>
<h3 id="先行断言"><a href="#先行断言" class="headerlink" title="先行断言"></a>先行断言</h3><p>语法格式</p>
<p><code>[a-z]*(?=ing)</code></p>
<p>可匹配 cooking singing 中的cook 与 sing</p>
<h3 id="后发断言"><a href="#后发断言" class="headerlink" title="后发断言"></a>后发断言</h3><p>语法格式</p>
<p><code>(?&lt;=abc)[a-z]*</code></p>
<p>可匹配 abcdefg 中的defg</p>
<h3 id="负向零宽断言"><a href="#负向零宽断言" class="headerlink" title="负向零宽断言"></a>负向零宽断言</h3><p>语法格式</p>
<p><code>(?!exp)</code></p>
<p>断言此位置的后面不能匹配表达式<code>exp</code></p>
<p><code>\b\w*q(?!u)\w*\b</code> 匹配q后面不出现u（可以以q结尾）</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><p><a href="https://www.regexbuddy.com/" rel="external nofollow noopener noreferrer" target="_blank">RegexBuddy官网</a></p>
</li>
<li><p><a href="https://luke0922.gitbooks.io/learnregularexpressionin30minutes/content/" rel="external nofollow noopener noreferrer" target="_blank">正则表达式30分钟入门教程</a></p>
</li>
<li><p><a href="http://www.biliyu.com/article/1321.html" rel="external nofollow noopener noreferrer" target="_blank">正则表达式怎样匹配多个单词</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> base </category>
            
        </categories>
        
        
        <tags>
            
            <tag> re </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[atnode——在集群上批量执行命令]]></title>
      <url>http://qsli.github.io/2016/12/13/atnode/</url>
      <content type="html"><![CDATA[<h2 id="atnodes"><a href="#atnodes" class="headerlink" title="atnodes"></a>atnodes</h2><p>atnode是一个用perl写成的工具，它可以方便的在集群上执行命令</p>
<p><a href="http://search.cpan.org/~agent/SSH-Batch-0.029/bin/atnodes" rel="external nofollow noopener noreferrer" target="_blank">官网链接</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">atnodes <span class="string">"echo alias grep=\'grep -n --color\' &gt;&gt; ~/.bashrc "</span>  xxx.xx[1-10].com  yyy.yy[1-10].com</div></pre></td></tr></table></figure>
<p>上述的命令就会在后面两个列表的主机上都执行一遍了。</p>
<h2 id="tonodes"><a href="#tonodes" class="headerlink" title="tonodes"></a>tonodes</h2><p>与atnodes类似，tonodes 可以将文件传输到集群上的没一个文件</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>fornodes: Expand patterns to machine host list</p>
<p>key2nodes: Push SSH public keys to remote clusters </p>
<h2 id="作者博客"><a href="#作者博客" class="headerlink" title="作者博客"></a>作者博客</h2><p><a href="http://weibo.com/u/1834459124?topnav=1&amp;wvr=6&amp;topsug=1&amp;is_all=1" rel="external nofollow noopener noreferrer" target="_blank">agentzh的微博</a></p>
]]></content>
      
        <categories>
            
            <category> shell </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[grep 总结]]></title>
      <url>http://qsli.github.io/2016/12/07/grep/</url>
      <content type="html"><![CDATA[<h2 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h2><p>示例文本：</p>
<blockquote>
<p>“Night gathers, and now my watch begins. It shall not end<br>until my death. I shall take no wife, hold no lands, father no<br>children. I shall wear no crowns and win no glory. I shall live<br>and die at my post. I am the sword in the darkness. I am the<br>watcher on the walls. I am the shield that guards the realms of<br>men. I pledge my life and honor to the Night’s Watch, for this<br>night and all the nights to come.”</p>
</blockquote>
<h3 id="grep-39-keyword-39-filename"><a href="#grep-39-keyword-39-filename" class="headerlink" title="grep &#39;keyword&#39; filename"></a><code>grep &#39;keyword&#39; filename</code></h3><p>在一个文件按照关键字查找</p>
<p> <code>grep &#39;now&#39; test.txt</code> 输出</p>
<blockquote>
<p>“Night gathers, and now my watch begins. It shall not end</p>
</blockquote>
<h3 id="grep-n"><a href="#grep-n" class="headerlink" title="grep -n"></a><code>grep -n</code></h3><p>显示行号</p>
<p> <code>grep -n &#39;now&#39; test.txt</code> 输出</p>
<blockquote>
<p>1:”Night gathers, and now my watch begins. It shall not end</p>
</blockquote>
<h3 id="grep-i"><a href="#grep-i" class="headerlink" title="grep -i"></a><code>grep -i</code></h3><p>忽略大小写</p>
<p> <code>grep -i &#39;watch&#39; test.txt</code> 输出</p>
<blockquote>
<p>“Night gathers, and now my watch begins. It shall not end<br>watcher on the walls. I am the shield that guards the realms of<br>men. I pledge my life and honor to the Night’s Watch, for this</p>
</blockquote>
<h3 id="grep-v"><a href="#grep-v" class="headerlink" title="grep -v"></a><code>grep -v</code></h3><p>输出不包含 <code>-v</code> 后面关键字的行</p>
<p><code>grep -v &#39;watch&#39; test.txt</code> 输出</p>
<blockquote>
<p>until my death. I shall take no wife, hold no lands, father no<br>children. I shall wear no crowns and win no glory. I shall live<br>and die at my post. I am the sword in the darkness. I am the<br>men. I pledge my life and honor to the Night’s Watch, for this<br>night and all the nights to come.”</p>
</blockquote>
<h3 id="grep-e"><a href="#grep-e" class="headerlink" title="grep -e"></a><code>grep -e</code></h3><p>提供正则的支持，关键字中可以包含正则表达式</p>
<h3 id="grep-B10"><a href="#grep-B10" class="headerlink" title="grep -B10"></a><code>grep -B10</code></h3><p>输出匹配行的同事， 也输出匹配行之前的10行（before）</p>
<h3 id="grep-A10"><a href="#grep-A10" class="headerlink" title="grep -A10"></a><code>grep -A10</code></h3><p>输出匹配行的同时，也输出匹配行之后的10行（after）</p>
<h3 id="grep-C10"><a href="#grep-C10" class="headerlink" title="grep -C10"></a><code>grep -C10</code></h3><p>输出匹配行的同时，输出之前和之后的10行</p>
<h3 id="grep-o"><a href="#grep-o" class="headerlink" title="grep -o"></a><code>grep -o</code></h3><p>只输出匹配的内容</p>
<p><code>grep -o &#39;watch&#39; test.txt</code></p>
<blockquote>
<p>watch<br>  watch</p>
</blockquote>
<h3 id="grep-c"><a href="#grep-c" class="headerlink" title="grep -c"></a><code>grep -c</code></h3><p>输出匹配的行数的个数</p>
<p><code>grep -ci &#39;watch&#39; test.txt</code></p>
<blockquote>
<p>3</p>
</blockquote>
<h3 id="grep-l"><a href="#grep-l" class="headerlink" title="grep -l"></a><code>grep -l</code></h3><p>显示有匹配行的文件，只显示文件名称，不显示内容</p>
<p><code>grep -l &#39;watch&#39; test.txt</code></p>
<blockquote>
<p>test.txt</p>
</blockquote>
<h3 id="grep-H"><a href="#grep-H" class="headerlink" title="grep -H"></a><code>grep -H</code></h3><p>在匹配行的前面同时输出文件名</p>
<p><code>grep -H &#39;watch&#39; test.txt</code></p>
<blockquote>
<p>test.txt:”Night gathers, and now my watch begins. It shall not end<br>test.txt:watcher on the walls. I am the shield that guards the realms of</p>
</blockquote>
<h2 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h2><h3 id="grep-–color"><a href="#grep-–color" class="headerlink" title="grep –color"></a>grep –color</h3><p><code>grep -H --color &#39;watch&#39; test.txt</code></p>
<img src="/2016/12/07/grep/color.jpg" alt="color.jpg" title="">
<h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><p>在用户目录下的<code>.bashrc</code>中设置环境变量，也可以达到高亮的目的</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> GREP_OPTIONS=<span class="string">'--color=auto'</span></div></pre></td></tr></table></figure>
<p>添加之后记得<code>source ~/.bashrc</code>, 然后才能生效</p>
<h2 id="egrep"><a href="#egrep" class="headerlink" title="egrep"></a>egrep</h2><blockquote>
<p>egrep 命令与 grep 命令带 -E 标志是一样的，除了错误消息和使用情况消息不同以及 -s 标志的功能不同之外。</p>
</blockquote>
<h3 id="多关键字"><a href="#多关键字" class="headerlink" title="多关键字"></a>多关键字</h3><p>使用正则就可以同时搜索多个关键字</p>
<p><code>grep -E &#39;keyword1 | keyword2&#39; filename</code></p>
<p><code>grep --color -E  &#39;am | to&#39; test.txt</code></p>
<img src="/2016/12/07/grep/egrep.jpg" alt="egrep.jpg" title="">
<h2 id="zgrep"><a href="#zgrep" class="headerlink" title="zgrep"></a>zgrep</h2><p>zgrep 可以在压缩文件中搜索内容</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="https://www.cyberciti.biz/faq/howto-use-grep-command-in-linux-unix/" rel="external nofollow noopener noreferrer" target="_blank">HowTo: Use grep Command In Linux / UNIX – Examples</a></p>
</li>
<li><p><a href="https://www.ibm.com/support/knowledgecenter/zh/ssw_aix_61/com.ibm.aix.cmds2/egrep.htm" rel="external nofollow noopener noreferrer" target="_blank">egrep 命令 - IBM</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> shell </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[HttpMessageConverter 原理和源码]]></title>
      <url>http://qsli.github.io/2016/11/29/HttpMessageConverter/</url>
      <content type="html"><![CDATA[<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><img src="/2016/11/29/HttpMessageConverter/arch.jpg" alt="arch.jpg" title="">
<h2 id="HttpMessageConverter接口"><a href="#HttpMessageConverter接口" class="headerlink" title="HttpMessageConverter接口"></a>HttpMessageConverter接口</h2><img src="/2016/11/29/HttpMessageConverter/http-message-converter.jpg" alt=") >`HttpMessageConverter` used to marshal objects into the HTTP request body and to unmarshal any response back into an object. 提供将Java中的对象和http请求、响应相互转换的功能 ### spring 中的配置 xml配置示例： undefined java配置示例： undefined ### 接口描述 undefined ### spring 提供的实现类 {% asset_img inherit.jpg" title=") >`HttpMessageConverter` used to marshal objects into the HTTP request body and to unmarshal any response back into an object. 提供将Java中的对象和http请求、响应相互转换的功能 ### spring 中的配置 xml配置示例： undefined java配置示例： undefined ### 接口描述 undefined ### spring 提供的实现类 {% asset_img inherit.jpg">
<table>
<thead>
<tr>
<th>名称</th>
</tr>
</thead>
<tbody>
<tr>
<td>ByteArrayHttpMessageConverter</td>
</tr>
<tr>
<td>FormHttpMessageConverter</td>
</tr>
<tr>
<td>XmlAwareFormHttpMessageConverter</td>
</tr>
<tr>
<td>ResourceHttpMessageConverter</td>
</tr>
<tr>
<td>SourceHttpMessageConverter</td>
</tr>
<tr>
<td>StringHttpMessageConverter</td>
</tr>
<tr>
<td>SimpleXmlHttpMessageConverter</td>
</tr>
<tr>
<td>MappingJackson2HttpMessageConverter</td>
</tr>
<tr>
<td>GsonHttpMessageConverter</td>
</tr>
<tr>
<td>SyndFeedHttpMessageConverter</td>
</tr>
<tr>
<td>RssChannelHttpMessageConverter</td>
</tr>
<tr>
<td>AtomFeedHttpMessageConverter</td>
</tr>
</tbody>
</table>
<p>具体功能见 <a href="http://docs.spring.io/autorepo/docs/spring-android/1.0.x/reference/html/rest-template.html" rel="external nofollow noopener noreferrer" target="_blank">RestTemplate Module</a></p>
<p>想研究源码的可以从最简单的 <code>StringHttpMessageConverter</code>看起</p>
<h2 id="Spring调用过程"><a href="#Spring调用过程" class="headerlink" title="Spring调用过程"></a>Spring调用过程</h2><p>在DispatcherServlet初始化的过程会调用一个叫做<code>initHandlerAdapters</code>的方法，<br>该方法内部会扫描容器中所有的类，以及他们的父类，找到所有实现了<code>HandlerAdapter</code>接口的类，<br>并将他们注册到<code>DispatcherServlet</code>的<code>HandlerAdapters</code>中。</p>
<p>如果没有扫描到的HandlerAdapter，这个方法会加载一些默认的HandlerAdapter。</p>
<blockquote>
<p>The default implementation uses the “DispatcherServlet.properties” file (in the same<br>  package as the DispatcherServlet class) to determine the class names. </p>
</blockquote>
  <img src="/2016/11/29/HttpMessageConverter/DispatcherServlet-properties.jpg" alt="DispatcherServlet-properties.jpg" title="">
<p>Spring 4.3.2 中有一个实现了<code>HandlerAdapter</code>接口的类会被扫描到，这个类叫做<code>RequestMappingHandlerAdapter</code></p>
<h3 id="RequestMappingHandlerAdapter"><a href="#RequestMappingHandlerAdapter" class="headerlink" title="RequestMappingHandlerAdapter"></a>RequestMappingHandlerAdapter</h3><p>这个类在构造的时候就加载了许多messageConverter</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">RequestMappingHandlerAdapter</span><span class="params">()</span> </span>&#123;</div><div class="line">    StringHttpMessageConverter stringHttpMessageConverter = <span class="keyword">new</span> StringHttpMessageConverter();</div><div class="line">    stringHttpMessageConverter.setWriteAcceptCharset(<span class="keyword">false</span>);  <span class="comment">// see SPR-7316</span></div><div class="line"></div><div class="line">    <span class="keyword">this</span>.messageConverters = <span class="keyword">new</span> ArrayList&lt;HttpMessageConverter&lt;?&gt;&gt;(<span class="number">4</span>);</div><div class="line">    <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> ByteArrayHttpMessageConverter());</div><div class="line">    <span class="keyword">this</span>.messageConverters.add(stringHttpMessageConverter);</div><div class="line">    <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> SourceHttpMessageConverter&lt;Source&gt;());</div><div class="line">    <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> AllEncompassingFormHttpMessageConverter());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中<code>AllEncompassingFormHttpMessageConverter</code>继承自<code>FormHttpMessageConverter</code>， 它有一个变量叫做<br><code>partConverters</code>，存储了一系列的<code>HttpMessageConverter</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> List&lt;HttpMessageConverter&lt;?&gt;&gt; partConverters = <span class="keyword">new</span> ArrayList&lt;HttpMessageConverter&lt;?&gt;&gt;();</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">FormHttpMessageConverter</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.supportedMediaTypes.add(MediaType.APPLICATION_FORM_URLENCODED);</div><div class="line">    <span class="keyword">this</span>.supportedMediaTypes.add(MediaType.MULTIPART_FORM_DATA);</div><div class="line">    <span class="keyword">this</span>.partConverters.add(<span class="keyword">new</span> ByteArrayHttpMessageConverter());</div><div class="line">    StringHttpMessageConverter stringHttpMessageConverter = <span class="keyword">new</span> StringHttpMessageConverter();</div><div class="line">    stringHttpMessageConverter.setWriteAcceptCharset(<span class="keyword">false</span>);</div><div class="line">    <span class="keyword">this</span>.partConverters.add(stringHttpMessageConverter);</div><div class="line">    <span class="keyword">this</span>.partConverters.add(<span class="keyword">new</span> ResourceHttpMessageConverter());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在<code>AllEncompassingFormHttpMessageConverter</code>中又根据classPath中是否包含jackson、Gson等jar包来动态的<br>注册了一些<code>HttpMessageConverter</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AllEncompassingFormHttpMessageConverter</span> <span class="keyword">extends</span> <span class="title">FormHttpMessageConverter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> jaxb2Present =</div><div class="line">            ClassUtils.isPresent(<span class="string">"javax.xml.bind.Binder"</span>, AllEncompassingFormHttpMessageConverter.class.getClassLoader());</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> jackson2Present =</div><div class="line">            ClassUtils.isPresent(<span class="string">"com.fasterxml.jackson.databind.ObjectMapper"</span>, AllEncompassingFormHttpMessageConverter.class.getClassLoader()) &amp;&amp;</div><div class="line">                    ClassUtils.isPresent(<span class="string">"com.fasterxml.jackson.core.JsonGenerator"</span>, AllEncompassingFormHttpMessageConverter.class.getClassLoader());</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> jackson2XmlPresent =</div><div class="line">            ClassUtils.isPresent(<span class="string">"com.fasterxml.jackson.dataformat.xml.XmlMapper"</span>, AllEncompassingFormHttpMessageConverter.class.getClassLoader());</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> gsonPresent =</div><div class="line">            ClassUtils.isPresent(<span class="string">"com.google.gson.Gson"</span>, AllEncompassingFormHttpMessageConverter.class.getClassLoader());</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AllEncompassingFormHttpMessageConverter</span><span class="params">()</span> </span>&#123;</div><div class="line">        addPartConverter(<span class="keyword">new</span> SourceHttpMessageConverter&lt;Source&gt;());</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (jaxb2Present &amp;&amp; !jackson2Present) &#123;</div><div class="line">            addPartConverter(<span class="keyword">new</span> Jaxb2RootElementHttpMessageConverter());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (jackson2Present) &#123;</div><div class="line">            addPartConverter(<span class="keyword">new</span> MappingJackson2HttpMessageConverter());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (gsonPresent) &#123;</div><div class="line">            addPartConverter(<span class="keyword">new</span> GsonHttpMessageConverter());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (jackson2XmlPresent) &#123;</div><div class="line">            addPartConverter(<span class="keyword">new</span> MappingJackson2XmlHttpMessageConverter());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至于这些转换器是怎么使用的，要看<code>RequestMappingHandlerAdapter</code>中的<code>getDefaultArgumentResolver</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Return the list of argument resolvers to use including built-in resolvers</div><div class="line">     * and custom resolvers provided via &#123;<span class="doctag">@link</span> #setCustomArgumentResolvers&#125;.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> List&lt;HandlerMethodArgumentResolver&gt; <span class="title">getDefaultArgumentResolvers</span><span class="params">()</span> </span>&#123;</div><div class="line">        List&lt;HandlerMethodArgumentResolver&gt; resolvers = <span class="keyword">new</span> ArrayList&lt;HandlerMethodArgumentResolver&gt;();</div><div class="line"></div><div class="line">        <span class="comment">// Annotation-based argument resolution</span></div><div class="line">        resolvers.add(<span class="keyword">new</span> RequestParamMethodArgumentResolver(getBeanFactory(), <span class="keyword">false</span>));</div><div class="line">        resolvers.add(<span class="keyword">new</span> RequestParamMapMethodArgumentResolver());</div><div class="line">        resolvers.add(<span class="keyword">new</span> PathVariableMethodArgumentResolver());</div><div class="line">        resolvers.add(<span class="keyword">new</span> PathVariableMapMethodArgumentResolver());</div><div class="line">        resolvers.add(<span class="keyword">new</span> MatrixVariableMethodArgumentResolver());</div><div class="line">        resolvers.add(<span class="keyword">new</span> MatrixVariableMapMethodArgumentResolver());</div><div class="line">        resolvers.add(<span class="keyword">new</span> ServletModelAttributeMethodProcessor(<span class="keyword">false</span>));</div><div class="line">        resolvers.add(<span class="keyword">new</span> RequestResponseBodyMethodProcessor(getMessageConverters(), <span class="keyword">this</span>.requestResponseBodyAdvice));</div><div class="line">        resolvers.add(<span class="keyword">new</span> RequestPartMethodArgumentResolver(getMessageConverters(), <span class="keyword">this</span>.requestResponseBodyAdvice));</div><div class="line">        resolvers.add(<span class="keyword">new</span> RequestHeaderMethodArgumentResolver(getBeanFactory()));</div><div class="line">        resolvers.add(<span class="keyword">new</span> RequestHeaderMapMethodArgumentResolver());</div><div class="line">        resolvers.add(<span class="keyword">new</span> ServletCookieValueMethodArgumentResolver(getBeanFactory()));</div><div class="line">        resolvers.add(<span class="keyword">new</span> ExpressionValueMethodArgumentResolver(getBeanFactory()));</div><div class="line"></div><div class="line">        <span class="comment">// Type-based argument resolution</span></div><div class="line">        resolvers.add(<span class="keyword">new</span> ServletRequestMethodArgumentResolver());</div><div class="line">        resolvers.add(<span class="keyword">new</span> ServletResponseMethodArgumentResolver());</div><div class="line">        resolvers.add(<span class="keyword">new</span> HttpEntityMethodProcessor(getMessageConverters(), <span class="keyword">this</span>.requestResponseBodyAdvice));</div><div class="line">        resolvers.add(<span class="keyword">new</span> RedirectAttributesMethodArgumentResolver());</div><div class="line">        resolvers.add(<span class="keyword">new</span> ModelMethodProcessor());</div><div class="line">        resolvers.add(<span class="keyword">new</span> MapMethodProcessor());</div><div class="line">        resolvers.add(<span class="keyword">new</span> ErrorsMethodArgumentResolver());</div><div class="line">        resolvers.add(<span class="keyword">new</span> SessionStatusMethodArgumentResolver());</div><div class="line">        resolvers.add(<span class="keyword">new</span> UriComponentsBuilderMethodArgumentResolver());</div><div class="line"></div><div class="line">        <span class="comment">// Custom arguments</span></div><div class="line">        <span class="keyword">if</span> (getCustomArgumentResolvers() != <span class="keyword">null</span>) &#123;</div><div class="line">            resolvers.addAll(getCustomArgumentResolvers());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Catch-all</span></div><div class="line">        resolvers.add(<span class="keyword">new</span> RequestParamMethodArgumentResolver(getBeanFactory(), <span class="keyword">true</span>));</div><div class="line">        resolvers.add(<span class="keyword">new</span> ServletModelAttributeMethodProcessor(<span class="keyword">true</span>));</div><div class="line"></div><div class="line">        <span class="keyword">return</span> resolvers;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>可以看到所有的Converter最终作为一个构造参数传入了<code>RequestResponseBodyMethodProcessor</code>和<code>RequestPartMethodArgumentResolver</code>。 前者其实是负责处理<code>@RequestBody</code>和<code>@ResponseBody</code>的,<br>后者则是处理<code>@RequestPart</code>这个注解的。拿<code>RequestResponseBodyMethodProcessor</code>为例来看。</p>
<p>这个类的父类实现了<code>HandlerMethodReturnValueHandler</code>接口，这个接口的作用对照上面的系统整体架构图<br>可知，是处理Controller返回的结果值的，看其<code>handleReturnValue</code>方法 。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleReturnValue</span><span class="params">(Object returnValue, MethodParameter returnType,</span></span></div><div class="line">        ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</div><div class="line">        <span class="keyword">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException &#123;</div><div class="line">    mavContainer.setRequestHandled(<span class="keyword">true</span>);</div><div class="line">    <span class="comment">// Try even with null return value. ResponseBodyAdvice could get involved.</span></div><div class="line">    writeWithMessageConverters(returnValue, returnType, webRequest);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先标记这个请求已经处理过了，然后调用了一个内部方法，从名字就可以看出来，是使用MessageConverter进行<br>转换。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Writes the given return value to the given web request. Delegates to</div><div class="line"> * &#123;<span class="doctag">@link</span> #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)&#125;</div><div class="line"> */</div><div class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">writeWithMessageConverters</span><span class="params">(T returnValue, MethodParameter returnType, NativeWebRequest webRequest)</span></span></div><div class="line">        <span class="keyword">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException &#123;</div><div class="line"></div><div class="line">    ServletServerHttpRequest inputMessage = createInputMessage(webRequest);</div><div class="line">    ServletServerHttpResponse outputMessage = createOutputMessage(webRequest);</div><div class="line">    writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>真正的逻辑还是内部的`writeWithMessageConveters()</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Writes the given return type to the given output message.</div><div class="line">     * <span class="doctag">@param</span> returnValue the value to write to the output message</div><div class="line">     * <span class="doctag">@param</span> returnType the type of the value</div><div class="line">     * <span class="doctag">@param</span> inputMessage the input messages. Used to inspect the &#123;<span class="doctag">@code</span> Accept&#125; header.</div><div class="line">     * <span class="doctag">@param</span> outputMessage the output message to write to</div><div class="line">     * <span class="doctag">@throws</span> IOException thrown in case of I/O errors</div><div class="line">     * <span class="doctag">@throws</span> HttpMediaTypeNotAcceptableException thrown when the conditions indicated by &#123;<span class="doctag">@code</span> Accept&#125; header on</div><div class="line">     * the request cannot be met by the message converters</div><div class="line">     */</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="keyword">protected</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">writeWithMessageConverters</span><span class="params">(T returnValue, MethodParameter returnType,</span></span></div><div class="line">            ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)</div><div class="line">            <span class="keyword">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException &#123;</div><div class="line"></div><div class="line">        Class&lt;?&gt; returnValueClass = getReturnValueType(returnValue, returnType);</div><div class="line">        Type returnValueType = getGenericType(returnType);</div><div class="line">        HttpServletRequest servletRequest = inputMessage.getServletRequest();</div><div class="line">        <span class="comment">//从请求头获取可能的返回类型（默认会加载两种策略，比如从路径名的后缀上推断）</span></div><div class="line">        List&lt;MediaType&gt; requestedMediaTypes = getAcceptableMediaTypes(servletRequest);</div><div class="line">        <span class="comment">//根据请求和返回的值得类型，推断可能的返回值类型</span></div><div class="line">        List&lt;MediaType&gt; producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass, returnValueType);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (returnValue != <span class="keyword">null</span> &amp;&amp; producibleMediaTypes.isEmpty()) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No converter found for return value of type: "</span> + returnValueClass);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//筛选</span></div><div class="line">        Set&lt;MediaType&gt; compatibleMediaTypes = <span class="keyword">new</span> LinkedHashSet&lt;MediaType&gt;();</div><div class="line">        <span class="keyword">for</span> (MediaType requestedType : requestedMediaTypes) &#123;</div><div class="line">            <span class="keyword">for</span> (MediaType producibleType : producibleMediaTypes) &#123;</div><div class="line">                <span class="keyword">if</span> (requestedType.isCompatibleWith(producibleType)) &#123;</div><div class="line">                    compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (compatibleMediaTypes.isEmpty()) &#123;</div><div class="line">            <span class="keyword">if</span> (returnValue != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> HttpMediaTypeNotAcceptableException(producibleMediaTypes);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        List&lt;MediaType&gt; mediaTypes = <span class="keyword">new</span> ArrayList&lt;MediaType&gt;(compatibleMediaTypes);</div><div class="line">        MediaType.sortBySpecificityAndQuality(mediaTypes);</div><div class="line"></div><div class="line">        MediaType selectedMediaType = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">for</span> (MediaType mediaType : mediaTypes) &#123;</div><div class="line">            <span class="keyword">if</span> (mediaType.isConcrete()) &#123;<span class="comment">//具体的，没有通配符的</span></div><div class="line">                selectedMediaType = mediaType;</div><div class="line">                <span class="keyword">break</span>;<span class="comment">// 找到一个就跳出循环</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) &#123;</div><div class="line">                selectedMediaType = MediaType.APPLICATION_OCTET_STREAM;</div><div class="line">                <span class="keyword">break</span>;<span class="comment">// 找到一个就跳出循环</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">            <span class="comment">//找到能处理这种类型的HttpMessageConverter</span></div><div class="line">        <span class="keyword">if</span> (selectedMediaType != <span class="keyword">null</span>) &#123;</div><div class="line">            selectedMediaType = selectedMediaType.removeQualityValue();</div><div class="line">            <span class="keyword">for</span> (HttpMessageConverter&lt;?&gt; messageConverter : <span class="keyword">this</span>.messageConverters) &#123;</div><div class="line">                <span class="keyword">if</span> (messageConverter <span class="keyword">instanceof</span> GenericHttpMessageConverter) &#123;</div><div class="line">                    <span class="keyword">if</span> (((GenericHttpMessageConverter&lt;T&gt;) messageConverter).canWrite(returnValueType,</div><div class="line">                            returnValueClass, selectedMediaType)) &#123;</div><div class="line">                        returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,</div><div class="line">                                (Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt;) messageConverter.getClass(),</div><div class="line">                                inputMessage, outputMessage);</div><div class="line">                        <span class="keyword">if</span> (returnValue != <span class="keyword">null</span>) &#123;</div><div class="line">                            addContentDispositionHeader(inputMessage, outputMessage);</div><div class="line">                            ((GenericHttpMessageConverter&lt;T&gt;) messageConverter).write(returnValue,</div><div class="line">                                    returnValueType, selectedMediaType, outputMessage);</div><div class="line">                            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">                                logger.debug(<span class="string">"Written ["</span> + returnValue + <span class="string">"] as \""</span> +</div><div class="line">                                        selectedMediaType + <span class="string">"\" using ["</span> + messageConverter + <span class="string">"]"</span>);</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">return</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (messageConverter.canWrite(returnValueClass, selectedMediaType)) &#123;</div><div class="line">                    returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,</div><div class="line">                            (Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt;) messageConverter.getClass(),</div><div class="line">                            inputMessage, outputMessage);</div><div class="line">                    <span class="keyword">if</span> (returnValue != <span class="keyword">null</span>) &#123;</div><div class="line">                        addContentDispositionHeader(inputMessage, outputMessage);</div><div class="line">                        ((HttpMessageConverter&lt;T&gt;) messageConverter).write(returnValue,</div><div class="line">                                selectedMediaType, outputMessage);</div><div class="line">                        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">                            logger.debug(<span class="string">"Written ["</span> + returnValue + <span class="string">"] as \""</span> +</div><div class="line">                                    selectedMediaType + <span class="string">"\" using ["</span> + messageConverter + <span class="string">"]"</span>);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (returnValue != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> HttpMediaTypeNotAcceptableException(<span class="keyword">this</span>.allSupportedMediaTypes);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>至此，HttpMessageConverter如何工作的就真相大白了。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="http://www.cnblogs.com/fangjian0423/p/springMVC-xml-json-convert.html" rel="external nofollow noopener noreferrer" target="_blank">SpringMVC关于json、xml自动转换的原理研究(附带源码分析)</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> messageConverter </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring-resource源码剖析]]></title>
      <url>http://qsli.github.io/2016/11/20/spring-resource/</url>
      <content type="html"><![CDATA[<h1 id="Spring-Resource"><a href="#Spring-Resource" class="headerlink" title="Spring Resource"></a>Spring Resource</h1><h2 id="Why-not-Java-URL类"><a href="#Why-not-Java-URL类" class="headerlink" title="Why not Java URL类"></a>Why not Java URL类</h2><p>原因： 对底层资源的支持不足。</p>
<ol>
<li><p>there is no standardized URL implementation that may be used to access a resource that needs to be obtained from the classpath,or relative to a ServletContext.</p>
</li>
<li><p>不自定义URL handler的原因：</p>
<p>a. 过于复杂<br>b. lack some desirable functionality（如对URL所指资源是否存在的判断）</p>
</li>
</ol>
<h2 id="Resource-接口"><a href="#Resource-接口" class="headerlink" title="Resource 接口"></a>Resource 接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InputStreamSource</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Return an &#123;<span class="doctag">@link</span> InputStream&#125;.</div><div class="line">	 * &lt;p&gt;It is expected that each call creates a &lt;i&gt;fresh&lt;/i&gt; stream.</div><div class="line">	 * &lt;p&gt;This requirement is particularly important when you consider an API such</div><div class="line">	 * as JavaMail, which needs to be able to read the stream multiple times when</div><div class="line">	 * creating mail attachments. For such a use case, it is &lt;i&gt;required&lt;/i&gt;</div><div class="line">	 * that each &#123;<span class="doctag">@code</span> getInputStream()&#125; call returns a fresh stream.</div><div class="line">	 * <span class="doctag">@return</span> the input stream for the underlying resource (must not be &#123;<span class="doctag">@code</span> null&#125;)</div><div class="line">	 * <span class="doctag">@throws</span> IOException if the stream could not be opened</div><div class="line">	 * <span class="doctag">@see</span> org.springframework.mail.javamail.MimeMessageHelper#addAttachment(String, InputStreamSource)</div><div class="line">	 */</div><div class="line">	<span class="function">InputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Resource</span> <span class="keyword">extends</span> <span class="title">InputStreamSource</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Return whether this resource actually exists in physical form.</div><div class="line">	 * &lt;p&gt;This method performs a definitive existence check, whereas the</div><div class="line">	 * existence of a &#123;<span class="doctag">@code</span> Resource&#125; handle only guarantees a</div><div class="line">	 * valid descriptor handle.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">exists</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Return whether the contents of this resource can be read,</div><div class="line">	 * e.g. via &#123;<span class="doctag">@link</span> #getInputStream()&#125; or &#123;<span class="doctag">@link</span> #getFile()&#125;.</div><div class="line">	 * &lt;p&gt;Will be &#123;<span class="doctag">@code</span> true&#125; for typical resource descriptors;</div><div class="line">	 * note that actual content reading may still fail when attempted.</div><div class="line">	 * However, a value of &#123;<span class="doctag">@code</span> false&#125; is a definitive indication</div><div class="line">	 * that the resource content cannot be read.</div><div class="line">	 * <span class="doctag">@see</span> #getInputStream()</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">isReadable</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Return whether this resource represents a handle with an open</div><div class="line">	 * stream. If true, the InputStream cannot be read multiple times,</div><div class="line">	 * and must be read and closed to avoid resource leaks.</div><div class="line">	 * &lt;p&gt;Will be &#123;<span class="doctag">@code</span> false&#125; for typical resource descriptors.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">isOpen</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Return a URL handle for this resource.</div><div class="line">	 * <span class="doctag">@throws</span> IOException if the resource cannot be resolved as URL,</div><div class="line">	 * i.e. if the resource is not available as descriptor</div><div class="line">	 */</div><div class="line">	<span class="function">URL <span class="title">getURL</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Return a URI handle for this resource.</div><div class="line">	 * <span class="doctag">@throws</span> IOException if the resource cannot be resolved as URI,</div><div class="line">	 * i.e. if the resource is not available as descriptor</div><div class="line">	 */</div><div class="line">	<span class="function">URI <span class="title">getURI</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Return a File handle for this resource.</div><div class="line">	 * <span class="doctag">@throws</span> IOException if the resource cannot be resolved as absolute</div><div class="line">	 * file path, i.e. if the resource is not available in a file system</div><div class="line">	 */</div><div class="line">	<span class="function">File <span class="title">getFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Determine the content length for this resource.</div><div class="line">	 * <span class="doctag">@throws</span> IOException if the resource cannot be resolved</div><div class="line">	 * (in the file system or as some other known physical resource type)</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">long</span> <span class="title">contentLength</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Determine the last-modified timestamp for this resource.</div><div class="line">	 * <span class="doctag">@throws</span> IOException if the resource cannot be resolved</div><div class="line">	 * (in the file system or as some other known physical resource type)</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">long</span> <span class="title">lastModified</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Create a resource relative to this resource.</div><div class="line">	 * <span class="doctag">@param</span> relativePath the relative path (relative to this resource)</div><div class="line">	 * <span class="doctag">@return</span> the resource handle for the relative resource</div><div class="line">	 * <span class="doctag">@throws</span> IOException if the relative resource cannot be determined</div><div class="line">	 */</div><div class="line">	<span class="function">Resource <span class="title">createRelative</span><span class="params">(String relativePath)</span> <span class="keyword">throws</span> IOException</span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Determine a filename for this resource, i.e. typically the last</div><div class="line">	 * part of the path: for example, "myfile.txt".</div><div class="line">	 * &lt;p&gt;Returns &#123;<span class="doctag">@code</span> null&#125; if this type of resource does not</div><div class="line">	 * have a filename.</div><div class="line">	 */</div><div class="line">	<span class="function">String <span class="title">getFilename</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Return a description for this resource,</div><div class="line">	 * to be used for error output when working with the resource.</div><div class="line">	 * &lt;p&gt;Implementations are also encouraged to return this value</div><div class="line">	 * from their &#123;<span class="doctag">@code</span> toString&#125; method.</div><div class="line">	 * <span class="doctag">@see</span> Object#toString()</div><div class="line">	 */</div><div class="line">	<span class="function">String <span class="title">getDescription</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="继承体系"><a href="#继承体系" class="headerlink" title="继承体系"></a>继承体系</h3><img src="/2016/11/20/spring-resource/resource.jpg" alt="resource.jpg" title="">
<h2 id="ResourceLoader"><a href="#ResourceLoader" class="headerlink" title="ResourceLoader"></a>ResourceLoader</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResourceLoader</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/** Pseudo URL prefix for loading from the class path: "classpath:" */</span></div><div class="line">	String CLASSPATH_URL_PREFIX = ResourceUtils.CLASSPATH_URL_PREFIX;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Return a Resource handle for the specified resource.</div><div class="line">	 * The handle should always be a reusable resource descriptor,</div><div class="line">	 * allowing for multiple &#123;<span class="doctag">@link</span> Resource#getInputStream()&#125; calls.</div><div class="line">	 * &lt;p&gt;&lt;ul&gt;</div><div class="line">	 * &lt;li&gt;Must support fully qualified URLs, e.g. "file:C:/test.dat".</div><div class="line">	 * &lt;li&gt;Must support classpath pseudo-URLs, e.g. "classpath:test.dat".</div><div class="line">	 * &lt;li&gt;Should support relative file paths, e.g. "WEB-INF/test.dat".</div><div class="line">	 * (This will be implementation-specific, typically provided by an</div><div class="line">	 * ApplicationContext implementation.)</div><div class="line">	 * &lt;/ul&gt;</div><div class="line">	 * &lt;p&gt;Note that a Resource handle does not imply an existing resource;</div><div class="line">	 * you need to invoke &#123;<span class="doctag">@link</span> Resource#exists&#125; to check for existence.</div><div class="line">	 * <span class="doctag">@param</span> location the resource location</div><div class="line">	 * <span class="doctag">@return</span> a corresponding Resource handle</div><div class="line">	 * <span class="doctag">@see</span> #CLASSPATH_URL_PREFIX</div><div class="line">	 * <span class="doctag">@see</span> org.springframework.core.io.Resource#exists</div><div class="line">	 * <span class="doctag">@see</span> org.springframework.core.io.Resource#getInputStream</div><div class="line">	 */</div><div class="line">	<span class="function">Resource <span class="title">getResource</span><span class="params">(String location)</span></span>;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Expose the ClassLoader used by this ResourceLoader.</div><div class="line">	 * &lt;p&gt;Clients which need to access the ClassLoader directly can do so</div><div class="line">	 * in a uniform manner with the ResourceLoader, rather than relying</div><div class="line">	 * on the thread context ClassLoader.</div><div class="line">	 * <span class="doctag">@return</span> the ClassLoader (only &#123;<span class="doctag">@code</span> null&#125; if even the system</div><div class="line">	 * ClassLoader isn't accessible)</div><div class="line">	 * <span class="doctag">@see</span> org.springframework.util.ClassUtils#getDefaultClassLoader()</div><div class="line">	 */</div><div class="line">	<span class="function">ClassLoader <span class="title">getClassLoader</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ResourceLoader　负责加载Resource, 所有的application context都实现了这个接口。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Resource template = ctx.getResource(<span class="string">"some/resource/path/myTemplate.txt"</span>);</div></pre></td></tr></table></figure>
<p>如果上述的ctx的类型是 ClassPathXmlApplicationContext，那么返回的Resource的具体类型就是</p>
<p>ClassPathResource； 如果ctx的类型是FileSystemXmlApplicationContext, 返回的类型就变成了</p>
<p>FileSystemResource。</p>
<h3 id="指定返回的Resource类型"><a href="#指定返回的Resource类型" class="headerlink" title="指定返回的Resource类型"></a>指定返回的Resource类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Resource template = ctx.getResource(<span class="string">"classpath:some/resource/path/myTemplate.txt"</span>);</div></pre></td></tr></table></figure>
<p>通过显式的指定classpath前缀，返回的Resource的实际类型就是 ClassPathResource</p>
<p>对应的关系见表格：</p>
<table>
<thead>
<tr>
<th>Prefix</th>
<th>Example</th>
<th>Explanation</th>
</tr>
</thead>
<tbody>
<tr>
<td>classpath:</td>
<td>classpath:com/myapp/config.xml</td>
<td>Loaded from the classpath</td>
</tr>
<tr>
<td>file:</td>
<td>file:///data/config.xml</td>
<td>Loaded as a URL, from the system</td>
</tr>
<tr>
<td>http:</td>
<td><a href="http://myserver/logo.png" rel="external nofollow noopener noreferrer" target="_blank">http://myserver/logo.png</a></td>
<td>Loaded as a URL</td>
</tr>
<tr>
<td>（none）</td>
<td>/data/config.xml</td>
<td>Depends on the underlying ApplicationContext</td>
</tr>
</tbody>
</table>
<h4 id="classpath"><a href="#classpath" class="headerlink" title="classpath*"></a>classpath*</h4><p>classpath*:conf/appContext.xml</p>
<p>这个特殊的前缀会使spring在所有的ClassPath中查找和指定的名字相同的资源，他们会合并形成最终的</p>
<p>上下文。</p>
<blockquote>
<p>This special prefix specifies that all classpath resources that match the given name must be obtained<br>(internally, this essentially happens via a ClassLoader.getResources(…) call), and then merged<br>to form the final application context definition.</p>
</blockquote>
<h3 id="ResourceLoaderAware"><a href="#ResourceLoaderAware" class="headerlink" title="ResourceLoaderAware"></a>ResourceLoaderAware</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResourceLoaderAware</span> <span class="keyword">extends</span> <span class="title">Aware</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Set the ResourceLoader that this object runs in.</div><div class="line">	 * &lt;p&gt;This might be a ResourcePatternResolver, which can be checked</div><div class="line">	 * through &#123;<span class="doctag">@code</span> instanceof ResourcePatternResolver&#125;. See also the</div><div class="line">	 * &#123;<span class="doctag">@code</span> ResourcePatternUtils.getResourcePatternResolver&#125; method.</div><div class="line">	 * &lt;p&gt;Invoked after population of normal bean properties but before an init callback</div><div class="line">	 * like InitializingBean's &#123;<span class="doctag">@code</span> afterPropertiesSet&#125; or a custom init-method.</div><div class="line">	 * Invoked before ApplicationContextAware's &#123;<span class="doctag">@code</span> setApplicationContext&#125;.</div><div class="line">	 * <span class="doctag">@param</span> resourceLoader ResourceLoader object to be used by this object</div><div class="line">	 * <span class="doctag">@see</span> org.springframework.core.io.support.ResourcePatternResolver</div><div class="line">	 * <span class="doctag">@see</span> org.springframework.core.io.support.ResourcePatternUtils#getResourcePatternResolver</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setResourceLoader</span><span class="params">(ResourceLoader resourceLoader)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现这个接口的类，可以获得所在容器的ResourceLoader实例，一般来说就是相应的Application Context。也可以当做</p>
<p>ApplicationContextAware的替代。</p>
<blockquote>
<p>  Interface to be implemented by any object that wishes to be notified of<br>  the <b>ResourceLoader</b> (typically the ApplicationContext) that it runs in.<br>  This is an alternative to a full ApplicationContext dependency via the<br>  ApplicationContextAware interface.</p>
</blockquote>
<p>除了实现上述接口，还可以使用基于类型的注入，将ResourceLoader注入到需要的地方。</p>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> resource </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jackson对guava新增集合的支持]]></title>
      <url>http://qsli.github.io/2016/11/16/jackson-guava/</url>
      <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Guava中新增了不少好用的集合比如<code>MultiMap</code>、<code>MultiSet</code>、<code>Table</code>等，当使用jackson进行序列化的时候</p>
<p>这些集合并不能正确的序列化，出现下面的情况：</p>
<p>正常序列化应该为：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"fields"</span>:&#123;</div><div class="line">    <span class="attr">"Field1"</span>:[</div><div class="line">      &#123;</div><div class="line">        <span class="attr">"index"</span>:<span class="number">0</span>,</div><div class="line">        <span class="attr">"header"</span>:<span class="string">"Field1"</span>,</div><div class="line">        <span class="attr">"fieldType"</span>:<span class="string">"fieldtype"</span>,</div><div class="line">        <span class="attr">"description"</span>:<span class="literal">null</span>,</div><div class="line">        <span class="attr">"cleanHeader"</span>:<span class="literal">null</span></div><div class="line">      &#125;</div><div class="line">    ],</div><div class="line">    <span class="attr">"Field2"</span>:[</div><div class="line">      &#123;</div><div class="line">        <span class="attr">"index"</span>:<span class="number">1</span>,</div><div class="line">        <span class="attr">"header"</span>:<span class="string">"Field2"</span>,</div><div class="line">        <span class="attr">"fieldType"</span>:<span class="string">"fieldtype"</span>,</div><div class="line">        <span class="attr">"description"</span>:<span class="literal">null</span>,</div><div class="line">        <span class="attr">"cleanHeader"</span>:<span class="literal">null</span></div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用默认的spring出现的是：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"fields"</span>:&#123;</div><div class="line">    <span class="attr">"empty"</span>: <span class="literal">false</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>要解决这个问题就要手动向jackson的ObjectMapper中注册一个Module</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Table study = getTable();</div><div class="line"></div><div class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</div><div class="line">mapper.registerModule(<span class="keyword">new</span> GuavaModule());</div><div class="line"></div><div class="line">String tableString = mapper.writeValueAsString(table);</div></pre></td></tr></table></figure>
<p>这个<code>GuavaModule</code>是jackson对Guava集合支持的包，它的maven依赖如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.datatype<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-datatype-guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>也可以使用基于xml配置的方式将这个Module导入<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- JSON parser configuration--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"guavaObjectMapper"</span> <span class="attr">class</span>=<span class="string">"com.fasterxml.jackson.databind.ObjectMapper"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.MethodInvokingFactoryBean"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetObject"</span>&gt;</span><span class="tag">&lt;<span class="name">ref</span> <span class="attr">local</span>=<span class="string">"guavaObjectMapper"</span> /&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetMethod"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>registerModule<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"arguments"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"guavaModule"</span> <span class="attr">class</span>=<span class="string">"com.fasterxml.jackson.datatype.guava.GuavaModule"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"objectMapper"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">ref</span>  <span class="attr">local</span>=<span class="string">"guavaObjectMapper"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="支持的类型"><a href="#支持的类型" class="headerlink" title="支持的类型"></a>支持的类型</h2><img src="/2016/11/16/jackson-guava/jar.png" alt="jar.png" title="">
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://stackoverflow.com/questions/26979120/spring-mvc-configuration-jackson-guava-multimap" rel="external nofollow noopener noreferrer" target="_blank">Spring MVC configuration + Jackson + Guava multimap</a></p>
</li>
<li><p><a href="http://www.leveluplunch.com/java/examples/convert-json-to-guava-multimap-with-jackson/" rel="external nofollow noopener noreferrer" target="_blank">Json to guava multimap</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jackson </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring占位符（property-placeholder），源码阅读]]></title>
      <url>http://qsli.github.io/2016/10/31/property-placeholder/</url>
      <content type="html"><![CDATA[<h2 id="lt-context-property-placeholder-location-39-xxx-39-gt-的解析过程"><a href="#lt-context-property-placeholder-location-39-xxx-39-gt-的解析过程" class="headerlink" title="&lt;context:property-placeholder location=&#39;xxx&#39; /&gt;的解析过程"></a><code>&lt;context:property-placeholder location=&#39;xxx&#39; /&gt;</code>的解析过程</h2><h3 id="schema"><a href="#schema" class="headerlink" title="schema"></a>schema</h3><p>在idea中<code>ctrl</code> + <code>b</code>或者，<code>ctrl</code> + 鼠标左键点击即可打开schema具体的位置</p>
<img src="/2016/10/31/property-placeholder/location.jpg" alt="location.jpg" title="">
<p><code>sping.handlers</code>中内容如下:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">http\://www.springframework.org/schema/context=org.springframework.context.config.ContextNamespaceHandler</div><div class="line">http\://www.springframework.org/schema/jee=org.springframework.ejb.config.JeeNamespaceHandler</div><div class="line">http\://www.springframework.org/schema/lang=org.springframework.scripting.config.LangNamespaceHandler</div><div class="line">http\://www.springframework.org/schema/task=org.springframework.scheduling.config.TaskNamespaceHandler</div><div class="line">http\://www.springframework.org/schema/cache=org.springframework.cache.config.CacheNamespaceHandler</div></pre></td></tr></table></figure>
<p><code>spring.schemas</code>中的内容如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">http\://www.springframework.org/schema/context/spring-context-2.5.xsd=org/springframework/context/config/spring-context-2.5.xsd</div><div class="line">http\://www.springframework.org/schema/context/spring-context-3.0.xsd=org/springframework/context/config/spring-context-3.0.xsd</div><div class="line">http\://www.springframework.org/schema/context/spring-context-3.1.xsd=org/springframework/context/config/spring-context-3.1.xsd</div><div class="line">http\://www.springframework.org/schema/context/spring-context-3.2.xsd=org/springframework/context/config/spring-context-3.2.xsd</div><div class="line">http\://www.springframework.org/schema/context/spring-context-4.0.xsd=org/springframework/context/config/spring-context-4.0.xsd</div><div class="line">http\://www.springframework.org/schema/context/spring-context-4.1.xsd=org/springframework/context/config/spring-context-4.1.xsd</div><div class="line">http\://www.springframework.org/schema/context/spring-context-4.2.xsd=org/springframework/context/config/spring-context-4.2.xsd</div><div class="line">http\://www.springframework.org/schema/context/spring-context.xsd=org/springframework/context/config/spring-context-4.2.xsd</div><div class="line">http\://www.springframework.org/schema/jee/spring-jee-2.0.xsd=org/springframework/ejb/config/spring-jee-2.0.xsd</div><div class="line">http\://www.springframework.org/schema/jee/spring-jee-2.5.xsd=org/springframework/ejb/config/spring-jee-2.5.xsd</div><div class="line">http\://www.springframework.org/schema/jee/spring-jee-3.0.xsd=org/springframework/ejb/config/spring-jee-3.0.xsd</div><div class="line">http\://www.springframework.org/schema/jee/spring-jee-3.1.xsd=org/springframework/ejb/config/spring-jee-3.1.xsd</div><div class="line">http\://www.springframework.org/schema/jee/spring-jee-3.2.xsd=org/springframework/ejb/config/spring-jee-3.2.xsd</div><div class="line">http\://www.springframework.org/schema/jee/spring-jee-4.0.xsd=org/springframework/ejb/config/spring-jee-4.0.xsd</div><div class="line">http\://www.springframework.org/schema/jee/spring-jee-4.1.xsd=org/springframework/ejb/config/spring-jee-4.1.xsd</div><div class="line">http\://www.springframework.org/schema/jee/spring-jee-4.2.xsd=org/springframework/ejb/config/spring-jee-4.2.xsd</div><div class="line">http\://www.springframework.org/schema/jee/spring-jee.xsd=org/springframework/ejb/config/spring-jee-4.2.xsd</div><div class="line">http\://www.springframework.org/schema/lang/spring-lang-2.0.xsd=org/springframework/scripting/config/spring-lang-2.0.xsd</div><div class="line">http\://www.springframework.org/schema/lang/spring-lang-2.5.xsd=org/springframework/scripting/config/spring-lang-2.5.xsd</div><div class="line">http\://www.springframework.org/schema/lang/spring-lang-3.0.xsd=org/springframework/scripting/config/spring-lang-3.0.xsd</div><div class="line">http\://www.springframework.org/schema/lang/spring-lang-3.1.xsd=org/springframework/scripting/config/spring-lang-3.1.xsd</div><div class="line">http\://www.springframework.org/schema/lang/spring-lang-3.2.xsd=org/springframework/scripting/config/spring-lang-3.2.xsd</div><div class="line">http\://www.springframework.org/schema/lang/spring-lang-4.0.xsd=org/springframework/scripting/config/spring-lang-4.0.xsd</div><div class="line">http\://www.springframework.org/schema/lang/spring-lang-4.1.xsd=org/springframework/scripting/config/spring-lang-4.1.xsd</div><div class="line">http\://www.springframework.org/schema/lang/spring-lang-4.2.xsd=org/springframework/scripting/config/spring-lang-4.2.xsd</div><div class="line">http\://www.springframework.org/schema/lang/spring-lang.xsd=org/springframework/scripting/config/spring-lang-4.2.xsd</div><div class="line">http\://www.springframework.org/schema/task/spring-task-3.0.xsd=org/springframework/scheduling/config/spring-task-3.0.xsd</div><div class="line">http\://www.springframework.org/schema/task/spring-task-3.1.xsd=org/springframework/scheduling/config/spring-task-3.1.xsd</div><div class="line">http\://www.springframework.org/schema/task/spring-task-3.2.xsd=org/springframework/scheduling/config/spring-task-3.2.xsd</div><div class="line">http\://www.springframework.org/schema/task/spring-task-4.0.xsd=org/springframework/scheduling/config/spring-task-4.0.xsd</div><div class="line">http\://www.springframework.org/schema/task/spring-task-4.1.xsd=org/springframework/scheduling/config/spring-task-4.1.xsd</div><div class="line">http\://www.springframework.org/schema/task/spring-task-4.2.xsd=org/springframework/scheduling/config/spring-task-4.2.xsd</div><div class="line">http\://www.springframework.org/schema/task/spring-task.xsd=org/springframework/scheduling/config/spring-task-4.2.xsd</div><div class="line">http\://www.springframework.org/schema/cache/spring-cache-3.1.xsd=org/springframework/cache/config/spring-cache-3.1.xsd</div><div class="line">http\://www.springframework.org/schema/cache/spring-cache-3.2.xsd=org/springframework/cache/config/spring-cache-3.2.xsd</div><div class="line">http\://www.springframework.org/schema/cache/spring-cache-4.0.xsd=org/springframework/cache/config/spring-cache-4.0.xsd</div><div class="line">http\://www.springframework.org/schema/cache/spring-cache-4.1.xsd=org/springframework/cache/config/spring-cache-4.1.xsd</div><div class="line">http\://www.springframework.org/schema/cache/spring-cache-4.2.xsd=org/springframework/cache/config/spring-cache-4.2.xsd</div><div class="line">http\://www.springframework.org/schema/cache/spring-cache.xsd=org/springframework/cache/config/spring-cache-4.2.xsd</div></pre></td></tr></table></figure>
<h3 id="NamespaceHandlerSupport"><a href="#NamespaceHandlerSupport" class="headerlink" title="NamespaceHandlerSupport"></a>NamespaceHandlerSupport</h3><p>从<code>handler</code>中我们可以找出<code>context</code>标签的处理类是<code>org.springframework.context.config.ContextNamespaceHandler</code>,内容如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextNamespaceHandler</span> <span class="keyword">extends</span> <span class="title">NamespaceHandlerSupport</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">		registerBeanDefinitionParser(<span class="string">"property-placeholder"</span>, <span class="keyword">new</span> PropertyPlaceholderBeanDefinitionParser());</div><div class="line">		registerBeanDefinitionParser(<span class="string">"property-override"</span>, <span class="keyword">new</span> PropertyOverrideBeanDefinitionParser());</div><div class="line">		registerBeanDefinitionParser(<span class="string">"annotation-config"</span>, <span class="keyword">new</span> AnnotationConfigBeanDefinitionParser());</div><div class="line">		registerBeanDefinitionParser(<span class="string">"component-scan"</span>, <span class="keyword">new</span> ComponentScanBeanDefinitionParser());</div><div class="line">		registerBeanDefinitionParser(<span class="string">"load-time-weaver"</span>, <span class="keyword">new</span> LoadTimeWeaverBeanDefinitionParser());</div><div class="line">		registerBeanDefinitionParser(<span class="string">"spring-configured"</span>, <span class="keyword">new</span> SpringConfiguredBeanDefinitionParser());</div><div class="line">		registerBeanDefinitionParser(<span class="string">"mbean-export"</span>, <span class="keyword">new</span> MBeanExportBeanDefinitionParser());</div><div class="line">		registerBeanDefinitionParser(<span class="string">"mbean-server"</span>, <span class="keyword">new</span> MBeanServerBeanDefinitionParser());</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>顺藤摸瓜就能找到<code>property-placeholder</code>的处理类是<code>PropertyPlaceholderBeanDefinitionParser</code></p>
<h3 id="PropertyPlaceholderBeanDefinitionParser"><a href="#PropertyPlaceholderBeanDefinitionParser" class="headerlink" title="PropertyPlaceholderBeanDefinitionParser"></a>PropertyPlaceholderBeanDefinitionParser</h3><p>继承关系：</p>
<img src="/2016/10/31/property-placeholder/hierarchy.jpg" alt="hierarchy.jpg" title="">
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PropertyPlaceholderBeanDefinitionParser</span> <span class="keyword">extends</span> <span class="title">AbstractPropertyLoadingBeanDefinitionParser</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SYSTEM_PROPERTIES_MODE_ATTRIBUTE = <span class="string">"system-properties-mode"</span>;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SYSTEM_PROPERTIES_MODE_DEFAULT = <span class="string">"ENVIRONMENT"</span>;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="keyword">protected</span> Class&lt;?&gt; getBeanClass(Element element) &#123;</div><div class="line">		<span class="comment">// As of Spring 3.1, the default value of system-properties-mode has changed from</span></div><div class="line">		<span class="comment">// 'FALLBACK' to 'ENVIRONMENT'. This latter value indicates that resolution of</span></div><div class="line">		<span class="comment">// placeholders against system properties is a function of the Environment and</span></div><div class="line">		<span class="comment">// its current set of PropertySources.</span></div><div class="line">		<span class="keyword">if</span> (SYSTEM_PROPERTIES_MODE_DEFAULT.equals(element.getAttribute(SYSTEM_PROPERTIES_MODE_ATTRIBUTE))) &#123;</div><div class="line">			<span class="keyword">return</span> PropertySourcesPlaceholderConfigurer.class;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// The user has explicitly specified a value for system-properties-mode: revert to</span></div><div class="line">		<span class="comment">// PropertyPlaceholderConfigurer to ensure backward compatibility with 3.0 and earlier.</span></div><div class="line">		<span class="keyword">return</span> PropertyPlaceholderConfigurer.class;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doParse</span><span class="params">(Element element, BeanDefinitionBuilder builder)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.doParse(element, builder);</div><div class="line"></div><div class="line">		builder.addPropertyValue(<span class="string">"ignoreUnresolvablePlaceholders"</span>,</div><div class="line">				Boolean.valueOf(element.getAttribute(<span class="string">"ignore-unresolvable"</span>)));</div><div class="line"></div><div class="line">		String systemPropertiesModeName = element.getAttribute(SYSTEM_PROPERTIES_MODE_ATTRIBUTE);</div><div class="line">		<span class="keyword">if</span> (StringUtils.hasLength(systemPropertiesModeName) &amp;&amp;</div><div class="line">				!systemPropertiesModeName.equals(SYSTEM_PROPERTIES_MODE_DEFAULT)) &#123;</div><div class="line">			builder.addPropertyValue(<span class="string">"systemPropertiesModeName"</span>, <span class="string">"SYSTEM_PROPERTIES_MODE_"</span> + systemPropertiesModeName);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (element.hasAttribute(<span class="string">"value-separator"</span>)) &#123;    </div><div class="line">			builder.addPropertyValue(<span class="string">"valueSeparator"</span>, element.getAttribute(<span class="string">"value-separator"</span>));</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (element.hasAttribute(<span class="string">"null-value"</span>)) &#123;</div><div class="line">			builder.addPropertyValue(<span class="string">"nullValue"</span>, element.getAttribute(<span class="string">"null-value"</span>));</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>getBeanClass</code>中，根据标签中的<code>system-properties-mode</code>属性来返回不同的类，来指明要实例化的类。</p>
<p>再来看上述的<code>parse</code>方法，首先就是调用父类的<code>doParse</code>方法，然后就是解析标签中的相应属性，放到<code>BeanDefinitionBuilder</code>中，剩下的工作就交给spring这个框架来完成了。</p>
<h4 id="system-properties-mode"><a href="#system-properties-mode" class="headerlink" title="system-properties-mode"></a><code>system-properties-mode</code></h4><p>决定解析placeholder的顺序。这个属性的取值如下：</p>
<blockquote>
<p>   <strong>“ENVIRONMENT”</strong> indicates placeholders should be resolved against the current Environment and against any local properties;</p>
<p>   <strong>“NEVER”</strong> indicates placeholders should be resolved only against local properties and never against system properties;</p>
<p>   <strong>“FALLBACK”</strong> indicates placeholders should be resolved against any local properties and then against system properties;</p>
<p>   <strong>“OVERRIDE”</strong> indicates placeholders should be resolved first against system properties and then against any local properties;</p>
</blockquote>
<p>这个属性的默认值是<code>ENVIRONMENT</code>,也就是先从环境变量中解析，然后才从我们定义的properties文件中解析，如果环境中的变量名和配置文件中的变量名冲突，</p>
<p>就会使用环境变量中的。</p>
<blockquote>
<p>所以配置文件中的变量名最好带一个前缀，如<code>jdbc.username=</code>, 笔者在Ubuntu下就遇到过不带前缀的<code>username</code>和系统的’username’冲突的情况</p>
</blockquote>
<h4 id="ignore-unresolvable"><a href="#ignore-unresolvable" class="headerlink" title="ignore-unresolvable"></a><code>ignore-unresolvable</code></h4><blockquote>
<p>   Specifies if failure to find the property value to replace a key should be ignored.<br>    Default is “false”, meaning that this placeholder configurer will raise an exception<br>    if it cannot resolve a key. Set to “true” to allow the configurer to pass on the key<br>    to any others in the context that have not yet visited the key in question.</p>
</blockquote>
<p>这个属性很关键，他决定遇到无法解析的变量时是否抛出异常，默认是<code>fale</code>（抛出异常）,在有多个配置文件的时候应该设置为<code>true</code>。</p>
<h4 id="value-separator"><a href="#value-separator" class="headerlink" title="value-separator"></a><code>value-separator</code></h4><p>placeHolder默认值得分隔符，默认是<code>:</code></p>
<blockquote>
<p>The separating character between the placeholder variable and the associated     default value: by default, a ‘:’ symbol.</p>
</blockquote>
<h4 id="null-value"><a href="#null-value" class="headerlink" title="null-value"></a><code>null-value</code></h4><blockquote>
<p>   A value that should be treated as ‘null’ when resolved as a placeholder value:<br>    e.g. “” (empty String) or “null”. By default, no such null value is defined.</p>
</blockquote>
<p><strong>这些属性都可以在相应的<code>xsd</code>schema中找到。</strong></p>
<h3 id="AbstractPropertyLoadingBeanDefinitionParser"><a href="#AbstractPropertyLoadingBeanDefinitionParser" class="headerlink" title="AbstractPropertyLoadingBeanDefinitionParser"></a>AbstractPropertyLoadingBeanDefinitionParser</h3><p>这是上面的那个解析类的父类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractPropertyLoadingBeanDefinitionParser</span> <span class="keyword">extends</span> <span class="title">AbstractSingleBeanDefinitionParser</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">shouldGenerateId</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doParse</span><span class="params">(Element element, BeanDefinitionBuilder builder)</span> </span>&#123;</div><div class="line">		String location = element.getAttribute(<span class="string">"location"</span>);</div><div class="line">		<span class="keyword">if</span> (StringUtils.hasLength(location)) &#123;</div><div class="line">			String[] locations = StringUtils.commaDelimitedListToStringArray(location);</div><div class="line">			builder.addPropertyValue(<span class="string">"locations"</span>, locations);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		String propertiesRef = element.getAttribute(<span class="string">"properties-ref"</span>);</div><div class="line">		<span class="keyword">if</span> (StringUtils.hasLength(propertiesRef)) &#123;</div><div class="line">			builder.addPropertyReference(<span class="string">"properties"</span>, propertiesRef);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		String fileEncoding = element.getAttribute(<span class="string">"file-encoding"</span>);</div><div class="line">		<span class="keyword">if</span> (StringUtils.hasLength(fileEncoding)) &#123;</div><div class="line">			builder.addPropertyValue(<span class="string">"fileEncoding"</span>, fileEncoding);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		String order = element.getAttribute(<span class="string">"order"</span>);</div><div class="line">		<span class="keyword">if</span> (StringUtils.hasLength(order)) &#123;</div><div class="line">			builder.addPropertyValue(<span class="string">"order"</span>, Integer.valueOf(order));</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		builder.addPropertyValue(<span class="string">"ignoreResourceNotFound"</span>,</div><div class="line">				Boolean.valueOf(element.getAttribute(<span class="string">"ignore-resource-not-found"</span>)));</div><div class="line"></div><div class="line">		builder.addPropertyValue(<span class="string">"localOverride"</span>,</div><div class="line">				Boolean.valueOf(element.getAttribute(<span class="string">"local-override"</span>)));</div><div class="line"></div><div class="line">		builder.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="shouldGenerateId"><a href="#shouldGenerateId" class="headerlink" title="shouldGenerateId"></a>shouldGenerateId</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Should an ID be generated instead of read from the passed in &#123;<span class="doctag">@link</span> Element&#125;?</div><div class="line"> * &lt;p&gt;Disabled by default; subclasses can override this to enable ID generation.</div><div class="line"> * Note that this flag is about &lt;i&gt;always&lt;/i&gt; generating an ID; the parser</div><div class="line"> * won't even check for an "id" attribute in this case.</div><div class="line"> * <span class="doctag">@return</span> whether the parser should always generate an id</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">shouldGenerateId</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="doParse"><a href="#doParse" class="headerlink" title="doParse"></a>doParse</h4><p>这个方法负责解析配置文件的location、file-encoding等通用的属性，并放置到<code>builder</code>中。</p>
<h2 id="Spring-调用handler的过程"><a href="#Spring-调用handler的过程" class="headerlink" title="Spring 调用handler的过程"></a>Spring 调用handler的过程</h2><p>spring将特定的标签的解析委托给我们自己定义的handler的过程主要是在<code>DefaultBeanDefinitionDocumentReader</code>中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Parse the elements at the root level in the document:</div><div class="line">	 * "import", "alias", "bean".</div><div class="line">	 * <span class="doctag">@param</span> root the DOM root element of the document</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parseBeanDefinitions</span><span class="params">(Element root, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (delegate.isDefaultNamespace(root)) &#123;</div><div class="line">			NodeList nl = root.getChildNodes();</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</div><div class="line">				Node node = nl.item(i);</div><div class="line">				<span class="keyword">if</span> (node <span class="keyword">instanceof</span> Element) &#123;</div><div class="line">					Element ele = (Element) node;</div><div class="line">					<span class="keyword">if</span> (delegate.isDefaultNamespace(ele)) &#123;</div><div class="line">						parseDefaultElement(ele, delegate);</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">else</span> &#123;</div><div class="line">						delegate.parseCustomElement(ele);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			delegate.parseCustomElement(root);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p><code>context</code>不是默认命名空间的标签，所以走<code>parseCustomElement</code>分支。</p>
<p>走到<code>BeanDefinitionParserDelegate</code>的<code>parseCustomElement</code>方法中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parseCustomElement</span><span class="params">(Element ele)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> parseCustomElement(ele, <span class="keyword">null</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parseCustomElement</span><span class="params">(Element ele, BeanDefinition containingBd)</span> </span>&#123;</div><div class="line">		String namespaceUri = getNamespaceURI(ele);</div><div class="line">		NamespaceHandler handler = <span class="keyword">this</span>.readerContext.getNamespaceHandlerResolver().resolve(namespaceUri);</div><div class="line">		<span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</div><div class="line">			error(<span class="string">"Unable to locate Spring NamespaceHandler for XML schema namespace ["</span> + namespaceUri + <span class="string">"]"</span>, ele);</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> handler.parse(ele, <span class="keyword">new</span> ParserContext(<span class="keyword">this</span>.readerContext, <span class="keyword">this</span>, containingBd));</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>这里从<code>NamespaceHandlerResolver</code>中根据<code>namespaceUri</code>获取到对应的<code>NamespaceHandler</code>,然后调用<code>handler</code>的<code>parse</code><br>方法进行解析，返回一个<code>BeanDefinition</code>，然后就注册到spring中了。</p>
<p>这里的handler就是前面我们看到的实现了<code>NamespaceHandlerSupport</code>的那个<code>ContextNamespaceHandler</code>,<code>NamespaceHandlerSupport</code>继承自<code>NamespaceHandler</code>,它的parse 方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Parses the supplied &#123;<span class="doctag">@link</span> Element&#125; by delegating to the &#123;<span class="doctag">@link</span> BeanDefinitionParser&#125; that is</div><div class="line">	 * registered for that &#123;<span class="doctag">@link</span> Element&#125;.</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parse</span><span class="params">(Element element, ParserContext parserContext)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> findParserForElement(element, parserContext).parse(element, parserContext);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Locates the &#123;<span class="doctag">@link</span> BeanDefinitionParser&#125; from the register implementations using</div><div class="line">	 * the local name of the supplied &#123;<span class="doctag">@link</span> Element&#125;.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> BeanDefinitionParser <span class="title">findParserForElement</span><span class="params">(Element element, ParserContext parserContext)</span> </span>&#123;</div><div class="line">		String localName = parserContext.getDelegate().getLocalName(element);</div><div class="line">		BeanDefinitionParser parser = <span class="keyword">this</span>.parsers.get(localName);</div><div class="line">		<span class="keyword">if</span> (parser == <span class="keyword">null</span>) &#123;</div><div class="line">			parserContext.getReaderContext().fatal(</div><div class="line">					<span class="string">"Cannot locate BeanDefinitionParser for element ["</span> + localName + <span class="string">"]"</span>, element);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> parser;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>就是从在<code>init()</code>方法中注册的<code>Parser</code>,根据对应的标签前缀，获取到parser，对xml元素进行解析。</p>
<h2 id="生效过程"><a href="#生效过程" class="headerlink" title="生效过程"></a>生效过程</h2><p>生效过程是在<code>BeanFactoryPostProcessor</code>被调用的过程中生效的, 继承关系</p>
<img src="/2016/10/31/property-placeholder/post-processors.jpg" alt="post-processors.jpg" title="">
<p>可以看到里面有两个熟悉的类——<code>PropertySourcesPlaceholderConfigurer</code>和<code>PropertyPlaceholderConfigurer</code>，正是<code>PropertyPlaceholderBeanDefinitionParser.getBeanClass</code>返回的两种类型, 也就是说他们两个是<code>BeanFactoryPostProcessor</code>.</p>
<h3 id="PropertySourcesPlaceholderConfigurer"><a href="#PropertySourcesPlaceholderConfigurer" class="headerlink" title="PropertySourcesPlaceholderConfigurer"></a>PropertySourcesPlaceholderConfigurer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * &#123;<span class="doctag">@inheritDoc</span>&#125;</div><div class="line">	 * &lt;p&gt;Processing occurs by replacing $&#123;...&#125; placeholders in bean definitions by resolving each</div><div class="line">	 * against this configurer's set of &#123;<span class="doctag">@link</span> PropertySources&#125;, which includes:</div><div class="line">	 * &lt;ul&gt;</div><div class="line">	 * &lt;li&gt;all &#123;<span class="doctag">@linkplain</span> org.springframework.core.env.ConfigurableEnvironment#getPropertySources</div><div class="line">	 * environment property sources&#125;, if an &#123;<span class="doctag">@code</span> Environment&#125; &#123;<span class="doctag">@linkplain</span> #setEnvironment is present&#125;</div><div class="line">	 * &lt;li&gt;&#123;<span class="doctag">@linkplain</span> #mergeProperties merged local properties&#125;, if &#123;<span class="doctag">@linkplain</span> #setLocation any&#125;</div><div class="line">	 * &#123;<span class="doctag">@linkplain</span> #setLocations have&#125; &#123;<span class="doctag">@linkplain</span> #setProperties been&#125;</div><div class="line">	 * &#123;<span class="doctag">@linkplain</span> #setPropertiesArray specified&#125;</div><div class="line">	 * &lt;li&gt;any property sources set by calling &#123;<span class="doctag">@link</span> #setPropertySources&#125;</div><div class="line">	 * &lt;/ul&gt;</div><div class="line">	 * &lt;p&gt;If &#123;<span class="doctag">@link</span> #setPropertySources&#125; is called, &lt;strong&gt;environment and local properties will be</div><div class="line">	 * ignored&lt;/strong&gt;. This method is designed to give the user fine-grained control over property</div><div class="line">	 * sources, and once set, the configurer makes no assumptions about adding additional sources.</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.propertySources == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">this</span>.propertySources = <span class="keyword">new</span> MutablePropertySources();</div><div class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.environment != <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">this</span>.propertySources.addLast(</div><div class="line">					<span class="keyword">new</span> PropertySource&lt;Environment&gt;(ENVIRONMENT_PROPERTIES_PROPERTY_SOURCE_NAME, <span class="keyword">this</span>.environment) &#123;</div><div class="line">						<span class="meta">@Override</span></div><div class="line">						<span class="function"><span class="keyword">public</span> String <span class="title">getProperty</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">							<span class="keyword">return</span> <span class="keyword">this</span>.source.getProperty(key);</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">				);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				PropertySource&lt;?&gt; localPropertySource =</div><div class="line">						<span class="keyword">new</span> PropertiesPropertySource(LOCAL_PROPERTIES_PROPERTY_SOURCE_NAME, mergeProperties());</div><div class="line">				<span class="keyword">if</span> (<span class="keyword">this</span>.localOverride) &#123;</div><div class="line">					<span class="keyword">this</span>.propertySources.addFirst(localPropertySource);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">else</span> &#123;</div><div class="line">					<span class="keyword">this</span>.propertySources.addLast(localPropertySource);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> BeanInitializationException(<span class="string">"Could not load properties"</span>, ex);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		processProperties(beanFactory, <span class="keyword">new</span> PropertySourcesPropertyResolver(<span class="keyword">this</span>.propertySources));</div><div class="line">		<span class="keyword">this</span>.appliedPropertySources = <span class="keyword">this</span>.propertySources;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>注意上述的<code>localOverride</code>变量，它决定了是否用本地的替换系统的，主要是用加载的顺序呢控制的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* &lt;p&gt;Any local properties (e.g. those added via &#123;<span class="doctag">@link</span> #setProperties&#125;, &#123;<span class="doctag">@link</span> #setLocations&#125;</div><div class="line">* et al.) are added as a &#123;<span class="doctag">@code</span> PropertySource&#125;. Search precedence of local properties is</div><div class="line">* based on the value of the &#123;<span class="doctag">@link</span> #setLocalOverride localOverride&#125; property, which is by</div><div class="line">* default &#123;<span class="doctag">@code</span> false&#125; meaning that local properties are to be searched last, after all</div><div class="line">* environment property sources.</div><div class="line">*/</div></pre></td></tr></table></figure>
<p>获取到所有的属性列表后，处理属性就交给了<code>processProperties</code>这个方法.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Visit each bean definition in the given bean factory and attempt to replace $&#123;...&#125; property</div><div class="line">	 * placeholders with values from the given properties.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processProperties</span><span class="params">(ConfigurableListableBeanFactory beanFactoryToProcess,</span></span></div><div class="line">			<span class="keyword">final</span> ConfigurablePropertyResolver propertyResolver) <span class="keyword">throws</span> BeansException &#123;</div><div class="line"></div><div class="line">		propertyResolver.setPlaceholderPrefix(<span class="keyword">this</span>.placeholderPrefix);</div><div class="line">		propertyResolver.setPlaceholderSuffix(<span class="keyword">this</span>.placeholderSuffix);</div><div class="line">		propertyResolver.setValueSeparator(<span class="keyword">this</span>.valueSeparator);</div><div class="line"></div><div class="line">		StringValueResolver valueResolver = <span class="keyword">new</span> StringValueResolver() &#123;</div><div class="line">			<span class="meta">@Override</span></div><div class="line">			<span class="function"><span class="keyword">public</span> String <span class="title">resolveStringValue</span><span class="params">(String strVal)</span> </span>&#123;</div><div class="line">				String resolved = ignoreUnresolvablePlaceholders ?</div><div class="line">						propertyResolver.resolvePlaceholders(strVal) :</div><div class="line">						propertyResolver.resolveRequiredPlaceholders(strVal);</div><div class="line">				<span class="keyword">return</span> (resolved.equals(nullValue) ? <span class="keyword">null</span> : resolved);</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line"></div><div class="line">		doProcessProperties(beanFactoryToProcess, valueResolver);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>先设置propertyResolver的prefix（默认是${}）和suffix(默认是})，以及默认值得分隔符(默认是:).</p>
<p>然后创建了一个StringValueResolver, 这里根据<code>ignoreUnresolvablePlaceholders</code>的值来进行不同的解析，</p>
<p>这个值默认是false, 但是可以在标签中配置。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"ignore-unresolvable"</span> <span class="attr">type</span>=<span class="string">"xsd:boolean"</span> <span class="attr">default</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span>&lt;![CDATA[</div><div class="line">	Specifies if failure to find the property value to replace a key should be ignored.</div><div class="line">	Default is "false", meaning that this placeholder configurer will raise an exception</div><div class="line">	if it cannot resolve a key. Set to "true" to allow the configurer to pass on the key</div><div class="line">	to any others in the context that have not yet visited the key in question.</div><div class="line">				]]&gt;<span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">xsd:attribute</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>false</code>就以为者遇到无法解析的值就会直接抛出异常</p>
<p>接下来看看<code>doProcessProperties</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doProcessProperties</span><span class="params">(ConfigurableListableBeanFactory beanFactoryToProcess,</span></span></div><div class="line">		StringValueResolver valueResolver) &#123;</div><div class="line"></div><div class="line">	BeanDefinitionVisitor visitor = <span class="keyword">new</span> BeanDefinitionVisitor(valueResolver);</div><div class="line"></div><div class="line">	String[] beanNames = beanFactoryToProcess.getBeanDefinitionNames();</div><div class="line">	<span class="keyword">for</span> (String curName : beanNames) &#123;</div><div class="line">		<span class="comment">// Check that we're not parsing our own bean definition,</span></div><div class="line">		<span class="comment">// to avoid failing on unresolvable placeholders in properties file locations.</span></div><div class="line">		<span class="keyword">if</span> (!(curName.equals(<span class="keyword">this</span>.beanName) &amp;&amp; beanFactoryToProcess.equals(<span class="keyword">this</span>.beanFactory))) &#123;</div><div class="line">			BeanDefinition bd = beanFactoryToProcess.getBeanDefinition(curName);</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				visitor.visitBeanDefinition(bd);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(bd.getResourceDescription(), curName, ex.getMessage(), ex);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// New in Spring 2.5: resolve placeholders in alias target names and aliases as well.</span></div><div class="line">	beanFactoryToProcess.resolveAliases(valueResolver);</div><div class="line"></div><div class="line">	<span class="comment">// New in Spring 3.0: resolve placeholders in embedded values such as annotation attributes.</span></div><div class="line">	beanFactoryToProcess.addEmbeddedValueResolver(valueResolver);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里采用的是visitor模式，查看<code>BeanDefinitionVisitor#visitBeanDefinition</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Traverse the given BeanDefinition object and the MutablePropertyValues</div><div class="line">	 * and ConstructorArgumentValues contained in them.</div><div class="line">	 * <span class="doctag">@param</span> beanDefinition the BeanDefinition object to traverse</div><div class="line">	 * <span class="doctag">@see</span> #resolveStringValue(String)</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitBeanDefinition</span><span class="params">(BeanDefinition beanDefinition)</span> </span>&#123;</div><div class="line">		visitParentName(beanDefinition);</div><div class="line">		visitBeanClassName(beanDefinition);</div><div class="line">		visitFactoryBeanName(beanDefinition);</div><div class="line">		visitFactoryMethodName(beanDefinition);</div><div class="line">		visitScope(beanDefinition);</div><div class="line">		visitPropertyValues(beanDefinition.getPropertyValues());</div><div class="line">		ConstructorArgumentValues cas = beanDefinition.getConstructorArgumentValues();</div><div class="line">		visitIndexedArgumentValues(cas.getIndexedArgumentValues());</div><div class="line">		visitGenericArgumentValues(cas.getGenericArgumentValues());</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>以其中的<code>visitParentName</code>为例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">visitParentName</span><span class="params">(BeanDefinition beanDefinition)</span> </span>&#123;</div><div class="line">	String parentName = beanDefinition.getParentName();</div><div class="line">	<span class="keyword">if</span> (parentName != <span class="keyword">null</span>) &#123;</div><div class="line">		String resolvedName = resolveStringValue(parentName);</div><div class="line">		<span class="keyword">if</span> (!parentName.equals(resolvedName)) &#123;</div><div class="line">			beanDefinition.setParentName(resolvedName);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>就是先获取<code>parentName</code>，然后替换相应的属性之后的<code>resolvedName</code>,如果和原来的不一样就设置<code>resolvedName</code></p>
<p>为新的parentName</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Resolve the given String value, for example parsing placeholders.</div><div class="line"> * <span class="doctag">@param</span> strVal the original String value</div><div class="line"> * <span class="doctag">@return</span> the resolved String value</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">resolveStringValue</span><span class="params">(String strVal)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.valueResolver == <span class="keyword">null</span>) &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"No StringValueResolver specified - pass a resolver "</span> +</div><div class="line">				<span class="string">"object into the constructor or override the 'resolveStringValue' method"</span>);</div><div class="line">	&#125;</div><div class="line">	String resolvedValue = <span class="keyword">this</span>.valueResolver.resolveStringValue(strVal);</div><div class="line">	<span class="comment">// Return original String if not modified.</span></div><div class="line">	<span class="keyword">return</span> (strVal.equals(resolvedValue) ? strVal : resolvedValue);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>顺藤摸瓜,看看<code>valueResolver</code>,就是之前的<code>StringValueResolver</code></p>
<p>这是一个接口只有一个方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StringValueResolver</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Resolve the given String value, for example parsing placeholders.</div><div class="line">	 * <span class="doctag">@param</span> strVal the original String value</div><div class="line">	 * <span class="doctag">@return</span> the resolved String value</div><div class="line">	 */</div><div class="line">	<span class="function">String <span class="title">resolveStringValue</span><span class="params">(String strVal)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>之前传入的其实就是对应<code>ConfigurablePropertyResolver</code>的两个方法, 之前传入的是它的子类</p>
<p><code>PropertySourcesPropertyResolver</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">resolvePlaceholders</span><span class="params">(String text)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.nonStrictHelper == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">this</span>.nonStrictHelper = createPlaceholderHelper(<span class="keyword">true</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> doResolvePlaceholders(text, <span class="keyword">this</span>.nonStrictHelper);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">resolveRequiredPlaceholders</span><span class="params">(String text)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.strictHelper == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">this</span>.strictHelper = createPlaceholderHelper(<span class="keyword">false</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> doResolvePlaceholders(text, <span class="keyword">this</span>.strictHelper);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>调用的是内部方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">doResolvePlaceholders</span><span class="params">(String text, PropertyPlaceholderHelper helper)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> helper.replacePlaceholders(text, <span class="keyword">new</span> PropertyPlaceholderHelper.PlaceholderResolver() &#123;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">resolvePlaceholder</span><span class="params">(String placeholderName)</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> getPropertyAsRawString(placeholderName);</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终调用功能的是<code>PropertyPlaceholderHelper</code>的replacePlaceholders方法，</p>
<p>这个helper在构造是通过 <code>createPlaceholderHelper</code>方法构建的，他接受一个bool类型的参数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> PropertyPlaceholderHelper <span class="title">createPlaceholderHelper</span><span class="params">(<span class="keyword">boolean</span> ignoreUnresolvablePlaceholders)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> PropertyPlaceholderHelper(<span class="keyword">this</span>.placeholderPrefix, <span class="keyword">this</span>.placeholderSuffix,</div><div class="line">			<span class="keyword">this</span>.valueSeparator, ignoreUnresolvablePlaceholders);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个bool值就是表示是否要ignore掉不能解析的属性。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Creates a new &#123;<span class="doctag">@code</span> PropertyPlaceholderHelper&#125; that uses the supplied prefix and suffix.</div><div class="line">	 * <span class="doctag">@param</span> placeholderPrefix the prefix that denotes the start of a placeholder</div><div class="line">	 * <span class="doctag">@param</span> placeholderSuffix the suffix that denotes the end of a placeholder</div><div class="line">	 * <span class="doctag">@param</span> valueSeparator the separating character between the placeholder variable</div><div class="line">	 * and the associated default value, if any</div><div class="line">	 * <span class="doctag">@param</span> ignoreUnresolvablePlaceholders indicates whether unresolvable placeholders should</div><div class="line">	 * be ignored (&#123;<span class="doctag">@code</span> true&#125;) or cause an exception (&#123;<span class="doctag">@code</span> false&#125;)</div><div class="line">	 */</div></pre></td></tr></table></figure>
<p>接着追</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Replaces all placeholders of format &#123;<span class="doctag">@code</span> $&#123;name&#125;&#125; with the value returned</div><div class="line"> * from the supplied &#123;<span class="doctag">@link</span> PlaceholderResolver&#125;.</div><div class="line"> * <span class="doctag">@param</span> value the value containing the placeholders to be replaced</div><div class="line"> * <span class="doctag">@param</span> placeholderResolver the &#123;<span class="doctag">@code</span> PlaceholderResolver&#125; to use for replacement</div><div class="line"> * <span class="doctag">@return</span> the supplied value with placeholders replaced inline</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replacePlaceholders</span><span class="params">(String value, PlaceholderResolver placeholderResolver)</span> </span>&#123;</div><div class="line">	Assert.notNull(value, <span class="string">"'value' must not be null"</span>);</div><div class="line">	<span class="keyword">return</span> parseStringValue(value, placeholderResolver, <span class="keyword">new</span> HashSet&lt;String&gt;());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">parseStringValue</span><span class="params">(</span></span></div><div class="line">			String strVal, PlaceholderResolver placeholderResolver, Set&lt;String&gt; visitedPlaceholders) &#123;</div><div class="line"></div><div class="line">		StringBuilder result = <span class="keyword">new</span> StringBuilder(strVal);</div><div class="line"></div><div class="line">		<span class="keyword">int</span> startIndex = strVal.indexOf(<span class="keyword">this</span>.placeholderPrefix);</div><div class="line">		<span class="keyword">while</span> (startIndex != -<span class="number">1</span>) &#123;</div><div class="line">			<span class="keyword">int</span> endIndex = findPlaceholderEndIndex(result, startIndex);</div><div class="line">			<span class="keyword">if</span> (endIndex != -<span class="number">1</span>) &#123;</div><div class="line">				String placeholder = result.substring(startIndex + <span class="keyword">this</span>.placeholderPrefix.length(), endIndex);</div><div class="line">				String originalPlaceholder = placeholder;</div><div class="line">				<span class="keyword">if</span> (!visitedPlaceholders.add(originalPlaceholder)) &#123;</div><div class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</div><div class="line">							<span class="string">"Circular placeholder reference '"</span> + originalPlaceholder + <span class="string">"' in property definitions"</span>);</div><div class="line">				&#125;</div><div class="line">				<span class="comment">// Recursive invocation, parsing placeholders contained in the placeholder key.</span></div><div class="line">				placeholder = parseStringValue(placeholder, placeholderResolver, visitedPlaceholders);</div><div class="line">				<span class="comment">// Now obtain the value for the fully resolved key...</span></div><div class="line">				String propVal = placeholderResolver.resolvePlaceholder(placeholder);</div><div class="line">				<span class="keyword">if</span> (propVal == <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.valueSeparator != <span class="keyword">null</span>) &#123;</div><div class="line">					<span class="keyword">int</span> separatorIndex = placeholder.indexOf(<span class="keyword">this</span>.valueSeparator);</div><div class="line">					<span class="keyword">if</span> (separatorIndex != -<span class="number">1</span>) &#123;</div><div class="line">						String actualPlaceholder = placeholder.substring(<span class="number">0</span>, separatorIndex);</div><div class="line">						String defaultValue = placeholder.substring(separatorIndex + <span class="keyword">this</span>.valueSeparator.length());</div><div class="line">						propVal = placeholderResolver.resolvePlaceholder(actualPlaceholder);</div><div class="line">						<span class="keyword">if</span> (propVal == <span class="keyword">null</span>) &#123;</div><div class="line">							propVal = defaultValue;</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span> (propVal != <span class="keyword">null</span>) &#123;</div><div class="line">					<span class="comment">// Recursive invocation, parsing placeholders contained in the</span></div><div class="line">					<span class="comment">// previously resolved placeholder value.</span></div><div class="line">					propVal = parseStringValue(propVal, placeholderResolver, visitedPlaceholders);</div><div class="line">					result.replace(startIndex, endIndex + <span class="keyword">this</span>.placeholderSuffix.length(), propVal);</div><div class="line">					<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</div><div class="line">						logger.trace(<span class="string">"Resolved placeholder '"</span> + placeholder + <span class="string">"'"</span>);</div><div class="line">					&#125;</div><div class="line">					startIndex = result.indexOf(<span class="keyword">this</span>.placeholderPrefix, startIndex + propVal.length());</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.ignoreUnresolvablePlaceholders) &#123;</div><div class="line">					<span class="comment">// Proceed with unprocessed value.</span></div><div class="line">					startIndex = result.indexOf(<span class="keyword">this</span>.placeholderPrefix, endIndex + <span class="keyword">this</span>.placeholderSuffix.length());</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">else</span> &#123;</div><div class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Could not resolve placeholder '"</span> +</div><div class="line">							placeholder + <span class="string">"'"</span> + <span class="string">" in string value \""</span> + strVal + <span class="string">"\""</span>);</div><div class="line">				&#125;</div><div class="line">				visitedPlaceholders.remove(originalPlaceholder);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				startIndex = -<span class="number">1</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">return</span> result.toString();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>实际解析的代码都在这里：</p>
<ol>
<li>取出placeHolder的名称.</li>
<li>判断有没有循环引用的情况.</li>
<li>递归替换，获取对应的值.</li>
<li>如果值为空，解析默认值.</li>
</ol>
<h3 id="PropertyPlaceholderConfigurer"><a href="#PropertyPlaceholderConfigurer" class="headerlink" title="PropertyPlaceholderConfigurer"></a>PropertyPlaceholderConfigurer</h3><p>应该和上面的类似，抽时间补。</p>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> placeholder </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring自定义标签，使用和源码]]></title>
      <url>http://qsli.github.io/2016/10/23/custom-tag/</url>
      <content type="html"><![CDATA[<h2 id="自定义标签"><a href="#自定义标签" class="headerlink" title="自定义标签"></a>自定义标签</h2><p>Spring中的标签具有很强的扩展性，我们可以很方便的扩展出自己的标签，做出类似下面的标签<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">ref</span>=<span class="string">"barService"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"barService"</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="1-Authoring-the-schema"><a href="#1-Authoring-the-schema" class="headerlink" title="1. Authoring the schema"></a>1. Authoring the schema</h3><p>定义标签的xml描述：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">xsd:schema</span> <span class="attr">xmlns</span>=<span class="string">"http://www.mycompany.com/schema/myns"</span></span></div><div class="line">        <span class="attr">xmlns:xsd</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></div><div class="line">        <span class="attr">xmlns:beans</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></div><div class="line">        <span class="attr">targetNamespace</span>=<span class="string">"http://www.mycompany.com/schema/myns"</span></div><div class="line">        <span class="attr">elementFormDefault</span>=<span class="string">"qualified"</span></div><div class="line">        <span class="attr">attributeFormDefault</span>=<span class="string">"unqualified"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">xsd:import</span> <span class="attr">namespace</span>=<span class="string">"http://www.springframework.org/schema/beans"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"dateformat"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">xsd:complexType</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"beans:identifiedType"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"lenient"</span> <span class="attr">type</span>=<span class="string">"xsd:boolean"</span>/&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"pattern"</span> <span class="attr">type</span>=<span class="string">"xsd:string"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">xsd:schema</span>&gt;</span></div></pre></td></tr></table></figure>
<p>定义了标签里面的属性和属性的类型， 在解析xml的时候spring会进行校验</p>
<h3 id="2-Coding-a-NamespaceHandler"><a href="#2-Coding-a-NamespaceHandler" class="headerlink" title="2. Coding a NamespaceHandler"></a>2. Coding a NamespaceHandler</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.springframework.samples.xml;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.xml.NamespaceHandlerSupport;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyNamespaceHandler</span> <span class="keyword">extends</span> <span class="title">NamespaceHandlerSupport</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        registerBeanDefinitionParser(<span class="string">"dateformat"</span>, <span class="keyword">new</span> SimpleDateFormatBeanDefinitionParser());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主要是定义标签的处理类，这里是<code>SimpleDateFormatBeanDefinitionParser</code></p>
<h3 id="3-BeanDefinitionParser"><a href="#3-BeanDefinitionParser" class="headerlink" title="3. BeanDefinitionParser"></a>3. BeanDefinitionParser</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.springframework.samples.xml;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionBuilder;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;</div><div class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</div><div class="line"><span class="keyword">import</span> org.w3c.dom.Element;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleDateFormatBeanDefinitionParser</span> <span class="keyword">extends</span> <span class="title">AbstractSingleBeanDefinitionParser</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> Class <span class="title">getBeanClass</span><span class="params">(Element element)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> SimpleDateFormat.class;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doParse</span><span class="params">(Element element, BeanDefinitionBuilder bean)</span> </span>&#123;</div><div class="line">        <span class="comment">// this will never be null since the schema explicitly requires that a value be supplied</span></div><div class="line">        String pattern = element.getAttribute(<span class="string">"pattern"</span>);</div><div class="line">        bean.addConstructorArg(pattern);</div><div class="line"></div><div class="line">        <span class="comment">// this however is an optional property</span></div><div class="line">        String lenient = element.getAttribute(<span class="string">"lenient"</span>);</div><div class="line">        <span class="keyword">if</span> (StringUtils.hasText(lenient)) &#123;</div><div class="line">            bean.addPropertyValue(<span class="string">"lenient"</span>, Boolean.valueOf(lenient));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该类继承自spring提供的抽象类<code>AbstractSingleBeanDefinitionParser</code>，提供了许多基本的功能，解析标签的方法在<code>doParse</code>中，spring会传入一个标签元素<code>Element</code>和<code>BeanDefinitionBuilder</code>的上下文。</p>
<h3 id="4-Registering-the-handler-and-the-schema"><a href="#4-Registering-the-handler-and-the-schema" class="headerlink" title="4. Registering the handler and the schema"></a>4. Registering the handler and the schema</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">└─META-INF</div><div class="line">        spring.handlers</div><div class="line">        spring.schemas</div></pre></td></tr></table></figure>
<p><code>spring.handlers</code>中的内容如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http\://www.mycompany.com/schema/myns=org.springframework.samples.xml.MyNamespaceHandler</div></pre></td></tr></table></figure>
<p><code>spring.schemas</code>中内容如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http\://www.mycompany.com/schema/myns/myns.xsd=org/springframework/samples/xml/myns.xsd</div></pre></td></tr></table></figure>
<p>spring在加载这个jar包的时候会自动的从这些文件中解析到我们的配置，当解析到相应的标签的时候就会交给我们定义的解析类来处理。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">myns:dateformat</span> <span class="attr">id</span>=<span class="string">"dateFormat"</span></span></div><div class="line"><span class="attr">pattern</span>=<span class="string">"yyyy-MM-dd HH:mm"</span></div><div class="line"><span class="attr">lenient</span>=<span class="string">"true"</span>/&gt;</div></pre></td></tr></table></figure></p>
<h2 id="Custom-attributes-on-‘normal’-elements"><a href="#Custom-attributes-on-‘normal’-elements" class="headerlink" title="Custom attributes on ‘normal’ elements"></a>Custom attributes on ‘normal’ elements</h2><p>除了自定义标签外，还可以为已有标签装饰一个新的属性</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"checkingAccountService"</span> <span class="attr">class</span>=<span class="string">"com.foo.DefaultCheckingAccountService"</span></span></div><div class="line">        <span class="attr">jcache:cache-name</span>=<span class="string">"checking.account"</span>&gt;</div><div class="line">    <span class="comment">&lt;!-- other dependencies here... --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<p>spring可以让我们单独处理这个<code>jcache:cache-name</code>这个属性。</p>
<h3 id="定义schema"><a href="#定义schema" class="headerlink" title="定义schema"></a>定义schema</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">xsd:schema</span> <span class="attr">xmlns</span>=<span class="string">"http://www.foo.com/schema/jcache"</span></span></div><div class="line">        <span class="attr">xmlns:xsd</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></div><div class="line">        <span class="attr">targetNamespace</span>=<span class="string">"http://www.foo.com/schema/jcache"</span></div><div class="line">        <span class="attr">elementFormDefault</span>=<span class="string">"qualified"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"cache-name"</span> <span class="attr">type</span>=<span class="string">"xsd:string"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">xsd:schema</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="NamespaceHandler"><a href="#NamespaceHandler" class="headerlink" title="NamespaceHandler"></a>NamespaceHandler</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JCacheNamespaceHandler</span> <span class="keyword">extends</span> <span class="title">NamespaceHandlerSupport</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.registerBeanDefinitionDecoratorForAttribute(<span class="string">"cache-name"</span>,</div><div class="line">            <span class="keyword">new</span> JCacheInitializingBeanDefinitionDecorator());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实际的调用行为已经被抽象到<code>NamespaceHandlerSupport</code>中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Decorates the supplied &#123;<span class="doctag">@link</span> Node&#125; by delegating to the &#123;<span class="doctag">@link</span> BeanDefinitionDecorator&#125; that</div><div class="line"> * is registered to handle that &#123;<span class="doctag">@link</span> Node&#125;.</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> BeanDefinitionHolder <span class="title">decorate</span><span class="params">(</span></span></div><div class="line">    Node node, BeanDefinitionHolder definition, ParserContext parserContext) &#123;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> findDecoratorForNode(node, parserContext).decorate(node, definition, parserContext);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="BeanDefinitionDecorator"><a href="#BeanDefinitionDecorator" class="headerlink" title="BeanDefinitionDecorator"></a>BeanDefinitionDecorator</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JCacheInitializingBeanDefinitionDecorator</span> <span class="keyword">implements</span> <span class="title">BeanDefinitionDecorator</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] EMPTY_STRING_ARRAY = <span class="keyword">new</span> String[<span class="number">0</span>];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> BeanDefinitionHolder <span class="title">decorate</span><span class="params">(Node source, BeanDefinitionHolder holder,</span></span></div><div class="line">            ParserContext ctx) &#123;</div><div class="line">        String initializerBeanName = registerJCacheInitializer(source, ctx);</div><div class="line">        createDependencyOnJCacheInitializer(holder, initializerBeanName);</div><div class="line">        <span class="keyword">return</span> holder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createDependencyOnJCacheInitializer</span><span class="params">(BeanDefinitionHolder holder,</span></span></div><div class="line">            String initializerBeanName) &#123;</div><div class="line">        AbstractBeanDefinition definition = ((AbstractBeanDefinition) holder.getBeanDefinition());</div><div class="line">        String[] dependsOn = definition.getDependsOn();</div><div class="line">        <span class="keyword">if</span> (dependsOn == <span class="keyword">null</span>) &#123;</div><div class="line">            dependsOn = <span class="keyword">new</span> String[]&#123;initializerBeanName&#125;;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            List dependencies = <span class="keyword">new</span> ArrayList(Arrays.asList(dependsOn));</div><div class="line">            dependencies.add(initializerBeanName);</div><div class="line">            dependsOn = (String[]) dependencies.toArray(EMPTY_STRING_ARRAY);</div><div class="line">        &#125;</div><div class="line">        definition.setDependsOn(dependsOn);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">registerJCacheInitializer</span><span class="params">(Node source, ParserContext ctx)</span> </span>&#123;</div><div class="line">        String cacheName = ((Attr) source).getValue();</div><div class="line">        String beanName = cacheName + <span class="string">"-initializer"</span>;</div><div class="line">        <span class="keyword">if</span> (!ctx.getRegistry().containsBeanDefinition(beanName)) &#123;</div><div class="line">            BeanDefinitionBuilder initializer = BeanDefinitionBuilder.rootBeanDefinition(JCacheInitializer.class);</div><div class="line">            initializer.addConstructorArg(cacheName);</div><div class="line">            ctx.getRegistry().registerBeanDefinition(beanName, initializer.getBeanDefinition());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> beanName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="META-INF"><a href="#META-INF" class="headerlink" title="META-INF"></a>META-INF</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># in 'META-INF/spring.handlers'</div><div class="line">http\://www.foo.com/schema/jcache=com.foo.JCacheNamespaceHandler</div><div class="line"># in 'META-INF/spring.schemas'</div><div class="line">http\://www.foo.com/schema/jcache/jcache.xsd=com/foo/jcache.xsd</div></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/" rel="external nofollow noopener noreferrer" target="_blank">spring-framework-reference</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 自定义标签 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[plantuml——用编码的方式画UML]]></title>
      <url>http://qsli.github.io/2016/10/16/plantuml/</url>
      <content type="html"><![CDATA[<h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><blockquote>
<p>PlantUML is a component that allows to quickly write :</p>
<ul>
<li><p>Sequence diagram,</p>
</li>
<li><p>Usecase diagram,</p>
</li>
<li><p>Class diagram,</p>
</li>
<li><p>Activity diagram, (here is the new syntax),</p>
</li>
<li><p>Component diagram,</p>
</li>
<li><p>State diagram,</p>
</li>
<li><p>Deployment diagram,</p>
</li>
<li><p>Object diagram.</p>
</li>
<li><p>wireframe graphical interface</p>
</li>
</ul>
<p>Diagrams are defined using a simple and intuitive  language. ( see PlantUML Language Reference Guide).</p>
</blockquote>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&#123;% plantuml %&#125;</div><div class="line">skinparam backgroundColor #EEEBDC</div><div class="line">skinparam handwritten true</div><div class="line"></div><div class="line">skinparam sequence &#123;</div><div class="line">	ArrowColor DeepSkyBlue</div><div class="line">	ActorBorderColor DeepSkyBlue</div><div class="line">	LifeLineBorderColor blue</div><div class="line">	LifeLineBackgroundColor #A9DCDF</div><div class="line"></div><div class="line">	ParticipantBorderColor DeepSkyBlue</div><div class="line">	ParticipantBackgroundColor DodgerBlue</div><div class="line">	ParticipantFontName Impact</div><div class="line">	ParticipantFontSize 17</div><div class="line">	ParticipantFontColor #A9DCDF</div><div class="line"></div><div class="line">	ActorBackgroundColor aqua</div><div class="line">	ActorFontColor DeepSkyBlue</div><div class="line">	ActorFontSize 17</div><div class="line">	ActorFontName Aapex</div><div class="line">&#125;</div><div class="line"></div><div class="line">actor User</div><div class="line">participant &quot;First Class&quot; as A</div><div class="line">participant &quot;Second Class&quot; as B</div><div class="line">participant &quot;Last Class&quot; as C</div><div class="line"></div><div class="line">User -&gt; A: DoWork</div><div class="line">activate A</div><div class="line"></div><div class="line">A -&gt; B: Create Request</div><div class="line">activate B</div><div class="line"></div><div class="line">B -&gt; C: DoWork</div><div class="line">activate C</div><div class="line">C --&gt; B: WorkDone</div><div class="line">destroy C</div><div class="line"></div><div class="line">B --&gt; A: Request Created</div><div class="line">deactivate B</div><div class="line"></div><div class="line">A --&gt; User: Done</div><div class="line">deactivate A</div><div class="line"></div><div class="line">&#123;% endplantuml %&#125;</div></pre></td></tr></table></figure>
<p>上述代码的效果如下：</p>
<img src="http://www.plantuml.com/plantuml/svg/TP8zJyCm48Rdtg-mojo12T41oNPQ2Qb2Y0enN-EZM6djzEnG2kA_4wSL-OBrdlShLY0KrfN8k1SRp8ij-yePxNUUnTLYiL2PXbRnXiuSsSP8JaIk23eiqA4YbvFuWebaziTpI4PKhekJsjNgYSoZP-NP4Fz1L_QLLjPHLx3fa-52UPlfR0amUKIEDhSbklXlVbSp2CgysHAFP4lluWFkITplIypZYAtj9udhcz5zkExytODEF5HuGQrd_5ozdjzBiqfYIH_m3O3fB9u3CPJj4Z5TMWvHw1s6C1KOXEpZDUNUcGvNVRx2dbi3f0enknDoNZ_PY-SYLTjtZFKO09cGcWlDb2vFwOy8iPKe09KaUkpMeCNix4uWyux0r6RsfzIh6bYtNZ8l5QRMTDDb8qiZKqCJqTdt0m00">
<h2 id="平台"><a href="#平台" class="headerlink" title="平台"></a>平台</h2><p>可以在chromeapp中找到： <a href="https://chrome.google.com/webstore/detail/uml-diagram-editor/hoepdgfgogmeofkgkpapbdpdjkplcode?utm_source=chrome-ntp-icon" rel="external nofollow noopener noreferrer" target="_blank">链接</a>, 开箱即用</p>
<p>另可以和idea和eclipse、atom等编辑器集成，hexo中也有相应的插件，具体可看下面的教程</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://skyao.github.io/2014/12/05/plantuml-installation/index.html" rel="external nofollow noopener noreferrer" target="_blank">(记录)plantuml安装配置</a></p>
</li>
<li><p><a href="http://keyun.ml/2016/07/25/2016-07-25-hexo-uml.html" rel="external nofollow noopener noreferrer" target="_blank">Hexo博客中的绘图</a></p>
</li>
<li><p><a href="http://plantuml.com/" rel="external nofollow noopener noreferrer" target="_blank">官网</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> uml </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在Intellij Idea中生成Javadoc]]></title>
      <url>http://qsli.github.io/2016/10/05/javadoc/</url>
      <content type="html"><![CDATA[<p><code>Tools | Generate JavaDoc</code>, 写上输出路径即可。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li><p>locale</p>
<p>简体中文写<code>zh_CN</code></p>
</li>
<li><p>编码</p>
<p>在<code>Other Commandline arguments</code>中指定</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-encoding UTF-8 -charset UTF-8</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><p><a href="http://www.cnblogs.com/cyberniuniu/p/5021910.html" rel="external nofollow noopener noreferrer" target="_blank">在 IntelliJ IDEA 中为自己设计的类库生成 JavaDoc</a></p>
</li>
<li><p><a href="https://www.jetbrains.com/help/idea/2016.2/generate-javadoc-dialog.html" rel="external nofollow noopener noreferrer" target="_blank">Generate JavaDoc Dialog</a></p>
</li>
<li><p><a href="https://www.jetbrains.com/help/idea/2016.2/generating-javadoc-reference-for-a-project.html" rel="external nofollow noopener noreferrer" target="_blank">Generating JavaDoc Reference for a Project</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> idea </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Javadoc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Mvc源码剖析]]></title>
      <url>http://qsli.github.io/2016/10/02/spring-mvc/</url>
      <content type="html"><![CDATA[<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><img src="/2016/10/02/spring-mvc/arch.jpg" alt="arch.jpg" title="">
<p>SpringMVC的核心是 <code>DispatcherServlet</code></p>
<h2 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h2><p>我们通过在<code>web.xml</code>中配置如下的语句，引入SpringMVC</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc-dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:/spring/mvc/mvc-dispatcher-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上述代码段指定了servlet的class是spring的<code>DispatcherServlet</code>，初始化配置文件是<code>mvc-dispatcher-servlet.xml</code>,以及servlet的加载顺序。</p>
<p>既然<code>DispatcherServlet</code>也是一个<code>Servlet</code>，那他肯定也遵从servlet的规范。<br>我们知道Servlet定义了如下的接口：<br><img src="/2016/10/02/spring-mvc/servlet-interface.jpg" alt="servlet-interface.jpg" title=""></p>
<p>其中比较重要的是<code>init</code>和<code>service</code>接口<br><code>init</code>方法在servlet的一生中只初始化一次，<code>service</code>接口是Servlet对外提供服务的接口<br>Servlet的生命周期如下:<br><img src="/2016/10/02/spring-mvc/Servlet_LifeCycle.jpg" alt="Servlet_LifeCycle.jpg" title=""></p>
<p>我们来看下<code>DispatcherServlet</code>的继承结构：</p>
<img src="/2016/10/02/spring-mvc/hierachy.jpg" alt="hierachy.jpg" title="">
<h3 id="init方法"><a href="#init方法" class="headerlink" title="init方法"></a>init方法</h3><p>直接去看<code>DispatcherServlet</code>的源码是没有发现<code>init</code>方法的， 它的<code>init</code>方法继承自<code>HttpServletBean</code>，源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">/**</span></div><div class="line"> * Map config parameters onto bean properties of this servlet, and</div><div class="line"> * invoke subclass initialization.</div><div class="line"> * <span class="doctag">@throws</span> ServletException if bean properties are invalid (or required</div><div class="line"> * properties are missing), or if subclass initialization fails.</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">	<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">		logger.debug(<span class="string">"Initializing servlet '"</span> + getServletName() + <span class="string">"'"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// Set bean properties from init parameters.</span></div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		PropertyValues pvs = <span class="keyword">new</span> ServletConfigPropertyValues(getServletConfig(), <span class="keyword">this</span>.requiredProperties);</div><div class="line">		BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(<span class="keyword">this</span>);</div><div class="line">		ResourceLoader resourceLoader = <span class="keyword">new</span> ServletContextResourceLoader(getServletContext());</div><div class="line">		bw.registerCustomEditor(Resource.class, <span class="keyword">new</span> ResourceEditor(resourceLoader, getEnvironment()));</div><div class="line">		initBeanWrapper(bw);</div><div class="line">		bw.setPropertyValues(pvs, <span class="keyword">true</span>);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">catch</span> (BeansException ex) &#123;</div><div class="line">		logger.error(<span class="string">"Failed to set bean properties on servlet '"</span> + getServletName() + <span class="string">"'"</span>, ex);</div><div class="line">		<span class="keyword">throw</span> ex;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// Let subclasses do whatever initialization they like.</span></div><div class="line">	initServletBean();</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">		logger.debug(<span class="string">"Servlet '"</span> + getServletName() + <span class="string">"' configured successfully"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在这个方法中，主要完成了bean属性的配置，并且给子类留下了相应的hook</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Let subclasses do whatever initialization they like.</span></div><div class="line">initServletBean();</div></pre></td></tr></table></figure>
<p>这个方法在FrameworkServlet中有具体的实现，现在看下FrameworkServlet中的实现。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Overridden method of &#123;<span class="doctag">@link</span> HttpServletBean&#125;, invoked after any bean properties</div><div class="line">	 * have been set. Creates this servlet's WebApplicationContext.</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">initServletBean</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">		getServletContext().log(<span class="string">"Initializing Spring FrameworkServlet '"</span> + getServletName() + <span class="string">"'"</span>);</div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.logger.isInfoEnabled()) &#123;</div><div class="line">			<span class="keyword">this</span>.logger.info(<span class="string">"FrameworkServlet '"</span> + getServletName() + <span class="string">"': initialization started"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">long</span> startTime = System.currentTimeMillis();</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			<span class="keyword">this</span>.webApplicationContext = initWebApplicationContext();</div><div class="line">			initFrameworkServlet();</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (ServletException ex) &#123;</div><div class="line">			<span class="keyword">this</span>.logger.error(<span class="string">"Context initialization failed"</span>, ex);</div><div class="line">			<span class="keyword">throw</span> ex;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (RuntimeException ex) &#123;</div><div class="line">			<span class="keyword">this</span>.logger.error(<span class="string">"Context initialization failed"</span>, ex);</div><div class="line">			<span class="keyword">throw</span> ex;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.logger.isInfoEnabled()) &#123;</div><div class="line">			<span class="keyword">long</span> elapsedTime = System.currentTimeMillis() - startTime;</div><div class="line">			<span class="keyword">this</span>.logger.info(<span class="string">"FrameworkServlet '"</span> + getServletName() + <span class="string">"': initialization completed in "</span> +</div><div class="line">					elapsedTime + <span class="string">" ms"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p><code>webApplicationContext</code>在此进行初始化，并且给子类留下了一个hook<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.webApplicationContext = initWebApplicationContext();</div><div class="line">initFrameworkServlet();</div></pre></td></tr></table></figure></p>
<p><code>initFrameworkServlet</code>在本类中并没有实现，用于子类控制</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* This method will be invoked after any bean properties have been set and</div><div class="line">* the WebApplicationContext has been loaded. The default implementation is empty;</div><div class="line">* subclasses may override this method to perform any initialization they require.</div><div class="line">* <span class="doctag">@throws</span> ServletException in case of an initialization exception</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initFrameworkServlet</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在initWebApplicationContext方法中，有一个空实现的方法onRefresh()<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Template method which can be overridden to add servlet-specific refresh work.</div><div class="line">* Called after successful context refresh.</div><div class="line">* &lt;p&gt;This implementation is empty.</div><div class="line">* <span class="doctag">@param</span> context the current WebApplicationContext</div><div class="line">* <span class="doctag">@see</span> #refresh()</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">(ApplicationContext context)</span> </span>&#123;</div><div class="line"><span class="comment">// For subclasses: do nothing by default.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个方法也是钩子方法，DispatcherServlet正是实现了这个方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">	* This implementation calls &#123;<span class="doctag">@link</span> #initStrategies&#125;.</div><div class="line">	*/</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">(ApplicationContext context)</span> </span>&#123;</div><div class="line">		initStrategies(context);</div><div class="line">	&#125;</div><div class="line"></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">		 * Initialize the strategy objects that this servlet uses.</div><div class="line">		 * &lt;p&gt;May be overridden in subclasses in order to initialize further strategy objects.</div><div class="line">		 */</div><div class="line">		<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initStrategies</span><span class="params">(ApplicationContext context)</span> </span>&#123;</div><div class="line">			initMultipartResolver(context);</div><div class="line">			initLocaleResolver(context);</div><div class="line">			initThemeResolver(context);</div><div class="line">			initHandlerMappings(context);</div><div class="line">			initHandlerAdapters(context);</div><div class="line">			initHandlerExceptionResolvers(context);</div><div class="line">			initRequestToViewNameTranslator(context);</div><div class="line">			initViewResolvers(context);</div><div class="line">			initFlashMapManager(context);</div><div class="line">		&#125;</div></pre></td></tr></table></figure>
<p>onRefresh方法中又调用了initStrategies方法，在这个方法中进行了大量的初始化工作。</p>
<p>视图解析器和HandlerMappings都是在这个方法中初始化的。</p>
<p>重点看一下initHandlerMappings方法，这个方法是初始化url映射的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Initialize the HandlerMappings used by this class.</div><div class="line">	 * &lt;p&gt;If no HandlerMapping beans are defined in the BeanFactory for this namespace,</div><div class="line">	 * we default to BeanNameUrlHandlerMapping.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initHandlerMappings</span><span class="params">(ApplicationContext context)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.handlerMappings = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.detectAllHandlerMappings) &#123;</div><div class="line">			<span class="comment">// Find all HandlerMappings in the ApplicationContext, including ancestor contexts.</span></div><div class="line">			Map&lt;String, HandlerMapping&gt; matchingBeans =</div><div class="line">					BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</div><div class="line">			<span class="keyword">if</span> (!matchingBeans.isEmpty()) &#123;</div><div class="line">				<span class="keyword">this</span>.handlerMappings = <span class="keyword">new</span> ArrayList&lt;HandlerMapping&gt;(matchingBeans.values());</div><div class="line">				<span class="comment">// We keep HandlerMappings in sorted order.</span></div><div class="line">				AnnotationAwareOrderComparator.sort(<span class="keyword">this</span>.handlerMappings);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				HandlerMapping hm = context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.class);</div><div class="line">				<span class="keyword">this</span>.handlerMappings = Collections.singletonList(hm);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</div><div class="line">				<span class="comment">// Ignore, we'll add a default HandlerMapping later.</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Ensure we have at least one HandlerMapping, by registering</span></div><div class="line">		<span class="comment">// a default HandlerMapping if no other mappings are found.</span></div><div class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.handlerMappings == <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">this</span>.handlerMappings = getDefaultStrategies(context, HandlerMapping.class);</div><div class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">				logger.debug(<span class="string">"No HandlerMappings found in servlet '"</span> + getServletName() + <span class="string">"': using default"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>  其根据 this.detectAllHandlerMappings 的值来确定是否扫描祖先定义的handlermappings，如果用户没有配置的话，就会使用默认的HandlerMapping<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** Detect all HandlerMappings or just expect "handlerMapping" bean? */</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> detectAllHandlerMappings = <span class="keyword">true</span>;</div></pre></td></tr></table></figure></p>
<h3 id="service方法"><a href="#service方法" class="headerlink" title="service方法"></a>service方法</h3><p>servlet接口中另外一个重要的方法叫做<code>service</code></p>
<p><code>service</code>方法最早是在<code>HttpServlet</code>类中实现的，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Dispatches client requests to the protected</div><div class="line">     * &lt;code&gt;service&lt;/code&gt; method. There's no need to</div><div class="line">     * override this method.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> req   the &#123;<span class="doctag">@link</span> HttpServletRequest&#125; object that</div><div class="line">     *                  contains the request the client made of</div><div class="line">     *                  the servlet</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> res   the &#123;<span class="doctag">@link</span> HttpServletResponse&#125; object that</div><div class="line">     *                  contains the response the servlet returns</div><div class="line">     *                  to the client                                </div><div class="line">     *</div><div class="line">     * <span class="doctag">@exception</span> IOException   if an input or output error occurs</div><div class="line">     *                              while the servlet is handling the</div><div class="line">     *                              HTTP request</div><div class="line">     *</div><div class="line">     * <span class="doctag">@exception</span> ServletException  if the HTTP request cannot</div><div class="line">     *                                  be handled</div><div class="line">     *</div><div class="line">     * <span class="doctag">@see</span> javax.servlet.Servlet#service</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span></div><div class="line">        <span class="keyword">throws</span> ServletException, IOException</div><div class="line">    &#123;</div><div class="line">        HttpServletRequest  request;</div><div class="line">        HttpServletResponse response;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!(req <span class="keyword">instanceof</span> HttpServletRequest &amp;&amp;</div><div class="line">                res <span class="keyword">instanceof</span> HttpServletResponse)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"non-HTTP request or response"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        request = (HttpServletRequest) req;</div><div class="line">        response = (HttpServletResponse) res;</div><div class="line"></div><div class="line">        service(request, response);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>它又调用自身的一个<code>service</code>方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Receives standard HTTP requests from the public</div><div class="line">    * &lt;code&gt;service&lt;/code&gt; method and dispatches</div><div class="line">    * them to the &lt;code&gt;do&lt;/code&gt;&lt;i&gt;XXX&lt;/i&gt; methods defined in</div><div class="line">    * this class. This method is an HTTP-specific version of the</div><div class="line">    * &#123;<span class="doctag">@link</span> javax.servlet.Servlet#service&#125; method. There's no</div><div class="line">    * need to override this method.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> req   the &#123;<span class="doctag">@link</span> HttpServletRequest&#125; object that</div><div class="line">    *                  contains the request the client made of</div><div class="line">    *                  the servlet</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> resp  the &#123;<span class="doctag">@link</span> HttpServletResponse&#125; object that</div><div class="line">    *                  contains the response the servlet returns</div><div class="line">    *                  to the client                                </div><div class="line">    *</div><div class="line">    * <span class="doctag">@exception</span> IOException   if an input or output error occurs</div><div class="line">    *                              while the servlet is handling the</div><div class="line">    *                              HTTP request</div><div class="line">    *</div><div class="line">    * <span class="doctag">@exception</span> ServletException  if the HTTP request</div><div class="line">    *                                  cannot be handled</div><div class="line">    *</div><div class="line">    * <span class="doctag">@see</span> javax.servlet.Servlet#service</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></div><div class="line">       <span class="keyword">throws</span> ServletException, IOException</div><div class="line">   &#123;</div><div class="line">       String method = req.getMethod();</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (method.equals(METHOD_GET)) &#123;</div><div class="line">           <span class="keyword">long</span> lastModified = getLastModified(req);</div><div class="line">           <span class="keyword">if</span> (lastModified == -<span class="number">1</span>) &#123;</div><div class="line">               <span class="comment">// servlet doesn't support if-modified-since, no reason</span></div><div class="line">               <span class="comment">// to go through further expensive logic</span></div><div class="line">               doGet(req, resp);</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               <span class="keyword">long</span> ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);</div><div class="line">               <span class="keyword">if</span> (ifModifiedSince &lt; lastModified) &#123;</div><div class="line">                   <span class="comment">// If the servlet mod time is later, call doGet()</span></div><div class="line">                   <span class="comment">// Round down to the nearest second for a proper compare</span></div><div class="line">                   <span class="comment">// A ifModifiedSince of -1 will always be less</span></div><div class="line">                   maybeSetLastModified(resp, lastModified);</div><div class="line">                   doGet(req, resp);</div><div class="line">               &#125; <span class="keyword">else</span> &#123;</div><div class="line">                   resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_HEAD)) &#123;</div><div class="line">           <span class="keyword">long</span> lastModified = getLastModified(req);</div><div class="line">           maybeSetLastModified(resp, lastModified);</div><div class="line">           doHead(req, resp);</div><div class="line"></div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_POST)) &#123;</div><div class="line">           doPost(req, resp);</div><div class="line"></div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_PUT)) &#123;</div><div class="line">           doPut(req, resp);</div><div class="line"></div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_DELETE)) &#123;</div><div class="line">           doDelete(req, resp);</div><div class="line"></div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_OPTIONS)) &#123;</div><div class="line">           doOptions(req,resp);</div><div class="line"></div><div class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_TRACE)) &#123;</div><div class="line">           doTrace(req,resp);</div><div class="line"></div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="comment">//</span></div><div class="line">           <span class="comment">// Note that this means NO servlet supports whatever</span></div><div class="line">           <span class="comment">// method was requested, anywhere on this server.</span></div><div class="line">           <span class="comment">//</span></div><div class="line"></div><div class="line">           String errMsg = lStrings.getString(<span class="string">"http.method_not_implemented"</span>);</div><div class="line">           Object[] errArgs = <span class="keyword">new</span> Object[<span class="number">1</span>];</div><div class="line">           errArgs[<span class="number">0</span>] = method;</div><div class="line">           errMsg = MessageFormat.format(errMsg, errArgs);</div><div class="line"></div><div class="line">           resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>这段代码就是根据请求的类型调用相应的处理方法</p>
<p>这个方法又在<code>FrameWorkServlet</code>中被重写，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Override the parent class implementation in order to intercept PATCH requests.</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">    <span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (HttpMethod.PATCH.matches(request.getMethod())) &#123;</div><div class="line">    processRequest(request, response);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">super</span>.service(request, response);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>又增加了一个处理PATCH请求的方法，其他的还是调用<code>HttpServlet</code>的实现。</p>
<p>同时，<code>FrameWorkServlet</code>又将<code>HttpServlet</code>中对应的各种HTTP请求的方法都进行了重写，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Delegate GET requests to processRequest/doService.</div><div class="line">	 * &lt;p&gt;Will also be invoked by HttpServlet's default implementation of &#123;<span class="doctag">@code</span> doHead&#125;,</div><div class="line">	 * with a &#123;<span class="doctag">@code</span> NoBodyResponse&#125; that just captures the content length.</div><div class="line">	 * <span class="doctag">@see</span> #doService</div><div class="line">	 * <span class="doctag">@see</span> #doHead</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">			<span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line"></div><div class="line">		processRequest(request, response);</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>所有的请求都被委托给了<code>processRequest</code>这个方法，它的实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Process this request, publishing an event regardless of the outcome.</div><div class="line">	 * &lt;p&gt;The actual event handling is performed by the abstract</div><div class="line">	 * &#123;<span class="doctag">@link</span> #doService&#125; template method.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">			<span class="keyword">throws</span> ServletException, IOException &#123;</div><div class="line"></div><div class="line">		<span class="keyword">long</span> startTime = System.currentTimeMillis();</div><div class="line">		Throwable failureCause = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">		LocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();</div><div class="line">		LocaleContext localeContext = buildLocaleContext(request);</div><div class="line"></div><div class="line">		RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();</div><div class="line">		ServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);</div><div class="line"></div><div class="line">		WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</div><div class="line">		asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class="keyword">new</span> RequestBindingInterceptor());</div><div class="line"></div><div class="line">		initContextHolders(request, localeContext, requestAttributes);</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			doService(request, response);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (ServletException ex) &#123;</div><div class="line">			failureCause = ex;</div><div class="line">			<span class="keyword">throw</span> ex;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">			failureCause = ex;</div><div class="line">			<span class="keyword">throw</span> ex;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">			failureCause = ex;</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> NestedServletException(<span class="string">"Request processing failed"</span>, ex);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">finally</span> &#123;</div><div class="line">			resetContextHolders(request, previousLocaleContext, previousAttributes);</div><div class="line">			<span class="keyword">if</span> (requestAttributes != <span class="keyword">null</span>) &#123;</div><div class="line">				requestAttributes.requestCompleted();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">				<span class="keyword">if</span> (failureCause != <span class="keyword">null</span>) &#123;</div><div class="line">					<span class="keyword">this</span>.logger.debug(<span class="string">"Could not complete request"</span>, failureCause);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">else</span> &#123;</div><div class="line">					<span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</div><div class="line">						logger.debug(<span class="string">"Leaving response open for concurrent processing"</span>);</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">else</span> &#123;</div><div class="line">						<span class="keyword">this</span>.logger.debug(<span class="string">"Successfully completed request"</span>);</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			publishRequestHandledEvent(request, response, startTime, failureCause);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>上述代码的异常处理很值得借鉴，上述代码中<code>doService(request, response)</code>是核心。</p>
<p>它是<code>FrameWorkServlet</code>中定义的一个接口，它在<code>DispatcherServlet</code>中被实现。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Subclasses must implement this method to do the work of request handling,</div><div class="line"> * receiving a centralized callback for GET, POST, PUT and DELETE.</div><div class="line"> * &lt;p&gt;The contract is essentially the same as that for the commonly overridden</div><div class="line"> * &#123;<span class="doctag">@code</span> doGet&#125; or &#123;<span class="doctag">@code</span> doPost&#125; methods of HttpServlet.</div><div class="line"> * &lt;p&gt;This class intercepts calls to ensure that exception handling and</div><div class="line"> * event publication takes place.</div><div class="line"> * <span class="doctag">@param</span> request current HTTP request</div><div class="line"> * <span class="doctag">@param</span> response current HTTP response</div><div class="line"> * <span class="doctag">@throws</span> Exception in case of any kind of processing failure</div><div class="line"> * <span class="doctag">@see</span> javax.servlet.http.HttpServlet#doGet</div><div class="line"> * <span class="doctag">@see</span> javax.servlet.http.HttpServlet#doPost</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></div><div class="line">    <span class="keyword">throws</span> Exception;</div></pre></td></tr></table></figure></p>
<p><code>DispatcherServlet</code>中的<code>doService</code>接口代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Exposes the DispatcherServlet-specific request attributes and delegates to &#123;<span class="doctag">@link</span> #doDispatch&#125;</div><div class="line">	 * for the actual dispatching.</div><div class="line">	 */</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">			String resumed = WebAsyncUtils.getAsyncManager(request).hasConcurrentResult() ? <span class="string">" resumed"</span> : <span class="string">""</span>;</div><div class="line">			logger.debug(<span class="string">"DispatcherServlet with name '"</span> + getServletName() + <span class="string">"'"</span> + resumed +</div><div class="line">					<span class="string">" processing "</span> + request.getMethod() + <span class="string">" request for ["</span> + getRequestUri(request) + <span class="string">"]"</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Keep a snapshot of the request attributes in case of an include,</span></div><div class="line">		<span class="comment">// to be able to restore the original attributes after the include.</span></div><div class="line">		Map&lt;String, Object&gt; attributesSnapshot = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">if</span> (WebUtils.isIncludeRequest(request)) &#123;</div><div class="line">			attributesSnapshot = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</div><div class="line">			Enumeration&lt;?&gt; attrNames = request.getAttributeNames();</div><div class="line">			<span class="keyword">while</span> (attrNames.hasMoreElements()) &#123;</div><div class="line">				String attrName = (String) attrNames.nextElement();</div><div class="line">				<span class="keyword">if</span> (<span class="keyword">this</span>.cleanupAfterInclude || attrName.startsWith(<span class="string">"org.springframework.web.servlet"</span>)) &#123;</div><div class="line">					attributesSnapshot.put(attrName, request.getAttribute(attrName));</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Make framework objects available to handlers and view objects.</span></div><div class="line">		request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());</div><div class="line">		request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class="keyword">this</span>.localeResolver);</div><div class="line">		request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class="keyword">this</span>.themeResolver);</div><div class="line">		request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());</div><div class="line"></div><div class="line">		FlashMap inputFlashMap = <span class="keyword">this</span>.flashMapManager.retrieveAndUpdate(request, response);</div><div class="line">		<span class="keyword">if</span> (inputFlashMap != <span class="keyword">null</span>) &#123;</div><div class="line">			request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));</div><div class="line">		&#125;</div><div class="line">		request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class="keyword">new</span> FlashMap());</div><div class="line">		request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class="keyword">this</span>.flashMapManager);</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			doDispatch(request, response);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</div><div class="line">				<span class="comment">// Restore the original attribute snapshot, in case of an include.</span></div><div class="line">				<span class="keyword">if</span> (attributesSnapshot != <span class="keyword">null</span>) &#123;</div><div class="line">					restoreAttributesAfterInclude(request, attributesSnapshot);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>每次请求过来都会将系统的一些属性塞到request的attribute中，以便后面的handlers和view能够访问到。</p>
<p>其中比较重要的是 <code>doDispatch(request, response)</code>，正是这个方法使得请求被真正的转发。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Process the actual dispatching to the handler.</div><div class="line">	 * &lt;p&gt;The handler will be obtained by applying the servlet's HandlerMappings in order.</div><div class="line">	 * The HandlerAdapter will be obtained by querying the servlet's installed HandlerAdapters</div><div class="line">	 * to find the first that supports the handler class.</div><div class="line">	 * &lt;p&gt;All HTTP methods are handled by this method. It's up to HandlerAdapters or handlers</div><div class="line">	 * themselves to decide which methods are acceptable.</div><div class="line">	 * <span class="doctag">@param</span> request current HTTP request</div><div class="line">	 * <span class="doctag">@param</span> response current HTTP response</div><div class="line">	 * <span class="doctag">@throws</span> Exception in case of any kind of processing failure</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		HttpServletRequest processedRequest = request;</div><div class="line">		HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</div><div class="line">		<span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">		WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</div><div class="line"></div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			ModelAndView mv = <span class="keyword">null</span>;</div><div class="line">			Exception dispatchException = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				processedRequest = checkMultipart(request);</div><div class="line">				multipartRequestParsed = (processedRequest != request);</div><div class="line"></div><div class="line">				<span class="comment">// Determine handler for the current request.</span></div><div class="line">				mappedHandler = getHandler(processedRequest);</div><div class="line">				<span class="keyword">if</span> (mappedHandler == <span class="keyword">null</span> || mappedHandler.getHandler() == <span class="keyword">null</span>) &#123;</div><div class="line">					noHandlerFound(processedRequest, response);</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="comment">// Determine handler adapter for the current request.</span></div><div class="line">				HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</div><div class="line"></div><div class="line">				<span class="comment">// Process last-modified header, if supported by the handler.</span></div><div class="line">				String method = request.getMethod();</div><div class="line">				<span class="keyword">boolean</span> isGet = <span class="string">"GET"</span>.equals(method);</div><div class="line">				<span class="keyword">if</span> (isGet || <span class="string">"HEAD"</span>.equals(method)) &#123;</div><div class="line">					<span class="keyword">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</div><div class="line">					<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">						logger.debug(<span class="string">"Last-Modified value for ["</span> + getRequestUri(request) + <span class="string">"] is: "</span> + lastModified);</div><div class="line">					&#125;</div><div class="line">					<span class="keyword">if</span> (<span class="keyword">new</span> ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</div><div class="line">						<span class="keyword">return</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="comment">// Actually invoke the handler.</span></div><div class="line">				mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</div><div class="line"></div><div class="line">				<span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</div><div class="line">					<span class="keyword">return</span>;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				applyDefaultViewName(processedRequest, mv);</div><div class="line">				mappedHandler.applyPostHandle(processedRequest, response, mv);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">				dispatchException = ex;</div><div class="line">			&#125;</div><div class="line">			processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">			triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Error err) &#123;</div><div class="line">			triggerAfterCompletionWithError(processedRequest, response, mappedHandler, err);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">finally</span> &#123;</div><div class="line">			<span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</div><div class="line">				<span class="comment">// Instead of postHandle and afterCompletion</span></div><div class="line">				<span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</div><div class="line">					mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				<span class="comment">// Clean up any resources used by a multipart request.</span></div><div class="line">				<span class="keyword">if</span> (multipartRequestParsed) &#123;</div><div class="line">					cleanupMultipart(processedRequest);</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>handler 获取的顺序是从DispatcherServlet的HandlerMapping中按顺序取出的</p>
<p>Handler对应的HandlerAdapter会从安装的HandlerAdapter找，将返回第一个合适的Adapter</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</div><div class="line"></div><div class="line"><span class="comment">// Determine handler for the current request.</span></div><div class="line">mappedHandler = getHandler(processedRequest);</div><div class="line">            ...</div><div class="line"><span class="comment">// Determine handler adapter for the current request.</span></div><div class="line">HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</div><div class="line">            ...</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// Actually invoke the handler.</span></div><div class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</div><div class="line"></div><div class="line">mappedHandler.applyPostHandle(processedRequest, response, mv);</div><div class="line"></div><div class="line">processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</div></pre></td></tr></table></figure>
<p>在applyPreHandle中也是检查拦截器的操作，并根据拦截器返回的布尔类型，判断是否进一步处理</p>
<p>其中在applyPostHandle中又检查是否有各种拦截器,调用拦截器的postHandle方法</p>
<p>处理完毕后，调用processDispatchResult方法将处理后的请求和mv进行分发</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//HandlerExecutionChain.java</span></div><div class="line"></div><div class="line">		<span class="comment">/**</span></div><div class="line">	 * Apply preHandle methods of registered interceptors.</div><div class="line">	 * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the execution chain should proceed with the</div><div class="line">	 * next interceptor or the handler itself. Else, DispatcherServlet assumes</div><div class="line">	 * that this interceptor has already dealt with the response itself.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">applyPreHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		HandlerInterceptor[] interceptors = getInterceptors();</div><div class="line">		<span class="keyword">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</div><div class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; interceptors.length; i++) &#123;</div><div class="line">				HandlerInterceptor interceptor = interceptors[i];</div><div class="line">				<span class="keyword">if</span> (!interceptor.preHandle(request, response, <span class="keyword">this</span>.handler)) &#123;</div><div class="line">					triggerAfterCompletion(request, response, <span class="keyword">null</span>);</div><div class="line">					<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">this</span>.interceptorIndex = i;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	* Apply postHandle methods of registered interceptors.</div><div class="line">	*/</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">applyPostHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, ModelAndView mv)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">	HandlerInterceptor[] interceptors = getInterceptors();</div><div class="line">	<span class="keyword">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = interceptors.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">			HandlerInterceptor interceptor = interceptors[i];</div><div class="line">			interceptor.postHandle(request, response, <span class="keyword">this</span>.handler, mv);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>handler处理后的结果是通过processDispatchResult传出去的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//DispatcherServlet.java</span></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Handle the result of handler selection and handler invocation, which is</div><div class="line">	 * either a ModelAndView or an Exception to be resolved to a ModelAndView.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></div><div class="line">			HandlerExecutionChain mappedHandler, ModelAndView mv, Exception exception) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">		<span class="keyword">boolean</span> errorView = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</div><div class="line">			<span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</div><div class="line">				logger.debug(<span class="string">"ModelAndViewDefiningException encountered"</span>, exception);</div><div class="line">				mv = ((ModelAndViewDefiningException) exception).getModelAndView();</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">else</span> &#123;</div><div class="line">				Object handler = (mappedHandler != <span class="keyword">null</span> ? mappedHandler.getHandler() : <span class="keyword">null</span>);</div><div class="line">				mv = processHandlerException(request, response, handler, exception);</div><div class="line">				errorView = (mv != <span class="keyword">null</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Did the handler return a view to render?</span></div><div class="line">		<span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.wasCleared()) &#123;</div><div class="line">			render(mv, request, response);</div><div class="line">			<span class="keyword">if</span> (errorView) &#123;</div><div class="line">				WebUtils.clearErrorRequestAttributes(request);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">				logger.debug(<span class="string">"Null ModelAndView returned to DispatcherServlet with name '"</span> + getServletName() +</div><div class="line">						<span class="string">"': assuming HandlerAdapter completed request handling"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</div><div class="line">			<span class="comment">// Concurrent handling started during a forward</span></div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</div><div class="line">			mappedHandler.triggerAfterCompletion(request, response, <span class="keyword">null</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>去各种判断，核心的方法就在<code>render(mv, request, response)</code>;</p>
<p>它负责渲染返回的<code>ModelAndView</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//DispatcherServlet.java</span></div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	* Render the given ModelAndView.</div><div class="line">	* &lt;p&gt;This is the last stage in handling a request. It may involve resolving the view by name.</div><div class="line">	* <span class="doctag">@param</span> mv the ModelAndView to render</div><div class="line">	* <span class="doctag">@param</span> request current HTTP servlet request</div><div class="line">	* <span class="doctag">@param</span> response current HTTP servlet response</div><div class="line">	* <span class="doctag">@throws</span> ServletException if view is missing or cannot be resolved</div><div class="line">	* <span class="doctag">@throws</span> Exception if there's a problem rendering the view</div><div class="line">	*/</div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(ModelAndView mv, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">		<span class="comment">// Determine locale for request and apply it to the response.</span></div><div class="line">		Locale locale = <span class="keyword">this</span>.localeResolver.resolveLocale(request);</div><div class="line">		response.setLocale(locale);</div><div class="line"></div><div class="line">		View view;</div><div class="line">		<span class="keyword">if</span> (mv.isReference()) &#123;</div><div class="line">			<span class="comment">// We need to resolve the view name.</span></div><div class="line">			view = resolveViewName(mv.getViewName(), mv.getModelInternal(), locale, request);</div><div class="line">			<span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"Could not resolve view with name '"</span> + mv.getViewName() +</div><div class="line">						<span class="string">"' in servlet with name '"</span> + getServletName() + <span class="string">"'"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">else</span> &#123;</div><div class="line">			<span class="comment">// No need to lookup: the ModelAndView object contains the actual View object.</span></div><div class="line">			view = mv.getView();</div><div class="line">			<span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"ModelAndView ["</span> + mv + <span class="string">"] neither contains a view name nor a "</span> +</div><div class="line">						<span class="string">"View object in servlet with name '"</span> + getServletName() + <span class="string">"'"</span>);</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Delegate to the View object for rendering.</span></div><div class="line">		<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">			logger.debug(<span class="string">"Rendering view ["</span> + view + <span class="string">"] in DispatcherServlet with name '"</span> + getServletName() + <span class="string">"'"</span>);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			view.render(mv.getModelInternal(), request, response);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">				logger.debug(<span class="string">"Error rendering view ["</span> + view + <span class="string">"] in DispatcherServlet with name '"</span> +</div><div class="line">						getServletName() + <span class="string">"'"</span>, ex);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">throw</span> ex;</div><div class="line">		&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>这个函数解析mv对象，如果是一个引用名就查找对应的view，最终返回一个View对象，</p>
<p>然后将渲染的工作委托给这个view对象，<code>view.render(mv.getModelInternal(), request, response);</code></p>
<p>其中<code>resolveViewName</code>方法遍历 <code>DispatcherServlet</code>中注册的<code>viewResolver</code>，返回第一个非空的结果</p>
<p>查找视图名称的方法如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/** List of ViewResolvers used by this servlet */</span></div><div class="line"><span class="keyword">private</span> List&lt;ViewResolver&gt; viewResolvers;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line">	* Resolve the given view name into a View object (to be rendered).</div><div class="line">	* &lt;p&gt;The default implementations asks all ViewResolvers of this dispatcher.</div><div class="line">	* Can be overridden for custom resolution strategies, potentially based on</div><div class="line">	* specific model attributes or request parameters.</div><div class="line">	* <span class="doctag">@param</span> viewName the name of the view to resolve</div><div class="line">	* <span class="doctag">@param</span> model the model to be passed to the view</div><div class="line">	* <span class="doctag">@param</span> locale the current locale</div><div class="line">	* <span class="doctag">@param</span> request current HTTP servlet request</div><div class="line">	* <span class="doctag">@return</span> the View object, or &#123;<span class="doctag">@code</span> null&#125; if none found</div><div class="line">	* <span class="doctag">@throws</span> Exception if the view cannot be resolved</div><div class="line">	* (typically in case of problems creating an actual View object)</div><div class="line">	* <span class="doctag">@see</span> ViewResolver#resolveViewName</div><div class="line">	*/</div><div class="line">	<span class="function"><span class="keyword">protected</span> View <span class="title">resolveViewName</span><span class="params">(String viewName, Map&lt;String, Object&gt; model, Locale locale,</span></span></div><div class="line">		HttpServletRequest request) <span class="keyword">throws</span> Exception &#123;</div><div class="line"></div><div class="line">			<span class="keyword">for</span> (ViewResolver viewResolver : <span class="keyword">this</span>.viewResolvers) &#123;</div><div class="line">				View view = viewResolver.resolveViewName(viewName, locale);</div><div class="line">				<span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</div><div class="line">					<span class="keyword">return</span> view;</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>最终视图的渲染是View中定义的<code>render</code>方法进行的，它是一个抽象的接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">	 * Render the view given the specified model.</div><div class="line">	 * &lt;p&gt;The first step will be preparing the request: In the JSP case,</div><div class="line">	 * this would mean setting model objects as request attributes.</div><div class="line">	 * The second step will be the actual rendering of the view,</div><div class="line">	 * for example including the JSP via a RequestDispatcher.</div><div class="line">	 * <span class="doctag">@param</span> model Map with name Strings as keys and corresponding model</div><div class="line">	 * objects as values (Map can also be &#123;<span class="doctag">@code</span> null&#125; in case of empty model)</div><div class="line">	 * <span class="doctag">@param</span> request current HTTP request</div><div class="line">	 * <span class="doctag">@param</span> response HTTP response we are building</div><div class="line">	 * <span class="doctag">@throws</span> Exception if rendering failed</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">void</span> <span class="title">render</span><span class="params">(Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception</span>;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring mvc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS跨域原理]]></title>
      <url>http://qsli.github.io/2016/10/02/jsonp/</url>
      <content type="html"><![CDATA[<h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><blockquote>
<p>同源策略限制了一个源（origin）中加载文本或脚本与来自其它源（origin）中资源的交互方式。</p>
</blockquote>
<p>例如在使用XMLHttpRequest 或 <img> 标签时则会受到同源策略的约束。交互通常分为三类：</p>
<ol>
<li><p>通常允许进行跨域写操作（<code>Cross-origin writes</code>）。例如链接（links），重定向以及表单提交。特定少数的HTTP请求需要添加 preflight。</p>
</li>
<li><p>通常允许跨域资源嵌入（<code>Cross-origin embedding</code>）。</p>
</li>
<li>通常不允许跨域读操作（<code>Cross-origin reads</code>）。</li>
</ol>
<p>下表给出了相对<code>http://store.company.com/dir/page.html</code>同源检测的示例:</p>
<table>
<thead>
<tr>
<th>URL</th>
<th>结果</th>
<th>原因</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://store.company.com/dir2/other.html" rel="external nofollow noopener noreferrer" target="_blank">http://store.company.com/dir2/other.html</a></td>
<td>成功</td>
<td></td>
</tr>
<tr>
<td><a href="http://store.company.com/dir/inner/another.html" rel="external nofollow noopener noreferrer" target="_blank">http://store.company.com/dir/inner/another.html</a></td>
<td>成功</td>
<td></td>
</tr>
<tr>
<td><a href="https://store.company.com/secure.html" rel="external nofollow noopener noreferrer" target="_blank">https://store.company.com/secure.html</a></td>
<td>失败</td>
<td>协议不同</td>
</tr>
<tr>
<td><a href="http://store.company.com:81/dir/etc.html" rel="external nofollow noopener noreferrer" target="_blank">http://store.company.com:81/dir/etc.html</a></td>
<td>失败</td>
<td>端口不同</td>
</tr>
<tr>
<td><a href="http://news.company.com/dir/other.html" rel="external nofollow noopener noreferrer" target="_blank">http://news.company.com/dir/other.html</a></td>
<td>失败</td>
<td>主机名不同</td>
</tr>
</tbody>
</table>
<h2 id="ajax-跨域"><a href="#ajax-跨域" class="headerlink" title="ajax 跨域"></a>ajax 跨域</h2><blockquote>
<p>同源政策规定，AJAX请求只能发给同源的网址，否则就报错。</p>
</blockquote>
<p>请求其他域资源的时候，由于同源策略的限制一般会出现如下的错误：</p>
<blockquote>
<p>XMLHttpRequest cannot load <a href="http://xxxxx" rel="external nofollow noopener noreferrer" target="_blank">http://xxxxx</a>. No ‘Access-Control-Allow-Origin’ header is present on the requested resource. Origin ‘null’ is therefore not allowed access. The response had HTTP status code 500.</p>
</blockquote>
<h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p><code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;</code> 标签是支持跨域的，JSONP的原理就是使用这个标签。</p>
<p>服务器会在传给浏览器前将JSON数据填充到回调函数中</p>
<script src="//gist.github.com/cc896797f4ef746e9cbc75b8f6ebc24f.js"></script>
<p>上述代码中<code>return param + &#39;(&#39; + json.dumps(data) + &#39;)&#39;</code>是将返回的数据填充到回调函数中</p>
<p>前端的代码如下：</p>
<script src="//gist.github.com/8d90c2a0599818488a647177b4f196c2.js"></script>
<p>使用了jQuery的ajax请求</p>
<p><strong>但是JSONP的方式只支持get请求</strong></p>
<h3 id="CORS-Cross-Origin-Resource-Sharing"><a href="#CORS-Cross-Origin-Resource-Sharing" class="headerlink" title="CORS (Cross-Origin Resource Sharing)"></a>CORS (<code>Cross-Origin Resource Sharing</code>)</h3><p>CORS是一个W3C标准, 不仅支持GET方式还支持POST方式的跨域请求</p>
<blockquote>
<p>浏览器将CORS请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。</p>
</blockquote>
<p>请求的流程图如下：<br><img src="/2016/10/02/jsonp/cors.png" alt="cors.png" title=""></p>
<p>详细原理参考阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" rel="external nofollow noopener noreferrer" target="_blank">跨域资源共享 CORS 详解</a></p>
<h3 id="Websocket"><a href="#Websocket" class="headerlink" title="Websocket"></a>Websocket</h3><blockquote>
<p>WebSocket是一种通信协议，使用ws://（非加密）和wss://（加密）作为协议前缀。该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信。</p>
</blockquote>
<p>详细原理参考阮一峰老师的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy" rel="external nofollow noopener noreferrer" target="_blank">浏览器的同源策略</a></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><p><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" rel="external nofollow noopener noreferrer" target="_blank">跨域资源共享 CORS 详解</a></p>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy" rel="external nofollow noopener noreferrer" target="_blank">浏览器的同源策略</a></p>
</li>
<li><p><a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" rel="external nofollow noopener noreferrer" target="_blank">浏览器同源政策及其规避方法</a></p>
</li>
<li><p><a href="http://blog.csdn.net/fdipzone/article/details/46390573" rel="external nofollow noopener noreferrer" target="_blank"> ajax 设置Access-Control-Allow-Origin实现跨域访问</a></p>
</li>
<li><p><a href="http://liuwanlin.info/corsxiang-jie/" rel="external nofollow noopener noreferrer" target="_blank">使用CORS（译）</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> fe </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ajax </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据库分页]]></title>
      <url>http://qsli.github.io/2016/09/30/pagination/</url>
      <content type="html"><![CDATA[<h2 id="逻辑分页"><a href="#逻辑分页" class="headerlink" title="逻辑分页"></a>逻辑分页</h2><p>就是将所有的结果集拿出来，然后在程序中进行截取，由于所有的数据都是在内存中的，占用内存比较大</p>
<h2 id="物理分页"><a href="#物理分页" class="headerlink" title="物理分页"></a>物理分页</h2><p>物理分页是指基于数据库提供的类似 <code>limit offset,rows</code>这样的语法。</p>
<p>但是，比如<code>limit 10000,20</code>,  就会读取10020条数据，但是只会返回后面20条数据。</p>
<h2 id="手工计算"><a href="#手工计算" class="headerlink" title="手工计算"></a>手工计算</h2><p>如果id是有序的，可以做一个简单的转换，比如使用  <code>where id between 10000 and 10020</code>, 这样的效率就会相对的高些</p>
<h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p> <a href="PPC2009_mysql_pagination.pdf">PPC2009_mysql_pagination.pdf</a></p>
]]></content>
      
        <categories>
            
            <category> base </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Postgre数据库简介]]></title>
      <url>http://qsli.github.io/2016/09/27/postgre/</url>
      <content type="html"><![CDATA[<p><img src="https://www.postgresql.org/media/img/layout/hdr_left.png" alt=""></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>PostgreSQL是自由的对象-关系型数据库服务器（数据库管理系统）</p>
<p><a href="https://zh.wikipedia.org/wiki/PostgreSQL" rel="external nofollow noopener noreferrer" target="_blank">https://zh.wikipedia.org/wiki/PostgreSQL</a></p>
</blockquote>
<p>发展流程:</p>
<img src="/2016/09/27/postgre/history.jpg" alt="history.jpg" title="">
<blockquote>
<p>PostgreSQL 的前身是 BSD 的始于 1977 年的 Ingres 项目，82年，项目领导人Michael Stonebraker 将其商业化。85年正式更名为Postgres。</p>
<p>92年两名伯克利的研究生在做研究生课题的时候，用SQL92替换了原有的Postquel作为查询语言，并将其更名为Postgres95。</p>
<p>96年，一群黑客们接手了Postgres95，开始修改及稳定它的代码，并与同年8月发布了第一个开源版本，将其更名为PostgreSQL。</p>
</blockquote>
<p>PG支持的数据类型非常丰富，他支持任意精度的数值类型，无限长度的文本类型，同时具有一些nosql的特性，也可以存储hash表（hstore），ltree树状结构，支持jsonb、xml、array的存储和操作。同时PG提供了对IP地址和地理信息的良好支持。</p>
<p>PG支持的语言非常多，各种脚本语言，例如：Lua、Perl、Python、Ruby等，也支持各种编译语言，如c、c++和JAVA等，对统计语言R也有良好的支持。</p>
<p>架构图：</p>
<img src="/2016/09/27/postgre/arch.jpg" alt="arch.jpg" title="">
<blockquote>
<p>图片来自<br><a href="https://wiki.postgresql.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E6%AF%94" rel="external nofollow noopener noreferrer" target="_blank">https://wiki.postgresql.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E6%AF%94</a></p>
</blockquote>
<p>PostgreSQL采用的是C/S结构，一个客户端对应一个服务器端的守护进程(开销会略大)</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>参考官网：<a href="https://www.postgresql.org/download/" rel="external nofollow noopener noreferrer" target="_blank">https://www.postgresql.org/download/</a></p>
<p>也可以参考阮一峰老师的这篇 <a href="http://www.ruanyifeng.com/blog/2013/12/getting_started_with_postgresql.html" rel="external nofollow noopener noreferrer" target="_blank">PostgreSQL新手入门</a></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><a href="http://www.postgres.cn/docs/9.5/" rel="external nofollow noopener noreferrer" target="_blank">PostgreSQL 9.5.3 中文在线手册</a></p>
<p><a href="https://github.com/postgres-cn/pgdoc-cn/releases" rel="external nofollow noopener noreferrer" target="_blank">离线中文手册</a></p>
<h3 id="psql-–-PostgreSQL的交互式终端的使用"><a href="#psql-–-PostgreSQL的交互式终端的使用" class="headerlink" title="psql –  PostgreSQL的交互式终端的使用"></a>psql –  PostgreSQL的交互式终端的使用</h3><p>详细请参见 <a href="http://www.postgres.cn/docs/9.5/app-psql.html" rel="external nofollow noopener noreferrer" target="_blank">psql</a></p>
<p>登录到数据库，类似mysql<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">psql -U dbuser -d exampledb -h 127.0.0.1 -p 5432</div></pre></td></tr></table></figure></p>
<blockquote>
<p>-U指定用户，-d指定数据库，-h指定服务器，-p指定端口。</p>
</blockquote>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>\h</td>
<td>查看SQL命令的解释，比如\h select。</td>
</tr>
<tr>
<td>\?</td>
<td>查看psql命令列表。</td>
</tr>
<tr>
<td>\l</td>
<td>列出所有数据库。</td>
</tr>
<tr>
<td>\c [database_name]：</td>
<td>连接其他数据库。</td>
</tr>
<tr>
<td>\d</td>
<td>列出当前数据库的所有表格。</td>
</tr>
<tr>
<td>\d [table_name]：</td>
<td>列出某一张表格的结构。</td>
</tr>
<tr>
<td>\di</td>
<td>查看索引</td>
</tr>
<tr>
<td>\du</td>
<td>列出所有用户。</td>
</tr>
<tr>
<td>\e</td>
<td>打开文本编辑器。</td>
</tr>
<tr>
<td>\! pwd</td>
<td>显示当前工作目录</td>
</tr>
<tr>
<td>\q</td>
<td>退出交互shell</td>
</tr>
<tr>
<td>\conninfo</td>
<td>列出当前数据库和连接的信息。</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">exampledb=&gt; \d</div><div class="line">             关联列表             </div><div class="line">架构模式 |   名称   |  类型  | 拥有者</div><div class="line">----------+----------+--------+--------</div><div class="line">public   | user_tbl | 数据表 | dbuser</div><div class="line">(1 行记录)</div><div class="line"></div><div class="line">exampledb=&gt; \l</div><div class="line">                                                      数据库列表</div><div class="line"> 名称    |  拥有者  | 字元编码 |            校对规则            |             Ctype              |       存取权限</div><div class="line">-----------+----------+----------+--------------------------------+--------------------------------+-----------------------</div><div class="line">exampledb | dbuser   | UTF8     | Chinese (Simplified)_China.936 | Chinese (Simplified)_China.936 | =Tc/dbuser           +</div><div class="line">         |          |          |                                |                                | dbuser=CTc/dbuser</div><div class="line">postgres  | postgres | UTF8     | Chinese (Simplified)_China.936 | Chinese (Simplified)_China.936 |</div><div class="line">template0 | postgres | UTF8     | Chinese (Simplified)_China.936 | Chinese (Simplified)_China.936 | =c/postgres          +</div><div class="line">         |          |          |                                |                                | postgres=CTc/postgres</div><div class="line">template1 | postgres | UTF8     | Chinese (Simplified)_China.936 | Chinese (Simplified)_China.936 | =c/postgres          +</div><div class="line">         |          |          |                                |                                | postgres=CTc/postgres</div><div class="line">(4 行记录)</div><div class="line"></div><div class="line">exampledb=&gt; \du</div><div class="line">                           角色列表</div><div class="line">角色名称 |                    属性                    | 成员属于</div><div class="line">----------+--------------------------------------------+----------</div><div class="line">dbuser   |                                            | &#123;&#125;</div><div class="line">postgres | 超级用户, 建立角色, 建立 DB, 复制, 绕过RLS | &#123;&#125;</div><div class="line"></div><div class="line"></div><div class="line">exampledb=&gt; \dt</div><div class="line">             关联列表</div><div class="line">架构模式 |   名称   |  类型  | 拥有者</div><div class="line">----------+----------+--------+--------</div><div class="line">public   | user_tbl | 数据表 | dbuser</div><div class="line">(1 行记录)</div><div class="line"></div><div class="line">exampledb=&gt; \d user_tbl;</div><div class="line">         数据表 &quot;public.user_tbl&quot;</div><div class="line">  栏位     |         类型          | 修饰词</div><div class="line">-------------+-----------------------+--------</div><div class="line">name        | character varying(20) |</div><div class="line">signup_date | date                  |</div></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol>
<li><p><a href="http://www.infoq.com/cn/articles/underlying-storage-of-uber-change-from-mysql-to-postgres" rel="external nofollow noopener noreferrer" target="_blank">Uber的底层存储从Postgres换成MySQL之后</a></p>
</li>
<li><p><a href="http://database.51cto.com/art/200511/10875.htm" rel="external nofollow noopener noreferrer" target="_blank">PostgreSQL数据库的特点</a></p>
</li>
<li><p><a href="http://www.ruanyifeng.com/blog/2013/12/getting_started_with_postgresql.html" rel="external nofollow noopener noreferrer" target="_blank">PostgreSQL新手入门_阮一峰</a></p>
</li>
<li><p><a href="http://book.51cto.com/art/201201/313178.htm" rel="external nofollow noopener noreferrer" target="_blank">PostgreSQL简介及发展历程</a></p>
</li>
<li><p><a href="https://wiki.postgresql.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E6%AF%94" rel="external nofollow noopener noreferrer" target="_blank">数据库对比_wiki</a></p>
</li>
<li><p><a href="https://github.com/postgres-cn/pgdoc-cn" rel="external nofollow noopener noreferrer" target="_blank">postgres-cn/pgdoc-cn</a></p>
</li>
<li><p><a href="http://blog.51yip.com/pgsql/1525.html" rel="external nofollow noopener noreferrer" target="_blank">postgresql 查看数据库,表,索引,表空间以及大小</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> base </category>
            
        </categories>
        
        
        <tags>
            
            <tag> postgresql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Unicode历史]]></title>
      <url>http://qsli.github.io/2016/09/26/character-encoding/</url>
      <content type="html"><![CDATA[<h1 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h1><blockquote>
<p>字符编码（英语：Character encoding）、字集码是把字符集中的字符编码为指定集合中某一对象（例如：比特模式、自然数序列、8位组或者电脉冲），以便文本在计算机中存储和通过通信网络的传递。</p>
</blockquote>
<p>简单的说，就是计算机只认<code>0</code>和<code>1</code>，于是在数据取出来的时候根据一个类似字典的东西，按照一定的规则将比特信息转换成对应的字符信息，这样人们才可以理解到底存储了什么。</p>
<h2 id="ASCII编码"><a href="#ASCII编码" class="headerlink" title="ASCII编码"></a>ASCII编码</h2><p><code>ASCII</code>（American Standard Code for Information Interchange） 编码是基于拉丁字母的一套编码系统。</p>
<p><code>ASCII</code>使用指定的<code>7</code> 位或<code>8</code> 位二进制数组合来表示<code>128</code> 或<code>256</code> 种可能的字符。</p>
<blockquote>
<p>ASCII的局限在于只能显示26个基本拉丁字母、阿拉伯数目字和英式标点符号，因此只能用于显示现代美国英语（而且在处理英语当中的外来词如naïve、café、élite等等时，所有重音符号都不得不去掉，即使这样做会违反拼写规则）。而EASCII虽然解决了部分西欧语言的显示问题，但对更多其他语言依然无能为力。因此现在的软件系统大多采用Unicode。</p>
</blockquote>
<p>后续有其扩展版本<code>EASCII</code>。这个扩展的版本虽然扩充了一些字符，增大了EASCII的表达能力，但是仍不能满足全球各个国家的需求。于是各个国家就自己搞了一套编码的规则，但是随着web的发展，越来越需要一套统一的编解码标准，于是Unicode应运而出。</p>
<h2 id="Unicode编码"><a href="#Unicode编码" class="headerlink" title="Unicode编码"></a>Unicode编码</h2><img src="/2016/09/26/character-encoding/Unicode_logo.jpg" alt="Unicode_logo.jpg" title="">
<blockquote>
<p>Unicode provides a unique number for every character,</p>
<p>no matter what the platform,</p>
<p>no matter what the program,</p>
<p>no matter what the language.</p>
</blockquote>
<p>定义：</p>
<blockquote>
<p>Unicode（中文：万国码、国际码、统一码、单一码）是计算机科学领域里的一项业界标准。它对世界上大部分的文字系统进行了整理、编码，使得电脑可以用更为简单的方式来呈现和处理文字。</p>
<p>In Unicode, a character is dened as the smallest component of a written language that has semantic value.<br>The number assigned to a character is called a <strong>code point</strong>. A code point is denoted by U+ following by a<br>hexadecimal number from 4 to 8 digits long. Most of the code points in use are 4 digits long. For example,<br><code>U+03C6</code> is the code point for the Greek character f.</p>
</blockquote>
<img src="/2016/09/26/character-encoding/unicode-layout.jpg" alt="unicode-layout.jpg" title="">
<blockquote>
<p>在文字处理方面，统一码为每一个字符而非字形定义唯一的代码（即一个整数）。换句话说，统一码以一种抽象的方式（即数字）来处理字符，并将视觉上的演绎工作（例如字体大小、外观形状、字体形态、文体等）留给其他软件来处理，例如网页浏览器或是文字处理器。</p>
</blockquote>
<h3 id="Java中判断是否是中文字符"><a href="#Java中判断是否是中文字符" class="headerlink" title="Java中判断是否是中文字符"></a>Java中判断是否是中文字符</h3><blockquote>
<p>Java判断一个字符串是否有中文一般情况是利用Unicode编码(CJK统一汉字的编码区间：0x4e00–0x9fbb)的正则来做判断，但是其实这个区间来判断中文不是非常精确，因为有些中文的标点符号比如：，。等等是不能识别的。</p>
</blockquote>
<p>具体的参见参考中的<code>Java 完美判断中文字符</code></p>
<h3 id="遗留的问题"><a href="#遗留的问题" class="headerlink" title="遗留的问题"></a>遗留的问题</h3><blockquote>
<p>需要注意的是，Unicode只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。</p>
</blockquote>
<p>存储中存在的问题：</p>
<ol>
<li><p>如何区分Unicode和ASCII码？</p>
</li>
<li><p>如何存储能节省空间？</p>
</li>
</ol>
<blockquote>
<p>它们造成的结果是：</p>
<p>1）出现了Unicode的多种存储方式，也就是说有许多种不同的二进制格式，可以用来表示Unicode。</p>
<p>2）Unicode在很长一段时间内无法推广，直到互联网的出现。</p>
</blockquote>
<h3 id="CJK"><a href="#CJK" class="headerlink" title="CJK"></a>CJK</h3><blockquote>
<p>Q: What does the term “CJK” mean?</p>
<p>A: It is a commonly used acronym for “Chinese, Japanese, and Korean”. The term “CJK character” generally refers to “Chinese characters”, or more specifically, the Chinese (= Han) ideographs used in the writing systems of the Chinese and Japanese languages, occasionally for Korean, and historically in Vietnam.</p>
</blockquote>
<h3 id="UTF-8编码"><a href="#UTF-8编码" class="headerlink" title="UTF-8编码"></a>UTF-8编码</h3><blockquote>
<p>互联网的普及，强烈要求出现一种统一的编码方式。<strong>UTF-8就是在互联网上使用最广的一种Unicode的实现方式。</strong>其他实现方式还包括UTF-16（字符用两个字节或四个字节表示）和UTF-32（字符用四个字节表示），不过在互联网上基本不用。重复一遍，这里的关系是，UTF-8是Unicode的实现方式之一。</p>
</blockquote>
<h4 id="8的含义"><a href="#8的含义" class="headerlink" title="8的含义"></a>8的含义</h4><blockquote>
<p>unicode在很长一段时间内无法推广，直到互联网的出现，为解决unicode如何在网络上传输的问题，于是面向传输的众多 <strong>UTF（UCS Transfer Format）标准出现了，顾名思义，UTF-8就是每次8个位传输数据，而UTF-16就是每次16个位。</strong>UTF-8就是在互联网上使用最广的一种unicode的实现方式，这是为传输而设计的编码，并使编码无国界，这样就可以显示全世界上所有文化的字符了。</p>
</blockquote>
<h4 id="UTF-8和Unicode"><a href="#UTF-8和Unicode" class="headerlink" title="UTF-8和Unicode"></a>UTF-8和Unicode</h4><blockquote>
<p>UTF-8最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度，当字符在ASCII 码的范围时，就用一个字节表示，保留了ASCII字符一个字节的编码做为它的一部分，注意的是unicode一个中文字符占2个字节，而UTF-8一个中 文字符占3个字节）。从unicode到uft-8并不是直接的对应，而是要过一些算法和规则来转换。</p>
</blockquote>
<h3 id="编码方式"><a href="#编码方式" class="headerlink" title="编码方式"></a>编码方式</h3><blockquote>
<p>UTF-8的编码规则很简单，只有二条：</p>
<p>1）对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。</p>
<p>2）对于n字节的符号（n&gt;1），<strong>第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10</strong>。剩下的没有提及的二进制位，全部为这个符号的unicode码。</p>
</blockquote>
<p>所以如果第一个字节是<code>0</code>开头的，那么就是兼容ASCII码的单字节字符；如果第一个字节是<code>1</code>开头的就是多字节字符，数一数前面有多少个<code>1</code>，就知道这个字符占了几个字节。</p>
<p>所以UTF-8编码后的二进制形式应该如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">0xxxxxxx 1个byte</div><div class="line"></div><div class="line">110xxxxx 10xxxxxx 2个byte</div><div class="line"></div><div class="line">1110xxxx 10xxxxxx 10xxxxxx 3个byte</div><div class="line"></div><div class="line">11110xxx 10xxxxxx 10xxxxxx 10xxxxxx 4个byte</div><div class="line"></div><div class="line">111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 5个byte</div><div class="line"></div><div class="line">111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 6个byte</div></pre></td></tr></table></figure>
<blockquote>
<p>The bytes <code>0xFE(11111110)</code> and <code>0xFF(11111111)</code> are never used in the UTF-8 encoding.</p>
</blockquote>
<p>这两个特殊的字节被用来标示是大端编码和小端编码</p>
<p>UTF-8编码的范围和Unicode对应的关系如下：</p>
<table>
<thead>
<tr>
<th>总比特数</th>
<th>Code Point占的位数</th>
<th>范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>7</td>
<td>00000000 - 0000007F</td>
</tr>
<tr>
<td>2</td>
<td>11</td>
<td>00000080 - 000007FF</td>
</tr>
<tr>
<td>3</td>
<td>16</td>
<td>00000800 - 0000FFFF</td>
</tr>
<tr>
<td>4</td>
<td>21</td>
<td>00001000 - 001FFFFF</td>
</tr>
<tr>
<td>5</td>
<td>26</td>
<td>00200000 - 03FFFFFF</td>
</tr>
<tr>
<td>6</td>
<td>31</td>
<td>04000000 - FFFFFFFF</td>
</tr>
</tbody>
</table>
<p>编码示例：</p>
<p><code>U+05E7</code> 使用<code>UTF-8</code>编码示例:</p>
<ol>
<li><p>查上表得知， <code>05E7</code>在 <code>0080 - 07FF</code> 范围内，总共占2个字节<br>应该是类似 <code>110xxxxx 10xxxxxx</code></p>
</li>
<li><p>将其写成二进制形式，<code>0000 0101 1110 0111</code></p>
</li>
<li><p>将数据替换上述的<code>x</code>，得到 <code>11010111 10100111 = 0xD7A7</code></p>
</li>
</ol>
<h4 id="字节序"><a href="#字节序" class="headerlink" title="字节序"></a>字节序</h4><p>UTF-8最多使用6个byte表示一个字符，于是就存在一个字节序的问题。<br>字节序分为两种：</p>
<ol>
<li><strong>Little-Endian</strong>:<br>字节序低位在前  小尾 在操作系统上很常用，也是计算机系统上最常用的字节序</li>
<li><strong>Big-Endian</strong>: 字节序高位在前 大尾  也称为网络字节序</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">16进制数字0x12345678，little-endian的存储为:  0x78 0x56 0x34 0x12     地址依次为100, 101, 102, 103</div><div class="line"></div><div class="line">16进制数字0x12345678，big-endian的存储为:     0x12 0x34 0x56 0x78       地址依次为100, 101, 102, 103</div></pre></td></tr></table></figure>
<blockquote>
<p>“endian”这个词出自《格列佛游记》。小人国的内战就源于吃鸡蛋时是究竟从大头(Big-Endian)敲开还是从小头(Little-Endian)敲开，由此曾发生过六次叛乱，其中一个皇帝送了命，另一个丢了王位。</p>
</blockquote>
<h4 id="字节序用途"><a href="#字节序用途" class="headerlink" title="字节序用途"></a>字节序用途</h4><blockquote>
<p>Little-Endian最常用，大部分用户的操作系统（如windows, FreeBsd,Linux）是Little Endian的。</p>
<p>Big-Endian最常用在网络协议上，例如TCP/IP协议使用的是big endian. 操作系统上如MAC OS ,是Big Endian 的。<br>本质上说，Little Endian还是Big Endian与操作系统和芯片类型都有关系。PowerPC系列采用big endian方式存储数据，x86系列则采用little endian方式存储数据。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Big Endian</div><div class="line">   低地址                                           高地址</div><div class="line">   -----------------------------------------&gt;</div><div class="line">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</div><div class="line">   |     12     |      34    |     56      |     78    |</div><div class="line">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</div><div class="line"></div><div class="line">Little Endian</div><div class="line">   低地址                                           高地址</div><div class="line">   -----------------------------------------&gt;</div><div class="line">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</div><div class="line">   |     78     |      56    |     34      |     12    |</div></pre></td></tr></table></figure>
<blockquote>
<p>Unicode规范中定义，每一个文件的最前面分别加入一个表示编码顺序的字符，这个字符的名字叫做”零宽度非换行空格”（ZERO WIDTH NO-BREAK SPACE），用FEFF表示。这正好是两个字节，而且FF比FE大1。<br>如果一个文本文件的头两个字节是FE FF，就表示该文件采用大头方式；如果头两个字节是FF FE，就表示该文件采用小头方式。</p>
</blockquote>
<h2 id="emoji"><a href="#emoji" class="headerlink" title="emoji"></a>emoji</h2><img src="/2016/09/26/character-encoding/emoji.jpg" alt="emoji.jpg" title="">
<p>emoji表情采用的是 Unicode编码，Emoji就是一种在Unicode位于<code>\u1F601-\u1F64F</code>区段的字符。这个显然超过了目前常用的UTF-8字符集的编码范围<code>\u0000-\uFFFF</code>。</p>
<p>使用utf8mb4编码便可以解决上述的问题</p>
<h2 id="宽字符"><a href="#宽字符" class="headerlink" title="宽字符"></a>宽字符</h2><p>宽字符（Wide character） 是程序设计的术语。它是一个抽象的术语（没有规定具体实现细节），用以表示比8位字符还宽的数据类型。它不同于Unicode。</p>
<p>wchar_t在ANSI/ISO C中是一个数据类型，且某些其它的编程语言也用它来表示宽字符。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol>
<li><p><a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81" rel="external nofollow noopener noreferrer" target="_blank">字符编码</a></p>
</li>
<li><p><a href="https://github.com/acmerfight/insight_python/blob/master/Unicode_and_Character_Sets.md" rel="external nofollow noopener noreferrer" target="_blank">Unicode_and_Character_Sets.md</a></p>
</li>
<li><p><a href="http://www.compsci.hunter.cuny.edu/~sweiss/resources/Unicode.pdf" rel="external nofollow noopener noreferrer" target="_blank">Unicode and UTF-8</a></p>
</li>
<li><p><a href="http://www.micmiu.com/lang/java/java-check-chinese/" rel="external nofollow noopener noreferrer" target="_blank">Java 完美判断中文字符</a></p>
</li>
<li><p><a href="http://unicode.org/emoji/charts/full-emoji-list.html" rel="external nofollow noopener noreferrer" target="_blank">Full Emoji Data, v3.0</a></p>
</li>
<li><p><a href="http://www.tuicool.com/articles/aQBVny" rel="external nofollow noopener noreferrer" target="_blank">微信emoji表情编码</a></p>
</li>
<li><p><a href="http://blog.csdn.net/sunshine1314/article/details/2309655" rel="external nofollow noopener noreferrer" target="_blank">关于Big Endian 和 Little Endian</a></p>
</li>
<li><p><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" rel="external nofollow noopener noreferrer" target="_blank">字符编码笔记：ASCII，Unicode和UTF-8</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> base </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 编码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Base64编码原理]]></title>
      <url>http://qsli.github.io/2016/09/26/base64/</url>
      <content type="html"><![CDATA[<h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><blockquote>
<p>Base64 is a group of similar binary-to-text encoding schemes that represent binary data in an ASCII string format by translating it into a radix-64 representation. The term Base64 originates from a specific MIME content transfer encoding<br>来自 <a href="https://en.wikipedia.org/wiki/Base64" rel="external nofollow noopener noreferrer" target="_blank">wikipedia</a></p>
</blockquote>
<p>说白了就是将二进制的数据转换成字符编码。Base64由大小写字母各26个，<code>0-9</code>的10个数字，加号<code>+</code><br>以及斜杠<code>/</code>，一共64个字符组成，另外还用<code>=</code>来用作后缀，总共涉及的字符达到65个。</p>
<blockquote>
<p>a）所有的二进制文件，都可以因此转化为可打印的文本编码，使用文本软件进行编辑；</p>
<p>b）能够对文本进行简单的加密。</p>
<p>来自 <a href="http://www.ruanyifeng.com/blog/2008/06/base64.html" rel="external nofollow noopener noreferrer" target="_blank">Base64笔记-阮一峰</a></p>
</blockquote>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><img src="/2016/09/26/base64/encoding.jpg" alt="encoding.jpg" title="">
<blockquote>
<p>转换的时候，将三个byte的数据，先后放入一个24bit的缓冲区中，先来的byte占高位。数据不足3byte的话，于缓冲器中剩下的bit用0补足。然后，每次取出6（因为26=64）个bit，按照其值选择ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/中的字符作为编码后的输出。不断进行，直到全部输入数据转换完成。</p>
<p><a href="https://zh.wikipedia.org/wiki/Base64" rel="external nofollow noopener noreferrer" target="_blank">https://zh.wikipedia.org/wiki/Base64</a></p>
</blockquote>
<p>如果要编码的字节数不能被3整除:</p>
<ol>
<li>先使用0字节值在末尾补足，使其能够被3整除</li>
<li>进行base64的编码</li>
<li><p>在编码后的base64文本后加上一个或两个’=’号，代表补足的字节数</p>
<img src="/2016/09/26/base64/encoding2.jpg" alt="encoding2.jpg" title="">
</li>
</ol>
<p>  Base64字符串只可能最后出现一个或两个”=”，中间是不可能出现”=”的</p>
<h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><blockquote>
<p>Base64 主要不是加密，它主要的用途是把一些二进制数转成普通字符用于网络传输。由于一些二进制字符在传输协议中属于控制字符，不能直接传送需要转换一下。Base64编码就是把二进制字节序列转化为ASCII字符序列。一般增加1/3长度，而且也是不可读的。</p>
<p><a href="http://nieyong.github.io/wiki_web/BASE64%E7%BC%96%E7%A0%81%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8.html" rel="external nofollow noopener noreferrer" target="_blank">BASE64编码原理及应用</a></p>
<p>Base64常用于在通常处理文本数据的场合，表示、传输、存储一些二进制数据。包括MIME的email、在XML中存储复杂数据。</p>
<p><a href="https://zh.wikipedia.org/wiki/Base64" rel="external nofollow noopener noreferrer" target="_blank">https://zh.wikipedia.org/wiki/Base64</a></p>
</blockquote>
<h2 id="python中简单使用"><a href="#python中简单使用" class="headerlink" title="python中简单使用"></a>python中简单使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> base64</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>encoded = base64.b64encode(<span class="string">'hello world'</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> encoded</div><div class="line">aGVsbG8gd29ybGQ=</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>data = base64.b64decode(encoded)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> data</div><div class="line">hello world</div></pre></td></tr></table></figure>
<p><a href="https://docs.python.org/2/library/base64.html" rel="external nofollow noopener noreferrer" target="_blank">base64 — RFC 3548: Base16, Base32, Base64 Data Encodings</a></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><p><a href="http://www.ruanyifeng.com/blog/2008/06/base64.html" rel="external nofollow noopener noreferrer" target="_blank">Base64笔记_阮一峰</a></p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/Base64" rel="external nofollow noopener noreferrer" target="_blank">Base64_wiki</a></p>
</li>
<li><p><a href="http://nieyong.github.io/wiki_web/BASE64%E7%BC%96%E7%A0%81%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8.html" rel="external nofollow noopener noreferrer" target="_blank">BASE64编码原理及应用</a></p>
</li>
<li><p><a href="https://github.com/CharonChui/AndroidNote/blob/master/Java%E5%9F%BA%E7%A1%80/Base64%E5%8A%A0%E5%AF%86.md" rel="external nofollow noopener noreferrer" target="_blank">Base64加密</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> base </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 编码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring 采用Mock的方式进行单元测试]]></title>
      <url>http://qsli.github.io/2016/09/25/spring-mockMvc/</url>
      <content type="html"><![CDATA[<h2 id="Spring-amp-Mockito"><a href="#Spring-amp-Mockito" class="headerlink" title="Spring &amp; Mockito"></a>Spring &amp; Mockito</h2><p>在Spring中，采用完全mock的方式进行单元测试，借助Mockito框架</p>
<script src="//gist.github.com/3ad39c82972ed66de3d5934f1cdcedaa.js"></script>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring mvc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java中的异常处理]]></title>
      <url>http://qsli.github.io/2016/09/25/java-exception/</url>
      <content type="html"><![CDATA[<h2 id="异常的分类"><a href="#异常的分类" class="headerlink" title="异常的分类"></a>异常的分类</h2><ul>
<li>业务异常</li>
</ul>
<blockquote>
<p>处理业务的时候80%的时候是没问题的，但可能有20%的时候事情没<br>有按理想的方向发展。例如注册用户的时候，正常情况是注册成功，但<br>可能用户提交请求的时候，系统发现用户名已经被别人注册了，这是就<br>可以抛出一个UserAlreadyExistsException</p>
<p>来自 <a href="https://github.com/kyfxbl/blog/blob/master/source/_posts/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.md" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/kyfxbl/blog/blob/master/source/_posts/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.md</a></p>
</blockquote>
<p>业务异常一般是上层可以处理的，一般声明为<code>CheckedException</code>，强制上层进行捕获处理</p>
<p>业务异常定义示例摘自<a href="http://gaojiewyh.iteye.com/blog/1297746#bc2369985" rel="external nofollow noopener noreferrer" target="_blank">spring mvc 异常统一处理</a>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class BusinessException extends Exception &#123;  </div><div class="line">   </div><div class="line">    private static final long serialVersionUID = 1L;  </div><div class="line">   </div><div class="line">    public BusinessException() &#123;  </div><div class="line">        // TODO Auto-generated constructor stub  </div><div class="line">    &#125;  </div><div class="line">   </div><div class="line">    public BusinessException(String message) &#123;  </div><div class="line">        super(message);  </div><div class="line">        // TODO Auto-generated constructor stub  </div><div class="line">    &#125;  </div><div class="line">   </div><div class="line">    public BusinessException(Throwable cause) &#123;  </div><div class="line">        super(cause);  </div><div class="line">        // TODO Auto-generated constructor stub  </div><div class="line">    &#125;  </div><div class="line">   </div><div class="line">    public BusinessException(String message, Throwable cause) &#123;  </div><div class="line">        super(message, cause);  </div><div class="line">        // TODO Auto-generated constructor stub  </div><div class="line">    &#125;  </div><div class="line">   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一般是继承自<code>Exception</code>, 这样就成为<code>CheckedException</code>， 必须强制捕获</p>
<ul>
<li>逻辑异常</li>
</ul>
<blockquote>
<p>系统异常与具体业务流程没有直接的关系，例如编程错误导致的NullPointExcpetion，<br>还有环境问题，例如磁盘损坏或者网络连接不稳定造成了IOException。</p>
<p>来自  <a href="https://github.com/kyfxbl/blog/blob/master/source/_posts/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.md" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/kyfxbl/blog/blob/master/source/_posts/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.md</a></p>
</blockquote>
<p>系统异常一般是上层无法处理的，所以一般声明为<code>UncheckedException</code>，不强制用户捕获。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">public class SystemException extends RuntimeException &#123;  </div><div class="line">   </div><div class="line">    private static final long serialVersionUID = 1L;  </div><div class="line">   </div><div class="line">    public SystemException() &#123;  </div><div class="line">        // TODO Auto-generated constructor stub  </div><div class="line">    &#125;  </div><div class="line">   </div><div class="line">    /** </div><div class="line">     * @param message </div><div class="line">     */  </div><div class="line">    public SystemException(String message) &#123;  </div><div class="line">        super(message);  </div><div class="line">        // TODO Auto-generated constructor stub  </div><div class="line">    &#125;  </div><div class="line">   </div><div class="line">    /** </div><div class="line">     * @param cause </div><div class="line">     */  </div><div class="line">    public SystemException(Throwable cause) &#123;  </div><div class="line">        super(cause);  </div><div class="line">        // TODO Auto-generated constructor stub  </div><div class="line">    &#125;  </div><div class="line">   </div><div class="line">    /** </div><div class="line">     * @param message </div><div class="line">     * @param cause </div><div class="line">     */  </div><div class="line">    public SystemException(String message, Throwable cause) &#123;  </div><div class="line">        super(message, cause);  </div><div class="line">        // TODO Auto-generated constructor stub  </div><div class="line">    &#125;  </div><div class="line">   </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="异常的捕获"><a href="#异常的捕获" class="headerlink" title="异常的捕获"></a>异常的捕获</h2><p>• 在Service层中应该捕获Dao层抛出的异常并且包装成相应的异常，如业务异常、系统异常等</p>
<p>  业务层中，通过异常链保存原始异常信息。程序员必须自己编码来保存原始异常的信息。在业务逻辑中，捕获DataAccessException异常，处理包装成SystemException异常抛出。捕获ObjectNotFoundException，DuplicateKeyException异常，处理包装成BusinessException异常抛出。业务层中应根据业务的不同，将异常尽量分得细一点，否则，自定义的异常没有太多的意义。</p>
<p>来自 <a href="http://gaojiewyh.iteye.com/blog/1739662" rel="external nofollow noopener noreferrer" target="_blank">http://gaojiewyh.iteye.com/blog/1739662</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public addUser(User user) throws BusinessException,SystemException&#123;  </div><div class="line">        try&#123;  </div><div class="line">              userDao.addUser(user);  </div><div class="line">        &#125;catch(DuplicatekeyException ex)&#123;  </div><div class="line">             log.infor(&quot;......................&quot;);  </div><div class="line">             throw new BusinessException(ex.getCause(),&quot;国际化信息&quot;）；  </div><div class="line">        &#125;catch(DataAccessException ex)&#123;  </div><div class="line">             log.error(&quot;......................&quot;);  </div><div class="line">             throw new SystemException(ex.getCause(),&quot;国际化信息&quot;）；  </div><div class="line">        &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="常见误区"><a href="#常见误区" class="headerlink" title="常见误区"></a>常见误区</h2><h3 id="一、定义上捕获者需要用到的信息"><a href="#一、定义上捕获者需要用到的信息" class="headerlink" title="一、定义上捕获者需要用到的信息"></a>一、定义上捕获者需要用到的信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public class DuplicateUsernameException extends Exception &#123;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="理由"><a href="#理由" class="headerlink" title="理由:"></a>理由:</h4><p>它除了有一个”意义明确”的名字以外没有任何有用的信息了。不要忘记Exception跟其他的Java类一样，客户端可以调用其中的方法来得到更多的信息。  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class DuplicateUsernameException extends Exception &#123;</div><div class="line">    private static final long serialVersionUID = -6113064394525919823L;</div><div class="line">    private String username = null;</div><div class="line">    private String[] availableNames = new String[0];</div><div class="line"> </div><div class="line">    public DuplicateUsernameException(String username) &#123;</div><div class="line">            this.username = username;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    public DuplicateUsernameException(String username, String[] availableNames) &#123;</div><div class="line">            this(username);</div><div class="line">            this.availableNames = availableNames;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    public String requestedUsername() &#123;</div><div class="line">            return this.username;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    public String[] availableNames() &#123;</div><div class="line">            return this.availableNames;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>来自 <a href="http://www.iteye.com/topic/857443" rel="external nofollow noopener noreferrer" target="_blank">http://www.iteye.com/topic/857443</a></p>
<h3 id="二、尽可能避免（因抛出异常带来的）接口污染"><a href="#二、尽可能避免（因抛出异常带来的）接口污染" class="headerlink" title="二、尽可能避免（因抛出异常带来的）接口污染"></a>二、尽可能避免（因抛出异常带来的）接口污染</h3><p>来自 <a href="http://lavasoft.blog.51cto.com/62575/244138/" rel="external nofollow noopener noreferrer" target="_blank">http://lavasoft.blog.51cto.com/62575/244138/</a></p>
<h3 id="三、异常链传播"><a href="#三、异常链传播" class="headerlink" title="三、异常链传播"></a>三、异常链传播</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public void dataAccessCode()&#123;</div><div class="line">    try&#123;</div><div class="line">        ..some code that throws SQLException</div><div class="line">    &#125;catch(SQLException ex)&#123;</div><div class="line">        throw new RuntimeException(ex);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><ol>
<li><p><a href="http://www.onjava.com/pub/a/onjava/2003/11/19/exceptions.html?page=2" rel="external nofollow noopener noreferrer" target="_blank">Best Practices for Exception Handling</a></p>
</li>
<li><p><a href="http://gaojiewyh.iteye.com/blog/1739662" rel="external nofollow noopener noreferrer" target="_blank">基于Spring的异常体系处理</a></p>
</li>
<li><p><a href="http://gaojiewyh.iteye.com/blog/1297746#bc2369985" rel="external nofollow noopener noreferrer" target="_blank">spring mvc 异常统一处理</a></p>
</li>
<li><p><a href="https://github.com/kyfxbl/blog/blob/master/source/_posts/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.md" rel="external nofollow noopener noreferrer" target="_blank">异常处理最佳实践.md</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> exception </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql中时间相关的问题]]></title>
      <url>http://qsli.github.io/2016/09/25/mysql-time/</url>
      <content type="html"><![CDATA[<h2 id="自动更新时间戳"><a href="#自动更新时间戳" class="headerlink" title="自动更新时间戳"></a>自动更新时间戳</h2><blockquote>
<p>TIMESTAMP and DATETIME columns can be automatically initializated and updated to the current date and time (that is, the current timestamp).</p>
<p>For any TIMESTAMP or DATETIME column in a table, you can assign the current timestamp as the default value, the auto-update value, or both:</p>
</blockquote>
<p><a href="http://dev.mysql.com/doc/refman/5.7/en/timestamp-initialization.html" rel="external nofollow noopener noreferrer" target="_blank">mysql官方文档说明</a></p>
<p>代码示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE t1 (</div><div class="line">  ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</div><div class="line">  dt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</div><div class="line">);</div></pre></td></tr></table></figure></p>
<h2 id="多个timestamp"><a href="#多个timestamp" class="headerlink" title="多个timestamp"></a>多个timestamp</h2><p>mysql中默认一张表中只能有一个timestamp类型的字段，如果有多个的话创建表的时候就会报错</p>
<p><code>Incorrect table definition; there can be only one TIMESTAMP column with CURRENT_TIMESTAMP in DEFAULT or ON UPDATE clause</code></p>
<p>在<code>5.6.4</code>之前有这个限制，在之后好像就没有这个限制了。参见<a href="https://segmentfault.com/q/1010000000488523" rel="external nofollow noopener noreferrer" target="_blank">https://segmentfault.com/q/1010000000488523</a></p>
]]></content>
      
        <categories>
            
            <category> base </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[fabric 分布式部署]]></title>
      <url>http://qsli.github.io/2015/11/03/fabric/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>   在一台linux主机上执行命令，如果太繁琐可以写成 Shell 脚本；如果在一个集群上批量执行命令呢？<br>一台一台的ssh登录去执行当然是可以的，如果集群太大，就太繁琐了。下面介绍一些在集群上执行命令的方法。</p>
<h2 id="ssh-远程执行命令"><a href="#ssh-远程执行命令" class="headerlink" title="ssh 远程执行命令"></a>ssh 远程执行命令</h2><pre><code>通过 ssh 可以按照下面的方式远程执行命令
</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh user@host <span class="string">'command1;command2;command3'</span></div></pre></td></tr></table></figure>
<p>或者使用管道<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh user@host <span class="string">'command1|command2|command3'</span></div></pre></td></tr></table></figure></p>
<p>或者使用如下的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ ssh [user]@[server] &lt;&lt; EOF</div><div class="line"><span class="built_in">command</span> 1</div><div class="line"><span class="built_in">command</span> 2</div><div class="line"><span class="built_in">command</span> 3</div><div class="line">EOF</div></pre></td></tr></table></figure></p>
<p>或者将要执行的命令写入 Shell 脚本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh user@host <span class="string">'bash -s'</span> &lt; local_script.sh</div></pre></td></tr></table></figure></p>
<p>可以通过指定ssh 参数 <code>-o StrictHostKeyChecking=no</code> 来省去下面的交互过程 </p>
<p><img src="http://farm8.staticflickr.com/7399/8778510478_4a428cc5f4.jpg" alt=""></p>
<p><strong>但是上面的方法执行 sudo 命令的时候会出错</strong><br>此时需要加上 ssh 的 <code>-t</code> 参数<br>man 一下 ssh 查找 -t 参数可以看到如下的解释</p>
<blockquote>
<p>-t<br>Force pseudo-tty allocation.  This can be used to execute arbi‐<br>             trary screen-based programs on a remote machine, which can be<br>             very useful, e.g. when implementing menu services.  Multiple -t<br>             options force tty allocation, even if ssh has no local tty.</p>
</blockquote>
<p>具体的意思就是强制提供一个远程服务器的虚拟tty终端<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -t -p port user@host <span class="string">'cmd'</span></div></pre></td></tr></table></figure></p>
<h2 id="即可执行sudo命令，但是自己还要手工输入远程服务器的密码"><a href="#即可执行sudo命令，但是自己还要手工输入远程服务器的密码" class="headerlink" title="即可执行sudo命令，但是自己还要手工输入远程服务器的密码"></a>即可执行sudo命令，但是自己还要手工输入远程服务器的密码</h2><p>要想写在脚本中自动执行还需要使用 expect<br>expect是 linux下的一个命令用来处理执行命令中的交互，python 也有相应的库 pexpect</p>
<blockquote>
<p>Expect  is a program that “talks” to other interactive programs accord‐<br>       ing to a script. </p>
</blockquote>
<p>下面是参考的一些文章</p>
<blockquote>
<p><a href="http://malcontentcomics.com/systemsboy/2006/07/send-remote-commands-via-ssh.html" rel="external nofollow noopener noreferrer" target="_blank">Send Remote Commands Via SSH</a><br><a href="http://www.shellhacks.com/en/Running-Commands-on-a-Remote-Linux-Server-over-SSH" rel="external nofollow noopener noreferrer" target="_blank">Running Commands on a Remote Linux Server over SSH</a></p>
</blockquote>
<h2 id="其他集群管理命令"><a href="#其他集群管理命令" class="headerlink" title="其他集群管理命令"></a>其他集群管理命令</h2><p>如 pssh mussh</p>
<blockquote>
<p><a href="http://xiaorui.cc/2014/07/09/linux%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7mussh%E5%92%8Cpssh/" rel="external nofollow noopener noreferrer" target="_blank">linux集群管理工具mussh和pssh</a></p>
</blockquote>
<h2 id="fabric"><a href="#fabric" class="headerlink" title="fabric"></a>fabric</h2><p>fabric 是基于 ssh 的一个python库，主要用来做运维或者批量部署<br><a href="http://www.fabfile.org/" rel="external nofollow noopener noreferrer" target="_blank">fabric官网</a></p>
<ul>
<li>安装 fabric<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install fabric</div></pre></td></tr></table></figure>
</li>
</ul>
<p>安装完成即可使用 fabric，fabric上手简单，功能强大</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fab <span class="_">-f</span> xxx.py <span class="built_in">command</span></div></pre></td></tr></table></figure>
<p>fab 默认在当前目录下寻找 fabfiles，如果你的文件是其他的名字，使用 <code>-f</code>指定即可</p>
<p>脚本的编写<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> run</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">host_type</span><span class="params">()</span>:</span></div><div class="line">	run(<span class="string">'uname -s'</span>)</div></pre></td></tr></table></figure></p>
<p>运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ fab -H localhost,linuxbox host_type</div><div class="line">	[localhost] run: uname <span class="_">-s</span></div><div class="line">	[localhost] out: Darwin</div><div class="line">	[linuxbox] run: uname <span class="_">-s</span></div><div class="line">	[linuxbox] out: Linux</div><div class="line">	</div><div class="line">	Done.</div><div class="line">	Disconnecting from localhost... done.</div><div class="line">	Disconnecting from linuxbox... done.</div></pre></td></tr></table></figure></p>
<p>使用 <code>-H</code>可以指定运行的host， 也可以在代码中指定。<br>用户名和密码都是存在 env 环境变量中，也可在脚本中更改<br><a href="http://docs.fabfile.org/en/1.10/usage/env.html?highlight=env" rel="external nofollow noopener noreferrer" target="_blank">The environment dictionary</a></p>
<p>同时 fabric 还提供了一些装饰器，具体的可以查文档<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@parralel</span></div><div class="line"><span class="meta">@task</span></div><div class="line"><span class="meta">@role()</span></div><div class="line"><span class="meta">@host()</span></div></pre></td></tr></table></figure></p>
<p>详细讲解可以参考这篇文章 <a href="http://wklken.me/posts/2013/03/25/python-tool-fabric.html" rel="external nofollow noopener noreferrer" target="_blank">Python fabric实现远程操作和部署 </a></p>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> fabric </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[机器学习框架调研]]></title>
      <url>http://qsli.github.io/2015/11/03/machine_learning/</url>
      <content type="html"><![CDATA[<h1 id="机器学习框架调研"><a href="#机器学习框架调研" class="headerlink" title="机器学习框架调研"></a>机器学习框架调研</h1><h2 id="DMTK"><a href="#DMTK" class="headerlink" title="DMTK"></a>DMTK</h2><p> <img src="http://www.dmtk.io/img/pic1_V7.jpg" width="150" height="150" alt="图片名称" align="center"></p>
<p>项目地址：<a href="https://github.com/Microsoft/DMTK" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/Microsoft/DMTK</a><br>文档地址:<a href="http://www.dmtk.io/document.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.dmtk.io/document.html</a><br>语言: CPP<br>项目简介:<br> Microsoft Distributed Machine Learning Tookit</p>
<ul>
<li><p>DMTK分布式机器学习框架：</p>
<blockquote>
<p>它由参数服务器和客户端软件开发包（SDK）两部分构成。参数服务器在原有基础上从性能和功能上都得到了进一步提升——支持存储混合数据结构模型、接受并聚合工作节点服务器的数据模型更新、控制模型同步逻辑等。客户端软件开发包（SDK）支持维护节点模型缓存（与全局模型服务器同步）、节点模型训练和模型通讯的流水线控制、以及片状调度大模型训练等。</p>
</blockquote>
</li>
<li><p>LightLDA：</p>
<blockquote>
<p>LightLDA是一种全新的用于训练主题模型，计算复杂度与主题数目无关的高效算法。在其分布式实现中，我们做了大量的系统优化使得LightLDA能够在一个普通计算机集群上处理超大规模的数据和模型。例如，在一个由8台计算机组成的集群上，我们可以在具有2千亿训练样本（token）的数据集上训练具有1百万词汇表和1百万个话题（topic）的LDA模型（约1万亿个参数），这种规模的实验以往要在数千台计算机的集群上才能运行。</p>
</blockquote>
</li>
<li><p>分布式词向量：</p>
<blockquote>
<p>词向量技术近来被普遍地应用于计算词汇的语义表示，它可以用作很多自然语言处理任务的词特征。我们为两种计算词向量的算法提供了高效的分步式实现：</p>
<pre><code>1. 一种是标准的word2vec算法
2. 另一种是可以对多义词计算多个词向量的新算法。
</code></pre></blockquote>
</li>
</ul>
<p><img src="http://www.msra.cn/zh-cn/research/release/images/dmtk-2.png" width="500" height="200" alt="图片名称" align="center"></p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><blockquote>
<p>[1] Tian, F., Dai, H., Bian, J., Gao, B., Zhang, R., Chen, E., &amp; Liu, T. Y. (2014). <a href="http://www.aclweb.org/anthology/C14-1016" rel="external nofollow noopener noreferrer" target="_blank">A probabilistic model for learning multi-prototype word embeddings</a>. In Proceedings of COLING (pp. 151-160).</p>
</blockquote>
<h2 id="TensorFlow"><a href="#TensorFlow" class="headerlink" title="TensorFlow"></a>TensorFlow</h2><p><img src="http://tensorflow.org/images/tensors_flowing.gif" alt=""></p>
<p>文档地址: <a href="http://tensorflow.org/get_started/index.html" rel="external nofollow noopener noreferrer" target="_blank">http://tensorflow.org/get_started/index.html</a><br>项目地址： <a href="http://tensorflow.org/" rel="external nofollow noopener noreferrer" target="_blank">http://tensorflow.org/</a><br>语言: Python<br>简介：</p>
<blockquote>
<ol>
<li><p>TensorFlow是谷歌研发的第二代人工智能学习系统，而第一代的DistBelief比这个要早好多年。</p>
</li>
<li><p>TensorFlow支持CNN、RNN和LSTM算法，这都是目前在Image，Speech和NLP最流行的深度神经网络模型。</p>
</li>
<li><p>此外，TensorFlow一大亮点是支持异构设备分布式计算，它能够在各个平台上自动运行模型，从电话、单个CPU / GPU到成百上千GPU卡组成的分布式系统。也就是说，任何基于梯度的机器学习算法都能够受益于TensorFlow的自动分化（auto-differentiation）。</p>
</li>
</ol>
</blockquote>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://news.zol.com.cn/551/5513527.html" rel="external nofollow noopener noreferrer" target="_blank">http://news.zol.com.cn/551/5513527.html</a><br><a href="http://www.leiphone.com/news/201511/Voza1pFNQB4bzKdR.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.leiphone.com/news/201511/Voza1pFNQB4bzKdR.html</a></p>
<h2 id="Torch"><a href="#Torch" class="headerlink" title="Torch"></a>Torch</h2><p><img src="http://torch.ch/static/flow-hero-logo.png" alt=""></p>
<p>项目地址: <a href="https://github.com/torch/torch7" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/torch/torch7</a><br>项目博客: <a href="http://torch.ch/blog/" rel="external nofollow noopener noreferrer" target="_blank">http://torch.ch/blog/</a><br>Slides: <a href="https://github.com/soumith/cvpr2015/blob/master/cvpr-torch.pdf" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/soumith/cvpr2015/blob/master/cvpr-torch.pdf</a><br>语言: Lua<br>项目简介:</p>
<blockquote>
<p>Torch并没有跟随Python的潮流，它是基于Lua的。对于解释器没有必要像Matlab或者Python那样，Lua会给你神奇的控制台。Torch被Facebook人工智能研究实验室和位于伦敦的谷歌DeepMind大量使用。</p>
<p>Torch is a scientific computing framework with wide support for machine learning algorithms. It is &gt; &gt; easy to use and efficient, thanks to an easy and fast scripting language, LuaJIT, and an underlying &gt; C/CUDA implementation.</p>
<p>A summary of core features:</p>
<ul>
<li>a powerful N-dimensional array</li>
<li>lots of routines for indexing, slicing, transposing, …</li>
<li>amazing interface to C, via LuaJIT</li>
<li>linear algebra routines</li>
<li>neural network, and energy-based models</li>
<li>numeric optimization routines</li>
<li>Fast and efficient GPU support</li>
<li>Embeddable, with ports to iOS, Android and FPGA backends</li>
</ul>
</blockquote>
<h3 id="参考链接-1"><a href="#参考链接-1" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://www.chinacloud.cn/show.aspx?id=21212&amp;cid=17" rel="external nofollow noopener noreferrer" target="_blank">2015深度学习回顾：ConvNet、Caffe、Torch及其他</a></p>
<h2 id="GraphLab"><a href="#GraphLab" class="headerlink" title="GraphLab"></a>GraphLab</h2><p>项目简介： <a href="http://www.select.cs.cmu.edu/code/graphlab/" rel="external nofollow noopener noreferrer" target="_blank">http://www.select.cs.cmu.edu/code/graphlab/</a><br>语言: Java/Python<br>简介:</p>
<blockquote>
<p>GraphLab是一个流行的图谱分析（Graph Analysis）和机器学习的开源项目，2013年该项目剥离出一个独立运作的商业公司GraphLab Inc</p>
<ul>
<li>HDFS。GraphLab 内置对HDFS 的支持，GraphLab 能够直接从HDFS中读数据或者将计算结果数据直接写入到HDFS 中。</li>
</ul>
</blockquote>
<p><img src="http://www.ctocio.com/wp-content/uploads/2014/10/graphlab-deeplearning-_thumb.png" alt=""></p>
<h3 id="参考链接-2"><a href="#参考链接-2" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://planckscale.info/?p=226" rel="external nofollow noopener noreferrer" target="_blank">GraphLab Create使深度学习更easy</a><br><a href="https://blog.inf.ed.ac.uk/graphprocs/2014/11/25/graphlab%E6%96%B0%E7%9A%84%E9%9D%A2%E5%90%91%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%B9%B6%E8%A1%8C%E6%A1%86%E6%9E%B6/" rel="external nofollow noopener noreferrer" target="_blank">GraphLab:新的面向机器学习的并行框架</a></p>
<h2 id="Deeplearning4j"><a href="#Deeplearning4j" class="headerlink" title="Deeplearning4j"></a>Deeplearning4j</h2><p>项目文档: <a href="http://deeplearning4j.org/" rel="external nofollow noopener noreferrer" target="_blank">http://deeplearning4j.org/</a><br>项目地址: <a href="https://github.com/deeplearning4j/deeplearning4j" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/deeplearning4j/deeplearning4j</a><br>语言: Java/Scala<br>项目简介:</p>
<blockquote>
<p>Deeplearning4j is the first commercial-grade, open-source, distributed deep-learning library written for Java and Scala. Integrated with Hadoop and Spark, DL4J is designed to be used in business environments, rather than as a research tool.</p>
<ul>
<li>Versatile n-dimensional array class</li>
<li>GPU integration</li>
<li>Scalable on Hadoop, Spark and Akka + AWS et al</li>
</ul>
</blockquote>
<p><img src="http://deeplearning4j.org/img/schematic_overview.png" alt=""></p>
<h3 id="参考链接-3"><a href="#参考链接-3" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://deeplearning4j.org/compare-dl4j-torch7-pylearn.html" rel="external nofollow noopener noreferrer" target="_blank">DL4J vs. Torch vs. Theano vs. Caffe</a></p>
<h2 id="Caffe"><a href="#Caffe" class="headerlink" title="Caffe"></a>Caffe</h2><p>项目主页: <a href="http://caffe.berkeleyvision.org/" rel="external nofollow noopener noreferrer" target="_blank">http://caffe.berkeleyvision.org/</a><br>项目地址: <a href="https://github.com/BVLC/caffe" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/BVLC/caffe</a><br>Slides: <a href="https://docs.google.com/presentation/d/1UeKXVgRvvxg9OUdh_UiC5G71UMscNPlvArsWER41PsU/edit#slide=id.gc2fcdcce7_216_211" rel="external nofollow noopener noreferrer" target="_blank">https://docs.google.com/presentation/d/1UeKXVgRvvxg9OUdh_UiC5G71UMscNPlvArsWER41PsU/edit#slide=id.gc2fcdcce7_216_211</a><br>项目简介:</p>
<blockquote>
<p>The Caffe framework from UC Berkeley is designed to let researchers create and explore CNNs and other Deep Neural Networks (DNNs) easily, while delivering high speed needed for both experiments and industrial deployment [5]. Caffe provides state-of-the-art modeling for advancing and deploying deep learning in research and industry with support for a wide variety of architectures and efficient implementations of prediction and learning.</p>
</blockquote>
<p><img src="http://d.hiphotos.baidu.com/baike/c0%3Dbaike92%2C5%2C5%2C92%2C30/sign=520e49ddb51bb0519b29bb7a5713b1d1/5882b2b7d0a20cf4cad4bb2070094b36adaf998d.jpg" alt=""></p>
<p><img src="http://img.ptcms.csdn.net/article/201507/08/559cebc9330f2_middle.jpg" alt=""></p>
<h3 id="参考链接-4"><a href="#参考链接-4" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://ucb-icsi-vision-group.github.io/caffe-paper/caffe.pdf" rel="external nofollow noopener noreferrer" target="_blank">Caffe: Convolutional Architecture for Fast Feature Embedding</a></p>
<p><a href="http://www.csdn.net/article/1970-01-01/2825166" rel="external nofollow noopener noreferrer" target="_blank">KDnuggets热门深度学习工具排行：Pylearn2 居首，Caffe第三</a></p>
<h2 id="Theano"><a href="#Theano" class="headerlink" title="Theano"></a>Theano</h2><p>项目主页: <a href="http://deeplearning.net/software/theano/" rel="external nofollow noopener noreferrer" target="_blank">http://deeplearning.net/software/theano/</a><br>项目地址: <a href="https://github.com/Theano/Theano" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/Theano/Theano</a></p>
<h2 id="Pylearn2"><a href="#Pylearn2" class="headerlink" title="Pylearn2"></a>Pylearn2</h2><p> 文档地址: <a href="http://deeplearning.net/software/pylearn2/" rel="external nofollow noopener noreferrer" target="_blank">http://deeplearning.net/software/pylearn2/</a><br> 项目地址: <a href="https://github.com/lisa-lab/pylearn2" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/lisa-lab/pylearn2</a><br>项目简介:</p>
<blockquote>
<p>Pylearn2和Theano由同一个开发团队开发，Pylearn2是一个机器学习库，它把深度学习和人工智能研究许多常用的模型以及训练算法封装成一个单一的实验包，如随机梯度下降。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 机器学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java 访问权限区别]]></title>
      <url>http://qsli.github.io/2015/10/20/java-permission-control/</url>
      <content type="html"><![CDATA[<h2 id="类成员的访问权限"><a href="#类成员的访问权限" class="headerlink" title="类成员的访问权限"></a>类成员的访问权限</h2><a id="more"></a>
<table>
<thead>
<tr>
<th>Modifier</th>
<th>Class</th>
<th>Package</th>
<th>Subclass</th>
<th>World</th>
</tr>
</thead>
<tbody>
<tr>
<td>public</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>protect</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>x</td>
</tr>
<tr>
<td>no modifier</td>
<td>√</td>
<td>√</td>
<td>x</td>
<td>x</td>
</tr>
<tr>
<td>private</td>
<td>√</td>
<td>x</td>
<td>x</td>
<td>x</td>
</tr>
</tbody>
</table>
<p>没有修饰符的话就相当于package可见，如果子类不在同一个package则也不能访问相应的方法。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote>
<p><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html" rel="external nofollow noopener noreferrer" target="_blank">Controlling Access to Members of a Class</a><br><a href="http://blog.csdn.net/johnstrive/article/details/5880357" rel="external nofollow noopener noreferrer" target="_blank">JAVA修饰符类型</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 访问权限 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux 下使用 shadowsocks]]></title>
      <url>http://qsli.github.io/2015/10/09/shadowsocks/</url>
      <content type="html"><![CDATA[<h2 id="安装shadowsocks"><a href="#安装shadowsocks" class="headerlink" title="安装shadowsocks"></a>安装shadowsocks</h2><p>shadowsocks 是使用 python 编写的，用 python 的包管理软件 pip 安装即可<br>1.首先安装 pip<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ apt-get install python-pip</div></pre></td></tr></table></figure></p>
<p>2.安装 shadowsocks<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pip install shadowsocks</div></pre></td></tr></table></figure></p>
<h2 id="shadowsocks-使用"><a href="#shadowsocks-使用" class="headerlink" title="shadowsocks 使用"></a>shadowsocks 使用</h2><p>shadowsocks 分为两部分，一个 server 名字叫 ssserver ，一个 client 名字叫 sslocal<br>默认都安装在  /usr/local/bin/ 目录下</p>
<h3 id="server-端"><a href="#server-端" class="headerlink" title="server 端"></a><strong>server 端</strong></h3><p>server端主要搭建在自己购买的vps上面<br>如下代码可使其在后台运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo ssserver -p 443 -k password -m rc4-md5 --user nobody <span class="_">-d</span> start</div></pre></td></tr></table></figure></p>
<p>具体可参见 <a href="https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E" rel="external nofollow noopener noreferrer" target="_blank">shadowsocks wiki</a></p>
<h3 id="client-端"><a href="#client-端" class="headerlink" title="client 端"></a><strong>client 端</strong></h3><p>client 端是运行在需要科学上网的机器上的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sslocal <span class="_">-s</span> server_ip -p 443 <span class="_">-l</span> 1080 -k <span class="string">"passwd"</span> -t 600 -m aes-256-cfb &amp;</div></pre></td></tr></table></figure></p>
<p>&amp; 是为了让其在后台运行<br>查看后台运行的程序<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">jobs</span> <span class="_">-l</span></div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[1]-  3918 Running                 hexo s &amp;</div><div class="line">[2]+  4110 Stopped                 ping www.baidu.com</div></pre></td></tr></table></figure>
<p>将后台的程序提到前端  %1   %后面的数字代表了要提到前台的任务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ %2</div><div class="line">ping www.baidu.com</div><div class="line">64 bytes from 180.97.33.107: icmp_req=3 ttl=52 time=14.2 ms</div><div class="line">64 bytes from 180.97.33.107: icmp_req=4 ttl=52 time=12.7 ms</div></pre></td></tr></table></figure></p>
<p>上述命令将 Ctrl + Z 挂起的任务，提到前台去了<br>Ctrl + C 是终止程序<br>Ctrl + Z 是挂起到后台</p>
<p>至于浏览器端的代理插件，将代理地址配置成 127.0.0.1 端口 1080 （要与前面设置的端口一致）<br>配置相应的代理规则即可科学上网</p>
<p>至于开机自动启动，可以自己摸索</p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> shadowsocks </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ssh免密码登录设置]]></title>
      <url>http://qsli.github.io/2015/10/08/ssh-passwd-free/</url>
      <content type="html"><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>  现有A和B两台机器，我们要实现A在ssh登录到B的时候不用输入密码，B-&gt;A的过程类似</p>
<h2 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h2><ol>
<li><p>在<strong>A机器</strong>上，生成 ssh 公钥密钥对</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa</div></pre></td></tr></table></figure>
</li>
<li><p>生成的文件存在 ~/.ssh/目录下，windows存在C\Users\your_name.ssh\ 目录下<br>id_rsa是私钥，id_rsa.pub是公钥</p>
</li>
<li><p>将A中生成的公钥加入到<strong>B机器</strong>的 authorized_keys 这个文件中，默认目录linux下是~/.ssh/ ，没有的话可以自己新建<br>拷贝的过程可以使用以下命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-copy-id -i 公钥文件路径 -p ssh端口  user@server</div></pre></td></tr></table></figure>
<blockquote>
<p>ssh-copy-id  -  install  your  public  key in a remote machine’s autho‐rized_keys.<br>If the  -i  option  is  given  then  the  identity  file  (defaults  to ~/.ssh/id_rsa.pub) is used,<br>regardless of whether there are any keys in your ssh-agent.</p>
</blockquote>
</li>
</ol>
<p>此时A机器 ssh 登录B机器是不需要密码的</p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo搭建博客]]></title>
      <url>http://qsli.github.io/2015/10/08/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" rel="external nofollow noopener noreferrer" target="_blank">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" rel="external nofollow noopener noreferrer" target="_blank">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" rel="external nofollow noopener noreferrer" target="_blank">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" rel="external nofollow noopener noreferrer" target="_blank">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" rel="external nofollow noopener noreferrer" target="_blank">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" rel="external nofollow noopener noreferrer" target="_blank">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" rel="external nofollow noopener noreferrer" target="_blank">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" rel="external nofollow noopener noreferrer" target="_blank">Deployment</a></p>
<h3 id="hexo-草稿"><a href="#hexo-草稿" class="headerlink" title="hexo 草稿"></a>hexo 草稿</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo new draft &lt;title&gt;</div><div class="line">$ hexo server --draft</div><div class="line">$ hexo publish &lt;filename&gt;</div></pre></td></tr></table></figure>
<h3 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h3><p>对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。这个稍微有些复杂但是管理资源非常方便的功能可以通过将 config.yml 文件中的 post_asset_folder 选项设为 true 来打开。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">_config.yml</div><div class="line">post_asset_folder: true</div></pre></td></tr></table></figure></p>
<p>当资源文件管理功能打开后，Hexo将会在你每一次通过 hexo new [layout] <title> 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个 markdown 文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。</title></p>
<h3 id="内链"><a href="#内链" class="headerlink" title="内链"></a>内链</h3><p><a href="http://marshal.ohtly.com/2015/09/12/internal-link-and-image-for-hexo/" rel="external nofollow noopener noreferrer" target="_blank">Hexo使用内链及文章中加入图片的方法</a></p>
<h3 id="seo"><a href="#seo" class="headerlink" title="seo"></a>seo</h3><p><a href="http://www.jianshu.com/p/86557c34b671" rel="external nofollow noopener noreferrer" target="_blank">Hexo Seo优化让你的博客在google搜索排名第一</a></p>
<h2 id="Markdown-语法简介"><a href="#Markdown-语法简介" class="headerlink" title="Markdown 语法简介"></a>Markdown 语法简介</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">1、分段： 两个回车</div><div class="line"></div><div class="line">2、换行 两个空格 + 回车</div><div class="line"></div><div class="line">3、标题 #~###### 井号的个数表示几级标题，即Markdown可以表示一级标题到六级标题</div><div class="line"></div><div class="line">4、引用 &gt;</div><div class="line"></div><div class="line">5、列表 *，+，-，1.，选其中之一，注意后面有个空格</div><div class="line"></div><div class="line">6、代码区块 四个空格开头</div><div class="line"></div><div class="line">7、链接 [文字](链接地址)</div><div class="line"></div><div class="line">8、图片 &#123;% 图片地址 图片说明 %&#125;</div><div class="line">，图片地址可以是本地路劲，也可以是网络地址</div><div class="line"></div><div class="line">9、强调 **文字**，__文字__，_文字_，*文字*</div><div class="line"></div><div class="line">10、代码</div></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://www.jianshu.com/p/1e402922ee32/" rel="external nofollow noopener noreferrer" target="_blank">Markdown——入门指南</a></p>
</blockquote>
<h2 id="在Hexo中插入gist"><a href="#在Hexo中插入gist" class="headerlink" title="在Hexo中插入gist"></a>在Hexo中插入gist</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% gist 1f10fa5b8b76f3b5efaf74ad3d6da413  %&#125;</div></pre></td></tr></table></figure>
<p> 其中一长串是gist生成的id</p>
<h2 id="使用markdown来画mindmap"><a href="#使用markdown来画mindmap" class="headerlink" title="使用markdown来画mindmap"></a>使用markdown来画mindmap</h2><blockquote class="pullquote mindmap"><p>#主题</p>
<p>##一级分支</p>
<p>###二级分支</p>
<p>##一级分支</p>
<p>##一级分支</p>
<p>###二级分支</p>
<p>####三级分支</p>
</blockquote>]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo install </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
