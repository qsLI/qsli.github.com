<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[KL's blog]]></title>
  <subtitle><![CDATA[越积极，越幸运]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://qsli.github.io/"/>
  <updated>2016-12-23T02:13:03.539Z</updated>
  <id>http://qsli.github.io/</id>
  
  <author>
    <name><![CDATA[Kevin Leo]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://qsli.github.io/2016/12/23/tomcat-access-log/"/>
    <id>http://qsli.github.io/2016/12/23/tomcat-access-log/</id>
    <published>2016-12-23T02:13:03.539Z</published>
    <updated>2016-12-23T02:13:03.539Z</updated>
    <content type="html"><![CDATA[<!DOCTYPE html><html><head><meta charset="utf-8"><meta name="category" content="tomcat">
<meta name="tags" content="access-log">
<meta name="date" content="2016-12-23 00:43:10"><style>body {
  width: 45em;
  border: 1px solid #ddd;
  outline: 1300px solid #fff;
  margin: 16px auto;
}

body .markdown-body
{
  padding: 30px;
}

@font-face {
  font-family: fontawesome-mini;
  src: url(data:font/woff;charset=utf-8;base64,d09GRgABAAAAAAzUABAAAAAAFNgAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAABbAAAABwAAAAcZMzaOEdERUYAAAGIAAAAHQAAACAAOQAET1MvMgAAAagAAAA+AAAAYHqhde9jbWFwAAAB6AAAAFIAAAFa4azkLWN2dCAAAAI8AAAAKAAAACgFgwioZnBnbQAAAmQAAAGxAAACZVO0L6dnYXNwAAAEGAAAAAgAAAAIAAAAEGdseWYAAAQgAAAFDgAACMz7eroHaGVhZAAACTAAAAAwAAAANgWEOEloaGVhAAAJYAAAAB0AAAAkDGEGa2htdHgAAAmAAAAAEwAAADBEgAAQbG9jYQAACZQAAAAaAAAAGgsICJBtYXhwAAAJsAAAACAAAAAgASgBD25hbWUAAAnQAAACZwAABOD4no+3cG9zdAAADDgAAABsAAAAmF+yXM9wcmVwAAAMpAAAAC4AAAAusPIrFAAAAAEAAAAAyYlvMQAAAADLVHQgAAAAAM/u9uZ4nGNgZGBg4ANiCQYQYGJgBEJuIGYB8xgABMMAPgAAAHicY2Bm42OcwMDKwMLSw2LMwMDQBqGZihmiwHycoKCyqJjB4YPDh4NsDP+BfNb3DIuAFCOSEgUGRgAKDgt4AAB4nGNgYGBmgGAZBkYGEAgB8hjBfBYGCyDNxcDBwMTA9MHhQ9SHrA8H//9nYACyQyFs/sP86/kX8HtB9UIBIxsDXICRCUgwMaACRoZhDwA3fxKSAAAAAAHyAHABJQB/AIEAdAFGAOsBIwC/ALgAxACGAGYAugBNACcA/wCIeJxdUbtOW0EQ3Q0PA4HE2CA52hSzmZDGe6EFCcTVjWJkO4XlCGk3cpGLcQEfQIFEDdqvGaChpEibBiEXSHxCPiESM2uIojQ7O7NzzpkzS8qRqnfpa89T5ySQwt0GzTb9Tki1swD3pOvrjYy0gwdabGb0ynX7/gsGm9GUO2oA5T1vKQ8ZTTuBWrSn/tH8Cob7/B/zOxi0NNP01DoJ6SEE5ptxS4PvGc26yw/6gtXhYjAwpJim4i4/plL+tzTnasuwtZHRvIMzEfnJNEBTa20Emv7UIdXzcRRLkMumsTaYmLL+JBPBhcl0VVO1zPjawV2ys+hggyrNgQfYw1Z5DB4ODyYU0rckyiwNEfZiq8QIEZMcCjnl3Mn+pED5SBLGvElKO+OGtQbGkdfAoDZPs/88m01tbx3C+FkcwXe/GUs6+MiG2hgRYjtiKYAJREJGVfmGGs+9LAbkUvvPQJSA5fGPf50ItO7YRDyXtXUOMVYIen7b3PLLirtWuc6LQndvqmqo0inN+17OvscDnh4Lw0FjwZvP+/5Kgfo8LK40aA4EQ3o3ev+iteqIq7wXPrIn07+xWgAAAAABAAH//wAPeJyFlctvG1UUh+/12DPN1B7P3JnYjj2Ox4/MuDHxJH5N3UdaEUQLqBIkfQQioJWQ6AMEQkIqsPGCPwA1otuWSmTBhjtps2ADWbJg3EpIXbGouqSbCraJw7kzNo2dRN1cnXN1ZvT7zuuiMEI7ncizyA0URofRBJpCdbQuIFShYY+GZRrxMDVtih5TwQPHtXDFFSIKoWIbuREBjLH27Ny4MsbVx+uOJThavebgVrNRLAiYx06rXsvhxLgWx9xpfHdrs/ekc2Pl2cpPCVEITQpwbj8VQhfXSq2m+Wxqaq2D73Kne5e3NjHqQNj3CRYlJlgUl/jRNP+2Gs2pNYRQiOnmUaQDqm30KqKiTTWPWjboxnTWpvgxjXo0KrtZXAHt7hwIz0YVcj88JnKlJKi3NPAwLyDwZudSmJSMMJFDYaOkaol6XtESx3Gt1VTytdZJ3DCLeaVhVnCBH1fycHTxFXwPX+l2e3d6H/TufGGmMTLTnbSJUdo00zuBswMO/nl3YLeL/wnu9/limCuD3vC54h5NBVz6Li414AI8Vx3iiosKcQXUbrvhFFiYb++HN4DaF4XzFW0fIN4XDWJ3a3XQoq9V8WiyRmdsatV9xUcHims1JloH0YUa090G3Tro3mC6c01f+YwCPquINr1PTaCP6rVTOOmf0GE2dBc7zWIhji3/5MchSuBHgDbU99RMWt3YUNMZMJmx92YP6NsHx/5/M1yvInpnkIOM3Z8fA3JQ2lW1RFC1KaBPDFXNAHYYvGy73aYZZZ3HifbeuiVZCpwA3oQBs0wGPYJbJfg60xrKEbKiNtTe1adwrpBRwlAuQ3q3VRaX0QmQ9a49BTSCuF1MLfQ6+tinOubRBZuWPNoMevGMT+V41KitO1is3D/tpMcq1JHZqDHGs8DoYGDkxJgKjHROeTCmhZvzPm9pod+ltKm4PN7Dyvvldlpsg8D+4AUJZ3F/JBstZz7cbFRxsaAGV6yX/dkcycWf8eS3QlQea+YLjdm3yrOnrhFpUyKVvFE4lpv4bO3Svx/6F/4xmiDu/RT5iI++lko18mY1oX+5UGKR6kmVjM/Zb76yfHtxy+h/SyQ0lLdpdKy/lWB6szatetQJ8nZ80A2Qt6ift6gJeavU3BO4gtxs/KCtNPVibCtYCWY3SIlSBPKXZALXiIR9oZeJ1AuMyxLpHIy/yO7vSiSE+kZvk0ihJ30HgHfzZtEMmvV58x6dtqns0XTAW7Vdm4HJ04OCp/crOO7rd9SGxQAE/mVA9xRN+kVSMRFF6S9JFGUtthkjBA5tFCWc2l4V43Ex9GmUP3SI37Jjmir9KqlaDJ4S4JB3vuM/jzyH1+8MuoZ+QGzfnvPoJb96cZlWjMcKLfgDwB7E634JTY+asjsPzS5CiVnEWY+KsrsIN5rn3mAPjqmQBxGjcGKB9f9ZxY3mYC2L85CJ2FXIxKKyHk+dg0FHbuEc7D5NzWUX32WxFcWNGRAbvwSx0RmIXVDuYySafluQBmzA/ssqJAMLnli+WIC90Gw4lm85wcp0qjArEDPJJV/sSx4P9ungTpgMw5gVC1XO4uULq0s3v1rqLi0vX/z65vlH50f8T/RHmSPTk5xxWBWOluMT6WiOy+tdvWxlV/XQb3o3c6Ssr+r6I708GsX9/nzp1tKFh0s3v7m4vAy/Hnb/KMOvc1wump6Il48K6mGDy02X9Yd65pa+nQIjk76lWxCkG8NBCP0HQS9IpAAAeJxjYGRgYGBhcCrq214Qz2/zlUGenQEEzr/77oug/zewFbB+AHI5GJhAogBwKQ0qeJxjYGRgYH3/P46BgZ0BBNgKGBgZUAEPAE/7At0AAAB4nGNngAB2IGYjhBsYBAAIYADVAAAAAAAAAAAAAFwAyAEeAaACCgKmAx4DggRmAAAAAQAAAAwAagAEAAAAAAACAAEAAgAWAAABAAChAAAAAHiclZI7bxQxFIWPd/JkUYQChEhIyAVKgdBMskm1QkKrRETpQiLRUczueB/K7HhlOxttg8LvoKPgP9DxFxANDR0tHRWi4NjrPIBEgh1p/dm+vufcawNYFWsQmP6e4jSyQB2fI9cwj++RE9wTjyPP4LYoI89iWbyLPIe6+Bh5Hs9rryMv4GbtW+RF3EhuRa7jbrIbeQkPkjdUETOLnL0Kip4FVvAhco1RXyMnSPEz8gzWxE7kWTwUp5HnsCLeR57HW/El8gJWa58iL+JO7UfkOh4l9yMv4UnyEtvQGGECgwF66MNBooF1bGCL1ELB/TYU+ZBRlvsKQ44Se6jQ4a7hef+fh72Crv25kp+8lNWGmeKoOI5jJLb1aGIGvb6TjfWNLdkqdFvJw4l1amjlXtXRZqRN7lSRylZZyhBqpVFWmTEXgWfUrpi/hZOQXdOd4rKuXOtEWT3k5IArPRzTUU5tHKjecZkTpnVbNOnt6jzN8240GD4xtikvZW56043rPMg/dS+dlOceXoR+WPbJ55Dsekq1lJpnypsMUsYOdCW30o103Ytu/lvh+5RWFLfBjm9/N8hJntPhvx92rnoE/kyHdGasGy754kw36vsVf/lFeBi+0COu+cfgQr42G3CRpeLoZ53gmfe3X6rcKt5oVxnptHR9JS8ehVUd5wvvahN2uqxOOpMXapibI5k7Zwbt4xBSaTfoKBufhAnO/uqNcfK8OTs0OQ6l7JIqFjDhYj5WcjevCnI/1DDiI8j4ndWb/5YzDZWh79yomWXeXj7Nnw70/2TIeFPTrlSh89k1ObOSRVZWZfgF0r/zJQB4nG2JUQuCQBCEd07TTg36fb2IyBaLd3vWaUh/vmSJnvpgmG8YcmS8X3Shf3R7QA4OBUocUKHGER5NNbOOEvwc1txnuWkTRb/aPjimJ5vXabI+3VfOiyS15UWvyezM2xiGOPyuMohOH8O8JiO4Af+FsAGNAEuwCFBYsQEBjlmxRgYrWCGwEFlLsBRSWCGwgFkdsAYrXFhZsBQrAAA=) format('woff');
}

@font-face {
  font-family: octicons-anchor;
  src: url(data:font/woff;charset=utf-8;base64,d09GRgABAAAAAAYcAA0AAAAACjQAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAABMAAAABwAAAAca8vGTk9TLzIAAAFMAAAARAAAAFZG1VHVY21hcAAAAZAAAAA+AAABQgAP9AdjdnQgAAAB0AAAAAQAAAAEACICiGdhc3AAAAHUAAAACAAAAAj//wADZ2x5ZgAAAdwAAADRAAABEKyikaNoZWFkAAACsAAAAC0AAAA2AtXoA2hoZWEAAALgAAAAHAAAACQHngNFaG10eAAAAvwAAAAQAAAAEAwAACJsb2NhAAADDAAAAAoAAAAKALIAVG1heHAAAAMYAAAAHwAAACABEAB2bmFtZQAAAzgAAALBAAAFu3I9x/Nwb3N0AAAF/AAAAB0AAAAvaoFvbwAAAAEAAAAAzBdyYwAAAADP2IQvAAAAAM/bz7t4nGNgZGFgnMDAysDB1Ml0hoGBoR9CM75mMGLkYGBgYmBlZsAKAtJcUxgcPsR8iGF2+O/AEMPsznAYKMwIkgMA5REMOXicY2BgYGaAYBkGRgYQsAHyGMF8FgYFIM0ChED+h5j//yEk/3KoSgZGNgYYk4GRCUgwMaACRoZhDwCs7QgGAAAAIgKIAAAAAf//AAJ4nHWMMQrCQBBF/0zWrCCIKUQsTDCL2EXMohYGSSmorScInsRGL2DOYJe0Ntp7BK+gJ1BxF1stZvjz/v8DRghQzEc4kIgKwiAppcA9LtzKLSkdNhKFY3HF4lK69ExKslx7Xa+vPRVS43G98vG1DnkDMIBUgFN0MDXflU8tbaZOUkXUH0+U27RoRpOIyCKjbMCVejwypzJJG4jIwb43rfl6wbwanocrJm9XFYfskuVC5K/TPyczNU7b84CXcbxks1Un6H6tLH9vf2LRnn8Ax7A5WQAAAHicY2BkYGAA4teL1+yI57f5ysDNwgAC529f0kOmWRiYVgEpDgYmEA8AUzEKsQAAAHicY2BkYGB2+O/AEMPCAAJAkpEBFbAAADgKAe0EAAAiAAAAAAQAAAAEAAAAAAAAKgAqACoAiAAAeJxjYGRgYGBhsGFgYgABEMkFhAwM/xn0QAIAD6YBhwB4nI1Ty07cMBS9QwKlQapQW3VXySvEqDCZGbGaHULiIQ1FKgjWMxknMfLEke2A+IJu+wntrt/QbVf9gG75jK577Lg8K1qQPCfnnnt8fX1NRC/pmjrk/zprC+8D7tBy9DHgBXoWfQ44Av8t4Bj4Z8CLtBL9CniJluPXASf0Lm4CXqFX8Q84dOLnMB17N4c7tBo1AS/Qi+hTwBH4rwHHwN8DXqQ30XXAS7QaLwSc0Gn8NuAVWou/gFmnjLrEaEh9GmDdDGgL3B4JsrRPDU2hTOiMSuJUIdKQQayiAth69r6akSSFqIJuA19TrzCIaY8sIoxyrNIrL//pw7A2iMygkX5vDj+G+kuoLdX4GlGK/8Lnlz6/h9MpmoO9rafrz7ILXEHHaAx95s9lsI7AHNMBWEZHULnfAXwG9/ZqdzLI08iuwRloXE8kfhXYAvE23+23DU3t626rbs8/8adv+9DWknsHp3E17oCf+Z48rvEQNZ78paYM38qfk3v/u3l3u3GXN2Dmvmvpf1Srwk3pB/VSsp512bA/GG5i2WJ7wu430yQ5K3nFGiOqgtmSB5pJVSizwaacmUZzZhXLlZTq8qGGFY2YcSkqbth6aW1tRmlaCFs2016m5qn36SbJrqosG4uMV4aP2PHBmB3tjtmgN2izkGQyLWprekbIntJFing32a5rKWCN/SdSoga45EJykyQ7asZvHQ8PTm6cslIpwyeyjbVltNikc2HTR7YKh9LBl9DADC0U/jLcBZDKrMhUBfQBvXRzLtFtjU9eNHKin0x5InTqb8lNpfKv1s1xHzTXRqgKzek/mb7nB8RZTCDhGEX3kK/8Q75AmUM/eLkfA+0Hi908Kx4eNsMgudg5GLdRD7a84npi+YxNr5i5KIbW5izXas7cHXIMAau1OueZhfj+cOcP3P8MNIWLyYOBuxL6DRylJ4cAAAB4nGNgYoAALjDJyIAOWMCiTIxMLDmZedkABtIBygAAAA==) format('woff');
}

.markdown-body {
  font-family: sans-serif;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
  color: #333333;
  overflow: hidden;
  font-family: "Helvetica Neue", Helvetica, "Segoe UI", Arial, freesans, sans-serif;
  font-size: 16px;
  line-height: 1.6;
  word-wrap: break-word;
}

.markdown-body a {
  background: transparent;
}

.markdown-body a:active,
.markdown-body a:hover {
  outline: 0;
}

.markdown-body b,
.markdown-body strong {
  font-weight: bold;
}

.markdown-body mark {
  background: #ff0;
  color: #000;
  font-style: italic;
  font-weight: bold;
}

.markdown-body sub,
.markdown-body sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}
.markdown-body sup {
  top: -0.5em;
}
.markdown-body sub {
  bottom: -0.25em;
}

.markdown-body h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

.markdown-body img {
  border: 0;
}

.markdown-body hr {
  -moz-box-sizing: content-box;
  box-sizing: content-box;
  height: 0;
}

.markdown-body pre {
  overflow: auto;
}

.markdown-body code,
.markdown-body kbd,
.markdown-body pre,
.markdown-body samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

.markdown-body input {
  color: inherit;
  font: inherit;
  margin: 0;
}

.markdown-body html input[disabled] {
  cursor: default;
}

.markdown-body input {
  line-height: normal;
}

.markdown-body input[type="checkbox"] {
  box-sizing: border-box;
  padding: 0;
}

.markdown-body table {
  border-collapse: collapse;
  border-spacing: 0;
}

.markdown-body td,
.markdown-body th {
  padding: 0;
}

.markdown-body .codehilitetable {
  border: 0;
  border-spacing: 0;
}

.markdown-body .codehilitetable tr {
  border: 0;
}

.markdown-body .codehilitetable pre,
.markdown-body .codehilitetable div.codehilite {
  margin: 0;
}

.markdown-body .linenos,
.markdown-body .code,
.markdown-body .codehilitetable td {
  border: 0;
  padding: 0;
}

.markdown-body td:not(.linenos) .linenodiv {
  padding: 0 !important;
}

.markdown-body .code {
  width: 100%;
}

.markdown-body .linenos div pre,
.markdown-body .linenodiv pre,
.markdown-body .linenodiv {
  border: 0;
  -webkit-border-radius: 0;
  -moz-border-radius: 0;
  border-radius: 0;
  -webkit-border-top-left-radius: 3px;
  -webkit-border-bottom-left-radius: 3px;
  -moz-border-radius-topleft: 3px;
  -moz-border-radius-bottomleft: 3px;
  border-top-left-radius: 3px;
  border-bottom-left-radius: 3px;
}

.markdown-body .code div pre,
.markdown-body .code div {
  border: 0;
  -webkit-border-radius: 0;
  -moz-border-radius: 0;
  border-radius: 0;
  -webkit-border-top-right-radius: 3px;
  -webkit-border-bottom-right-radius: 3px;
  -moz-border-radius-topright: 3px;
  -moz-border-radius-bottomright: 3px;
  border-top-right-radius: 3px;
  border-bottom-right-radius: 3px;
}

.markdown-body * {
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

.markdown-body input {
  font: 13px Helvetica, arial, freesans, clean, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol";
  line-height: 1.4;
}

.markdown-body a {
  color: #4183c4;
  text-decoration: none;
}

.markdown-body a:hover,
.markdown-body a:focus,
.markdown-body a:active {
  text-decoration: underline;
}

.markdown-body hr {
  height: 0;
  margin: 15px 0;
  overflow: hidden;
  background: transparent;
  border: 0;
  border-bottom: 1px solid #ddd;
}

.markdown-body hr:before,
.markdown-body hr:after {
  display: table;
  content: " ";
}

.markdown-body hr:after {
  clear: both;
}

.markdown-body h1,
.markdown-body h2,
.markdown-body h3,
.markdown-body h4,
.markdown-body h5,
.markdown-body h6 {
  margin-top: 15px;
  margin-bottom: 15px;
  line-height: 1.1;
}

.markdown-body h1 {
  font-size: 30px;
}

.markdown-body h2 {
  font-size: 21px;
}

.markdown-body h3 {
  font-size: 16px;
}

.markdown-body h4 {
  font-size: 14px;
}

.markdown-body h5 {
  font-size: 12px;
}

.markdown-body h6 {
  font-size: 11px;
}

.markdown-body blockquote {
  margin: 0;
}

.markdown-body ul,
.markdown-body ol {
  padding: 0;
  margin-top: 0;
  margin-bottom: 0;
}

.markdown-body ol ol,
.markdown-body ul ol {
  list-style-type: lower-roman;
}

.markdown-body ul ul ol,
.markdown-body ul ol ol,
.markdown-body ol ul ol,
.markdown-body ol ol ol {
  list-style-type: lower-alpha;
}

.markdown-body dd {
  margin-left: 0;
}

.markdown-body code,
.markdown-body pre,
.markdown-body samp {
  font-family: Consolas, "Liberation Mono", Menlo, Courier, monospace;
  font-size: 12px;
}

.markdown-body pre {
  margin-top: 0;
  margin-bottom: 0;
}

.markdown-body kbd {
  background-color: #e7e7e7;
  background-image: -moz-linear-gradient(#fefefe, #e7e7e7);
  background-image: -webkit-linear-gradient(#fefefe, #e7e7e7);
  background-image: linear-gradient(#fefefe, #e7e7e7);
  background-repeat: repeat-x;
  border-radius: 2px;
  border: 1px solid #cfcfcf;
  color: #000;
  padding: 3px 5px;
  line-height: 10px;
  font: 11px Consolas, "Liberation Mono", Menlo, Courier, monospace;
  display: inline-block;
}

.markdown-body>*:first-child {
  margin-top: 0 !important;
}

.markdown-body>*:last-child {
  margin-bottom: 0 !important;
}

.markdown-body .headeranchor-link {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  display: block;
  padding-right: 6px;
  padding-left: 30px;
  margin-left: -30px;
}

.markdown-body .headeranchor-link:focus {
  outline: none;
}

.markdown-body h1,
.markdown-body h2,
.markdown-body h3,
.markdown-body h4,
.markdown-body h5,
.markdown-body h6 {
  position: relative;
  margin-top: 1em;
  margin-bottom: 16px;
  font-weight: bold;
  line-height: 1.4;
}

.markdown-body h1 .headeranchor,
.markdown-body h2 .headeranchor,
.markdown-body h3 .headeranchor,
.markdown-body h4 .headeranchor,
.markdown-body h5 .headeranchor,
.markdown-body h6 .headeranchor {
  display: none;
  color: #000;
  vertical-align: middle;
}

.markdown-body h1:hover .headeranchor-link,
.markdown-body h2:hover .headeranchor-link,
.markdown-body h3:hover .headeranchor-link,
.markdown-body h4:hover .headeranchor-link,
.markdown-body h5:hover .headeranchor-link,
.markdown-body h6:hover .headeranchor-link {
  height: 1em;
  padding-left: 8px;
  margin-left: -30px;
  line-height: 1;
  text-decoration: none;
}

.markdown-body h1:hover .headeranchor-link .headeranchor,
.markdown-body h2:hover .headeranchor-link .headeranchor,
.markdown-body h3:hover .headeranchor-link .headeranchor,
.markdown-body h4:hover .headeranchor-link .headeranchor,
.markdown-body h5:hover .headeranchor-link .headeranchor,
.markdown-body h6:hover .headeranchor-link .headeranchor {
  display: inline-block;
}

.markdown-body h1 {
  padding-bottom: 0.3em;
  font-size: 2.25em;
  line-height: 1.2;
  border-bottom: 1px solid #eee;
}

.markdown-body h2 {
  padding-bottom: 0.3em;
  font-size: 1.75em;
  line-height: 1.225;
  border-bottom: 1px solid #eee;
}

.markdown-body h3 {
  font-size: 1.5em;
  line-height: 1.43;
}

.markdown-body h4 {
  font-size: 1.25em;
}

.markdown-body h5 {
  font-size: 1em;
}

.markdown-body h6 {
  font-size: 1em;
  color: #777;
}

.markdown-body p,
.markdown-body blockquote,
.markdown-body ul,
.markdown-body ol,
.markdown-body dl,
.markdown-body table,
.markdown-body pre,
.markdown-body .admonition {
  margin-top: 0;
  margin-bottom: 16px;
}

.markdown-body hr {
  height: 4px;
  padding: 0;
  margin: 16px 0;
  background-color: #e7e7e7;
  border: 0 none;
}

.markdown-body ul,
.markdown-body ol {
  padding-left: 2em;
}

.markdown-body ul ul,
.markdown-body ul ol,
.markdown-body ol ol,
.markdown-body ol ul {
  margin-top: 0;
  margin-bottom: 0;
}

.markdown-body li>p {
  margin-top: 16px;
}

.markdown-body dl {
  padding: 0;
}

.markdown-body dl dt {
  padding: 0;
  margin-top: 16px;
  font-size: 1em;
  font-style: italic;
  font-weight: bold;
}

.markdown-body dl dd {
  padding: 0 16px;
  margin-bottom: 16px;
}

.markdown-body blockquote {
  padding: 0 15px;
  color: #777;
  border-left: 4px solid #ddd;
}

.markdown-body blockquote>:first-child {
  margin-top: 0;
}

.markdown-body blockquote>:last-child {
  margin-bottom: 0;
}

.markdown-body table {
  display: block;
  width: 100%;
  overflow: auto;
  word-break: normal;
  word-break: keep-all;
}

.markdown-body table th {
  font-weight: bold;
}

.markdown-body table th,
.markdown-body table td {
  padding: 6px 13px;
  border: 1px solid #ddd;
}

.markdown-body table tr {
  background-color: #fff;
  border-top: 1px solid #ccc;
}

.markdown-body table tr:nth-child(2n) {
  background-color: #f8f8f8;
}

.markdown-body img {
  max-width: 100%;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

.markdown-body code,
.markdown-body samp {
  padding: 0;
  padding-top: 0.2em;
  padding-bottom: 0.2em;
  margin: 0;
  font-size: 85%;
  background-color: rgba(0,0,0,0.04);
  border-radius: 3px;
}

.markdown-body code:before,
.markdown-body code:after {
  letter-spacing: -0.2em;
  content: "\00a0";
}

.markdown-body pre>code {
  padding: 0;
  margin: 0;
  font-size: 100%;
  word-break: normal;
  white-space: pre;
  background: transparent;
  border: 0;
}

.markdown-body .codehilite {
  margin-bottom: 16px;
}

.markdown-body .codehilite pre,
.markdown-body pre {
  padding: 16px;
  overflow: auto;
  font-size: 85%;
  line-height: 1.45;
  background-color: #f7f7f7;
  border-radius: 3px;
}

.markdown-body .codehilite pre {
  margin-bottom: 0;
  word-break: normal;
}

.markdown-body pre {
  word-wrap: normal;
}

.markdown-body pre code {
  display: inline;
  max-width: initial;
  padding: 0;
  margin: 0;
  overflow: initial;
  line-height: inherit;
  word-wrap: normal;
  background-color: transparent;
  border: 0;
}

.markdown-body pre code:before,
.markdown-body pre code:after {
  content: normal;
}

/* Admonition */
.markdown-body .admonition {
  -webkit-border-radius: 3px;
  -moz-border-radius: 3px;
  position: relative;
  border-radius: 3px;
  border: 1px solid #e0e0e0;
  border-left: 6px solid #333;
  padding: 10px 10px 10px 30px;
}

.markdown-body .admonition table {
  color: #333;
}

.markdown-body .admonition p {
  padding: 0;
}

.markdown-body .admonition-title {
  font-weight: bold;
  margin: 0;
}

.markdown-body .admonition>.admonition-title {
  color: #333;
}

.markdown-body .attention>.admonition-title {
  color: #a6d796;
}

.markdown-body .caution>.admonition-title {
  color: #d7a796;
}

.markdown-body .hint>.admonition-title {
  color: #96c6d7;
}

.markdown-body .danger>.admonition-title {
  color: #c25f77;
}

.markdown-body .question>.admonition-title {
  color: #96a6d7;
}

.markdown-body .note>.admonition-title {
  color: #d7c896;
}

.markdown-body .admonition:before,
.markdown-body .attention:before,
.markdown-body .caution:before,
.markdown-body .hint:before,
.markdown-body .danger:before,
.markdown-body .question:before,
.markdown-body .note:before {
  font: normal normal 16px fontawesome-mini;
  -moz-osx-font-smoothing: grayscale;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  line-height: 1.5;
  color: #333;
  position: absolute;
  left: 0;
  top: 0;
  padding-top: 10px;
  padding-left: 10px;
}

.markdown-body .admonition:before {
  content: "\f056\00a0";
  color: 333;
}

.markdown-body .attention:before {
  content: "\f058\00a0";
  color: #a6d796;
}

.markdown-body .caution:before {
  content: "\f06a\00a0";
  color: #d7a796;
}

.markdown-body .hint:before {
  content: "\f05a\00a0";
  color: #96c6d7;
}

.markdown-body .danger:before {
  content: "\f057\00a0";
  color: #c25f77;
}

.markdown-body .question:before {
  content: "\f059\00a0";
  color: #96a6d7;
}

.markdown-body .note:before {
  content: "\f040\00a0";
  color: #d7c896;
}

.markdown-body .admonition::after {
  content: normal;
}

.markdown-body .attention {
  border-left: 6px solid #a6d796;
}

.markdown-body .caution {
  border-left: 6px solid #d7a796;
}

.markdown-body .hint {
  border-left: 6px solid #96c6d7;
}

.markdown-body .danger {
  border-left: 6px solid #c25f77;
}

.markdown-body .question {
  border-left: 6px solid #96a6d7;
}

.markdown-body .note {
  border-left: 6px solid #d7c896;
}

.markdown-body .admonition>*:first-child {
  margin-top: 0 !important;
}

.markdown-body .admonition>*:last-child {
  margin-bottom: 0 !important;
}

/* progress bar*/
.markdown-body .progress {
  display: block;
  width: 300px;
  margin: 10px 0;
  height: 24px;
  -webkit-border-radius: 3px;
  -moz-border-radius: 3px;
  border-radius: 3px;
  background-color: #ededed;
  position: relative;
  box-shadow: inset -1px 1px 3px rgba(0, 0, 0, .1);
}

.markdown-body .progress-label {
  position: absolute;
  text-align: center;
  font-weight: bold;
  width: 100%; margin: 0;
  line-height: 24px;
  color: #333;
  text-shadow: 1px 1px 0 #fefefe, -1px -1px 0 #fefefe, -1px 1px 0 #fefefe, 1px -1px 0 #fefefe, 0 1px 0 #fefefe, 0 -1px 0 #fefefe, 1px 0 0 #fefefe, -1px 0 0 #fefefe, 1px 1px 2px #000;
  -webkit-font-smoothing: antialiased !important;
  white-space: nowrap;
  overflow: hidden;
}

.markdown-body .progress-bar {
  height: 24px;
  float: left;
  -webkit-border-radius: 3px;
  -moz-border-radius: 3px;
  border-radius: 3px;
  background-color: #96c6d7;
  box-shadow: inset 0 1px 0 rgba(255, 255, 255, .5), inset 0 -1px 0 rgba(0, 0, 0, .1);
  background-size: 30px 30px;
  background-image: -webkit-linear-gradient(
    135deg, rgba(255, 255, 255, .4) 27%,
    transparent 27%,
    transparent 52%, rgba(255, 255, 255, .4) 52%,
    rgba(255, 255, 255, .4) 77%,
    transparent 77%, transparent
  );
  background-image: -moz-linear-gradient(
    135deg,
    rgba(255, 255, 255, .4) 27%, transparent 27%,
    transparent 52%, rgba(255, 255, 255, .4) 52%,
    rgba(255, 255, 255, .4) 77%, transparent 77%,
    transparent
  );
  background-image: -ms-linear-gradient(
    135deg,
    rgba(255, 255, 255, .4) 27%, transparent 27%,
    transparent 52%, rgba(255, 255, 255, .4) 52%,
    rgba(255, 255, 255, .4) 77%, transparent 77%,
    transparent
  );
  background-image: -o-linear-gradient(
    135deg,
    rgba(255, 255, 255, .4) 27%, transparent 27%,
    transparent 52%, rgba(255, 255, 255, .4) 52%,
    rgba(255, 255, 255, .4) 77%, transparent 77%,
    transparent
  );
  background-image: linear-gradient(
    135deg,
    rgba(255, 255, 255, .4) 27%, transparent 27%,
    transparent 52%, rgba(255, 255, 255, .4) 52%,
    rgba(255, 255, 255, .4) 77%, transparent 77%,
    transparent
  );
}

.markdown-body .progress-100plus .progress-bar {
  background-color: #a6d796;
}

.markdown-body .progress-80plus .progress-bar {
  background-color: #c6d796;
}

.markdown-body .progress-60plus .progress-bar {
  background-color: #d7c896;
}

.markdown-body .progress-40plus .progress-bar {
  background-color: #d7a796;
}

.markdown-body .progress-20plus .progress-bar {
  background-color: #d796a6;
}

.markdown-body .progress-0plus .progress-bar {
  background-color: #c25f77;
}

.markdown-body .candystripe-animate .progress-bar{
  -webkit-animation: animate-stripes 3s linear infinite;
  -moz-animation: animate-stripes 3s linear infinite;
  animation: animate-stripes 3s linear infinite;
}

@-webkit-keyframes animate-stripes {
  0% {
    background-position: 0 0;
  }

  100% {
    background-position: 60px 0;
  }
}

@-moz-keyframes animate-stripes {
  0% {
    background-position: 0 0;
  }

  100% {
    background-position: 60px 0;
  }
}

@keyframes animate-stripes {
  0% {
    background-position: 0 0;
  }

  100% {
    background-position: 60px 0;
  }
}

.markdown-body .gloss .progress-bar {
  box-shadow:
    inset 0 4px 12px rgba(255, 255, 255, .7),
    inset 0 -12px 0 rgba(0, 0, 0, .05);
}

/* Multimarkdown Critic Blocks */
.markdown-body .critic_mark {
  background: #ff0;
}

.markdown-body .critic_delete {
  color: #c82829;
  text-decoration: line-through;
}

.markdown-body .critic_insert {
  color: #718c00 ;
  text-decoration: underline;
}

.markdown-body .critic_comment {
  color: #8e908c;
  font-style: italic;
}

.markdown-body .headeranchor {
  font: normal normal 16px octicons-anchor;
  line-height: 1;
  display: inline-block;
  text-decoration: none;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.headeranchor:before {
  content: '\f05c';
}

.markdown-body .task-list-item {
  list-style-type: none;
}

.markdown-body .task-list-item+.task-list-item {
  margin-top: 3px;
}

.markdown-body .task-list-item input {
  margin: 0 4px 0.25em -20px;
  vertical-align: middle;
}

/* Media */
@media only screen and (min-width: 480px) {
  .markdown-body {
    font-size:14px;
  }
}

@media only screen and (min-width: 768px) {
  .markdown-body {
    font-size:16px;
  }
}

@media print {
  .markdown-body * {
    background: transparent !important;
    color: black !important;
    filter:none !important;
    -ms-filter: none !important;
  }

  .markdown-body {
    font-size:12pt;
    max-width:100%;
    outline:none;
    border: 0;
  }

  .markdown-body a,
  .markdown-body a:visited {
    text-decoration: underline;
  }

  .markdown-body .headeranchor-link {
    display: none;
  }

  .markdown-body a[href]:after {
    content: " (" attr(href) ")";
  }

  .markdown-body abbr[title]:after {
    content: " (" attr(title) ")";
  }

  .markdown-body .ir a:after,
  .markdown-body a[href^="javascript:"]:after,
  .markdown-body a[href^="#"]:after {
    content: "";
  }

  .markdown-body pre {
    white-space: pre;
    white-space: pre-wrap;
    word-wrap: break-word;
  }

  .markdown-body pre,
  .markdown-body blockquote {
    border: 1px solid #999;
    padding-right: 1em;
    page-break-inside: avoid;
  }

  .markdown-body .progress,
  .markdown-body .progress-bar {
    -moz-box-shadow: none;
    -webkit-box-shadow: none;
    box-shadow: none;
  }

  .markdown-body .progress {
    border: 1px solid #ddd;
  }

  .markdown-body .progress-bar {
    height: 22px;
    border-right: 1px solid #ddd;
  }

  .markdown-body tr,
  .markdown-body img {
    page-break-inside: avoid;
  }

  .markdown-body img {
    max-width: 100% !important;
  }

  .markdown-body p,
  .markdown-body h2,
  .markdown-body h3 {
    orphans: 3;
    widows: 3;
  }

  .markdown-body h2,
  .markdown-body h3 {
    page-break-after: avoid;
  }
}
</style><title>tomcat access log 格式设置</title></head><body><article class="markdown-body"><h2 id="tomcat-access-log"><a name="user-content-tomcat-access-log" href="#tomcat-access-log" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a>Tomcat access log 日志格式</h2>
<p>文件位置: <code>conf/server.xml</code></p>
<p>默认配置</p>
<pre><code class="xml">        &lt;!-- Access log processes all example.
             Documentation at: /docs/config/valve.html
             Note: The pattern used is equivalent to using pattern=&quot;common&quot; --&gt;
        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;
               prefix=&quot;localhost_access_log.&quot; suffix=&quot;.txt&quot;
               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;
</code></pre>

<table>
<thead>
<tr>
<th>名称</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>%a</td>
<td>Remote IP address</td>
</tr>
<tr>
<td>%A</td>
<td>Local IP address</td>
</tr>
<tr>
<td>%b</td>
<td>Bytes sent, excluding HTTP headers, or &lsquo;-&lsquo; if zero</td>
</tr>
<tr>
<td>%B</td>
<td>Bytes sent, excluding HTTP headers</td>
</tr>
<tr>
<td>%h</td>
<td>Remote host name (or IP address if enableLookups for the connector is false)</td>
</tr>
<tr>
<td>%H</td>
<td>Request protocol</td>
</tr>
<tr>
<td>%l</td>
<td>Remote logical username from identd (always returns &lsquo;-&lsquo;)</td>
</tr>
<tr>
<td>%m</td>
<td>Request method (GET, POST, etc.)</td>
</tr>
<tr>
<td>%p</td>
<td>Local port on which this request was received</td>
</tr>
<tr>
<td>%q</td>
<td>Query string (prepended with a &lsquo;?&rsquo; if it exists)</td>
</tr>
<tr>
<td>%r</td>
<td>First line of the request (method and request URI)</td>
</tr>
<tr>
<td>%s</td>
<td>HTTP status code of the response</td>
</tr>
<tr>
<td>%S</td>
<td>User session ID</td>
</tr>
<tr>
<td>%t</td>
<td>Date and time, in Common Log Format</td>
</tr>
<tr>
<td>%u</td>
<td>Remote user that was authenticated (if any), else &lsquo;-&lsquo;</td>
</tr>
<tr>
<td>%U</td>
<td>Requested URL path</td>
</tr>
<tr>
<td>%v</td>
<td>Local server name</td>
</tr>
<tr>
<td>%D</td>
<td>Time taken to process the request, in millis</td>
</tr>
<tr>
<td>%T</td>
<td>Time taken to process the request, in seconds</td>
</tr>
<tr>
<td>%F</td>
<td>Time taken to commit the response, in millis</td>
</tr>
<tr>
<td>%I</td>
<td>Current request thread name (can compare later with stacktraces)</td>
</tr>
</tbody>
</table>
<p>默认的配置打出来的access日志如下：</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>127.0.0.1</td>
<td>-</td>
<td>-</td>
<td>[07/Oct/2016:22:31:56 +0800]</td>
<td>&ldquo;GET /dubbo/ HTTP/1.1&rdquo;</td>
<td>404</td>
<td>963</td>
</tr>
<tr>
<td>远程IP</td>
<td>logical username</td>
<td>remote user</td>
<td>时间和日期</td>
<td>http请求的第一行</td>
<td>状态码</td>
<td>除去http头的发送大小</td>
</tr>
</tbody>
</table>
<h3 id="headercookiesession"><a name="user-content-headercookiesession" href="#headercookiesession" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a>header、cookie、session其他字段的支持</h3>
<blockquote>
<p>There is also support to write information incoming or outgoing headers, cookies, session or request attributes and special timestamp formats. It is modeled after the Apache HTTP Server log configuration syntax:</p>
</blockquote>
<table>
<thead>
<tr>
<th>名称</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td xxx="xxx">%</td>
<td>for incoming headers</td>
</tr>
<tr>
<td xxx="xxx">%</td>
<td>for outgoing response headers</td>
</tr>
<tr>
<td xxx="xxx">%</td>
<td>for a specific cookie</td>
</tr>
<tr>
<td xxx="xxx">%</td>
<td>xxx is an attribute in the ServletRequest</td>
</tr>
<tr>
<td xxx="xxx">%</td>
<td>xxx is an attribute in the HttpSession</td>
</tr>
<tr>
<td xxx="xxx">%</td>
<td>xxx is an enhanced SimpleDateFormat pattern</td>
</tr>
</tbody>
</table>
<h2 id="_1"><a name="user-content-_1" href="#_1" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a>参考</h2>
<ol>
<li><a href="http://tomcat.apache.org/tomcat-7.0-doc/config/valve.html" target="_blank" rel="external">The Valve Component</a></li>
</ol></article></body></html>]]></content>
    <summary type="html">
    <![CDATA[<!DOCTYPE html><html><head><meta charset="utf-8"><meta name="category" content="tomcat">
<meta name="tags" content="access-log">
<meta name=]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[idea文件模板]]></title>
    <link href="http://qsli.github.io/2016/12/23/idea-template/"/>
    <id>http://qsli.github.io/2016/12/23/idea-template/</id>
    <published>2016-12-22T17:10:59.000Z</published>
    <updated>2016-12-22T17:10:59.477Z</updated>
    <content type="html"><![CDATA[<h1 id="版权信息">版权信息</h1><p>代码前面一般都会有相应的版权信息，拿guava的代码为例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> * Copyright (C) 2007 The Guava Authors</span><br><span class="line"> *</span><br><span class="line"> * Licensed under the Apache License, Version 2.0 (the "License");</span><br><span class="line"> * you may not use this file except in compliance with the License.</span><br><span class="line"> * You may obtain a copy of the License at</span><br><span class="line"> *</span><br><span class="line"> * http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="line"> *</span><br><span class="line"> * Unless required by applicable law or agreed to in writing, software</span><br><span class="line"> * distributed under the License is distributed on an "AS IS" BASIS,</span><br><span class="line"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="line"> * See the License for the specific language governing permissions and</span><br><span class="line"> * limitations under the License.</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.google.common.collect;</span><br></pre></td></tr></table></figure>
<h2 id="idea自动生成版权信息">idea自动生成版权信息</h2><p><code>File</code> &gt; <code>Settings</code> &gt; <code>Copyright</code> &gt; <code>Copyright Profiles</code></p>
<p>新建一个profile，填入如下的内容<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/* * Copyright (c) <span class="variable">$today</span>.year xx.com. All Rights Reserved. */</span><br></pre></td></tr></table></figure></p>
<p><code>$today.year</code>代表当前的年</p>
<p><img src="profiles.jpg" alt=""></p>
<p>新建java文件时就自动生成了版权信息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> *  * Copyright (c) 2016 Qunar.com. All Rights Reserved. </span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.xxx.handler;</span><br></pre></td></tr></table></figure>
<h1 id="作者、日期、邮箱等">作者、日期、邮箱等</h1><p><code>File</code> &gt; <code>Settings</code> &gt; <code>File and Ocde Templates</code> &gt; <code>Includes</code> &gt; <code>File Header</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#set( $email = "xx@xx.com")</span><br><span class="line">#set( $author = "xxx")</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author $&#123;author&#125;</span><br><span class="line"> * @email $&#123;email&#125;</span><br><span class="line"> * @date $&#123;DATE&#125; $&#123;TIME&#125;</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>
<p>这个使用的<code>velocity</code>渲染的，可以参考<code>velocity</code>的语法</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="版权信息">版权信息</h1><p>代码前面一般都会有相应的版权信息，拿guava的代码为例</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="li]]>
    </summary>
    
      <category term="template" scheme="http://qsli.github.io/tags/template/"/>
    
      <category term="idea" scheme="http://qsli.github.io/categories/idea/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[tomcat中文编码设置]]></title>
    <link href="http://qsli.github.io/2016/12/23/tomcat-encoding/"/>
    <id>http://qsli.github.io/2016/12/23/tomcat-encoding/</id>
    <published>2016-12-22T16:43:20.000Z</published>
    <updated>2016-12-22T16:47:30.453Z</updated>
    <content type="html"><![CDATA[<h2 id="tomcat中文乱码">tomcat中文乱码</h2><p>tomcat 默认的编<code>ISO-8859-1</code>编码，部分中文会出现乱码</p>
<blockquote>
<p><em>URIEncoding</em><br>This specifies the character encoding used to decode the URI bytes, after %xx decoding the URL. If not specified, ISO-8859-1 will be used.</p>
</blockquote>
<h2 id="编码设置">编码设置</h2><p><code>conf/server.xml</code></p>
<p>修改前：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">Connector</span> <span class="attribute">port</span>=<span class="value">"8080"</span> <span class="attribute">redirectPort</span>=<span class="value">"8443"</span> <span class="attribute">connectionTimeout</span>=<span class="value">"20000"</span> <span class="attribute">protocol</span>=<span class="value">"HTTP/1.1"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>修改后：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">Connector</span> <span class="attribute">port</span>=<span class="value">"8080"</span> <span class="attribute">redirectPort</span>=<span class="value">"8443"</span> <span class="attribute">connectionTimeout</span>=<span class="value">"20000"</span> </span><br><span class="line"><span class="attribute">protocol</span>=<span class="value">"HTTP/1.1"</span>               </span><br><span class="line"><span class="attribute">URIEncoding</span>=<span class="value">"UTF-8"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2><ol>
<li><a href="https://tomcat.apache.org/tomcat-7.0-doc/config/http.html" target="_blank" rel="external">The HTTP Connector</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="tomcat中文乱码">tomcat中文乱码</h2><p>tomcat 默认的编<code>ISO-8859-1</code>编码，部分中文会出现乱码</p>
<blockquote>
<p><em>URIEncoding</em><br>This specif]]>
    </summary>
    
      <category term="encoding" scheme="http://qsli.github.io/tags/encoding/"/>
    
      <category term="tomcat" scheme="http://qsli.github.io/categories/tomcat/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[tomcat access log 格式设置]]></title>
    <link href="http://qsli.github.io/2016/12/23/tomcat-access-log/"/>
    <id>http://qsli.github.io/2016/12/23/tomcat-access-log/</id>
    <published>2016-12-22T16:43:10.000Z</published>
    <updated>2016-12-23T02:24:57.656Z</updated>
    <content type="html"><![CDATA[<h2 id="Tomcat_access_log_日志格式">Tomcat access log 日志格式</h2><p>文件位置: <code>conf/server.xml</code></p>
<p>默认配置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Access log processes all example.</span><br><span class="line">     Documentation at: /docs/config/valve.html</span><br><span class="line">     <span class="doctag">Note:</span> The pattern used is equivalent to using pattern="common" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">Valve</span> <span class="attribute">className</span>=<span class="value">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attribute">directory</span>=<span class="value">"logs"</span></span><br><span class="line">       <span class="attribute">prefix</span>=<span class="value">"localhost_access_log."</span> <span class="attribute">suffix</span>=<span class="value">".txt"</span></span><br><span class="line">       <span class="attribute">pattern</span>=<span class="value">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>名称</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>%a</td>
<td>Remote IP address</td>
</tr>
<tr>
<td>%A</td>
<td>Local IP address</td>
</tr>
<tr>
<td>%b</td>
<td>Bytes sent, excluding HTTP headers, or ‘-‘ if zero</td>
</tr>
<tr>
<td>%B</td>
<td>Bytes sent, excluding HTTP headers</td>
</tr>
<tr>
<td>%h</td>
<td>Remote host name (or IP address if enableLookups for the connector is false)</td>
</tr>
<tr>
<td>%H</td>
<td>Request protocol</td>
</tr>
<tr>
<td>%l</td>
<td>Remote logical username from identd (always returns ‘-‘)</td>
</tr>
<tr>
<td>%m</td>
<td>Request method (GET, POST, etc.)</td>
</tr>
<tr>
<td>%p</td>
<td>Local port on which this request was received</td>
</tr>
<tr>
<td>%q</td>
<td>Query string (prepended with a ‘?’ if it exists)</td>
</tr>
<tr>
<td>%r</td>
<td>First line of the request (method and request URI)</td>
</tr>
<tr>
<td>%s</td>
<td>HTTP status code of the response</td>
</tr>
<tr>
<td>%S</td>
<td>User session ID</td>
</tr>
<tr>
<td>%t</td>
<td>Date and time, in Common Log Format</td>
</tr>
<tr>
<td>%u</td>
<td>Remote user that was authenticated (if any), else ‘-‘</td>
</tr>
<tr>
<td>%U</td>
<td>Requested URL path</td>
</tr>
<tr>
<td>%v</td>
<td>Local server name</td>
</tr>
<tr>
<td>%D</td>
<td>Time taken to process the request, in millis</td>
</tr>
<tr>
<td>%T</td>
<td>Time taken to process the request, in seconds</td>
</tr>
<tr>
<td>%F</td>
<td>Time taken to commit the response, in millis</td>
</tr>
<tr>
<td>%I</td>
<td>Current request thread name (can compare later with stacktraces)</td>
</tr>
</tbody>
</table>
<p>默认的配置打出来的access日志如下：</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>127.0.0.1</td>
<td>-</td>
<td>-</td>
<td>[07/Oct/2016:22:31:56 +0800]</td>
<td>“GET /dubbo/ HTTP/1.1”</td>
<td>404</td>
<td>963</td>
</tr>
<tr>
<td>远程IP</td>
<td>logical username</td>
<td>remote user</td>
<td>时间和日期</td>
<td>http请求的第一行</td>
<td>状态码</td>
<td>除去http头的发送大小</td>
</tr>
</tbody>
</table>
<h3 id="header、cookie、session其他字段的支持">header、cookie、session其他字段的支持</h3><blockquote>
<p>There is also support to write information incoming or outgoing headers, cookies, session or request attributes and special timestamp formats. It is modeled after the Apache HTTP Server log configuration syntax:</p>
</blockquote>
<table>
<thead>
<tr>
<th>名称</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>%{xxx}i</td>
<td>for incoming headers</td>
</tr>
<tr>
<td>%{xxx}o</td>
<td>for outgoing response headers</td>
</tr>
<tr>
<td>%{xxx}c</td>
<td>for a specific cookie</td>
</tr>
<tr>
<td>%{xxx}r</td>
<td>xxx is an attribute in the ServletRequest</td>
</tr>
<tr>
<td>%{xxx}s</td>
<td>xxx is an attribute in the HttpSession</td>
</tr>
<tr>
<td>%{xxx}t</td>
<td>xxx is an enhanced SimpleDateFormat pattern</td>
</tr>
</tbody>
</table>
<p>例如： <code>%{X-Forwarded-For}i</code>即可打印出实际访问的ip地址（考虑到ng的反向代理）</p>
<p>HTTP头一般格式如下:</p>
<p><code>X-Forwarded-For: client1, proxy1, proxy2</code></p>
<blockquote>
<p>其中的值通过一个 逗号+空格 把多个IP地址区分开, 最左边（client1）是最原始客户端的IP地址, 代理服务器每成功收到一个请求，就把请求来源IP地址添加到右边。 在上面这个例子中，这个请求成功通过了三台代理服务器：proxy1, proxy2 及 proxy3。请求由client1发出，到达了proxy3（proxy3可能是请求的终点）。请求刚从client1中发出时，XFF是空的，请求被发往proxy1；通过proxy1的时候，client1被添加到XFF中，之后请求被发往proxy2;通过proxy2的时候，proxy1被添加到XFF中，之后请求被发往proxy3；通过proxy3时，proxy2被添加到XFF中，之后请求的的去向不明，如果proxy3不是请求终点，请求会被继续转发。</p>
<p>鉴于伪造这一字段非常容易，应该谨慎使用X-Forwarded-For字段。正常情况下XFF中最后一个IP地址是最后一个代理服务器的IP地址, 这通常是一个比较可靠的信息来源。</p>
</blockquote>
<h2 id="参考">参考</h2><ol>
<li><p><a href="http://tomcat.apache.org/tomcat-7.0-doc/config/valve.html" target="_blank" rel="external">The Valve Component</a></p>
</li>
<li><p><a href="https://zh.wikipedia.org/wiki/X-Forwarded-For" target="_blank" rel="external">X-Forwarded-For</a></p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Tomcat_access_log_日志格式">Tomcat access log 日志格式</h2><p>文件位置: <code>conf/server.xml</code></p>
<p>默认配置</p>
<figure class="highlight xm]]>
    </summary>
    
      <category term="access-log" scheme="http://qsli.github.io/tags/access-log/"/>
    
      <category term="tomcat" scheme="http://qsli.github.io/categories/tomcat/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[python 小技巧]]></title>
    <link href="http://qsli.github.io/2016/12/18/python-util/"/>
    <id>http://qsli.github.io/2016/12/18/python-util/</id>
    <published>2016-12-18T03:57:35.000Z</published>
    <updated>2016-12-22T16:56:45.844Z</updated>
    <content type="html"><![CDATA[<h2 id="开启一个简单的HTTP_Server">开启一个简单的HTTP Server</h2><ul>
<li>命令：</li>
</ul>
<p><code>python -m SimpleHTTPServer port</code></p>
<p><code>-m</code> 是指后面跟的是python的一个Module</p>
<p><code>port</code> 默认是<code>8080</code>，可以自行指定。</p>
<ul>
<li>作用：</li>
</ul>
<ol>
<li><p>可以当一个简单的httpserver，做测试用</p>
</li>
<li><p>可以简单的传输一些小文件（大文件性能不好，经常中断）,大文件的传输可以用nc</p>
</li>
</ol>
<p>见： <a href="/2016/12/18/nc/" title="netcat(nc) —— 使用小结">netcat(nc) —— 使用小结</a></p>
<h2 id="简单的cig_server">简单的cig server</h2><ul>
<li><p>命令：<br><code>python -m CGIHTTPServer port</code></p>
</li>
<li><p>作用:</p>
</li>
</ul>
<p>可以开启一个简单的cgi服务器，支持python作为cgi的语言，cgi的脚本须放置在root目录下的<code>cgi-bin</code></p>
<h2 id="格式化_json数据">格式化 json数据</h2><ul>
<li>命令:</li>
</ul>
<p><code>curl http://my_url/ | python -m json.tool</code></p>
<ul>
<li>作用:</li>
</ul>
<p>在返回大量json数据时，在命令行里可以用这个工具进行格式化。</p>
<p>chrome浏览器中的<code>JsonView</code>插件可以做到同样的事情<a href="https://chrome.google.com/webstore/detail/json-viewer/aimiinbnnkboelefkjlenlgimcabobli?utm_source=chrome-ntp-icon" target="_blank" rel="external">chrome商店链接</a></p>
<ul>
<li>缺陷：</li>
</ul>
<p>python 2.x 中是使用ASCII码作为默认编码的，因此json中如果带有中文就只是16进制的表示，可以修改<code>json.tool</code>的源代码。</p>
<p>参见<a href="http://axiaoxin.com/article/77/" target="_blank" rel="external">json处理小技巧</a></p>
<blockquote>
<p>Python也有命令行里面格式化显示json的模块json.tool</p>
<p>cat data.json<br>{“爱”: “我”, “中”: “华”}<br>cat data.json| python -m json.tool<br>{<br>    “\u4e2d”: “\u534e”,<br>    “\u7231”: “\u6211”<br>}<br>好像有什么不对劲？因为json.tool在实现的时候ensure_ascii为True，让我们用Python来自己实现一个更好的Unix filter。</p>
</blockquote>
<p><code>filter.py</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> fileinput</span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> fileinput.input():</span><br><span class="line">    print(json.dumps(json.loads(l), ensure_ascii=<span class="keyword">False</span>).encode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure>
<p>只需要写上面那 4 行代码，就可以这样使用它：</p>
<blockquote>
<p>python filter.py data.json<br>{“爱”: “我”, “中”: “华”}<br>cat data.json| python filter.py<br>{“爱”: “我”, “中”: “华”}</p>
</blockquote>
<h2 id="编码问题">编码问题</h2><p>python 2.x 默认使用的编码是ascii编码，中文总是出问题。</p>
<p>遇到乱码问题，一般使用如下的步骤即可解决:</p>
<ol>
<li>python文件自身的编码</li>
</ol>
<blockquote>
<pre><code>Python will <span class="keyword">default</span> <span class="keyword">to</span> ASCII <span class="keyword">as</span> standard <span class="keyword">encoding</span> <span class="keyword">if</span> no other
<span class="keyword">encoding</span> hints are given.
</code></pre></blockquote>
<pre><code>To define <span class="operator">a</span> source code encoding, <span class="operator">a</span> magic comment must
be placed <span class="keyword">into</span> <span class="operator">the</span> source <span class="built_in">files</span> either <span class="keyword">as</span> <span class="keyword">first</span> <span class="operator">or</span> <span class="keyword">second</span>
<span class="built_in">line</span> <span class="operator">in</span> <span class="operator">the</span> <span class="built_in">file</span>, such <span class="keyword">as</span>:

      <span class="comment"># coding=&lt;encoding name&gt;</span>

<span class="operator">or</span> (<span class="keyword">using</span> formats recognized <span class="keyword">by</span> popular editors)

      <span class="comment">#!/usr/bin/python</span>
      <span class="comment"># -*- coding: &lt;encoding name&gt; -*-</span>
</code></pre><p>在文件头加上默认编码即可：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> os, sys</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<ol>
<li>重新设置系统模块的编码</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setdefaultencoding(<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure>
<ol>
<li>使用Unicode</li>
</ol>
<p><code>s = u&#39;中文&#39;</code> </p>
<h2 id="to_be_continued">to be continued</h2><h1 id="参考">参考</h1><ol>
<li><a href="https://www.python.org/dev/peps/pep-0263/" target="_blank" rel="external">Defining Python Source Code Encodings</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="开启一个简单的HTTP_Server">开启一个简单的HTTP Server</h2><ul>
<li>命令：</li>
</ul>
<p><code>python -m SimpleHTTPServer port</code></p>
<p><code>-m</]]>
    </summary>
    
      <category term="python-util" scheme="http://qsli.github.io/tags/python-util/"/>
    
      <category term="python" scheme="http://qsli.github.io/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[netcat(nc) —— 使用小结]]></title>
    <link href="http://qsli.github.io/2016/12/18/nc/"/>
    <id>http://qsli.github.io/2016/12/18/nc/</id>
    <published>2016-12-18T03:29:28.000Z</published>
    <updated>2016-12-18T05:11:56.048Z</updated>
    <content type="html"><![CDATA[<p>nc的全称是netcat，提供了许多关于网络操作的功能，号称网络工具中的瑞士军刀。</p>
<p>nc也有windows的移植版本：<a href="https://eternallybored.org/misc/netcat/" target="_blank" rel="external"></a></p>
<blockquote>
<p>  Netcat is a featured networking utility which reads and writes data across network connections, using the TCP/IP protocol.<br>It is designed to be a reliable “back-end” tool that can be used directly or easily driven by other programs and scripts. At the same time, it is a feature-rich network debugging and exploration tool, since it can create almost any kind of connection you would need and has several interesting built-in capabilities.</p>
</blockquote>
<h2 id="常见用途">常见用途</h2><h3 id="nc_传输文件：">nc 传输文件：</h3><ul>
<li>传送文件</li>
</ul>
<p>发送端：<code>nc -l 6666 &lt; file</code><br>接收端: <code>nc host 6666 | pv -L 30m &gt; wrapper</code></p>
<p>其中pv是一个限流的工具。</p>
<ul>
<li>压缩传输一个文件夹</li>
</ul>
<p><code>tar zcvf folder.tar.gz folder | nc -l 6666</code></p>
<h2 id="参考链接">参考链接</h2><ol>
<li><a href="http://netcat.sourceforge.net/" target="_blank" rel="external">The GNU Netcat</a></li>
<li><a href="https://www.oschina.net/translate/linux-netcat-command" target="_blank" rel="external">Linux Netcat 命令——网络工具中的瑞士军刀</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>nc的全称是netcat，提供了许多关于网络操作的功能，号称网络工具中的瑞士军刀。</p>
<p>nc也有windows的移植版本：<a href="https://eternallybored.org/misc/netcat/" target="_blank" rel="]]>
    </summary>
    
      <category term="netcat" scheme="http://qsli.github.io/tags/netcat/"/>
    
      <category term="linux" scheme="http://qsli.github.io/categories/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java SPI 总结]]></title>
    <link href="http://qsli.github.io/2016/12/17/spi/"/>
    <id>http://qsli.github.io/2016/12/17/spi/</id>
    <published>2016-12-17T13:39:32.000Z</published>
    <updated>2016-12-18T05:07:04.767Z</updated>
    <content type="html"><![CDATA[<h2 id="SPI_ABC">SPI ABC</h2><p>SPI 代表<code>Service Provider Interfaces</code>, 是一种服务提供发现的机制。JDK中为其提供了<code>ServiceLoader</code>用来加载接口对应的实现。</p>
<h2 id="使用约定">使用约定</h2><p><img src="usage.jpg" alt="使用约定"></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">└── src</span><br><span class="line">├── com</span><br><span class="line">│   └── ivanzhang</span><br><span class="line">│       └── spi</span><br><span class="line">│           ├── HelloInterface<span class="class">.java</span></span><br><span class="line">│           ├── impl</span><br><span class="line">│           │   ├── ImageHello<span class="class">.java</span></span><br><span class="line">│           │   └── TextHello<span class="class">.java</span></span><br><span class="line">│           └── SPIMain<span class="class">.java</span></span><br><span class="line">└── META-INF</span><br><span class="line">    └── services</span><br><span class="line">        └── com<span class="class">.ivanzhang</span><span class="class">.spi</span><span class="class">.HelloInterface</span></span><br></pre></td></tr></table></figure>
<h2 id="使用例子">使用例子</h2><ul>
<li>common-logging</li>
</ul>
<blockquote>
<p>common-logging，apache最早提供的日志的门面接口。只有接口，没有实现。具体方案由各提供商实现，发现日志提供商是通过扫描 META-INF/services/org.apache.commons.logging.LogFactory配置文件，通过读取该文件的内容找到日志提工商实现类。只要我们的日志实现里包含了这个文件，并在文件里制定 LogFactory工厂接口的实现类即可。</p>
</blockquote>
<ul>
<li>jdbc</li>
</ul>
<blockquote>
<p>jdbc4.0以前，开发还需要基于Class.forName(“xxx”)的方式来装载驱动，jdbc4也基于spi的机制来发现驱动提供商了，可以通过META-INF/services/java.sql.Driver文件里指定实现类的方式来暴露驱动提供者。</p>
</blockquote>
<p><em>其他用途：</em></p>
<ul>
<li>Java Database Connectivity</li>
<li>Java Cryptography Extension</li>
<li>Java Naming and Directory Interface</li>
<li>Java API for XML Processing</li>
<li>Java Business Integration</li>
<li>Java Sound</li>
<li>Java Image I/O</li>
<li>Java File Systems</li>
</ul>
<h2 id="参考">参考</h2><ol>
<li><p><a href="http://www.solinx.co/archives/142" target="_blank" rel="external">Java的SPI机制与简单示例</a></p>
</li>
<li><p><a href="https://my.oschina.net/u/1034176/blog/659445" target="_blank" rel="external">Java SPI机制简介 - oschina</a></p>
</li>
<li><p><a href="http://ivanzhangwb.github.io/blog/2012/06/01/java-spi/" target="_blank" rel="external">Java SPI机制简介 - 技术宅</a></p>
</li>
<li><p><a href="https://docs.oracle.com/javase/tutorial/sound/SPI-intro.html" target="_blank" rel="external">Introduction to the Service Provider Interfaces</a></p>
</li>
<li><p><a href="http://www.jianshu.com/p/bd36c023ddf0" target="_blank" rel="external">谈java SPI机制、spring-mvc启动及servlet3.0</a></p>
</li>
<li><p><a href="https://en.wikipedia.org/wiki/Service_provider_interface" target="_blank" rel="external">Service Provider Interface</a></p>
</li>
<li><p><a href="http://resources.sei.cmu.edu/asset_files/TechnicalNote/2002_004_001_13958.pdf" target="_blank" rel="external">Replaceable Components and the Service Provider Interface </a></p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="SPI_ABC">SPI ABC</h2><p>SPI 代表<code>Service Provider Interfaces</code>, 是一种服务提供发现的机制。JDK中为其提供了<code>ServiceLoader</code>用来加载接口对应的实现。]]>
    </summary>
    
      <category term="spi" scheme="http://qsli.github.io/tags/spi/"/>
    
      <category term="java" scheme="http://qsli.github.io/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[正则总结]]></title>
    <link href="http://qsli.github.io/2016/12/14/re/"/>
    <id>http://qsli.github.io/2016/12/14/re/</id>
    <published>2016-12-14T15:48:12.000Z</published>
    <updated>2016-12-14T15:48:12.927Z</updated>
    <content type="html"><![CDATA[<h1 id="测试">测试</h1><p>推荐使用<code>RegexBudy</code></p>
<p><img src="https://www.regexbuddy.com/img/icon.png" alt="RegexBuddy"></p>
<p>界面如下:</p>
<p><img src="https://www.regexbuddy.com/screens/regexbuddy.png" alt="regexbuddy"></p>
<p>推荐python的 <code>VerbalExpressions</code> <a href="https://github.com/VerbalExpressions/PythonVerbalExpressions" target="_blank" rel="external">PythonVerbalExpressions </a></p>
<h1 id="使用心得">使用心得</h1><h2 id="匹配多个单词">匹配多个单词</h2><p><code>\b</code>可以匹配一个单词的开头或者结尾</p>
<p>匹配单个单词： <code>\bfoo\b</code> 可以匹配单个单测 foo</p>
<p>匹配多个单词： <code>\b(foo|bar)\b</code> 可以匹配foo 或者 bar</p>
<h2 id="匹配开头和结尾">匹配开头和结尾</h2><p><code>^</code>可以匹配字符串的开头</p>
<p><code>$</code>可以匹配字符串的结尾</p>
<h2 id="零宽断言">零宽断言</h2><table>
<thead>
<tr>
<th>分类</th>
<th>代码/语法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>捕获</td>
<td>(exp)</td>
<td>匹配exp,并捕获文本到自动命名的组里</td>
</tr>
<tr>
<td></td>
<td>(?<name>exp)</name></td>
<td>匹配exp,并捕获文本到名称为name的组里，也可以写成(?’name’exp)</td>
</tr>
<tr>
<td></td>
<td>(?:exp)</td>
<td>匹配exp,不捕获匹配的文本，也不给此分组分配组号</td>
</tr>
<tr>
<td>零宽断言</td>
<td>(?=exp) 匹配exp前面的位置</td>
</tr>
<tr>
<td></td>
<td>(?&lt;=exp)</td>
<td>匹配exp后面的位置</td>
</tr>
<tr>
<td></td>
<td>(?!exp)</td>
<td>匹配后面跟的不是exp的位置</td>
</tr>
<tr>
<td></td>
<td>(?&lt;!exp)</td>
<td>匹配前面不是exp的位置</td>
</tr>
<tr>
<td>注释  (?#comment)</td>
<td>这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读</td>
</tr>
</tbody>
</table>
<h3 id="先行断言">先行断言</h3><p>语法格式</p>
<p><code>[a-z]*(?=ing)</code></p>
<p>可匹配 cooking singing 中的cook 与 sing</p>
<h3 id="后发断言">后发断言</h3><p>语法格式</p>
<p><code>(?&lt;=abc)[a-z]*</code></p>
<p>可匹配 abcdefg 中的defg</p>
<h3 id="负向零宽断言">负向零宽断言</h3><p>语法格式</p>
<p><code>(?!exp)</code></p>
<p>断言此位置的后面不能匹配表达式<code>exp</code></p>
<p><code>\b\w*q(?!u)\w*\b</code> 匹配q后面不出现u（可以以q结尾）</p>
<h1 id="参考">参考</h1><ol>
<li><p><a href="https://www.regexbuddy.com/" target="_blank" rel="external">RegexBuddy官网</a></p>
</li>
<li><p><a href="https://luke0922.gitbooks.io/learnregularexpressionin30minutes/content/" target="_blank" rel="external">正则表达式30分钟入门教程</a></p>
</li>
<li><p><a href="http://www.biliyu.com/article/1321.html" target="_blank" rel="external">正则表达式怎样匹配多个单词</a></p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="测试">测试</h1><p>推荐使用<code>RegexBudy</code></p>
<p><img src="https://www.regexbuddy.com/img/icon.png" alt="RegexBuddy"></p>
<p>界面如下:</p]]>
    </summary>
    
      <category term="re" scheme="http://qsli.github.io/tags/re/"/>
    
      <category term="base" scheme="http://qsli.github.io/categories/base/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[atnode——在集群上批量执行命令]]></title>
    <link href="http://qsli.github.io/2016/12/13/atnode/"/>
    <id>http://qsli.github.io/2016/12/13/atnode/</id>
    <published>2016-12-12T16:07:02.000Z</published>
    <updated>2016-12-18T05:10:03.774Z</updated>
    <content type="html"><![CDATA[<h2 id="atnodes">atnodes</h2><p>atnode是一个用perl写成的工具，它可以方便的在集群上执行命令</p>
<p><a href="http://search.cpan.org/~agent/SSH-Batch-0.029/bin/atnodes" target="_blank" rel="external">官网链接</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">atnodes <span class="string">"echo alias grep=\'grep -n --color\' &gt;&gt; ~/.bashrc "</span>  xxx.xx[<span class="number">1</span>-<span class="number">10</span>].com  yyy.yy[<span class="number">1</span>-<span class="number">10</span>].com</span><br></pre></td></tr></table></figure>
<p>上述的命令就会在后面两个列表的主机上都执行一遍了。</p>
<h2 id="tonodes">tonodes</h2><p>与atnodes类似，tonodes 可以将文件传输到集群上的没一个文件</p>
<h2 id="其他">其他</h2><p>fornodes: Expand patterns to machine host list</p>
<p>key2nodes: Push SSH public keys to remote clusters </p>
<h2 id="作者博客">作者博客</h2><p><a href="http://weibo.com/u/1834459124?topnav=1&amp;wvr=6&amp;topsug=1&amp;is_all=1" target="_blank" rel="external">agentzh的微博</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="atnodes">atnodes</h2><p>atnode是一个用perl写成的工具，它可以方便的在集群上执行命令</p>
<p><a href="http://search.cpan.org/~agent/SSH-Batch-0.029/bin/atnodes]]>
    </summary>
    
      <category term="shell" scheme="http://qsli.github.io/tags/shell/"/>
    
      <category term="linux" scheme="http://qsli.github.io/categories/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[grep 总结]]></title>
    <link href="http://qsli.github.io/2016/12/07/grep/"/>
    <id>http://qsli.github.io/2016/12/07/grep/</id>
    <published>2016-12-06T16:12:54.000Z</published>
    <updated>2016-12-06T16:12:54.740Z</updated>
    <content type="html"><![CDATA[<h2 id="常见用法">常见用法</h2><p>示例文本：</p>
<blockquote>
<p>“Night gathers, and now my watch begins. It shall not end<br>until my death. I shall take no wife, hold no lands, father no<br>children. I shall wear no crowns and win no glory. I shall live<br>and die at my post. I am the sword in the darkness. I am the<br>watcher on the walls. I am the shield that guards the realms of<br>men. I pledge my life and honor to the Night’s Watch, for this<br>night and all the nights to come.”</p>
</blockquote>
<h3 id="grep_&#39;keyword&#39;_filename"><code>grep &#39;keyword&#39; filename</code></h3><p>在一个文件按照关键字查找</p>
<p> <code>grep &#39;now&#39; test.txt</code> 输出</p>
<blockquote>
<p>“Night gathers, and now my watch begins. It shall not end</p>
</blockquote>
<h3 id="grep_-n"><code>grep -n</code></h3><p>显示行号</p>
<p> <code>grep -n &#39;now&#39; test.txt</code> 输出</p>
<blockquote>
<p>1:”Night gathers, and now my watch begins. It shall not end</p>
</blockquote>
<h3 id="grep_-i"><code>grep -i</code></h3><p>忽略大小写</p>
<p> <code>grep -i &#39;watch&#39; test.txt</code> 输出</p>
<blockquote>
<p>“Night gathers, and now my watch begins. It shall not end<br>watcher on the walls. I am the shield that guards the realms of<br>men. I pledge my life and honor to the Night’s Watch, for this</p>
</blockquote>
<h3 id="grep_-v"><code>grep -v</code></h3><p>输出不包含 <code>-v</code> 后面关键字的行</p>
<p><code>grep -v &#39;watch&#39; test.txt</code> 输出</p>
<blockquote>
<p>until my death. I shall take no wife, hold no lands, father no<br>children. I shall wear no crowns and win no glory. I shall live<br>and die at my post. I am the sword in the darkness. I am the<br>men. I pledge my life and honor to the Night’s Watch, for this<br>night and all the nights to come.”</p>
</blockquote>
<h3 id="grep_-e"><code>grep -e</code></h3><p>提供正则的支持，关键字中可以包含正则表达式</p>
<h3 id="grep_-B10"><code>grep -B10</code></h3><p>输出匹配行的同事， 也输出匹配行之前的10行（before）</p>
<h3 id="grep_-A10"><code>grep -A10</code></h3><p>输出匹配行的同时，也输出匹配行之后的10行（after）</p>
<h3 id="grep_-C10"><code>grep -C10</code></h3><p>输出匹配行的同时，输出之前和之后的10行</p>
<h3 id="grep_-o"><code>grep -o</code></h3><p>只输出匹配的内容</p>
<p><code>grep -o &#39;watch&#39; test.txt</code></p>
<blockquote>
<p>watch<br>  watch</p>
</blockquote>
<h3 id="grep_-c"><code>grep -c</code></h3><p>输出匹配的行数的个数</p>
<p><code>grep -ci &#39;watch&#39; test.txt</code></p>
<blockquote>
<p>3</p>
</blockquote>
<h3 id="grep_-l"><code>grep -l</code></h3><p>显示有匹配行的文件，只显示文件名称，不显示内容</p>
<p><code>grep -l &#39;watch&#39; test.txt</code></p>
<blockquote>
<p>test.txt</p>
</blockquote>
<h3 id="grep_-H"><code>grep -H</code></h3><p>在匹配行的前面同时输出文件名</p>
<p><code>grep -H &#39;watch&#39; test.txt</code></p>
<blockquote>
<p>test.txt:”Night gathers, and now my watch begins. It shall not end<br>test.txt:watcher on the walls. I am the shield that guards the realms of</p>
</blockquote>
<h2 id="高亮">高亮</h2><h3 id="grep_–color">grep –color</h3><p><code>grep -H --color &#39;watch&#39; test.txt</code></p>
<p><img src="color.jpg" alt=""></p>
<h3 id="设置环境变量">设置环境变量</h3><p>在用户目录下的<code>.bashrc</code>中设置环境变量，也可以达到高亮的目的</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GREP_OPTIONS=<span class="string">'--color=auto'</span></span><br></pre></td></tr></table></figure>
<p>添加之后记得<code>source ~/.bashrc</code>, 然后才能生效</p>
<h2 id="egrep">egrep</h2><blockquote>
<p>egrep 命令与 grep 命令带 -E 标志是一样的，除了错误消息和使用情况消息不同以及 -s 标志的功能不同之外。</p>
</blockquote>
<h3 id="多关键字">多关键字</h3><p>使用正则就可以同时搜索多个关键字</p>
<p><code>grep -E &#39;keyword1 | keyword2&#39; filename</code></p>
<p><code>grep --color -E  &#39;am | to&#39; test.txt</code></p>
<p><img src="egrep.jpg" alt=""></p>
<h2 id="zgrep">zgrep</h2><p>zgrep 可以在压缩文件中搜索内容</p>
<h2 id="参考">参考</h2><ol>
<li><p><a href="https://www.cyberciti.biz/faq/howto-use-grep-command-in-linux-unix/" target="_blank" rel="external">HowTo: Use grep Command In Linux / UNIX – Examples</a></p>
</li>
<li><p><a href="https://www.ibm.com/support/knowledgecenter/zh/ssw_aix_61/com.ibm.aix.cmds2/egrep.htm" target="_blank" rel="external">egrep 命令 - IBM</a></p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="常见用法">常见用法</h2><p>示例文本：</p>
<blockquote>
<p>“Night gathers, and now my watch begins. It shall not end<br>until my death. I shall tak]]>
    </summary>
    
      <category term="shell" scheme="http://qsli.github.io/tags/shell/"/>
    
      <category term="linux" scheme="http://qsli.github.io/categories/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HttpMessageConverter 原理和源码]]></title>
    <link href="http://qsli.github.io/2016/11/29/HttpMessageConverter/"/>
    <id>http://qsli.github.io/2016/11/29/HttpMessageConverter/</id>
    <published>2016-11-28T18:48:45.000Z</published>
    <updated>2016-12-18T05:09:13.824Z</updated>
    <content type="html"><![CDATA[<h2 id="架构">架构</h2><p><img src="arch.jpg" alt=""></p>
<h2 id="HttpMessageConverter接口">HttpMessageConverter接口</h2><p><img src="http-message-converter.jpg" alt=""></p>
<blockquote>
<p><code>HttpMessageConverter</code> used to<br>marshal objects into the HTTP request body and to unmarshal any response back into an object.</p>
</blockquote>
<p>提供将Java中的对象和http请求、响应相互转换的功能</p>
<h3 id="spring_中的配置">spring 中的配置</h3><p>xml配置示例：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">mvc:annotation-driven</span> <span class="attribute">conversion-service</span>=<span class="value">"conversionService"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.http.converter.StringHttpMessageConverter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"objectMapper"</span> <span class="attribute">ref</span>=<span class="value">"jsonObjectMapper"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>java配置示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">DelegatingWebMvcConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span></span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="annotation">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RequestMappingHandlerAdapter <span class="title">requestMappingHandlerAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Create or let "super" create the adapter</span></span><br><span class="line">    <span class="comment">// Then customize one of its properties</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="接口描述">接口描述</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.http.converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpInputMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpOutputMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Strategy interface that specifies a converter that can convert from and to HTTP requests and responses.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@author</span> Arjen Poutsma</span><br><span class="line"> * <span class="doctag">@author</span> Juergen Hoeller</span><br><span class="line"> * <span class="doctag">@since</span> 3.0</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HttpMessageConverter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Indicates whether the given class can be read by this converter.</span><br><span class="line">	 * <span class="doctag">@param</span> clazz the class to test for readability</span><br><span class="line">	 * <span class="doctag">@param</span> mediaType the media type to read, can be &#123;<span class="doctag">@code</span> null&#125; if not specified.</span><br><span class="line">	 * Typically the value of a &#123;<span class="doctag">@code</span> Content-Type&#125; header.</span><br><span class="line">	 * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if readable; &#123;<span class="doctag">@code</span> false&#125; otherwise</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">canRead</span><span class="params">(Class&lt;?&gt; clazz, MediaType mediaType)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Indicates whether the given class can be written by this converter.</span><br><span class="line">	 * <span class="doctag">@param</span> clazz the class to test for writability</span><br><span class="line">	 * <span class="doctag">@param</span> mediaType the media type to write, can be &#123;<span class="doctag">@code</span> null&#125; if not specified.</span><br><span class="line">	 * Typically the value of an &#123;<span class="doctag">@code</span> Accept&#125; header.</span><br><span class="line">	 * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if writable; &#123;<span class="doctag">@code</span> false&#125; otherwise</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">canWrite</span><span class="params">(Class&lt;?&gt; clazz, MediaType mediaType)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Return the list of &#123;<span class="doctag">@link</span> MediaType&#125; objects supported by this converter.</span><br><span class="line">	 * <span class="doctag">@return</span> the list of supported media types</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function">List&lt;MediaType&gt; <span class="title">getSupportedMediaTypes</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Read an object of the given type form the given input message, and returns it.</span><br><span class="line">	 * <span class="doctag">@param</span> clazz the type of object to return. This type must have previously been passed to the</span><br><span class="line">	 * &#123;<span class="doctag">@link</span> #canRead canRead&#125; method of this interface, which must have returned &#123;<span class="doctag">@code</span> true&#125;.</span><br><span class="line">	 * <span class="doctag">@param</span> inputMessage the HTTP input message to read from</span><br><span class="line">	 * <span class="doctag">@return</span> the converted object</span><br><span class="line">	 * <span class="doctag">@throws</span> IOException in case of I/O errors</span><br><span class="line">	 * <span class="doctag">@throws</span> HttpMessageNotReadableException in case of conversion errors</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function">T <span class="title">read</span><span class="params">(Class&lt;? extends T&gt; clazz, HttpInputMessage inputMessage)</span></span><br><span class="line">			<span class="keyword">throws</span> IOException, HttpMessageNotReadableException</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Write an given object to the given output message.</span><br><span class="line">	 * <span class="doctag">@param</span> t the object to write to the output message. The type of this object must have previously been</span><br><span class="line">	 * passed to the &#123;<span class="doctag">@link</span> #canWrite canWrite&#125; method of this interface, which must have returned &#123;<span class="doctag">@code</span> true&#125;.</span><br><span class="line">	 * <span class="doctag">@param</span> contentType the content type to use when writing. May be &#123;<span class="doctag">@code</span> null&#125; to indicate that the</span><br><span class="line">	 * default content type of the converter must be used. If not &#123;<span class="doctag">@code</span> null&#125;, this media type must have</span><br><span class="line">	 * previously been passed to the &#123;<span class="doctag">@link</span> #canWrite canWrite&#125; method of this interface, which must have</span><br><span class="line">	 * returned &#123;<span class="doctag">@code</span> true&#125;.</span><br><span class="line">	 * <span class="doctag">@param</span> outputMessage the message to write to</span><br><span class="line">	 * <span class="doctag">@throws</span> IOException in case of I/O errors</span><br><span class="line">	 * <span class="doctag">@throws</span> HttpMessageNotWritableException in case of conversion errors</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T t, MediaType contentType, HttpOutputMessage outputMessage)</span></span><br><span class="line">			<span class="keyword">throws</span> IOException, HttpMessageNotWritableException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="spring_提供的实现类">spring 提供的实现类</h3><p><img src="inherit.jpg" alt=""></p>
<table>
<thead>
<tr>
<th>名称</th>
</tr>
</thead>
<tbody>
<tr>
<td>ByteArrayHttpMessageConverter</td>
</tr>
<tr>
<td>FormHttpMessageConverter</td>
</tr>
<tr>
<td>XmlAwareFormHttpMessageConverter</td>
</tr>
<tr>
<td>ResourceHttpMessageConverter</td>
</tr>
<tr>
<td>SourceHttpMessageConverter</td>
</tr>
<tr>
<td>StringHttpMessageConverter</td>
</tr>
<tr>
<td>SimpleXmlHttpMessageConverter</td>
</tr>
<tr>
<td>MappingJackson2HttpMessageConverter</td>
</tr>
<tr>
<td>GsonHttpMessageConverter</td>
</tr>
<tr>
<td>SyndFeedHttpMessageConverter</td>
</tr>
<tr>
<td>RssChannelHttpMessageConverter</td>
</tr>
<tr>
<td>AtomFeedHttpMessageConverter</td>
</tr>
</tbody>
</table>
<p>具体功能见 <a href="http://docs.spring.io/autorepo/docs/spring-android/1.0.x/reference/html/rest-template.html" target="_blank" rel="external">RestTemplate Module</a></p>
<p>想研究源码的可以从最简单的 <code>StringHttpMessageConverter</code>看起</p>
<h2 id="Spring调用过程">Spring调用过程</h2><p>在DispatcherServlet初始化的过程会调用一个叫做<code>initHandlerAdapters</code>的方法，<br>该方法内部会扫描容器中所有的类，以及他们的父类，找到所有实现了<code>HandlerAdapter</code>接口的类，<br>并将他们注册到<code>DispatcherServlet</code>的<code>HandlerAdapters</code>中。</p>
<p>如果没有扫描到的HandlerAdapter，这个方法会加载一些默认的HandlerAdapter。</p>
<blockquote>
<p>The default implementation uses the “DispatcherServlet.properties” file (in the same<br>  package as the DispatcherServlet class) to determine the class names. </p>
</blockquote>
<p>  <img src="DispatcherServlet-properties.jpg" alt=""></p>
<p>Spring 4.3.2 中有一个实现了<code>HandlerAdapter</code>接口的类会被扫描到，这个类叫做<code>RequestMappingHandlerAdapter</code></p>
<h3 id="RequestMappingHandlerAdapter">RequestMappingHandlerAdapter</h3><p>这个类在构造的时候就加载了许多messageConverter</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RequestMappingHandlerAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    StringHttpMessageConverter stringHttpMessageConverter = <span class="keyword">new</span> StringHttpMessageConverter();</span><br><span class="line">    stringHttpMessageConverter.setWriteAcceptCharset(<span class="keyword">false</span>);  <span class="comment">// see SPR-7316</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.messageConverters = <span class="keyword">new</span> ArrayList&lt;HttpMessageConverter&lt;?&gt;&gt;(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> ByteArrayHttpMessageConverter());</span><br><span class="line">    <span class="keyword">this</span>.messageConverters.add(stringHttpMessageConverter);</span><br><span class="line">    <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> SourceHttpMessageConverter&lt;Source&gt;());</span><br><span class="line">    <span class="keyword">this</span>.messageConverters.add(<span class="keyword">new</span> AllEncompassingFormHttpMessageConverter());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中<code>AllEncompassingFormHttpMessageConverter</code>继承自<code>FormHttpMessageConverter</code>， 它有一个变量叫做<br><code>partConverters</code>，存储了一系列的<code>HttpMessageConverter</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;HttpMessageConverter&lt;?&gt;&gt; partConverters = <span class="keyword">new</span> ArrayList&lt;HttpMessageConverter&lt;?&gt;&gt;();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FormHttpMessageConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.supportedMediaTypes.add(MediaType.APPLICATION_FORM_URLENCODED);</span><br><span class="line">    <span class="keyword">this</span>.supportedMediaTypes.add(MediaType.MULTIPART_FORM_DATA);</span><br><span class="line">    <span class="keyword">this</span>.partConverters.add(<span class="keyword">new</span> ByteArrayHttpMessageConverter());</span><br><span class="line">    StringHttpMessageConverter stringHttpMessageConverter = <span class="keyword">new</span> StringHttpMessageConverter();</span><br><span class="line">    stringHttpMessageConverter.setWriteAcceptCharset(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">this</span>.partConverters.add(stringHttpMessageConverter);</span><br><span class="line">    <span class="keyword">this</span>.partConverters.add(<span class="keyword">new</span> ResourceHttpMessageConverter());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在<code>AllEncompassingFormHttpMessageConverter</code>中又根据classPath中是否包含jackson、Gson等jar包来动态的<br>注册了一些<code>HttpMessageConverter</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AllEncompassingFormHttpMessageConverter</span> <span class="keyword">extends</span> <span class="title">FormHttpMessageConverter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> jaxb2Present =</span><br><span class="line">            ClassUtils.isPresent(<span class="string">"javax.xml.bind.Binder"</span>, AllEncompassingFormHttpMessageConverter.class.getClassLoader());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> jackson2Present =</span><br><span class="line">            ClassUtils.isPresent(<span class="string">"com.fasterxml.jackson.databind.ObjectMapper"</span>, AllEncompassingFormHttpMessageConverter.class.getClassLoader()) &amp;&amp;</span><br><span class="line">                    ClassUtils.isPresent(<span class="string">"com.fasterxml.jackson.core.JsonGenerator"</span>, AllEncompassingFormHttpMessageConverter.class.getClassLoader());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> jackson2XmlPresent =</span><br><span class="line">            ClassUtils.isPresent(<span class="string">"com.fasterxml.jackson.dataformat.xml.XmlMapper"</span>, AllEncompassingFormHttpMessageConverter.class.getClassLoader());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> gsonPresent =</span><br><span class="line">            ClassUtils.isPresent(<span class="string">"com.google.gson.Gson"</span>, AllEncompassingFormHttpMessageConverter.class.getClassLoader());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AllEncompassingFormHttpMessageConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        addPartConverter(<span class="keyword">new</span> SourceHttpMessageConverter&lt;Source&gt;());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jaxb2Present &amp;&amp; !jackson2Present) &#123;</span><br><span class="line">            addPartConverter(<span class="keyword">new</span> Jaxb2RootElementHttpMessageConverter());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jackson2Present) &#123;</span><br><span class="line">            addPartConverter(<span class="keyword">new</span> MappingJackson2HttpMessageConverter());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (gsonPresent) &#123;</span><br><span class="line">            addPartConverter(<span class="keyword">new</span> GsonHttpMessageConverter());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jackson2XmlPresent) &#123;</span><br><span class="line">            addPartConverter(<span class="keyword">new</span> MappingJackson2XmlHttpMessageConverter());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>至于这些转换器是怎么使用的，要看<code>RequestMappingHandlerAdapter</code>中的<code>getDefaultArgumentResolver</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     * Return the list of argument resolvers to use including built-in resolvers</span><br><span class="line">     * and custom resolvers provided via &#123;<span class="doctag">@link</span> #setCustomArgumentResolvers&#125;.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;HandlerMethodArgumentResolver&gt; <span class="title">getDefaultArgumentResolvers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;HandlerMethodArgumentResolver&gt; resolvers = <span class="keyword">new</span> ArrayList&lt;HandlerMethodArgumentResolver&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Annotation-based argument resolution</span></span><br><span class="line">        resolvers.add(<span class="keyword">new</span> RequestParamMethodArgumentResolver(getBeanFactory(), <span class="keyword">false</span>));</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> RequestParamMapMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> PathVariableMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> PathVariableMapMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> MatrixVariableMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> MatrixVariableMapMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> ServletModelAttributeMethodProcessor(<span class="keyword">false</span>));</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> RequestResponseBodyMethodProcessor(getMessageConverters(), <span class="keyword">this</span>.requestResponseBodyAdvice));</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> RequestPartMethodArgumentResolver(getMessageConverters(), <span class="keyword">this</span>.requestResponseBodyAdvice));</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> RequestHeaderMethodArgumentResolver(getBeanFactory()));</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> RequestHeaderMapMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> ServletCookieValueMethodArgumentResolver(getBeanFactory()));</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> ExpressionValueMethodArgumentResolver(getBeanFactory()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Type-based argument resolution</span></span><br><span class="line">        resolvers.add(<span class="keyword">new</span> ServletRequestMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> ServletResponseMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> HttpEntityMethodProcessor(getMessageConverters(), <span class="keyword">this</span>.requestResponseBodyAdvice));</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> RedirectAttributesMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> ModelMethodProcessor());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> MapMethodProcessor());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> ErrorsMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> SessionStatusMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> UriComponentsBuilderMethodArgumentResolver());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Custom arguments</span></span><br><span class="line">        <span class="keyword">if</span> (getCustomArgumentResolvers() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            resolvers.addAll(getCustomArgumentResolvers());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Catch-all</span></span><br><span class="line">        resolvers.add(<span class="keyword">new</span> RequestParamMethodArgumentResolver(getBeanFactory(), <span class="keyword">true</span>));</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> ServletModelAttributeMethodProcessor(<span class="keyword">true</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resolvers;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>可以看到所有的Converter最终作为一个构造参数传入了<code>RequestResponseBodyMethodProcessor</code>和<code>RequestPartMethodArgumentResolver</code>。 前者其实是负责处理<code>@RequestBody</code>和<code>@ResponseBody</code>的,<br>后者则是处理<code>@RequestPart</code>这个注解的。拿<code>RequestResponseBodyMethodProcessor</code>为例来看。</p>
<p>这个类的父类实现了<code>HandlerMethodReturnValueHandler</code>接口，这个接口的作用对照上面的系统整体架构图<br>可知，是处理Controller返回的结果值的，看其<code>handleReturnValue</code>方法 。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleReturnValue</span><span class="params">(Object returnValue, MethodParameter returnType,</span><br><span class="line">        ModelAndViewContainer mavContainer, NativeWebRequest webRequest)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException </span>&#123;</span><br><span class="line">    mavContainer.setRequestHandled(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// Try even with null return value. ResponseBodyAdvice could get involved.</span></span><br><span class="line">    writeWithMessageConverters(returnValue, returnType, webRequest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先标记这个请求已经处理过了，然后调用了一个内部方法，从名字就可以看出来，是使用MessageConverter进行<br>转换。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Writes the given return value to the given web request. Delegates to</span><br><span class="line"> * &#123;<span class="doctag">@link</span> #writeWithMessageConverters(Object, MethodParameter, ServletServerHttpRequest, ServletServerHttpResponse)&#125;</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">writeWithMessageConverters</span><span class="params">(T returnValue, MethodParameter returnType, NativeWebRequest webRequest)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException </span>&#123;</span><br><span class="line"></span><br><span class="line">    ServletServerHttpRequest inputMessage = createInputMessage(webRequest);</span><br><span class="line">    ServletServerHttpResponse outputMessage = createOutputMessage(webRequest);</span><br><span class="line">    writeWithMessageConverters(returnValue, returnType, inputMessage, outputMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>真正的逻辑还是内部的`writeWithMessageConveters()</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     * Writes the given return type to the given output message.</span><br><span class="line">     * <span class="doctag">@param</span> returnValue the value to write to the output message</span><br><span class="line">     * <span class="doctag">@param</span> returnType the type of the value</span><br><span class="line">     * <span class="doctag">@param</span> inputMessage the input messages. Used to inspect the &#123;<span class="doctag">@code</span> Accept&#125; header.</span><br><span class="line">     * <span class="doctag">@param</span> outputMessage the output message to write to</span><br><span class="line">     * <span class="doctag">@throws</span> IOException thrown in case of I/O errors</span><br><span class="line">     * <span class="doctag">@throws</span> HttpMediaTypeNotAcceptableException thrown when the conditions indicated by &#123;<span class="doctag">@code</span> Accept&#125; header on</span><br><span class="line">     * the request cannot be met by the message converters</span><br><span class="line">     */</span></span><br><span class="line">    <span class="annotation">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">protected</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">writeWithMessageConverters</span><span class="params">(T returnValue, MethodParameter returnType,</span><br><span class="line">            ServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; returnValueClass = getReturnValueType(returnValue, returnType);</span><br><span class="line">        Type returnValueType = getGenericType(returnType);</span><br><span class="line">        HttpServletRequest servletRequest = inputMessage.getServletRequest();</span><br><span class="line">        <span class="comment">//从请求头获取可能的返回类型（默认会加载两种策略，比如从路径名的后缀上推断）</span></span><br><span class="line">        List&lt;MediaType&gt; requestedMediaTypes = getAcceptableMediaTypes(servletRequest);</span><br><span class="line">        <span class="comment">//根据请求和返回的值得类型，推断可能的返回值类型</span></span><br><span class="line">        List&lt;MediaType&gt; producibleMediaTypes = getProducibleMediaTypes(servletRequest, returnValueClass, returnValueType);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (returnValue != <span class="keyword">null</span> &amp;&amp; producibleMediaTypes.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"No converter found for return value of type: "</span> + returnValueClass);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//筛选</span></span><br><span class="line">        Set&lt;MediaType&gt; compatibleMediaTypes = <span class="keyword">new</span> LinkedHashSet&lt;MediaType&gt;();</span><br><span class="line">        <span class="keyword">for</span> (MediaType requestedType : requestedMediaTypes) &#123;</span><br><span class="line">            <span class="keyword">for</span> (MediaType producibleType : producibleMediaTypes) &#123;</span><br><span class="line">                <span class="keyword">if</span> (requestedType.isCompatibleWith(producibleType)) &#123;</span><br><span class="line">                    compatibleMediaTypes.add(getMostSpecificMediaType(requestedType, producibleType));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (compatibleMediaTypes.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (returnValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> HttpMediaTypeNotAcceptableException(producibleMediaTypes);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;MediaType&gt; mediaTypes = <span class="keyword">new</span> ArrayList&lt;MediaType&gt;(compatibleMediaTypes);</span><br><span class="line">        MediaType.sortBySpecificityAndQuality(mediaTypes);</span><br><span class="line"></span><br><span class="line">        MediaType selectedMediaType = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (MediaType mediaType : mediaTypes) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mediaType.isConcrete()) &#123;<span class="comment">//具体的，没有通配符的</span></span><br><span class="line">                selectedMediaType = mediaType;</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">// 找到一个就跳出循环</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION)) &#123;</span><br><span class="line">                selectedMediaType = MediaType.APPLICATION_OCTET_STREAM;</span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">// 找到一个就跳出循环</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//找到能处理这种类型的HttpMessageConverter</span></span><br><span class="line">        <span class="keyword">if</span> (selectedMediaType != <span class="keyword">null</span>) &#123;</span><br><span class="line">            selectedMediaType = selectedMediaType.removeQualityValue();</span><br><span class="line">            <span class="keyword">for</span> (HttpMessageConverter&lt;?&gt; messageConverter : <span class="keyword">this</span>.messageConverters) &#123;</span><br><span class="line">                <span class="keyword">if</span> (messageConverter <span class="keyword">instanceof</span> GenericHttpMessageConverter) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (((GenericHttpMessageConverter&lt;T&gt;) messageConverter).canWrite(returnValueType,</span><br><span class="line">                            returnValueClass, selectedMediaType)) &#123;</span><br><span class="line">                        returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,</span><br><span class="line">                                (Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt;) messageConverter.getClass(),</span><br><span class="line">                                inputMessage, outputMessage);</span><br><span class="line">                        <span class="keyword">if</span> (returnValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            addContentDispositionHeader(inputMessage, outputMessage);</span><br><span class="line">                            ((GenericHttpMessageConverter&lt;T&gt;) messageConverter).write(returnValue,</span><br><span class="line">                                    returnValueType, selectedMediaType, outputMessage);</span><br><span class="line">                            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                                logger.debug(<span class="string">"Written ["</span> + returnValue + <span class="string">"] as \""</span> +</span><br><span class="line">                                        selectedMediaType + <span class="string">"\" using ["</span> + messageConverter + <span class="string">"]"</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (messageConverter.canWrite(returnValueClass, selectedMediaType)) &#123;</span><br><span class="line">                    returnValue = (T) getAdvice().beforeBodyWrite(returnValue, returnType, selectedMediaType,</span><br><span class="line">                            (Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt;) messageConverter.getClass(),</span><br><span class="line">                            inputMessage, outputMessage);</span><br><span class="line">                    <span class="keyword">if</span> (returnValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        addContentDispositionHeader(inputMessage, outputMessage);</span><br><span class="line">                        ((HttpMessageConverter&lt;T&gt;) messageConverter).write(returnValue,</span><br><span class="line">                                selectedMediaType, outputMessage);</span><br><span class="line">                        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                            logger.debug(<span class="string">"Written ["</span> + returnValue + <span class="string">"] as \""</span> +</span><br><span class="line">                                    selectedMediaType + <span class="string">"\" using ["</span> + messageConverter + <span class="string">"]"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (returnValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> HttpMediaTypeNotAcceptableException(<span class="keyword">this</span>.allSupportedMediaTypes);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>至此，HttpMessageConverter如何工作的就真相大白了。</p>
<h2 id="参考链接">参考链接</h2><ol>
<li><a href="http://www.cnblogs.com/fangjian0423/p/springMVC-xml-json-convert.html" target="_blank" rel="external">SpringMVC关于json、xml自动转换的原理研究(附带源码分析)</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="架构">架构</h2><p><img src="arch.jpg" alt=""></p>
<h2 id="HttpMessageConverter接口">HttpMessageConverter接口</h2><p><img src="http-message-c]]>
    </summary>
    
      <category term="spring" scheme="http://qsli.github.io/tags/spring/"/>
    
      <category term="web" scheme="http://qsli.github.io/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[spring-resource源码剖析]]></title>
    <link href="http://qsli.github.io/2016/11/20/spring-resource/"/>
    <id>http://qsli.github.io/2016/11/20/spring-resource/</id>
    <published>2016-11-20T12:12:14.000Z</published>
    <updated>2016-12-18T05:07:29.230Z</updated>
    <content type="html"><![CDATA[<h1 id="Spring_Resource">Spring Resource</h1><h2 id="Why_not_Java_URL类">Why not Java URL类</h2><p>原因： 对底层资源的支持不足。</p>
<ol>
<li><p>there is no standardized URL implementation that may be used to access a resource that needs to be obtained from the classpath,or relative to a ServletContext.</p>
</li>
<li><p>不自定义URL handler的原因：</p>
<p>a. 过于复杂<br>b. lack some desirable functionality（如对URL所指资源是否存在的判断）</p>
</li>
</ol>
<h2 id="Resource_接口">Resource 接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InputStreamSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Return an &#123;<span class="doctag">@link</span> InputStream&#125;.</span><br><span class="line">	 * &lt;p&gt;It is expected that each call creates a &lt;i&gt;fresh&lt;/i&gt; stream.</span><br><span class="line">	 * &lt;p&gt;This requirement is particularly important when you consider an API such</span><br><span class="line">	 * as JavaMail, which needs to be able to read the stream multiple times when</span><br><span class="line">	 * creating mail attachments. For such a use case, it is &lt;i&gt;required&lt;/i&gt;</span><br><span class="line">	 * that each &#123;<span class="doctag">@code</span> getInputStream()&#125; call returns a fresh stream.</span><br><span class="line">	 * <span class="doctag">@return</span> the input stream for the underlying resource (must not be &#123;<span class="doctag">@code</span> null&#125;)</span><br><span class="line">	 * <span class="doctag">@throws</span> IOException if the stream could not be opened</span><br><span class="line">	 * <span class="doctag">@see</span> org.springframework.mail.javamail.MimeMessageHelper#addAttachment(String, InputStreamSource)</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function">InputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Resource</span> <span class="keyword">extends</span> <span class="title">InputStreamSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Return whether this resource actually exists in physical form.</span><br><span class="line">	 * &lt;p&gt;This method performs a definitive existence check, whereas the</span><br><span class="line">	 * existence of a &#123;<span class="doctag">@code</span> Resource&#125; handle only guarantees a</span><br><span class="line">	 * valid descriptor handle.</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">exists</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Return whether the contents of this resource can be read,</span><br><span class="line">	 * e.g. via &#123;<span class="doctag">@link</span> #getInputStream()&#125; or &#123;<span class="doctag">@link</span> #getFile()&#125;.</span><br><span class="line">	 * &lt;p&gt;Will be &#123;<span class="doctag">@code</span> true&#125; for typical resource descriptors;</span><br><span class="line">	 * note that actual content reading may still fail when attempted.</span><br><span class="line">	 * However, a value of &#123;<span class="doctag">@code</span> false&#125; is a definitive indication</span><br><span class="line">	 * that the resource content cannot be read.</span><br><span class="line">	 * <span class="doctag">@see</span> #getInputStream()</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">isReadable</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Return whether this resource represents a handle with an open</span><br><span class="line">	 * stream. If true, the InputStream cannot be read multiple times,</span><br><span class="line">	 * and must be read and closed to avoid resource leaks.</span><br><span class="line">	 * &lt;p&gt;Will be &#123;<span class="doctag">@code</span> false&#125; for typical resource descriptors.</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">isOpen</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Return a URL handle for this resource.</span><br><span class="line">	 * <span class="doctag">@throws</span> IOException if the resource cannot be resolved as URL,</span><br><span class="line">	 * i.e. if the resource is not available as descriptor</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function">URL <span class="title">getURL</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Return a URI handle for this resource.</span><br><span class="line">	 * <span class="doctag">@throws</span> IOException if the resource cannot be resolved as URI,</span><br><span class="line">	 * i.e. if the resource is not available as descriptor</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function">URI <span class="title">getURI</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Return a File handle for this resource.</span><br><span class="line">	 * <span class="doctag">@throws</span> IOException if the resource cannot be resolved as absolute</span><br><span class="line">	 * file path, i.e. if the resource is not available in a file system</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function">File <span class="title">getFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Determine the content length for this resource.</span><br><span class="line">	 * <span class="doctag">@throws</span> IOException if the resource cannot be resolved</span><br><span class="line">	 * (in the file system or as some other known physical resource type)</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">long</span> <span class="title">contentLength</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Determine the last-modified timestamp for this resource.</span><br><span class="line">	 * <span class="doctag">@throws</span> IOException if the resource cannot be resolved</span><br><span class="line">	 * (in the file system or as some other known physical resource type)</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">long</span> <span class="title">lastModified</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Create a resource relative to this resource.</span><br><span class="line">	 * <span class="doctag">@param</span> relativePath the relative path (relative to this resource)</span><br><span class="line">	 * <span class="doctag">@return</span> the resource handle for the relative resource</span><br><span class="line">	 * <span class="doctag">@throws</span> IOException if the relative resource cannot be determined</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function">Resource <span class="title">createRelative</span><span class="params">(String relativePath)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Determine a filename for this resource, i.e. typically the last</span><br><span class="line">	 * part of the path: for example, "myfile.txt".</span><br><span class="line">	 * &lt;p&gt;Returns &#123;<span class="doctag">@code</span> null&#125; if this type of resource does not</span><br><span class="line">	 * have a filename.</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function">String <span class="title">getFilename</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Return a description for this resource,</span><br><span class="line">	 * to be used for error output when working with the resource.</span><br><span class="line">	 * &lt;p&gt;Implementations are also encouraged to return this value</span><br><span class="line">	 * from their &#123;<span class="doctag">@code</span> toString&#125; method.</span><br><span class="line">	 * <span class="doctag">@see</span> Object#toString()</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function">String <span class="title">getDescription</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="继承体系">继承体系</h3><p><img src="resource.jpg" alt=""></p>
<h2 id="ResourceLoader">ResourceLoader</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResourceLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** Pseudo URL prefix for loading from the class path: "classpath:" */</span></span><br><span class="line">	String CLASSPATH_URL_PREFIX = ResourceUtils.CLASSPATH_URL_PREFIX;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Return a Resource handle for the specified resource.</span><br><span class="line">	 * The handle should always be a reusable resource descriptor,</span><br><span class="line">	 * allowing for multiple &#123;<span class="doctag">@link</span> Resource#getInputStream()&#125; calls.</span><br><span class="line">	 * &lt;p&gt;&lt;ul&gt;</span><br><span class="line">	 * &lt;li&gt;Must support fully qualified URLs, e.g. "file:C:/test.dat".</span><br><span class="line">	 * &lt;li&gt;Must support classpath pseudo-URLs, e.g. "classpath:test.dat".</span><br><span class="line">	 * &lt;li&gt;Should support relative file paths, e.g. "WEB-INF/test.dat".</span><br><span class="line">	 * (This will be implementation-specific, typically provided by an</span><br><span class="line">	 * ApplicationContext implementation.)</span><br><span class="line">	 * &lt;/ul&gt;</span><br><span class="line">	 * &lt;p&gt;Note that a Resource handle does not imply an existing resource;</span><br><span class="line">	 * you need to invoke &#123;<span class="doctag">@link</span> Resource#exists&#125; to check for existence.</span><br><span class="line">	 * <span class="doctag">@param</span> location the resource location</span><br><span class="line">	 * <span class="doctag">@return</span> a corresponding Resource handle</span><br><span class="line">	 * <span class="doctag">@see</span> #CLASSPATH_URL_PREFIX</span><br><span class="line">	 * <span class="doctag">@see</span> org.springframework.core.io.Resource#exists</span><br><span class="line">	 * <span class="doctag">@see</span> org.springframework.core.io.Resource#getInputStream</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function">Resource <span class="title">getResource</span><span class="params">(String location)</span></span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Expose the ClassLoader used by this ResourceLoader.</span><br><span class="line">	 * &lt;p&gt;Clients which need to access the ClassLoader directly can do so</span><br><span class="line">	 * in a uniform manner with the ResourceLoader, rather than relying</span><br><span class="line">	 * on the thread context ClassLoader.</span><br><span class="line">	 * <span class="doctag">@return</span> the ClassLoader (only &#123;<span class="doctag">@code</span> null&#125; if even the system</span><br><span class="line">	 * ClassLoader isn't accessible)</span><br><span class="line">	 * <span class="doctag">@see</span> org.springframework.util.ClassUtils#getDefaultClassLoader()</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function">ClassLoader <span class="title">getClassLoader</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ResourceLoader　负责加载Resource, 所有的application context都实现了这个接口。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Resource template = ctx.getResource(<span class="string">"some/resource/path/myTemplate.txt"</span>);</span><br></pre></td></tr></table></figure>
<p>如果上述的ctx的类型是 ClassPathXmlApplicationContext，那么返回的Resource的具体类型就是</p>
<p>ClassPathResource； 如果ctx的类型是FileSystemXmlApplicationContext, 返回的类型就变成了</p>
<p>FileSystemResource。</p>
<h3 id="指定返回的Resource类型">指定返回的Resource类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Resource template = ctx.getResource(<span class="string">"classpath:some/resource/path/myTemplate.txt"</span>);</span><br></pre></td></tr></table></figure>
<p>通过显式的指定classpath前缀，返回的Resource的实际类型就是 ClassPathResource</p>
<p>对应的关系见表格：</p>
<table>
<thead>
<tr>
<th>Prefix</th>
<th>Example</th>
<th>Explanation</th>
</tr>
</thead>
<tbody>
<tr>
<td>classpath:</td>
<td>classpath:com/myapp/config.xml</td>
<td>Loaded from the classpath</td>
</tr>
<tr>
<td>file:</td>
<td>file:///data/config.xml</td>
<td>Loaded as a URL, from the system</td>
</tr>
<tr>
<td>http:</td>
<td><a href="http://myserver/logo.png" target="_blank" rel="external">http://myserver/logo.png</a></td>
<td>Loaded as a URL</td>
</tr>
<tr>
<td>（none）</td>
<td>/data/config.xml</td>
<td>Depends on the underlying ApplicationContext</td>
</tr>
</tbody>
</table>
<h4 id="classpath*">classpath*</h4><p>classpath*:conf/appContext.xml</p>
<p>这个特殊的前缀会使spring在所有的ClassPath中查找和指定的名字相同的资源，他们会合并形成最终的</p>
<p>上下文。</p>
<blockquote>
<p>This special prefix specifies that all classpath resources that match the given name must be obtained<br>(internally, this essentially happens via a ClassLoader.getResources(…) call), and then merged<br>to form the final application context definition.</p>
</blockquote>
<h3 id="ResourceLoaderAware">ResourceLoaderAware</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResourceLoaderAware</span> <span class="keyword">extends</span> <span class="title">Aware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Set the ResourceLoader that this object runs in.</span><br><span class="line">	 * &lt;p&gt;This might be a ResourcePatternResolver, which can be checked</span><br><span class="line">	 * through &#123;<span class="doctag">@code</span> instanceof ResourcePatternResolver&#125;. See also the</span><br><span class="line">	 * &#123;<span class="doctag">@code</span> ResourcePatternUtils.getResourcePatternResolver&#125; method.</span><br><span class="line">	 * &lt;p&gt;Invoked after population of normal bean properties but before an init callback</span><br><span class="line">	 * like InitializingBean's &#123;<span class="doctag">@code</span> afterPropertiesSet&#125; or a custom init-method.</span><br><span class="line">	 * Invoked before ApplicationContextAware's &#123;<span class="doctag">@code</span> setApplicationContext&#125;.</span><br><span class="line">	 * <span class="doctag">@param</span> resourceLoader ResourceLoader object to be used by this object</span><br><span class="line">	 * <span class="doctag">@see</span> org.springframework.core.io.support.ResourcePatternResolver</span><br><span class="line">	 * <span class="doctag">@see</span> org.springframework.core.io.support.ResourcePatternUtils#getResourcePatternResolver</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setResourceLoader</span><span class="params">(ResourceLoader resourceLoader)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现这个接口的类，可以获得所在容器的ResourceLoader实例，一般来说就是相应的Application Context。也可以当做</p>
<p>ApplicationContextAware的替代。</p>
<blockquote>
<p>  Interface to be implemented by any object that wishes to be notified of<br>  the <b>ResourceLoader</b> (typically the ApplicationContext) that it runs in.<br>  This is an alternative to a full ApplicationContext dependency via the<br>  ApplicationContextAware interface.</p>
</blockquote>
<p>除了实现上述接口，还可以使用基于类型的注入，将ResourceLoader注入到需要的地方。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Spring_Resource">Spring Resource</h1><h2 id="Why_not_Java_URL类">Why not Java URL类</h2><p>原因： 对底层资源的支持不足。</p>
<ol>
<li><p>there is no]]>
    </summary>
    
      <category term="resource" scheme="http://qsli.github.io/tags/resource/"/>
    
      <category term="spring" scheme="http://qsli.github.io/categories/spring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jackson对guava新增集合的支持]]></title>
    <link href="http://qsli.github.io/2016/11/16/jackson-guava/"/>
    <id>http://qsli.github.io/2016/11/16/jackson-guava/</id>
    <published>2016-11-15T16:10:21.000Z</published>
    <updated>2016-11-15T16:10:21.665Z</updated>
    <content type="html"><![CDATA[<h2 id="问题">问题</h2><p>Guava中新增了不少好用的集合比如<code>MultiMap</code>、<code>MultiSet</code>、<code>Table</code>等，当使用jackson进行序列化的时候</p>
<p>这些集合并不能正确的序列化，出现下面的情况：</p>
<p>正常序列化应该为：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">fields</span>":<span class="value">&#123;</span><br><span class="line">    "<span class="attribute">Field1</span>":<span class="value">[</span><br><span class="line">      &#123;</span><br><span class="line">        "<span class="attribute">index</span>":<span class="value"><span class="number">0</span></span>,</span><br><span class="line">        "<span class="attribute">header</span>":<span class="value"><span class="string">"Field1"</span></span>,</span><br><span class="line">        "<span class="attribute">fieldType</span>":<span class="value"><span class="string">"fieldtype"</span></span>,</span><br><span class="line">        "<span class="attribute">description</span>":<span class="value"><span class="literal">null</span></span>,</span><br><span class="line">        "<span class="attribute">cleanHeader</span>":<span class="value"><span class="literal">null</span></span><br><span class="line">      </span>&#125;</span><br><span class="line">    ]</span>,</span><br><span class="line">    "<span class="attribute">Field2</span>":<span class="value">[</span><br><span class="line">      &#123;</span><br><span class="line">        "<span class="attribute">index</span>":<span class="value"><span class="number">1</span></span>,</span><br><span class="line">        "<span class="attribute">header</span>":<span class="value"><span class="string">"Field2"</span></span>,</span><br><span class="line">        "<span class="attribute">fieldType</span>":<span class="value"><span class="string">"fieldtype"</span></span>,</span><br><span class="line">        "<span class="attribute">description</span>":<span class="value"><span class="literal">null</span></span>,</span><br><span class="line">        "<span class="attribute">cleanHeader</span>":<span class="value"><span class="literal">null</span></span><br><span class="line">      </span>&#125;</span><br><span class="line">    ]</span><br><span class="line">  </span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用默认的spring出现的是：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">fields</span>":<span class="value">&#123;</span><br><span class="line">    "<span class="attribute">empty</span>": <span class="value"><span class="literal">false</span></span><br><span class="line">  </span>&#125;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<h2 id="解决方案">解决方案</h2><p>要解决这个问题就要手动向jackson的ObjectMapper中注册一个Module</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Table study = getTable();</span><br><span class="line"></span><br><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">mapper.registerModule(<span class="keyword">new</span> GuavaModule());</span><br><span class="line"></span><br><span class="line">String tableString = mapper.writeValueAsString(table);</span><br></pre></td></tr></table></figure>
<p>这个<code>GuavaModule</code>是jackson对Guava集合支持的包，它的maven依赖如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>com.fasterxml.jackson.datatype<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>jackson-datatype-guava<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="title">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>也可以使用基于xml配置的方式将这个Module导入<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JSON parser configuration--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"guavaObjectMapper"</span> <span class="attribute">class</span>=<span class="value">"com.fasterxml.jackson.databind.ObjectMapper"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.beans.factory.config.MethodInvokingFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"targetObject"</span>&gt;</span><span class="tag">&lt;<span class="title">ref</span> <span class="attribute">local</span>=<span class="value">"guavaObjectMapper"</span> /&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"targetMethod"</span>&gt;</span><span class="tag">&lt;<span class="title">value</span>&gt;</span>registerModule<span class="tag">&lt;/<span class="title">value</span>&gt;</span><span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"arguments"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"guavaModule"</span> <span class="attribute">class</span>=<span class="value">"com.fasterxml.jackson.datatype.guava.GuavaModule"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">mvc:message-converters</span> <span class="attribute">register-defaults</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">bean</span> <span class="attribute">class</span>=<span class="value">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">property</span> <span class="attribute">name</span>=<span class="value">"objectMapper"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">ref</span>  <span class="attribute">local</span>=<span class="value">"guavaObjectMapper"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="支持的类型">支持的类型</h2><p><img src="jar.png" alt=""></p>
<h2 id="参考">参考</h2><ol>
<li><p><a href="http://stackoverflow.com/questions/26979120/spring-mvc-configuration-jackson-guava-multimap" target="_blank" rel="external">Spring MVC configuration + Jackson + Guava multimap</a></p>
</li>
<li><p><a href="http://www.leveluplunch.com/java/examples/convert-json-to-guava-multimap-with-jackson/" target="_blank" rel="external">Json to guava multimap</a></p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="问题">问题</h2><p>Guava中新增了不少好用的集合比如<code>MultiMap</code>、<code>MultiSet</code>、<code>Table</code>等，当使用jackson进行序列化的时候</p>
<p>这些集合并不能正确的]]>
    </summary>
    
      <category term="jackson" scheme="http://qsli.github.io/tags/jackson/"/>
    
      <category term="spring" scheme="http://qsli.github.io/categories/spring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spring占位符（property-placeholder），源码阅读]]></title>
    <link href="http://qsli.github.io/2016/10/31/property-placeholder/"/>
    <id>http://qsli.github.io/2016/10/31/property-placeholder/</id>
    <published>2016-10-30T16:22:23.000Z</published>
    <updated>2016-12-18T05:13:26.901Z</updated>
    <content type="html"><![CDATA[<h2 id="&lt;context:property-placeholder_location=&#39;xxx&#39;_/&gt;的解析过程"><code>&lt;context:property-placeholder location=&#39;xxx&#39; /&gt;</code>的解析过程</h2><h3 id="schema">schema</h3><p>在idea中<code>ctrl</code> + <code>b</code>或者，<code>ctrl</code> + 鼠标左键点击即可打开schema具体的位置</p>
<p><img src="location.jpg" alt=""></p>
<p><code>sping.handlers</code>中内容如下:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http\://www.springframework.org/schema/context=org.springframework.context.config.ContextNamespaceHandler</span><br><span class="line">http\://www.springframework.org/schema/jee=org.springframework.ejb.config.JeeNamespaceHandler</span><br><span class="line">http\://www.springframework.org/schema/lang=org.springframework.scripting.config.LangNamespaceHandler</span><br><span class="line">http\://www.springframework.org/schema/task=org.springframework.scheduling.config.TaskNamespaceHandler</span><br><span class="line">http\://www.springframework.org/schema/cache=org.springframework.cache.config.CacheNamespaceHandler</span><br></pre></td></tr></table></figure>
<p><code>spring.schemas</code>中的内容如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">http\://www.springframework.org/schema/context/spring-context-2.5.xsd=org/springframework/context/config/spring-context-2.5.xsd</span><br><span class="line">http\://www.springframework.org/schema/context/spring-context-3.0.xsd=org/springframework/context/config/spring-context-3.0.xsd</span><br><span class="line">http\://www.springframework.org/schema/context/spring-context-3.1.xsd=org/springframework/context/config/spring-context-3.1.xsd</span><br><span class="line">http\://www.springframework.org/schema/context/spring-context-3.2.xsd=org/springframework/context/config/spring-context-3.2.xsd</span><br><span class="line">http\://www.springframework.org/schema/context/spring-context-4.0.xsd=org/springframework/context/config/spring-context-4.0.xsd</span><br><span class="line">http\://www.springframework.org/schema/context/spring-context-4.1.xsd=org/springframework/context/config/spring-context-4.1.xsd</span><br><span class="line">http\://www.springframework.org/schema/context/spring-context-4.2.xsd=org/springframework/context/config/spring-context-4.2.xsd</span><br><span class="line">http\://www.springframework.org/schema/context/spring-context.xsd=org/springframework/context/config/spring-context-4.2.xsd</span><br><span class="line">http\://www.springframework.org/schema/jee/spring-jee-2.0.xsd=org/springframework/ejb/config/spring-jee-2.0.xsd</span><br><span class="line">http\://www.springframework.org/schema/jee/spring-jee-2.5.xsd=org/springframework/ejb/config/spring-jee-2.5.xsd</span><br><span class="line">http\://www.springframework.org/schema/jee/spring-jee-3.0.xsd=org/springframework/ejb/config/spring-jee-3.0.xsd</span><br><span class="line">http\://www.springframework.org/schema/jee/spring-jee-3.1.xsd=org/springframework/ejb/config/spring-jee-3.1.xsd</span><br><span class="line">http\://www.springframework.org/schema/jee/spring-jee-3.2.xsd=org/springframework/ejb/config/spring-jee-3.2.xsd</span><br><span class="line">http\://www.springframework.org/schema/jee/spring-jee-4.0.xsd=org/springframework/ejb/config/spring-jee-4.0.xsd</span><br><span class="line">http\://www.springframework.org/schema/jee/spring-jee-4.1.xsd=org/springframework/ejb/config/spring-jee-4.1.xsd</span><br><span class="line">http\://www.springframework.org/schema/jee/spring-jee-4.2.xsd=org/springframework/ejb/config/spring-jee-4.2.xsd</span><br><span class="line">http\://www.springframework.org/schema/jee/spring-jee.xsd=org/springframework/ejb/config/spring-jee-4.2.xsd</span><br><span class="line">http\://www.springframework.org/schema/lang/spring-lang-2.0.xsd=org/springframework/scripting/config/spring-lang-2.0.xsd</span><br><span class="line">http\://www.springframework.org/schema/lang/spring-lang-2.5.xsd=org/springframework/scripting/config/spring-lang-2.5.xsd</span><br><span class="line">http\://www.springframework.org/schema/lang/spring-lang-3.0.xsd=org/springframework/scripting/config/spring-lang-3.0.xsd</span><br><span class="line">http\://www.springframework.org/schema/lang/spring-lang-3.1.xsd=org/springframework/scripting/config/spring-lang-3.1.xsd</span><br><span class="line">http\://www.springframework.org/schema/lang/spring-lang-3.2.xsd=org/springframework/scripting/config/spring-lang-3.2.xsd</span><br><span class="line">http\://www.springframework.org/schema/lang/spring-lang-4.0.xsd=org/springframework/scripting/config/spring-lang-4.0.xsd</span><br><span class="line">http\://www.springframework.org/schema/lang/spring-lang-4.1.xsd=org/springframework/scripting/config/spring-lang-4.1.xsd</span><br><span class="line">http\://www.springframework.org/schema/lang/spring-lang-4.2.xsd=org/springframework/scripting/config/spring-lang-4.2.xsd</span><br><span class="line">http\://www.springframework.org/schema/lang/spring-lang.xsd=org/springframework/scripting/config/spring-lang-4.2.xsd</span><br><span class="line">http\://www.springframework.org/schema/task/spring-task-3.0.xsd=org/springframework/scheduling/config/spring-task-3.0.xsd</span><br><span class="line">http\://www.springframework.org/schema/task/spring-task-3.1.xsd=org/springframework/scheduling/config/spring-task-3.1.xsd</span><br><span class="line">http\://www.springframework.org/schema/task/spring-task-3.2.xsd=org/springframework/scheduling/config/spring-task-3.2.xsd</span><br><span class="line">http\://www.springframework.org/schema/task/spring-task-4.0.xsd=org/springframework/scheduling/config/spring-task-4.0.xsd</span><br><span class="line">http\://www.springframework.org/schema/task/spring-task-4.1.xsd=org/springframework/scheduling/config/spring-task-4.1.xsd</span><br><span class="line">http\://www.springframework.org/schema/task/spring-task-4.2.xsd=org/springframework/scheduling/config/spring-task-4.2.xsd</span><br><span class="line">http\://www.springframework.org/schema/task/spring-task.xsd=org/springframework/scheduling/config/spring-task-4.2.xsd</span><br><span class="line">http\://www.springframework.org/schema/cache/spring-cache-3.1.xsd=org/springframework/cache/config/spring-cache-3.1.xsd</span><br><span class="line">http\://www.springframework.org/schema/cache/spring-cache-3.2.xsd=org/springframework/cache/config/spring-cache-3.2.xsd</span><br><span class="line">http\://www.springframework.org/schema/cache/spring-cache-4.0.xsd=org/springframework/cache/config/spring-cache-4.0.xsd</span><br><span class="line">http\://www.springframework.org/schema/cache/spring-cache-4.1.xsd=org/springframework/cache/config/spring-cache-4.1.xsd</span><br><span class="line">http\://www.springframework.org/schema/cache/spring-cache-4.2.xsd=org/springframework/cache/config/spring-cache-4.2.xsd</span><br><span class="line">http\://www.springframework.org/schema/cache/spring-cache.xsd=org/springframework/cache/config/spring-cache-4.2.xsd</span><br></pre></td></tr></table></figure>
<h3 id="NamespaceHandlerSupport">NamespaceHandlerSupport</h3><p>从<code>handler</code>中我们可以找出<code>context</code>标签的处理类是<code>org.springframework.context.config.ContextNamespaceHandler</code>,内容如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextNamespaceHandler</span> <span class="keyword">extends</span> <span class="title">NamespaceHandlerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		registerBeanDefinitionParser(<span class="string">"property-placeholder"</span>, <span class="keyword">new</span> PropertyPlaceholderBeanDefinitionParser());</span><br><span class="line">		registerBeanDefinitionParser(<span class="string">"property-override"</span>, <span class="keyword">new</span> PropertyOverrideBeanDefinitionParser());</span><br><span class="line">		registerBeanDefinitionParser(<span class="string">"annotation-config"</span>, <span class="keyword">new</span> AnnotationConfigBeanDefinitionParser());</span><br><span class="line">		registerBeanDefinitionParser(<span class="string">"component-scan"</span>, <span class="keyword">new</span> ComponentScanBeanDefinitionParser());</span><br><span class="line">		registerBeanDefinitionParser(<span class="string">"load-time-weaver"</span>, <span class="keyword">new</span> LoadTimeWeaverBeanDefinitionParser());</span><br><span class="line">		registerBeanDefinitionParser(<span class="string">"spring-configured"</span>, <span class="keyword">new</span> SpringConfiguredBeanDefinitionParser());</span><br><span class="line">		registerBeanDefinitionParser(<span class="string">"mbean-export"</span>, <span class="keyword">new</span> MBeanExportBeanDefinitionParser());</span><br><span class="line">		registerBeanDefinitionParser(<span class="string">"mbean-server"</span>, <span class="keyword">new</span> MBeanServerBeanDefinitionParser());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>顺藤摸瓜就能找到<code>property-placeholder</code>的处理类是<code>PropertyPlaceholderBeanDefinitionParser</code></p>
<h3 id="PropertyPlaceholderBeanDefinitionParser">PropertyPlaceholderBeanDefinitionParser</h3><p>继承关系：</p>
<p><img src="hierarchy.jpg" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PropertyPlaceholderBeanDefinitionParser</span> <span class="keyword">extends</span> <span class="title">AbstractPropertyLoadingBeanDefinitionParser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SYSTEM_PROPERTIES_MODE_ATTRIBUTE = <span class="string">"system-properties-mode"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SYSTEM_PROPERTIES_MODE_DEFAULT = <span class="string">"ENVIRONMENT"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> Class&lt;?&gt; getBeanClass(Element element) &#123;</span><br><span class="line">		<span class="comment">// As of Spring 3.1, the default value of system-properties-mode has changed from</span></span><br><span class="line">		<span class="comment">// 'FALLBACK' to 'ENVIRONMENT'. This latter value indicates that resolution of</span></span><br><span class="line">		<span class="comment">// placeholders against system properties is a function of the Environment and</span></span><br><span class="line">		<span class="comment">// its current set of PropertySources.</span></span><br><span class="line">		<span class="keyword">if</span> (SYSTEM_PROPERTIES_MODE_DEFAULT.equals(element.getAttribute(SYSTEM_PROPERTIES_MODE_ATTRIBUTE))) &#123;</span><br><span class="line">			<span class="keyword">return</span> PropertySourcesPlaceholderConfigurer.class;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// The user has explicitly specified a value for system-properties-mode: revert to</span></span><br><span class="line">		<span class="comment">// PropertyPlaceholderConfigurer to ensure backward compatibility with 3.0 and earlier.</span></span><br><span class="line">		<span class="keyword">return</span> PropertyPlaceholderConfigurer.class;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doParse</span><span class="params">(Element element, BeanDefinitionBuilder builder)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>.doParse(element, builder);</span><br><span class="line"></span><br><span class="line">		builder.addPropertyValue(<span class="string">"ignoreUnresolvablePlaceholders"</span>,</span><br><span class="line">				Boolean.valueOf(element.getAttribute(<span class="string">"ignore-unresolvable"</span>)));</span><br><span class="line"></span><br><span class="line">		String systemPropertiesModeName = element.getAttribute(SYSTEM_PROPERTIES_MODE_ATTRIBUTE);</span><br><span class="line">		<span class="keyword">if</span> (StringUtils.hasLength(systemPropertiesModeName) &amp;&amp;</span><br><span class="line">				!systemPropertiesModeName.equals(SYSTEM_PROPERTIES_MODE_DEFAULT)) &#123;</span><br><span class="line">			builder.addPropertyValue(<span class="string">"systemPropertiesModeName"</span>, <span class="string">"SYSTEM_PROPERTIES_MODE_"</span> + systemPropertiesModeName);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (element.hasAttribute(<span class="string">"value-separator"</span>)) &#123;    </span><br><span class="line">			builder.addPropertyValue(<span class="string">"valueSeparator"</span>, element.getAttribute(<span class="string">"value-separator"</span>));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (element.hasAttribute(<span class="string">"null-value"</span>)) &#123;</span><br><span class="line">			builder.addPropertyValue(<span class="string">"nullValue"</span>, element.getAttribute(<span class="string">"null-value"</span>));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>getBeanClass</code>中，根据标签中的<code>system-properties-mode</code>属性来返回不同的类，来指明要实例化的类。</p>
<p>再来看上述的<code>parse</code>方法，首先就是调用父类的<code>doParse</code>方法，然后就是解析标签中的相应属性，放到<code>BeanDefinitionBuilder</code>中，剩下的工作就交给spring这个框架来完成了。</p>
<h4 id="system-properties-mode"><code>system-properties-mode</code></h4><p>决定解析placeholder的顺序。这个属性的取值如下：</p>
<blockquote>
<p>   <strong>“ENVIRONMENT”</strong> indicates placeholders should be resolved against the current Environment and against any local properties;</p>
<p>   <strong>“NEVER”</strong> indicates placeholders should be resolved only against local properties and never against system properties;</p>
<p>   <strong>“FALLBACK”</strong> indicates placeholders should be resolved against any local properties and then against system properties;</p>
<p>   <strong>“OVERRIDE”</strong> indicates placeholders should be resolved first against system properties and then against any local properties;</p>
</blockquote>
<p>这个属性的默认值是<code>ENVIRONMENT</code>,也就是先从环境变量中解析，然后才从我们定义的properties文件中解析，如果环境中的变量名和配置文件中的变量名冲突，</p>
<p>就会使用环境变量中的。</p>
<blockquote>
<p>所以配置文件中的变量名最好带一个前缀，如<code>jdbc.username=</code>, 笔者在Ubuntu下就遇到过不带前缀的<code>username</code>和系统的’username’冲突的情况</p>
</blockquote>
<h4 id="ignore-unresolvable"><code>ignore-unresolvable</code></h4><blockquote>
<p>   Specifies if failure to find the property value to replace a key should be ignored.<br>    Default is “false”, meaning that this placeholder configurer will raise an exception<br>    if it cannot resolve a key. Set to “true” to allow the configurer to pass on the key<br>    to any others in the context that have not yet visited the key in question.</p>
</blockquote>
<p>这个属性很关键，他决定遇到无法解析的变量时是否抛出异常，默认是<code>fale</code>（抛出异常）,在有多个配置文件的时候应该设置为<code>true</code>。</p>
<h4 id="value-separator"><code>value-separator</code></h4><p>placeHolder默认值得分隔符，默认是<code>:</code></p>
<blockquote>
<p>The separating character between the placeholder variable and the associated     default value: by default, a ‘:’ symbol.</p>
</blockquote>
<h4 id="null-value"><code>null-value</code></h4><blockquote>
<p>   A value that should be treated as ‘null’ when resolved as a placeholder value:<br>    e.g. “” (empty String) or “null”. By default, no such null value is defined.</p>
</blockquote>
<p><strong>这些属性都可以在相应的<code>xsd</code>schema中找到。</strong></p>
<h3 id="AbstractPropertyLoadingBeanDefinitionParser">AbstractPropertyLoadingBeanDefinitionParser</h3><p>这是上面的那个解析类的父类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractPropertyLoadingBeanDefinitionParser</span> <span class="keyword">extends</span> <span class="title">AbstractSingleBeanDefinitionParser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">shouldGenerateId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doParse</span><span class="params">(Element element, BeanDefinitionBuilder builder)</span> </span>&#123;</span><br><span class="line">		String location = element.getAttribute(<span class="string">"location"</span>);</span><br><span class="line">		<span class="keyword">if</span> (StringUtils.hasLength(location)) &#123;</span><br><span class="line">			String[] locations = StringUtils.commaDelimitedListToStringArray(location);</span><br><span class="line">			builder.addPropertyValue(<span class="string">"locations"</span>, locations);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		String propertiesRef = element.getAttribute(<span class="string">"properties-ref"</span>);</span><br><span class="line">		<span class="keyword">if</span> (StringUtils.hasLength(propertiesRef)) &#123;</span><br><span class="line">			builder.addPropertyReference(<span class="string">"properties"</span>, propertiesRef);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		String fileEncoding = element.getAttribute(<span class="string">"file-encoding"</span>);</span><br><span class="line">		<span class="keyword">if</span> (StringUtils.hasLength(fileEncoding)) &#123;</span><br><span class="line">			builder.addPropertyValue(<span class="string">"fileEncoding"</span>, fileEncoding);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		String order = element.getAttribute(<span class="string">"order"</span>);</span><br><span class="line">		<span class="keyword">if</span> (StringUtils.hasLength(order)) &#123;</span><br><span class="line">			builder.addPropertyValue(<span class="string">"order"</span>, Integer.valueOf(order));</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		builder.addPropertyValue(<span class="string">"ignoreResourceNotFound"</span>,</span><br><span class="line">				Boolean.valueOf(element.getAttribute(<span class="string">"ignore-resource-not-found"</span>)));</span><br><span class="line"></span><br><span class="line">		builder.addPropertyValue(<span class="string">"localOverride"</span>,</span><br><span class="line">				Boolean.valueOf(element.getAttribute(<span class="string">"local-override"</span>)));</span><br><span class="line"></span><br><span class="line">		builder.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="shouldGenerateId">shouldGenerateId</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Should an ID be generated instead of read from the passed in &#123;<span class="doctag">@link</span> Element&#125;?</span><br><span class="line"> * &lt;p&gt;Disabled by default; subclasses can override this to enable ID generation.</span><br><span class="line"> * Note that this flag is about &lt;i&gt;always&lt;/i&gt; generating an ID; the parser</span><br><span class="line"> * won't even check for an "id" attribute in this case.</span><br><span class="line"> * <span class="doctag">@return</span> whether the parser should always generate an id</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">shouldGenerateId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="doParse">doParse</h4><p>这个方法负责解析配置文件的location、file-encoding等通用的属性，并放置到<code>builder</code>中。</p>
<h2 id="Spring_调用handler的过程">Spring 调用handler的过程</h2><p>spring将特定的标签的解析委托给我们自己定义的handler的过程主要是在<code>DefaultBeanDefinitionDocumentReader</code>中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">	 * Parse the elements at the root level in the document:</span><br><span class="line">	 * "import", "alias", "bean".</span><br><span class="line">	 * <span class="doctag">@param</span> root the DOM root element of the document</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parseBeanDefinitions</span><span class="params">(Element root, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (delegate.isDefaultNamespace(root)) &#123;</span><br><span class="line">			NodeList nl = root.getChildNodes();</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class="line">				Node node = nl.item(i);</span><br><span class="line">				<span class="keyword">if</span> (node <span class="keyword">instanceof</span> Element) &#123;</span><br><span class="line">					Element ele = (Element) node;</span><br><span class="line">					<span class="keyword">if</span> (delegate.isDefaultNamespace(ele)) &#123;</span><br><span class="line">						parseDefaultElement(ele, delegate);</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> &#123;</span><br><span class="line">						delegate.parseCustomElement(ele);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			delegate.parseCustomElement(root);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>context</code>不是默认命名空间的标签，所以走<code>parseCustomElement</code>分支。</p>
<p>走到<code>BeanDefinitionParserDelegate</code>的<code>parseCustomElement</code>方法中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parseCustomElement</span><span class="params">(Element ele)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> parseCustomElement(ele, <span class="keyword">null</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parseCustomElement</span><span class="params">(Element ele, BeanDefinition containingBd)</span> </span>&#123;</span><br><span class="line">		String namespaceUri = getNamespaceURI(ele);</span><br><span class="line">		NamespaceHandler handler = <span class="keyword">this</span>.readerContext.getNamespaceHandlerResolver().resolve(namespaceUri);</span><br><span class="line">		<span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line">			error(<span class="string">"Unable to locate Spring NamespaceHandler for XML schema namespace ["</span> + namespaceUri + <span class="string">"]"</span>, ele);</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> handler.parse(ele, <span class="keyword">new</span> ParserContext(<span class="keyword">this</span>.readerContext, <span class="keyword">this</span>, containingBd));</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里从<code>NamespaceHandlerResolver</code>中根据<code>namespaceUri</code>获取到对应的<code>NamespaceHandler</code>,然后调用<code>handler</code>的<code>parse</code><br>方法进行解析，返回一个<code>BeanDefinition</code>，然后就注册到spring中了。</p>
<p>这里的handler就是前面我们看到的实现了<code>NamespaceHandlerSupport</code>的那个<code>ContextNamespaceHandler</code>,<code>NamespaceHandlerSupport</code>继承自<code>NamespaceHandler</code>,它的parse 方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">	 * Parses the supplied &#123;<span class="doctag">@link</span> Element&#125; by delegating to the &#123;<span class="doctag">@link</span> BeanDefinitionParser&#125; that is</span><br><span class="line">	 * registered for that &#123;<span class="doctag">@link</span> Element&#125;.</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> BeanDefinition <span class="title">parse</span><span class="params">(Element element, ParserContext parserContext)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> findParserForElement(element, parserContext).parse(element, parserContext);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Locates the &#123;<span class="doctag">@link</span> BeanDefinitionParser&#125; from the register implementations using</span><br><span class="line">	 * the local name of the supplied &#123;<span class="doctag">@link</span> Element&#125;.</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> BeanDefinitionParser <span class="title">findParserForElement</span><span class="params">(Element element, ParserContext parserContext)</span> </span>&#123;</span><br><span class="line">		String localName = parserContext.getDelegate().getLocalName(element);</span><br><span class="line">		BeanDefinitionParser parser = <span class="keyword">this</span>.parsers.get(localName);</span><br><span class="line">		<span class="keyword">if</span> (parser == <span class="keyword">null</span>) &#123;</span><br><span class="line">			parserContext.getReaderContext().fatal(</span><br><span class="line">					<span class="string">"Cannot locate BeanDefinitionParser for element ["</span> + localName + <span class="string">"]"</span>, element);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> parser;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>就是从在<code>init()</code>方法中注册的<code>Parser</code>,根据对应的标签前缀，获取到parser，对xml元素进行解析。</p>
<h2 id="生效过程">生效过程</h2><p>生效过程是在<code>BeanFactoryPostProcessor</code>被调用的过程中生效的, 继承关系</p>
<p><img src="post-processors.jpg" alt=""></p>
<p>可以看到里面有两个熟悉的类——<code>PropertySourcesPlaceholderConfigurer</code>和<code>PropertyPlaceholderConfigurer</code>，正是<code>PropertyPlaceholderBeanDefinitionParser.getBeanClass</code>返回的两种类型, 也就是说他们两个是<code>BeanFactoryPostProcessor</code>.</p>
<h3 id="PropertySourcesPlaceholderConfigurer">PropertySourcesPlaceholderConfigurer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">	 * &#123;<span class="doctag">@inheritDoc</span>&#125;</span><br><span class="line">	 * &lt;p&gt;Processing occurs by replacing $&#123;...&#125; placeholders in bean definitions by resolving each</span><br><span class="line">	 * against this configurer's set of &#123;<span class="doctag">@link</span> PropertySources&#125;, which includes:</span><br><span class="line">	 * &lt;ul&gt;</span><br><span class="line">	 * &lt;li&gt;all &#123;<span class="doctag">@linkplain</span> org.springframework.core.env.ConfigurableEnvironment#getPropertySources</span><br><span class="line">	 * environment property sources&#125;, if an &#123;<span class="doctag">@code</span> Environment&#125; &#123;<span class="doctag">@linkplain</span> #setEnvironment is present&#125;</span><br><span class="line">	 * &lt;li&gt;&#123;<span class="doctag">@linkplain</span> #mergeProperties merged local properties&#125;, if &#123;<span class="doctag">@linkplain</span> #setLocation any&#125;</span><br><span class="line">	 * &#123;<span class="doctag">@linkplain</span> #setLocations have&#125; &#123;<span class="doctag">@linkplain</span> #setProperties been&#125;</span><br><span class="line">	 * &#123;<span class="doctag">@linkplain</span> #setPropertiesArray specified&#125;</span><br><span class="line">	 * &lt;li&gt;any property sources set by calling &#123;<span class="doctag">@link</span> #setPropertySources&#125;</span><br><span class="line">	 * &lt;/ul&gt;</span><br><span class="line">	 * &lt;p&gt;If &#123;<span class="doctag">@link</span> #setPropertySources&#125; is called, &lt;strong&gt;environment and local properties will be</span><br><span class="line">	 * ignored&lt;/strong&gt;. This method is designed to give the user fine-grained control over property</span><br><span class="line">	 * sources, and once set, the configurer makes no assumptions about adding additional sources.</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.propertySources == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">this</span>.propertySources = <span class="keyword">new</span> MutablePropertySources();</span><br><span class="line">			<span class="keyword">if</span> (<span class="keyword">this</span>.environment != <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">this</span>.propertySources.addLast(</span><br><span class="line">					<span class="keyword">new</span> PropertySource&lt;Environment&gt;(ENVIRONMENT_PROPERTIES_PROPERTY_SOURCE_NAME, <span class="keyword">this</span>.environment) &#123;</span><br><span class="line">						<span class="annotation">@Override</span></span><br><span class="line">						<span class="function"><span class="keyword">public</span> String <span class="title">getProperty</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">							<span class="keyword">return</span> <span class="keyword">this</span>.source.getProperty(key);</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				PropertySource&lt;?&gt; localPropertySource =</span><br><span class="line">						<span class="keyword">new</span> PropertiesPropertySource(LOCAL_PROPERTIES_PROPERTY_SOURCE_NAME, mergeProperties());</span><br><span class="line">				<span class="keyword">if</span> (<span class="keyword">this</span>.localOverride) &#123;</span><br><span class="line">					<span class="keyword">this</span>.propertySources.addFirst(localPropertySource);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">this</span>.propertySources.addLast(localPropertySource);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> BeanInitializationException(<span class="string">"Could not load properties"</span>, ex);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		processProperties(beanFactory, <span class="keyword">new</span> PropertySourcesPropertyResolver(<span class="keyword">this</span>.propertySources));</span><br><span class="line">		<span class="keyword">this</span>.appliedPropertySources = <span class="keyword">this</span>.propertySources;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>注意上述的<code>localOverride</code>变量，它决定了是否用本地的替换系统的，主要是用加载的顺序呢控制的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">* &lt;p&gt;Any local properties (e.g. those added via &#123;<span class="doctag">@link</span> #setProperties&#125;, &#123;<span class="doctag">@link</span> #setLocations&#125;</span><br><span class="line">* et al.) are added as a &#123;<span class="doctag">@code</span> PropertySource&#125;. Search precedence of local properties is</span><br><span class="line">* based on the value of the &#123;<span class="doctag">@link</span> #setLocalOverride localOverride&#125; property, which is by</span><br><span class="line">* default &#123;<span class="doctag">@code</span> false&#125; meaning that local properties are to be searched last, after all</span><br><span class="line">* environment property sources.</span><br><span class="line">*/</span></span><br></pre></td></tr></table></figure>
<p>获取到所有的属性列表后，处理属性就交给了<code>processProperties</code>这个方法.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">	 * Visit each bean definition in the given bean factory and attempt to replace $&#123;...&#125; property</span><br><span class="line">	 * placeholders with values from the given properties.</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processProperties</span><span class="params">(ConfigurableListableBeanFactory beanFactoryToProcess,</span><br><span class="line">			<span class="keyword">final</span> ConfigurablePropertyResolver propertyResolver)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"></span><br><span class="line">		propertyResolver.setPlaceholderPrefix(<span class="keyword">this</span>.placeholderPrefix);</span><br><span class="line">		propertyResolver.setPlaceholderSuffix(<span class="keyword">this</span>.placeholderSuffix);</span><br><span class="line">		propertyResolver.setValueSeparator(<span class="keyword">this</span>.valueSeparator);</span><br><span class="line"></span><br><span class="line">		StringValueResolver valueResolver = <span class="keyword">new</span> StringValueResolver() &#123;</span><br><span class="line">			<span class="annotation">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> String <span class="title">resolveStringValue</span><span class="params">(String strVal)</span> </span>&#123;</span><br><span class="line">				String resolved = ignoreUnresolvablePlaceholders ?</span><br><span class="line">						propertyResolver.resolvePlaceholders(strVal) :</span><br><span class="line">						propertyResolver.resolveRequiredPlaceholders(strVal);</span><br><span class="line">				<span class="keyword">return</span> (resolved.equals(nullValue) ? <span class="keyword">null</span> : resolved);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line"></span><br><span class="line">		doProcessProperties(beanFactoryToProcess, valueResolver);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>先设置propertyResolver的prefix（默认是${}）和suffix(默认是})，以及默认值得分隔符(默认是:).</p>
<p>然后创建了一个StringValueResolver, 这里根据<code>ignoreUnresolvablePlaceholders</code>的值来进行不同的解析，</p>
<p>这个值默认是false, 但是可以在标签中配置。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">xsd:attribute</span> <span class="attribute">name</span>=<span class="value">"ignore-unresolvable"</span> <span class="attribute">type</span>=<span class="value">"xsd:boolean"</span> <span class="attribute">default</span>=<span class="value">"false"</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="title">xsd:annotation</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="title">xsd:documentation</span>&gt;</span><span class="cdata">&lt;![CDATA[</span><br><span class="line">	Specifies if failure to find the property value to replace a key should be ignored.</span><br><span class="line">	Default is "false", meaning that this placeholder configurer will raise an exception</span><br><span class="line">	if it cannot resolve a key. Set to "true" to allow the configurer to pass on the key</span><br><span class="line">	to any others in the context that have not yet visited the key in question.</span><br><span class="line">				]]&gt;</span><span class="tag">&lt;/<span class="title">xsd:documentation</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="title">xsd:annotation</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="title">xsd:attribute</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>false</code>就以为者遇到无法解析的值就会直接抛出异常</p>
<p>接下来看看<code>doProcessProperties</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doProcessProperties</span><span class="params">(ConfigurableListableBeanFactory beanFactoryToProcess,</span><br><span class="line">		StringValueResolver valueResolver)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	BeanDefinitionVisitor visitor = <span class="keyword">new</span> BeanDefinitionVisitor(valueResolver);</span><br><span class="line"></span><br><span class="line">	String[] beanNames = beanFactoryToProcess.getBeanDefinitionNames();</span><br><span class="line">	<span class="keyword">for</span> (String curName : beanNames) &#123;</span><br><span class="line">		<span class="comment">// Check that we're not parsing our own bean definition,</span></span><br><span class="line">		<span class="comment">// to avoid failing on unresolvable placeholders in properties file locations.</span></span><br><span class="line">		<span class="keyword">if</span> (!(curName.equals(<span class="keyword">this</span>.beanName) &amp;&amp; beanFactoryToProcess.equals(<span class="keyword">this</span>.beanFactory))) &#123;</span><br><span class="line">			BeanDefinition bd = beanFactoryToProcess.getBeanDefinition(curName);</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				visitor.visitBeanDefinition(bd);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(bd.getResourceDescription(), curName, ex.getMessage(), ex);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// New in Spring 2.5: resolve placeholders in alias target names and aliases as well.</span></span><br><span class="line">	beanFactoryToProcess.resolveAliases(valueResolver);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// New in Spring 3.0: resolve placeholders in embedded values such as annotation attributes.</span></span><br><span class="line">	beanFactoryToProcess.addEmbeddedValueResolver(valueResolver);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里采用的是visitor模式，查看<code>BeanDefinitionVisitor#visitBeanDefinition</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">	 * Traverse the given BeanDefinition object and the MutablePropertyValues</span><br><span class="line">	 * and ConstructorArgumentValues contained in them.</span><br><span class="line">	 * <span class="doctag">@param</span> beanDefinition the BeanDefinition object to traverse</span><br><span class="line">	 * <span class="doctag">@see</span> #resolveStringValue(String)</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitBeanDefinition</span><span class="params">(BeanDefinition beanDefinition)</span> </span>&#123;</span><br><span class="line">		visitParentName(beanDefinition);</span><br><span class="line">		visitBeanClassName(beanDefinition);</span><br><span class="line">		visitFactoryBeanName(beanDefinition);</span><br><span class="line">		visitFactoryMethodName(beanDefinition);</span><br><span class="line">		visitScope(beanDefinition);</span><br><span class="line">		visitPropertyValues(beanDefinition.getPropertyValues());</span><br><span class="line">		ConstructorArgumentValues cas = beanDefinition.getConstructorArgumentValues();</span><br><span class="line">		visitIndexedArgumentValues(cas.getIndexedArgumentValues());</span><br><span class="line">		visitGenericArgumentValues(cas.getGenericArgumentValues());</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>以其中的<code>visitParentName</code>为例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">visitParentName</span><span class="params">(BeanDefinition beanDefinition)</span> </span>&#123;</span><br><span class="line">	String parentName = beanDefinition.getParentName();</span><br><span class="line">	<span class="keyword">if</span> (parentName != <span class="keyword">null</span>) &#123;</span><br><span class="line">		String resolvedName = resolveStringValue(parentName);</span><br><span class="line">		<span class="keyword">if</span> (!parentName.equals(resolvedName)) &#123;</span><br><span class="line">			beanDefinition.setParentName(resolvedName);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>就是先获取<code>parentName</code>，然后替换相应的属性之后的<code>resolvedName</code>,如果和原来的不一样就设置<code>resolvedName</code></p>
<p>为新的parentName</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Resolve the given String value, for example parsing placeholders.</span><br><span class="line"> * <span class="doctag">@param</span> strVal the original String value</span><br><span class="line"> * <span class="doctag">@return</span> the resolved String value</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">resolveStringValue</span><span class="params">(String strVal)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>.valueResolver == <span class="keyword">null</span>) &#123;</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"No StringValueResolver specified - pass a resolver "</span> +</span><br><span class="line">				<span class="string">"object into the constructor or override the 'resolveStringValue' method"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	String resolvedValue = <span class="keyword">this</span>.valueResolver.resolveStringValue(strVal);</span><br><span class="line">	<span class="comment">// Return original String if not modified.</span></span><br><span class="line">	<span class="keyword">return</span> (strVal.equals(resolvedValue) ? strVal : resolvedValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>顺藤摸瓜,看看<code>valueResolver</code>,就是之前的<code>StringValueResolver</code></p>
<p>这是一个接口只有一个方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StringValueResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Resolve the given String value, for example parsing placeholders.</span><br><span class="line">	 * <span class="doctag">@param</span> strVal the original String value</span><br><span class="line">	 * <span class="doctag">@return</span> the resolved String value</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function">String <span class="title">resolveStringValue</span><span class="params">(String strVal)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之前传入的其实就是对应<code>ConfigurablePropertyResolver</code>的两个方法, 之前传入的是它的子类</p>
<p><code>PropertySourcesPropertyResolver</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">resolvePlaceholders</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.nonStrictHelper == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">this</span>.nonStrictHelper = createPlaceholderHelper(<span class="keyword">true</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> doResolvePlaceholders(text, <span class="keyword">this</span>.nonStrictHelper);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">resolveRequiredPlaceholders</span><span class="params">(String text)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.strictHelper == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">this</span>.strictHelper = createPlaceholderHelper(<span class="keyword">false</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> doResolvePlaceholders(text, <span class="keyword">this</span>.strictHelper);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>调用的是内部方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">doResolvePlaceholders</span><span class="params">(String text, PropertyPlaceholderHelper helper)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> helper.replacePlaceholders(text, <span class="keyword">new</span> PropertyPlaceholderHelper.PlaceholderResolver() &#123;</span><br><span class="line">		<span class="annotation">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">resolvePlaceholder</span><span class="params">(String placeholderName)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> getPropertyAsRawString(placeholderName);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终调用功能的是<code>PropertyPlaceholderHelper</code>的replacePlaceholders方法，</p>
<p>这个helper在构造是通过 <code>createPlaceholderHelper</code>方法构建的，他接受一个bool类型的参数</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> PropertyPlaceholderHelper <span class="title">createPlaceholderHelper</span><span class="params">(<span class="keyword">boolean</span> ignoreUnresolvablePlaceholders)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> PropertyPlaceholderHelper(<span class="keyword">this</span>.placeholderPrefix, <span class="keyword">this</span>.placeholderSuffix,</span><br><span class="line">			<span class="keyword">this</span>.valueSeparator, ignoreUnresolvablePlaceholders);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个bool值就是表示是否要ignore掉不能解析的属性。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">	 * Creates a new &#123;<span class="doctag">@code</span> PropertyPlaceholderHelper&#125; that uses the supplied prefix and suffix.</span><br><span class="line">	 * <span class="doctag">@param</span> placeholderPrefix the prefix that denotes the start of a placeholder</span><br><span class="line">	 * <span class="doctag">@param</span> placeholderSuffix the suffix that denotes the end of a placeholder</span><br><span class="line">	 * <span class="doctag">@param</span> valueSeparator the separating character between the placeholder variable</span><br><span class="line">	 * and the associated default value, if any</span><br><span class="line">	 * <span class="doctag">@param</span> ignoreUnresolvablePlaceholders indicates whether unresolvable placeholders should</span><br><span class="line">	 * be ignored (&#123;<span class="doctag">@code</span> true&#125;) or cause an exception (&#123;<span class="doctag">@code</span> false&#125;)</span><br><span class="line">	 */</span></span><br></pre></td></tr></table></figure>
<p>接着追</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Replaces all placeholders of format &#123;<span class="doctag">@code</span> $&#123;name&#125;&#125; with the value returned</span><br><span class="line"> * from the supplied &#123;<span class="doctag">@link</span> PlaceholderResolver&#125;.</span><br><span class="line"> * <span class="doctag">@param</span> value the value containing the placeholders to be replaced</span><br><span class="line"> * <span class="doctag">@param</span> placeholderResolver the &#123;<span class="doctag">@code</span> PlaceholderResolver&#125; to use for replacement</span><br><span class="line"> * <span class="doctag">@return</span> the supplied value with placeholders replaced inline</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replacePlaceholders</span><span class="params">(String value, PlaceholderResolver placeholderResolver)</span> </span>&#123;</span><br><span class="line">	Assert.notNull(value, <span class="string">"'value' must not be null"</span>);</span><br><span class="line">	<span class="keyword">return</span> parseStringValue(value, placeholderResolver, <span class="keyword">new</span> HashSet&lt;String&gt;());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">parseStringValue</span><span class="params">(</span><br><span class="line">			String strVal, PlaceholderResolver placeholderResolver, Set&lt;String&gt; visitedPlaceholders)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">		StringBuilder result = <span class="keyword">new</span> StringBuilder(strVal);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">int</span> startIndex = strVal.indexOf(<span class="keyword">this</span>.placeholderPrefix);</span><br><span class="line">		<span class="keyword">while</span> (startIndex != -<span class="number">1</span>) &#123;</span><br><span class="line">			<span class="keyword">int</span> endIndex = findPlaceholderEndIndex(result, startIndex);</span><br><span class="line">			<span class="keyword">if</span> (endIndex != -<span class="number">1</span>) &#123;</span><br><span class="line">				String placeholder = result.substring(startIndex + <span class="keyword">this</span>.placeholderPrefix.length(), endIndex);</span><br><span class="line">				String originalPlaceholder = placeholder;</span><br><span class="line">				<span class="keyword">if</span> (!visitedPlaceholders.add(originalPlaceholder)) &#123;</span><br><span class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">							<span class="string">"Circular placeholder reference '"</span> + originalPlaceholder + <span class="string">"' in property definitions"</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">// Recursive invocation, parsing placeholders contained in the placeholder key.</span></span><br><span class="line">				placeholder = parseStringValue(placeholder, placeholderResolver, visitedPlaceholders);</span><br><span class="line">				<span class="comment">// Now obtain the value for the fully resolved key...</span></span><br><span class="line">				String propVal = placeholderResolver.resolvePlaceholder(placeholder);</span><br><span class="line">				<span class="keyword">if</span> (propVal == <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.valueSeparator != <span class="keyword">null</span>) &#123;</span><br><span class="line">					<span class="keyword">int</span> separatorIndex = placeholder.indexOf(<span class="keyword">this</span>.valueSeparator);</span><br><span class="line">					<span class="keyword">if</span> (separatorIndex != -<span class="number">1</span>) &#123;</span><br><span class="line">						String actualPlaceholder = placeholder.substring(<span class="number">0</span>, separatorIndex);</span><br><span class="line">						String defaultValue = placeholder.substring(separatorIndex + <span class="keyword">this</span>.valueSeparator.length());</span><br><span class="line">						propVal = placeholderResolver.resolvePlaceholder(actualPlaceholder);</span><br><span class="line">						<span class="keyword">if</span> (propVal == <span class="keyword">null</span>) &#123;</span><br><span class="line">							propVal = defaultValue;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (propVal != <span class="keyword">null</span>) &#123;</span><br><span class="line">					<span class="comment">// Recursive invocation, parsing placeholders contained in the</span></span><br><span class="line">					<span class="comment">// previously resolved placeholder value.</span></span><br><span class="line">					propVal = parseStringValue(propVal, placeholderResolver, visitedPlaceholders);</span><br><span class="line">					result.replace(startIndex, endIndex + <span class="keyword">this</span>.placeholderSuffix.length(), propVal);</span><br><span class="line">					<span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">						logger.trace(<span class="string">"Resolved placeholder '"</span> + placeholder + <span class="string">"'"</span>);</span><br><span class="line">					&#125;</span><br><span class="line">					startIndex = result.indexOf(<span class="keyword">this</span>.placeholderPrefix, startIndex + propVal.length());</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.ignoreUnresolvablePlaceholders) &#123;</span><br><span class="line">					<span class="comment">// Proceed with unprocessed value.</span></span><br><span class="line">					startIndex = result.indexOf(<span class="keyword">this</span>.placeholderPrefix, endIndex + <span class="keyword">this</span>.placeholderSuffix.length());</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Could not resolve placeholder '"</span> +</span><br><span class="line">							placeholder + <span class="string">"'"</span> + <span class="string">" in string value \""</span> + strVal + <span class="string">"\""</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				visitedPlaceholders.remove(originalPlaceholder);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				startIndex = -<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> result.toString();</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>实际解析的代码都在这里：</p>
<ol>
<li>取出placeHolder的名称.</li>
<li>判断有没有循环引用的情况.</li>
<li>递归替换，获取对应的值.</li>
<li>如果值为空，解析默认值.</li>
</ol>
<h3 id="PropertyPlaceholderConfigurer">PropertyPlaceholderConfigurer</h3><p>应该和上面的类似，抽时间补。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="&lt;context:property-placeholder_location=&#39;xxx&#39;_/&gt;的解析过程"><code>&lt;context:property-placeholder location=&#39;xxx&#39; /&]]>
    </summary>
    
      <category term="placeholder" scheme="http://qsli.github.io/tags/placeholder/"/>
    
      <category term="spring" scheme="http://qsli.github.io/categories/spring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spring自定义标签，使用和源码]]></title>
    <link href="http://qsli.github.io/2016/10/23/custom-tag/"/>
    <id>http://qsli.github.io/2016/10/23/custom-tag/</id>
    <published>2016-10-23T11:43:57.000Z</published>
    <updated>2016-12-18T05:09:43.901Z</updated>
    <content type="html"><![CDATA[<h2 id="自定义标签">自定义标签</h2><p>Spring中的标签具有很强的扩展性，我们可以很方便的扩展出自己的标签，做出类似下面的标签<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">dubbo:service</span> <span class="attribute">interface</span>=<span class="value">"com.foo.BarService"</span> <span class="attribute">ref</span>=<span class="value">"barService"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">dubbo:reference</span> <span class="attribute">id</span>=<span class="value">"barService"</span> <span class="attribute">interface</span>=<span class="value">"com.foo.BarService"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="1-_Authoring_the_schema">1. Authoring the schema</h3><p>定义标签的xml描述：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">xsd:schema</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.mycompany.com/schema/myns"</span></span><br><span class="line">        <span class="attribute">xmlns:xsd</span>=<span class="value">"http://www.w3.org/2001/XMLSchema"</span></span><br><span class="line">        <span class="attribute">xmlns:beans</span>=<span class="value">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">        <span class="attribute">targetNamespace</span>=<span class="value">"http://www.mycompany.com/schema/myns"</span></span><br><span class="line">        <span class="attribute">elementFormDefault</span>=<span class="value">"qualified"</span></span><br><span class="line">        <span class="attribute">attributeFormDefault</span>=<span class="value">"unqualified"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">xsd:import</span> <span class="attribute">namespace</span>=<span class="value">"http://www.springframework.org/schema/beans"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">xsd:element</span> <span class="attribute">name</span>=<span class="value">"dateformat"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">xsd:complexType</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">xsd:complexContent</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">xsd:extension</span> <span class="attribute">base</span>=<span class="value">"beans:identifiedType"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">xsd:attribute</span> <span class="attribute">name</span>=<span class="value">"lenient"</span> <span class="attribute">type</span>=<span class="value">"xsd:boolean"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">xsd:attribute</span> <span class="attribute">name</span>=<span class="value">"pattern"</span> <span class="attribute">type</span>=<span class="value">"xsd:string"</span> <span class="attribute">use</span>=<span class="value">"required"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="title">xsd:extension</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">xsd:complexContent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">xsd:complexType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">xsd:element</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">xsd:schema</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>定义了标签里面的属性和属性的类型， 在解析xml的时候spring会进行校验</p>
<h3 id="2-_Coding_a_NamespaceHandler">2. Coding a NamespaceHandler</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.samples.xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.xml.NamespaceHandlerSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyNamespaceHandler</span> <span class="keyword">extends</span> <span class="title">NamespaceHandlerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        registerBeanDefinitionParser(<span class="string">"dateformat"</span>, <span class="keyword">new</span> SimpleDateFormatBeanDefinitionParser());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要是定义标签的处理类，这里是<code>SimpleDateFormatBeanDefinitionParser</code></p>
<h3 id="3-_BeanDefinitionParser">3. BeanDefinitionParser</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.samples.xml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.xml.AbstractSingleBeanDefinitionParser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Element;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleDateFormatBeanDefinitionParser</span> <span class="keyword">extends</span> <span class="title">AbstractSingleBeanDefinitionParser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Class <span class="title">getBeanClass</span><span class="params">(Element element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SimpleDateFormat.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doParse</span><span class="params">(Element element, BeanDefinitionBuilder bean)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// this will never be null since the schema explicitly requires that a value be supplied</span></span><br><span class="line">        String pattern = element.getAttribute(<span class="string">"pattern"</span>);</span><br><span class="line">        bean.addConstructorArg(pattern);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// this however is an optional property</span></span><br><span class="line">        String lenient = element.getAttribute(<span class="string">"lenient"</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(lenient)) &#123;</span><br><span class="line">            bean.addPropertyValue(<span class="string">"lenient"</span>, Boolean.valueOf(lenient));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该类继承自spring提供的抽象类<code>AbstractSingleBeanDefinitionParser</code>，提供了许多基本的功能，解析标签的方法在<code>doParse</code>中，spring会传入一个标签元素<code>Element</code>和<code>BeanDefinitionBuilder</code>的上下文。</p>
<h3 id="4-_Registering_the_handler_and_the_schema">4. Registering the handler and the schema</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">└─<span class="tag">META-INF</span></span><br><span class="line">        <span class="tag">spring</span><span class="class">.handlers</span></span><br><span class="line">        <span class="tag">spring</span><span class="class">.schemas</span></span><br></pre></td></tr></table></figure>
<p><code>spring.handlers</code>中的内容如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http\://www.mycompany.com/schema/myns=org.springframework.samples.xml.MyNamespaceHandler</span><br></pre></td></tr></table></figure>
<p><code>spring.schemas</code>中内容如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http\://www.mycompany.com/schema/myns/myns.xsd=org/springframework/samples/xml/myns.xsd</span><br></pre></td></tr></table></figure>
<p>spring在加载这个jar包的时候会自动的从这些文件中解析到我们的配置，当解析到相应的标签的时候就会交给我们定义的解析类来处理。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">myns:dateformat</span> <span class="attribute">id</span>=<span class="value">"dateFormat"</span></span><br><span class="line"><span class="attribute">pattern</span>=<span class="value">"yyyy-MM-dd HH:mm"</span></span><br><span class="line"><span class="attribute">lenient</span>=<span class="value">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Custom_attributes_on_‘normal’_elements">Custom attributes on ‘normal’ elements</h2><p>除了自定义标签外，还可以为已有标签装饰一个新的属性</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">bean</span> <span class="attribute">id</span>=<span class="value">"checkingAccountService"</span> <span class="attribute">class</span>=<span class="value">"com.foo.DefaultCheckingAccountService"</span></span><br><span class="line">        <span class="attribute">jcache:cache-name</span>=<span class="value">"checking.account"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- other dependencies here... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>spring可以让我们单独处理这个<code>jcache:cache-name</code>这个属性。</p>
<h3 id="定义schema">定义schema</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">xsd:schema</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.foo.com/schema/jcache"</span></span><br><span class="line">        <span class="attribute">xmlns:xsd</span>=<span class="value">"http://www.w3.org/2001/XMLSchema"</span></span><br><span class="line">        <span class="attribute">targetNamespace</span>=<span class="value">"http://www.foo.com/schema/jcache"</span></span><br><span class="line">        <span class="attribute">elementFormDefault</span>=<span class="value">"qualified"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">xsd:attribute</span> <span class="attribute">name</span>=<span class="value">"cache-name"</span> <span class="attribute">type</span>=<span class="value">"xsd:string"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">xsd:schema</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="NamespaceHandler">NamespaceHandler</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JCacheNamespaceHandler</span> <span class="keyword">extends</span> <span class="title">NamespaceHandlerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.registerBeanDefinitionDecoratorForAttribute(<span class="string">"cache-name"</span>,</span><br><span class="line">            <span class="keyword">new</span> JCacheInitializingBeanDefinitionDecorator());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实际的调用行为已经被抽象到<code>NamespaceHandlerSupport</code>中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Decorates the supplied &#123;<span class="doctag">@link</span> Node&#125; by delegating to the &#123;<span class="doctag">@link</span> BeanDefinitionDecorator&#125; that</span><br><span class="line"> * is registered to handle that &#123;<span class="doctag">@link</span> Node&#125;.</span><br><span class="line"> */</span></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> BeanDefinitionHolder <span class="title">decorate</span><span class="params">(</span><br><span class="line">    Node node, BeanDefinitionHolder definition, ParserContext parserContext)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> findDecoratorForNode(node, parserContext).decorate(node, definition, parserContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="BeanDefinitionDecorator">BeanDefinitionDecorator</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JCacheInitializingBeanDefinitionDecorator</span> <span class="keyword">implements</span> <span class="title">BeanDefinitionDecorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] EMPTY_STRING_ARRAY = <span class="keyword">new</span> String[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BeanDefinitionHolder <span class="title">decorate</span><span class="params">(Node source, BeanDefinitionHolder holder,</span><br><span class="line">            ParserContext ctx)</span> </span>&#123;</span><br><span class="line">        String initializerBeanName = registerJCacheInitializer(source, ctx);</span><br><span class="line">        createDependencyOnJCacheInitializer(holder, initializerBeanName);</span><br><span class="line">        <span class="keyword">return</span> holder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createDependencyOnJCacheInitializer</span><span class="params">(BeanDefinitionHolder holder,</span><br><span class="line">            String initializerBeanName)</span> </span>&#123;</span><br><span class="line">        AbstractBeanDefinition definition = ((AbstractBeanDefinition) holder.getBeanDefinition());</span><br><span class="line">        String[] dependsOn = definition.getDependsOn();</span><br><span class="line">        <span class="keyword">if</span> (dependsOn == <span class="keyword">null</span>) &#123;</span><br><span class="line">            dependsOn = <span class="keyword">new</span> String[]&#123;initializerBeanName&#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            List dependencies = <span class="keyword">new</span> ArrayList(Arrays.asList(dependsOn));</span><br><span class="line">            dependencies.add(initializerBeanName);</span><br><span class="line">            dependsOn = (String[]) dependencies.toArray(EMPTY_STRING_ARRAY);</span><br><span class="line">        &#125;</span><br><span class="line">        definition.setDependsOn(dependsOn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">registerJCacheInitializer</span><span class="params">(Node source, ParserContext ctx)</span> </span>&#123;</span><br><span class="line">        String cacheName = ((Attr) source).getValue();</span><br><span class="line">        String beanName = cacheName + <span class="string">"-initializer"</span>;</span><br><span class="line">        <span class="keyword">if</span> (!ctx.getRegistry().containsBeanDefinition(beanName)) &#123;</span><br><span class="line">            BeanDefinitionBuilder initializer = BeanDefinitionBuilder.rootBeanDefinition(JCacheInitializer.class);</span><br><span class="line">            initializer.addConstructorArg(cacheName);</span><br><span class="line">            ctx.getRegistry().registerBeanDefinition(beanName, initializer.getBeanDefinition());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> beanName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="META-INF">META-INF</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># in 'META-INF/spring.handlers'</span><br><span class="line">http\://www.foo.com/schema/jcache=com.foo.JCacheNamespaceHandler</span><br><span class="line"># in 'META-INF/spring.schemas'</span><br><span class="line">http\://www.foo.com/schema/jcache/jcache.xsd=com/foo/jcache.xsd</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2><ol>
<li><a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/htmlsingle/" target="_blank" rel="external">spring-framework-reference</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="自定义标签">自定义标签</h2><p>Spring中的标签具有很强的扩展性，我们可以很方便的扩展出自己的标签，做出类似下面的标签<br><figure class="highlight xml"><table><tr><td class="gutter"><pr]]>
    </summary>
    
      <category term="自定义标签" scheme="http://qsli.github.io/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%87%E7%AD%BE/"/>
    
      <category term="spring" scheme="http://qsli.github.io/categories/spring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[plantuml——用编码的方式画UML]]></title>
    <link href="http://qsli.github.io/2016/10/16/plantuml/"/>
    <id>http://qsli.github.io/2016/10/16/plantuml/</id>
    <published>2016-10-15T16:56:07.000Z</published>
    <updated>2016-12-18T05:12:28.189Z</updated>
    <content type="html"><![CDATA[<h2 id="是什么？">是什么？</h2><blockquote>
<p>PlantUML is a component that allows to quickly write :</p>
<ul>
<li><p>Sequence diagram,</p>
</li>
<li><p>Usecase diagram,</p>
</li>
<li><p>Class diagram,</p>
</li>
<li><p>Activity diagram, (here is the new syntax),</p>
</li>
<li><p>Component diagram,</p>
</li>
<li><p>State diagram,</p>
</li>
<li><p>Deployment diagram,</p>
</li>
<li><p>Object diagram.</p>
</li>
<li><p>wireframe graphical interface</p>
</li>
</ul>
<p>Diagrams are defined using a simple and intuitive  language. ( see PlantUML Language Reference Guide).</p>
</blockquote>
<h2 id="例子">例子</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&#123;% plantuml %&#125;</span><br><span class="line">skinparam backgroundColor <span class="comment">#EEEBDC</span></span><br><span class="line">skinparam handwritten <span class="keyword">true</span></span><br><span class="line"></span><br><span class="line">skinparam sequence &#123;</span><br><span class="line">	<span class="constant">ArrowColor DeepSkyBlue</span></span><br><span class="line">	<span class="constant">ActorBorderColor DeepSkyBlue</span></span><br><span class="line">	<span class="constant">LifeLineBorderColor </span>blue</span><br><span class="line">	<span class="constant">LifeLineBackgroundColor </span><span class="comment">#A9DCDF</span></span><br><span class="line"></span><br><span class="line">	<span class="constant">ParticipantBorderColor DeepSkyBlue</span></span><br><span class="line">	<span class="constant">ParticipantBackgroundColor DodgerBlue</span></span><br><span class="line">	<span class="constant">ParticipantFontName Impact</span></span><br><span class="line">	<span class="constant">ParticipantFontSize </span><span class="number">17</span></span><br><span class="line">	<span class="constant">ParticipantFontColor </span><span class="comment">#A9DCDF</span></span><br><span class="line"></span><br><span class="line">	<span class="constant">ActorBackgroundColor </span>aqua</span><br><span class="line">	<span class="constant">ActorFontColor DeepSkyBlue</span></span><br><span class="line">	<span class="constant">ActorFontSize </span><span class="number">17</span></span><br><span class="line">	<span class="constant">ActorFontName Aapex</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">actor <span class="constant">User</span></span><br><span class="line">participant <span class="string">"First Class"</span> as <span class="constant">A</span></span><br><span class="line">participant <span class="string">"Second Class"</span> as <span class="constant">B</span></span><br><span class="line">participant <span class="string">"Last Class"</span> as <span class="constant">C</span></span><br><span class="line"></span><br><span class="line"><span class="constant">User </span>-&gt; <span class="constant">A:</span> <span class="constant">DoWork</span></span><br><span class="line">activate <span class="constant">A</span></span><br><span class="line"></span><br><span class="line"><span class="constant">A </span>-&gt; <span class="constant">B:</span> <span class="constant">Create Request</span></span><br><span class="line">activate <span class="constant">B</span></span><br><span class="line"></span><br><span class="line"><span class="constant">B </span>-&gt; <span class="constant">C:</span> <span class="constant">DoWork</span></span><br><span class="line">activate <span class="constant">C</span></span><br><span class="line"><span class="constant">C </span>--&gt; <span class="constant">B:</span> <span class="constant">WorkDone</span></span><br><span class="line">destroy <span class="constant">C</span></span><br><span class="line"></span><br><span class="line"><span class="constant">B </span>--&gt; <span class="constant">A:</span> <span class="constant">Request Created</span></span><br><span class="line">deactivate <span class="constant">B</span></span><br><span class="line"></span><br><span class="line"><span class="constant">A </span>--&gt; <span class="constant">User:</span> <span class="constant">Done</span></span><br><span class="line">deactivate <span class="constant">A</span></span><br><span class="line"></span><br><span class="line">&#123;% endplantuml %&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码的效果如下：</p>
<img src="http://www.plantuml.com/plantuml/svg/TP8zJyCm48Rdtg-mojo12T41oNPQ2Qb2Y0enN-EZM6djzEnG2kA_4wSL-OBrdlShLa9XNOcCUx71lDYohvpHVkTPN2qM2vLf2B-ADtJco3P6SY9oHT1XWGuLkPp45qmaip-UGpAYSbsSrAvMJsGUFIlFXlWFkhAljBAEke9DdmmNojjCPqk0oIDojBajqSL_yxkQGL3cpPPu95jw5nzmJ-9-Ns8UHsnjFqbStupkmtNdxnvqug722sezu-VgzVnUcbKII_g0Rm1CP_4SYA5ibuZfqdA8GkymXAd086GVhodtpdIuwlCLzjmQ85M8sPsGy_h9NZmNgTg-Owp70CY4r5nefdHvIdz4YAr40QWaqMEt1YrcPtS2cNS4fZQpFwLUrS2wzP9vgJ2rffik6raQcHgQY7RV3m00">
<h2 id="平台">平台</h2><p>可以在chromeapp中找到： <a href="https://chrome.google.com/webstore/detail/uml-diagram-editor/hoepdgfgogmeofkgkpapbdpdjkplcode?utm_source=chrome-ntp-icon" target="_blank" rel="external">链接</a>, 开箱即用</p>
<p>另可以和idea和eclipse、atom等编辑器集成，hexo中也有相应的插件，具体可看下面的教程</p>
<h2 id="参考">参考</h2><ol>
<li><p><a href="http://skyao.github.io/2014/12/05/plantuml-installation/index.html" target="_blank" rel="external">(记录)plantuml安装配置</a></p>
</li>
<li><p><a href="http://keyun.ml/2016/07/25/2016-07-25-hexo-uml.html" target="_blank" rel="external">Hexo博客中的绘图</a></p>
</li>
<li><p><a href="http://plantuml.com/" target="_blank" rel="external">官网</a></p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="是什么？">是什么？</h2><blockquote>
<p>PlantUML is a component that allows to quickly write :</p>
<ul>
<li><p>Sequence diagram,</p>
</li>
<l]]>
    </summary>
    
      <category term="uml" scheme="http://qsli.github.io/tags/uml/"/>
    
      <category term="hexo" scheme="http://qsli.github.io/categories/hexo/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在Intellij Idea中生成Javadoc]]></title>
    <link href="http://qsli.github.io/2016/10/05/javadoc/"/>
    <id>http://qsli.github.io/2016/10/05/javadoc/</id>
    <published>2016-10-04T16:06:29.000Z</published>
    <updated>2016-10-04T16:13:44.837Z</updated>
    <content type="html"><![CDATA[<p><code>Tools | Generate JavaDoc</code>, 写上输出路径即可。</p>
<h2 id="注意事项">注意事项</h2><ol>
<li><p>locale</p>
<p>简体中文写<code>zh_CN</code></p>
</li>
<li><p>编码</p>
<p>在<code>Other Commandline arguments</code>中指定</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-encoding UTF-<span class="number">8</span> -charset UTF-<span class="number">8</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="参考链接">参考链接</h2><ol>
<li><p><a href="http://www.cnblogs.com/cyberniuniu/p/5021910.html" target="_blank" rel="external">在 IntelliJ IDEA 中为自己设计的类库生成 JavaDoc</a></p>
</li>
<li><p><a href="https://www.jetbrains.com/help/idea/2016.2/generate-javadoc-dialog.html" target="_blank" rel="external">Generate JavaDoc Dialog</a></p>
</li>
<li><p><a href="https://www.jetbrains.com/help/idea/2016.2/generating-javadoc-reference-for-a-project.html" target="_blank" rel="external">Generating JavaDoc Reference for a Project</a></p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p><code>Tools | Generate JavaDoc</code>, 写上输出路径即可。</p>
<h2 id="注意事项">注意事项</h2><ol>
<li><p>locale</p>
<p>简体中文写<code>zh_CN</code></p>
</li>
<]]>
    </summary>
    
      <category term="Javadoc" scheme="http://qsli.github.io/tags/Javadoc/"/>
    
      <category term="idea" scheme="http://qsli.github.io/categories/idea/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spring Mvc源码剖析]]></title>
    <link href="http://qsli.github.io/2016/10/02/spring-mvc/"/>
    <id>http://qsli.github.io/2016/10/02/spring-mvc/</id>
    <published>2016-10-02T14:14:25.000Z</published>
    <updated>2016-12-18T05:07:45.301Z</updated>
    <content type="html"><![CDATA[<h2 id="架构">架构</h2><p><img src="arch.jpg" alt=""></p>
<p>SpringMVC的核心是 <code>DispatcherServlet</code></p>
<h2 id="本质">本质</h2><p>我们通过在<code>web.xml</code>中配置如下的语句，引入SpringMVC</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>mvc-dispatcher<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>classpath:/spring/mvc/mvc-dispatcher-servlet.xml<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="title">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上述代码段指定了servlet的class是spring的<code>DispatcherServlet</code>，初始化配置文件是<code>mvc-dispatcher-servlet.xml</code>,以及servlet的加载顺序。</p>
<p>既然<code>DispatcherServlet</code>也是一个<code>Servlet</code>，那他肯定也遵从servlet的规范。<br>我们知道Servlet定义了如下的接口：<br><img src="servlet-interface.jpg" alt=""><br>其中比较重要的是<code>init</code>和<code>service</code>接口<br><code>init</code>方法在servlet的一生中只初始化一次，<code>service</code>接口是Servlet对外提供服务的接口<br>Servlet的生命周期如下:<br><img src="Servlet_LifeCycle.jpg" alt=""></p>
<p>我们来看下<code>DispatcherServlet</code>的继承结构：</p>
<p><img src="hierachy.jpg" alt=""></p>
<h3 id="init方法">init方法</h3><p>直接去看<code>DispatcherServlet</code>的源码是没有发现<code>init</code>方法的， 它的<code>init</code>方法继承自<code>HttpServletBean</code>，源码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/**</span><br><span class="line"> * Map config parameters onto bean properties of this servlet, and</span><br><span class="line"> * invoke subclass initialization.</span><br><span class="line"> * <span class="doctag">@throws</span> ServletException if bean properties are invalid (or required</span><br><span class="line"> * properties are missing), or if subclass initialization fails.</span><br><span class="line"> */</span></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">		logger.debug(<span class="string">"Initializing servlet '"</span> + getServletName() + <span class="string">"'"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Set bean properties from init parameters.</span></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		PropertyValues pvs = <span class="keyword">new</span> ServletConfigPropertyValues(getServletConfig(), <span class="keyword">this</span>.requiredProperties);</span><br><span class="line">		BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(<span class="keyword">this</span>);</span><br><span class="line">		ResourceLoader resourceLoader = <span class="keyword">new</span> ServletContextResourceLoader(getServletContext());</span><br><span class="line">		bw.registerCustomEditor(Resource.class, <span class="keyword">new</span> ResourceEditor(resourceLoader, getEnvironment()));</span><br><span class="line">		initBeanWrapper(bw);</span><br><span class="line">		bw.setPropertyValues(pvs, <span class="keyword">true</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">		logger.error(<span class="string">"Failed to set bean properties on servlet '"</span> + getServletName() + <span class="string">"'"</span>, ex);</span><br><span class="line">		<span class="keyword">throw</span> ex;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Let subclasses do whatever initialization they like.</span></span><br><span class="line">	initServletBean();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">		logger.debug(<span class="string">"Servlet '"</span> + getServletName() + <span class="string">"' configured successfully"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在这个方法中，主要完成了bean属性的配置，并且给子类留下了相应的hook</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Let subclasses do whatever initialization they like.</span></span><br><span class="line">initServletBean();</span><br></pre></td></tr></table></figure>
<p>这个方法在FrameworkServlet中有具体的实现，现在看下FrameworkServlet中的实现。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">	 * Overridden method of &#123;<span class="doctag">@link</span> HttpServletBean&#125;, invoked after any bean properties</span><br><span class="line">	 * have been set. Creates this servlet's WebApplicationContext.</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">initServletBean</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">		getServletContext().log(<span class="string">"Initializing Spring FrameworkServlet '"</span> + getServletName() + <span class="string">"'"</span>);</span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.logger.isInfoEnabled()) &#123;</span><br><span class="line">			<span class="keyword">this</span>.logger.info(<span class="string">"FrameworkServlet '"</span> + getServletName() + <span class="string">"': initialization started"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">this</span>.webApplicationContext = initWebApplicationContext();</span><br><span class="line">			initFrameworkServlet();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (ServletException ex) &#123;</span><br><span class="line">			<span class="keyword">this</span>.logger.error(<span class="string">"Context initialization failed"</span>, ex);</span><br><span class="line">			<span class="keyword">throw</span> ex;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">			<span class="keyword">this</span>.logger.error(<span class="string">"Context initialization failed"</span>, ex);</span><br><span class="line">			<span class="keyword">throw</span> ex;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.logger.isInfoEnabled()) &#123;</span><br><span class="line">			<span class="keyword">long</span> elapsedTime = System.currentTimeMillis() - startTime;</span><br><span class="line">			<span class="keyword">this</span>.logger.info(<span class="string">"FrameworkServlet '"</span> + getServletName() + <span class="string">"': initialization completed in "</span> +</span><br><span class="line">					elapsedTime + <span class="string">" ms"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p><code>webApplicationContext</code>在此进行初始化，并且给子类留下了一个hook<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.webApplicationContext = initWebApplicationContext();</span><br><span class="line">initFrameworkServlet();</span><br></pre></td></tr></table></figure></p>
<p><code>initFrameworkServlet</code>在本类中并没有实现，用于子类控制</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">* This method will be invoked after any bean properties have been set and</span><br><span class="line">* the WebApplicationContext has been loaded. The default implementation is empty;</span><br><span class="line">* subclasses may override this method to perform any initialization they require.</span><br><span class="line">* <span class="doctag">@throws</span> ServletException in case of an initialization exception</span><br><span class="line">*/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initFrameworkServlet</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在initWebApplicationContext方法中，有一个空实现的方法onRefresh()<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">* Template method which can be overridden to add servlet-specific refresh work.</span><br><span class="line">* Called after successful context refresh.</span><br><span class="line">* &lt;p&gt;This implementation is empty.</span><br><span class="line">* <span class="doctag">@param</span> context the current WebApplicationContext</span><br><span class="line">* <span class="doctag">@see</span> #refresh()</span><br><span class="line">*/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line"><span class="comment">// For subclasses: do nothing by default.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这个方法也是钩子方法，DispatcherServlet正是实现了这个方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line">	* This implementation calls &#123;<span class="doctag">@link</span> #initStrategies&#125;.</span><br><span class="line">	*/</span></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">		initStrategies(context);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">		 * Initialize the strategy objects that this servlet uses.</span><br><span class="line">		 * &lt;p&gt;May be overridden in subclasses in order to initialize further strategy objects.</span><br><span class="line">		 */</span></span><br><span class="line">		<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initStrategies</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">			initMultipartResolver(context);</span><br><span class="line">			initLocaleResolver(context);</span><br><span class="line">			initThemeResolver(context);</span><br><span class="line">			initHandlerMappings(context);</span><br><span class="line">			initHandlerAdapters(context);</span><br><span class="line">			initHandlerExceptionResolvers(context);</span><br><span class="line">			initRequestToViewNameTranslator(context);</span><br><span class="line">			initViewResolvers(context);</span><br><span class="line">			initFlashMapManager(context);</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>
<p>onRefresh方法中又调用了initStrategies方法，在这个方法中进行了大量的初始化工作。</p>
<p>视图解析器和HandlerMappings都是在这个方法中初始化的。</p>
<p>重点看一下initHandlerMappings方法，这个方法是初始化url映射的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">	 * Initialize the HandlerMappings used by this class.</span><br><span class="line">	 * &lt;p&gt;If no HandlerMapping beans are defined in the BeanFactory for this namespace,</span><br><span class="line">	 * we default to BeanNameUrlHandlerMapping.</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initHandlerMappings</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.handlerMappings = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.detectAllHandlerMappings) &#123;</span><br><span class="line">			<span class="comment">// Find all HandlerMappings in the ApplicationContext, including ancestor contexts.</span></span><br><span class="line">			Map&lt;String, HandlerMapping&gt; matchingBeans =</span><br><span class="line">					BeanFactoryUtils.beansOfTypeIncludingAncestors(context, HandlerMapping.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">			<span class="keyword">if</span> (!matchingBeans.isEmpty()) &#123;</span><br><span class="line">				<span class="keyword">this</span>.handlerMappings = <span class="keyword">new</span> ArrayList&lt;HandlerMapping&gt;(matchingBeans.values());</span><br><span class="line">				<span class="comment">// We keep HandlerMappings in sorted order.</span></span><br><span class="line">				AnnotationAwareOrderComparator.sort(<span class="keyword">this</span>.handlerMappings);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				HandlerMapping hm = context.getBean(HANDLER_MAPPING_BEAN_NAME, HandlerMapping.class);</span><br><span class="line">				<span class="keyword">this</span>.handlerMappings = Collections.singletonList(hm);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (NoSuchBeanDefinitionException ex) &#123;</span><br><span class="line">				<span class="comment">// Ignore, we'll add a default HandlerMapping later.</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Ensure we have at least one HandlerMapping, by registering</span></span><br><span class="line">		<span class="comment">// a default HandlerMapping if no other mappings are found.</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="keyword">this</span>.handlerMappings == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">this</span>.handlerMappings = getDefaultStrategies(context, HandlerMapping.class);</span><br><span class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">				logger.debug(<span class="string">"No HandlerMappings found in servlet '"</span> + getServletName() + <span class="string">"': using default"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>  其根据 this.detectAllHandlerMappings 的值来确定是否扫描祖先定义的handlermappings，如果用户没有配置的话，就会使用默认的HandlerMapping<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Detect all HandlerMappings or just expect "handlerMapping" bean? */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> detectAllHandlerMappings = <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure></p>
<h3 id="service方法">service方法</h3><p>servlet接口中另外一个重要的方法叫做<code>service</code></p>
<p><code>service</code>方法最早是在<code>HttpServlet</code>类中实现的，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">     * Dispatches client requests to the protected</span><br><span class="line">     * &lt;code&gt;service&lt;/code&gt; method. There's no need to</span><br><span class="line">     * override this method.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> req   the &#123;<span class="doctag">@link</span> HttpServletRequest&#125; object that</span><br><span class="line">     *                  contains the request the client made of</span><br><span class="line">     *                  the servlet</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> res   the &#123;<span class="doctag">@link</span> HttpServletResponse&#125; object that</span><br><span class="line">     *                  contains the response the servlet returns</span><br><span class="line">     *                  to the client                                </span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@exception</span> IOException   if an input or output error occurs</span><br><span class="line">     *                              while the servlet is handling the</span><br><span class="line">     *                              HTTP request</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@exception</span> ServletException  if the HTTP request cannot</span><br><span class="line">     *                                  be handled</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@see</span> javax.servlet.Servlet#service</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span></span><br><span class="line">        <span class="keyword">throws</span> ServletException, IOException</span><br><span class="line">    </span>&#123;</span><br><span class="line">        HttpServletRequest  request;</span><br><span class="line">        HttpServletResponse response;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!(req <span class="keyword">instanceof</span> HttpServletRequest &amp;&amp;</span><br><span class="line">                res <span class="keyword">instanceof</span> HttpServletResponse)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"non-HTTP request or response"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        request = (HttpServletRequest) req;</span><br><span class="line">        response = (HttpServletResponse) res;</span><br><span class="line"></span><br><span class="line">        service(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>它又调用自身的一个<code>service</code>方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">    * Receives standard HTTP requests from the public</span><br><span class="line">    * &lt;code&gt;service&lt;/code&gt; method and dispatches</span><br><span class="line">    * them to the &lt;code&gt;do&lt;/code&gt;&lt;i&gt;XXX&lt;/i&gt; methods defined in</span><br><span class="line">    * this class. This method is an HTTP-specific version of the</span><br><span class="line">    * &#123;<span class="doctag">@link</span> javax.servlet.Servlet#service&#125; method. There's no</span><br><span class="line">    * need to override this method.</span><br><span class="line">    *</span><br><span class="line">    * <span class="doctag">@param</span> req   the &#123;<span class="doctag">@link</span> HttpServletRequest&#125; object that</span><br><span class="line">    *                  contains the request the client made of</span><br><span class="line">    *                  the servlet</span><br><span class="line">    *</span><br><span class="line">    * <span class="doctag">@param</span> resp  the &#123;<span class="doctag">@link</span> HttpServletResponse&#125; object that</span><br><span class="line">    *                  contains the response the servlet returns</span><br><span class="line">    *                  to the client                                </span><br><span class="line">    *</span><br><span class="line">    * <span class="doctag">@exception</span> IOException   if an input or output error occurs</span><br><span class="line">    *                              while the servlet is handling the</span><br><span class="line">    *                              HTTP request</span><br><span class="line">    *</span><br><span class="line">    * <span class="doctag">@exception</span> ServletException  if the HTTP request</span><br><span class="line">    *                                  cannot be handled</span><br><span class="line">    *</span><br><span class="line">    * <span class="doctag">@see</span> javax.servlet.Servlet#service</span><br><span class="line">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">       <span class="keyword">throws</span> ServletException, IOException</span><br><span class="line">   </span>&#123;</span><br><span class="line">       String method = req.getMethod();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (method.equals(METHOD_GET)) &#123;</span><br><span class="line">           <span class="keyword">long</span> lastModified = getLastModified(req);</span><br><span class="line">           <span class="keyword">if</span> (lastModified == -<span class="number">1</span>) &#123;</span><br><span class="line">               <span class="comment">// servlet doesn't support if-modified-since, no reason</span></span><br><span class="line">               <span class="comment">// to go through further expensive logic</span></span><br><span class="line">               doGet(req, resp);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">long</span> ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);</span><br><span class="line">               <span class="keyword">if</span> (ifModifiedSince &lt; lastModified) &#123;</span><br><span class="line">                   <span class="comment">// If the servlet mod time is later, call doGet()</span></span><br><span class="line">                   <span class="comment">// Round down to the nearest second for a proper compare</span></span><br><span class="line">                   <span class="comment">// A ifModifiedSince of -1 will always be less</span></span><br><span class="line">                   maybeSetLastModified(resp, lastModified);</span><br><span class="line">                   doGet(req, resp);</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_HEAD)) &#123;</span><br><span class="line">           <span class="keyword">long</span> lastModified = getLastModified(req);</span><br><span class="line">           maybeSetLastModified(resp, lastModified);</span><br><span class="line">           doHead(req, resp);</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_POST)) &#123;</span><br><span class="line">           doPost(req, resp);</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_PUT)) &#123;</span><br><span class="line">           doPut(req, resp);</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_DELETE)) &#123;</span><br><span class="line">           doDelete(req, resp);</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class="line">           doOptions(req,resp);</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_TRACE)) &#123;</span><br><span class="line">           doTrace(req,resp);</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">//</span></span><br><span class="line">           <span class="comment">// Note that this means NO servlet supports whatever</span></span><br><span class="line">           <span class="comment">// method was requested, anywhere on this server.</span></span><br><span class="line">           <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">           String errMsg = lStrings.getString(<span class="string">"http.method_not_implemented"</span>);</span><br><span class="line">           Object[] errArgs = <span class="keyword">new</span> Object[<span class="number">1</span>];</span><br><span class="line">           errArgs[<span class="number">0</span>] = method;</span><br><span class="line">           errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class="line"></span><br><span class="line">           resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<p>这段代码就是根据请求的类型调用相应的处理方法</p>
<p>这个方法又在<code>FrameWorkServlet</code>中被重写，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Override the parent class implementation in order to intercept PATCH requests.</span><br><span class="line"> */</span></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">    <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (HttpMethod.PATCH.matches(request.getMethod())) &#123;</span><br><span class="line">    processRequest(request, response);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.service(request, response);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>又增加了一个处理PATCH请求的方法，其他的还是调用<code>HttpServlet</code>的实现。</p>
<p>同时，<code>FrameWorkServlet</code>又将<code>HttpServlet</code>中对应的各种HTTP请求的方法都进行了重写，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">	 * Delegate GET requests to processRequest/doService.</span><br><span class="line">	 * &lt;p&gt;Will also be invoked by HttpServlet's default implementation of &#123;<span class="doctag">@code</span> doHead&#125;,</span><br><span class="line">	 * with a &#123;<span class="doctag">@code</span> NoBodyResponse&#125; that just captures the content length.</span><br><span class="line">	 * <span class="doctag">@see</span> #doService</span><br><span class="line">	 * <span class="doctag">@see</span> #doHead</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">			<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">		processRequest(request, response);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>所有的请求都被委托给了<code>processRequest</code>这个方法，它的实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">	 * Process this request, publishing an event regardless of the outcome.</span><br><span class="line">	 * &lt;p&gt;The actual event handling is performed by the abstract</span><br><span class="line">	 * &#123;<span class="doctag">@link</span> #doService&#125; template method.</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">			<span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">		Throwable failureCause = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">		LocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();</span><br><span class="line">		LocaleContext localeContext = buildLocaleContext(request);</span><br><span class="line"></span><br><span class="line">		RequestAttributes previousAttributes = RequestContextHolder.getRequestAttributes();</span><br><span class="line">		ServletRequestAttributes requestAttributes = buildRequestAttributes(request, response, previousAttributes);</span><br><span class="line"></span><br><span class="line">		WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line">		asyncManager.registerCallableInterceptor(FrameworkServlet.class.getName(), <span class="keyword">new</span> RequestBindingInterceptor());</span><br><span class="line"></span><br><span class="line">		initContextHolders(request, localeContext, requestAttributes);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			doService(request, response);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (ServletException ex) &#123;</span><br><span class="line">			failureCause = ex;</span><br><span class="line">			<span class="keyword">throw</span> ex;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">			failureCause = ex;</span><br><span class="line">			<span class="keyword">throw</span> ex;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">			failureCause = ex;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> NestedServletException(<span class="string">"Request processing failed"</span>, ex);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">finally</span> &#123;</span><br><span class="line">			resetContextHolders(request, previousLocaleContext, previousAttributes);</span><br><span class="line">			<span class="keyword">if</span> (requestAttributes != <span class="keyword">null</span>) &#123;</span><br><span class="line">				requestAttributes.requestCompleted();</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">				<span class="keyword">if</span> (failureCause != <span class="keyword">null</span>) &#123;</span><br><span class="line">					<span class="keyword">this</span>.logger.debug(<span class="string">"Could not complete request"</span>, failureCause);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">						logger.debug(<span class="string">"Leaving response open for concurrent processing"</span>);</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> &#123;</span><br><span class="line">						<span class="keyword">this</span>.logger.debug(<span class="string">"Successfully completed request"</span>);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			publishRequestHandledEvent(request, response, startTime, failureCause);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码的异常处理很值得借鉴，上述代码中<code>doService(request, response)</code>是核心。</p>
<p>它是<code>FrameWorkServlet</code>中定义的一个接口，它在<code>DispatcherServlet</code>中被实现。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Subclasses must implement this method to do the work of request handling,</span><br><span class="line"> * receiving a centralized callback for GET, POST, PUT and DELETE.</span><br><span class="line"> * &lt;p&gt;The contract is essentially the same as that for the commonly overridden</span><br><span class="line"> * &#123;<span class="doctag">@code</span> doGet&#125; or &#123;<span class="doctag">@code</span> doPost&#125; methods of HttpServlet.</span><br><span class="line"> * &lt;p&gt;This class intercepts calls to ensure that exception handling and</span><br><span class="line"> * event publication takes place.</span><br><span class="line"> * <span class="doctag">@param</span> request current HTTP request</span><br><span class="line"> * <span class="doctag">@param</span> response current HTTP response</span><br><span class="line"> * <span class="doctag">@throws</span> Exception in case of any kind of processing failure</span><br><span class="line"> * <span class="doctag">@see</span> javax.servlet.http.HttpServlet#doGet</span><br><span class="line"> * <span class="doctag">@see</span> javax.servlet.http.HttpServlet#doPost</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">    <span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure></p>
<p><code>DispatcherServlet</code>中的<code>doService</code>接口代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">	 * Exposes the DispatcherServlet-specific request attributes and delegates to &#123;<span class="doctag">@link</span> #doDispatch&#125;</span><br><span class="line">	 * for the actual dispatching.</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">			String resumed = WebAsyncUtils.getAsyncManager(request).hasConcurrentResult() ? <span class="string">" resumed"</span> : <span class="string">""</span>;</span><br><span class="line">			logger.debug(<span class="string">"DispatcherServlet with name '"</span> + getServletName() + <span class="string">"'"</span> + resumed +</span><br><span class="line">					<span class="string">" processing "</span> + request.getMethod() + <span class="string">" request for ["</span> + getRequestUri(request) + <span class="string">"]"</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Keep a snapshot of the request attributes in case of an include,</span></span><br><span class="line">		<span class="comment">// to be able to restore the original attributes after the include.</span></span><br><span class="line">		Map&lt;String, Object&gt; attributesSnapshot = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">if</span> (WebUtils.isIncludeRequest(request)) &#123;</span><br><span class="line">			attributesSnapshot = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">			Enumeration&lt;?&gt; attrNames = request.getAttributeNames();</span><br><span class="line">			<span class="keyword">while</span> (attrNames.hasMoreElements()) &#123;</span><br><span class="line">				String attrName = (String) attrNames.nextElement();</span><br><span class="line">				<span class="keyword">if</span> (<span class="keyword">this</span>.cleanupAfterInclude || attrName.startsWith(<span class="string">"org.springframework.web.servlet"</span>)) &#123;</span><br><span class="line">					attributesSnapshot.put(attrName, request.getAttribute(attrName));</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Make framework objects available to handlers and view objects.</span></span><br><span class="line">		request.setAttribute(WEB_APPLICATION_CONTEXT_ATTRIBUTE, getWebApplicationContext());</span><br><span class="line">		request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, <span class="keyword">this</span>.localeResolver);</span><br><span class="line">		request.setAttribute(THEME_RESOLVER_ATTRIBUTE, <span class="keyword">this</span>.themeResolver);</span><br><span class="line">		request.setAttribute(THEME_SOURCE_ATTRIBUTE, getThemeSource());</span><br><span class="line"></span><br><span class="line">		FlashMap inputFlashMap = <span class="keyword">this</span>.flashMapManager.retrieveAndUpdate(request, response);</span><br><span class="line">		<span class="keyword">if</span> (inputFlashMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">			request.setAttribute(INPUT_FLASH_MAP_ATTRIBUTE, Collections.unmodifiableMap(inputFlashMap));</span><br><span class="line">		&#125;</span><br><span class="line">		request.setAttribute(OUTPUT_FLASH_MAP_ATTRIBUTE, <span class="keyword">new</span> FlashMap());</span><br><span class="line">		request.setAttribute(FLASH_MAP_MANAGER_ATTRIBUTE, <span class="keyword">this</span>.flashMapManager);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			doDispatch(request, response);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (!WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">				<span class="comment">// Restore the original attribute snapshot, in case of an include.</span></span><br><span class="line">				<span class="keyword">if</span> (attributesSnapshot != <span class="keyword">null</span>) &#123;</span><br><span class="line">					restoreAttributesAfterInclude(request, attributesSnapshot);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>每次请求过来都会将系统的一些属性塞到request的attribute中，以便后面的handlers和view能够访问到。</p>
<p>其中比较重要的是 <code>doDispatch(request, response)</code>，正是这个方法使得请求被真正的转发。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">	 * Process the actual dispatching to the handler.</span><br><span class="line">	 * &lt;p&gt;The handler will be obtained by applying the servlet's HandlerMappings in order.</span><br><span class="line">	 * The HandlerAdapter will be obtained by querying the servlet's installed HandlerAdapters</span><br><span class="line">	 * to find the first that supports the handler class.</span><br><span class="line">	 * &lt;p&gt;All HTTP methods are handled by this method. It's up to HandlerAdapters or handlers</span><br><span class="line">	 * themselves to decide which methods are acceptable.</span><br><span class="line">	 * <span class="doctag">@param</span> request current HTTP request</span><br><span class="line">	 * <span class="doctag">@param</span> response current HTTP response</span><br><span class="line">	 * <span class="doctag">@throws</span> Exception in case of any kind of processing failure</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		HttpServletRequest processedRequest = request;</span><br><span class="line">		HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">		WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			ModelAndView mv = <span class="keyword">null</span>;</span><br><span class="line">			Exception dispatchException = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				processedRequest = checkMultipart(request);</span><br><span class="line">				multipartRequestParsed = (processedRequest != request);</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Determine handler for the current request.</span></span><br><span class="line">				mappedHandler = getHandler(processedRequest);</span><br><span class="line">				<span class="keyword">if</span> (mappedHandler == <span class="keyword">null</span> || mappedHandler.getHandler() == <span class="keyword">null</span>) &#123;</span><br><span class="line">					noHandlerFound(processedRequest, response);</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Determine handler adapter for the current request.</span></span><br><span class="line">				HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Process last-modified header, if supported by the handler.</span></span><br><span class="line">				String method = request.getMethod();</span><br><span class="line">				<span class="keyword">boolean</span> isGet = <span class="string">"GET"</span>.equals(method);</span><br><span class="line">				<span class="keyword">if</span> (isGet || <span class="string">"HEAD"</span>.equals(method)) &#123;</span><br><span class="line">					<span class="keyword">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line">					<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">						logger.debug(<span class="string">"Last-Modified value for ["</span> + getRequestUri(request) + <span class="string">"] is: "</span> + lastModified);</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (<span class="keyword">new</span> ServletWebRequest(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line">						<span class="keyword">return</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// Actually invoke the handler.</span></span><br><span class="line">				mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				applyDefaultViewName(processedRequest, mv);</span><br><span class="line">				mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">				dispatchException = ex;</span><br><span class="line">			&#125;</span><br><span class="line">			processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">			triggerAfterCompletion(processedRequest, response, mappedHandler, ex);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (Error err) &#123;</span><br><span class="line">			triggerAfterCompletionWithError(processedRequest, response, mappedHandler, err);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">				<span class="comment">// Instead of postHandle and afterCompletion</span></span><br><span class="line">				<span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">					mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="comment">// Clean up any resources used by a multipart request.</span></span><br><span class="line">				<span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">					cleanupMultipart(processedRequest);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>handler 获取的顺序是从DispatcherServlet的HandlerMapping中按顺序取出的</p>
<p>Handler对应的HandlerAdapter会从安装的HandlerAdapter找，将返回第一个合适的Adapter</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Determine handler for the current request.</span></span><br><span class="line">mappedHandler = getHandler(processedRequest);</span><br><span class="line">            ...</span><br><span class="line"><span class="comment">// Determine handler adapter for the current request.</span></span><br><span class="line">HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line">            ...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Actually invoke the handler.</span></span><br><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line"></span><br><span class="line">mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line"></span><br><span class="line">processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</span><br></pre></td></tr></table></figure>
<p>在applyPreHandle中也是检查拦截器的操作，并根据拦截器返回的布尔类型，判断是否进一步处理</p>
<p>其中在applyPostHandle中又检查是否有各种拦截器,调用拦截器的postHandle方法</p>
<p>处理完毕后，调用processDispatchResult方法将处理后的请求和mv进行分发</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//HandlerExecutionChain.java</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">/**</span><br><span class="line">	 * Apply preHandle methods of registered interceptors.</span><br><span class="line">	 * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the execution chain should proceed with the</span><br><span class="line">	 * next interceptor or the handler itself. Else, DispatcherServlet assumes</span><br><span class="line">	 * that this interceptor has already dealt with the response itself.</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">applyPreHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		HandlerInterceptor[] interceptors = getInterceptors();</span><br><span class="line">		<span class="keyword">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; interceptors.length; i++) &#123;</span><br><span class="line">				HandlerInterceptor interceptor = interceptors[i];</span><br><span class="line">				<span class="keyword">if</span> (!interceptor.preHandle(request, response, <span class="keyword">this</span>.handler)) &#123;</span><br><span class="line">					triggerAfterCompletion(request, response, <span class="keyword">null</span>);</span><br><span class="line">					<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">this</span>.interceptorIndex = i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	* Apply postHandle methods of registered interceptors.</span><br><span class="line">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">applyPostHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, ModelAndView mv)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">	HandlerInterceptor[] interceptors = getInterceptors();</span><br><span class="line">	<span class="keyword">if</span> (!ObjectUtils.isEmpty(interceptors)) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = interceptors.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">			HandlerInterceptor interceptor = interceptors[i];</span><br><span class="line">			interceptor.postHandle(request, response, <span class="keyword">this</span>.handler, mv);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>handler处理后的结果是通过processDispatchResult传出去的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DispatcherServlet.java</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	 * Handle the result of handler selection and handler invocation, which is</span><br><span class="line">	 * either a ModelAndView or an Exception to be resolved to a ModelAndView.</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processDispatchResult</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span><br><span class="line">			HandlerExecutionChain mappedHandler, ModelAndView mv, Exception exception)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">boolean</span> errorView = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ModelAndViewDefiningException) &#123;</span><br><span class="line">				logger.debug(<span class="string">"ModelAndViewDefiningException encountered"</span>, exception);</span><br><span class="line">				mv = ((ModelAndViewDefiningException) exception).getModelAndView();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				Object handler = (mappedHandler != <span class="keyword">null</span> ? mappedHandler.getHandler() : <span class="keyword">null</span>);</span><br><span class="line">				mv = processHandlerException(request, response, handler, exception);</span><br><span class="line">				errorView = (mv != <span class="keyword">null</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Did the handler return a view to render?</span></span><br><span class="line">		<span class="keyword">if</span> (mv != <span class="keyword">null</span> &amp;&amp; !mv.wasCleared()) &#123;</span><br><span class="line">			render(mv, request, response);</span><br><span class="line">			<span class="keyword">if</span> (errorView) &#123;</span><br><span class="line">				WebUtils.clearErrorRequestAttributes(request);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">				logger.debug(<span class="string">"Null ModelAndView returned to DispatcherServlet with name '"</span> + getServletName() +</span><br><span class="line">						<span class="string">"': assuming HandlerAdapter completed request handling"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (WebAsyncUtils.getAsyncManager(request).isConcurrentHandlingStarted()) &#123;</span><br><span class="line">			<span class="comment">// Concurrent handling started during a forward</span></span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">			mappedHandler.triggerAfterCompletion(request, response, <span class="keyword">null</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>去各种判断，核心的方法就在<code>render(mv, request, response)</code>;</p>
<p>它负责渲染返回的<code>ModelAndView</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DispatcherServlet.java</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span><br><span class="line">	* Render the given ModelAndView.</span><br><span class="line">	* &lt;p&gt;This is the last stage in handling a request. It may involve resolving the view by name.</span><br><span class="line">	* <span class="doctag">@param</span> mv the ModelAndView to render</span><br><span class="line">	* <span class="doctag">@param</span> request current HTTP servlet request</span><br><span class="line">	* <span class="doctag">@param</span> response current HTTP servlet response</span><br><span class="line">	* <span class="doctag">@throws</span> ServletException if view is missing or cannot be resolved</span><br><span class="line">	* <span class="doctag">@throws</span> Exception if there's a problem rendering the view</span><br><span class="line">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(ModelAndView mv, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		<span class="comment">// Determine locale for request and apply it to the response.</span></span><br><span class="line">		Locale locale = <span class="keyword">this</span>.localeResolver.resolveLocale(request);</span><br><span class="line">		response.setLocale(locale);</span><br><span class="line"></span><br><span class="line">		View view;</span><br><span class="line">		<span class="keyword">if</span> (mv.isReference()) &#123;</span><br><span class="line">			<span class="comment">// We need to resolve the view name.</span></span><br><span class="line">			view = resolveViewName(mv.getViewName(), mv.getModelInternal(), locale, request);</span><br><span class="line">			<span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"Could not resolve view with name '"</span> + mv.getViewName() +</span><br><span class="line">						<span class="string">"' in servlet with name '"</span> + getServletName() + <span class="string">"'"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// No need to lookup: the ModelAndView object contains the actual View object.</span></span><br><span class="line">			view = mv.getView();</span><br><span class="line">			<span class="keyword">if</span> (view == <span class="keyword">null</span>) &#123;</span><br><span class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">"ModelAndView ["</span> + mv + <span class="string">"] neither contains a view name nor a "</span> +</span><br><span class="line">						<span class="string">"View object in servlet with name '"</span> + getServletName() + <span class="string">"'"</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Delegate to the View object for rendering.</span></span><br><span class="line">		<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">			logger.debug(<span class="string">"Rendering view ["</span> + view + <span class="string">"] in DispatcherServlet with name '"</span> + getServletName() + <span class="string">"'"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			view.render(mv.getModelInternal(), request, response);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">			<span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">				logger.debug(<span class="string">"Error rendering view ["</span> + view + <span class="string">"] in DispatcherServlet with name '"</span> +</span><br><span class="line">						getServletName() + <span class="string">"'"</span>, ex);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">throw</span> ex;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>这个函数解析mv对象，如果是一个引用名就查找对应的view，最终返回一个View对象，</p>
<p>然后将渲染的工作委托给这个view对象，<code>view.render(mv.getModelInternal(), request, response);</code></p>
<p>其中<code>resolveViewName</code>方法遍历 <code>DispatcherServlet</code>中注册的<code>viewResolver</code>，返回第一个非空的结果</p>
<p>查找视图名称的方法如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/** List of ViewResolvers used by this servlet */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;ViewResolver&gt; viewResolvers;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line">	* Resolve the given view name into a View object (to be rendered).</span><br><span class="line">	* &lt;p&gt;The default implementations asks all ViewResolvers of this dispatcher.</span><br><span class="line">	* Can be overridden for custom resolution strategies, potentially based on</span><br><span class="line">	* specific model attributes or request parameters.</span><br><span class="line">	* <span class="doctag">@param</span> viewName the name of the view to resolve</span><br><span class="line">	* <span class="doctag">@param</span> model the model to be passed to the view</span><br><span class="line">	* <span class="doctag">@param</span> locale the current locale</span><br><span class="line">	* <span class="doctag">@param</span> request current HTTP servlet request</span><br><span class="line">	* <span class="doctag">@return</span> the View object, or &#123;<span class="doctag">@code</span> null&#125; if none found</span><br><span class="line">	* <span class="doctag">@throws</span> Exception if the view cannot be resolved</span><br><span class="line">	* (typically in case of problems creating an actual View object)</span><br><span class="line">	* <span class="doctag">@see</span> ViewResolver#resolveViewName</span><br><span class="line">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> View <span class="title">resolveViewName</span><span class="params">(String viewName, Map&lt;String, Object&gt; model, Locale locale,</span><br><span class="line">		HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (ViewResolver viewResolver : <span class="keyword">this</span>.viewResolvers) &#123;</span><br><span class="line">				View view = viewResolver.resolveViewName(viewName, locale);</span><br><span class="line">				<span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">					<span class="keyword">return</span> view;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p>最终视图的渲染是View中定义的<code>render</code>方法进行的，它是一个抽象的接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line">	 * Render the view given the specified model.</span><br><span class="line">	 * &lt;p&gt;The first step will be preparing the request: In the JSP case,</span><br><span class="line">	 * this would mean setting model objects as request attributes.</span><br><span class="line">	 * The second step will be the actual rendering of the view,</span><br><span class="line">	 * for example including the JSP via a RequestDispatcher.</span><br><span class="line">	 * <span class="doctag">@param</span> model Map with name Strings as keys and corresponding model</span><br><span class="line">	 * objects as values (Map can also be &#123;<span class="doctag">@code</span> null&#125; in case of empty model)</span><br><span class="line">	 * <span class="doctag">@param</span> request current HTTP request</span><br><span class="line">	 * <span class="doctag">@param</span> response HTTP response we are building</span><br><span class="line">	 * <span class="doctag">@throws</span> Exception if rendering failed</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">render</span><span class="params">(Map&lt;String, ?&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception</span>;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="架构">架构</h2><p><img src="arch.jpg" alt=""></p>
<p>SpringMVC的核心是 <code>DispatcherServlet</code></p>
<h2 id="本质">本质</h2><p>我们通过在<code>w]]>
    </summary>
    
      <category term="spring mvc" scheme="http://qsli.github.io/tags/spring-mvc/"/>
    
      <category term="spring" scheme="http://qsli.github.io/categories/spring/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JS跨域原理]]></title>
    <link href="http://qsli.github.io/2016/10/02/jsonp/"/>
    <id>http://qsli.github.io/2016/10/02/jsonp/</id>
    <published>2016-10-02T03:42:13.000Z</published>
    <updated>2016-10-02T03:42:13.143Z</updated>
    <content type="html"><![CDATA[<h2 id="同源策略">同源策略</h2><blockquote>
<p>同源策略限制了一个源（origin）中加载文本或脚本与来自其它源（origin）中资源的交互方式。</p>
</blockquote>
<p>例如在使用XMLHttpRequest 或 <img> 标签时则会受到同源策略的约束。交互通常分为三类：</p>
<ol>
<li><p>通常允许进行跨域写操作（<code>Cross-origin writes</code>）。例如链接（links），重定向以及表单提交。特定少数的HTTP请求需要添加 preflight。</p>
</li>
<li><p>通常允许跨域资源嵌入（<code>Cross-origin embedding</code>）。</p>
</li>
<li>通常不允许跨域读操作（<code>Cross-origin reads</code>）。</li>
</ol>
<p>下表给出了相对<code>http://store.company.com/dir/page.html</code>同源检测的示例:</p>
<table>
<thead>
<tr>
<th>URL</th>
<th>结果</th>
<th>原因</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://store.company.com/dir2/other.html" target="_blank" rel="external">http://store.company.com/dir2/other.html</a></td>
<td>成功</td>
<td></td>
</tr>
<tr>
<td><a href="http://store.company.com/dir/inner/another.html" target="_blank" rel="external">http://store.company.com/dir/inner/another.html</a></td>
<td>成功</td>
<td></td>
</tr>
<tr>
<td><a href="https://store.company.com/secure.html" target="_blank" rel="external">https://store.company.com/secure.html</a></td>
<td>失败</td>
<td>协议不同</td>
</tr>
<tr>
<td><a href="http://store.company.com:81/dir/etc.html" target="_blank" rel="external">http://store.company.com:81/dir/etc.html</a></td>
<td>失败</td>
<td>端口不同</td>
</tr>
<tr>
<td><a href="http://news.company.com/dir/other.html" target="_blank" rel="external">http://news.company.com/dir/other.html</a></td>
<td>失败</td>
<td>主机名不同</td>
</tr>
</tbody>
</table>
<h2 id="ajax_跨域">ajax 跨域</h2><blockquote>
<p>同源政策规定，AJAX请求只能发给同源的网址，否则就报错。</p>
</blockquote>
<p>请求其他域资源的时候，由于同源策略的限制一般会出现如下的错误：</p>
<blockquote>
<p>XMLHttpRequest cannot load <a href="http://xxxxx" target="_blank" rel="external">http://xxxxx</a>. No ‘Access-Control-Allow-Origin’ header is present on the requested resource. Origin ‘null’ is therefore not allowed access. The response had HTTP status code 500.</p>
</blockquote>
<h3 id="JSONP">JSONP</h3><p><code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;</code> 标签是支持跨域的，JSONP的原理就是使用这个标签。</p>
<p>服务器会在传给浏览器前将JSON数据填充到回调函数中</p>
<script src="//gist.github.com/cc896797f4ef746e9cbc75b8f6ebc24f.js"></script>
<p>上述代码中<code>return param + &#39;(&#39; + json.dumps(data) + &#39;)&#39;</code>是将返回的数据填充到回调函数中</p>
<p>前端的代码如下：</p>
<script src="//gist.github.com/8d90c2a0599818488a647177b4f196c2.js"></script>
<p>使用了jQuery的ajax请求</p>
<p><strong>但是JSONP的方式只支持get请求</strong></p>
<h3 id="CORS_(Cross-Origin_Resource_Sharing)">CORS (<code>Cross-Origin Resource Sharing</code>)</h3><p>CORS是一个W3C标准, 不仅支持GET方式还支持POST方式的跨域请求</p>
<blockquote>
<p>浏览器将CORS请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。</p>
</blockquote>
<p>请求的流程图如下：<br><img src="cors.png" alt=""></p>
<p>详细原理参考阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="external">跨域资源共享 CORS 详解</a></p>
<h3 id="Websocket">Websocket</h3><blockquote>
<p>WebSocket是一种通信协议，使用ws://（非加密）和wss://（加密）作为协议前缀。该协议不实行同源政策，只要服务器支持，就可以通过它进行跨源通信。</p>
</blockquote>
<p>详细原理参考阮一峰老师的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy" target="_blank" rel="external">浏览器的同源策略</a></p>
<h2 id="参考链接">参考链接</h2><ol>
<li><p><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="external">跨域资源共享 CORS 详解</a></p>
</li>
<li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy" target="_blank" rel="external">浏览器的同源策略</a></p>
</li>
<li><p><a href="http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html" target="_blank" rel="external">浏览器同源政策及其规避方法</a></p>
</li>
<li><p><a href="http://blog.csdn.net/fdipzone/article/details/46390573" target="_blank" rel="external"> ajax 设置Access-Control-Allow-Origin实现跨域访问</a></p>
</li>
<li><p><a href="http://liuwanlin.info/corsxiang-jie/" target="_blank" rel="external">使用CORS（译）</a></p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="同源策略">同源策略</h2><blockquote>
<p>同源策略限制了一个源（origin）中加载文本或脚本与来自其它源（origin）中资源的交互方式。</p>
</blockquote>
<p>例如在使用XMLHttpRequest 或 <img> 标签]]>
    </summary>
    
      <category term="ajax" scheme="http://qsli.github.io/tags/ajax/"/>
    
      <category term="fe" scheme="http://qsli.github.io/categories/fe/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[数据库分页]]></title>
    <link href="http://qsli.github.io/2016/09/30/pagination/"/>
    <id>http://qsli.github.io/2016/09/30/pagination/</id>
    <published>2016-09-29T16:19:07.000Z</published>
    <updated>2016-09-29T16:51:48.544Z</updated>
    <content type="html"><![CDATA[<h2 id="逻辑分页">逻辑分页</h2><p>就是将所有的结果集拿出来，然后在程序中进行截取，由于所有的数据都是在内存中的，占用内存比较大</p>
<h2 id="物理分页">物理分页</h2><p>物理分页是指基于数据库提供的类似 <code>limit offset,rows</code>这样的语法。</p>
<p>但是，比如<code>limit 10000,20</code>,  就会读取10020条数据，但是只会返回后面20条数据。</p>
<h2 id="手工计算">手工计算</h2><p>如果id是有序的，可以做一个简单的转换，比如使用  <code>where id between 10000 and 10020</code>, 这样的效率就会相对的高些</p>
<h2 id="附件">附件</h2><p> <a href="PPC2009_mysql_pagination.pdf">PPC2009_mysql_pagination.pdf</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="逻辑分页">逻辑分页</h2><p>就是将所有的结果集拿出来，然后在程序中进行截取，由于所有的数据都是在内存中的，占用内存比较大</p>
<h2 id="物理分页">物理分页</h2><p>物理分页是指基于数据库提供的类似 <code>limit offset,r]]>
    </summary>
    
      <category term="mysql" scheme="http://qsli.github.io/tags/mysql/"/>
    
      <category term="base" scheme="http://qsli.github.io/categories/base/"/>
    
  </entry>
  
</feed>
